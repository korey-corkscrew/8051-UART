                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.9 #12669 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4330lab7
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _RAMwrite_PARM_2
                                     12 	.globl _setAddress_PARM_4
                                     13 	.globl _setAddress_PARM_3
                                     14 	.globl _setAddress_PARM_2
                                     15 	.globl _setTextColor_PARM_2
                                     16 	.globl _setCursor_PARM_2
                                     17 	.globl _rtcCmd_PARM_2
                                     18 	.globl _writeRegister16_PARM_2
                                     19 	.globl _writeRegister8_PARM_2
                                     20 	.globl _keypad
                                     21 	.globl _main
                                     22 	.globl _LCD_mainMenu
                                     23 	.globl _UART
                                     24 	.globl _UART_send
                                     25 	.globl _UART_parity
                                     26 	.globl _UART_dataBits
                                     27 	.globl _UART_dataRate
                                     28 	.globl _resetLCD1
                                     29 	.globl _FIND
                                     30 	.globl _EDIT
                                     31 	.globl _EDIT_display
                                     32 	.globl _DUMP
                                     33 	.globl _DUMP_display
                                     34 	.globl _COUNT
                                     35 	.globl _MOVE
                                     36 	.globl _RAM_CHECK
                                     37 	.globl _inputDataSize
                                     38 	.globl _inputDataType
                                     39 	.globl _inputRead8
                                     40 	.globl _inputRead16
                                     41 	.globl _invalidInput
                                     42 	.globl _resetLCD
                                     43 	.globl _RAMread
                                     44 	.globl _RAMwrite
                                     45 	.globl _HEXtoASCII_16write
                                     46 	.globl _HEXtoASCII
                                     47 	.globl _ASCIItoHEX
                                     48 	.globl _drawChar
                                     49 	.globl _setRotation
                                     50 	.globl _UART_transmit
                                     51 	.globl _UART_Init
                                     52 	.globl _ISR_receive
                                     53 	.globl _CY
                                     54 	.globl _AC
                                     55 	.globl _F0
                                     56 	.globl _RS1
                                     57 	.globl _RS0
                                     58 	.globl _OV
                                     59 	.globl _FL
                                     60 	.globl _P
                                     61 	.globl _TF2
                                     62 	.globl _EXF2
                                     63 	.globl _RCLK
                                     64 	.globl _TCLK
                                     65 	.globl _EXEN2
                                     66 	.globl _TR2
                                     67 	.globl _C_T2
                                     68 	.globl _CP_RL2
                                     69 	.globl _T2CON_7
                                     70 	.globl _T2CON_6
                                     71 	.globl _T2CON_5
                                     72 	.globl _T2CON_4
                                     73 	.globl _T2CON_3
                                     74 	.globl _T2CON_2
                                     75 	.globl _T2CON_1
                                     76 	.globl _T2CON_0
                                     77 	.globl _PT2
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _RD
                                     84 	.globl _WR
                                     85 	.globl _T1
                                     86 	.globl _T0
                                     87 	.globl _INT1
                                     88 	.globl _INT0
                                     89 	.globl _TXD
                                     90 	.globl _RXD
                                     91 	.globl _P3_7
                                     92 	.globl _P3_6
                                     93 	.globl _P3_5
                                     94 	.globl _P3_4
                                     95 	.globl _P3_3
                                     96 	.globl _P3_2
                                     97 	.globl _P3_1
                                     98 	.globl _P3_0
                                     99 	.globl _EA
                                    100 	.globl _ET2
                                    101 	.globl _ES
                                    102 	.globl _ET1
                                    103 	.globl _EX1
                                    104 	.globl _ET0
                                    105 	.globl _EX0
                                    106 	.globl _P2_7
                                    107 	.globl _P2_6
                                    108 	.globl _P2_5
                                    109 	.globl _P2_4
                                    110 	.globl _P2_3
                                    111 	.globl _P2_2
                                    112 	.globl _P2_1
                                    113 	.globl _P2_0
                                    114 	.globl _SM0
                                    115 	.globl _SM1
                                    116 	.globl _SM2
                                    117 	.globl _REN
                                    118 	.globl _TB8
                                    119 	.globl _RB8
                                    120 	.globl _TI
                                    121 	.globl _RI
                                    122 	.globl _T2EX
                                    123 	.globl _T2
                                    124 	.globl _P1_7
                                    125 	.globl _P1_6
                                    126 	.globl _P1_5
                                    127 	.globl _P1_4
                                    128 	.globl _P1_3
                                    129 	.globl _P1_2
                                    130 	.globl _P1_1
                                    131 	.globl _P1_0
                                    132 	.globl _TF1
                                    133 	.globl _TR1
                                    134 	.globl _TF0
                                    135 	.globl _TR0
                                    136 	.globl _IE1
                                    137 	.globl _IT1
                                    138 	.globl _IE0
                                    139 	.globl _IT0
                                    140 	.globl _P0_7
                                    141 	.globl _P0_6
                                    142 	.globl _P0_5
                                    143 	.globl _P0_4
                                    144 	.globl _P0_3
                                    145 	.globl _P0_2
                                    146 	.globl _P0_1
                                    147 	.globl _P0_0
                                    148 	.globl _B
                                    149 	.globl _A
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _TH2
                                    153 	.globl _TL2
                                    154 	.globl _RCAP2H
                                    155 	.globl _RCAP2L
                                    156 	.globl _T2MOD
                                    157 	.globl _T2CON
                                    158 	.globl _IP
                                    159 	.globl _P3
                                    160 	.globl _IE
                                    161 	.globl _P2
                                    162 	.globl _SBUF
                                    163 	.globl _SCON
                                    164 	.globl _P1
                                    165 	.globl _TH1
                                    166 	.globl _TH0
                                    167 	.globl _TL1
                                    168 	.globl _TL0
                                    169 	.globl _TMOD
                                    170 	.globl _TCON
                                    171 	.globl _PCON
                                    172 	.globl _DPH
                                    173 	.globl _DPL
                                    174 	.globl _SP
                                    175 	.globl _P0
                                    176 	.globl _drawChar_PARM_6
                                    177 	.globl _drawChar_PARM_5
                                    178 	.globl _drawChar_PARM_4
                                    179 	.globl _drawChar_PARM_3
                                    180 	.globl _drawChar_PARM_2
                                    181 	.globl _fillRect_PARM_5
                                    182 	.globl _fillRect_PARM_4
                                    183 	.globl _fillRect_PARM_3
                                    184 	.globl _fillRect_PARM_2
                                    185 	.globl _drawPixel_PARM_3
                                    186 	.globl _drawPixel_PARM_2
                                    187 	.globl _rtcWrite_PARM_2
                                    188 	.globl _received_flag
                                    189 	.globl _received_byte
                                    190 	.globl _parity
                                    191 	.globl _dataBits
                                    192 	.globl _dataRate
                                    193 	.globl _ts
                                    194 	.globl _y
                                    195 	.globl _x
                                    196 	.globl _textSizeHold
                                    197 	.globl _yCursorHold
                                    198 	.globl _xCursorHold
                                    199 	.globl _endAddrCalc
                                    200 	.globl _count
                                    201 	.globl _ASCII
                                    202 	.globl _byte1
                                    203 	.globl _byte
                                    204 	.globl _currAddr1
                                    205 	.globl _currAddr0
                                    206 	.globl _addr3
                                    207 	.globl _addr2
                                    208 	.globl _addr1
                                    209 	.globl _addr0
                                    210 	.globl _data
                                    211 	.globl _scrollEnd
                                    212 	.globl _dataEnd
                                    213 	.globl _validInput
                                    214 	.globl _dataSize
                                    215 	.globl _dataType
                                    216 	.globl _input8
                                    217 	.globl _input16
                                    218 	.globl _key
                                    219 	.globl __height
                                    220 	.globl __width
                                    221 	.globl _textbgcolor
                                    222 	.globl _textcolor
                                    223 	.globl _rotation
                                    224 	.globl _textsize
                                    225 	.globl _cursor_y
                                    226 	.globl _cursor_x
                                    227 	.globl _read_ram_address
                                    228 	.globl _seg7_address
                                    229 	.globl _lcd_address
                                    230 	.globl _rowloc
                                    231 	.globl _colloc
                                    232 	.globl _delay
                                    233 	.globl _writeRegister8
                                    234 	.globl _writeRegister16
                                    235 	.globl _rtcInit
                                    236 	.globl _rtcBusy
                                    237 	.globl _rtcCmd
                                    238 	.globl _rtcWrite
                                    239 	.globl _rtcRead
                                    240 	.globl _rtcPrint
                                    241 	.globl _setCursor
                                    242 	.globl _setTextColor
                                    243 	.globl _setTextSize
                                    244 	.globl _setAddress
                                    245 	.globl _TFT_LCD_INIT
                                    246 	.globl _drawPixel
                                    247 	.globl _fillRect
                                    248 	.globl _fillScreen
                                    249 	.globl _write
                                    250 	.globl _LCD_string_write
                                    251 	.globl _keyDetect
                                    252 	.globl _HEXtoASCII_8write
                                    253 	.globl _testRAM
                                    254 	.globl _FIND_display
                                    255 ;--------------------------------------------------------
                                    256 ; special function registers
                                    257 ;--------------------------------------------------------
                                    258 	.area RSEG    (ABS,DATA)
      000000                        259 	.org 0x0000
                           000080   260 _P0	=	0x0080
                           000081   261 _SP	=	0x0081
                           000082   262 _DPL	=	0x0082
                           000083   263 _DPH	=	0x0083
                           000087   264 _PCON	=	0x0087
                           000088   265 _TCON	=	0x0088
                           000089   266 _TMOD	=	0x0089
                           00008A   267 _TL0	=	0x008a
                           00008B   268 _TL1	=	0x008b
                           00008C   269 _TH0	=	0x008c
                           00008D   270 _TH1	=	0x008d
                           000090   271 _P1	=	0x0090
                           000098   272 _SCON	=	0x0098
                           000099   273 _SBUF	=	0x0099
                           0000A0   274 _P2	=	0x00a0
                           0000A8   275 _IE	=	0x00a8
                           0000B0   276 _P3	=	0x00b0
                           0000B8   277 _IP	=	0x00b8
                           0000C8   278 _T2CON	=	0x00c8
                           0000C9   279 _T2MOD	=	0x00c9
                           0000CA   280 _RCAP2L	=	0x00ca
                           0000CB   281 _RCAP2H	=	0x00cb
                           0000CC   282 _TL2	=	0x00cc
                           0000CD   283 _TH2	=	0x00cd
                           0000D0   284 _PSW	=	0x00d0
                           0000E0   285 _ACC	=	0x00e0
                           0000E0   286 _A	=	0x00e0
                           0000F0   287 _B	=	0x00f0
                                    288 ;--------------------------------------------------------
                                    289 ; special function bits
                                    290 ;--------------------------------------------------------
                                    291 	.area RSEG    (ABS,DATA)
      000000                        292 	.org 0x0000
                           000080   293 _P0_0	=	0x0080
                           000081   294 _P0_1	=	0x0081
                           000082   295 _P0_2	=	0x0082
                           000083   296 _P0_3	=	0x0083
                           000084   297 _P0_4	=	0x0084
                           000085   298 _P0_5	=	0x0085
                           000086   299 _P0_6	=	0x0086
                           000087   300 _P0_7	=	0x0087
                           000088   301 _IT0	=	0x0088
                           000089   302 _IE0	=	0x0089
                           00008A   303 _IT1	=	0x008a
                           00008B   304 _IE1	=	0x008b
                           00008C   305 _TR0	=	0x008c
                           00008D   306 _TF0	=	0x008d
                           00008E   307 _TR1	=	0x008e
                           00008F   308 _TF1	=	0x008f
                           000090   309 _P1_0	=	0x0090
                           000091   310 _P1_1	=	0x0091
                           000092   311 _P1_2	=	0x0092
                           000093   312 _P1_3	=	0x0093
                           000094   313 _P1_4	=	0x0094
                           000095   314 _P1_5	=	0x0095
                           000096   315 _P1_6	=	0x0096
                           000097   316 _P1_7	=	0x0097
                           000090   317 _T2	=	0x0090
                           000091   318 _T2EX	=	0x0091
                           000098   319 _RI	=	0x0098
                           000099   320 _TI	=	0x0099
                           00009A   321 _RB8	=	0x009a
                           00009B   322 _TB8	=	0x009b
                           00009C   323 _REN	=	0x009c
                           00009D   324 _SM2	=	0x009d
                           00009E   325 _SM1	=	0x009e
                           00009F   326 _SM0	=	0x009f
                           0000A0   327 _P2_0	=	0x00a0
                           0000A1   328 _P2_1	=	0x00a1
                           0000A2   329 _P2_2	=	0x00a2
                           0000A3   330 _P2_3	=	0x00a3
                           0000A4   331 _P2_4	=	0x00a4
                           0000A5   332 _P2_5	=	0x00a5
                           0000A6   333 _P2_6	=	0x00a6
                           0000A7   334 _P2_7	=	0x00a7
                           0000A8   335 _EX0	=	0x00a8
                           0000A9   336 _ET0	=	0x00a9
                           0000AA   337 _EX1	=	0x00aa
                           0000AB   338 _ET1	=	0x00ab
                           0000AC   339 _ES	=	0x00ac
                           0000AD   340 _ET2	=	0x00ad
                           0000AF   341 _EA	=	0x00af
                           0000B0   342 _P3_0	=	0x00b0
                           0000B1   343 _P3_1	=	0x00b1
                           0000B2   344 _P3_2	=	0x00b2
                           0000B3   345 _P3_3	=	0x00b3
                           0000B4   346 _P3_4	=	0x00b4
                           0000B5   347 _P3_5	=	0x00b5
                           0000B6   348 _P3_6	=	0x00b6
                           0000B7   349 _P3_7	=	0x00b7
                           0000B0   350 _RXD	=	0x00b0
                           0000B1   351 _TXD	=	0x00b1
                           0000B2   352 _INT0	=	0x00b2
                           0000B3   353 _INT1	=	0x00b3
                           0000B4   354 _T0	=	0x00b4
                           0000B5   355 _T1	=	0x00b5
                           0000B6   356 _WR	=	0x00b6
                           0000B7   357 _RD	=	0x00b7
                           0000B8   358 _PX0	=	0x00b8
                           0000B9   359 _PT0	=	0x00b9
                           0000BA   360 _PX1	=	0x00ba
                           0000BB   361 _PT1	=	0x00bb
                           0000BC   362 _PS	=	0x00bc
                           0000BD   363 _PT2	=	0x00bd
                           0000C8   364 _T2CON_0	=	0x00c8
                           0000C9   365 _T2CON_1	=	0x00c9
                           0000CA   366 _T2CON_2	=	0x00ca
                           0000CB   367 _T2CON_3	=	0x00cb
                           0000CC   368 _T2CON_4	=	0x00cc
                           0000CD   369 _T2CON_5	=	0x00cd
                           0000CE   370 _T2CON_6	=	0x00ce
                           0000CF   371 _T2CON_7	=	0x00cf
                           0000C8   372 _CP_RL2	=	0x00c8
                           0000C9   373 _C_T2	=	0x00c9
                           0000CA   374 _TR2	=	0x00ca
                           0000CB   375 _EXEN2	=	0x00cb
                           0000CC   376 _TCLK	=	0x00cc
                           0000CD   377 _RCLK	=	0x00cd
                           0000CE   378 _EXF2	=	0x00ce
                           0000CF   379 _TF2	=	0x00cf
                           0000D0   380 _P	=	0x00d0
                           0000D1   381 _FL	=	0x00d1
                           0000D2   382 _OV	=	0x00d2
                           0000D3   383 _RS0	=	0x00d3
                           0000D4   384 _RS1	=	0x00d4
                           0000D5   385 _F0	=	0x00d5
                           0000D6   386 _AC	=	0x00d6
                           0000D7   387 _CY	=	0x00d7
                                    388 ;--------------------------------------------------------
                                    389 ; overlayable register banks
                                    390 ;--------------------------------------------------------
                                    391 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        392 	.ds 8
                                    393 ;--------------------------------------------------------
                                    394 ; internal ram data
                                    395 ;--------------------------------------------------------
                                    396 	.area DSEG    (DATA)
      000000                        397 _colloc::
      000000                        398 	.ds 1
      000001                        399 _rowloc::
      000001                        400 	.ds 1
      000002                        401 _lcd_address::
      000002                        402 	.ds 2
      000004                        403 _seg7_address::
      000004                        404 	.ds 2
      000006                        405 _read_ram_address::
      000006                        406 	.ds 2
      000008                        407 _cursor_x::
      000008                        408 	.ds 2
      00000A                        409 _cursor_y::
      00000A                        410 	.ds 2
      00000C                        411 _textsize::
      00000C                        412 	.ds 1
      00000D                        413 _rotation::
      00000D                        414 	.ds 1
      00000E                        415 _textcolor::
      00000E                        416 	.ds 2
      000010                        417 _textbgcolor::
      000010                        418 	.ds 2
      000012                        419 __width::
      000012                        420 	.ds 2
      000014                        421 __height::
      000014                        422 	.ds 2
      000016                        423 _key::
      000016                        424 	.ds 1
      000017                        425 _input16::
      000017                        426 	.ds 2
      000019                        427 _input8::
      000019                        428 	.ds 1
      00001A                        429 _dataType::
      00001A                        430 	.ds 1
      00001B                        431 _dataSize::
      00001B                        432 	.ds 2
      00001D                        433 _validInput::
      00001D                        434 	.ds 1
      00001E                        435 _dataEnd::
      00001E                        436 	.ds 1
      00001F                        437 _scrollEnd::
      00001F                        438 	.ds 1
      000020                        439 _data::
      000020                        440 	.ds 1
      000021                        441 _addr0::
      000021                        442 	.ds 2
      000023                        443 _addr1::
      000023                        444 	.ds 2
      000025                        445 _addr2::
      000025                        446 	.ds 2
      000027                        447 _addr3::
      000027                        448 	.ds 2
      000029                        449 _currAddr0::
      000029                        450 	.ds 2
      00002B                        451 _currAddr1::
      00002B                        452 	.ds 2
      00002D                        453 _byte::
      00002D                        454 	.ds 2
      00002F                        455 _byte1::
      00002F                        456 	.ds 2
      000031                        457 _ASCII::
      000031                        458 	.ds 1
      000032                        459 _count::
      000032                        460 	.ds 2
      000034                        461 _endAddrCalc::
      000034                        462 	.ds 4
      000038                        463 _xCursorHold::
      000038                        464 	.ds 1
      000039                        465 _yCursorHold::
      000039                        466 	.ds 1
      00003A                        467 _textSizeHold::
      00003A                        468 	.ds 1
      00003B                        469 _x::
      00003B                        470 	.ds 1
      00003C                        471 _y::
      00003C                        472 	.ds 1
      00003D                        473 _ts::
      00003D                        474 	.ds 1
      00003E                        475 _dataRate::
      00003E                        476 	.ds 1
      00003F                        477 _dataBits::
      00003F                        478 	.ds 1
      000040                        479 _parity::
      000040                        480 	.ds 1
      000041                        481 _received_byte::
      000041                        482 	.ds 1
      000042                        483 _received_flag::
      000042                        484 	.ds 1
      000043                        485 _rtcWrite_PARM_2:
      000043                        486 	.ds 1
      000044                        487 _drawPixel_PARM_2:
      000044                        488 	.ds 2
      000046                        489 _drawPixel_PARM_3:
      000046                        490 	.ds 2
      000048                        491 _fillRect_PARM_2:
      000048                        492 	.ds 2
      00004A                        493 _fillRect_PARM_3:
      00004A                        494 	.ds 2
      00004C                        495 _fillRect_PARM_4:
      00004C                        496 	.ds 2
      00004E                        497 _fillRect_PARM_5:
      00004E                        498 	.ds 2
      000050                        499 _drawChar_PARM_2:
      000050                        500 	.ds 2
      000052                        501 _drawChar_PARM_3:
      000052                        502 	.ds 1
      000053                        503 _drawChar_PARM_4:
      000053                        504 	.ds 2
      000055                        505 _drawChar_PARM_5:
      000055                        506 	.ds 2
      000057                        507 _drawChar_PARM_6:
      000057                        508 	.ds 1
      000058                        509 _drawChar_x_65536_311:
      000058                        510 	.ds 2
      00005A                        511 _drawChar_line_196608_315:
      00005A                        512 	.ds 1
      00005B                        513 _drawChar_sloc1_1_0:
      00005B                        514 	.ds 2
                                    515 ;--------------------------------------------------------
                                    516 ; overlayable items in internal ram 
                                    517 ;--------------------------------------------------------
                                    518 	.area	OSEG    (OVR,DATA)
                                    519 	.area	OSEG    (OVR,DATA)
      000000                        520 _writeRegister8_PARM_2:
      000000                        521 	.ds 1
                                    522 	.area	OSEG    (OVR,DATA)
      000000                        523 _writeRegister16_PARM_2:
      000000                        524 	.ds 2
                                    525 	.area	OSEG    (OVR,DATA)
                                    526 	.area	OSEG    (OVR,DATA)
      000000                        527 _rtcCmd_PARM_2:
      000000                        528 	.ds 1
                                    529 	.area	OSEG    (OVR,DATA)
      000000                        530 _setCursor_PARM_2:
      000000                        531 	.ds 2
                                    532 	.area	OSEG    (OVR,DATA)
      000000                        533 _setTextColor_PARM_2:
      000000                        534 	.ds 2
                                    535 	.area	OSEG    (OVR,DATA)
                                    536 	.area	OSEG    (OVR,DATA)
      000000                        537 _setAddress_PARM_2:
      000000                        538 	.ds 2
      000002                        539 _setAddress_PARM_3:
      000002                        540 	.ds 2
      000004                        541 _setAddress_PARM_4:
      000004                        542 	.ds 2
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 	.area	OSEG    (OVR,DATA)
                                    545 	.area	OSEG    (OVR,DATA)
      000000                        546 _RAMwrite_PARM_2:
      000000                        547 	.ds 1
                                    548 	.area	OSEG    (OVR,DATA)
                                    549 	.area	OSEG    (OVR,DATA)
                                    550 ;--------------------------------------------------------
                                    551 ; Stack segment in internal ram 
                                    552 ;--------------------------------------------------------
                                    553 	.area	SSEG
      000000                        554 __start__stack:
      000000                        555 	.ds	1
                                    556 
                                    557 ;--------------------------------------------------------
                                    558 ; indirectly addressable internal ram data
                                    559 ;--------------------------------------------------------
                                    560 	.area ISEG    (DATA)
                                    561 ;--------------------------------------------------------
                                    562 ; absolute internal ram data
                                    563 ;--------------------------------------------------------
                                    564 	.area IABS    (ABS,DATA)
                                    565 	.area IABS    (ABS,DATA)
                                    566 ;--------------------------------------------------------
                                    567 ; bit data
                                    568 ;--------------------------------------------------------
                                    569 	.area BSEG    (BIT)
      000000                        570 _drawChar_sloc0_1_0:
      000000                        571 	.ds 1
                                    572 ;--------------------------------------------------------
                                    573 ; paged external ram data
                                    574 ;--------------------------------------------------------
                                    575 	.area PSEG    (PAG,XDATA)
                                    576 ;--------------------------------------------------------
                                    577 ; external ram data
                                    578 ;--------------------------------------------------------
                                    579 	.area XSEG    (XDATA)
                                    580 ;--------------------------------------------------------
                                    581 ; absolute external ram data
                                    582 ;--------------------------------------------------------
                                    583 	.area XABS    (ABS,XDATA)
                                    584 ;--------------------------------------------------------
                                    585 ; external initialized ram data
                                    586 ;--------------------------------------------------------
                                    587 	.area XISEG   (XDATA)
                                    588 	.area HOME    (CODE)
                                    589 	.area GSINIT0 (CODE)
                                    590 	.area GSINIT1 (CODE)
                                    591 	.area GSINIT2 (CODE)
                                    592 	.area GSINIT3 (CODE)
                                    593 	.area GSINIT4 (CODE)
                                    594 	.area GSINIT5 (CODE)
                                    595 	.area GSINIT  (CODE)
                                    596 	.area GSFINAL (CODE)
                                    597 	.area CSEG    (CODE)
                                    598 ;--------------------------------------------------------
                                    599 ; interrupt vector 
                                    600 ;--------------------------------------------------------
                                    601 	.area HOME    (CODE)
      000000                        602 __interrupt_vect:
      000000 02r00r00         [24]  603 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  604 	reti
      000004                        605 	.ds	7
      00000B 32               [24]  606 	reti
      00000C                        607 	.ds	7
      000013 32               [24]  608 	reti
      000014                        609 	.ds	7
      00001B 32               [24]  610 	reti
      00001C                        611 	.ds	7
      000023 02r00r00         [24]  612 	ljmp	_ISR_receive
                                    613 ;--------------------------------------------------------
                                    614 ; global & static initialisations
                                    615 ;--------------------------------------------------------
                                    616 	.area HOME    (CODE)
                                    617 	.area GSINIT  (CODE)
                                    618 	.area GSFINAL (CODE)
                                    619 	.area GSINIT  (CODE)
                                    620 	.globl __sdcc_gsinit_startup
                                    621 	.globl __sdcc_program_startup
                                    622 	.globl __start__stack
                                    623 	.globl __mcs51_genXINIT
                                    624 	.globl __mcs51_genXRAMCLEAR
                                    625 	.globl __mcs51_genRAMCLEAR
                                    626 ;	ecen4330lab7.c:39: __xdata unsigned char* lcd_address = (unsigned char __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  627 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  628 	mov	(_lcd_address + 1),#0x40
                                    629 ;	ecen4330lab7.c:40: __xdata unsigned char* seg7_address = (unsigned char __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  630 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  631 	mov	(_seg7_address + 1),#0x80
                                    632 ;	ecen4330lab7.c:103: unsigned int count = 0;
      00000C E4               [12]  633 	clr	a
      00000D F5*32            [12]  634 	mov	_count,a
      00000F F5*33            [12]  635 	mov	(_count + 1),a
                                    636 ;	ecen4330lab7.c:107: unsigned char dataRate = 3;
      000011 75*3E 03         [24]  637 	mov	_dataRate,#0x03
                                    638 ;	ecen4330lab7.c:108: unsigned char dataBits = 0;
                                    639 ;	1-genFromRTrack replaced	mov	_dataBits,#0x00
      000014 F5*3F            [12]  640 	mov	_dataBits,a
                                    641 ;	ecen4330lab7.c:109: unsigned char parity = 2;
      000016 75*40 02         [24]  642 	mov	_parity,#0x02
                                    643 ;	ecen4330lab7.c:111: volatile unsigned char received_byte = 0;
                                    644 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000019 F5*41            [12]  645 	mov	_received_byte,a
                                    646 ;	ecen4330lab7.c:112: volatile unsigned char received_flag = 0;
                                    647 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      00001B F5*42            [12]  648 	mov	_received_flag,a
                                    649 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  650 	ljmp	__sdcc_program_startup
                                    651 ;--------------------------------------------------------
                                    652 ; Home
                                    653 ;--------------------------------------------------------
                                    654 	.area HOME    (CODE)
                                    655 	.area HOME    (CODE)
      000026                        656 __sdcc_program_startup:
      000026 02r26r50         [24]  657 	ljmp	_main
                                    658 ;	return from main will return to caller
                                    659 ;--------------------------------------------------------
                                    660 ; code
                                    661 ;--------------------------------------------------------
                                    662 	.area CSEG    (CODE)
                                    663 ;------------------------------------------------------------
                                    664 ;Allocation info for local variables in function 'ISR_receive'
                                    665 ;------------------------------------------------------------
                                    666 ;	ecen4330lab7.c:135: void ISR_receive() __interrupt (4) {
                                    667 ;	-----------------------------------------
                                    668 ;	 function ISR_receive
                                    669 ;	-----------------------------------------
      000000                        670 _ISR_receive:
                           000007   671 	ar7 = 0x07
                           000006   672 	ar6 = 0x06
                           000005   673 	ar5 = 0x05
                           000004   674 	ar4 = 0x04
                           000003   675 	ar3 = 0x03
                           000002   676 	ar2 = 0x02
                           000001   677 	ar1 = 0x01
                           000000   678 	ar0 = 0x00
                                    679 ;	ecen4330lab7.c:136: if (RI == 1){
      000000 30 98 08         [24]  680 	jnb	_RI,00103$
                                    681 ;	ecen4330lab7.c:137: received_byte = SBUF;
      000003 85 99*41         [24]  682 	mov	_received_byte,_SBUF
                                    683 ;	ecen4330lab7.c:138: RI = 0;
                                    684 ;	assignBit
      000006 C2 98            [12]  685 	clr	_RI
                                    686 ;	ecen4330lab7.c:139: received_flag = 1;
      000008 75*42 01         [24]  687 	mov	_received_flag,#0x01
      00000B                        688 00103$:
                                    689 ;	ecen4330lab7.c:141: }
      00000B 32               [24]  690 	reti
                                    691 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    692 ;	eliminated unneeded push/pop not_psw
                                    693 ;	eliminated unneeded push/pop dpl
                                    694 ;	eliminated unneeded push/pop dph
                                    695 ;	eliminated unneeded push/pop b
                                    696 ;	eliminated unneeded push/pop acc
                                    697 ;------------------------------------------------------------
                                    698 ;Allocation info for local variables in function 'UART_Init'
                                    699 ;------------------------------------------------------------
                                    700 ;	ecen4330lab7.c:149: void UART_Init(){
                                    701 ;	-----------------------------------------
                                    702 ;	 function UART_Init
                                    703 ;	-----------------------------------------
      00000C                        704 _UART_Init:
                                    705 ;	ecen4330lab7.c:150: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      00000C 75 98 50         [24]  706 	mov	_SCON,#0x50
                                    707 ;	ecen4330lab7.c:151: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      00000F 75 89 20         [24]  708 	mov	_TMOD,#0x20
                                    709 ;	ecen4330lab7.c:152: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      000012 75 8D FD         [24]  710 	mov	_TH1,#0xfd
                                    711 ;	ecen4330lab7.c:153: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    712 ;	assignBit
      000015 D2 8E            [12]  713 	setb	_TR1
                                    714 ;	ecen4330lab7.c:154: ES  = 1;      // Enable Serial Interrupt
                                    715 ;	assignBit
      000017 D2 AC            [12]  716 	setb	_ES
                                    717 ;	ecen4330lab7.c:155: EA  = 1;      // Enable Global Interrupt bit
                                    718 ;	assignBit
      000019 D2 AF            [12]  719 	setb	_EA
                                    720 ;	ecen4330lab7.c:156: }
      00001B 22               [24]  721 	ret
                                    722 ;------------------------------------------------------------
                                    723 ;Allocation info for local variables in function 'UART_transmit'
                                    724 ;------------------------------------------------------------
                                    725 ;	ecen4330lab7.c:164: void UART_transmit(){
                                    726 ;	-----------------------------------------
                                    727 ;	 function UART_transmit
                                    728 ;	-----------------------------------------
      00001C                        729 _UART_transmit:
                                    730 ;	ecen4330lab7.c:165: SBUF = byte;
      00001C 85*2D 99         [24]  731 	mov	_SBUF,_byte
                                    732 ;	ecen4330lab7.c:166: while(TI == 1);
      00001F                        733 00101$:
      00001F 20 99 FD         [24]  734 	jb	_TI,00101$
                                    735 ;	ecen4330lab7.c:167: TI = 0;
                                    736 ;	assignBit
      000022 C2 99            [12]  737 	clr	_TI
                                    738 ;	ecen4330lab7.c:168: }
      000024 22               [24]  739 	ret
                                    740 ;------------------------------------------------------------
                                    741 ;Allocation info for local variables in function 'delay'
                                    742 ;------------------------------------------------------------
                                    743 ;d                         Allocated to registers r6 r7 
                                    744 ;i                         Allocated to registers r4 r5 
                                    745 ;j                         Allocated to registers r2 r3 
                                    746 ;------------------------------------------------------------
                                    747 ;	ecen4330lab7.c:202: void delay (int d) /// x 1ms
                                    748 ;	-----------------------------------------
                                    749 ;	 function delay
                                    750 ;	-----------------------------------------
      000025                        751 _delay:
      000025 AE 82            [24]  752 	mov	r6,dpl
      000027 AF 83            [24]  753 	mov	r7,dph
                                    754 ;	ecen4330lab7.c:205: for (i=0;i<d;i++)
      000029 7C 00            [12]  755 	mov	r4,#0x00
      00002B 7D 00            [12]  756 	mov	r5,#0x00
      00002D                        757 00107$:
      00002D C3               [12]  758 	clr	c
      00002E EC               [12]  759 	mov	a,r4
      00002F 9E               [12]  760 	subb	a,r6
      000030 ED               [12]  761 	mov	a,r5
      000031 64 80            [12]  762 	xrl	a,#0x80
      000033 8F F0            [24]  763 	mov	b,r7
      000035 63 F0 80         [24]  764 	xrl	b,#0x80
      000038 95 F0            [12]  765 	subb	a,b
      00003A 50 14            [24]  766 	jnc	00109$
                                    767 ;	ecen4330lab7.c:207: for (j=0;j<1000;j++);
      00003C 7A E8            [12]  768 	mov	r2,#0xe8
      00003E 7B 03            [12]  769 	mov	r3,#0x03
      000040                        770 00105$:
      000040 1A               [12]  771 	dec	r2
      000041 BA FF 01         [24]  772 	cjne	r2,#0xff,00130$
      000044 1B               [12]  773 	dec	r3
      000045                        774 00130$:
      000045 EA               [12]  775 	mov	a,r2
      000046 4B               [12]  776 	orl	a,r3
      000047 70 F7            [24]  777 	jnz	00105$
                                    778 ;	ecen4330lab7.c:205: for (i=0;i<d;i++)
      000049 0C               [12]  779 	inc	r4
      00004A BC 00 E0         [24]  780 	cjne	r4,#0x00,00107$
      00004D 0D               [12]  781 	inc	r5
      00004E 80 DD            [24]  782 	sjmp	00107$
      000050                        783 00109$:
                                    784 ;	ecen4330lab7.c:209: }
      000050 22               [24]  785 	ret
                                    786 ;------------------------------------------------------------
                                    787 ;Allocation info for local variables in function 'writeRegister8'
                                    788 ;------------------------------------------------------------
                                    789 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    790 ;a                         Allocated to registers r7 
                                    791 ;------------------------------------------------------------
                                    792 ;	ecen4330lab7.c:217: void writeRegister8(u8 a, u8 d) {
                                    793 ;	-----------------------------------------
                                    794 ;	 function writeRegister8
                                    795 ;	-----------------------------------------
      000051                        796 _writeRegister8:
      000051 AF 82            [24]  797 	mov	r7,dpl
                                    798 ;	ecen4330lab7.c:218: CD = __CMD__;
                                    799 ;	assignBit
      000053 C2 B5            [12]  800 	clr	_P3_5
                                    801 ;	ecen4330lab7.c:219: write8(a);
                                    802 ;	assignBit
      000055 D2 B4            [12]  803 	setb	_P3_4
      000057 85*02 82         [24]  804 	mov	dpl,_lcd_address
      00005A 85*03 83         [24]  805 	mov	dph,(_lcd_address + 1)
      00005D EF               [12]  806 	mov	a,r7
      00005E F0               [24]  807 	movx	@dptr,a
                                    808 ;	assignBit
      00005F C2 B4            [12]  809 	clr	_P3_4
                                    810 ;	ecen4330lab7.c:220: CD = __DATA__;
                                    811 ;	assignBit
      000061 D2 B5            [12]  812 	setb	_P3_5
                                    813 ;	ecen4330lab7.c:221: write8(d);
                                    814 ;	assignBit
      000063 D2 B4            [12]  815 	setb	_P3_4
      000065 85*02 82         [24]  816 	mov	dpl,_lcd_address
      000068 85*03 83         [24]  817 	mov	dph,(_lcd_address + 1)
      00006B E5*00            [12]  818 	mov	a,_writeRegister8_PARM_2
      00006D F0               [24]  819 	movx	@dptr,a
                                    820 ;	assignBit
      00006E C2 B4            [12]  821 	clr	_P3_4
                                    822 ;	ecen4330lab7.c:222: }
      000070 22               [24]  823 	ret
                                    824 ;------------------------------------------------------------
                                    825 ;Allocation info for local variables in function 'writeRegister16'
                                    826 ;------------------------------------------------------------
                                    827 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    828 ;a                         Allocated to registers r6 r7 
                                    829 ;hi                        Allocated to registers r6 r7 
                                    830 ;lo                        Allocated to registers r4 r5 
                                    831 ;------------------------------------------------------------
                                    832 ;	ecen4330lab7.c:230: void writeRegister16(u16 a, u16 d){
                                    833 ;	-----------------------------------------
                                    834 ;	 function writeRegister16
                                    835 ;	-----------------------------------------
      000071                        836 _writeRegister16:
      000071 AE 82            [24]  837 	mov	r6,dpl
      000073 AF 83            [24]  838 	mov	r7,dph
                                    839 ;	ecen4330lab7.c:232: hi = (a) >> 8;
      000075 8F 04            [24]  840 	mov	ar4,r7
                                    841 ;	ecen4330lab7.c:233: lo = (a);
                                    842 ;	ecen4330lab7.c:234: write8Reg(hi);
                                    843 ;	assignBit
      000077 C2 B5            [12]  844 	clr	_P3_5
                                    845 ;	assignBit
      000079 D2 B4            [12]  846 	setb	_P3_4
      00007B 85*02 82         [24]  847 	mov	dpl,_lcd_address
      00007E 85*03 83         [24]  848 	mov	dph,(_lcd_address + 1)
      000081 EC               [12]  849 	mov	a,r4
      000082 F0               [24]  850 	movx	@dptr,a
                                    851 ;	assignBit
      000083 C2 B4            [12]  852 	clr	_P3_4
                                    853 ;	ecen4330lab7.c:235: write8Reg(lo);
                                    854 ;	assignBit
      000085 C2 B5            [12]  855 	clr	_P3_5
                                    856 ;	assignBit
      000087 D2 B4            [12]  857 	setb	_P3_4
      000089 85*02 82         [24]  858 	mov	dpl,_lcd_address
      00008C 85*03 83         [24]  859 	mov	dph,(_lcd_address + 1)
      00008F EE               [12]  860 	mov	a,r6
      000090 F0               [24]  861 	movx	@dptr,a
                                    862 ;	assignBit
      000091 C2 B4            [12]  863 	clr	_P3_4
                                    864 ;	ecen4330lab7.c:236: hi = (d) >> 8;
      000093 AE*01            [24]  865 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                    866 ;	ecen4330lab7.c:237: lo = (d);
      000095 AC*00            [24]  867 	mov	r4,_writeRegister16_PARM_2
                                    868 ;	ecen4330lab7.c:238: CD = 1 ;
                                    869 ;	assignBit
      000097 D2 B5            [12]  870 	setb	_P3_5
                                    871 ;	ecen4330lab7.c:239: write8Data(hi);
                                    872 ;	assignBit
      000099 D2 B5            [12]  873 	setb	_P3_5
                                    874 ;	assignBit
      00009B D2 B4            [12]  875 	setb	_P3_4
      00009D 85*02 82         [24]  876 	mov	dpl,_lcd_address
      0000A0 85*03 83         [24]  877 	mov	dph,(_lcd_address + 1)
      0000A3 EE               [12]  878 	mov	a,r6
      0000A4 F0               [24]  879 	movx	@dptr,a
                                    880 ;	assignBit
      0000A5 C2 B4            [12]  881 	clr	_P3_4
                                    882 ;	ecen4330lab7.c:240: write8Data(lo);
                                    883 ;	assignBit
      0000A7 D2 B5            [12]  884 	setb	_P3_5
                                    885 ;	assignBit
      0000A9 D2 B4            [12]  886 	setb	_P3_4
      0000AB 85*02 82         [24]  887 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  888 	mov	dph,(_lcd_address + 1)
      0000B1 EC               [12]  889 	mov	a,r4
      0000B2 F0               [24]  890 	movx	@dptr,a
                                    891 ;	assignBit
      0000B3 C2 B4            [12]  892 	clr	_P3_4
                                    893 ;	ecen4330lab7.c:241: }
      0000B5 22               [24]  894 	ret
                                    895 ;------------------------------------------------------------
                                    896 ;Allocation info for local variables in function 'rtcInit'
                                    897 ;------------------------------------------------------------
                                    898 ;i                         Allocated with name '_rtcInit_i_65536_63'
                                    899 ;------------------------------------------------------------
                                    900 ;	ecen4330lab7.c:263: void rtcInit(void) {
                                    901 ;	-----------------------------------------
                                    902 ;	 function rtcInit
                                    903 ;	-----------------------------------------
      0000B6                        904 _rtcInit:
                                    905 ;	ecen4330lab7.c:266: rtcCmd(__REG_F__, __HR_24__|__STOP__|__RESET__);  // stop and reset
      0000B6 75*00 07         [24]  906 	mov	_rtcCmd_PARM_2,#0x07
      0000B9 90 00 0F         [24]  907 	mov	dptr,#0x000f
      0000BC 12r00rFC         [24]  908 	lcall	_rtcCmd
                                    909 ;	ecen4330lab7.c:269: for (i = __S1_REG__; i < __REG_D__;i++) {
      0000BF 7E 00            [12]  910 	mov	r6,#0x00
      0000C1 7F 00            [12]  911 	mov	r7,#0x00
      0000C3                        912 00102$:
                                    913 ;	ecen4330lab7.c:270: rtcWrite(i, 0x00);
      0000C3 75*43 00         [24]  914 	mov	_rtcWrite_PARM_2,#0x00
      0000C6 8E 82            [24]  915 	mov	dpl,r6
      0000C8 8F 83            [24]  916 	mov	dph,r7
      0000CA C0 07            [24]  917 	push	ar7
      0000CC C0 06            [24]  918 	push	ar6
      0000CE 12r01r05         [24]  919 	lcall	_rtcWrite
      0000D1 D0 06            [24]  920 	pop	ar6
      0000D3 D0 07            [24]  921 	pop	ar7
                                    922 ;	ecen4330lab7.c:269: for (i = __S1_REG__; i < __REG_D__;i++) {
      0000D5 0E               [12]  923 	inc	r6
      0000D6 BE 00 01         [24]  924 	cjne	r6,#0x00,00115$
      0000D9 0F               [12]  925 	inc	r7
      0000DA                        926 00115$:
      0000DA C3               [12]  927 	clr	c
      0000DB EE               [12]  928 	mov	a,r6
      0000DC 94 0D            [12]  929 	subb	a,#0x0d
      0000DE EF               [12]  930 	mov	a,r7
      0000DF 94 00            [12]  931 	subb	a,#0x00
      0000E1 40 E0            [24]  932 	jc	00102$
                                    933 ;	ecen4330lab7.c:273: rtcCmd(__REG_F__, __HR_24__);
      0000E3 75*00 04         [24]  934 	mov	_rtcCmd_PARM_2,#0x04
      0000E6 90 00 0F         [24]  935 	mov	dptr,#0x000f
                                    936 ;	ecen4330lab7.c:274: }
      0000E9 02r00rFC         [24]  937 	ljmp	_rtcCmd
                                    938 ;------------------------------------------------------------
                                    939 ;Allocation info for local variables in function 'rtcBusy'
                                    940 ;------------------------------------------------------------
                                    941 ;__1310720001              Allocated to registers 
                                    942 ;map_address               Allocated to registers 
                                    943 ;__1310720002              Allocated to registers 
                                    944 ;map_address               Allocated to registers 
                                    945 ;------------------------------------------------------------
                                    946 ;	ecen4330lab7.c:282: void rtcBusy(void) {
                                    947 ;	-----------------------------------------
                                    948 ;	 function rtcBusy
                                    949 ;	-----------------------------------------
      0000EC                        950 _rtcBusy:
                                    951 ;	ecen4330lab7.c:284: while((ioread8(map_address) & 0x02));
      0000EC                        952 00101$:
                                    953 ;	ecen4330lab7.c:190: IOM = 1;                            
                                    954 ;	assignBit
      0000EC D2 B4            [12]  955 	setb	_P3_4
                                    956 ;	ecen4330lab7.c:191: data = *map_address;
      0000EE 90 00 0D         [24]  957 	mov	dptr,#0x000d
      0000F1 E0               [24]  958 	movx	a,@dptr
      0000F2 F5*20            [12]  959 	mov	_data,a
                                    960 ;	ecen4330lab7.c:192: IOM = 0;    
                                    961 ;	assignBit
      0000F4 C2 B4            [12]  962 	clr	_P3_4
                                    963 ;	ecen4330lab7.c:193: return data;   
      0000F6 E5*20            [12]  964 	mov	a,_data
                                    965 ;	ecen4330lab7.c:284: while((ioread8(map_address) & 0x02));
      0000F8 20 E1 F1         [24]  966 	jb	acc.1,00101$
                                    967 ;	ecen4330lab7.c:285: }
      0000FB 22               [24]  968 	ret
                                    969 ;------------------------------------------------------------
                                    970 ;Allocation info for local variables in function 'rtcCmd'
                                    971 ;------------------------------------------------------------
                                    972 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                    973 ;addr                      Allocated to registers r6 r7 
                                    974 ;map_address               Allocated to registers 
                                    975 ;__1310720004              Allocated to registers 
                                    976 ;__1310720005              Allocated to registers r7 
                                    977 ;map_address               Allocated to registers 
                                    978 ;d                         Allocated to registers 
                                    979 ;------------------------------------------------------------
                                    980 ;	ecen4330lab7.c:293: inline void rtcCmd(unsigned int addr, unsigned char d) {
                                    981 ;	-----------------------------------------
                                    982 ;	 function rtcCmd
                                    983 ;	-----------------------------------------
      0000FC                        984 _rtcCmd:
                                    985 ;	ecen4330lab7.c:294: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                    986 ;	ecen4330lab7.c:295: iowrite8(map_address, d);
      0000FC AF*00            [24]  987 	mov	r7,_rtcCmd_PARM_2
                                    988 ;	ecen4330lab7.c:177: IOM = 1;
                                    989 ;	assignBit
      0000FE D2 B4            [12]  990 	setb	_P3_4
                                    991 ;	ecen4330lab7.c:178: *map_address = d;
      000100 EF               [12]  992 	mov	a,r7
      000101 F0               [24]  993 	movx	@dptr,a
                                    994 ;	ecen4330lab7.c:179: IOM = 0;
                                    995 ;	assignBit
      000102 C2 B4            [12]  996 	clr	_P3_4
                                    997 ;	ecen4330lab7.c:295: iowrite8(map_address, d);
                                    998 ;	ecen4330lab7.c:296: }
      000104 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'rtcWrite'
                                   1002 ;------------------------------------------------------------
                                   1003 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1004 ;addr                      Allocated to registers r6 r7 
                                   1005 ;map_address               Allocated to registers r6 r7 
                                   1006 ;__1310720007              Allocated to registers 
                                   1007 ;__1310720008              Allocated to registers 
                                   1008 ;addr                      Allocated to registers 
                                   1009 ;d                         Allocated to registers 
                                   1010 ;map_address               Allocated to registers 
                                   1011 ;__1310720004              Allocated to registers 
                                   1012 ;__1310720005              Allocated to registers 
                                   1013 ;map_address               Allocated to registers 
                                   1014 ;d                         Allocated to registers 
                                   1015 ;__1310720010              Allocated to registers 
                                   1016 ;__1310720011              Allocated to registers 
                                   1017 ;map_address               Allocated to registers 
                                   1018 ;d                         Allocated to registers 
                                   1019 ;__1310720013              Allocated to registers 
                                   1020 ;__1310720014              Allocated to registers r7 
                                   1021 ;addr                      Allocated to registers 
                                   1022 ;d                         Allocated to registers 
                                   1023 ;map_address               Allocated to registers 
                                   1024 ;__1310720004              Allocated to registers 
                                   1025 ;__1310720005              Allocated to registers 
                                   1026 ;map_address               Allocated to registers 
                                   1027 ;d                         Allocated to registers 
                                   1028 ;------------------------------------------------------------
                                   1029 ;	ecen4330lab7.c:304: inline void rtcWrite(unsigned int addr, unsigned char d) {
                                   1030 ;	-----------------------------------------
                                   1031 ;	 function rtcWrite
                                   1032 ;	-----------------------------------------
      000105                       1033 _rtcWrite:
      000105 AE 82            [24] 1034 	mov	r6,dpl
      000107 AF 83            [24] 1035 	mov	r7,dph
                                   1036 ;	ecen4330lab7.c:305: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1037 ;	ecen4330lab7.c:177: IOM = 1;
                                   1038 ;	assignBit
      000109 D2 B4            [12] 1039 	setb	_P3_4
                                   1040 ;	ecen4330lab7.c:178: *map_address = d;
      00010B 90 00 0D         [24] 1041 	mov	dptr,#0x000d
      00010E 74 01            [12] 1042 	mov	a,#0x01
      000110 F0               [24] 1043 	movx	@dptr,a
                                   1044 ;	ecen4330lab7.c:179: IOM = 0;
                                   1045 ;	assignBit
      000111 C2 B4            [12] 1046 	clr	_P3_4
                                   1047 ;	ecen4330lab7.c:307: rtcBusy();
      000113 C0 07            [24] 1048 	push	ar7
      000115 C0 06            [24] 1049 	push	ar6
      000117 12r00rEC         [24] 1050 	lcall	_rtcBusy
      00011A D0 06            [24] 1051 	pop	ar6
      00011C D0 07            [24] 1052 	pop	ar7
                                   1053 ;	ecen4330lab7.c:177: IOM = 1;
                                   1054 ;	assignBit
      00011E D2 B4            [12] 1055 	setb	_P3_4
                                   1056 ;	ecen4330lab7.c:178: *map_address = d;
      000120 8E 82            [24] 1057 	mov	dpl,r6
      000122 8F 83            [24] 1058 	mov	dph,r7
      000124 E4               [12] 1059 	clr	a
      000125 F0               [24] 1060 	movx	@dptr,a
                                   1061 ;	ecen4330lab7.c:179: IOM = 0;
                                   1062 ;	assignBit
      000126 C2 B4            [12] 1063 	clr	_P3_4
                                   1064 ;	ecen4330lab7.c:309: rtcCmd(__REG_D__, d);
      000128 AF*43            [24] 1065 	mov	r7,_rtcWrite_PARM_2
                                   1066 ;	ecen4330lab7.c:177: IOM = 1;
                                   1067 ;	assignBit
      00012A D2 B4            [12] 1068 	setb	_P3_4
                                   1069 ;	ecen4330lab7.c:178: *map_address = d;
      00012C 90 00 0D         [24] 1070 	mov	dptr,#0x000d
      00012F EF               [12] 1071 	mov	a,r7
      000130 F0               [24] 1072 	movx	@dptr,a
                                   1073 ;	ecen4330lab7.c:179: IOM = 0;
                                   1074 ;	assignBit
      000131 C2 B4            [12] 1075 	clr	_P3_4
                                   1076 ;	ecen4330lab7.c:309: rtcCmd(__REG_D__, d);
                                   1077 ;	ecen4330lab7.c:310: }
      000133 22               [24] 1078 	ret
                                   1079 ;------------------------------------------------------------
                                   1080 ;Allocation info for local variables in function 'rtcRead'
                                   1081 ;------------------------------------------------------------
                                   1082 ;addr                      Allocated to registers r6 r7 
                                   1083 ;__1310720019              Allocated to registers 
                                   1084 ;map_address               Allocated to registers r6 r7 
                                   1085 ;__1310720016              Allocated to registers 
                                   1086 ;__1310720017              Allocated to registers 
                                   1087 ;addr                      Allocated to registers 
                                   1088 ;d                         Allocated to registers 
                                   1089 ;map_address               Allocated to registers 
                                   1090 ;__1310720004              Allocated to registers 
                                   1091 ;__1310720005              Allocated to registers 
                                   1092 ;map_address               Allocated to registers 
                                   1093 ;d                         Allocated to registers 
                                   1094 ;__1310720020              Allocated to registers 
                                   1095 ;map_address               Allocated to registers 
                                   1096 ;__1310720022              Allocated to registers 
                                   1097 ;__1310720023              Allocated to registers 
                                   1098 ;addr                      Allocated to registers 
                                   1099 ;d                         Allocated to registers 
                                   1100 ;map_address               Allocated to registers 
                                   1101 ;__1310720004              Allocated to registers 
                                   1102 ;__1310720005              Allocated to registers 
                                   1103 ;map_address               Allocated to registers 
                                   1104 ;d                         Allocated to registers 
                                   1105 ;------------------------------------------------------------
                                   1106 ;	ecen4330lab7.c:319: inline unsigned char rtcRead(unsigned int addr) {
                                   1107 ;	-----------------------------------------
                                   1108 ;	 function rtcRead
                                   1109 ;	-----------------------------------------
      000134                       1110 _rtcRead:
      000134 AE 82            [24] 1111 	mov	r6,dpl
      000136 AF 83            [24] 1112 	mov	r7,dph
                                   1113 ;	ecen4330lab7.c:320: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1114 ;	ecen4330lab7.c:177: IOM = 1;
                                   1115 ;	assignBit
      000138 D2 B4            [12] 1116 	setb	_P3_4
                                   1117 ;	ecen4330lab7.c:178: *map_address = d;
      00013A 90 00 0D         [24] 1118 	mov	dptr,#0x000d
      00013D 74 01            [12] 1119 	mov	a,#0x01
      00013F F0               [24] 1120 	movx	@dptr,a
                                   1121 ;	ecen4330lab7.c:179: IOM = 0;
                                   1122 ;	assignBit
      000140 C2 B4            [12] 1123 	clr	_P3_4
                                   1124 ;	ecen4330lab7.c:322: rtcBusy();
      000142 C0 07            [24] 1125 	push	ar7
      000144 C0 06            [24] 1126 	push	ar6
      000146 12r00rEC         [24] 1127 	lcall	_rtcBusy
      000149 D0 06            [24] 1128 	pop	ar6
      00014B D0 07            [24] 1129 	pop	ar7
                                   1130 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1131 ;	assignBit
      00014D D2 B4            [12] 1132 	setb	_P3_4
                                   1133 ;	ecen4330lab7.c:191: data = *map_address;
      00014F 8E 82            [24] 1134 	mov	dpl,r6
      000151 8F 83            [24] 1135 	mov	dph,r7
      000153 E0               [24] 1136 	movx	a,@dptr
      000154 F5*20            [12] 1137 	mov	_data,a
                                   1138 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1139 ;	assignBit
      000156 C2 B4            [12] 1140 	clr	_P3_4
                                   1141 ;	ecen4330lab7.c:193: return data;   
                                   1142 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      000158 E5*20            [12] 1143 	mov	a,_data
      00015A 54 0F            [12] 1144 	anl	a,#0x0f
      00015C 44 30            [12] 1145 	orl	a,#0x30
      00015E F5*20            [12] 1146 	mov	_data,a
                                   1147 ;	ecen4330lab7.c:177: IOM = 1;
                                   1148 ;	assignBit
      000160 D2 B4            [12] 1149 	setb	_P3_4
                                   1150 ;	ecen4330lab7.c:178: *map_address = d;
      000162 90 00 0D         [24] 1151 	mov	dptr,#0x000d
      000165 E4               [12] 1152 	clr	a
      000166 F0               [24] 1153 	movx	@dptr,a
                                   1154 ;	ecen4330lab7.c:179: IOM = 0;
                                   1155 ;	assignBit
      000167 C2 B4            [12] 1156 	clr	_P3_4
                                   1157 ;	ecen4330lab7.c:327: return data;
      000169 85*20 82         [24] 1158 	mov	dpl,_data
                                   1159 ;	ecen4330lab7.c:328: }
      00016C 22               [24] 1160 	ret
                                   1161 ;------------------------------------------------------------
                                   1162 ;Allocation info for local variables in function 'rtcPrint'
                                   1163 ;------------------------------------------------------------
                                   1164 ;__1310720040              Allocated to registers 
                                   1165 ;__1310720037              Allocated to registers 
                                   1166 ;__1310720034              Allocated to registers 
                                   1167 ;__1310720031              Allocated to registers 
                                   1168 ;__1310720028              Allocated to registers 
                                   1169 ;__1310720025              Allocated to registers 
                                   1170 ;t                         Allocated to registers 
                                   1171 ;__1310720026              Allocated to registers 
                                   1172 ;addr                      Allocated to registers 
                                   1173 ;__1310720019              Allocated to registers 
                                   1174 ;map_address               Allocated to registers 
                                   1175 ;__1310720016              Allocated to registers 
                                   1176 ;__1310720017              Allocated to registers 
                                   1177 ;addr                      Allocated to registers 
                                   1178 ;d                         Allocated to registers 
                                   1179 ;map_address               Allocated to registers 
                                   1180 ;__1310720004              Allocated to registers 
                                   1181 ;__1310720005              Allocated to registers 
                                   1182 ;map_address               Allocated to registers 
                                   1183 ;d                         Allocated to registers 
                                   1184 ;__1310720020              Allocated to registers 
                                   1185 ;map_address               Allocated to registers 
                                   1186 ;__1310720022              Allocated to registers 
                                   1187 ;__1310720023              Allocated to registers 
                                   1188 ;addr                      Allocated to registers 
                                   1189 ;d                         Allocated to registers 
                                   1190 ;map_address               Allocated to registers 
                                   1191 ;__1310720004              Allocated to registers 
                                   1192 ;__1310720005              Allocated to registers 
                                   1193 ;map_address               Allocated to registers 
                                   1194 ;d                         Allocated to registers 
                                   1195 ;__1310720029              Allocated to registers 
                                   1196 ;addr                      Allocated to registers 
                                   1197 ;__1310720019              Allocated to registers 
                                   1198 ;map_address               Allocated to registers 
                                   1199 ;__1310720016              Allocated to registers 
                                   1200 ;__1310720017              Allocated to registers 
                                   1201 ;addr                      Allocated to registers 
                                   1202 ;d                         Allocated to registers 
                                   1203 ;map_address               Allocated to registers 
                                   1204 ;__1310720004              Allocated to registers 
                                   1205 ;__1310720005              Allocated to registers 
                                   1206 ;map_address               Allocated to registers 
                                   1207 ;d                         Allocated to registers 
                                   1208 ;__1310720020              Allocated to registers 
                                   1209 ;map_address               Allocated to registers 
                                   1210 ;__1310720022              Allocated to registers 
                                   1211 ;__1310720023              Allocated to registers 
                                   1212 ;addr                      Allocated to registers 
                                   1213 ;d                         Allocated to registers 
                                   1214 ;map_address               Allocated to registers 
                                   1215 ;__1310720004              Allocated to registers 
                                   1216 ;__1310720005              Allocated to registers 
                                   1217 ;map_address               Allocated to registers 
                                   1218 ;d                         Allocated to registers 
                                   1219 ;__1310720032              Allocated to registers 
                                   1220 ;addr                      Allocated to registers 
                                   1221 ;__1310720019              Allocated to registers 
                                   1222 ;map_address               Allocated to registers 
                                   1223 ;__1310720016              Allocated to registers 
                                   1224 ;__1310720017              Allocated to registers 
                                   1225 ;addr                      Allocated to registers 
                                   1226 ;d                         Allocated to registers 
                                   1227 ;map_address               Allocated to registers 
                                   1228 ;__1310720004              Allocated to registers 
                                   1229 ;__1310720005              Allocated to registers 
                                   1230 ;map_address               Allocated to registers 
                                   1231 ;d                         Allocated to registers 
                                   1232 ;__1310720020              Allocated to registers 
                                   1233 ;map_address               Allocated to registers 
                                   1234 ;__1310720022              Allocated to registers 
                                   1235 ;__1310720023              Allocated to registers 
                                   1236 ;addr                      Allocated to registers 
                                   1237 ;d                         Allocated to registers 
                                   1238 ;map_address               Allocated to registers 
                                   1239 ;__1310720004              Allocated to registers 
                                   1240 ;__1310720005              Allocated to registers 
                                   1241 ;map_address               Allocated to registers 
                                   1242 ;d                         Allocated to registers 
                                   1243 ;__1310720035              Allocated to registers 
                                   1244 ;addr                      Allocated to registers 
                                   1245 ;__1310720019              Allocated to registers 
                                   1246 ;map_address               Allocated to registers 
                                   1247 ;__1310720016              Allocated to registers 
                                   1248 ;__1310720017              Allocated to registers 
                                   1249 ;addr                      Allocated to registers 
                                   1250 ;d                         Allocated to registers 
                                   1251 ;map_address               Allocated to registers 
                                   1252 ;__1310720004              Allocated to registers 
                                   1253 ;__1310720005              Allocated to registers 
                                   1254 ;map_address               Allocated to registers 
                                   1255 ;d                         Allocated to registers 
                                   1256 ;__1310720020              Allocated to registers 
                                   1257 ;map_address               Allocated to registers 
                                   1258 ;__1310720022              Allocated to registers 
                                   1259 ;__1310720023              Allocated to registers 
                                   1260 ;addr                      Allocated to registers 
                                   1261 ;d                         Allocated to registers 
                                   1262 ;map_address               Allocated to registers 
                                   1263 ;__1310720004              Allocated to registers 
                                   1264 ;__1310720005              Allocated to registers 
                                   1265 ;map_address               Allocated to registers 
                                   1266 ;d                         Allocated to registers 
                                   1267 ;__1310720038              Allocated to registers 
                                   1268 ;addr                      Allocated to registers 
                                   1269 ;__1310720019              Allocated to registers 
                                   1270 ;map_address               Allocated to registers 
                                   1271 ;__1310720016              Allocated to registers 
                                   1272 ;__1310720017              Allocated to registers 
                                   1273 ;addr                      Allocated to registers 
                                   1274 ;d                         Allocated to registers 
                                   1275 ;map_address               Allocated to registers 
                                   1276 ;__1310720004              Allocated to registers 
                                   1277 ;__1310720005              Allocated to registers 
                                   1278 ;map_address               Allocated to registers 
                                   1279 ;d                         Allocated to registers 
                                   1280 ;__1310720020              Allocated to registers 
                                   1281 ;map_address               Allocated to registers 
                                   1282 ;__1310720022              Allocated to registers 
                                   1283 ;__1310720023              Allocated to registers 
                                   1284 ;addr                      Allocated to registers 
                                   1285 ;d                         Allocated to registers 
                                   1286 ;map_address               Allocated to registers 
                                   1287 ;__1310720004              Allocated to registers 
                                   1288 ;__1310720005              Allocated to registers 
                                   1289 ;map_address               Allocated to registers 
                                   1290 ;d                         Allocated to registers 
                                   1291 ;__1310720041              Allocated to registers 
                                   1292 ;addr                      Allocated to registers 
                                   1293 ;__1310720019              Allocated to registers 
                                   1294 ;map_address               Allocated to registers 
                                   1295 ;__1310720016              Allocated to registers 
                                   1296 ;__1310720017              Allocated to registers 
                                   1297 ;addr                      Allocated to registers 
                                   1298 ;d                         Allocated to registers 
                                   1299 ;map_address               Allocated to registers 
                                   1300 ;__1310720004              Allocated to registers 
                                   1301 ;__1310720005              Allocated to registers 
                                   1302 ;map_address               Allocated to registers 
                                   1303 ;d                         Allocated to registers 
                                   1304 ;__1310720020              Allocated to registers 
                                   1305 ;map_address               Allocated to registers 
                                   1306 ;__1310720022              Allocated to registers 
                                   1307 ;__1310720023              Allocated to registers 
                                   1308 ;addr                      Allocated to registers 
                                   1309 ;d                         Allocated to registers 
                                   1310 ;map_address               Allocated to registers 
                                   1311 ;__1310720004              Allocated to registers 
                                   1312 ;__1310720005              Allocated to registers 
                                   1313 ;map_address               Allocated to registers 
                                   1314 ;d                         Allocated to registers 
                                   1315 ;------------------------------------------------------------
                                   1316 ;	ecen4330lab7.c:337: void rtcPrint(void) {
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function rtcPrint
                                   1319 ;	-----------------------------------------
      00016D                       1320 _rtcPrint:
                                   1321 ;	ecen4330lab7.c:340: xCursorHold = cursor_x;
      00016D 85*08*38         [24] 1322 	mov	_xCursorHold,_cursor_x
                                   1323 ;	ecen4330lab7.c:341: yCursorHold = cursor_y;
      000170 85*0A*39         [24] 1324 	mov	_yCursorHold,_cursor_y
                                   1325 ;	ecen4330lab7.c:342: textSizeHold = textsize;
      000173 85*0C*3A         [24] 1326 	mov	_textSizeHold,_textsize
                                   1327 ;	ecen4330lab7.c:344: setTextColor(GRAY, BLACK);
      000176 E4               [12] 1328 	clr	a
      000177 F5*00            [12] 1329 	mov	_setTextColor_PARM_2,a
      000179 F5*01            [12] 1330 	mov	(_setTextColor_PARM_2 + 1),a
      00017B 90 D6 BA         [24] 1331 	mov	dptr,#0xd6ba
      00017E 12r02rD6         [24] 1332 	lcall	_setTextColor
                                   1333 ;	ecen4330lab7.c:345: setTextSize(2);
      000181 75 82 02         [24] 1334 	mov	dpl,#0x02
      000184 12r02rE3         [24] 1335 	lcall	_setTextSize
                                   1336 ;	ecen4330lab7.c:346: setCursor(132, 304);
      000187 75*00 30         [24] 1337 	mov	_setCursor_PARM_2,#0x30
      00018A 75*01 01         [24] 1338 	mov	(_setCursor_PARM_2 + 1),#0x01
      00018D 90 00 84         [24] 1339 	mov	dptr,#0x0084
      000190 12r02rC9         [24] 1340 	lcall	_setCursor
                                   1341 ;	ecen4330lab7.c:177: IOM = 1;
                                   1342 ;	assignBit
      000193 D2 B4            [12] 1343 	setb	_P3_4
                                   1344 ;	ecen4330lab7.c:178: *map_address = d;
      000195 90 00 0D         [24] 1345 	mov	dptr,#0x000d
      000198 74 01            [12] 1346 	mov	a,#0x01
      00019A F0               [24] 1347 	movx	@dptr,a
                                   1348 ;	ecen4330lab7.c:179: IOM = 0;
                                   1349 ;	assignBit
      00019B C2 B4            [12] 1350 	clr	_P3_4
                                   1351 ;	ecen4330lab7.c:322: rtcBusy();
      00019D 12r00rEC         [24] 1352 	lcall	_rtcBusy
                                   1353 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1354 ;	assignBit
      0001A0 D2 B4            [12] 1355 	setb	_P3_4
                                   1356 ;	ecen4330lab7.c:191: data = *map_address;
      0001A2 90 00 05         [24] 1357 	mov	dptr,#0x0005
      0001A5 E0               [24] 1358 	movx	a,@dptr
      0001A6 F5*20            [12] 1359 	mov	_data,a
                                   1360 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1361 ;	assignBit
      0001A8 C2 B4            [12] 1362 	clr	_P3_4
                                   1363 ;	ecen4330lab7.c:193: return data;   
                                   1364 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001AA E5*20            [12] 1365 	mov	a,_data
      0001AC 54 0F            [12] 1366 	anl	a,#0x0f
      0001AE 44 30            [12] 1367 	orl	a,#0x30
      0001B0 F5*20            [12] 1368 	mov	_data,a
                                   1369 ;	ecen4330lab7.c:177: IOM = 1;
                                   1370 ;	assignBit
      0001B2 D2 B4            [12] 1371 	setb	_P3_4
                                   1372 ;	ecen4330lab7.c:178: *map_address = d;
      0001B4 90 00 0D         [24] 1373 	mov	dptr,#0x000d
      0001B7 E4               [12] 1374 	clr	a
      0001B8 F0               [24] 1375 	movx	@dptr,a
                                   1376 ;	ecen4330lab7.c:179: IOM = 0;
                                   1377 ;	assignBit
      0001B9 C2 B4            [12] 1378 	clr	_P3_4
                                   1379 ;	ecen4330lab7.c:327: return data;
      0001BB 85*20 82         [24] 1380 	mov	dpl,_data
                                   1381 ;	ecen4330lab7.c:349: write(t);
      0001BE 12r09r5F         [24] 1382 	lcall	_write
                                   1383 ;	ecen4330lab7.c:177: IOM = 1;
                                   1384 ;	assignBit
      0001C1 D2 B4            [12] 1385 	setb	_P3_4
                                   1386 ;	ecen4330lab7.c:178: *map_address = d;
      0001C3 90 00 0D         [24] 1387 	mov	dptr,#0x000d
      0001C6 74 01            [12] 1388 	mov	a,#0x01
      0001C8 F0               [24] 1389 	movx	@dptr,a
                                   1390 ;	ecen4330lab7.c:179: IOM = 0;
                                   1391 ;	assignBit
      0001C9 C2 B4            [12] 1392 	clr	_P3_4
                                   1393 ;	ecen4330lab7.c:322: rtcBusy();
      0001CB 12r00rEC         [24] 1394 	lcall	_rtcBusy
                                   1395 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1396 ;	assignBit
      0001CE D2 B4            [12] 1397 	setb	_P3_4
                                   1398 ;	ecen4330lab7.c:191: data = *map_address;
      0001D0 90 00 04         [24] 1399 	mov	dptr,#0x0004
      0001D3 E0               [24] 1400 	movx	a,@dptr
      0001D4 F5*20            [12] 1401 	mov	_data,a
                                   1402 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1403 ;	assignBit
      0001D6 C2 B4            [12] 1404 	clr	_P3_4
                                   1405 ;	ecen4330lab7.c:193: return data;   
                                   1406 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001D8 E5*20            [12] 1407 	mov	a,_data
      0001DA 54 0F            [12] 1408 	anl	a,#0x0f
      0001DC 44 30            [12] 1409 	orl	a,#0x30
      0001DE F5*20            [12] 1410 	mov	_data,a
                                   1411 ;	ecen4330lab7.c:177: IOM = 1;
                                   1412 ;	assignBit
      0001E0 D2 B4            [12] 1413 	setb	_P3_4
                                   1414 ;	ecen4330lab7.c:178: *map_address = d;
      0001E2 90 00 0D         [24] 1415 	mov	dptr,#0x000d
      0001E5 E4               [12] 1416 	clr	a
      0001E6 F0               [24] 1417 	movx	@dptr,a
                                   1418 ;	ecen4330lab7.c:179: IOM = 0;
                                   1419 ;	assignBit
      0001E7 C2 B4            [12] 1420 	clr	_P3_4
                                   1421 ;	ecen4330lab7.c:327: return data;
      0001E9 85*20 82         [24] 1422 	mov	dpl,_data
                                   1423 ;	ecen4330lab7.c:351: write(t);
      0001EC 12r09r5F         [24] 1424 	lcall	_write
                                   1425 ;	ecen4330lab7.c:352: LCD_string_write(":");
      0001EF 90r05r0B         [24] 1426 	mov	dptr,#___str_0
      0001F2 75 F0 80         [24] 1427 	mov	b,#0x80
      0001F5 12r09rC5         [24] 1428 	lcall	_LCD_string_write
                                   1429 ;	ecen4330lab7.c:177: IOM = 1;
                                   1430 ;	assignBit
      0001F8 D2 B4            [12] 1431 	setb	_P3_4
                                   1432 ;	ecen4330lab7.c:178: *map_address = d;
      0001FA 90 00 0D         [24] 1433 	mov	dptr,#0x000d
      0001FD 74 01            [12] 1434 	mov	a,#0x01
      0001FF F0               [24] 1435 	movx	@dptr,a
                                   1436 ;	ecen4330lab7.c:179: IOM = 0;
                                   1437 ;	assignBit
      000200 C2 B4            [12] 1438 	clr	_P3_4
                                   1439 ;	ecen4330lab7.c:322: rtcBusy();
      000202 12r00rEC         [24] 1440 	lcall	_rtcBusy
                                   1441 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1442 ;	assignBit
      000205 D2 B4            [12] 1443 	setb	_P3_4
                                   1444 ;	ecen4330lab7.c:191: data = *map_address;
      000207 90 00 03         [24] 1445 	mov	dptr,#0x0003
      00020A E0               [24] 1446 	movx	a,@dptr
      00020B F5*20            [12] 1447 	mov	_data,a
                                   1448 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1449 ;	assignBit
      00020D C2 B4            [12] 1450 	clr	_P3_4
                                   1451 ;	ecen4330lab7.c:193: return data;   
                                   1452 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      00020F E5*20            [12] 1453 	mov	a,_data
      000211 54 0F            [12] 1454 	anl	a,#0x0f
      000213 44 30            [12] 1455 	orl	a,#0x30
      000215 F5*20            [12] 1456 	mov	_data,a
                                   1457 ;	ecen4330lab7.c:177: IOM = 1;
                                   1458 ;	assignBit
      000217 D2 B4            [12] 1459 	setb	_P3_4
                                   1460 ;	ecen4330lab7.c:178: *map_address = d;
      000219 90 00 0D         [24] 1461 	mov	dptr,#0x000d
      00021C E4               [12] 1462 	clr	a
      00021D F0               [24] 1463 	movx	@dptr,a
                                   1464 ;	ecen4330lab7.c:179: IOM = 0;
                                   1465 ;	assignBit
      00021E C2 B4            [12] 1466 	clr	_P3_4
                                   1467 ;	ecen4330lab7.c:327: return data;
      000220 85*20 82         [24] 1468 	mov	dpl,_data
                                   1469 ;	ecen4330lab7.c:354: write(t);
      000223 12r09r5F         [24] 1470 	lcall	_write
                                   1471 ;	ecen4330lab7.c:177: IOM = 1;
                                   1472 ;	assignBit
      000226 D2 B4            [12] 1473 	setb	_P3_4
                                   1474 ;	ecen4330lab7.c:178: *map_address = d;
      000228 90 00 0D         [24] 1475 	mov	dptr,#0x000d
      00022B 74 01            [12] 1476 	mov	a,#0x01
      00022D F0               [24] 1477 	movx	@dptr,a
                                   1478 ;	ecen4330lab7.c:179: IOM = 0;
                                   1479 ;	assignBit
      00022E C2 B4            [12] 1480 	clr	_P3_4
                                   1481 ;	ecen4330lab7.c:322: rtcBusy();
      000230 12r00rEC         [24] 1482 	lcall	_rtcBusy
                                   1483 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1484 ;	assignBit
      000233 D2 B4            [12] 1485 	setb	_P3_4
                                   1486 ;	ecen4330lab7.c:191: data = *map_address;
      000235 90 00 02         [24] 1487 	mov	dptr,#0x0002
      000238 E0               [24] 1488 	movx	a,@dptr
      000239 F5*20            [12] 1489 	mov	_data,a
                                   1490 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1491 ;	assignBit
      00023B C2 B4            [12] 1492 	clr	_P3_4
                                   1493 ;	ecen4330lab7.c:193: return data;   
                                   1494 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      00023D E5*20            [12] 1495 	mov	a,_data
      00023F 54 0F            [12] 1496 	anl	a,#0x0f
      000241 44 30            [12] 1497 	orl	a,#0x30
      000243 F5*20            [12] 1498 	mov	_data,a
                                   1499 ;	ecen4330lab7.c:177: IOM = 1;
                                   1500 ;	assignBit
      000245 D2 B4            [12] 1501 	setb	_P3_4
                                   1502 ;	ecen4330lab7.c:178: *map_address = d;
      000247 90 00 0D         [24] 1503 	mov	dptr,#0x000d
      00024A E4               [12] 1504 	clr	a
      00024B F0               [24] 1505 	movx	@dptr,a
                                   1506 ;	ecen4330lab7.c:179: IOM = 0;
                                   1507 ;	assignBit
      00024C C2 B4            [12] 1508 	clr	_P3_4
                                   1509 ;	ecen4330lab7.c:327: return data;
      00024E 85*20 82         [24] 1510 	mov	dpl,_data
                                   1511 ;	ecen4330lab7.c:356: write(t);
      000251 12r09r5F         [24] 1512 	lcall	_write
                                   1513 ;	ecen4330lab7.c:357: LCD_string_write(":");
      000254 90r05r0B         [24] 1514 	mov	dptr,#___str_0
      000257 75 F0 80         [24] 1515 	mov	b,#0x80
      00025A 12r09rC5         [24] 1516 	lcall	_LCD_string_write
                                   1517 ;	ecen4330lab7.c:177: IOM = 1;
                                   1518 ;	assignBit
      00025D D2 B4            [12] 1519 	setb	_P3_4
                                   1520 ;	ecen4330lab7.c:178: *map_address = d;
      00025F 90 00 0D         [24] 1521 	mov	dptr,#0x000d
      000262 74 01            [12] 1522 	mov	a,#0x01
      000264 F0               [24] 1523 	movx	@dptr,a
                                   1524 ;	ecen4330lab7.c:179: IOM = 0;
                                   1525 ;	assignBit
      000265 C2 B4            [12] 1526 	clr	_P3_4
                                   1527 ;	ecen4330lab7.c:322: rtcBusy();
      000267 12r00rEC         [24] 1528 	lcall	_rtcBusy
                                   1529 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1530 ;	assignBit
      00026A D2 B4            [12] 1531 	setb	_P3_4
                                   1532 ;	ecen4330lab7.c:191: data = *map_address;
      00026C 90 00 01         [24] 1533 	mov	dptr,#0x0001
      00026F E0               [24] 1534 	movx	a,@dptr
      000270 F5*20            [12] 1535 	mov	_data,a
                                   1536 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1537 ;	assignBit
      000272 C2 B4            [12] 1538 	clr	_P3_4
                                   1539 ;	ecen4330lab7.c:193: return data;   
                                   1540 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      000274 E5*20            [12] 1541 	mov	a,_data
      000276 54 0F            [12] 1542 	anl	a,#0x0f
      000278 44 30            [12] 1543 	orl	a,#0x30
      00027A F5*20            [12] 1544 	mov	_data,a
                                   1545 ;	ecen4330lab7.c:177: IOM = 1;
                                   1546 ;	assignBit
      00027C D2 B4            [12] 1547 	setb	_P3_4
                                   1548 ;	ecen4330lab7.c:178: *map_address = d;
      00027E 90 00 0D         [24] 1549 	mov	dptr,#0x000d
      000281 E4               [12] 1550 	clr	a
      000282 F0               [24] 1551 	movx	@dptr,a
                                   1552 ;	ecen4330lab7.c:179: IOM = 0;
                                   1553 ;	assignBit
      000283 C2 B4            [12] 1554 	clr	_P3_4
                                   1555 ;	ecen4330lab7.c:327: return data;
      000285 85*20 82         [24] 1556 	mov	dpl,_data
                                   1557 ;	ecen4330lab7.c:359: write(t);
      000288 12r09r5F         [24] 1558 	lcall	_write
                                   1559 ;	ecen4330lab7.c:177: IOM = 1;
                                   1560 ;	assignBit
      00028B D2 B4            [12] 1561 	setb	_P3_4
                                   1562 ;	ecen4330lab7.c:178: *map_address = d;
      00028D 90 00 0D         [24] 1563 	mov	dptr,#0x000d
      000290 74 01            [12] 1564 	mov	a,#0x01
      000292 F0               [24] 1565 	movx	@dptr,a
                                   1566 ;	ecen4330lab7.c:179: IOM = 0;
                                   1567 ;	assignBit
      000293 C2 B4            [12] 1568 	clr	_P3_4
                                   1569 ;	ecen4330lab7.c:322: rtcBusy();
      000295 12r00rEC         [24] 1570 	lcall	_rtcBusy
                                   1571 ;	ecen4330lab7.c:190: IOM = 1;                            
                                   1572 ;	assignBit
      000298 D2 B4            [12] 1573 	setb	_P3_4
                                   1574 ;	ecen4330lab7.c:191: data = *map_address;
      00029A 90 00 00         [24] 1575 	mov	dptr,#0x0000
      00029D E0               [24] 1576 	movx	a,@dptr
      00029E F5*20            [12] 1577 	mov	_data,a
                                   1578 ;	ecen4330lab7.c:192: IOM = 0;    
                                   1579 ;	assignBit
      0002A0 C2 B4            [12] 1580 	clr	_P3_4
                                   1581 ;	ecen4330lab7.c:193: return data;   
                                   1582 ;	ecen4330lab7.c:325: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002A2 E5*20            [12] 1583 	mov	a,_data
      0002A4 54 0F            [12] 1584 	anl	a,#0x0f
      0002A6 44 30            [12] 1585 	orl	a,#0x30
      0002A8 F5*20            [12] 1586 	mov	_data,a
                                   1587 ;	ecen4330lab7.c:177: IOM = 1;
                                   1588 ;	assignBit
      0002AA D2 B4            [12] 1589 	setb	_P3_4
                                   1590 ;	ecen4330lab7.c:178: *map_address = d;
      0002AC 90 00 0D         [24] 1591 	mov	dptr,#0x000d
      0002AF E4               [12] 1592 	clr	a
      0002B0 F0               [24] 1593 	movx	@dptr,a
                                   1594 ;	ecen4330lab7.c:179: IOM = 0;
                                   1595 ;	assignBit
      0002B1 C2 B4            [12] 1596 	clr	_P3_4
                                   1597 ;	ecen4330lab7.c:327: return data;
      0002B3 85*20 82         [24] 1598 	mov	dpl,_data
                                   1599 ;	ecen4330lab7.c:361: write(t);
      0002B6 12r09r5F         [24] 1600 	lcall	_write
                                   1601 ;	ecen4330lab7.c:363: cursor_x = xCursorHold;
      0002B9 85*38*08         [24] 1602 	mov	_cursor_x,_xCursorHold
      0002BC 75*09 00         [24] 1603 	mov	(_cursor_x + 1),#0x00
                                   1604 ;	ecen4330lab7.c:364: cursor_y = yCursorHold;
      0002BF 85*39*0A         [24] 1605 	mov	_cursor_y,_yCursorHold
      0002C2 75*0B 00         [24] 1606 	mov	(_cursor_y + 1),#0x00
                                   1607 ;	ecen4330lab7.c:365: textsize = textSizeHold;
      0002C5 85*3A*0C         [24] 1608 	mov	_textsize,_textSizeHold
                                   1609 ;	ecen4330lab7.c:366: }
      0002C8 22               [24] 1610 	ret
                                   1611 ;------------------------------------------------------------
                                   1612 ;Allocation info for local variables in function 'setCursor'
                                   1613 ;------------------------------------------------------------
                                   1614 ;y                         Allocated with name '_setCursor_PARM_2'
                                   1615 ;x                         Allocated to registers 
                                   1616 ;------------------------------------------------------------
                                   1617 ;	ecen4330lab7.c:386: void setCursor(u16 x, u16 y){
                                   1618 ;	-----------------------------------------
                                   1619 ;	 function setCursor
                                   1620 ;	-----------------------------------------
      0002C9                       1621 _setCursor:
      0002C9 85 82*08         [24] 1622 	mov	_cursor_x,dpl
      0002CC 85 83*09         [24] 1623 	mov	(_cursor_x + 1),dph
                                   1624 ;	ecen4330lab7.c:388: cursor_y = y;
      0002CF 85*00*0A         [24] 1625 	mov	_cursor_y,_setCursor_PARM_2
      0002D2 85*01*0B         [24] 1626 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   1627 ;	ecen4330lab7.c:389: }
      0002D5 22               [24] 1628 	ret
                                   1629 ;------------------------------------------------------------
                                   1630 ;Allocation info for local variables in function 'setTextColor'
                                   1631 ;------------------------------------------------------------
                                   1632 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   1633 ;x                         Allocated to registers 
                                   1634 ;------------------------------------------------------------
                                   1635 ;	ecen4330lab7.c:397: void setTextColor(u16 x, u16 y){
                                   1636 ;	-----------------------------------------
                                   1637 ;	 function setTextColor
                                   1638 ;	-----------------------------------------
      0002D6                       1639 _setTextColor:
      0002D6 85 82*0E         [24] 1640 	mov	_textcolor,dpl
      0002D9 85 83*0F         [24] 1641 	mov	(_textcolor + 1),dph
                                   1642 ;	ecen4330lab7.c:399: textbgcolor = y;
      0002DC 85*00*10         [24] 1643 	mov	_textbgcolor,_setTextColor_PARM_2
      0002DF 85*01*11         [24] 1644 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   1645 ;	ecen4330lab7.c:400: }
      0002E2 22               [24] 1646 	ret
                                   1647 ;------------------------------------------------------------
                                   1648 ;Allocation info for local variables in function 'setTextSize'
                                   1649 ;------------------------------------------------------------
                                   1650 ;s                         Allocated to registers r7 
                                   1651 ;------------------------------------------------------------
                                   1652 ;	ecen4330lab7.c:408: void setTextSize(u8 s){
                                   1653 ;	-----------------------------------------
                                   1654 ;	 function setTextSize
                                   1655 ;	-----------------------------------------
      0002E3                       1656 _setTextSize:
                                   1657 ;	ecen4330lab7.c:409: if (s > 8) return;
      0002E3 E5 82            [12] 1658 	mov	a,dpl
      0002E5 FF               [12] 1659 	mov	r7,a
      0002E6 24 F7            [12] 1660 	add	a,#0xff - 0x08
      0002E8 50 01            [24] 1661 	jnc	00102$
      0002EA 22               [24] 1662 	ret
      0002EB                       1663 00102$:
                                   1664 ;	ecen4330lab7.c:410: textsize = (s>0) ? s : 1 ;
      0002EB EF               [12] 1665 	mov	a,r7
      0002EC 60 06            [24] 1666 	jz	00105$
      0002EE 8F 06            [24] 1667 	mov	ar6,r7
      0002F0 7F 00            [12] 1668 	mov	r7,#0x00
      0002F2 80 04            [24] 1669 	sjmp	00106$
      0002F4                       1670 00105$:
      0002F4 7E 01            [12] 1671 	mov	r6,#0x01
      0002F6 7F 00            [12] 1672 	mov	r7,#0x00
      0002F8                       1673 00106$:
      0002F8 8E*0C            [24] 1674 	mov	_textsize,r6
                                   1675 ;	ecen4330lab7.c:411: }
      0002FA 22               [24] 1676 	ret
                                   1677 ;------------------------------------------------------------
                                   1678 ;Allocation info for local variables in function 'setRotation'
                                   1679 ;------------------------------------------------------------
                                   1680 ;flag                      Allocated to registers r7 
                                   1681 ;------------------------------------------------------------
                                   1682 ;	ecen4330lab7.c:419: void setRotation(u8 flag){
                                   1683 ;	-----------------------------------------
                                   1684 ;	 function setRotation
                                   1685 ;	-----------------------------------------
      0002FB                       1686 _setRotation:
                                   1687 ;	ecen4330lab7.c:420: switch(flag) {
      0002FB E5 82            [12] 1688 	mov	a,dpl
      0002FD FF               [12] 1689 	mov	r7,a
      0002FE 24 FC            [12] 1690 	add	a,#0xff - 0x03
      000300 40 4E            [24] 1691 	jc	00105$
      000302 EF               [12] 1692 	mov	a,r7
      000303 2F               [12] 1693 	add	a,r7
                                   1694 ;	ecen4330lab7.c:421: case 0:
      000304 90r03r08         [24] 1695 	mov	dptr,#00115$
      000307 73               [24] 1696 	jmp	@a+dptr
      000308                       1697 00115$:
      000308 80 06            [24] 1698 	sjmp	00101$
      00030A 80 14            [24] 1699 	sjmp	00102$
      00030C 80 22            [24] 1700 	sjmp	00103$
      00030E 80 30            [24] 1701 	sjmp	00104$
      000310                       1702 00101$:
                                   1703 ;	ecen4330lab7.c:422: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000310 7F 48            [12] 1704 	mov	r7,#0x48
                                   1705 ;	ecen4330lab7.c:423: _width = TFTWIDTH;
      000312 75*12 F0         [24] 1706 	mov	__width,#0xf0
      000315 75*13 00         [24] 1707 	mov	(__width + 1),#0x00
                                   1708 ;	ecen4330lab7.c:424: _height = TFTHEIGHT;
      000318 75*14 40         [24] 1709 	mov	__height,#0x40
      00031B 75*15 01         [24] 1710 	mov	(__height + 1),#0x01
                                   1711 ;	ecen4330lab7.c:425: break;
                                   1712 ;	ecen4330lab7.c:426: case 1:
      00031E 80 3E            [24] 1713 	sjmp	00106$
      000320                       1714 00102$:
                                   1715 ;	ecen4330lab7.c:427: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000320 7F 28            [12] 1716 	mov	r7,#0x28
                                   1717 ;	ecen4330lab7.c:428: _width = TFTHEIGHT;
      000322 75*12 40         [24] 1718 	mov	__width,#0x40
      000325 75*13 01         [24] 1719 	mov	(__width + 1),#0x01
                                   1720 ;	ecen4330lab7.c:429: _height = TFTWIDTH;
      000328 75*14 F0         [24] 1721 	mov	__height,#0xf0
      00032B 75*15 00         [24] 1722 	mov	(__height + 1),#0x00
                                   1723 ;	ecen4330lab7.c:430: break;
                                   1724 ;	ecen4330lab7.c:431: case 2:
      00032E 80 2E            [24] 1725 	sjmp	00106$
      000330                       1726 00103$:
                                   1727 ;	ecen4330lab7.c:432: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000330 7F 88            [12] 1728 	mov	r7,#0x88
                                   1729 ;	ecen4330lab7.c:433: _width = TFTWIDTH;
      000332 75*12 F0         [24] 1730 	mov	__width,#0xf0
      000335 75*13 00         [24] 1731 	mov	(__width + 1),#0x00
                                   1732 ;	ecen4330lab7.c:434: _height = TFTHEIGHT;
      000338 75*14 40         [24] 1733 	mov	__height,#0x40
      00033B 75*15 01         [24] 1734 	mov	(__height + 1),#0x01
                                   1735 ;	ecen4330lab7.c:435: break;
                                   1736 ;	ecen4330lab7.c:436: case 3:
      00033E 80 1E            [24] 1737 	sjmp	00106$
      000340                       1738 00104$:
                                   1739 ;	ecen4330lab7.c:437: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000340 7F E8            [12] 1740 	mov	r7,#0xe8
                                   1741 ;	ecen4330lab7.c:438: _width = TFTHEIGHT;
      000342 75*12 40         [24] 1742 	mov	__width,#0x40
      000345 75*13 01         [24] 1743 	mov	(__width + 1),#0x01
                                   1744 ;	ecen4330lab7.c:439: _height = TFTWIDTH;
      000348 75*14 F0         [24] 1745 	mov	__height,#0xf0
      00034B 75*15 00         [24] 1746 	mov	(__height + 1),#0x00
                                   1747 ;	ecen4330lab7.c:440: break;
                                   1748 ;	ecen4330lab7.c:441: default:
      00034E 80 0E            [24] 1749 	sjmp	00106$
      000350                       1750 00105$:
                                   1751 ;	ecen4330lab7.c:442: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000350 7F 48            [12] 1752 	mov	r7,#0x48
                                   1753 ;	ecen4330lab7.c:443: _width = TFTWIDTH;
      000352 75*12 F0         [24] 1754 	mov	__width,#0xf0
      000355 75*13 00         [24] 1755 	mov	(__width + 1),#0x00
                                   1756 ;	ecen4330lab7.c:444: _height = TFTHEIGHT;
      000358 75*14 40         [24] 1757 	mov	__height,#0x40
      00035B 75*15 01         [24] 1758 	mov	(__height + 1),#0x01
                                   1759 ;	ecen4330lab7.c:446: }
      00035E                       1760 00106$:
                                   1761 ;	ecen4330lab7.c:447: writeRegister8(ILI9341_MEMCONTROL, flag);
      00035E 8F*00            [24] 1762 	mov	_writeRegister8_PARM_2,r7
      000360 75 82 36         [24] 1763 	mov	dpl,#0x36
                                   1764 ;	ecen4330lab7.c:448: }
      000363 02r00r51         [24] 1765 	ljmp	_writeRegister8
                                   1766 ;------------------------------------------------------------
                                   1767 ;Allocation info for local variables in function 'setAddress'
                                   1768 ;------------------------------------------------------------
                                   1769 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1770 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1771 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1772 ;x1                        Allocated to registers r6 r7 
                                   1773 ;------------------------------------------------------------
                                   1774 ;	ecen4330lab7.c:457: void setAddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2){
                                   1775 ;	-----------------------------------------
                                   1776 ;	 function setAddress
                                   1777 ;	-----------------------------------------
      000366                       1778 _setAddress:
      000366 AE 82            [24] 1779 	mov	r6,dpl
      000368 AF 83            [24] 1780 	mov	r7,dph
                                   1781 ;	ecen4330lab7.c:458: write8Reg(0x2A);
                                   1782 ;	assignBit
      00036A C2 B5            [12] 1783 	clr	_P3_5
                                   1784 ;	assignBit
      00036C D2 B4            [12] 1785 	setb	_P3_4
      00036E 85*02 82         [24] 1786 	mov	dpl,_lcd_address
      000371 85*03 83         [24] 1787 	mov	dph,(_lcd_address + 1)
      000374 74 2A            [12] 1788 	mov	a,#0x2a
      000376 F0               [24] 1789 	movx	@dptr,a
                                   1790 ;	assignBit
      000377 C2 B4            [12] 1791 	clr	_P3_4
                                   1792 ;	ecen4330lab7.c:459: write8Data(x1 >> 8);
                                   1793 ;	assignBit
      000379 D2 B5            [12] 1794 	setb	_P3_5
                                   1795 ;	assignBit
      00037B D2 B4            [12] 1796 	setb	_P3_4
      00037D 85*02 82         [24] 1797 	mov	dpl,_lcd_address
      000380 85*03 83         [24] 1798 	mov	dph,(_lcd_address + 1)
      000383 8F 05            [24] 1799 	mov	ar5,r7
      000385 ED               [12] 1800 	mov	a,r5
      000386 F0               [24] 1801 	movx	@dptr,a
                                   1802 ;	assignBit
      000387 C2 B4            [12] 1803 	clr	_P3_4
                                   1804 ;	ecen4330lab7.c:460: write8Data(x1);
                                   1805 ;	assignBit
      000389 D2 B5            [12] 1806 	setb	_P3_5
                                   1807 ;	assignBit
      00038B D2 B4            [12] 1808 	setb	_P3_4
      00038D 85*02 82         [24] 1809 	mov	dpl,_lcd_address
      000390 85*03 83         [24] 1810 	mov	dph,(_lcd_address + 1)
      000393 EE               [12] 1811 	mov	a,r6
      000394 F0               [24] 1812 	movx	@dptr,a
                                   1813 ;	assignBit
      000395 C2 B4            [12] 1814 	clr	_P3_4
                                   1815 ;	ecen4330lab7.c:461: write8Data(x2 >> 8);
                                   1816 ;	assignBit
      000397 D2 B5            [12] 1817 	setb	_P3_5
                                   1818 ;	assignBit
      000399 D2 B4            [12] 1819 	setb	_P3_4
      00039B 85*02 82         [24] 1820 	mov	dpl,_lcd_address
      00039E 85*03 83         [24] 1821 	mov	dph,(_lcd_address + 1)
      0003A1 E5*03            [12] 1822 	mov	a,(_setAddress_PARM_3 + 1)
      0003A3 F0               [24] 1823 	movx	@dptr,a
                                   1824 ;	assignBit
      0003A4 C2 B4            [12] 1825 	clr	_P3_4
                                   1826 ;	ecen4330lab7.c:462: write8Data(x2);
                                   1827 ;	assignBit
      0003A6 D2 B5            [12] 1828 	setb	_P3_5
                                   1829 ;	assignBit
      0003A8 D2 B4            [12] 1830 	setb	_P3_4
      0003AA 85*02 82         [24] 1831 	mov	dpl,_lcd_address
      0003AD 85*03 83         [24] 1832 	mov	dph,(_lcd_address + 1)
      0003B0 E5*02            [12] 1833 	mov	a,_setAddress_PARM_3
      0003B2 F0               [24] 1834 	movx	@dptr,a
                                   1835 ;	assignBit
      0003B3 C2 B4            [12] 1836 	clr	_P3_4
                                   1837 ;	ecen4330lab7.c:463: write8Reg(0x2B);
                                   1838 ;	assignBit
      0003B5 C2 B5            [12] 1839 	clr	_P3_5
                                   1840 ;	assignBit
      0003B7 D2 B4            [12] 1841 	setb	_P3_4
      0003B9 85*02 82         [24] 1842 	mov	dpl,_lcd_address
      0003BC 85*03 83         [24] 1843 	mov	dph,(_lcd_address + 1)
      0003BF 74 2B            [12] 1844 	mov	a,#0x2b
      0003C1 F0               [24] 1845 	movx	@dptr,a
                                   1846 ;	assignBit
      0003C2 C2 B4            [12] 1847 	clr	_P3_4
                                   1848 ;	ecen4330lab7.c:464: write8Data(y1 >> 8);
                                   1849 ;	assignBit
      0003C4 D2 B5            [12] 1850 	setb	_P3_5
                                   1851 ;	assignBit
      0003C6 D2 B4            [12] 1852 	setb	_P3_4
      0003C8 85*02 82         [24] 1853 	mov	dpl,_lcd_address
      0003CB 85*03 83         [24] 1854 	mov	dph,(_lcd_address + 1)
      0003CE E5*01            [12] 1855 	mov	a,(_setAddress_PARM_2 + 1)
      0003D0 F0               [24] 1856 	movx	@dptr,a
                                   1857 ;	assignBit
      0003D1 C2 B4            [12] 1858 	clr	_P3_4
                                   1859 ;	ecen4330lab7.c:465: write8Data(y1);
                                   1860 ;	assignBit
      0003D3 D2 B5            [12] 1861 	setb	_P3_5
                                   1862 ;	assignBit
      0003D5 D2 B4            [12] 1863 	setb	_P3_4
      0003D7 85*02 82         [24] 1864 	mov	dpl,_lcd_address
      0003DA 85*03 83         [24] 1865 	mov	dph,(_lcd_address + 1)
      0003DD E5*00            [12] 1866 	mov	a,_setAddress_PARM_2
      0003DF F0               [24] 1867 	movx	@dptr,a
                                   1868 ;	assignBit
      0003E0 C2 B4            [12] 1869 	clr	_P3_4
                                   1870 ;	ecen4330lab7.c:466: write8Data(y2 >> 8);
                                   1871 ;	assignBit
      0003E2 D2 B5            [12] 1872 	setb	_P3_5
                                   1873 ;	assignBit
      0003E4 D2 B4            [12] 1874 	setb	_P3_4
      0003E6 85*02 82         [24] 1875 	mov	dpl,_lcd_address
      0003E9 85*03 83         [24] 1876 	mov	dph,(_lcd_address + 1)
      0003EC E5*05            [12] 1877 	mov	a,(_setAddress_PARM_4 + 1)
      0003EE F0               [24] 1878 	movx	@dptr,a
                                   1879 ;	assignBit
      0003EF C2 B4            [12] 1880 	clr	_P3_4
                                   1881 ;	ecen4330lab7.c:467: write8Data(y2);
                                   1882 ;	assignBit
      0003F1 D2 B5            [12] 1883 	setb	_P3_5
                                   1884 ;	assignBit
      0003F3 D2 B4            [12] 1885 	setb	_P3_4
      0003F5 85*02 82         [24] 1886 	mov	dpl,_lcd_address
      0003F8 85*03 83         [24] 1887 	mov	dph,(_lcd_address + 1)
      0003FB E5*04            [12] 1888 	mov	a,_setAddress_PARM_4
      0003FD F0               [24] 1889 	movx	@dptr,a
                                   1890 ;	assignBit
      0003FE C2 B4            [12] 1891 	clr	_P3_4
                                   1892 ;	ecen4330lab7.c:468: }
      000400 22               [24] 1893 	ret
                                   1894 ;------------------------------------------------------------
                                   1895 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1896 ;------------------------------------------------------------
                                   1897 ;	ecen4330lab7.c:476: void TFT_LCD_INIT(void){
                                   1898 ;	-----------------------------------------
                                   1899 ;	 function TFT_LCD_INIT
                                   1900 ;	-----------------------------------------
      000401                       1901 _TFT_LCD_INIT:
                                   1902 ;	ecen4330lab7.c:477: _width = TFTWIDTH;
      000401 75*12 F0         [24] 1903 	mov	__width,#0xf0
      000404 75*13 00         [24] 1904 	mov	(__width + 1),#0x00
                                   1905 ;	ecen4330lab7.c:478: _height = TFTHEIGHT;
      000407 75*14 40         [24] 1906 	mov	__height,#0x40
      00040A 75*15 01         [24] 1907 	mov	(__height + 1),#0x01
                                   1908 ;	ecen4330lab7.c:480: IOM = 0;
                                   1909 ;	assignBit
      00040D C2 B4            [12] 1910 	clr	_P3_4
                                   1911 ;	ecen4330lab7.c:481: CD = 1;
                                   1912 ;	assignBit
      00040F D2 B5            [12] 1913 	setb	_P3_5
                                   1914 ;	ecen4330lab7.c:483: write8Reg(0x00);
                                   1915 ;	assignBit
      000411 C2 B5            [12] 1916 	clr	_P3_5
                                   1917 ;	assignBit
      000413 D2 B4            [12] 1918 	setb	_P3_4
      000415 85*02 82         [24] 1919 	mov	dpl,_lcd_address
      000418 85*03 83         [24] 1920 	mov	dph,(_lcd_address + 1)
      00041B E4               [12] 1921 	clr	a
      00041C F0               [24] 1922 	movx	@dptr,a
                                   1923 ;	assignBit
      00041D C2 B4            [12] 1924 	clr	_P3_4
                                   1925 ;	ecen4330lab7.c:484: write8Data(0x00);
                                   1926 ;	assignBit
      00041F D2 B5            [12] 1927 	setb	_P3_5
                                   1928 ;	assignBit
      000421 D2 B4            [12] 1929 	setb	_P3_4
      000423 85*02 82         [24] 1930 	mov	dpl,_lcd_address
      000426 85*03 83         [24] 1931 	mov	dph,(_lcd_address + 1)
      000429 E4               [12] 1932 	clr	a
      00042A F0               [24] 1933 	movx	@dptr,a
                                   1934 ;	assignBit
      00042B C2 B4            [12] 1935 	clr	_P3_4
                                   1936 ;	ecen4330lab7.c:485: write8Data(0x00);
                                   1937 ;	assignBit
      00042D D2 B5            [12] 1938 	setb	_P3_5
                                   1939 ;	assignBit
      00042F D2 B4            [12] 1940 	setb	_P3_4
      000431 85*02 82         [24] 1941 	mov	dpl,_lcd_address
      000434 85*03 83         [24] 1942 	mov	dph,(_lcd_address + 1)
      000437 E4               [12] 1943 	clr	a
      000438 F0               [24] 1944 	movx	@dptr,a
                                   1945 ;	assignBit
      000439 C2 B4            [12] 1946 	clr	_P3_4
                                   1947 ;	ecen4330lab7.c:486: write8Data(0x00);
                                   1948 ;	assignBit
      00043B D2 B5            [12] 1949 	setb	_P3_5
                                   1950 ;	assignBit
      00043D D2 B4            [12] 1951 	setb	_P3_4
      00043F 85*02 82         [24] 1952 	mov	dpl,_lcd_address
      000442 85*03 83         [24] 1953 	mov	dph,(_lcd_address + 1)
      000445 E4               [12] 1954 	clr	a
      000446 F0               [24] 1955 	movx	@dptr,a
                                   1956 ;	assignBit
      000447 C2 B4            [12] 1957 	clr	_P3_4
                                   1958 ;	ecen4330lab7.c:487: delay(200);
      000449 90 00 C8         [24] 1959 	mov	dptr,#0x00c8
      00044C 12r00r25         [24] 1960 	lcall	_delay
                                   1961 ;	ecen4330lab7.c:489: writeRegister8(ILI9341_SOFTRESET, 0);
      00044F 75*00 00         [24] 1962 	mov	_writeRegister8_PARM_2,#0x00
      000452 75 82 01         [24] 1963 	mov	dpl,#0x01
      000455 12r00r51         [24] 1964 	lcall	_writeRegister8
                                   1965 ;	ecen4330lab7.c:490: delay(50);
      000458 90 00 32         [24] 1966 	mov	dptr,#0x0032
      00045B 12r00r25         [24] 1967 	lcall	_delay
                                   1968 ;	ecen4330lab7.c:492: writeRegister8(ILI9341_DISPLAYOFF, 0);
      00045E 75*00 00         [24] 1969 	mov	_writeRegister8_PARM_2,#0x00
      000461 75 82 28         [24] 1970 	mov	dpl,#0x28
      000464 12r00r51         [24] 1971 	lcall	_writeRegister8
                                   1972 ;	ecen4330lab7.c:493: delay(10);
      000467 90 00 0A         [24] 1973 	mov	dptr,#0x000a
      00046A 12r00r25         [24] 1974 	lcall	_delay
                                   1975 ;	ecen4330lab7.c:495: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      00046D 75*00 23         [24] 1976 	mov	_writeRegister8_PARM_2,#0x23
      000470 75 82 C0         [24] 1977 	mov	dpl,#0xc0
      000473 12r00r51         [24] 1978 	lcall	_writeRegister8
                                   1979 ;	ecen4330lab7.c:496: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000476 75*00 11         [24] 1980 	mov	_writeRegister8_PARM_2,#0x11
      000479 75 82 C1         [24] 1981 	mov	dpl,#0xc1
      00047C 12r00r51         [24] 1982 	lcall	_writeRegister8
                                   1983 ;	ecen4330lab7.c:497: write8Reg(ILI9341_VCOMCONTROL1);
                                   1984 ;	assignBit
      00047F C2 B5            [12] 1985 	clr	_P3_5
                                   1986 ;	assignBit
      000481 D2 B4            [12] 1987 	setb	_P3_4
      000483 85*02 82         [24] 1988 	mov	dpl,_lcd_address
      000486 85*03 83         [24] 1989 	mov	dph,(_lcd_address + 1)
      000489 74 C5            [12] 1990 	mov	a,#0xc5
      00048B F0               [24] 1991 	movx	@dptr,a
                                   1992 ;	assignBit
      00048C C2 B4            [12] 1993 	clr	_P3_4
                                   1994 ;	ecen4330lab7.c:498: write8Data(0x3d);
                                   1995 ;	assignBit
      00048E D2 B5            [12] 1996 	setb	_P3_5
                                   1997 ;	assignBit
      000490 D2 B4            [12] 1998 	setb	_P3_4
      000492 85*02 82         [24] 1999 	mov	dpl,_lcd_address
      000495 85*03 83         [24] 2000 	mov	dph,(_lcd_address + 1)
      000498 74 3D            [12] 2001 	mov	a,#0x3d
      00049A F0               [24] 2002 	movx	@dptr,a
                                   2003 ;	assignBit
      00049B C2 B4            [12] 2004 	clr	_P3_4
                                   2005 ;	ecen4330lab7.c:499: write8Data(0x30);
                                   2006 ;	assignBit
      00049D D2 B5            [12] 2007 	setb	_P3_5
                                   2008 ;	assignBit
      00049F D2 B4            [12] 2009 	setb	_P3_4
      0004A1 85*02 82         [24] 2010 	mov	dpl,_lcd_address
      0004A4 85*03 83         [24] 2011 	mov	dph,(_lcd_address + 1)
      0004A7 74 30            [12] 2012 	mov	a,#0x30
      0004A9 F0               [24] 2013 	movx	@dptr,a
                                   2014 ;	assignBit
      0004AA C2 B4            [12] 2015 	clr	_P3_4
                                   2016 ;	ecen4330lab7.c:500: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0004AC 75*00 AA         [24] 2017 	mov	_writeRegister8_PARM_2,#0xaa
      0004AF 75 82 C7         [24] 2018 	mov	dpl,#0xc7
      0004B2 12r00r51         [24] 2019 	lcall	_writeRegister8
                                   2020 ;	ecen4330lab7.c:501: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0004B5 75*00 88         [24] 2021 	mov	_writeRegister8_PARM_2,#0x88
      0004B8 75 82 36         [24] 2022 	mov	dpl,#0x36
      0004BB 12r00r51         [24] 2023 	lcall	_writeRegister8
                                   2024 ;	ecen4330lab7.c:502: write8Reg(ILI9341_PIXELFORMAT);
                                   2025 ;	assignBit
      0004BE C2 B5            [12] 2026 	clr	_P3_5
                                   2027 ;	assignBit
      0004C0 D2 B4            [12] 2028 	setb	_P3_4
      0004C2 85*02 82         [24] 2029 	mov	dpl,_lcd_address
      0004C5 85*03 83         [24] 2030 	mov	dph,(_lcd_address + 1)
      0004C8 74 3A            [12] 2031 	mov	a,#0x3a
      0004CA F0               [24] 2032 	movx	@dptr,a
                                   2033 ;	assignBit
      0004CB C2 B4            [12] 2034 	clr	_P3_4
                                   2035 ;	ecen4330lab7.c:503: write8Data(0x55);
                                   2036 ;	assignBit
      0004CD D2 B5            [12] 2037 	setb	_P3_5
                                   2038 ;	assignBit
      0004CF D2 B4            [12] 2039 	setb	_P3_4
      0004D1 85*02 82         [24] 2040 	mov	dpl,_lcd_address
      0004D4 85*03 83         [24] 2041 	mov	dph,(_lcd_address + 1)
      0004D7 74 55            [12] 2042 	mov	a,#0x55
      0004D9 F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	assignBit
      0004DA C2 B4            [12] 2045 	clr	_P3_4
                                   2046 ;	ecen4330lab7.c:504: write8Data(0x00);
                                   2047 ;	assignBit
      0004DC D2 B5            [12] 2048 	setb	_P3_5
                                   2049 ;	assignBit
      0004DE D2 B4            [12] 2050 	setb	_P3_4
      0004E0 85*02 82         [24] 2051 	mov	dpl,_lcd_address
      0004E3 85*03 83         [24] 2052 	mov	dph,(_lcd_address + 1)
      0004E6 E4               [12] 2053 	clr	a
      0004E7 F0               [24] 2054 	movx	@dptr,a
                                   2055 ;	assignBit
      0004E8 C2 B4            [12] 2056 	clr	_P3_4
                                   2057 ;	ecen4330lab7.c:505: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0004EA 75*00 1B         [24] 2058 	mov	_writeRegister16_PARM_2,#0x1b
      0004ED 75*01 00         [24] 2059 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0004F0 90 00 B1         [24] 2060 	mov	dptr,#0x00b1
      0004F3 12r00r71         [24] 2061 	lcall	_writeRegister16
                                   2062 ;	ecen4330lab7.c:506: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0004F6 75*00 07         [24] 2063 	mov	_writeRegister8_PARM_2,#0x07
      0004F9 75 82 B7         [24] 2064 	mov	dpl,#0xb7
      0004FC 12r00r51         [24] 2065 	lcall	_writeRegister8
                                   2066 ;	ecen4330lab7.c:507: writeRegister8(ILI9341_SLEEPOUT, 0);
      0004FF 75*00 00         [24] 2067 	mov	_writeRegister8_PARM_2,#0x00
      000502 75 82 11         [24] 2068 	mov	dpl,#0x11
      000505 12r00r51         [24] 2069 	lcall	_writeRegister8
                                   2070 ;	ecen4330lab7.c:508: delay(150);
      000508 90 00 96         [24] 2071 	mov	dptr,#0x0096
      00050B 12r00r25         [24] 2072 	lcall	_delay
                                   2073 ;	ecen4330lab7.c:510: writeRegister8(ILI9341_DISPLAYON, 0);
      00050E 75*00 00         [24] 2074 	mov	_writeRegister8_PARM_2,#0x00
      000511 75 82 29         [24] 2075 	mov	dpl,#0x29
      000514 12r00r51         [24] 2076 	lcall	_writeRegister8
                                   2077 ;	ecen4330lab7.c:511: delay(500);
      000517 90 01 F4         [24] 2078 	mov	dptr,#0x01f4
      00051A 12r00r25         [24] 2079 	lcall	_delay
                                   2080 ;	ecen4330lab7.c:513: setAddress(0,0,_width-1,_height-1);
      00051D E5*12            [12] 2081 	mov	a,__width
      00051F 24 FF            [12] 2082 	add	a,#0xff
      000521 F5*02            [12] 2083 	mov	_setAddress_PARM_3,a
      000523 E5*13            [12] 2084 	mov	a,(__width + 1)
      000525 34 FF            [12] 2085 	addc	a,#0xff
      000527 F5*03            [12] 2086 	mov	(_setAddress_PARM_3 + 1),a
      000529 E5*14            [12] 2087 	mov	a,__height
      00052B 24 FF            [12] 2088 	add	a,#0xff
      00052D F5*04            [12] 2089 	mov	_setAddress_PARM_4,a
      00052F E5*15            [12] 2090 	mov	a,(__height + 1)
      000531 34 FF            [12] 2091 	addc	a,#0xff
      000533 F5*05            [12] 2092 	mov	(_setAddress_PARM_4 + 1),a
      000535 E4               [12] 2093 	clr	a
      000536 F5*00            [12] 2094 	mov	_setAddress_PARM_2,a
      000538 F5*01            [12] 2095 	mov	(_setAddress_PARM_2 + 1),a
      00053A 90 00 00         [24] 2096 	mov	dptr,#0x0000
                                   2097 ;	ecen4330lab7.c:514: }
      00053D 02r03r66         [24] 2098 	ljmp	_setAddress
                                   2099 ;------------------------------------------------------------
                                   2100 ;Allocation info for local variables in function 'drawPixel'
                                   2101 ;------------------------------------------------------------
                                   2102 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2103 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2104 ;x3                        Allocated to registers r6 r7 
                                   2105 ;------------------------------------------------------------
                                   2106 ;	ecen4330lab7.c:522: void drawPixel(u16 x3,u16 y3,u16 color1)
                                   2107 ;	-----------------------------------------
                                   2108 ;	 function drawPixel
                                   2109 ;	-----------------------------------------
      000540                       2110 _drawPixel:
      000540 AE 82            [24] 2111 	mov	r6,dpl
      000542 AF 83            [24] 2112 	mov	r7,dph
                                   2113 ;	ecen4330lab7.c:524: setAddress(x3,y3,x3+1,y3+1);
      000544 74 01            [12] 2114 	mov	a,#0x01
      000546 2E               [12] 2115 	add	a,r6
      000547 F5*02            [12] 2116 	mov	_setAddress_PARM_3,a
      000549 E4               [12] 2117 	clr	a
      00054A 3F               [12] 2118 	addc	a,r7
      00054B F5*03            [12] 2119 	mov	(_setAddress_PARM_3 + 1),a
      00054D 74 01            [12] 2120 	mov	a,#0x01
      00054F 25*44            [12] 2121 	add	a,_drawPixel_PARM_2
      000551 F5*04            [12] 2122 	mov	_setAddress_PARM_4,a
      000553 E4               [12] 2123 	clr	a
      000554 35*45            [12] 2124 	addc	a,(_drawPixel_PARM_2 + 1)
      000556 F5*05            [12] 2125 	mov	(_setAddress_PARM_4 + 1),a
      000558 85*44*00         [24] 2126 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00055B 85*45*01         [24] 2127 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      00055E 8E 82            [24] 2128 	mov	dpl,r6
      000560 8F 83            [24] 2129 	mov	dph,r7
      000562 12r03r66         [24] 2130 	lcall	_setAddress
                                   2131 ;	ecen4330lab7.c:525: CD=0; 
                                   2132 ;	assignBit
      000565 C2 B5            [12] 2133 	clr	_P3_5
                                   2134 ;	ecen4330lab7.c:526: write8(0x2C);
                                   2135 ;	assignBit
      000567 D2 B4            [12] 2136 	setb	_P3_4
      000569 85*02 82         [24] 2137 	mov	dpl,_lcd_address
      00056C 85*03 83         [24] 2138 	mov	dph,(_lcd_address + 1)
      00056F 74 2C            [12] 2139 	mov	a,#0x2c
      000571 F0               [24] 2140 	movx	@dptr,a
                                   2141 ;	assignBit
      000572 C2 B4            [12] 2142 	clr	_P3_4
                                   2143 ;	ecen4330lab7.c:527: CD = 1;
                                   2144 ;	assignBit
      000574 D2 B5            [12] 2145 	setb	_P3_5
                                   2146 ;	ecen4330lab7.c:528: write8(color1>>8);
                                   2147 ;	assignBit
      000576 D2 B4            [12] 2148 	setb	_P3_4
      000578 85*02 82         [24] 2149 	mov	dpl,_lcd_address
      00057B 85*03 83         [24] 2150 	mov	dph,(_lcd_address + 1)
      00057E E5*47            [12] 2151 	mov	a,(_drawPixel_PARM_3 + 1)
      000580 F0               [24] 2152 	movx	@dptr,a
                                   2153 ;	assignBit
      000581 C2 B4            [12] 2154 	clr	_P3_4
                                   2155 ;	ecen4330lab7.c:529: write8(color1);
                                   2156 ;	assignBit
      000583 D2 B4            [12] 2157 	setb	_P3_4
      000585 85*02 82         [24] 2158 	mov	dpl,_lcd_address
      000588 85*03 83         [24] 2159 	mov	dph,(_lcd_address + 1)
      00058B E5*46            [12] 2160 	mov	a,_drawPixel_PARM_3
      00058D F0               [24] 2161 	movx	@dptr,a
                                   2162 ;	assignBit
      00058E C2 B4            [12] 2163 	clr	_P3_4
                                   2164 ;	ecen4330lab7.c:530: }
      000590 22               [24] 2165 	ret
                                   2166 ;------------------------------------------------------------
                                   2167 ;Allocation info for local variables in function 'fillRect'
                                   2168 ;------------------------------------------------------------
                                   2169 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2170 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2171 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2172 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2173 ;x                         Allocated to registers 
                                   2174 ;------------------------------------------------------------
                                   2175 ;	ecen4330lab7.c:538: void fillRect(u16 x,u16 y,u16 w,u16 h,u16 color){
                                   2176 ;	-----------------------------------------
                                   2177 ;	 function fillRect
                                   2178 ;	-----------------------------------------
      000591                       2179 _fillRect:
      000591 AE 82            [24] 2180 	mov	r6,dpl
      000593 AF 83            [24] 2181 	mov	r7,dph
                                   2182 ;	ecen4330lab7.c:539: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000595 C3               [12] 2183 	clr	c
      000596 EE               [12] 2184 	mov	a,r6
      000597 94 F0            [12] 2185 	subb	a,#0xf0
      000599 EF               [12] 2186 	mov	a,r7
      00059A 94 00            [12] 2187 	subb	a,#0x00
      00059C 50 0B            [24] 2188 	jnc	00101$
      00059E C3               [12] 2189 	clr	c
      00059F E5*48            [12] 2190 	mov	a,_fillRect_PARM_2
      0005A1 94 40            [12] 2191 	subb	a,#0x40
      0005A3 E5*49            [12] 2192 	mov	a,(_fillRect_PARM_2 + 1)
      0005A5 94 01            [12] 2193 	subb	a,#0x01
      0005A7 40 01            [24] 2194 	jc	00102$
      0005A9                       2195 00101$:
                                   2196 ;	ecen4330lab7.c:541: return;
      0005A9 22               [24] 2197 	ret
      0005AA                       2198 00102$:
                                   2199 ;	ecen4330lab7.c:544: if ((x+w-1) >= TFTWIDTH)
      0005AA E5*4A            [12] 2200 	mov	a,_fillRect_PARM_3
      0005AC 2E               [12] 2201 	add	a,r6
      0005AD FC               [12] 2202 	mov	r4,a
      0005AE E5*4B            [12] 2203 	mov	a,(_fillRect_PARM_3 + 1)
      0005B0 3F               [12] 2204 	addc	a,r7
      0005B1 FD               [12] 2205 	mov	r5,a
      0005B2 1C               [12] 2206 	dec	r4
      0005B3 BC FF 01         [24] 2207 	cjne	r4,#0xff,00161$
      0005B6 1D               [12] 2208 	dec	r5
      0005B7                       2209 00161$:
      0005B7 C3               [12] 2210 	clr	c
      0005B8 EC               [12] 2211 	mov	a,r4
      0005B9 94 F0            [12] 2212 	subb	a,#0xf0
      0005BB ED               [12] 2213 	mov	a,r5
      0005BC 94 00            [12] 2214 	subb	a,#0x00
      0005BE 40 0A            [24] 2215 	jc	00105$
                                   2216 ;	ecen4330lab7.c:546: w = TFTWIDTH-x;
      0005C0 74 F0            [12] 2217 	mov	a,#0xf0
      0005C2 C3               [12] 2218 	clr	c
      0005C3 9E               [12] 2219 	subb	a,r6
      0005C4 F5*4A            [12] 2220 	mov	_fillRect_PARM_3,a
      0005C6 E4               [12] 2221 	clr	a
      0005C7 9F               [12] 2222 	subb	a,r7
      0005C8 F5*4B            [12] 2223 	mov	(_fillRect_PARM_3 + 1),a
      0005CA                       2224 00105$:
                                   2225 ;	ecen4330lab7.c:549: if ((y+h-1) >= TFTHEIGHT)
      0005CA E5*4C            [12] 2226 	mov	a,_fillRect_PARM_4
      0005CC 25*48            [12] 2227 	add	a,_fillRect_PARM_2
      0005CE FC               [12] 2228 	mov	r4,a
      0005CF E5*4D            [12] 2229 	mov	a,(_fillRect_PARM_4 + 1)
      0005D1 35*49            [12] 2230 	addc	a,(_fillRect_PARM_2 + 1)
      0005D3 FD               [12] 2231 	mov	r5,a
      0005D4 1C               [12] 2232 	dec	r4
      0005D5 BC FF 01         [24] 2233 	cjne	r4,#0xff,00163$
      0005D8 1D               [12] 2234 	dec	r5
      0005D9                       2235 00163$:
      0005D9 C3               [12] 2236 	clr	c
      0005DA EC               [12] 2237 	mov	a,r4
      0005DB 94 40            [12] 2238 	subb	a,#0x40
      0005DD ED               [12] 2239 	mov	a,r5
      0005DE 94 01            [12] 2240 	subb	a,#0x01
      0005E0 40 0D            [24] 2241 	jc	00107$
                                   2242 ;	ecen4330lab7.c:551: h = TFTHEIGHT-y;
      0005E2 74 40            [12] 2243 	mov	a,#0x40
      0005E4 C3               [12] 2244 	clr	c
      0005E5 95*48            [12] 2245 	subb	a,_fillRect_PARM_2
      0005E7 F5*4C            [12] 2246 	mov	_fillRect_PARM_4,a
      0005E9 74 01            [12] 2247 	mov	a,#0x01
      0005EB 95*49            [12] 2248 	subb	a,(_fillRect_PARM_2 + 1)
      0005ED F5*4D            [12] 2249 	mov	(_fillRect_PARM_4 + 1),a
      0005EF                       2250 00107$:
                                   2251 ;	ecen4330lab7.c:554: setAddress(x, y, x+w-1, y+h-1);
      0005EF E5*4A            [12] 2252 	mov	a,_fillRect_PARM_3
      0005F1 2E               [12] 2253 	add	a,r6
      0005F2 FC               [12] 2254 	mov	r4,a
      0005F3 E5*4B            [12] 2255 	mov	a,(_fillRect_PARM_3 + 1)
      0005F5 3F               [12] 2256 	addc	a,r7
      0005F6 FD               [12] 2257 	mov	r5,a
      0005F7 EC               [12] 2258 	mov	a,r4
      0005F8 24 FF            [12] 2259 	add	a,#0xff
      0005FA F5*02            [12] 2260 	mov	_setAddress_PARM_3,a
      0005FC ED               [12] 2261 	mov	a,r5
      0005FD 34 FF            [12] 2262 	addc	a,#0xff
      0005FF F5*03            [12] 2263 	mov	(_setAddress_PARM_3 + 1),a
      000601 E5*4C            [12] 2264 	mov	a,_fillRect_PARM_4
      000603 25*48            [12] 2265 	add	a,_fillRect_PARM_2
      000605 FC               [12] 2266 	mov	r4,a
      000606 E5*4D            [12] 2267 	mov	a,(_fillRect_PARM_4 + 1)
      000608 35*49            [12] 2268 	addc	a,(_fillRect_PARM_2 + 1)
      00060A FD               [12] 2269 	mov	r5,a
      00060B EC               [12] 2270 	mov	a,r4
      00060C 24 FF            [12] 2271 	add	a,#0xff
      00060E F5*04            [12] 2272 	mov	_setAddress_PARM_4,a
      000610 ED               [12] 2273 	mov	a,r5
      000611 34 FF            [12] 2274 	addc	a,#0xff
      000613 F5*05            [12] 2275 	mov	(_setAddress_PARM_4 + 1),a
      000615 85*48*00         [24] 2276 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000618 85*49*01         [24] 2277 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      00061B 8E 82            [24] 2278 	mov	dpl,r6
      00061D 8F 83            [24] 2279 	mov	dph,r7
      00061F 12r03r66         [24] 2280 	lcall	_setAddress
                                   2281 ;	ecen4330lab7.c:555: write8Reg(0x2C);
                                   2282 ;	assignBit
      000622 C2 B5            [12] 2283 	clr	_P3_5
                                   2284 ;	assignBit
      000624 D2 B4            [12] 2285 	setb	_P3_4
      000626 85*02 82         [24] 2286 	mov	dpl,_lcd_address
      000629 85*03 83         [24] 2287 	mov	dph,(_lcd_address + 1)
      00062C 74 2C            [12] 2288 	mov	a,#0x2c
      00062E F0               [24] 2289 	movx	@dptr,a
                                   2290 ;	assignBit
      00062F C2 B4            [12] 2291 	clr	_P3_4
                                   2292 ;	ecen4330lab7.c:556: CD = 1;
                                   2293 ;	assignBit
      000631 D2 B5            [12] 2294 	setb	_P3_5
                                   2295 ;	ecen4330lab7.c:557: for(y=h; y>0; y--)
      000633 AF*4F            [24] 2296 	mov	r7,(_fillRect_PARM_5 + 1)
      000635 AD*4C            [24] 2297 	mov	r5,_fillRect_PARM_4
      000637 AE*4D            [24] 2298 	mov	r6,(_fillRect_PARM_4 + 1)
      000639                       2299 00114$:
      000639 ED               [12] 2300 	mov	a,r5
      00063A 4E               [12] 2301 	orl	a,r6
      00063B 60 30            [24] 2302 	jz	00116$
                                   2303 ;	ecen4330lab7.c:559: for(x=w; x>0; x--)
      00063D AB*4A            [24] 2304 	mov	r3,_fillRect_PARM_3
      00063F AC*4B            [24] 2305 	mov	r4,(_fillRect_PARM_3 + 1)
      000641                       2306 00111$:
      000641 EB               [12] 2307 	mov	a,r3
      000642 4C               [12] 2308 	orl	a,r4
      000643 60 21            [24] 2309 	jz	00115$
                                   2310 ;	ecen4330lab7.c:561: write8(color>>8); 
                                   2311 ;	assignBit
      000645 D2 B4            [12] 2312 	setb	_P3_4
      000647 85*02 82         [24] 2313 	mov	dpl,_lcd_address
      00064A 85*03 83         [24] 2314 	mov	dph,(_lcd_address + 1)
      00064D EF               [12] 2315 	mov	a,r7
      00064E F0               [24] 2316 	movx	@dptr,a
                                   2317 ;	assignBit
      00064F C2 B4            [12] 2318 	clr	_P3_4
                                   2319 ;	ecen4330lab7.c:562: write8(color);
                                   2320 ;	assignBit
      000651 D2 B4            [12] 2321 	setb	_P3_4
      000653 85*02 82         [24] 2322 	mov	dpl,_lcd_address
      000656 85*03 83         [24] 2323 	mov	dph,(_lcd_address + 1)
      000659 E5*4E            [12] 2324 	mov	a,_fillRect_PARM_5
      00065B FA               [12] 2325 	mov	r2,a
      00065C F0               [24] 2326 	movx	@dptr,a
                                   2327 ;	assignBit
      00065D C2 B4            [12] 2328 	clr	_P3_4
                                   2329 ;	ecen4330lab7.c:559: for(x=w; x>0; x--)
      00065F 1B               [12] 2330 	dec	r3
      000660 BB FF 01         [24] 2331 	cjne	r3,#0xff,00167$
      000663 1C               [12] 2332 	dec	r4
      000664                       2333 00167$:
      000664 80 DB            [24] 2334 	sjmp	00111$
      000666                       2335 00115$:
                                   2336 ;	ecen4330lab7.c:557: for(y=h; y>0; y--)
      000666 1D               [12] 2337 	dec	r5
      000667 BD FF 01         [24] 2338 	cjne	r5,#0xff,00168$
      00066A 1E               [12] 2339 	dec	r6
      00066B                       2340 00168$:
      00066B 80 CC            [24] 2341 	sjmp	00114$
      00066D                       2342 00116$:
                                   2343 ;	ecen4330lab7.c:565: }
      00066D 22               [24] 2344 	ret
                                   2345 ;------------------------------------------------------------
                                   2346 ;Allocation info for local variables in function 'fillScreen'
                                   2347 ;------------------------------------------------------------
                                   2348 ;Color                     Allocated to registers r6 r7 
                                   2349 ;len                       Allocated to registers 
                                   2350 ;blocks                    Allocated to registers r4 r7 
                                   2351 ;i                         Allocated to registers r3 
                                   2352 ;hi                        Allocated to registers r5 
                                   2353 ;lo                        Allocated to registers r6 
                                   2354 ;------------------------------------------------------------
                                   2355 ;	ecen4330lab7.c:573: void fillScreen(unsigned int Color){
                                   2356 ;	-----------------------------------------
                                   2357 ;	 function fillScreen
                                   2358 ;	-----------------------------------------
      00066E                       2359 _fillScreen:
      00066E AE 82            [24] 2360 	mov	r6,dpl
      000670 AF 83            [24] 2361 	mov	r7,dph
                                   2362 ;	ecen4330lab7.c:576: unsigned char  i, hi = Color >> 8, lo = Color;
      000672 8F 05            [24] 2363 	mov	ar5,r7
                                   2364 ;	ecen4330lab7.c:579: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      000674 E4               [12] 2365 	clr	a
      000675 F5*00            [12] 2366 	mov	_setAddress_PARM_2,a
      000677 F5*01            [12] 2367 	mov	(_setAddress_PARM_2 + 1),a
      000679 75*02 EF         [24] 2368 	mov	_setAddress_PARM_3,#0xef
                                   2369 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      00067C F5*03            [12] 2370 	mov	(_setAddress_PARM_3 + 1),a
      00067E 75*04 3F         [24] 2371 	mov	_setAddress_PARM_4,#0x3f
      000681 75*05 01         [24] 2372 	mov	(_setAddress_PARM_4 + 1),#0x01
      000684 90 00 00         [24] 2373 	mov	dptr,#0x0000
      000687 C0 06            [24] 2374 	push	ar6
      000689 C0 05            [24] 2375 	push	ar5
      00068B 12r03r66         [24] 2376 	lcall	_setAddress
      00068E D0 05            [24] 2377 	pop	ar5
      000690 D0 06            [24] 2378 	pop	ar6
                                   2379 ;	ecen4330lab7.c:580: write8Reg(0x2C);
                                   2380 ;	assignBit
      000692 C2 B5            [12] 2381 	clr	_P3_5
                                   2382 ;	assignBit
      000694 D2 B4            [12] 2383 	setb	_P3_4
      000696 85*02 82         [24] 2384 	mov	dpl,_lcd_address
      000699 85*03 83         [24] 2385 	mov	dph,(_lcd_address + 1)
      00069C 74 2C            [12] 2386 	mov	a,#0x2c
      00069E F0               [24] 2387 	movx	@dptr,a
                                   2388 ;	assignBit
      00069F C2 B4            [12] 2389 	clr	_P3_4
                                   2390 ;	ecen4330lab7.c:581: CD = 1;
                                   2391 ;	assignBit
      0006A1 D2 B5            [12] 2392 	setb	_P3_5
                                   2393 ;	ecen4330lab7.c:582: write8(hi); 
                                   2394 ;	assignBit
      0006A3 D2 B4            [12] 2395 	setb	_P3_4
      0006A5 85*02 82         [24] 2396 	mov	dpl,_lcd_address
      0006A8 85*03 83         [24] 2397 	mov	dph,(_lcd_address + 1)
      0006AB ED               [12] 2398 	mov	a,r5
      0006AC F0               [24] 2399 	movx	@dptr,a
                                   2400 ;	assignBit
      0006AD C2 B4            [12] 2401 	clr	_P3_4
                                   2402 ;	ecen4330lab7.c:583: write8(lo);
                                   2403 ;	assignBit
      0006AF D2 B4            [12] 2404 	setb	_P3_4
      0006B1 85*02 82         [24] 2405 	mov	dpl,_lcd_address
      0006B4 85*03 83         [24] 2406 	mov	dph,(_lcd_address + 1)
      0006B7 EE               [12] 2407 	mov	a,r6
      0006B8 F0               [24] 2408 	movx	@dptr,a
                                   2409 ;	assignBit
      0006B9 C2 B4            [12] 2410 	clr	_P3_4
                                   2411 ;	ecen4330lab7.c:585: while(blocks--) {
      0006BB 7C B0            [12] 2412 	mov	r4,#0xb0
      0006BD 7F 04            [12] 2413 	mov	r7,#0x04
      0006BF                       2414 00104$:
      0006BF 8C 02            [24] 2415 	mov	ar2,r4
      0006C1 8F 03            [24] 2416 	mov	ar3,r7
      0006C3 1C               [12] 2417 	dec	r4
      0006C4 BC FF 01         [24] 2418 	cjne	r4,#0xff,00140$
      0006C7 1F               [12] 2419 	dec	r7
      0006C8                       2420 00140$:
      0006C8 EA               [12] 2421 	mov	a,r2
      0006C9 4B               [12] 2422 	orl	a,r3
      0006CA 60 66            [24] 2423 	jz	00106$
                                   2424 ;	ecen4330lab7.c:587: do {
      0006CC 7B 10            [12] 2425 	mov	r3,#0x10
      0006CE                       2426 00101$:
                                   2427 ;	ecen4330lab7.c:588: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2428 ;	assignBit
      0006CE D2 B4            [12] 2429 	setb	_P3_4
      0006D0 85*02 82         [24] 2430 	mov	dpl,_lcd_address
      0006D3 85*03 83         [24] 2431 	mov	dph,(_lcd_address + 1)
      0006D6 ED               [12] 2432 	mov	a,r5
      0006D7 F0               [24] 2433 	movx	@dptr,a
                                   2434 ;	assignBit
      0006D8 C2 B4            [12] 2435 	clr	_P3_4
                                   2436 ;	assignBit
      0006DA D2 B4            [12] 2437 	setb	_P3_4
      0006DC 85*02 82         [24] 2438 	mov	dpl,_lcd_address
      0006DF 85*03 83         [24] 2439 	mov	dph,(_lcd_address + 1)
      0006E2 EE               [12] 2440 	mov	a,r6
      0006E3 F0               [24] 2441 	movx	@dptr,a
                                   2442 ;	assignBit
      0006E4 C2 B4            [12] 2443 	clr	_P3_4
                                   2444 ;	assignBit
      0006E6 D2 B4            [12] 2445 	setb	_P3_4
      0006E8 85*02 82         [24] 2446 	mov	dpl,_lcd_address
      0006EB 85*03 83         [24] 2447 	mov	dph,(_lcd_address + 1)
      0006EE ED               [12] 2448 	mov	a,r5
      0006EF F0               [24] 2449 	movx	@dptr,a
                                   2450 ;	assignBit
      0006F0 C2 B4            [12] 2451 	clr	_P3_4
                                   2452 ;	assignBit
      0006F2 D2 B4            [12] 2453 	setb	_P3_4
      0006F4 85*02 82         [24] 2454 	mov	dpl,_lcd_address
      0006F7 85*03 83         [24] 2455 	mov	dph,(_lcd_address + 1)
      0006FA EE               [12] 2456 	mov	a,r6
      0006FB F0               [24] 2457 	movx	@dptr,a
                                   2458 ;	assignBit
      0006FC C2 B4            [12] 2459 	clr	_P3_4
                                   2460 ;	ecen4330lab7.c:589: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2461 ;	assignBit
      0006FE D2 B4            [12] 2462 	setb	_P3_4
      000700 85*02 82         [24] 2463 	mov	dpl,_lcd_address
      000703 85*03 83         [24] 2464 	mov	dph,(_lcd_address + 1)
      000706 ED               [12] 2465 	mov	a,r5
      000707 F0               [24] 2466 	movx	@dptr,a
                                   2467 ;	assignBit
      000708 C2 B4            [12] 2468 	clr	_P3_4
                                   2469 ;	assignBit
      00070A D2 B4            [12] 2470 	setb	_P3_4
      00070C 85*02 82         [24] 2471 	mov	dpl,_lcd_address
      00070F 85*03 83         [24] 2472 	mov	dph,(_lcd_address + 1)
      000712 EE               [12] 2473 	mov	a,r6
      000713 F0               [24] 2474 	movx	@dptr,a
                                   2475 ;	assignBit
      000714 C2 B4            [12] 2476 	clr	_P3_4
                                   2477 ;	assignBit
      000716 D2 B4            [12] 2478 	setb	_P3_4
      000718 85*02 82         [24] 2479 	mov	dpl,_lcd_address
      00071B 85*03 83         [24] 2480 	mov	dph,(_lcd_address + 1)
      00071E ED               [12] 2481 	mov	a,r5
      00071F F0               [24] 2482 	movx	@dptr,a
                                   2483 ;	assignBit
      000720 C2 B4            [12] 2484 	clr	_P3_4
                                   2485 ;	assignBit
      000722 D2 B4            [12] 2486 	setb	_P3_4
      000724 85*02 82         [24] 2487 	mov	dpl,_lcd_address
      000727 85*03 83         [24] 2488 	mov	dph,(_lcd_address + 1)
      00072A EE               [12] 2489 	mov	a,r6
      00072B F0               [24] 2490 	movx	@dptr,a
                                   2491 ;	assignBit
      00072C C2 B4            [12] 2492 	clr	_P3_4
                                   2493 ;	ecen4330lab7.c:590: } while(--i);
      00072E DB 9E            [24] 2494 	djnz	r3,00101$
      000730 80 8D            [24] 2495 	sjmp	00104$
      000732                       2496 00106$:
                                   2497 ;	ecen4330lab7.c:592: for(i = (char)len & 63; i--; ) {
      000732 7F 3F            [12] 2498 	mov	r7,#0x3f
      000734                       2499 00109$:
      000734 8F 04            [24] 2500 	mov	ar4,r7
      000736 1F               [12] 2501 	dec	r7
      000737 EC               [12] 2502 	mov	a,r4
      000738 60 1A            [24] 2503 	jz	00111$
                                   2504 ;	ecen4330lab7.c:593: write8(hi); 
                                   2505 ;	assignBit
      00073A D2 B4            [12] 2506 	setb	_P3_4
      00073C 85*02 82         [24] 2507 	mov	dpl,_lcd_address
      00073F 85*03 83         [24] 2508 	mov	dph,(_lcd_address + 1)
      000742 ED               [12] 2509 	mov	a,r5
      000743 F0               [24] 2510 	movx	@dptr,a
                                   2511 ;	assignBit
      000744 C2 B4            [12] 2512 	clr	_P3_4
                                   2513 ;	ecen4330lab7.c:594: write8(lo);
                                   2514 ;	assignBit
      000746 D2 B4            [12] 2515 	setb	_P3_4
      000748 85*02 82         [24] 2516 	mov	dpl,_lcd_address
      00074B 85*03 83         [24] 2517 	mov	dph,(_lcd_address + 1)
      00074E EE               [12] 2518 	mov	a,r6
      00074F F0               [24] 2519 	movx	@dptr,a
                                   2520 ;	assignBit
      000750 C2 B4            [12] 2521 	clr	_P3_4
      000752 80 E0            [24] 2522 	sjmp	00109$
      000754                       2523 00111$:
                                   2524 ;	ecen4330lab7.c:596: }
      000754 22               [24] 2525 	ret
                                   2526 ;------------------------------------------------------------
                                   2527 ;Allocation info for local variables in function 'drawChar'
                                   2528 ;------------------------------------------------------------
                                   2529 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2530 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2531 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2532 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2533 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2534 ;x                         Allocated with name '_drawChar_x_65536_311'
                                   2535 ;i                         Allocated to registers r3 
                                   2536 ;line                      Allocated with name '_drawChar_line_196608_315'
                                   2537 ;j                         Allocated to registers r2 
                                   2538 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2539 ;------------------------------------------------------------
                                   2540 ;	ecen4330lab7.c:604: void drawChar(int x, int y, unsigned char c,u16 color, u16 bg, u8 size){
                                   2541 ;	-----------------------------------------
                                   2542 ;	 function drawChar
                                   2543 ;	-----------------------------------------
      000755                       2544 _drawChar:
      000755 85 82*58         [24] 2545 	mov	_drawChar_x_65536_311,dpl
      000758 85 83*59         [24] 2546 	mov	(_drawChar_x_65536_311 + 1),dph
                                   2547 ;	ecen4330lab7.c:605: if ((x >=TFTWIDTH) || // Clip right
      00075B C3               [12] 2548 	clr	c
      00075C E5*58            [12] 2549 	mov	a,_drawChar_x_65536_311
      00075E 94 F0            [12] 2550 	subb	a,#0xf0
      000760 E5*59            [12] 2551 	mov	a,(_drawChar_x_65536_311 + 1)
      000762 64 80            [12] 2552 	xrl	a,#0x80
      000764 94 80            [12] 2553 	subb	a,#0x80
      000766 50 59            [24] 2554 	jnc	00101$
                                   2555 ;	ecen4330lab7.c:606: (y >=TFTHEIGHT)           || // Clip bottom
      000768 C3               [12] 2556 	clr	c
      000769 E5*50            [12] 2557 	mov	a,_drawChar_PARM_2
      00076B 94 40            [12] 2558 	subb	a,#0x40
      00076D E5*51            [12] 2559 	mov	a,(_drawChar_PARM_2 + 1)
      00076F 64 80            [12] 2560 	xrl	a,#0x80
      000771 94 81            [12] 2561 	subb	a,#0x81
      000773 50 4C            [24] 2562 	jnc	00101$
                                   2563 ;	ecen4330lab7.c:607: ((x + 6 * size - 1) < 0) || // Clip left
      000775 AC*57            [24] 2564 	mov	r4,_drawChar_PARM_6
      000777 7D 00            [12] 2565 	mov	r5,#0x00
      000779 8C*00            [24] 2566 	mov	__mulint_PARM_2,r4
      00077B 8D*01            [24] 2567 	mov	(__mulint_PARM_2 + 1),r5
      00077D 90 00 06         [24] 2568 	mov	dptr,#0x0006
      000780 C0 05            [24] 2569 	push	ar5
      000782 C0 04            [24] 2570 	push	ar4
      000784 12r00r00         [24] 2571 	lcall	__mulint
      000787 AA 82            [24] 2572 	mov	r2,dpl
      000789 AB 83            [24] 2573 	mov	r3,dph
      00078B D0 04            [24] 2574 	pop	ar4
      00078D D0 05            [24] 2575 	pop	ar5
      00078F EA               [12] 2576 	mov	a,r2
      000790 25*58            [12] 2577 	add	a,_drawChar_x_65536_311
      000792 FA               [12] 2578 	mov	r2,a
      000793 EB               [12] 2579 	mov	a,r3
      000794 35*59            [12] 2580 	addc	a,(_drawChar_x_65536_311 + 1)
      000796 FB               [12] 2581 	mov	r3,a
      000797 1A               [12] 2582 	dec	r2
      000798 BA FF 01         [24] 2583 	cjne	r2,#0xff,00182$
      00079B 1B               [12] 2584 	dec	r3
      00079C                       2585 00182$:
      00079C EB               [12] 2586 	mov	a,r3
      00079D 20 E7 21         [24] 2587 	jb	acc.7,00101$
                                   2588 ;	ecen4330lab7.c:608: ((y + 8 * size - 1) < 0))   // Clip top
      0007A0 ED               [12] 2589 	mov	a,r5
      0007A1 C4               [12] 2590 	swap	a
      0007A2 03               [12] 2591 	rr	a
      0007A3 54 F8            [12] 2592 	anl	a,#0xf8
      0007A5 CC               [12] 2593 	xch	a,r4
      0007A6 C4               [12] 2594 	swap	a
      0007A7 03               [12] 2595 	rr	a
      0007A8 CC               [12] 2596 	xch	a,r4
      0007A9 6C               [12] 2597 	xrl	a,r4
      0007AA CC               [12] 2598 	xch	a,r4
      0007AB 54 F8            [12] 2599 	anl	a,#0xf8
      0007AD CC               [12] 2600 	xch	a,r4
      0007AE 6C               [12] 2601 	xrl	a,r4
      0007AF FD               [12] 2602 	mov	r5,a
      0007B0 EC               [12] 2603 	mov	a,r4
      0007B1 25*50            [12] 2604 	add	a,_drawChar_PARM_2
      0007B3 FC               [12] 2605 	mov	r4,a
      0007B4 ED               [12] 2606 	mov	a,r5
      0007B5 35*51            [12] 2607 	addc	a,(_drawChar_PARM_2 + 1)
      0007B7 FD               [12] 2608 	mov	r5,a
      0007B8 1C               [12] 2609 	dec	r4
      0007B9 BC FF 01         [24] 2610 	cjne	r4,#0xff,00184$
      0007BC 1D               [12] 2611 	dec	r5
      0007BD                       2612 00184$:
      0007BD ED               [12] 2613 	mov	a,r5
      0007BE 30 E7 01         [24] 2614 	jnb	acc.7,00141$
      0007C1                       2615 00101$:
                                   2616 ;	ecen4330lab7.c:610: return;
      0007C1 22               [24] 2617 	ret
                                   2618 ;	ecen4330lab7.c:613: for (char i=0; i<6; i++ )
      0007C2                       2619 00141$:
      0007C2 74 01            [12] 2620 	mov	a,#0x01
      0007C4 B5*57 04         [24] 2621 	cjne	a,_drawChar_PARM_6,00186$
      0007C7 74 01            [12] 2622 	mov	a,#0x01
      0007C9 80 01            [24] 2623 	sjmp	00187$
      0007CB                       2624 00186$:
      0007CB E4               [12] 2625 	clr	a
      0007CC                       2626 00187$:
      0007CC FD               [12] 2627 	mov	r5,a
      0007CD FC               [12] 2628 	mov	r4,a
      0007CE E5*53            [12] 2629 	mov	a,_drawChar_PARM_4
      0007D0 B5*55 08         [24] 2630 	cjne	a,_drawChar_PARM_5,00188$
      0007D3 E5*54            [12] 2631 	mov	a,(_drawChar_PARM_4 + 1)
      0007D5 B5*56 03         [24] 2632 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      0007D8 D3               [12] 2633 	setb	c
      0007D9 80 01            [24] 2634 	sjmp	00189$
      0007DB                       2635 00188$:
      0007DB C3               [12] 2636 	clr	c
      0007DC                       2637 00189$:
      0007DC 92*00            [24] 2638 	mov	_drawChar_sloc0_1_0,c
      0007DE 7B 00            [12] 2639 	mov	r3,#0x00
      0007E0                       2640 00126$:
      0007E0 BB 06 00         [24] 2641 	cjne	r3,#0x06,00190$
      0007E3                       2642 00190$:
      0007E3 40 01            [24] 2643 	jc	00191$
      0007E5 22               [24] 2644 	ret
      0007E6                       2645 00191$:
                                   2646 ;	ecen4330lab7.c:617: if (i == 5)
      0007E6 BB 05 05         [24] 2647 	cjne	r3,#0x05,00107$
                                   2648 ;	ecen4330lab7.c:619: line = 0x0;
      0007E9 75*5A 00         [24] 2649 	mov	_drawChar_line_196608_315,#0x00
      0007EC 80 30            [24] 2650 	sjmp	00140$
      0007EE                       2651 00107$:
                                   2652 ;	ecen4330lab7.c:623: line = pgm_read_byte(font+(c*5)+i);
      0007EE 85*52*00         [24] 2653 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0007F1 75*01 00         [24] 2654 	mov	(__mulint_PARM_2 + 1),#0x00
      0007F4 90 00 05         [24] 2655 	mov	dptr,#0x0005
      0007F7 C0 05            [24] 2656 	push	ar5
      0007F9 C0 04            [24] 2657 	push	ar4
      0007FB C0 03            [24] 2658 	push	ar3
      0007FD 12r00r00         [24] 2659 	lcall	__mulint
      000800 A8 82            [24] 2660 	mov	r0,dpl
      000802 A9 83            [24] 2661 	mov	r1,dph
      000804 D0 03            [24] 2662 	pop	ar3
      000806 D0 04            [24] 2663 	pop	ar4
      000808 D0 05            [24] 2664 	pop	ar5
      00080A E8               [12] 2665 	mov	a,r0
      00080B 24r00            [12] 2666 	add	a,#_font
      00080D F8               [12] 2667 	mov	r0,a
      00080E E9               [12] 2668 	mov	a,r1
      00080F 34s00            [12] 2669 	addc	a,#(_font >> 8)
      000811 F9               [12] 2670 	mov	r1,a
      000812 EB               [12] 2671 	mov	a,r3
      000813 28               [12] 2672 	add	a,r0
      000814 F5 82            [12] 2673 	mov	dpl,a
      000816 E4               [12] 2674 	clr	a
      000817 39               [12] 2675 	addc	a,r1
      000818 F5 83            [12] 2676 	mov	dph,a
      00081A E4               [12] 2677 	clr	a
      00081B 93               [24] 2678 	movc	a,@a+dptr
      00081C F5*5A            [12] 2679 	mov	_drawChar_line_196608_315,a
                                   2680 ;	ecen4330lab7.c:626: for (char j = 0; j<8; j++)
      00081E                       2681 00140$:
      00081E 8B F0            [24] 2682 	mov	b,r3
      000820 E5*57            [12] 2683 	mov	a,_drawChar_PARM_6
      000822 A4               [48] 2684 	mul	ab
      000823 25*58            [12] 2685 	add	a,_drawChar_x_65536_311
      000825 F8               [12] 2686 	mov	r0,a
      000826 E5*59            [12] 2687 	mov	a,(_drawChar_x_65536_311 + 1)
      000828 35 F0            [12] 2688 	addc	a,b
      00082A F9               [12] 2689 	mov	r1,a
      00082B 88*5B            [24] 2690 	mov	_drawChar_sloc1_1_0,r0
      00082D 89*5C            [24] 2691 	mov	(_drawChar_sloc1_1_0 + 1),r1
      00082F 7A 00            [12] 2692 	mov	r2,#0x00
      000831                       2693 00123$:
      000831 BA 08 00         [24] 2694 	cjne	r2,#0x08,00194$
      000834                       2695 00194$:
      000834 40 03            [24] 2696 	jc	00195$
      000836 02r09r5B         [24] 2697 	ljmp	00127$
      000839                       2698 00195$:
                                   2699 ;	ecen4330lab7.c:628: if (line & 0x1)
      000839 E5*5A            [12] 2700 	mov	a,_drawChar_line_196608_315
      00083B 20 E0 03         [24] 2701 	jb	acc.0,00196$
      00083E 02r08rC9         [24] 2702 	ljmp	00118$
      000841                       2703 00196$:
                                   2704 ;	ecen4330lab7.c:630: if (size == 1) // default size
      000841 ED               [12] 2705 	mov	a,r5
      000842 60 40            [24] 2706 	jz	00110$
                                   2707 ;	ecen4330lab7.c:632: drawPixel(x+i, y+j, color);
      000844 8B 06            [24] 2708 	mov	ar6,r3
      000846 7F 00            [12] 2709 	mov	r7,#0x00
      000848 EE               [12] 2710 	mov	a,r6
      000849 25*58            [12] 2711 	add	a,_drawChar_x_65536_311
      00084B F5 82            [12] 2712 	mov	dpl,a
      00084D EF               [12] 2713 	mov	a,r7
      00084E 35*59            [12] 2714 	addc	a,(_drawChar_x_65536_311 + 1)
      000850 F5 83            [12] 2715 	mov	dph,a
      000852 8A 06            [24] 2716 	mov	ar6,r2
      000854 7F 00            [12] 2717 	mov	r7,#0x00
      000856 EE               [12] 2718 	mov	a,r6
      000857 25*50            [12] 2719 	add	a,_drawChar_PARM_2
      000859 F5*44            [12] 2720 	mov	_drawPixel_PARM_2,a
      00085B EF               [12] 2721 	mov	a,r7
      00085C 35*51            [12] 2722 	addc	a,(_drawChar_PARM_2 + 1)
      00085E F5*45            [12] 2723 	mov	(_drawPixel_PARM_2 + 1),a
      000860 85*53*46         [24] 2724 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000863 85*54*47         [24] 2725 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000866 C0 05            [24] 2726 	push	ar5
      000868 C0 04            [24] 2727 	push	ar4
      00086A C0 03            [24] 2728 	push	ar3
      00086C C0 02            [24] 2729 	push	ar2
      00086E C0 01            [24] 2730 	push	ar1
      000870 C0 00            [24] 2731 	push	ar0
      000872 12r05r40         [24] 2732 	lcall	_drawPixel
      000875 D0 00            [24] 2733 	pop	ar0
      000877 D0 01            [24] 2734 	pop	ar1
      000879 D0 02            [24] 2735 	pop	ar2
      00087B D0 03            [24] 2736 	pop	ar3
      00087D D0 04            [24] 2737 	pop	ar4
      00087F D0 05            [24] 2738 	pop	ar5
      000881 02r09r51         [24] 2739 	ljmp	00119$
      000884                       2740 00110$:
                                   2741 ;	ecen4330lab7.c:635: fillRect(x+(i*size), y+(j*size), size, size, color);
      000884 8A F0            [24] 2742 	mov	b,r2
      000886 E5*57            [12] 2743 	mov	a,_drawChar_PARM_6
      000888 A4               [48] 2744 	mul	ab
      000889 25*50            [12] 2745 	add	a,_drawChar_PARM_2
      00088B F5*48            [12] 2746 	mov	_fillRect_PARM_2,a
      00088D E5*51            [12] 2747 	mov	a,(_drawChar_PARM_2 + 1)
      00088F 35 F0            [12] 2748 	addc	a,b
      000891 F5*49            [12] 2749 	mov	(_fillRect_PARM_2 + 1),a
      000893 AE*57            [24] 2750 	mov	r6,_drawChar_PARM_6
      000895 7F 00            [12] 2751 	mov	r7,#0x00
      000897 8E*4A            [24] 2752 	mov	_fillRect_PARM_3,r6
      000899 8F*4B            [24] 2753 	mov	(_fillRect_PARM_3 + 1),r7
      00089B 8E*4C            [24] 2754 	mov	_fillRect_PARM_4,r6
      00089D 8F*4D            [24] 2755 	mov	(_fillRect_PARM_4 + 1),r7
      00089F 85*53*4E         [24] 2756 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      0008A2 85*54*4F         [24] 2757 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      0008A5 85*5B 82         [24] 2758 	mov	dpl,_drawChar_sloc1_1_0
      0008A8 85*5C 83         [24] 2759 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      0008AB C0 05            [24] 2760 	push	ar5
      0008AD C0 04            [24] 2761 	push	ar4
      0008AF C0 03            [24] 2762 	push	ar3
      0008B1 C0 02            [24] 2763 	push	ar2
      0008B3 C0 01            [24] 2764 	push	ar1
      0008B5 C0 00            [24] 2765 	push	ar0
      0008B7 12r05r91         [24] 2766 	lcall	_fillRect
      0008BA D0 00            [24] 2767 	pop	ar0
      0008BC D0 01            [24] 2768 	pop	ar1
      0008BE D0 02            [24] 2769 	pop	ar2
      0008C0 D0 03            [24] 2770 	pop	ar3
      0008C2 D0 04            [24] 2771 	pop	ar4
      0008C4 D0 05            [24] 2772 	pop	ar5
      0008C6 02r09r51         [24] 2773 	ljmp	00119$
      0008C9                       2774 00118$:
                                   2775 ;	ecen4330lab7.c:637: } else if (bg != color)
      0008C9 30*00 03         [24] 2776 	jnb	_drawChar_sloc0_1_0,00198$
      0008CC 02r09r51         [24] 2777 	ljmp	00119$
      0008CF                       2778 00198$:
                                   2779 ;	ecen4330lab7.c:639: if (size == 1) // default size
      0008CF EC               [12] 2780 	mov	a,r4
      0008D0 60 3F            [24] 2781 	jz	00113$
                                   2782 ;	ecen4330lab7.c:641: drawPixel(x+i, y+j, bg);
      0008D2 8B 06            [24] 2783 	mov	ar6,r3
      0008D4 7F 00            [12] 2784 	mov	r7,#0x00
      0008D6 EE               [12] 2785 	mov	a,r6
      0008D7 25*58            [12] 2786 	add	a,_drawChar_x_65536_311
      0008D9 F5 82            [12] 2787 	mov	dpl,a
      0008DB EF               [12] 2788 	mov	a,r7
      0008DC 35*59            [12] 2789 	addc	a,(_drawChar_x_65536_311 + 1)
      0008DE F5 83            [12] 2790 	mov	dph,a
      0008E0 8A 06            [24] 2791 	mov	ar6,r2
      0008E2 7F 00            [12] 2792 	mov	r7,#0x00
      0008E4 EE               [12] 2793 	mov	a,r6
      0008E5 25*50            [12] 2794 	add	a,_drawChar_PARM_2
      0008E7 F5*44            [12] 2795 	mov	_drawPixel_PARM_2,a
      0008E9 EF               [12] 2796 	mov	a,r7
      0008EA 35*51            [12] 2797 	addc	a,(_drawChar_PARM_2 + 1)
      0008EC F5*45            [12] 2798 	mov	(_drawPixel_PARM_2 + 1),a
      0008EE 85*55*46         [24] 2799 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      0008F1 85*56*47         [24] 2800 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      0008F4 C0 05            [24] 2801 	push	ar5
      0008F6 C0 04            [24] 2802 	push	ar4
      0008F8 C0 03            [24] 2803 	push	ar3
      0008FA C0 02            [24] 2804 	push	ar2
      0008FC C0 01            [24] 2805 	push	ar1
      0008FE C0 00            [24] 2806 	push	ar0
      000900 12r05r40         [24] 2807 	lcall	_drawPixel
      000903 D0 00            [24] 2808 	pop	ar0
      000905 D0 01            [24] 2809 	pop	ar1
      000907 D0 02            [24] 2810 	pop	ar2
      000909 D0 03            [24] 2811 	pop	ar3
      00090B D0 04            [24] 2812 	pop	ar4
      00090D D0 05            [24] 2813 	pop	ar5
      00090F 80 40            [24] 2814 	sjmp	00119$
      000911                       2815 00113$:
                                   2816 ;	ecen4330lab7.c:645: fillRect(x+i*size, y+j*size, size, size, bg);
      000911 8A F0            [24] 2817 	mov	b,r2
      000913 E5*57            [12] 2818 	mov	a,_drawChar_PARM_6
      000915 A4               [48] 2819 	mul	ab
      000916 25*50            [12] 2820 	add	a,_drawChar_PARM_2
      000918 F5*48            [12] 2821 	mov	_fillRect_PARM_2,a
      00091A E5*51            [12] 2822 	mov	a,(_drawChar_PARM_2 + 1)
      00091C 35 F0            [12] 2823 	addc	a,b
      00091E F5*49            [12] 2824 	mov	(_fillRect_PARM_2 + 1),a
      000920 AE*57            [24] 2825 	mov	r6,_drawChar_PARM_6
      000922 7F 00            [12] 2826 	mov	r7,#0x00
      000924 8E*4A            [24] 2827 	mov	_fillRect_PARM_3,r6
      000926 8F*4B            [24] 2828 	mov	(_fillRect_PARM_3 + 1),r7
      000928 8E*4C            [24] 2829 	mov	_fillRect_PARM_4,r6
      00092A 8F*4D            [24] 2830 	mov	(_fillRect_PARM_4 + 1),r7
      00092C 85*55*4E         [24] 2831 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      00092F 85*56*4F         [24] 2832 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000932 88 82            [24] 2833 	mov	dpl,r0
      000934 89 83            [24] 2834 	mov	dph,r1
      000936 C0 05            [24] 2835 	push	ar5
      000938 C0 04            [24] 2836 	push	ar4
      00093A C0 03            [24] 2837 	push	ar3
      00093C C0 02            [24] 2838 	push	ar2
      00093E C0 01            [24] 2839 	push	ar1
      000940 C0 00            [24] 2840 	push	ar0
      000942 12r05r91         [24] 2841 	lcall	_fillRect
      000945 D0 00            [24] 2842 	pop	ar0
      000947 D0 01            [24] 2843 	pop	ar1
      000949 D0 02            [24] 2844 	pop	ar2
      00094B D0 03            [24] 2845 	pop	ar3
      00094D D0 04            [24] 2846 	pop	ar4
      00094F D0 05            [24] 2847 	pop	ar5
      000951                       2848 00119$:
                                   2849 ;	ecen4330lab7.c:649: line >>= 1;
      000951 E5*5A            [12] 2850 	mov	a,_drawChar_line_196608_315
      000953 C3               [12] 2851 	clr	c
      000954 13               [12] 2852 	rrc	a
      000955 F5*5A            [12] 2853 	mov	_drawChar_line_196608_315,a
                                   2854 ;	ecen4330lab7.c:626: for (char j = 0; j<8; j++)
      000957 0A               [12] 2855 	inc	r2
      000958 02r08r31         [24] 2856 	ljmp	00123$
      00095B                       2857 00127$:
                                   2858 ;	ecen4330lab7.c:613: for (char i=0; i<6; i++ )
      00095B 0B               [12] 2859 	inc	r3
                                   2860 ;	ecen4330lab7.c:653: }
      00095C 02r07rE0         [24] 2861 	ljmp	00126$
                                   2862 ;------------------------------------------------------------
                                   2863 ;Allocation info for local variables in function 'write'
                                   2864 ;------------------------------------------------------------
                                   2865 ;c                         Allocated to registers r7 
                                   2866 ;------------------------------------------------------------
                                   2867 ;	ecen4330lab7.c:661: void write(u8 c)
                                   2868 ;	-----------------------------------------
                                   2869 ;	 function write
                                   2870 ;	-----------------------------------------
      00095F                       2871 _write:
      00095F AF 82            [24] 2872 	mov	r7,dpl
                                   2873 ;	ecen4330lab7.c:663: if (c == '\n')
      000961 BF 0A 22         [24] 2874 	cjne	r7,#0x0a,00105$
                                   2875 ;	ecen4330lab7.c:665: cursor_y += textsize*8;
      000964 AD*0C            [24] 2876 	mov	r5,_textsize
      000966 E4               [12] 2877 	clr	a
      000967 C4               [12] 2878 	swap	a
      000968 03               [12] 2879 	rr	a
      000969 54 F8            [12] 2880 	anl	a,#0xf8
      00096B CD               [12] 2881 	xch	a,r5
      00096C C4               [12] 2882 	swap	a
      00096D 03               [12] 2883 	rr	a
      00096E CD               [12] 2884 	xch	a,r5
      00096F 6D               [12] 2885 	xrl	a,r5
      000970 CD               [12] 2886 	xch	a,r5
      000971 54 F8            [12] 2887 	anl	a,#0xf8
      000973 CD               [12] 2888 	xch	a,r5
      000974 6D               [12] 2889 	xrl	a,r5
      000975 FE               [12] 2890 	mov	r6,a
      000976 ED               [12] 2891 	mov	a,r5
      000977 25*0A            [12] 2892 	add	a,_cursor_y
      000979 F5*0A            [12] 2893 	mov	_cursor_y,a
      00097B EE               [12] 2894 	mov	a,r6
      00097C 35*0B            [12] 2895 	addc	a,(_cursor_y + 1)
      00097E F5*0B            [12] 2896 	mov	(_cursor_y + 1),a
                                   2897 ;	ecen4330lab7.c:666: cursor_x  = 0;
      000980 E4               [12] 2898 	clr	a
      000981 F5*08            [12] 2899 	mov	_cursor_x,a
      000983 F5*09            [12] 2900 	mov	(_cursor_x + 1),a
      000985 22               [24] 2901 	ret
      000986                       2902 00105$:
                                   2903 ;	ecen4330lab7.c:668: else if (c == '\r')
      000986 BF 0D 01         [24] 2904 	cjne	r7,#0x0d,00119$
      000989 22               [24] 2905 	ret
      00098A                       2906 00119$:
                                   2907 ;	ecen4330lab7.c:674: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      00098A 85*0A*50         [24] 2908 	mov	_drawChar_PARM_2,_cursor_y
      00098D 85*0B*51         [24] 2909 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000990 8F*52            [24] 2910 	mov	_drawChar_PARM_3,r7
      000992 85*0E*53         [24] 2911 	mov	_drawChar_PARM_4,_textcolor
      000995 85*0F*54         [24] 2912 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000998 85*10*55         [24] 2913 	mov	_drawChar_PARM_5,_textbgcolor
      00099B 85*11*56         [24] 2914 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      00099E 85*0C*57         [24] 2915 	mov	_drawChar_PARM_6,_textsize
      0009A1 85*08 82         [24] 2916 	mov	dpl,_cursor_x
      0009A4 85*09 83         [24] 2917 	mov	dph,(_cursor_x + 1)
      0009A7 12r07r55         [24] 2918 	lcall	_drawChar
                                   2919 ;	ecen4330lab7.c:675: cursor_x += textsize*6;
      0009AA 85*0C*00         [24] 2920 	mov	__mulint_PARM_2,_textsize
      0009AD 75*01 00         [24] 2921 	mov	(__mulint_PARM_2 + 1),#0x00
      0009B0 90 00 06         [24] 2922 	mov	dptr,#0x0006
      0009B3 12r00r00         [24] 2923 	lcall	__mulint
      0009B6 AE 82            [24] 2924 	mov	r6,dpl
      0009B8 AF 83            [24] 2925 	mov	r7,dph
      0009BA EE               [12] 2926 	mov	a,r6
      0009BB 25*08            [12] 2927 	add	a,_cursor_x
      0009BD F5*08            [12] 2928 	mov	_cursor_x,a
      0009BF EF               [12] 2929 	mov	a,r7
      0009C0 35*09            [12] 2930 	addc	a,(_cursor_x + 1)
      0009C2 F5*09            [12] 2931 	mov	(_cursor_x + 1),a
                                   2932 ;	ecen4330lab7.c:677: }
      0009C4 22               [24] 2933 	ret
                                   2934 ;------------------------------------------------------------
                                   2935 ;Allocation info for local variables in function 'LCD_string_write'
                                   2936 ;------------------------------------------------------------
                                   2937 ;str                       Allocated to registers r5 r6 r7 
                                   2938 ;i                         Allocated to registers r3 r4 
                                   2939 ;------------------------------------------------------------
                                   2940 ;	ecen4330lab7.c:685: void LCD_string_write(char *str)
                                   2941 ;	-----------------------------------------
                                   2942 ;	 function LCD_string_write
                                   2943 ;	-----------------------------------------
      0009C5                       2944 _LCD_string_write:
      0009C5 AD 82            [24] 2945 	mov	r5,dpl
      0009C7 AE 83            [24] 2946 	mov	r6,dph
      0009C9 AF F0            [24] 2947 	mov	r7,b
                                   2948 ;	ecen4330lab7.c:688: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      0009CB 7B 00            [12] 2949 	mov	r3,#0x00
      0009CD 7C 00            [12] 2950 	mov	r4,#0x00
      0009CF                       2951 00103$:
      0009CF EB               [12] 2952 	mov	a,r3
      0009D0 2D               [12] 2953 	add	a,r5
      0009D1 F8               [12] 2954 	mov	r0,a
      0009D2 EC               [12] 2955 	mov	a,r4
      0009D3 3E               [12] 2956 	addc	a,r6
      0009D4 F9               [12] 2957 	mov	r1,a
      0009D5 8F 02            [24] 2958 	mov	ar2,r7
      0009D7 88 82            [24] 2959 	mov	dpl,r0
      0009D9 89 83            [24] 2960 	mov	dph,r1
      0009DB 8A F0            [24] 2961 	mov	b,r2
      0009DD 12r00r00         [24] 2962 	lcall	__gptrget
      0009E0 FA               [12] 2963 	mov	r2,a
      0009E1 60 20            [24] 2964 	jz	00105$
                                   2965 ;	ecen4330lab7.c:690: write(str[i]);  /* Call transmit data function */
      0009E3 8A 82            [24] 2966 	mov	dpl,r2
      0009E5 C0 07            [24] 2967 	push	ar7
      0009E7 C0 06            [24] 2968 	push	ar6
      0009E9 C0 05            [24] 2969 	push	ar5
      0009EB C0 04            [24] 2970 	push	ar4
      0009ED C0 03            [24] 2971 	push	ar3
      0009EF 12r09r5F         [24] 2972 	lcall	_write
      0009F2 D0 03            [24] 2973 	pop	ar3
      0009F4 D0 04            [24] 2974 	pop	ar4
      0009F6 D0 05            [24] 2975 	pop	ar5
      0009F8 D0 06            [24] 2976 	pop	ar6
      0009FA D0 07            [24] 2977 	pop	ar7
                                   2978 ;	ecen4330lab7.c:688: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      0009FC 0B               [12] 2979 	inc	r3
      0009FD BB 00 CF         [24] 2980 	cjne	r3,#0x00,00103$
      000A00 0C               [12] 2981 	inc	r4
      000A01 80 CC            [24] 2982 	sjmp	00103$
      000A03                       2983 00105$:
                                   2984 ;	ecen4330lab7.c:692: }
      000A03 22               [24] 2985 	ret
                                   2986 ;------------------------------------------------------------
                                   2987 ;Allocation info for local variables in function 'keyDetect'
                                   2988 ;------------------------------------------------------------
                                   2989 ;	ecen4330lab7.c:712: unsigned char keyDetect(){
                                   2990 ;	-----------------------------------------
                                   2991 ;	 function keyDetect
                                   2992 ;	-----------------------------------------
      000A04                       2993 _keyDetect:
                                   2994 ;	ecen4330lab7.c:713: __KEYPAD_PORT__=0xF0;           /*set port direction as input-output*/
      000A04 75 90 F0         [24] 2995 	mov	_P1,#0xf0
                                   2996 ;	ecen4330lab7.c:714: received_flag = 0;
      000A07 75*42 00         [24] 2997 	mov	_received_flag,#0x00
                                   2998 ;	ecen4330lab7.c:715: do
      000A0A                       2999 00102$:
                                   3000 ;	ecen4330lab7.c:717: __KEYPAD_PORT__ = 0xF0;
      000A0A 75 90 F0         [24] 3001 	mov	_P1,#0xf0
                                   3002 ;	ecen4330lab7.c:718: colloc = __KEYPAD_PORT__;
      000A0D 85 90*00         [24] 3003 	mov	_colloc,_P1
                                   3004 ;	ecen4330lab7.c:719: colloc&= 0xF0;  /* mask port for column read only */
      000A10 53*00 F0         [24] 3005 	anl	_colloc,#0xf0
                                   3006 ;	ecen4330lab7.c:720: }while(colloc != 0xF0 && received_flag == 0);     /* read status of column */
      000A13 74 F0            [12] 3007 	mov	a,#0xf0
      000A15 B5*00 02         [24] 3008 	cjne	a,_colloc,00190$
      000A18 80 04            [24] 3009 	sjmp	00106$
      000A1A                       3010 00190$:
      000A1A E5*42            [12] 3011 	mov	a,_received_flag
      000A1C 60 EC            [24] 3012 	jz	00102$
                                   3013 ;	ecen4330lab7.c:724: do
      000A1E                       3014 00106$:
                                   3015 ;	ecen4330lab7.c:727: rtcPrint();
      000A1E 12r01r6D         [24] 3016 	lcall	_rtcPrint
                                   3017 ;	ecen4330lab7.c:728: delay(10);  /* 20ms key debounce time */
      000A21 90 00 0A         [24] 3018 	mov	dptr,#0x000a
      000A24 12r00r25         [24] 3019 	lcall	_delay
                                   3020 ;	ecen4330lab7.c:729: colloc = (__KEYPAD_PORT__ & 0xF0);  /* read status of column */
      000A27 E5 90            [12] 3021 	mov	a,_P1
      000A29 54 F0            [12] 3022 	anl	a,#0xf0
      000A2B F5*00            [12] 3023 	mov	_colloc,a
                                   3024 ;	ecen4330lab7.c:730: }while(colloc == 0xF0 && received_flag == 0); /* check for any key press */
      000A2D 74 F0            [12] 3025 	mov	a,#0xf0
      000A2F B5*00 04         [24] 3026 	cjne	a,_colloc,00108$
      000A32 E5*42            [12] 3027 	mov	a,_received_flag
      000A34 60 E8            [24] 3028 	jz	00106$
      000A36                       3029 00108$:
                                   3030 ;	ecen4330lab7.c:732: delay(1);
      000A36 90 00 01         [24] 3031 	mov	dptr,#0x0001
      000A39 12r00r25         [24] 3032 	lcall	_delay
                                   3033 ;	ecen4330lab7.c:733: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A3C E5 90            [12] 3034 	mov	a,_P1
      000A3E 54 F0            [12] 3035 	anl	a,#0xf0
      000A40 F5*00            [12] 3036 	mov	_colloc,a
                                   3037 ;	ecen4330lab7.c:734: }while(colloc == 0xF0 && received_flag == 0);
      000A42 74 F0            [12] 3038 	mov	a,#0xf0
      000A44 B5*00 04         [24] 3039 	cjne	a,_colloc,00112$
      000A47 E5*42            [12] 3040 	mov	a,_received_flag
      000A49 60 D3            [24] 3041 	jz	00106$
      000A4B                       3042 00112$:
                                   3043 ;	ecen4330lab7.c:736: if(received_flag == 0){
      000A4B E5*42            [12] 3044 	mov	a,_received_flag
      000A4D 60 03            [24] 3045 	jz	00198$
      000A4F 02r0Br13         [24] 3046 	ljmp	00134$
      000A52                       3047 00198$:
                                   3048 ;	ecen4330lab7.c:737: while(1)
      000A52                       3049 00122$:
                                   3050 ;	ecen4330lab7.c:741: __KEYPAD_PORT__= 0xFE;                                          /* check for pressed key in 1st row */
      000A52 75 90 FE         [24] 3051 	mov	_P1,#0xfe
                                   3052 ;	ecen4330lab7.c:742: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A55 E5 90            [12] 3053 	mov	a,_P1
      000A57 54 F0            [12] 3054 	anl	a,#0xf0
      000A59 F5*00            [12] 3055 	mov	_colloc,a
                                   3056 ;	ecen4330lab7.c:743: if(colloc != 0xF0)
      000A5B 74 F0            [12] 3057 	mov	a,#0xf0
      000A5D B5*00 02         [24] 3058 	cjne	a,_colloc,00199$
      000A60 80 05            [24] 3059 	sjmp	00114$
      000A62                       3060 00199$:
                                   3061 ;	ecen4330lab7.c:745: rowloc = 0;
      000A62 75*01 00         [24] 3062 	mov	_rowloc,#0x00
                                   3063 ;	ecen4330lab7.c:746: break;
      000A65 80 3D            [24] 3064 	sjmp	00123$
      000A67                       3065 00114$:
                                   3066 ;	ecen4330lab7.c:749: __KEYPAD_PORT__ = 0xFD;                                 /* check for pressed key in 2nd row */
      000A67 75 90 FD         [24] 3067 	mov	_P1,#0xfd
                                   3068 ;	ecen4330lab7.c:750: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A6A E5 90            [12] 3069 	mov	a,_P1
      000A6C 54 F0            [12] 3070 	anl	a,#0xf0
      000A6E F5*00            [12] 3071 	mov	_colloc,a
                                   3072 ;	ecen4330lab7.c:751: if(colloc != 0xF0)
      000A70 74 F0            [12] 3073 	mov	a,#0xf0
      000A72 B5*00 02         [24] 3074 	cjne	a,_colloc,00200$
      000A75 80 05            [24] 3075 	sjmp	00116$
      000A77                       3076 00200$:
                                   3077 ;	ecen4330lab7.c:753: rowloc = 1;
      000A77 75*01 01         [24] 3078 	mov	_rowloc,#0x01
                                   3079 ;	ecen4330lab7.c:754: break;
      000A7A 80 28            [24] 3080 	sjmp	00123$
      000A7C                       3081 00116$:
                                   3082 ;	ecen4330lab7.c:757: __KEYPAD_PORT__ = 0xFB;         /* check for pressed key in 3rd row */
      000A7C 75 90 FB         [24] 3083 	mov	_P1,#0xfb
                                   3084 ;	ecen4330lab7.c:758: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A7F E5 90            [12] 3085 	mov	a,_P1
      000A81 54 F0            [12] 3086 	anl	a,#0xf0
      000A83 F5*00            [12] 3087 	mov	_colloc,a
                                   3088 ;	ecen4330lab7.c:759: if(colloc != 0xF0)
      000A85 74 F0            [12] 3089 	mov	a,#0xf0
      000A87 B5*00 02         [24] 3090 	cjne	a,_colloc,00201$
      000A8A 80 05            [24] 3091 	sjmp	00118$
      000A8C                       3092 00201$:
                                   3093 ;	ecen4330lab7.c:761: rowloc = 2;
      000A8C 75*01 02         [24] 3094 	mov	_rowloc,#0x02
                                   3095 ;	ecen4330lab7.c:762: break;
      000A8F 80 13            [24] 3096 	sjmp	00123$
      000A91                       3097 00118$:
                                   3098 ;	ecen4330lab7.c:765: __KEYPAD_PORT__ = 0xF7;         /* check for pressed key in 4th row */
      000A91 75 90 F7         [24] 3099 	mov	_P1,#0xf7
                                   3100 ;	ecen4330lab7.c:766: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A94 E5 90            [12] 3101 	mov	a,_P1
      000A96 54 F0            [12] 3102 	anl	a,#0xf0
      000A98 F5*00            [12] 3103 	mov	_colloc,a
                                   3104 ;	ecen4330lab7.c:767: if(colloc != 0xF0)
      000A9A 74 F0            [12] 3105 	mov	a,#0xf0
      000A9C B5*00 02         [24] 3106 	cjne	a,_colloc,00202$
      000A9F 80 B1            [24] 3107 	sjmp	00122$
      000AA1                       3108 00202$:
                                   3109 ;	ecen4330lab7.c:769: rowloc = 3;
      000AA1 75*01 03         [24] 3110 	mov	_rowloc,#0x03
                                   3111 ;	ecen4330lab7.c:770: break;
      000AA4                       3112 00123$:
                                   3113 ;	ecen4330lab7.c:774: if(colloc == 0xE0)
      000AA4 74 E0            [12] 3114 	mov	a,#0xe0
      000AA6 B5*00 15         [24] 3115 	cjne	a,_colloc,00131$
                                   3116 ;	ecen4330lab7.c:776: return(keypad[rowloc][0]);
      000AA9 E5*01            [12] 3117 	mov	a,_rowloc
      000AAB 75 F0 04         [24] 3118 	mov	b,#0x04
      000AAE A4               [48] 3119 	mul	ab
      000AAF 24rFB            [12] 3120 	add	a,#_keypad
      000AB1 F5 82            [12] 3121 	mov	dpl,a
      000AB3 74s04            [12] 3122 	mov	a,#(_keypad >> 8)
      000AB5 35 F0            [12] 3123 	addc	a,b
      000AB7 F5 83            [12] 3124 	mov	dph,a
      000AB9 E4               [12] 3125 	clr	a
      000ABA 93               [24] 3126 	movc	a,@a+dptr
      000ABB F5 82            [12] 3127 	mov	dpl,a
      000ABD 22               [24] 3128 	ret
      000ABE                       3129 00131$:
                                   3130 ;	ecen4330lab7.c:778: else if(colloc == 0xD0)
      000ABE 74 D0            [12] 3131 	mov	a,#0xd0
      000AC0 B5*00 18         [24] 3132 	cjne	a,_colloc,00128$
                                   3133 ;	ecen4330lab7.c:780: return(keypad[rowloc][1]);
      000AC3 E5*01            [12] 3134 	mov	a,_rowloc
      000AC5 75 F0 04         [24] 3135 	mov	b,#0x04
      000AC8 A4               [48] 3136 	mul	ab
      000AC9 24rFB            [12] 3137 	add	a,#_keypad
      000ACB FE               [12] 3138 	mov	r6,a
      000ACC 74s04            [12] 3139 	mov	a,#(_keypad >> 8)
      000ACE 35 F0            [12] 3140 	addc	a,b
      000AD0 FF               [12] 3141 	mov	r7,a
      000AD1 8E 82            [24] 3142 	mov	dpl,r6
      000AD3 8F 83            [24] 3143 	mov	dph,r7
      000AD5 A3               [24] 3144 	inc	dptr
      000AD6 E4               [12] 3145 	clr	a
      000AD7 93               [24] 3146 	movc	a,@a+dptr
      000AD8 F5 82            [12] 3147 	mov	dpl,a
      000ADA 22               [24] 3148 	ret
      000ADB                       3149 00128$:
                                   3150 ;	ecen4330lab7.c:782: else if(colloc == 0xB0)
      000ADB 74 B0            [12] 3151 	mov	a,#0xb0
      000ADD B5*00 19         [24] 3152 	cjne	a,_colloc,00125$
                                   3153 ;	ecen4330lab7.c:784: return(keypad[rowloc][2]);
      000AE0 E5*01            [12] 3154 	mov	a,_rowloc
      000AE2 75 F0 04         [24] 3155 	mov	b,#0x04
      000AE5 A4               [48] 3156 	mul	ab
      000AE6 24rFB            [12] 3157 	add	a,#_keypad
      000AE8 FE               [12] 3158 	mov	r6,a
      000AE9 74s04            [12] 3159 	mov	a,#(_keypad >> 8)
      000AEB 35 F0            [12] 3160 	addc	a,b
      000AED FF               [12] 3161 	mov	r7,a
      000AEE 8E 82            [24] 3162 	mov	dpl,r6
      000AF0 8F 83            [24] 3163 	mov	dph,r7
      000AF2 A3               [24] 3164 	inc	dptr
      000AF3 A3               [24] 3165 	inc	dptr
      000AF4 E4               [12] 3166 	clr	a
      000AF5 93               [24] 3167 	movc	a,@a+dptr
      000AF6 F5 82            [12] 3168 	mov	dpl,a
      000AF8 22               [24] 3169 	ret
      000AF9                       3170 00125$:
                                   3171 ;	ecen4330lab7.c:788: return(keypad[rowloc][3]);
      000AF9 E5*01            [12] 3172 	mov	a,_rowloc
      000AFB 75 F0 04         [24] 3173 	mov	b,#0x04
      000AFE A4               [48] 3174 	mul	ab
      000AFF 24rFB            [12] 3175 	add	a,#_keypad
      000B01 FE               [12] 3176 	mov	r6,a
      000B02 74s04            [12] 3177 	mov	a,#(_keypad >> 8)
      000B04 35 F0            [12] 3178 	addc	a,b
      000B06 FF               [12] 3179 	mov	r7,a
      000B07 8E 82            [24] 3180 	mov	dpl,r6
      000B09 8F 83            [24] 3181 	mov	dph,r7
      000B0B A3               [24] 3182 	inc	dptr
      000B0C A3               [24] 3183 	inc	dptr
      000B0D A3               [24] 3184 	inc	dptr
      000B0E E4               [12] 3185 	clr	a
      000B0F 93               [24] 3186 	movc	a,@a+dptr
      000B10 F5 82            [12] 3187 	mov	dpl,a
      000B12 22               [24] 3188 	ret
      000B13                       3189 00134$:
                                   3190 ;	ecen4330lab7.c:792: received_flag = 0;
      000B13 75*42 00         [24] 3191 	mov	_received_flag,#0x00
                                   3192 ;	ecen4330lab7.c:793: return received_byte - 0x40;
      000B16 E5*41            [12] 3193 	mov	a,_received_byte
      000B18 24 C0            [12] 3194 	add	a,#0xc0
      000B1A F5 82            [12] 3195 	mov	dpl,a
                                   3196 ;	ecen4330lab7.c:795: }
      000B1C 22               [24] 3197 	ret
                                   3198 ;------------------------------------------------------------
                                   3199 ;Allocation info for local variables in function 'ASCIItoHEX'
                                   3200 ;------------------------------------------------------------
                                   3201 ;a                         Allocated to registers r7 
                                   3202 ;h                         Allocated to registers r7 
                                   3203 ;------------------------------------------------------------
                                   3204 ;	ecen4330lab7.c:803: unsigned char ASCIItoHEX(unsigned char a){
                                   3205 ;	-----------------------------------------
                                   3206 ;	 function ASCIItoHEX
                                   3207 ;	-----------------------------------------
      000B1D                       3208 _ASCIItoHEX:
      000B1D AF 82            [24] 3209 	mov	r7,dpl
                                   3210 ;	ecen4330lab7.c:806: switch (a)
      000B1F BF 30 00         [24] 3211 	cjne	r7,#0x30,00129$
      000B22                       3212 00129$:
      000B22 50 03            [24] 3213 	jnc	00130$
      000B24 02r0BrAE         [24] 3214 	ljmp	00117$
      000B27                       3215 00130$:
      000B27 EF               [12] 3216 	mov	a,r7
      000B28 24 B9            [12] 3217 	add	a,#0xff - 0x46
      000B2A 50 03            [24] 3218 	jnc	00131$
      000B2C 02r0BrAE         [24] 3219 	ljmp	00117$
      000B2F                       3220 00131$:
      000B2F EF               [12] 3221 	mov	a,r7
      000B30 24 D0            [12] 3222 	add	a,#0xd0
      000B32 FF               [12] 3223 	mov	r7,a
      000B33 24 0A            [12] 3224 	add	a,#(00132$-3-.)
      000B35 83               [24] 3225 	movc	a,@a+pc
      000B36 F5 82            [12] 3226 	mov	dpl,a
      000B38 EF               [12] 3227 	mov	a,r7
      000B39 24 1B            [12] 3228 	add	a,#(00133$-3-.)
      000B3B 83               [24] 3229 	movc	a,@a+pc
      000B3C F5 83            [12] 3230 	mov	dph,a
      000B3E E4               [12] 3231 	clr	a
      000B3F 73               [24] 3232 	jmp	@a+dptr
      000B40                       3233 00132$:
      000B40r6E                    3234 	.db	00101$
      000B41r72                    3235 	.db	00102$
      000B42r76                    3236 	.db	00103$
      000B43r7A                    3237 	.db	00104$
      000B44r7E                    3238 	.db	00105$
      000B45r82                    3239 	.db	00106$
      000B46r86                    3240 	.db	00107$
      000B47r8A                    3241 	.db	00108$
      000B48r8E                    3242 	.db	00109$
      000B49r92                    3243 	.db	00110$
      000B4ArAE                    3244 	.db	00117$
      000B4BrAE                    3245 	.db	00117$
      000B4CrAE                    3246 	.db	00117$
      000B4DrAE                    3247 	.db	00117$
      000B4ErAE                    3248 	.db	00117$
      000B4FrAE                    3249 	.db	00117$
      000B50rAE                    3250 	.db	00117$
      000B51r96                    3251 	.db	00111$
      000B52r9A                    3252 	.db	00112$
      000B53r9E                    3253 	.db	00113$
      000B54rA2                    3254 	.db	00114$
      000B55rA6                    3255 	.db	00115$
      000B56rAA                    3256 	.db	00116$
      000B57                       3257 00133$:
      000B57s0B                    3258 	.db	00101$>>8
      000B58s0B                    3259 	.db	00102$>>8
      000B59s0B                    3260 	.db	00103$>>8
      000B5As0B                    3261 	.db	00104$>>8
      000B5Bs0B                    3262 	.db	00105$>>8
      000B5Cs0B                    3263 	.db	00106$>>8
      000B5Ds0B                    3264 	.db	00107$>>8
      000B5Es0B                    3265 	.db	00108$>>8
      000B5Fs0B                    3266 	.db	00109$>>8
      000B60s0B                    3267 	.db	00110$>>8
      000B61s0B                    3268 	.db	00117$>>8
      000B62s0B                    3269 	.db	00117$>>8
      000B63s0B                    3270 	.db	00117$>>8
      000B64s0B                    3271 	.db	00117$>>8
      000B65s0B                    3272 	.db	00117$>>8
      000B66s0B                    3273 	.db	00117$>>8
      000B67s0B                    3274 	.db	00117$>>8
      000B68s0B                    3275 	.db	00111$>>8
      000B69s0B                    3276 	.db	00112$>>8
      000B6As0B                    3277 	.db	00113$>>8
      000B6Bs0B                    3278 	.db	00114$>>8
      000B6Cs0B                    3279 	.db	00115$>>8
      000B6Ds0B                    3280 	.db	00116$>>8
                                   3281 ;	ecen4330lab7.c:808: case '0':
      000B6E                       3282 00101$:
                                   3283 ;	ecen4330lab7.c:809: h = 0x00;
      000B6E 7F 00            [12] 3284 	mov	r7,#0x00
                                   3285 ;	ecen4330lab7.c:810: break;
                                   3286 ;	ecen4330lab7.c:811: case '1':
      000B70 80 3E            [24] 3287 	sjmp	00118$
      000B72                       3288 00102$:
                                   3289 ;	ecen4330lab7.c:812: h = 0x01;
      000B72 7F 01            [12] 3290 	mov	r7,#0x01
                                   3291 ;	ecen4330lab7.c:813: break;
                                   3292 ;	ecen4330lab7.c:814: case '2':
      000B74 80 3A            [24] 3293 	sjmp	00118$
      000B76                       3294 00103$:
                                   3295 ;	ecen4330lab7.c:815: h = 0x02;
      000B76 7F 02            [12] 3296 	mov	r7,#0x02
                                   3297 ;	ecen4330lab7.c:816: break;
                                   3298 ;	ecen4330lab7.c:817: case '3':
      000B78 80 36            [24] 3299 	sjmp	00118$
      000B7A                       3300 00104$:
                                   3301 ;	ecen4330lab7.c:818: h = 0x03;
      000B7A 7F 03            [12] 3302 	mov	r7,#0x03
                                   3303 ;	ecen4330lab7.c:819: break;
                                   3304 ;	ecen4330lab7.c:820: case '4':
      000B7C 80 32            [24] 3305 	sjmp	00118$
      000B7E                       3306 00105$:
                                   3307 ;	ecen4330lab7.c:821: h = 0x04;
      000B7E 7F 04            [12] 3308 	mov	r7,#0x04
                                   3309 ;	ecen4330lab7.c:822: break;
                                   3310 ;	ecen4330lab7.c:823: case '5':
      000B80 80 2E            [24] 3311 	sjmp	00118$
      000B82                       3312 00106$:
                                   3313 ;	ecen4330lab7.c:824: h = 0x05;
      000B82 7F 05            [12] 3314 	mov	r7,#0x05
                                   3315 ;	ecen4330lab7.c:825: break;
                                   3316 ;	ecen4330lab7.c:826: case '6':
      000B84 80 2A            [24] 3317 	sjmp	00118$
      000B86                       3318 00107$:
                                   3319 ;	ecen4330lab7.c:827: h = 0x06;
      000B86 7F 06            [12] 3320 	mov	r7,#0x06
                                   3321 ;	ecen4330lab7.c:828: break;
                                   3322 ;	ecen4330lab7.c:829: case '7':
      000B88 80 26            [24] 3323 	sjmp	00118$
      000B8A                       3324 00108$:
                                   3325 ;	ecen4330lab7.c:830: h = 0x07;
      000B8A 7F 07            [12] 3326 	mov	r7,#0x07
                                   3327 ;	ecen4330lab7.c:831: break;
                                   3328 ;	ecen4330lab7.c:832: case '8':
      000B8C 80 22            [24] 3329 	sjmp	00118$
      000B8E                       3330 00109$:
                                   3331 ;	ecen4330lab7.c:833: h = 0x08;
      000B8E 7F 08            [12] 3332 	mov	r7,#0x08
                                   3333 ;	ecen4330lab7.c:834: break;
                                   3334 ;	ecen4330lab7.c:835: case '9':
      000B90 80 1E            [24] 3335 	sjmp	00118$
      000B92                       3336 00110$:
                                   3337 ;	ecen4330lab7.c:836: h = 0x09;
      000B92 7F 09            [12] 3338 	mov	r7,#0x09
                                   3339 ;	ecen4330lab7.c:837: break;
                                   3340 ;	ecen4330lab7.c:838: case 'A':
      000B94 80 1A            [24] 3341 	sjmp	00118$
      000B96                       3342 00111$:
                                   3343 ;	ecen4330lab7.c:839: h = 0x0A;
      000B96 7F 0A            [12] 3344 	mov	r7,#0x0a
                                   3345 ;	ecen4330lab7.c:840: break;
                                   3346 ;	ecen4330lab7.c:841: case 'B':
      000B98 80 16            [24] 3347 	sjmp	00118$
      000B9A                       3348 00112$:
                                   3349 ;	ecen4330lab7.c:842: h = 0x0B;
      000B9A 7F 0B            [12] 3350 	mov	r7,#0x0b
                                   3351 ;	ecen4330lab7.c:843: break;
                                   3352 ;	ecen4330lab7.c:844: case 'C':
      000B9C 80 12            [24] 3353 	sjmp	00118$
      000B9E                       3354 00113$:
                                   3355 ;	ecen4330lab7.c:845: h = 0x0C;
      000B9E 7F 0C            [12] 3356 	mov	r7,#0x0c
                                   3357 ;	ecen4330lab7.c:846: break;
                                   3358 ;	ecen4330lab7.c:847: case 'D':
      000BA0 80 0E            [24] 3359 	sjmp	00118$
      000BA2                       3360 00114$:
                                   3361 ;	ecen4330lab7.c:848: h = 0x0D;
      000BA2 7F 0D            [12] 3362 	mov	r7,#0x0d
                                   3363 ;	ecen4330lab7.c:849: break;
                                   3364 ;	ecen4330lab7.c:850: case 'E':
      000BA4 80 0A            [24] 3365 	sjmp	00118$
      000BA6                       3366 00115$:
                                   3367 ;	ecen4330lab7.c:851: h = 0x0E;
      000BA6 7F 0E            [12] 3368 	mov	r7,#0x0e
                                   3369 ;	ecen4330lab7.c:852: break;
                                   3370 ;	ecen4330lab7.c:853: case 'F':
      000BA8 80 06            [24] 3371 	sjmp	00118$
      000BAA                       3372 00116$:
                                   3373 ;	ecen4330lab7.c:854: h = 0x0F;
      000BAA 7F 0F            [12] 3374 	mov	r7,#0x0f
                                   3375 ;	ecen4330lab7.c:855: break;
                                   3376 ;	ecen4330lab7.c:856: default:
      000BAC 80 02            [24] 3377 	sjmp	00118$
      000BAE                       3378 00117$:
                                   3379 ;	ecen4330lab7.c:857: h = 0x00;
      000BAE 7F 00            [12] 3380 	mov	r7,#0x00
                                   3381 ;	ecen4330lab7.c:859: }
      000BB0                       3382 00118$:
                                   3383 ;	ecen4330lab7.c:860: return h;
      000BB0 8F 82            [24] 3384 	mov	dpl,r7
                                   3385 ;	ecen4330lab7.c:861: }
      000BB2 22               [24] 3386 	ret
                                   3387 ;------------------------------------------------------------
                                   3388 ;Allocation info for local variables in function 'HEXtoASCII'
                                   3389 ;------------------------------------------------------------
                                   3390 ;h                         Allocated to registers r6 r7 
                                   3391 ;a                         Allocated to registers r7 
                                   3392 ;------------------------------------------------------------
                                   3393 ;	ecen4330lab7.c:868: unsigned char HEXtoASCII(unsigned int h){
                                   3394 ;	-----------------------------------------
                                   3395 ;	 function HEXtoASCII
                                   3396 ;	-----------------------------------------
      000BB3                       3397 _HEXtoASCII:
      000BB3 AE 82            [24] 3398 	mov	r6,dpl
      000BB5 AF 83            [24] 3399 	mov	r7,dph
                                   3400 ;	ecen4330lab7.c:871: switch (h)
      000BB7 C3               [12] 3401 	clr	c
      000BB8 74 0F            [12] 3402 	mov	a,#0x0f
      000BBA 9E               [12] 3403 	subb	a,r6
      000BBB E4               [12] 3404 	clr	a
      000BBC 9F               [12] 3405 	subb	a,r7
      000BBD 50 03            [24] 3406 	jnc	00125$
      000BBF 02r0Cr30         [24] 3407 	ljmp	00117$
      000BC2                       3408 00125$:
      000BC2 EE               [12] 3409 	mov	a,r6
      000BC3 24 0A            [12] 3410 	add	a,#(00126$-3-.)
      000BC5 83               [24] 3411 	movc	a,@a+pc
      000BC6 F5 82            [12] 3412 	mov	dpl,a
      000BC8 EE               [12] 3413 	mov	a,r6
      000BC9 24 14            [12] 3414 	add	a,#(00127$-3-.)
      000BCB 83               [24] 3415 	movc	a,@a+pc
      000BCC F5 83            [12] 3416 	mov	dph,a
      000BCE E4               [12] 3417 	clr	a
      000BCF 73               [24] 3418 	jmp	@a+dptr
      000BD0                       3419 00126$:
      000BD0rF0                    3420 	.db	00101$
      000BD1rF4                    3421 	.db	00102$
      000BD2rF8                    3422 	.db	00103$
      000BD3rFC                    3423 	.db	00104$
      000BD4r00                    3424 	.db	00105$
      000BD5r04                    3425 	.db	00106$
      000BD6r08                    3426 	.db	00107$
      000BD7r0C                    3427 	.db	00108$
      000BD8r10                    3428 	.db	00109$
      000BD9r14                    3429 	.db	00110$
      000BDAr18                    3430 	.db	00111$
      000BDBr1C                    3431 	.db	00112$
      000BDCr20                    3432 	.db	00113$
      000BDDr24                    3433 	.db	00114$
      000BDEr28                    3434 	.db	00115$
      000BDFr2C                    3435 	.db	00116$
      000BE0                       3436 00127$:
      000BE0s0B                    3437 	.db	00101$>>8
      000BE1s0B                    3438 	.db	00102$>>8
      000BE2s0B                    3439 	.db	00103$>>8
      000BE3s0B                    3440 	.db	00104$>>8
      000BE4s0C                    3441 	.db	00105$>>8
      000BE5s0C                    3442 	.db	00106$>>8
      000BE6s0C                    3443 	.db	00107$>>8
      000BE7s0C                    3444 	.db	00108$>>8
      000BE8s0C                    3445 	.db	00109$>>8
      000BE9s0C                    3446 	.db	00110$>>8
      000BEAs0C                    3447 	.db	00111$>>8
      000BEBs0C                    3448 	.db	00112$>>8
      000BECs0C                    3449 	.db	00113$>>8
      000BEDs0C                    3450 	.db	00114$>>8
      000BEEs0C                    3451 	.db	00115$>>8
      000BEFs0C                    3452 	.db	00116$>>8
                                   3453 ;	ecen4330lab7.c:873: case 0x0000:
      000BF0                       3454 00101$:
                                   3455 ;	ecen4330lab7.c:874: a = '0';
      000BF0 7F 30            [12] 3456 	mov	r7,#0x30
                                   3457 ;	ecen4330lab7.c:875: break;
                                   3458 ;	ecen4330lab7.c:876: case 0x0001:
      000BF2 80 3E            [24] 3459 	sjmp	00118$
      000BF4                       3460 00102$:
                                   3461 ;	ecen4330lab7.c:877: a = '1';
      000BF4 7F 31            [12] 3462 	mov	r7,#0x31
                                   3463 ;	ecen4330lab7.c:878: break;
                                   3464 ;	ecen4330lab7.c:879: case 0x0002:
      000BF6 80 3A            [24] 3465 	sjmp	00118$
      000BF8                       3466 00103$:
                                   3467 ;	ecen4330lab7.c:880: a = '2';
      000BF8 7F 32            [12] 3468 	mov	r7,#0x32
                                   3469 ;	ecen4330lab7.c:881: break;
                                   3470 ;	ecen4330lab7.c:882: case 0x0003:
      000BFA 80 36            [24] 3471 	sjmp	00118$
      000BFC                       3472 00104$:
                                   3473 ;	ecen4330lab7.c:883: a = '3';
      000BFC 7F 33            [12] 3474 	mov	r7,#0x33
                                   3475 ;	ecen4330lab7.c:884: break;
                                   3476 ;	ecen4330lab7.c:885: case 0x0004:
      000BFE 80 32            [24] 3477 	sjmp	00118$
      000C00                       3478 00105$:
                                   3479 ;	ecen4330lab7.c:886: a = '4';
      000C00 7F 34            [12] 3480 	mov	r7,#0x34
                                   3481 ;	ecen4330lab7.c:887: break;
                                   3482 ;	ecen4330lab7.c:888: case 0x0005:
      000C02 80 2E            [24] 3483 	sjmp	00118$
      000C04                       3484 00106$:
                                   3485 ;	ecen4330lab7.c:889: a = '5';
      000C04 7F 35            [12] 3486 	mov	r7,#0x35
                                   3487 ;	ecen4330lab7.c:890: break;
                                   3488 ;	ecen4330lab7.c:891: case 0x0006:
      000C06 80 2A            [24] 3489 	sjmp	00118$
      000C08                       3490 00107$:
                                   3491 ;	ecen4330lab7.c:892: a = '6';
      000C08 7F 36            [12] 3492 	mov	r7,#0x36
                                   3493 ;	ecen4330lab7.c:893: break;
                                   3494 ;	ecen4330lab7.c:894: case 0x0007:
      000C0A 80 26            [24] 3495 	sjmp	00118$
      000C0C                       3496 00108$:
                                   3497 ;	ecen4330lab7.c:895: a = '7';
      000C0C 7F 37            [12] 3498 	mov	r7,#0x37
                                   3499 ;	ecen4330lab7.c:896: break;
                                   3500 ;	ecen4330lab7.c:897: case 0x0008:
      000C0E 80 22            [24] 3501 	sjmp	00118$
      000C10                       3502 00109$:
                                   3503 ;	ecen4330lab7.c:898: a = '8';
      000C10 7F 38            [12] 3504 	mov	r7,#0x38
                                   3505 ;	ecen4330lab7.c:899: break;
                                   3506 ;	ecen4330lab7.c:900: case 0x0009:
      000C12 80 1E            [24] 3507 	sjmp	00118$
      000C14                       3508 00110$:
                                   3509 ;	ecen4330lab7.c:901: a = '9';
      000C14 7F 39            [12] 3510 	mov	r7,#0x39
                                   3511 ;	ecen4330lab7.c:902: break;
                                   3512 ;	ecen4330lab7.c:903: case 0x000A:
      000C16 80 1A            [24] 3513 	sjmp	00118$
      000C18                       3514 00111$:
                                   3515 ;	ecen4330lab7.c:904: a = 'A';
      000C18 7F 41            [12] 3516 	mov	r7,#0x41
                                   3517 ;	ecen4330lab7.c:905: break;
                                   3518 ;	ecen4330lab7.c:906: case 0x000B:
      000C1A 80 16            [24] 3519 	sjmp	00118$
      000C1C                       3520 00112$:
                                   3521 ;	ecen4330lab7.c:907: a = 'B';
      000C1C 7F 42            [12] 3522 	mov	r7,#0x42
                                   3523 ;	ecen4330lab7.c:908: break;
                                   3524 ;	ecen4330lab7.c:909: case 0x000C:
      000C1E 80 12            [24] 3525 	sjmp	00118$
      000C20                       3526 00113$:
                                   3527 ;	ecen4330lab7.c:910: a = 'C';
      000C20 7F 43            [12] 3528 	mov	r7,#0x43
                                   3529 ;	ecen4330lab7.c:911: break;
                                   3530 ;	ecen4330lab7.c:912: case 0x000D:
      000C22 80 0E            [24] 3531 	sjmp	00118$
      000C24                       3532 00114$:
                                   3533 ;	ecen4330lab7.c:913: a = 'D';
      000C24 7F 44            [12] 3534 	mov	r7,#0x44
                                   3535 ;	ecen4330lab7.c:914: break;
                                   3536 ;	ecen4330lab7.c:915: case 0x000E:
      000C26 80 0A            [24] 3537 	sjmp	00118$
      000C28                       3538 00115$:
                                   3539 ;	ecen4330lab7.c:916: a = 'E';
      000C28 7F 45            [12] 3540 	mov	r7,#0x45
                                   3541 ;	ecen4330lab7.c:917: break;
                                   3542 ;	ecen4330lab7.c:918: case 0x000F:
      000C2A 80 06            [24] 3543 	sjmp	00118$
      000C2C                       3544 00116$:
                                   3545 ;	ecen4330lab7.c:919: a = 'F';
      000C2C 7F 46            [12] 3546 	mov	r7,#0x46
                                   3547 ;	ecen4330lab7.c:920: break;
                                   3548 ;	ecen4330lab7.c:921: default:
      000C2E 80 02            [24] 3549 	sjmp	00118$
      000C30                       3550 00117$:
                                   3551 ;	ecen4330lab7.c:922: a = '0';
      000C30 7F 30            [12] 3552 	mov	r7,#0x30
                                   3553 ;	ecen4330lab7.c:924: }
      000C32                       3554 00118$:
                                   3555 ;	ecen4330lab7.c:925: return a;
      000C32 8F 82            [24] 3556 	mov	dpl,r7
                                   3557 ;	ecen4330lab7.c:926: }
      000C34 22               [24] 3558 	ret
                                   3559 ;------------------------------------------------------------
                                   3560 ;Allocation info for local variables in function 'HEXtoASCII_8write'
                                   3561 ;------------------------------------------------------------
                                   3562 ;h                         Allocated to registers r7 
                                   3563 ;------------------------------------------------------------
                                   3564 ;	ecen4330lab7.c:934: void HEXtoASCII_8write(unsigned char h){
                                   3565 ;	-----------------------------------------
                                   3566 ;	 function HEXtoASCII_8write
                                   3567 ;	-----------------------------------------
      000C35                       3568 _HEXtoASCII_8write:
                                   3569 ;	ecen4330lab7.c:937: byte = (h >> 4);
      000C35 E5 82            [12] 3570 	mov	a,dpl
      000C37 FF               [12] 3571 	mov	r7,a
      000C38 C4               [12] 3572 	swap	a
      000C39 54 0F            [12] 3573 	anl	a,#0x0f
      000C3B FE               [12] 3574 	mov	r6,a
      000C3C 8E*2D            [24] 3575 	mov	_byte,r6
      000C3E 75*2E 00         [24] 3576 	mov	(_byte + 1),#0x00
                                   3577 ;	ecen4330lab7.c:938: byte &= 0x0F;
      000C41 53*2D 0F         [24] 3578 	anl	_byte,#0x0f
      000C44 75*2E 00         [24] 3579 	mov	(_byte + 1),#0x00
                                   3580 ;	ecen4330lab7.c:939: ASCII = HEXtoASCII(byte);
      000C47 85*2D 82         [24] 3581 	mov	dpl,_byte
      000C4A 85*2E 83         [24] 3582 	mov	dph,(_byte + 1)
      000C4D C0 07            [24] 3583 	push	ar7
      000C4F 12r0BrB3         [24] 3584 	lcall	_HEXtoASCII
                                   3585 ;	ecen4330lab7.c:940: write(ASCII);
      000C52 85 82*31         [24] 3586 	mov  _ASCII,dpl
      000C55 12r09r5F         [24] 3587 	lcall	_write
      000C58 D0 07            [24] 3588 	pop	ar7
                                   3589 ;	ecen4330lab7.c:943: byte = (h & 0x0F);
      000C5A 7E 00            [12] 3590 	mov	r6,#0x00
      000C5C 74 0F            [12] 3591 	mov	a,#0x0f
      000C5E 5F               [12] 3592 	anl	a,r7
      000C5F F5*2D            [12] 3593 	mov	_byte,a
                                   3594 ;	1-genFromRTrack replaced	mov	(_byte + 1),#0x00
      000C61 8E*2E            [24] 3595 	mov	(_byte + 1),r6
                                   3596 ;	ecen4330lab7.c:944: ASCII = HEXtoASCII(byte);
      000C63 85*2D 82         [24] 3597 	mov	dpl,_byte
      000C66 85*2E 83         [24] 3598 	mov	dph,(_byte + 1)
      000C69 12r0BrB3         [24] 3599 	lcall	_HEXtoASCII
                                   3600 ;	ecen4330lab7.c:945: write(ASCII);
      000C6C 85 82*31         [24] 3601 	mov  _ASCII,dpl
                                   3602 ;	ecen4330lab7.c:946: }
      000C6F 02r09r5F         [24] 3603 	ljmp	_write
                                   3604 ;------------------------------------------------------------
                                   3605 ;Allocation info for local variables in function 'HEXtoASCII_16write'
                                   3606 ;------------------------------------------------------------
                                   3607 ;h                         Allocated to registers r6 r7 
                                   3608 ;------------------------------------------------------------
                                   3609 ;	ecen4330lab7.c:954: void HEXtoASCII_16write(unsigned int h){
                                   3610 ;	-----------------------------------------
                                   3611 ;	 function HEXtoASCII_16write
                                   3612 ;	-----------------------------------------
      000C72                       3613 _HEXtoASCII_16write:
      000C72 AE 82            [24] 3614 	mov	r6,dpl
                                   3615 ;	ecen4330lab7.c:957: byte = (h >> 12);
      000C74 E5 83            [12] 3616 	mov	a,dph
      000C76 FF               [12] 3617 	mov	r7,a
      000C77 C4               [12] 3618 	swap	a
      000C78 54 0F            [12] 3619 	anl	a,#0x0f
      000C7A F5*2D            [12] 3620 	mov	_byte,a
      000C7C 75*2E 00         [24] 3621 	mov	(_byte + 1),#0x00
                                   3622 ;	ecen4330lab7.c:958: byte &= 0x000F;
      000C7F 53*2D 0F         [24] 3623 	anl	_byte,#0x0f
      000C82 75*2E 00         [24] 3624 	mov	(_byte + 1),#0x00
                                   3625 ;	ecen4330lab7.c:959: ASCII = HEXtoASCII(byte);
      000C85 85*2D 82         [24] 3626 	mov	dpl,_byte
      000C88 85*2E 83         [24] 3627 	mov	dph,(_byte + 1)
      000C8B C0 07            [24] 3628 	push	ar7
      000C8D C0 06            [24] 3629 	push	ar6
      000C8F 12r0BrB3         [24] 3630 	lcall	_HEXtoASCII
      000C92 85 82*31         [24] 3631 	mov	_ASCII,dpl
                                   3632 ;	ecen4330lab7.c:960: LCD_string_write("0x");
      000C95 90r05r0D         [24] 3633 	mov	dptr,#___str_1
      000C98 75 F0 80         [24] 3634 	mov	b,#0x80
      000C9B 12r09rC5         [24] 3635 	lcall	_LCD_string_write
                                   3636 ;	ecen4330lab7.c:961: write(ASCII);
      000C9E 85*31 82         [24] 3637 	mov	dpl,_ASCII
      000CA1 12r09r5F         [24] 3638 	lcall	_write
      000CA4 D0 06            [24] 3639 	pop	ar6
      000CA6 D0 07            [24] 3640 	pop	ar7
                                   3641 ;	ecen4330lab7.c:964: byte = (h >> 8);
      000CA8 8F*2D            [24] 3642 	mov	_byte,r7
      000CAA 75*2E 00         [24] 3643 	mov	(_byte + 1),#0x00
                                   3644 ;	ecen4330lab7.c:965: byte &= 0x000F;
      000CAD 53*2D 0F         [24] 3645 	anl	_byte,#0x0f
      000CB0 75*2E 00         [24] 3646 	mov	(_byte + 1),#0x00
                                   3647 ;	ecen4330lab7.c:966: ASCII = HEXtoASCII(byte);
      000CB3 85*2D 82         [24] 3648 	mov	dpl,_byte
      000CB6 85*2E 83         [24] 3649 	mov	dph,(_byte + 1)
      000CB9 C0 07            [24] 3650 	push	ar7
      000CBB C0 06            [24] 3651 	push	ar6
      000CBD 12r0BrB3         [24] 3652 	lcall	_HEXtoASCII
                                   3653 ;	ecen4330lab7.c:967: write(ASCII);
      000CC0 85 82*31         [24] 3654 	mov  _ASCII,dpl
      000CC3 12r09r5F         [24] 3655 	lcall	_write
      000CC6 D0 06            [24] 3656 	pop	ar6
      000CC8 D0 07            [24] 3657 	pop	ar7
                                   3658 ;	ecen4330lab7.c:970: byte = (h >> 4);
      000CCA 8E*2D            [24] 3659 	mov	_byte,r6
      000CCC EF               [12] 3660 	mov	a,r7
      000CCD C4               [12] 3661 	swap	a
      000CCE C5*2D            [12] 3662 	xch	a,_byte
      000CD0 C4               [12] 3663 	swap	a
      000CD1 54 0F            [12] 3664 	anl	a,#0x0f
      000CD3 65*2D            [12] 3665 	xrl	a,_byte
      000CD5 C5*2D            [12] 3666 	xch	a,_byte
      000CD7 54 0F            [12] 3667 	anl	a,#0x0f
      000CD9 C5*2D            [12] 3668 	xch	a,_byte
      000CDB 65*2D            [12] 3669 	xrl	a,_byte
      000CDD C5*2D            [12] 3670 	xch	a,_byte
      000CDF F5*2E            [12] 3671 	mov	(_byte + 1),a
                                   3672 ;	ecen4330lab7.c:971: byte &= 0x000F;
      000CE1 53*2D 0F         [24] 3673 	anl	_byte,#0x0f
      000CE4 75*2E 00         [24] 3674 	mov	(_byte + 1),#0x00
                                   3675 ;	ecen4330lab7.c:972: ASCII = HEXtoASCII(byte);
      000CE7 85*2D 82         [24] 3676 	mov	dpl,_byte
      000CEA 85*2E 83         [24] 3677 	mov	dph,(_byte + 1)
      000CED C0 07            [24] 3678 	push	ar7
      000CEF C0 06            [24] 3679 	push	ar6
      000CF1 12r0BrB3         [24] 3680 	lcall	_HEXtoASCII
                                   3681 ;	ecen4330lab7.c:973: write(ASCII);
      000CF4 85 82*31         [24] 3682 	mov  _ASCII,dpl
      000CF7 12r09r5F         [24] 3683 	lcall	_write
      000CFA D0 06            [24] 3684 	pop	ar6
      000CFC D0 07            [24] 3685 	pop	ar7
                                   3686 ;	ecen4330lab7.c:976: byte = h;
      000CFE 8E*2D            [24] 3687 	mov	_byte,r6
      000D00 8F*2E            [24] 3688 	mov	(_byte + 1),r7
                                   3689 ;	ecen4330lab7.c:977: byte &= 0x000F;
      000D02 53*2D 0F         [24] 3690 	anl	_byte,#0x0f
      000D05 75*2E 00         [24] 3691 	mov	(_byte + 1),#0x00
                                   3692 ;	ecen4330lab7.c:978: ASCII = HEXtoASCII(byte);
      000D08 85*2D 82         [24] 3693 	mov	dpl,_byte
      000D0B 85*2E 83         [24] 3694 	mov	dph,(_byte + 1)
      000D0E 12r0BrB3         [24] 3695 	lcall	_HEXtoASCII
                                   3696 ;	ecen4330lab7.c:979: write(ASCII);
      000D11 85 82*31         [24] 3697 	mov  _ASCII,dpl
                                   3698 ;	ecen4330lab7.c:980: }
      000D14 02r09r5F         [24] 3699 	ljmp	_write
                                   3700 ;------------------------------------------------------------
                                   3701 ;Allocation info for local variables in function 'RAMwrite'
                                   3702 ;------------------------------------------------------------
                                   3703 ;d                         Allocated with name '_RAMwrite_PARM_2'
                                   3704 ;a                         Allocated to registers r6 r7 
                                   3705 ;ram_address               Allocated to registers 
                                   3706 ;------------------------------------------------------------
                                   3707 ;	ecen4330lab7.c:988: void RAMwrite(unsigned int a, unsigned char d){
                                   3708 ;	-----------------------------------------
                                   3709 ;	 function RAMwrite
                                   3710 ;	-----------------------------------------
      000D17                       3711 _RAMwrite:
      000D17 AE 82            [24] 3712 	mov	r6,dpl
      000D19 AF 83            [24] 3713 	mov	r7,dph
                                   3714 ;	ecen4330lab7.c:991: IOM = 0;
                                   3715 ;	assignBit
      000D1B C2 B4            [12] 3716 	clr	_P3_4
                                   3717 ;	ecen4330lab7.c:994: ram_address = (unsigned char __xdata*)(a);
      000D1D 8E 82            [24] 3718 	mov	dpl,r6
      000D1F 8F 83            [24] 3719 	mov	dph,r7
                                   3720 ;	ecen4330lab7.c:997: *ram_address = d;
      000D21 E5*00            [12] 3721 	mov	a,_RAMwrite_PARM_2
      000D23 F0               [24] 3722 	movx	@dptr,a
                                   3723 ;	ecen4330lab7.c:998: IOM = 1;
                                   3724 ;	assignBit
      000D24 D2 B4            [12] 3725 	setb	_P3_4
                                   3726 ;	ecen4330lab7.c:999: }
      000D26 22               [24] 3727 	ret
                                   3728 ;------------------------------------------------------------
                                   3729 ;Allocation info for local variables in function 'testRAM'
                                   3730 ;------------------------------------------------------------
                                   3731 ;d                         Allocated to registers r7 
                                   3732 ;i                         Allocated to registers r5 r6 
                                   3733 ;ram_address               Allocated to registers 
                                   3734 ;------------------------------------------------------------
                                   3735 ;	ecen4330lab7.c:1002: void testRAM(unsigned char d){
                                   3736 ;	-----------------------------------------
                                   3737 ;	 function testRAM
                                   3738 ;	-----------------------------------------
      000D27                       3739 _testRAM:
      000D27 AF 82            [24] 3740 	mov	r7,dpl
                                   3741 ;	ecen4330lab7.c:1006: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D29 7D 00            [12] 3742 	mov	r5,#0x00
      000D2B 7E 00            [12] 3743 	mov	r6,#0x00
      000D2D                       3744 00102$:
                                   3745 ;	ecen4330lab7.c:1007: IOM = 0;
                                   3746 ;	assignBit
      000D2D C2 B4            [12] 3747 	clr	_P3_4
                                   3748 ;	ecen4330lab7.c:1008: ram_address = (unsigned char __xdata*)(i);
      000D2F 8D 82            [24] 3749 	mov	dpl,r5
      000D31 8E 83            [24] 3750 	mov	dph,r6
                                   3751 ;	ecen4330lab7.c:1009: *ram_address = d;
      000D33 EF               [12] 3752 	mov	a,r7
      000D34 F0               [24] 3753 	movx	@dptr,a
                                   3754 ;	ecen4330lab7.c:1010: IOM = 1;
                                   3755 ;	assignBit
      000D35 D2 B4            [12] 3756 	setb	_P3_4
                                   3757 ;	ecen4330lab7.c:1006: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D37 0D               [12] 3758 	inc	r5
      000D38 BD 00 01         [24] 3759 	cjne	r5,#0x00,00111$
      000D3B 0E               [12] 3760 	inc	r6
      000D3C                       3761 00111$:
      000D3C C3               [12] 3762 	clr	c
      000D3D 74 FE            [12] 3763 	mov	a,#0xfe
      000D3F 9D               [12] 3764 	subb	a,r5
      000D40 74 FF            [12] 3765 	mov	a,#0xff
      000D42 9E               [12] 3766 	subb	a,r6
      000D43 50 E8            [24] 3767 	jnc	00102$
                                   3768 ;	ecen4330lab7.c:1013: }
      000D45 22               [24] 3769 	ret
                                   3770 ;------------------------------------------------------------
                                   3771 ;Allocation info for local variables in function 'RAMread'
                                   3772 ;------------------------------------------------------------
                                   3773 ;a                         Allocated to registers r6 r7 
                                   3774 ;ram_address               Allocated to registers 
                                   3775 ;------------------------------------------------------------
                                   3776 ;	ecen4330lab7.c:1020: unsigned char RAMread(unsigned int a){
                                   3777 ;	-----------------------------------------
                                   3778 ;	 function RAMread
                                   3779 ;	-----------------------------------------
      000D46                       3780 _RAMread:
      000D46 AE 82            [24] 3781 	mov	r6,dpl
      000D48 AF 83            [24] 3782 	mov	r7,dph
                                   3783 ;	ecen4330lab7.c:1023: IOM = 0;
                                   3784 ;	assignBit
      000D4A C2 B4            [12] 3785 	clr	_P3_4
                                   3786 ;	ecen4330lab7.c:1026: ram_address = (unsigned char __xdata*)(a);
      000D4C 8E 82            [24] 3787 	mov	dpl,r6
      000D4E 8F 83            [24] 3788 	mov	dph,r7
                                   3789 ;	ecen4330lab7.c:1029: data = *ram_address;
      000D50 E0               [24] 3790 	movx	a,@dptr
      000D51 F5*20            [12] 3791 	mov	_data,a
                                   3792 ;	ecen4330lab7.c:1030: IOM = 1;
                                   3793 ;	assignBit
      000D53 D2 B4            [12] 3794 	setb	_P3_4
                                   3795 ;	ecen4330lab7.c:1031: return data;
      000D55 85*20 82         [24] 3796 	mov	dpl,_data
                                   3797 ;	ecen4330lab7.c:1032: }
      000D58 22               [24] 3798 	ret
                                   3799 ;------------------------------------------------------------
                                   3800 ;Allocation info for local variables in function 'resetLCD'
                                   3801 ;------------------------------------------------------------
                                   3802 ;	ecen4330lab7.c:1044: void resetLCD(){
                                   3803 ;	-----------------------------------------
                                   3804 ;	 function resetLCD
                                   3805 ;	-----------------------------------------
      000D59                       3806 _resetLCD:
                                   3807 ;	ecen4330lab7.c:1045: setRotation(4);
      000D59 75 82 04         [24] 3808 	mov	dpl,#0x04
      000D5C 12r02rFB         [24] 3809 	lcall	_setRotation
                                   3810 ;	ecen4330lab7.c:1046: setTextColor(GRAY, BLACK);
      000D5F E4               [12] 3811 	clr	a
      000D60 F5*00            [12] 3812 	mov	_setTextColor_PARM_2,a
      000D62 F5*01            [12] 3813 	mov	(_setTextColor_PARM_2 + 1),a
      000D64 90 D6 BA         [24] 3814 	mov	dptr,#0xd6ba
      000D67 12r02rD6         [24] 3815 	lcall	_setTextColor
                                   3816 ;	ecen4330lab7.c:1047: setTextSize(3);
      000D6A 75 82 03         [24] 3817 	mov	dpl,#0x03
      000D6D 12r02rE3         [24] 3818 	lcall	_setTextSize
                                   3819 ;	ecen4330lab7.c:1048: fillScreen(BLACK);
      000D70 90 00 00         [24] 3820 	mov	dptr,#0x0000
      000D73 12r06r6E         [24] 3821 	lcall	_fillScreen
                                   3822 ;	ecen4330lab7.c:1049: setCursor(0, 0);
      000D76 E4               [12] 3823 	clr	a
      000D77 F5*00            [12] 3824 	mov	_setCursor_PARM_2,a
      000D79 F5*01            [12] 3825 	mov	(_setCursor_PARM_2 + 1),a
      000D7B 90 00 00         [24] 3826 	mov	dptr,#0x0000
                                   3827 ;	ecen4330lab7.c:1050: }
      000D7E 02r02rC9         [24] 3828 	ljmp	_setCursor
                                   3829 ;------------------------------------------------------------
                                   3830 ;Allocation info for local variables in function 'invalidInput'
                                   3831 ;------------------------------------------------------------
                                   3832 ;	ecen4330lab7.c:1062: void invalidInput(){
                                   3833 ;	-----------------------------------------
                                   3834 ;	 function invalidInput
                                   3835 ;	-----------------------------------------
      000D81                       3836 _invalidInput:
                                   3837 ;	ecen4330lab7.c:1063: resetLCD();
      000D81 12r0Dr59         [24] 3838 	lcall	_resetLCD
                                   3839 ;	ecen4330lab7.c:1064: setTextColor(RED, BLACK);
      000D84 E4               [12] 3840 	clr	a
      000D85 F5*00            [12] 3841 	mov	_setTextColor_PARM_2,a
      000D87 F5*01            [12] 3842 	mov	(_setTextColor_PARM_2 + 1),a
      000D89 90 F8 00         [24] 3843 	mov	dptr,#0xf800
      000D8C 12r02rD6         [24] 3844 	lcall	_setTextColor
                                   3845 ;	ecen4330lab7.c:1067: LCD_string_write("\n   Invalid\n\n");
      000D8F 90r05r10         [24] 3846 	mov	dptr,#___str_2
      000D92 75 F0 80         [24] 3847 	mov	b,#0x80
      000D95 12r09rC5         [24] 3848 	lcall	_LCD_string_write
                                   3849 ;	ecen4330lab7.c:1068: LCD_string_write("    Input");
      000D98 90r05r1E         [24] 3850 	mov	dptr,#___str_3
      000D9B 75 F0 80         [24] 3851 	mov	b,#0x80
      000D9E 12r09rC5         [24] 3852 	lcall	_LCD_string_write
                                   3853 ;	ecen4330lab7.c:1071: delay(200);
      000DA1 90 00 C8         [24] 3854 	mov	dptr,#0x00c8
      000DA4 12r00r25         [24] 3855 	lcall	_delay
                                   3856 ;	ecen4330lab7.c:1072: resetLCD();
                                   3857 ;	ecen4330lab7.c:1073: }
      000DA7 02r0Dr59         [24] 3858 	ljmp	_resetLCD
                                   3859 ;------------------------------------------------------------
                                   3860 ;Allocation info for local variables in function 'inputRead16'
                                   3861 ;------------------------------------------------------------
                                   3862 ;	ecen4330lab7.c:1084: void inputRead16(){
                                   3863 ;	-----------------------------------------
                                   3864 ;	 function inputRead16
                                   3865 ;	-----------------------------------------
      000DAA                       3866 _inputRead16:
                                   3867 ;	ecen4330lab7.c:1085: input16 = 0x0000;
      000DAA E4               [12] 3868 	clr	a
      000DAB F5*17            [12] 3869 	mov	_input16,a
      000DAD F5*18            [12] 3870 	mov	(_input16 + 1),a
                                   3871 ;	ecen4330lab7.c:1087: setTextColor(WHITE, BLACK);
      000DAF F5*00            [12] 3872 	mov	_setTextColor_PARM_2,a
      000DB1 F5*01            [12] 3873 	mov	(_setTextColor_PARM_2 + 1),a
      000DB3 90 FF FF         [24] 3874 	mov	dptr,#0xffff
      000DB6 12r02rD6         [24] 3875 	lcall	_setTextColor
                                   3876 ;	ecen4330lab7.c:1090: key = keyDetect();
      000DB9 12r0Ar04         [24] 3877 	lcall	_keyDetect
      000DBC 85 82*16         [24] 3878 	mov	_key,dpl
                                   3879 ;	ecen4330lab7.c:1091: setTextColor(WHITE, BLACK);
      000DBF E4               [12] 3880 	clr	a
      000DC0 F5*00            [12] 3881 	mov	_setTextColor_PARM_2,a
      000DC2 F5*01            [12] 3882 	mov	(_setTextColor_PARM_2 + 1),a
      000DC4 90 FF FF         [24] 3883 	mov	dptr,#0xffff
      000DC7 12r02rD6         [24] 3884 	lcall	_setTextColor
                                   3885 ;	ecen4330lab7.c:1092: write(key);
      000DCA 85*16 82         [24] 3886 	mov	dpl,_key
      000DCD 12r09r5F         [24] 3887 	lcall	_write
                                   3888 ;	ecen4330lab7.c:1093: input16 |= (ASCIItoHEX(key) << 12);
      000DD0 85*16 82         [24] 3889 	mov	dpl,_key
      000DD3 12r0Br1D         [24] 3890 	lcall	_ASCIItoHEX
      000DD6 AF 82            [24] 3891 	mov	r7,dpl
      000DD8 EF               [12] 3892 	mov	a,r7
      000DD9 C4               [12] 3893 	swap	a
      000DDA 54 F0            [12] 3894 	anl	a,#0xf0
      000DDC FE               [12] 3895 	mov	r6,a
      000DDD E4               [12] 3896 	clr	a
      000DDE 42*17            [12] 3897 	orl	_input16,a
      000DE0 EE               [12] 3898 	mov	a,r6
      000DE1 42*18            [12] 3899 	orl	(_input16 + 1),a
                                   3900 ;	ecen4330lab7.c:1095: key = keyDetect();
      000DE3 12r0Ar04         [24] 3901 	lcall	_keyDetect
      000DE6 85 82*16         [24] 3902 	mov	_key,dpl
                                   3903 ;	ecen4330lab7.c:1096: setTextColor(WHITE, BLACK);
      000DE9 E4               [12] 3904 	clr	a
      000DEA F5*00            [12] 3905 	mov	_setTextColor_PARM_2,a
      000DEC F5*01            [12] 3906 	mov	(_setTextColor_PARM_2 + 1),a
      000DEE 90 FF FF         [24] 3907 	mov	dptr,#0xffff
      000DF1 12r02rD6         [24] 3908 	lcall	_setTextColor
                                   3909 ;	ecen4330lab7.c:1097: write(key);
      000DF4 85*16 82         [24] 3910 	mov	dpl,_key
      000DF7 12r09r5F         [24] 3911 	lcall	_write
                                   3912 ;	ecen4330lab7.c:1098: input16 |= (ASCIItoHEX(key) << 8);
      000DFA 85*16 82         [24] 3913 	mov	dpl,_key
      000DFD 12r0Br1D         [24] 3914 	lcall	_ASCIItoHEX
      000E00 AF 82            [24] 3915 	mov	r7,dpl
      000E02 8F 06            [24] 3916 	mov	ar6,r7
      000E04 E4               [12] 3917 	clr	a
      000E05 42*17            [12] 3918 	orl	_input16,a
      000E07 EE               [12] 3919 	mov	a,r6
      000E08 42*18            [12] 3920 	orl	(_input16 + 1),a
                                   3921 ;	ecen4330lab7.c:1100: key = keyDetect();
      000E0A 12r0Ar04         [24] 3922 	lcall	_keyDetect
      000E0D 85 82*16         [24] 3923 	mov	_key,dpl
                                   3924 ;	ecen4330lab7.c:1101: setTextColor(WHITE, BLACK);
      000E10 E4               [12] 3925 	clr	a
      000E11 F5*00            [12] 3926 	mov	_setTextColor_PARM_2,a
      000E13 F5*01            [12] 3927 	mov	(_setTextColor_PARM_2 + 1),a
      000E15 90 FF FF         [24] 3928 	mov	dptr,#0xffff
      000E18 12r02rD6         [24] 3929 	lcall	_setTextColor
                                   3930 ;	ecen4330lab7.c:1102: write(key);
      000E1B 85*16 82         [24] 3931 	mov	dpl,_key
      000E1E 12r09r5F         [24] 3932 	lcall	_write
                                   3933 ;	ecen4330lab7.c:1103: input16 |= (ASCIItoHEX(key) << 4);
      000E21 85*16 82         [24] 3934 	mov	dpl,_key
      000E24 12r0Br1D         [24] 3935 	lcall	_ASCIItoHEX
      000E27 AF 82            [24] 3936 	mov	r7,dpl
      000E29 E4               [12] 3937 	clr	a
      000E2A C4               [12] 3938 	swap	a
      000E2B 54 F0            [12] 3939 	anl	a,#0xf0
      000E2D CF               [12] 3940 	xch	a,r7
      000E2E C4               [12] 3941 	swap	a
      000E2F CF               [12] 3942 	xch	a,r7
      000E30 6F               [12] 3943 	xrl	a,r7
      000E31 CF               [12] 3944 	xch	a,r7
      000E32 54 F0            [12] 3945 	anl	a,#0xf0
      000E34 CF               [12] 3946 	xch	a,r7
      000E35 6F               [12] 3947 	xrl	a,r7
      000E36 FE               [12] 3948 	mov	r6,a
      000E37 EF               [12] 3949 	mov	a,r7
      000E38 42*17            [12] 3950 	orl	_input16,a
      000E3A EE               [12] 3951 	mov	a,r6
      000E3B 42*18            [12] 3952 	orl	(_input16 + 1),a
                                   3953 ;	ecen4330lab7.c:1105: key = keyDetect();
      000E3D 12r0Ar04         [24] 3954 	lcall	_keyDetect
      000E40 85 82*16         [24] 3955 	mov	_key,dpl
                                   3956 ;	ecen4330lab7.c:1106: setTextColor(WHITE, BLACK);
      000E43 E4               [12] 3957 	clr	a
      000E44 F5*00            [12] 3958 	mov	_setTextColor_PARM_2,a
      000E46 F5*01            [12] 3959 	mov	(_setTextColor_PARM_2 + 1),a
      000E48 90 FF FF         [24] 3960 	mov	dptr,#0xffff
      000E4B 12r02rD6         [24] 3961 	lcall	_setTextColor
                                   3962 ;	ecen4330lab7.c:1107: write(key);
      000E4E 85*16 82         [24] 3963 	mov	dpl,_key
      000E51 12r09r5F         [24] 3964 	lcall	_write
                                   3965 ;	ecen4330lab7.c:1108: input16 |= ASCIItoHEX(key);
      000E54 85*16 82         [24] 3966 	mov	dpl,_key
      000E57 12r0Br1D         [24] 3967 	lcall	_ASCIItoHEX
      000E5A AF 82            [24] 3968 	mov	r7,dpl
      000E5C 7E 00            [12] 3969 	mov	r6,#0x00
      000E5E EF               [12] 3970 	mov	a,r7
      000E5F 42*17            [12] 3971 	orl	_input16,a
      000E61 EE               [12] 3972 	mov	a,r6
      000E62 42*18            [12] 3973 	orl	(_input16 + 1),a
                                   3974 ;	ecen4330lab7.c:1109: }
      000E64 22               [24] 3975 	ret
                                   3976 ;------------------------------------------------------------
                                   3977 ;Allocation info for local variables in function 'inputRead8'
                                   3978 ;------------------------------------------------------------
                                   3979 ;	ecen4330lab7.c:1119: void inputRead8(){
                                   3980 ;	-----------------------------------------
                                   3981 ;	 function inputRead8
                                   3982 ;	-----------------------------------------
      000E65                       3983 _inputRead8:
                                   3984 ;	ecen4330lab7.c:1120: setTextColor(WHITE, BLACK);
      000E65 E4               [12] 3985 	clr	a
      000E66 F5*00            [12] 3986 	mov	_setTextColor_PARM_2,a
      000E68 F5*01            [12] 3987 	mov	(_setTextColor_PARM_2 + 1),a
      000E6A 90 FF FF         [24] 3988 	mov	dptr,#0xffff
      000E6D 12r02rD6         [24] 3989 	lcall	_setTextColor
                                   3990 ;	ecen4330lab7.c:1122: input8 = 0x00;
      000E70 75*19 00         [24] 3991 	mov	_input8,#0x00
                                   3992 ;	ecen4330lab7.c:1124: key = keyDetect();
      000E73 12r0Ar04         [24] 3993 	lcall	_keyDetect
      000E76 85 82*16         [24] 3994 	mov	_key,dpl
                                   3995 ;	ecen4330lab7.c:1125: setTextColor(WHITE, BLACK);
      000E79 E4               [12] 3996 	clr	a
      000E7A F5*00            [12] 3997 	mov	_setTextColor_PARM_2,a
      000E7C F5*01            [12] 3998 	mov	(_setTextColor_PARM_2 + 1),a
      000E7E 90 FF FF         [24] 3999 	mov	dptr,#0xffff
      000E81 12r02rD6         [24] 4000 	lcall	_setTextColor
                                   4001 ;	ecen4330lab7.c:1126: write(key);
      000E84 85*16 82         [24] 4002 	mov	dpl,_key
      000E87 12r09r5F         [24] 4003 	lcall	_write
                                   4004 ;	ecen4330lab7.c:1127: input8 |= (ASCIItoHEX(key) << 4);
      000E8A 85*16 82         [24] 4005 	mov	dpl,_key
      000E8D 12r0Br1D         [24] 4006 	lcall	_ASCIItoHEX
      000E90 E5 82            [12] 4007 	mov	a,dpl
      000E92 C4               [12] 4008 	swap	a
      000E93 54 F0            [12] 4009 	anl	a,#0xf0
      000E95 42*19            [12] 4010 	orl	_input8,a
                                   4011 ;	ecen4330lab7.c:1129: key = keyDetect();
      000E97 12r0Ar04         [24] 4012 	lcall	_keyDetect
      000E9A 85 82*16         [24] 4013 	mov	_key,dpl
                                   4014 ;	ecen4330lab7.c:1130: setTextColor(WHITE, BLACK);
      000E9D E4               [12] 4015 	clr	a
      000E9E F5*00            [12] 4016 	mov	_setTextColor_PARM_2,a
      000EA0 F5*01            [12] 4017 	mov	(_setTextColor_PARM_2 + 1),a
      000EA2 90 FF FF         [24] 4018 	mov	dptr,#0xffff
      000EA5 12r02rD6         [24] 4019 	lcall	_setTextColor
                                   4020 ;	ecen4330lab7.c:1131: write(key);
      000EA8 85*16 82         [24] 4021 	mov	dpl,_key
      000EAB 12r09r5F         [24] 4022 	lcall	_write
                                   4023 ;	ecen4330lab7.c:1132: input8 |= ASCIItoHEX(key);
      000EAE 85*16 82         [24] 4024 	mov	dpl,_key
      000EB1 12r0Br1D         [24] 4025 	lcall	_ASCIItoHEX
      000EB4 E5 82            [12] 4026 	mov	a,dpl
      000EB6 42*19            [12] 4027 	orl	_input8,a
                                   4028 ;	ecen4330lab7.c:1133: }
      000EB8 22               [24] 4029 	ret
                                   4030 ;------------------------------------------------------------
                                   4031 ;Allocation info for local variables in function 'inputDataType'
                                   4032 ;------------------------------------------------------------
                                   4033 ;	ecen4330lab7.c:1152: void inputDataType(){
                                   4034 ;	-----------------------------------------
                                   4035 ;	 function inputDataType
                                   4036 ;	-----------------------------------------
      000EB9                       4037 _inputDataType:
                                   4038 ;	ecen4330lab7.c:1153: validInput = 0;
      000EB9 75*1D 00         [24] 4039 	mov	_validInput,#0x00
                                   4040 ;	ecen4330lab7.c:1154: dataType = 0;
      000EBC 75*1A 00         [24] 4041 	mov	_dataType,#0x00
                                   4042 ;	ecen4330lab7.c:1156: do
      000EBF                       4043 00106$:
                                   4044 ;	ecen4330lab7.c:1159: resetLCD();
      000EBF 12r0Dr59         [24] 4045 	lcall	_resetLCD
                                   4046 ;	ecen4330lab7.c:1160: setTextColor(WHITE, BLACK);
      000EC2 E4               [12] 4047 	clr	a
      000EC3 F5*00            [12] 4048 	mov	_setTextColor_PARM_2,a
      000EC5 F5*01            [12] 4049 	mov	(_setTextColor_PARM_2 + 1),a
      000EC7 90 FF FF         [24] 4050 	mov	dptr,#0xffff
      000ECA 12r02rD6         [24] 4051 	lcall	_setTextColor
                                   4052 ;	ecen4330lab7.c:1161: LCD_string_write("\nSelect Data\nType:\n\n");
      000ECD 90r05r28         [24] 4053 	mov	dptr,#___str_4
      000ED0 75 F0 80         [24] 4054 	mov	b,#0x80
      000ED3 12r09rC5         [24] 4055 	lcall	_LCD_string_write
                                   4056 ;	ecen4330lab7.c:1162: LCD_string_write("(1) Byte\n");
      000ED6 90r05r3D         [24] 4057 	mov	dptr,#___str_5
      000ED9 75 F0 80         [24] 4058 	mov	b,#0x80
      000EDC 12r09rC5         [24] 4059 	lcall	_LCD_string_write
                                   4060 ;	ecen4330lab7.c:1163: LCD_string_write("(2) Word\n");
      000EDF 90r05r47         [24] 4061 	mov	dptr,#___str_6
      000EE2 75 F0 80         [24] 4062 	mov	b,#0x80
      000EE5 12r09rC5         [24] 4063 	lcall	_LCD_string_write
                                   4064 ;	ecen4330lab7.c:1164: LCD_string_write("(3) Double\n    Word\n\n  _");
      000EE8 90r05r51         [24] 4065 	mov	dptr,#___str_7
      000EEB 75 F0 80         [24] 4066 	mov	b,#0x80
      000EEE 12r09rC5         [24] 4067 	lcall	_LCD_string_write
                                   4068 ;	ecen4330lab7.c:1165: cursor_x -= textsize * 6;
      000EF1 85*0C*00         [24] 4069 	mov	__mulint_PARM_2,_textsize
      000EF4 75*01 00         [24] 4070 	mov	(__mulint_PARM_2 + 1),#0x00
      000EF7 90 00 06         [24] 4071 	mov	dptr,#0x0006
      000EFA 12r00r00         [24] 4072 	lcall	__mulint
      000EFD AE 82            [24] 4073 	mov	r6,dpl
      000EFF AF 83            [24] 4074 	mov	r7,dph
      000F01 E5*08            [12] 4075 	mov	a,_cursor_x
      000F03 C3               [12] 4076 	clr	c
      000F04 9E               [12] 4077 	subb	a,r6
      000F05 F5*08            [12] 4078 	mov	_cursor_x,a
      000F07 E5*09            [12] 4079 	mov	a,(_cursor_x + 1)
      000F09 9F               [12] 4080 	subb	a,r7
      000F0A F5*09            [12] 4081 	mov	(_cursor_x + 1),a
                                   4082 ;	ecen4330lab7.c:1166: x = cursor_x;
      000F0C 85*08*3B         [24] 4083 	mov	_x,_cursor_x
                                   4084 ;	ecen4330lab7.c:1167: y = cursor_y;
      000F0F 85*0A*3C         [24] 4085 	mov	_y,_cursor_y
                                   4086 ;	ecen4330lab7.c:1168: ts = textsize;
      000F12 85*0C*3D         [24] 4087 	mov	_ts,_textsize
                                   4088 ;	ecen4330lab7.c:1171: setTextColor(WHITE, BLACK);
      000F15 E4               [12] 4089 	clr	a
      000F16 F5*00            [12] 4090 	mov	_setTextColor_PARM_2,a
      000F18 F5*01            [12] 4091 	mov	(_setTextColor_PARM_2 + 1),a
      000F1A 90 FF FF         [24] 4092 	mov	dptr,#0xffff
      000F1D 12r02rD6         [24] 4093 	lcall	_setTextColor
                                   4094 ;	ecen4330lab7.c:1172: key = keyDetect();
      000F20 12r0Ar04         [24] 4095 	lcall	_keyDetect
      000F23 85 82*16         [24] 4096 	mov	_key,dpl
                                   4097 ;	ecen4330lab7.c:1173: cursor_x = x;
      000F26 85*3B*08         [24] 4098 	mov	_cursor_x,_x
      000F29 75*09 00         [24] 4099 	mov	(_cursor_x + 1),#0x00
                                   4100 ;	ecen4330lab7.c:1174: cursor_y = y;
      000F2C 85*3C*0A         [24] 4101 	mov	_cursor_y,_y
      000F2F 75*0B 00         [24] 4102 	mov	(_cursor_y + 1),#0x00
                                   4103 ;	ecen4330lab7.c:1175: textsize = ts;
      000F32 85*3D*0C         [24] 4104 	mov	_textsize,_ts
                                   4105 ;	ecen4330lab7.c:1176: write(key);
      000F35 85*16 82         [24] 4106 	mov	dpl,_key
      000F38 12r09r5F         [24] 4107 	lcall	_write
                                   4108 ;	ecen4330lab7.c:1178: switch (key)
      000F3B 74 31            [12] 4109 	mov	a,#0x31
      000F3D B5*16 02         [24] 4110 	cjne	a,_key,00127$
      000F40 80 0E            [24] 4111 	sjmp	00101$
      000F42                       4112 00127$:
      000F42 74 32            [12] 4113 	mov	a,#0x32
      000F44 B5*16 02         [24] 4114 	cjne	a,_key,00128$
      000F47 80 0F            [24] 4115 	sjmp	00102$
      000F49                       4116 00128$:
      000F49 74 33            [12] 4117 	mov	a,#0x33
                                   4118 ;	ecen4330lab7.c:1181: case '1':
      000F4B B5*16 1A         [24] 4119 	cjne	a,_key,00104$
      000F4E 80 10            [24] 4120 	sjmp	00103$
      000F50                       4121 00101$:
                                   4122 ;	ecen4330lab7.c:1182: dataType = 1;
      000F50 75*1A 01         [24] 4123 	mov	_dataType,#0x01
                                   4124 ;	ecen4330lab7.c:1183: validInput = 1;
      000F53 75*1D 01         [24] 4125 	mov	_validInput,#0x01
                                   4126 ;	ecen4330lab7.c:1184: break;
                                   4127 ;	ecen4330lab7.c:1187: case '2':
      000F56 80 16            [24] 4128 	sjmp	00107$
      000F58                       4129 00102$:
                                   4130 ;	ecen4330lab7.c:1188: dataType = 2;
      000F58 75*1A 02         [24] 4131 	mov	_dataType,#0x02
                                   4132 ;	ecen4330lab7.c:1189: validInput = 1;
      000F5B 75*1D 01         [24] 4133 	mov	_validInput,#0x01
                                   4134 ;	ecen4330lab7.c:1190: break;
                                   4135 ;	ecen4330lab7.c:1193: case '3':
      000F5E 80 0E            [24] 4136 	sjmp	00107$
      000F60                       4137 00103$:
                                   4138 ;	ecen4330lab7.c:1194: dataType = 4;
      000F60 75*1A 04         [24] 4139 	mov	_dataType,#0x04
                                   4140 ;	ecen4330lab7.c:1195: validInput = 1;
      000F63 75*1D 01         [24] 4141 	mov	_validInput,#0x01
                                   4142 ;	ecen4330lab7.c:1196: break;
                                   4143 ;	ecen4330lab7.c:1199: default:
      000F66 80 06            [24] 4144 	sjmp	00107$
      000F68                       4145 00104$:
                                   4146 ;	ecen4330lab7.c:1200: invalidInput();
      000F68 12r0Dr81         [24] 4147 	lcall	_invalidInput
                                   4148 ;	ecen4330lab7.c:1201: validInput = 0;
      000F6B 75*1D 00         [24] 4149 	mov	_validInput,#0x00
                                   4150 ;	ecen4330lab7.c:1203: }
      000F6E                       4151 00107$:
                                   4152 ;	ecen4330lab7.c:1204: } while (validInput == 0);
      000F6E E5*1D            [12] 4153 	mov	a,_validInput
      000F70 70 03            [24] 4154 	jnz	00130$
      000F72 02r0ErBF         [24] 4155 	ljmp	00106$
      000F75                       4156 00130$:
                                   4157 ;	ecen4330lab7.c:1205: }
      000F75 22               [24] 4158 	ret
                                   4159 ;------------------------------------------------------------
                                   4160 ;Allocation info for local variables in function 'inputDataSize'
                                   4161 ;------------------------------------------------------------
                                   4162 ;	ecen4330lab7.c:1215: void inputDataSize(){
                                   4163 ;	-----------------------------------------
                                   4164 ;	 function inputDataSize
                                   4165 ;	-----------------------------------------
      000F76                       4166 _inputDataSize:
                                   4167 ;	ecen4330lab7.c:1216: validInput = 0;
                                   4168 ;	ecen4330lab7.c:1217: dataSize = 0x0000;
      000F76 E4               [12] 4169 	clr	a
      000F77 F5*1D            [12] 4170 	mov	_validInput,a
      000F79 F5*1B            [12] 4171 	mov	_dataSize,a
      000F7B F5*1C            [12] 4172 	mov	(_dataSize + 1),a
                                   4173 ;	ecen4330lab7.c:1219: do
      000F7D                       4174 00104$:
                                   4175 ;	ecen4330lab7.c:1222: resetLCD();
      000F7D 12r0Dr59         [24] 4176 	lcall	_resetLCD
                                   4177 ;	ecen4330lab7.c:1223: LCD_string_write("\nEnter Data\nSize:\n\n  0x____");
      000F80 90r05r6A         [24] 4178 	mov	dptr,#___str_8
      000F83 75 F0 80         [24] 4179 	mov	b,#0x80
      000F86 12r09rC5         [24] 4180 	lcall	_LCD_string_write
                                   4181 ;	ecen4330lab7.c:1224: cursor_x -= 4 * textsize * 6;
      000F89 E5*0C            [12] 4182 	mov	a,_textsize
      000F8B 75 F0 18         [24] 4183 	mov	b,#0x18
      000F8E A4               [48] 4184 	mul	ab
      000F8F FE               [12] 4185 	mov	r6,a
      000F90 AF F0            [24] 4186 	mov	r7,b
      000F92 E5*08            [12] 4187 	mov	a,_cursor_x
      000F94 C3               [12] 4188 	clr	c
      000F95 9E               [12] 4189 	subb	a,r6
      000F96 F5*08            [12] 4190 	mov	_cursor_x,a
      000F98 E5*09            [12] 4191 	mov	a,(_cursor_x + 1)
      000F9A 9F               [12] 4192 	subb	a,r7
      000F9B F5*09            [12] 4193 	mov	(_cursor_x + 1),a
                                   4194 ;	ecen4330lab7.c:1225: x = cursor_x;
      000F9D 85*08*3B         [24] 4195 	mov	_x,_cursor_x
                                   4196 ;	ecen4330lab7.c:1226: y = cursor_y;
      000FA0 85*0A*3C         [24] 4197 	mov	_y,_cursor_y
                                   4198 ;	ecen4330lab7.c:1227: ts = textsize;
      000FA3 85*0C*3D         [24] 4199 	mov	_ts,_textsize
                                   4200 ;	ecen4330lab7.c:1229: input16 = 0x0000;
      000FA6 E4               [12] 4201 	clr	a
      000FA7 F5*17            [12] 4202 	mov	_input16,a
      000FA9 F5*18            [12] 4203 	mov	(_input16 + 1),a
                                   4204 ;	ecen4330lab7.c:1231: setTextColor(WHITE, BLACK);
      000FAB F5*00            [12] 4205 	mov	_setTextColor_PARM_2,a
      000FAD F5*01            [12] 4206 	mov	(_setTextColor_PARM_2 + 1),a
      000FAF 90 FF FF         [24] 4207 	mov	dptr,#0xffff
      000FB2 12r02rD6         [24] 4208 	lcall	_setTextColor
                                   4209 ;	ecen4330lab7.c:1234: key = keyDetect();
      000FB5 12r0Ar04         [24] 4210 	lcall	_keyDetect
      000FB8 85 82*16         [24] 4211 	mov	_key,dpl
                                   4212 ;	ecen4330lab7.c:1235: cursor_x = x;
      000FBB 85*3B*08         [24] 4213 	mov	_cursor_x,_x
      000FBE 75*09 00         [24] 4214 	mov	(_cursor_x + 1),#0x00
                                   4215 ;	ecen4330lab7.c:1236: cursor_y = y;
      000FC1 85*3C*0A         [24] 4216 	mov	_cursor_y,_y
      000FC4 75*0B 00         [24] 4217 	mov	(_cursor_y + 1),#0x00
                                   4218 ;	ecen4330lab7.c:1237: textsize = ts;
      000FC7 85*3D*0C         [24] 4219 	mov	_textsize,_ts
                                   4220 ;	ecen4330lab7.c:1238: write(key);
      000FCA 85*16 82         [24] 4221 	mov	dpl,_key
      000FCD 12r09r5F         [24] 4222 	lcall	_write
                                   4223 ;	ecen4330lab7.c:1239: x = cursor_x;
      000FD0 85*08*3B         [24] 4224 	mov	_x,_cursor_x
                                   4225 ;	ecen4330lab7.c:1240: y = cursor_y;
      000FD3 85*0A*3C         [24] 4226 	mov	_y,_cursor_y
                                   4227 ;	ecen4330lab7.c:1241: ts = textsize;
      000FD6 85*0C*3D         [24] 4228 	mov	_ts,_textsize
                                   4229 ;	ecen4330lab7.c:1242: input16 |= (ASCIItoHEX(key) << 12);
      000FD9 85*16 82         [24] 4230 	mov	dpl,_key
      000FDC 12r0Br1D         [24] 4231 	lcall	_ASCIItoHEX
      000FDF AF 82            [24] 4232 	mov	r7,dpl
      000FE1 EF               [12] 4233 	mov	a,r7
      000FE2 C4               [12] 4234 	swap	a
      000FE3 54 F0            [12] 4235 	anl	a,#0xf0
      000FE5 FE               [12] 4236 	mov	r6,a
      000FE6 E4               [12] 4237 	clr	a
      000FE7 42*17            [12] 4238 	orl	_input16,a
      000FE9 EE               [12] 4239 	mov	a,r6
      000FEA 42*18            [12] 4240 	orl	(_input16 + 1),a
                                   4241 ;	ecen4330lab7.c:1244: key = keyDetect();
      000FEC 12r0Ar04         [24] 4242 	lcall	_keyDetect
      000FEF 85 82*16         [24] 4243 	mov	_key,dpl
                                   4244 ;	ecen4330lab7.c:1245: cursor_x = x;
      000FF2 85*3B*08         [24] 4245 	mov	_cursor_x,_x
      000FF5 75*09 00         [24] 4246 	mov	(_cursor_x + 1),#0x00
                                   4247 ;	ecen4330lab7.c:1246: cursor_y = y;
      000FF8 85*3C*0A         [24] 4248 	mov	_cursor_y,_y
      000FFB 75*0B 00         [24] 4249 	mov	(_cursor_y + 1),#0x00
                                   4250 ;	ecen4330lab7.c:1247: textsize = ts;
      000FFE 85*3D*0C         [24] 4251 	mov	_textsize,_ts
                                   4252 ;	ecen4330lab7.c:1248: write(key);
      001001 85*16 82         [24] 4253 	mov	dpl,_key
      001004 12r09r5F         [24] 4254 	lcall	_write
                                   4255 ;	ecen4330lab7.c:1249: x = cursor_x;
      001007 85*08*3B         [24] 4256 	mov	_x,_cursor_x
                                   4257 ;	ecen4330lab7.c:1250: y = cursor_y;
      00100A 85*0A*3C         [24] 4258 	mov	_y,_cursor_y
                                   4259 ;	ecen4330lab7.c:1251: ts = textsize;
      00100D 85*0C*3D         [24] 4260 	mov	_ts,_textsize
                                   4261 ;	ecen4330lab7.c:1252: input16 |= (ASCIItoHEX(key) << 8);
      001010 85*16 82         [24] 4262 	mov	dpl,_key
      001013 12r0Br1D         [24] 4263 	lcall	_ASCIItoHEX
      001016 AF 82            [24] 4264 	mov	r7,dpl
      001018 8F 06            [24] 4265 	mov	ar6,r7
      00101A E4               [12] 4266 	clr	a
      00101B 42*17            [12] 4267 	orl	_input16,a
      00101D EE               [12] 4268 	mov	a,r6
      00101E 42*18            [12] 4269 	orl	(_input16 + 1),a
                                   4270 ;	ecen4330lab7.c:1254: key = keyDetect();
      001020 12r0Ar04         [24] 4271 	lcall	_keyDetect
      001023 85 82*16         [24] 4272 	mov	_key,dpl
                                   4273 ;	ecen4330lab7.c:1255: cursor_x = x;
      001026 85*3B*08         [24] 4274 	mov	_cursor_x,_x
      001029 75*09 00         [24] 4275 	mov	(_cursor_x + 1),#0x00
                                   4276 ;	ecen4330lab7.c:1256: cursor_y = y;
      00102C 85*3C*0A         [24] 4277 	mov	_cursor_y,_y
      00102F 75*0B 00         [24] 4278 	mov	(_cursor_y + 1),#0x00
                                   4279 ;	ecen4330lab7.c:1257: textsize = ts;
      001032 85*3D*0C         [24] 4280 	mov	_textsize,_ts
                                   4281 ;	ecen4330lab7.c:1258: write(key);
      001035 85*16 82         [24] 4282 	mov	dpl,_key
      001038 12r09r5F         [24] 4283 	lcall	_write
                                   4284 ;	ecen4330lab7.c:1259: x = cursor_x;
      00103B 85*08*3B         [24] 4285 	mov	_x,_cursor_x
                                   4286 ;	ecen4330lab7.c:1260: y = cursor_y;
      00103E 85*0A*3C         [24] 4287 	mov	_y,_cursor_y
                                   4288 ;	ecen4330lab7.c:1261: ts = textsize;
      001041 85*0C*3D         [24] 4289 	mov	_ts,_textsize
                                   4290 ;	ecen4330lab7.c:1262: input16 |= (ASCIItoHEX(key) << 4);
      001044 85*16 82         [24] 4291 	mov	dpl,_key
      001047 12r0Br1D         [24] 4292 	lcall	_ASCIItoHEX
      00104A AF 82            [24] 4293 	mov	r7,dpl
      00104C E4               [12] 4294 	clr	a
      00104D C4               [12] 4295 	swap	a
      00104E 54 F0            [12] 4296 	anl	a,#0xf0
      001050 CF               [12] 4297 	xch	a,r7
      001051 C4               [12] 4298 	swap	a
      001052 CF               [12] 4299 	xch	a,r7
      001053 6F               [12] 4300 	xrl	a,r7
      001054 CF               [12] 4301 	xch	a,r7
      001055 54 F0            [12] 4302 	anl	a,#0xf0
      001057 CF               [12] 4303 	xch	a,r7
      001058 6F               [12] 4304 	xrl	a,r7
      001059 FE               [12] 4305 	mov	r6,a
      00105A EF               [12] 4306 	mov	a,r7
      00105B 42*17            [12] 4307 	orl	_input16,a
      00105D EE               [12] 4308 	mov	a,r6
      00105E 42*18            [12] 4309 	orl	(_input16 + 1),a
                                   4310 ;	ecen4330lab7.c:1264: key = keyDetect();
      001060 12r0Ar04         [24] 4311 	lcall	_keyDetect
      001063 85 82*16         [24] 4312 	mov	_key,dpl
                                   4313 ;	ecen4330lab7.c:1265: cursor_x = x;
      001066 85*3B*08         [24] 4314 	mov	_cursor_x,_x
      001069 75*09 00         [24] 4315 	mov	(_cursor_x + 1),#0x00
                                   4316 ;	ecen4330lab7.c:1266: cursor_y = y;
      00106C 85*3C*0A         [24] 4317 	mov	_cursor_y,_y
      00106F 75*0B 00         [24] 4318 	mov	(_cursor_y + 1),#0x00
                                   4319 ;	ecen4330lab7.c:1267: textsize = ts;
      001072 85*3D*0C         [24] 4320 	mov	_textsize,_ts
                                   4321 ;	ecen4330lab7.c:1268: write(key);
      001075 85*16 82         [24] 4322 	mov	dpl,_key
      001078 12r09r5F         [24] 4323 	lcall	_write
                                   4324 ;	ecen4330lab7.c:1269: x = cursor_x;
      00107B 85*08*3B         [24] 4325 	mov	_x,_cursor_x
                                   4326 ;	ecen4330lab7.c:1270: y = cursor_y;
      00107E 85*0A*3C         [24] 4327 	mov	_y,_cursor_y
                                   4328 ;	ecen4330lab7.c:1271: ts = textsize;
      001081 85*0C*3D         [24] 4329 	mov	_ts,_textsize
                                   4330 ;	ecen4330lab7.c:1272: input16 |= ASCIItoHEX(key);
      001084 85*16 82         [24] 4331 	mov	dpl,_key
      001087 12r0Br1D         [24] 4332 	lcall	_ASCIItoHEX
      00108A AF 82            [24] 4333 	mov	r7,dpl
      00108C 7E 00            [12] 4334 	mov	r6,#0x00
      00108E EF               [12] 4335 	mov	a,r7
      00108F 42*17            [12] 4336 	orl	_input16,a
      001091 EE               [12] 4337 	mov	a,r6
      001092 42*18            [12] 4338 	orl	(_input16 + 1),a
                                   4339 ;	ecen4330lab7.c:1273: dataSize = input16;
      001094 85*17*1B         [24] 4340 	mov	_dataSize,_input16
      001097 85*18*1C         [24] 4341 	mov	(_dataSize + 1),(_input16 + 1)
                                   4342 ;	ecen4330lab7.c:1276: if(dataSize == 0x0000){
      00109A E5*1B            [12] 4343 	mov	a,_dataSize
      00109C 45*1C            [12] 4344 	orl	a,(_dataSize + 1)
      00109E 70 09            [24] 4345 	jnz	00102$
                                   4346 ;	ecen4330lab7.c:1277: invalidInput();
      0010A0 12r0Dr81         [24] 4347 	lcall	_invalidInput
                                   4348 ;	ecen4330lab7.c:1278: validInput = 0;
      0010A3 75*1D 00         [24] 4349 	mov	_validInput,#0x00
      0010A6 02r0Fr7D         [24] 4350 	ljmp	00104$
      0010A9                       4351 00102$:
                                   4352 ;	ecen4330lab7.c:1281: validInput = 1;
      0010A9 75*1D 01         [24] 4353 	mov	_validInput,#0x01
                                   4354 ;	ecen4330lab7.c:1283: } while (validInput == 0);
                                   4355 ;	ecen4330lab7.c:1284: }
      0010AC 22               [24] 4356 	ret
                                   4357 ;------------------------------------------------------------
                                   4358 ;Allocation info for local variables in function 'RAM_CHECK'
                                   4359 ;------------------------------------------------------------
                                   4360 ;i                         Allocated to registers r6 r7 
                                   4361 ;------------------------------------------------------------
                                   4362 ;	ecen4330lab7.c:1295: void RAM_CHECK(){
                                   4363 ;	-----------------------------------------
                                   4364 ;	 function RAM_CHECK
                                   4365 ;	-----------------------------------------
      0010AD                       4366 _RAM_CHECK:
                                   4367 ;	ecen4330lab7.c:1297: data = 0;
      0010AD 75*20 00         [24] 4368 	mov	_data,#0x00
                                   4369 ;	ecen4330lab7.c:1298: dataEnd = 0;
      0010B0 75*1E 00         [24] 4370 	mov	_dataEnd,#0x00
                                   4371 ;	ecen4330lab7.c:1301: resetLCD();
      0010B3 12r0Dr59         [24] 4372 	lcall	_resetLCD
                                   4373 ;	ecen4330lab7.c:1302: LCD_string_write("\nWriting 0x55\nto all\nexternal RAM\nlocations.\n\n");
      0010B6 90r05r86         [24] 4374 	mov	dptr,#___str_9
      0010B9 75 F0 80         [24] 4375 	mov	b,#0x80
      0010BC 12r09rC5         [24] 4376 	lcall	_LCD_string_write
                                   4377 ;	ecen4330lab7.c:1303: testRAM(RAMcheckVal1);
      0010BF 75 82 55         [24] 4378 	mov	dpl,#0x55
      0010C2 12r0Dr27         [24] 4379 	lcall	_testRAM
                                   4380 ;	ecen4330lab7.c:1304: RAMwrite(0xFFFF, RAMcheckVal1);
      0010C5 75*00 55         [24] 4381 	mov	_RAMwrite_PARM_2,#0x55
      0010C8 90 FF FF         [24] 4382 	mov	dptr,#0xffff
      0010CB 12r0Dr17         [24] 4383 	lcall	_RAMwrite
                                   4384 ;	ecen4330lab7.c:1306: setTextColor(GREEN, BLACK);
      0010CE E4               [12] 4385 	clr	a
      0010CF F5*00            [12] 4386 	mov	_setTextColor_PARM_2,a
      0010D1 F5*01            [12] 4387 	mov	(_setTextColor_PARM_2 + 1),a
      0010D3 90 07 E0         [24] 4388 	mov	dptr,#0x07e0
      0010D6 12r02rD6         [24] 4389 	lcall	_setTextColor
                                   4390 ;	ecen4330lab7.c:1307: LCD_string_write("Write\ncomplete.\n");
      0010D9 90r05rB5         [24] 4391 	mov	dptr,#___str_10
      0010DC 75 F0 80         [24] 4392 	mov	b,#0x80
      0010DF 12r09rC5         [24] 4393 	lcall	_LCD_string_write
                                   4394 ;	ecen4330lab7.c:1308: delay(200);
      0010E2 90 00 C8         [24] 4395 	mov	dptr,#0x00c8
      0010E5 12r00r25         [24] 4396 	lcall	_delay
                                   4397 ;	ecen4330lab7.c:1311: resetLCD();
      0010E8 12r0Dr59         [24] 4398 	lcall	_resetLCD
                                   4399 ;	ecen4330lab7.c:1312: LCD_string_write("\nVerifying all\nRAM locations\nequal 0x55.\n\n");
      0010EB 90r05rC6         [24] 4400 	mov	dptr,#___str_11
      0010EE 75 F0 80         [24] 4401 	mov	b,#0x80
      0010F1 12r09rC5         [24] 4402 	lcall	_LCD_string_write
                                   4403 ;	ecen4330lab7.c:1314: do
      0010F4 7E 00            [12] 4404 	mov	r6,#0x00
      0010F6 7F 00            [12] 4405 	mov	r7,#0x00
      0010F8                       4406 00102$:
                                   4407 ;	ecen4330lab7.c:1316: data = RAMread(i);
      0010F8 8E 82            [24] 4408 	mov	dpl,r6
      0010FA 8F 83            [24] 4409 	mov	dph,r7
      0010FC C0 07            [24] 4410 	push	ar7
      0010FE C0 06            [24] 4411 	push	ar6
      001100 12r0Dr46         [24] 4412 	lcall	_RAMread
      001103 85 82*20         [24] 4413 	mov	_data,dpl
      001106 D0 06            [24] 4414 	pop	ar6
      001108 D0 07            [24] 4415 	pop	ar7
                                   4416 ;	ecen4330lab7.c:1317: i++;
      00110A 0E               [12] 4417 	inc	r6
      00110B BE 00 01         [24] 4418 	cjne	r6,#0x00,00163$
      00110E 0F               [12] 4419 	inc	r7
      00110F                       4420 00163$:
                                   4421 ;	ecen4330lab7.c:1318: } while (data == RAMcheckVal1 && i <= __END_RAM__);
      00110F 74 55            [12] 4422 	mov	a,#0x55
      001111 B5*20 04         [24] 4423 	cjne	a,_data,00164$
      001114 74 01            [12] 4424 	mov	a,#0x01
      001116 80 01            [24] 4425 	sjmp	00165$
      001118                       4426 00164$:
      001118 E4               [12] 4427 	clr	a
      001119                       4428 00165$:
      001119 FD               [12] 4429 	mov	r5,a
      00111A 60 09            [24] 4430 	jz	00129$
      00111C C3               [12] 4431 	clr	c
      00111D 74 FE            [12] 4432 	mov	a,#0xfe
      00111F 9E               [12] 4433 	subb	a,r6
      001120 74 FF            [12] 4434 	mov	a,#0xff
      001122 9F               [12] 4435 	subb	a,r7
      001123 50 D3            [24] 4436 	jnc	00102$
      001125                       4437 00129$:
                                   4438 ;	ecen4330lab7.c:1319: if(data == RAMcheckVal1){
      001125 ED               [12] 4439 	mov	a,r5
      001126 60 11            [24] 4440 	jz	00106$
                                   4441 ;	ecen4330lab7.c:1320: data = RAMread(0xFFFF);
      001128 90 FF FF         [24] 4442 	mov	dptr,#0xffff
      00112B C0 07            [24] 4443 	push	ar7
      00112D C0 06            [24] 4444 	push	ar6
      00112F 12r0Dr46         [24] 4445 	lcall	_RAMread
      001132 85 82*20         [24] 4446 	mov	_data,dpl
      001135 D0 06            [24] 4447 	pop	ar6
      001137 D0 07            [24] 4448 	pop	ar7
      001139                       4449 00106$:
                                   4450 ;	ecen4330lab7.c:1324: if(data != RAMcheckVal1){
      001139 74 55            [12] 4451 	mov	a,#0x55
      00113B B5*20 02         [24] 4452 	cjne	a,_data,00169$
      00113E 80 61            [24] 4453 	sjmp	00117$
      001140                       4454 00169$:
                                   4455 ;	ecen4330lab7.c:1325: setTextColor(RED, BLACK);
      001140 E4               [12] 4456 	clr	a
      001141 F5*00            [12] 4457 	mov	_setTextColor_PARM_2,a
      001143 F5*01            [12] 4458 	mov	(_setTextColor_PARM_2 + 1),a
      001145 90 F8 00         [24] 4459 	mov	dptr,#0xf800
      001148 C0 07            [24] 4460 	push	ar7
      00114A C0 06            [24] 4461 	push	ar6
      00114C 12r02rD6         [24] 4462 	lcall	_setTextColor
                                   4463 ;	ecen4330lab7.c:1326: LCD_string_write("1st RAM check\nunsuccessful.\n\n");
      00114F 90r05rF1         [24] 4464 	mov	dptr,#___str_12
      001152 75 F0 80         [24] 4465 	mov	b,#0x80
      001155 12r09rC5         [24] 4466 	lcall	_LCD_string_write
                                   4467 ;	ecen4330lab7.c:1327: delay(100);
      001158 90 00 64         [24] 4468 	mov	dptr,#0x0064
      00115B 12r00r25         [24] 4469 	lcall	_delay
                                   4470 ;	ecen4330lab7.c:1329: LCD_string_write("Error at:\n");
      00115E 90r06r0F         [24] 4471 	mov	dptr,#___str_13
      001161 75 F0 80         [24] 4472 	mov	b,#0x80
      001164 12r09rC5         [24] 4473 	lcall	_LCD_string_write
      001167 D0 06            [24] 4474 	pop	ar6
      001169 D0 07            [24] 4475 	pop	ar7
                                   4476 ;	ecen4330lab7.c:1330: HEXtoASCII_16write(i - 1);
      00116B EE               [12] 4477 	mov	a,r6
      00116C 24 FF            [12] 4478 	add	a,#0xff
      00116E F5 82            [12] 4479 	mov	dpl,a
      001170 EF               [12] 4480 	mov	a,r7
      001171 34 FF            [12] 4481 	addc	a,#0xff
      001173 F5 83            [12] 4482 	mov	dph,a
      001175 12r0Cr72         [24] 4483 	lcall	_HEXtoASCII_16write
                                   4484 ;	ecen4330lab7.c:1331: LCD_string_write(": 0x");
      001178 90r06r1A         [24] 4485 	mov	dptr,#___str_14
      00117B 75 F0 80         [24] 4486 	mov	b,#0x80
      00117E 12r09rC5         [24] 4487 	lcall	_LCD_string_write
                                   4488 ;	ecen4330lab7.c:1332: HEXtoASCII_8write(data);
      001181 85*20 82         [24] 4489 	mov	dpl,_data
      001184 12r0Cr35         [24] 4490 	lcall	_HEXtoASCII_8write
                                   4491 ;	ecen4330lab7.c:1334: setTextColor(WHITE, BLACK);
      001187 E4               [12] 4492 	clr	a
      001188 F5*00            [12] 4493 	mov	_setTextColor_PARM_2,a
      00118A F5*01            [12] 4494 	mov	(_setTextColor_PARM_2 + 1),a
      00118C 90 FF FF         [24] 4495 	mov	dptr,#0xffff
      00118F 12r02rD6         [24] 4496 	lcall	_setTextColor
                                   4497 ;	ecen4330lab7.c:1335: LCD_string_write("Returning to\nmain menu.");
      001192 90r06r1F         [24] 4498 	mov	dptr,#___str_15
      001195 75 F0 80         [24] 4499 	mov	b,#0x80
      001198 12r09rC5         [24] 4500 	lcall	_LCD_string_write
                                   4501 ;	ecen4330lab7.c:1336: delay(200);
      00119B 90 00 C8         [24] 4502 	mov	dptr,#0x00c8
      00119E 02r00r25         [24] 4503 	ljmp	_delay
      0011A1                       4504 00117$:
                                   4505 ;	ecen4330lab7.c:1341: setTextColor(GREEN, BLACK);
      0011A1 E4               [12] 4506 	clr	a
      0011A2 F5*00            [12] 4507 	mov	_setTextColor_PARM_2,a
      0011A4 F5*01            [12] 4508 	mov	(_setTextColor_PARM_2 + 1),a
      0011A6 90 07 E0         [24] 4509 	mov	dptr,#0x07e0
      0011A9 12r02rD6         [24] 4510 	lcall	_setTextColor
                                   4511 ;	ecen4330lab7.c:1342: LCD_string_write("1st RAM check\nsuccessful.\n\n");
      0011AC 90r06r37         [24] 4512 	mov	dptr,#___str_16
      0011AF 75 F0 80         [24] 4513 	mov	b,#0x80
      0011B2 12r09rC5         [24] 4514 	lcall	_LCD_string_write
                                   4515 ;	ecen4330lab7.c:1343: delay(200);
      0011B5 90 00 C8         [24] 4516 	mov	dptr,#0x00c8
      0011B8 12r00r25         [24] 4517 	lcall	_delay
                                   4518 ;	ecen4330lab7.c:1345: resetLCD();
      0011BB 12r0Dr59         [24] 4519 	lcall	_resetLCD
                                   4520 ;	ecen4330lab7.c:1346: LCD_string_write("\nWriting 0xAA\nto all\nexternal RAM\nlocations.\n\n");
      0011BE 90r06r53         [24] 4521 	mov	dptr,#___str_17
      0011C1 75 F0 80         [24] 4522 	mov	b,#0x80
      0011C4 12r09rC5         [24] 4523 	lcall	_LCD_string_write
                                   4524 ;	ecen4330lab7.c:1347: testRAM(RAMcheckVal2);
      0011C7 75 82 AA         [24] 4525 	mov	dpl,#0xaa
      0011CA 12r0Dr27         [24] 4526 	lcall	_testRAM
                                   4527 ;	ecen4330lab7.c:1348: RAMwrite(0xFFFF, RAMcheckVal2);
      0011CD 75*00 AA         [24] 4528 	mov	_RAMwrite_PARM_2,#0xaa
      0011D0 90 FF FF         [24] 4529 	mov	dptr,#0xffff
      0011D3 12r0Dr17         [24] 4530 	lcall	_RAMwrite
                                   4531 ;	ecen4330lab7.c:1349: setTextColor(GREEN, BLACK);
      0011D6 E4               [12] 4532 	clr	a
      0011D7 F5*00            [12] 4533 	mov	_setTextColor_PARM_2,a
      0011D9 F5*01            [12] 4534 	mov	(_setTextColor_PARM_2 + 1),a
      0011DB 90 07 E0         [24] 4535 	mov	dptr,#0x07e0
      0011DE 12r02rD6         [24] 4536 	lcall	_setTextColor
                                   4537 ;	ecen4330lab7.c:1350: LCD_string_write("Write\ncomplete.\n");
      0011E1 90r05rB5         [24] 4538 	mov	dptr,#___str_10
      0011E4 75 F0 80         [24] 4539 	mov	b,#0x80
      0011E7 12r09rC5         [24] 4540 	lcall	_LCD_string_write
                                   4541 ;	ecen4330lab7.c:1351: delay(200);
      0011EA 90 00 C8         [24] 4542 	mov	dptr,#0x00c8
      0011ED 12r00r25         [24] 4543 	lcall	_delay
                                   4544 ;	ecen4330lab7.c:1354: resetLCD();
      0011F0 12r0Dr59         [24] 4545 	lcall	_resetLCD
                                   4546 ;	ecen4330lab7.c:1355: LCD_string_write("\nVerifying all\nRAM locations\nequal 0xAA.\n\n");
      0011F3 90r06r82         [24] 4547 	mov	dptr,#___str_18
      0011F6 75 F0 80         [24] 4548 	mov	b,#0x80
      0011F9 12r09rC5         [24] 4549 	lcall	_LCD_string_write
                                   4550 ;	ecen4330lab7.c:1357: do
      0011FC 7E 00            [12] 4551 	mov	r6,#0x00
      0011FE 7F 00            [12] 4552 	mov	r7,#0x00
      001200                       4553 00108$:
                                   4554 ;	ecen4330lab7.c:1359: data = RAMread(i);
      001200 8E 82            [24] 4555 	mov	dpl,r6
      001202 8F 83            [24] 4556 	mov	dph,r7
      001204 C0 07            [24] 4557 	push	ar7
      001206 C0 06            [24] 4558 	push	ar6
      001208 12r0Dr46         [24] 4559 	lcall	_RAMread
      00120B 85 82*20         [24] 4560 	mov	_data,dpl
      00120E D0 06            [24] 4561 	pop	ar6
      001210 D0 07            [24] 4562 	pop	ar7
                                   4563 ;	ecen4330lab7.c:1360: i++;
      001212 0E               [12] 4564 	inc	r6
      001213 BE 00 01         [24] 4565 	cjne	r6,#0x00,00170$
      001216 0F               [12] 4566 	inc	r7
      001217                       4567 00170$:
                                   4568 ;	ecen4330lab7.c:1361: } while (data == RAMcheckVal2 && i <= __END_RAM__);
      001217 74 AA            [12] 4569 	mov	a,#0xaa
      001219 B5*20 04         [24] 4570 	cjne	a,_data,00171$
      00121C 74 01            [12] 4571 	mov	a,#0x01
      00121E 80 01            [24] 4572 	sjmp	00172$
      001220                       4573 00171$:
      001220 E4               [12] 4574 	clr	a
      001221                       4575 00172$:
      001221 FD               [12] 4576 	mov	r5,a
      001222 60 09            [24] 4577 	jz	00130$
      001224 C3               [12] 4578 	clr	c
      001225 74 FE            [12] 4579 	mov	a,#0xfe
      001227 9E               [12] 4580 	subb	a,r6
      001228 74 FF            [12] 4581 	mov	a,#0xff
      00122A 9F               [12] 4582 	subb	a,r7
      00122B 50 D3            [24] 4583 	jnc	00108$
      00122D                       4584 00130$:
                                   4585 ;	ecen4330lab7.c:1362: if(data == RAMcheckVal2){
      00122D ED               [12] 4586 	mov	a,r5
      00122E 60 11            [24] 4587 	jz	00112$
                                   4588 ;	ecen4330lab7.c:1363: data = RAMread(0xFFFF);
      001230 90 FF FF         [24] 4589 	mov	dptr,#0xffff
      001233 C0 07            [24] 4590 	push	ar7
      001235 C0 06            [24] 4591 	push	ar6
      001237 12r0Dr46         [24] 4592 	lcall	_RAMread
      00123A 85 82*20         [24] 4593 	mov	_data,dpl
      00123D D0 06            [24] 4594 	pop	ar6
      00123F D0 07            [24] 4595 	pop	ar7
      001241                       4596 00112$:
                                   4597 ;	ecen4330lab7.c:1366: if(data != RAMcheckVal2){
      001241 74 AA            [12] 4598 	mov	a,#0xaa
      001243 B5*20 02         [24] 4599 	cjne	a,_data,00176$
      001246 80 61            [24] 4600 	sjmp	00114$
      001248                       4601 00176$:
                                   4602 ;	ecen4330lab7.c:1367: setTextColor(RED, BLACK);
      001248 E4               [12] 4603 	clr	a
      001249 F5*00            [12] 4604 	mov	_setTextColor_PARM_2,a
      00124B F5*01            [12] 4605 	mov	(_setTextColor_PARM_2 + 1),a
      00124D 90 F8 00         [24] 4606 	mov	dptr,#0xf800
      001250 C0 07            [24] 4607 	push	ar7
      001252 C0 06            [24] 4608 	push	ar6
      001254 12r02rD6         [24] 4609 	lcall	_setTextColor
                                   4610 ;	ecen4330lab7.c:1368: LCD_string_write("2nd RAM check\nunsuccessful.\n\n");
      001257 90r06rAD         [24] 4611 	mov	dptr,#___str_19
      00125A 75 F0 80         [24] 4612 	mov	b,#0x80
      00125D 12r09rC5         [24] 4613 	lcall	_LCD_string_write
                                   4614 ;	ecen4330lab7.c:1369: delay(100);
      001260 90 00 64         [24] 4615 	mov	dptr,#0x0064
      001263 12r00r25         [24] 4616 	lcall	_delay
                                   4617 ;	ecen4330lab7.c:1371: LCD_string_write("Error at:\n");
      001266 90r06r0F         [24] 4618 	mov	dptr,#___str_13
      001269 75 F0 80         [24] 4619 	mov	b,#0x80
      00126C 12r09rC5         [24] 4620 	lcall	_LCD_string_write
      00126F D0 06            [24] 4621 	pop	ar6
      001271 D0 07            [24] 4622 	pop	ar7
                                   4623 ;	ecen4330lab7.c:1372: HEXtoASCII_16write(i - 1);
      001273 EE               [12] 4624 	mov	a,r6
      001274 24 FF            [12] 4625 	add	a,#0xff
      001276 F5 82            [12] 4626 	mov	dpl,a
      001278 EF               [12] 4627 	mov	a,r7
      001279 34 FF            [12] 4628 	addc	a,#0xff
      00127B F5 83            [12] 4629 	mov	dph,a
      00127D 12r0Cr72         [24] 4630 	lcall	_HEXtoASCII_16write
                                   4631 ;	ecen4330lab7.c:1373: LCD_string_write(": 0x");
      001280 90r06r1A         [24] 4632 	mov	dptr,#___str_14
      001283 75 F0 80         [24] 4633 	mov	b,#0x80
      001286 12r09rC5         [24] 4634 	lcall	_LCD_string_write
                                   4635 ;	ecen4330lab7.c:1374: HEXtoASCII_8write(data);
      001289 85*20 82         [24] 4636 	mov	dpl,_data
      00128C 12r0Cr35         [24] 4637 	lcall	_HEXtoASCII_8write
                                   4638 ;	ecen4330lab7.c:1376: setTextColor(WHITE, BLACK);
      00128F E4               [12] 4639 	clr	a
      001290 F5*00            [12] 4640 	mov	_setTextColor_PARM_2,a
      001292 F5*01            [12] 4641 	mov	(_setTextColor_PARM_2 + 1),a
      001294 90 FF FF         [24] 4642 	mov	dptr,#0xffff
      001297 12r02rD6         [24] 4643 	lcall	_setTextColor
                                   4644 ;	ecen4330lab7.c:1377: LCD_string_write("Returning to\nmain menu.");
      00129A 90r06r1F         [24] 4645 	mov	dptr,#___str_15
      00129D 75 F0 80         [24] 4646 	mov	b,#0x80
      0012A0 12r09rC5         [24] 4647 	lcall	_LCD_string_write
                                   4648 ;	ecen4330lab7.c:1378: delay(100);
      0012A3 90 00 64         [24] 4649 	mov	dptr,#0x0064
      0012A6 02r00r25         [24] 4650 	ljmp	_delay
      0012A9                       4651 00114$:
                                   4652 ;	ecen4330lab7.c:1383: setTextColor(GREEN, BLACK);
      0012A9 E4               [12] 4653 	clr	a
      0012AA F5*00            [12] 4654 	mov	_setTextColor_PARM_2,a
      0012AC F5*01            [12] 4655 	mov	(_setTextColor_PARM_2 + 1),a
      0012AE 90 07 E0         [24] 4656 	mov	dptr,#0x07e0
      0012B1 12r02rD6         [24] 4657 	lcall	_setTextColor
                                   4658 ;	ecen4330lab7.c:1384: LCD_string_write("2nd RAM check\nsuccessful.\n\n");
      0012B4 90r06rCB         [24] 4659 	mov	dptr,#___str_20
      0012B7 75 F0 80         [24] 4660 	mov	b,#0x80
      0012BA 12r09rC5         [24] 4661 	lcall	_LCD_string_write
                                   4662 ;	ecen4330lab7.c:1385: LCD_string_write("RAM check\ncomplete.\n\n");
      0012BD 90r06rE7         [24] 4663 	mov	dptr,#___str_21
      0012C0 75 F0 80         [24] 4664 	mov	b,#0x80
      0012C3 12r09rC5         [24] 4665 	lcall	_LCD_string_write
                                   4666 ;	ecen4330lab7.c:1386: delay(100);
      0012C6 90 00 64         [24] 4667 	mov	dptr,#0x0064
      0012C9 12r00r25         [24] 4668 	lcall	_delay
                                   4669 ;	ecen4330lab7.c:1387: setTextColor(WHITE, BLACK);
      0012CC E4               [12] 4670 	clr	a
      0012CD F5*00            [12] 4671 	mov	_setTextColor_PARM_2,a
      0012CF F5*01            [12] 4672 	mov	(_setTextColor_PARM_2 + 1),a
      0012D1 90 FF FF         [24] 4673 	mov	dptr,#0xffff
      0012D4 12r02rD6         [24] 4674 	lcall	_setTextColor
                                   4675 ;	ecen4330lab7.c:1388: LCD_string_write("Returning to\nmain menu.");
      0012D7 90r06r1F         [24] 4676 	mov	dptr,#___str_15
      0012DA 75 F0 80         [24] 4677 	mov	b,#0x80
      0012DD 12r09rC5         [24] 4678 	lcall	_LCD_string_write
                                   4679 ;	ecen4330lab7.c:1389: delay(100);
      0012E0 90 00 64         [24] 4680 	mov	dptr,#0x0064
                                   4681 ;	ecen4330lab7.c:1392: }
      0012E3 02r00r25         [24] 4682 	ljmp	_delay
                                   4683 ;------------------------------------------------------------
                                   4684 ;Allocation info for local variables in function 'MOVE'
                                   4685 ;------------------------------------------------------------
                                   4686 ;	ecen4330lab7.c:1415: void MOVE(){
                                   4687 ;	-----------------------------------------
                                   4688 ;	 function MOVE
                                   4689 ;	-----------------------------------------
      0012E6                       4690 _MOVE:
                                   4691 ;	ecen4330lab7.c:1416: endAddrCalc = 0;
      0012E6 E4               [12] 4692 	clr	a
      0012E7 F5*34            [12] 4693 	mov	_endAddrCalc,a
      0012E9 F5*35            [12] 4694 	mov	(_endAddrCalc + 1),a
      0012EB F5*36            [12] 4695 	mov	(_endAddrCalc + 2),a
      0012ED F5*37            [12] 4696 	mov	(_endAddrCalc + 3),a
                                   4697 ;	ecen4330lab7.c:1417: addr0 = 0;                  // Source Address
      0012EF F5*21            [12] 4698 	mov	_addr0,a
      0012F1 F5*22            [12] 4699 	mov	(_addr0 + 1),a
                                   4700 ;	ecen4330lab7.c:1418: addr1 = 0;                  // Source End Address
      0012F3 F5*23            [12] 4701 	mov	_addr1,a
      0012F5 F5*24            [12] 4702 	mov	(_addr1 + 1),a
                                   4703 ;	ecen4330lab7.c:1419: addr2 = 0;                  // Destination Address
      0012F7 F5*25            [12] 4704 	mov	_addr2,a
      0012F9 F5*26            [12] 4705 	mov	(_addr2 + 1),a
                                   4706 ;	ecen4330lab7.c:1420: addr3 = 0;                  // Destination End Address
      0012FB F5*27            [12] 4707 	mov	_addr3,a
      0012FD F5*28            [12] 4708 	mov	(_addr3 + 1),a
                                   4709 ;	ecen4330lab7.c:1421: currAddr0 = 0;              // Current Source Address
      0012FF F5*29            [12] 4710 	mov	_currAddr0,a
      001301 F5*2A            [12] 4711 	mov	(_currAddr0 + 1),a
                                   4712 ;	ecen4330lab7.c:1422: currAddr1 = 0;              // Current Destination Address
      001303 F5*2B            [12] 4713 	mov	_currAddr1,a
      001305 F5*2C            [12] 4714 	mov	(_currAddr1 + 1),a
                                   4715 ;	ecen4330lab7.c:1425: resetLCD();
      001307 12r0Dr59         [24] 4716 	lcall	_resetLCD
                                   4717 ;	ecen4330lab7.c:1426: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n\n  0x____");
      00130A 90r06rFD         [24] 4718 	mov	dptr,#___str_22
      00130D 75 F0 80         [24] 4719 	mov	b,#0x80
      001310 12r09rC5         [24] 4720 	lcall	_LCD_string_write
                                   4721 ;	ecen4330lab7.c:1427: cursor_x -= 4 * textsize * 6;
      001313 E5*0C            [12] 4722 	mov	a,_textsize
      001315 75 F0 18         [24] 4723 	mov	b,#0x18
      001318 A4               [48] 4724 	mul	ab
      001319 FE               [12] 4725 	mov	r6,a
      00131A AF F0            [24] 4726 	mov	r7,b
      00131C E5*08            [12] 4727 	mov	a,_cursor_x
      00131E C3               [12] 4728 	clr	c
      00131F 9E               [12] 4729 	subb	a,r6
      001320 F5*08            [12] 4730 	mov	_cursor_x,a
      001322 E5*09            [12] 4731 	mov	a,(_cursor_x + 1)
      001324 9F               [12] 4732 	subb	a,r7
      001325 F5*09            [12] 4733 	mov	(_cursor_x + 1),a
                                   4734 ;	ecen4330lab7.c:1428: inputRead16();
      001327 12r0DrAA         [24] 4735 	lcall	_inputRead16
                                   4736 ;	ecen4330lab7.c:1429: addr0 = input16;
      00132A 85*17*21         [24] 4737 	mov	_addr0,_input16
      00132D 85*18*22         [24] 4738 	mov	(_addr0 + 1),(_input16 + 1)
                                   4739 ;	ecen4330lab7.c:1432: resetLCD();
      001330 12r0Dr59         [24] 4740 	lcall	_resetLCD
                                   4741 ;	ecen4330lab7.c:1433: LCD_string_write("\nEnter\ndestination\nstarting RAM\naddress:\n\n\n  0x____");
      001333 90r07r2C         [24] 4742 	mov	dptr,#___str_23
      001336 75 F0 80         [24] 4743 	mov	b,#0x80
      001339 12r09rC5         [24] 4744 	lcall	_LCD_string_write
                                   4745 ;	ecen4330lab7.c:1434: cursor_x -= 4 * textsize * 6;
      00133C E5*0C            [12] 4746 	mov	a,_textsize
      00133E 75 F0 18         [24] 4747 	mov	b,#0x18
      001341 A4               [48] 4748 	mul	ab
      001342 FE               [12] 4749 	mov	r6,a
      001343 AF F0            [24] 4750 	mov	r7,b
      001345 E5*08            [12] 4751 	mov	a,_cursor_x
      001347 C3               [12] 4752 	clr	c
      001348 9E               [12] 4753 	subb	a,r6
      001349 F5*08            [12] 4754 	mov	_cursor_x,a
      00134B E5*09            [12] 4755 	mov	a,(_cursor_x + 1)
      00134D 9F               [12] 4756 	subb	a,r7
      00134E F5*09            [12] 4757 	mov	(_cursor_x + 1),a
                                   4758 ;	ecen4330lab7.c:1435: inputRead16();
      001350 12r0DrAA         [24] 4759 	lcall	_inputRead16
                                   4760 ;	ecen4330lab7.c:1436: addr2 = input16;
      001353 85*17*25         [24] 4761 	mov	_addr2,_input16
      001356 85*18*26         [24] 4762 	mov	(_addr2 + 1),(_input16 + 1)
                                   4763 ;	ecen4330lab7.c:1439: inputDataType();
      001359 12r0ErB9         [24] 4764 	lcall	_inputDataType
                                   4765 ;	ecen4330lab7.c:1442: resetLCD();
      00135C 12r0Dr59         [24] 4766 	lcall	_resetLCD
                                   4767 ;	ecen4330lab7.c:1443: inputDataSize();
      00135F 12r0Fr76         [24] 4768 	lcall	_inputDataSize
                                   4769 ;	ecen4330lab7.c:1446: if(addr2 > addr0){
      001362 C3               [12] 4770 	clr	c
      001363 E5*21            [12] 4771 	mov	a,_addr0
      001365 95*25            [12] 4772 	subb	a,_addr2
      001367 E5*22            [12] 4773 	mov	a,(_addr0 + 1)
      001369 95*26            [12] 4774 	subb	a,(_addr2 + 1)
      00136B 50 63            [24] 4775 	jnc	00108$
                                   4776 ;	ecen4330lab7.c:1447: endAddrCalc = addr2 + (dataSize * dataType);
      00136D 85*1A*00         [24] 4777 	mov	__mulint_PARM_2,_dataType
      001370 75*01 00         [24] 4778 	mov	(__mulint_PARM_2 + 1),#0x00
      001373 85*1B 82         [24] 4779 	mov	dpl,_dataSize
      001376 85*1C 83         [24] 4780 	mov	dph,(_dataSize + 1)
      001379 12r00r00         [24] 4781 	lcall	__mulint
      00137C AE 82            [24] 4782 	mov	r6,dpl
      00137E AF 83            [24] 4783 	mov	r7,dph
      001380 EE               [12] 4784 	mov	a,r6
      001381 25*25            [12] 4785 	add	a,_addr2
      001383 FC               [12] 4786 	mov	r4,a
      001384 EF               [12] 4787 	mov	a,r7
      001385 35*26            [12] 4788 	addc	a,(_addr2 + 1)
      001387 FD               [12] 4789 	mov	r5,a
      001388 8C*34            [24] 4790 	mov	_endAddrCalc,r4
      00138A 8D*35            [24] 4791 	mov	(_endAddrCalc + 1),r5
      00138C 75*36 00         [24] 4792 	mov	(_endAddrCalc + 2),#0x00
      00138F 75*37 00         [24] 4793 	mov	(_endAddrCalc + 3),#0x00
                                   4794 ;	ecen4330lab7.c:1448: if(endAddrCalc > 0xFFFF){
      001392 C3               [12] 4795 	clr	c
      001393 74 FF            [12] 4796 	mov	a,#0xff
      001395 95*34            [12] 4797 	subb	a,_endAddrCalc
      001397 74 FF            [12] 4798 	mov	a,#0xff
      001399 95*35            [12] 4799 	subb	a,(_endAddrCalc + 1)
      00139B E4               [12] 4800 	clr	a
      00139C 95*36            [12] 4801 	subb	a,(_endAddrCalc + 2)
      00139E E4               [12] 4802 	clr	a
      00139F 95*37            [12] 4803 	subb	a,(_endAddrCalc + 3)
      0013A1 50 08            [24] 4804 	jnc	00102$
                                   4805 ;	ecen4330lab7.c:1449: addr3 = 0xFFFF;
      0013A3 75*27 FF         [24] 4806 	mov	_addr3,#0xff
      0013A6 75*28 FF         [24] 4807 	mov	(_addr3 + 1),#0xff
      0013A9 80 0A            [24] 4808 	sjmp	00103$
      0013AB                       4809 00102$:
                                   4810 ;	ecen4330lab7.c:1452: addr3 = addr2 + (dataSize * dataType);
      0013AB EE               [12] 4811 	mov	a,r6
      0013AC 25*25            [12] 4812 	add	a,_addr2
      0013AE F5*27            [12] 4813 	mov	_addr3,a
      0013B0 EF               [12] 4814 	mov	a,r7
      0013B1 35*26            [12] 4815 	addc	a,(_addr2 + 1)
      0013B3 F5*28            [12] 4816 	mov	(_addr3 + 1),a
      0013B5                       4817 00103$:
                                   4818 ;	ecen4330lab7.c:1454: dataSize = addr3 - addr2;
      0013B5 E5*27            [12] 4819 	mov	a,_addr3
      0013B7 C3               [12] 4820 	clr	c
      0013B8 95*25            [12] 4821 	subb	a,_addr2
      0013BA F5*1B            [12] 4822 	mov	_dataSize,a
      0013BC E5*28            [12] 4823 	mov	a,(_addr3 + 1)
      0013BE 95*26            [12] 4824 	subb	a,(_addr2 + 1)
      0013C0 F5*1C            [12] 4825 	mov	(_dataSize + 1),a
                                   4826 ;	ecen4330lab7.c:1455: addr1 = addr0 + dataSize;
      0013C2 E5*1B            [12] 4827 	mov	a,_dataSize
      0013C4 25*21            [12] 4828 	add	a,_addr0
      0013C6 F5*23            [12] 4829 	mov	_addr1,a
      0013C8 E5*1C            [12] 4830 	mov	a,(_dataSize + 1)
      0013CA 35*22            [12] 4831 	addc	a,(_addr0 + 1)
      0013CC F5*24            [12] 4832 	mov	(_addr1 + 1),a
      0013CE 80 61            [24] 4833 	sjmp	00109$
      0013D0                       4834 00108$:
                                   4835 ;	ecen4330lab7.c:1458: endAddrCalc = addr0 + (dataSize * dataType);
      0013D0 85*1A*00         [24] 4836 	mov	__mulint_PARM_2,_dataType
      0013D3 75*01 00         [24] 4837 	mov	(__mulint_PARM_2 + 1),#0x00
      0013D6 85*1B 82         [24] 4838 	mov	dpl,_dataSize
      0013D9 85*1C 83         [24] 4839 	mov	dph,(_dataSize + 1)
      0013DC 12r00r00         [24] 4840 	lcall	__mulint
      0013DF AE 82            [24] 4841 	mov	r6,dpl
      0013E1 AF 83            [24] 4842 	mov	r7,dph
      0013E3 EE               [12] 4843 	mov	a,r6
      0013E4 25*21            [12] 4844 	add	a,_addr0
      0013E6 FC               [12] 4845 	mov	r4,a
      0013E7 EF               [12] 4846 	mov	a,r7
      0013E8 35*22            [12] 4847 	addc	a,(_addr0 + 1)
      0013EA FD               [12] 4848 	mov	r5,a
      0013EB 8C*34            [24] 4849 	mov	_endAddrCalc,r4
      0013ED 8D*35            [24] 4850 	mov	(_endAddrCalc + 1),r5
      0013EF 75*36 00         [24] 4851 	mov	(_endAddrCalc + 2),#0x00
      0013F2 75*37 00         [24] 4852 	mov	(_endAddrCalc + 3),#0x00
                                   4853 ;	ecen4330lab7.c:1459: if(endAddrCalc > 0xFFFF){
      0013F5 C3               [12] 4854 	clr	c
      0013F6 74 FF            [12] 4855 	mov	a,#0xff
      0013F8 95*34            [12] 4856 	subb	a,_endAddrCalc
      0013FA 74 FF            [12] 4857 	mov	a,#0xff
      0013FC 95*35            [12] 4858 	subb	a,(_endAddrCalc + 1)
      0013FE E4               [12] 4859 	clr	a
      0013FF 95*36            [12] 4860 	subb	a,(_endAddrCalc + 2)
      001401 E4               [12] 4861 	clr	a
      001402 95*37            [12] 4862 	subb	a,(_endAddrCalc + 3)
      001404 50 08            [24] 4863 	jnc	00105$
                                   4864 ;	ecen4330lab7.c:1460: addr1 = 0xFFFF;
      001406 75*23 FF         [24] 4865 	mov	_addr1,#0xff
      001409 75*24 FF         [24] 4866 	mov	(_addr1 + 1),#0xff
      00140C 80 0A            [24] 4867 	sjmp	00106$
      00140E                       4868 00105$:
                                   4869 ;	ecen4330lab7.c:1463: addr1 = addr0 + (dataSize * dataType);
      00140E EE               [12] 4870 	mov	a,r6
      00140F 25*21            [12] 4871 	add	a,_addr0
      001411 F5*23            [12] 4872 	mov	_addr1,a
      001413 EF               [12] 4873 	mov	a,r7
      001414 35*22            [12] 4874 	addc	a,(_addr0 + 1)
      001416 F5*24            [12] 4875 	mov	(_addr1 + 1),a
      001418                       4876 00106$:
                                   4877 ;	ecen4330lab7.c:1465: dataSize = addr1 - addr0;
      001418 E5*23            [12] 4878 	mov	a,_addr1
      00141A C3               [12] 4879 	clr	c
      00141B 95*21            [12] 4880 	subb	a,_addr0
      00141D F5*1B            [12] 4881 	mov	_dataSize,a
      00141F E5*24            [12] 4882 	mov	a,(_addr1 + 1)
      001421 95*22            [12] 4883 	subb	a,(_addr0 + 1)
      001423 F5*1C            [12] 4884 	mov	(_dataSize + 1),a
                                   4885 ;	ecen4330lab7.c:1466: addr3 = addr2 + dataSize;
      001425 E5*1B            [12] 4886 	mov	a,_dataSize
      001427 25*25            [12] 4887 	add	a,_addr2
      001429 F5*27            [12] 4888 	mov	_addr3,a
      00142B E5*1C            [12] 4889 	mov	a,(_dataSize + 1)
      00142D 35*26            [12] 4890 	addc	a,(_addr2 + 1)
      00142F F5*28            [12] 4891 	mov	(_addr3 + 1),a
      001431                       4892 00109$:
                                   4893 ;	ecen4330lab7.c:1471: if(addr0 < addr2 && addr1 > addr2){
      001431 C3               [12] 4894 	clr	c
      001432 E5*21            [12] 4895 	mov	a,_addr0
      001434 95*25            [12] 4896 	subb	a,_addr2
      001436 E5*22            [12] 4897 	mov	a,(_addr0 + 1)
      001438 95*26            [12] 4898 	subb	a,(_addr2 + 1)
      00143A 50 4E            [24] 4899 	jnc	00113$
      00143C C3               [12] 4900 	clr	c
      00143D E5*25            [12] 4901 	mov	a,_addr2
      00143F 95*23            [12] 4902 	subb	a,_addr1
      001441 E5*26            [12] 4903 	mov	a,(_addr2 + 1)
      001443 95*24            [12] 4904 	subb	a,(_addr1 + 1)
      001445 50 43            [24] 4905 	jnc	00113$
                                   4906 ;	ecen4330lab7.c:1472: currAddr0 = addr1;
      001447 85*23*29         [24] 4907 	mov	_currAddr0,_addr1
      00144A 85*24*2A         [24] 4908 	mov	(_currAddr0 + 1),(_addr1 + 1)
                                   4909 ;	ecen4330lab7.c:1473: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      00144D 85*27*2B         [24] 4910 	mov	_currAddr1,_addr3
      001450 85*28*2C         [24] 4911 	mov	(_currAddr1 + 1),(_addr3 + 1)
      001453                       4912 00117$:
      001453 C3               [12] 4913 	clr	c
      001454 E5*2B            [12] 4914 	mov	a,_currAddr1
      001456 95*25            [12] 4915 	subb	a,_addr2
      001458 E5*2C            [12] 4916 	mov	a,(_currAddr1 + 1)
      00145A 95*26            [12] 4917 	subb	a,(_addr2 + 1)
      00145C 40 6D            [24] 4918 	jc	00114$
                                   4919 ;	ecen4330lab7.c:1474: data = RAMread(currAddr0);
      00145E 85*29 82         [24] 4920 	mov	dpl,_currAddr0
      001461 85*2A 83         [24] 4921 	mov	dph,(_currAddr0 + 1)
      001464 12r0Dr46         [24] 4922 	lcall	_RAMread
      001467 85 82*20         [24] 4923 	mov	_data,dpl
                                   4924 ;	ecen4330lab7.c:1475: RAMwrite(currAddr1, data);
      00146A 85*20*00         [24] 4925 	mov	_RAMwrite_PARM_2,_data
      00146D 85*2B 82         [24] 4926 	mov	dpl,_currAddr1
      001470 85*2C 83         [24] 4927 	mov	dph,(_currAddr1 + 1)
      001473 12r0Dr17         [24] 4928 	lcall	_RAMwrite
                                   4929 ;	ecen4330lab7.c:1476: currAddr0--;
      001476 15*29            [12] 4930 	dec	_currAddr0
      001478 74 FF            [12] 4931 	mov	a,#0xff
      00147A B5*29 02         [24] 4932 	cjne	a,_currAddr0,00166$
      00147D 15*2A            [12] 4933 	dec	(_currAddr0 + 1)
      00147F                       4934 00166$:
                                   4935 ;	ecen4330lab7.c:1473: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      00147F 15*2B            [12] 4936 	dec	_currAddr1
      001481 74 FF            [12] 4937 	mov	a,#0xff
      001483 B5*2B 02         [24] 4938 	cjne	a,_currAddr1,00167$
      001486 15*2C            [12] 4939 	dec	(_currAddr1 + 1)
      001488                       4940 00167$:
      001488 80 C9            [24] 4941 	sjmp	00117$
      00148A                       4942 00113$:
                                   4943 ;	ecen4330lab7.c:1483: currAddr0 = addr0;
      00148A 85*21*29         [24] 4944 	mov	_currAddr0,_addr0
      00148D 85*22*2A         [24] 4945 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   4946 ;	ecen4330lab7.c:1484: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      001490 85*25*2B         [24] 4947 	mov	_currAddr1,_addr2
      001493 85*26*2C         [24] 4948 	mov	(_currAddr1 + 1),(_addr2 + 1)
      001496                       4949 00120$:
      001496 C3               [12] 4950 	clr	c
      001497 E5*27            [12] 4951 	mov	a,_addr3
      001499 95*2B            [12] 4952 	subb	a,_currAddr1
      00149B E5*28            [12] 4953 	mov	a,(_addr3 + 1)
      00149D 95*2C            [12] 4954 	subb	a,(_currAddr1 + 1)
      00149F 40 2A            [24] 4955 	jc	00114$
                                   4956 ;	ecen4330lab7.c:1485: data = RAMread(currAddr0);
      0014A1 85*29 82         [24] 4957 	mov	dpl,_currAddr0
      0014A4 85*2A 83         [24] 4958 	mov	dph,(_currAddr0 + 1)
      0014A7 12r0Dr46         [24] 4959 	lcall	_RAMread
      0014AA 85 82*20         [24] 4960 	mov	_data,dpl
                                   4961 ;	ecen4330lab7.c:1486: RAMwrite(currAddr1, data);
      0014AD 85*20*00         [24] 4962 	mov	_RAMwrite_PARM_2,_data
      0014B0 85*2B 82         [24] 4963 	mov	dpl,_currAddr1
      0014B3 85*2C 83         [24] 4964 	mov	dph,(_currAddr1 + 1)
      0014B6 12r0Dr17         [24] 4965 	lcall	_RAMwrite
                                   4966 ;	ecen4330lab7.c:1487: currAddr0++;
      0014B9 05*29            [12] 4967 	inc	_currAddr0
      0014BB E4               [12] 4968 	clr	a
      0014BC B5*29 02         [24] 4969 	cjne	a,_currAddr0,00169$
      0014BF 05*2A            [12] 4970 	inc	(_currAddr0 + 1)
      0014C1                       4971 00169$:
                                   4972 ;	ecen4330lab7.c:1484: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      0014C1 05*2B            [12] 4973 	inc	_currAddr1
      0014C3 E4               [12] 4974 	clr	a
      0014C4 B5*2B CF         [24] 4975 	cjne	a,_currAddr1,00120$
      0014C7 05*2C            [12] 4976 	inc	(_currAddr1 + 1)
      0014C9 80 CB            [24] 4977 	sjmp	00120$
      0014CB                       4978 00114$:
                                   4979 ;	ecen4330lab7.c:1492: resetLCD();
      0014CB 12r0Dr59         [24] 4980 	lcall	_resetLCD
                                   4981 ;	ecen4330lab7.c:1493: setTextColor(GREEN, BLACK);
      0014CE E4               [12] 4982 	clr	a
      0014CF F5*00            [12] 4983 	mov	_setTextColor_PARM_2,a
      0014D1 F5*01            [12] 4984 	mov	(_setTextColor_PARM_2 + 1),a
      0014D3 90 07 E0         [24] 4985 	mov	dptr,#0x07e0
      0014D6 12r02rD6         [24] 4986 	lcall	_setTextColor
                                   4987 ;	ecen4330lab7.c:1494: LCD_string_write("\nMove complete.\n\n");
      0014D9 90r07r60         [24] 4988 	mov	dptr,#___str_24
      0014DC 75 F0 80         [24] 4989 	mov	b,#0x80
      0014DF 12r09rC5         [24] 4990 	lcall	_LCD_string_write
                                   4991 ;	ecen4330lab7.c:1495: delay(100);
      0014E2 90 00 64         [24] 4992 	mov	dptr,#0x0064
      0014E5 12r00r25         [24] 4993 	lcall	_delay
                                   4994 ;	ecen4330lab7.c:1496: setTextColor(WHITE, BLACK);
      0014E8 E4               [12] 4995 	clr	a
      0014E9 F5*00            [12] 4996 	mov	_setTextColor_PARM_2,a
      0014EB F5*01            [12] 4997 	mov	(_setTextColor_PARM_2 + 1),a
      0014ED 90 FF FF         [24] 4998 	mov	dptr,#0xffff
      0014F0 12r02rD6         [24] 4999 	lcall	_setTextColor
                                   5000 ;	ecen4330lab7.c:1497: LCD_string_write("Returning to\nmain menu.");
      0014F3 90r06r1F         [24] 5001 	mov	dptr,#___str_15
      0014F6 75 F0 80         [24] 5002 	mov	b,#0x80
      0014F9 12r09rC5         [24] 5003 	lcall	_LCD_string_write
                                   5004 ;	ecen4330lab7.c:1498: delay(100);
      0014FC 90 00 64         [24] 5005 	mov	dptr,#0x0064
                                   5006 ;	ecen4330lab7.c:1499: }
      0014FF 02r00r25         [24] 5007 	ljmp	_delay
                                   5008 ;------------------------------------------------------------
                                   5009 ;Allocation info for local variables in function 'COUNT'
                                   5010 ;------------------------------------------------------------
                                   5011 ;i                         Allocated to registers 
                                   5012 ;------------------------------------------------------------
                                   5013 ;	ecen4330lab7.c:1506: void COUNT(){
                                   5014 ;	-----------------------------------------
                                   5015 ;	 function COUNT
                                   5016 ;	-----------------------------------------
      001502                       5017 _COUNT:
                                   5018 ;	ecen4330lab7.c:1507: endAddrCalc = 0;
      001502 E4               [12] 5019 	clr	a
      001503 F5*34            [12] 5020 	mov	_endAddrCalc,a
      001505 F5*35            [12] 5021 	mov	(_endAddrCalc + 1),a
      001507 F5*36            [12] 5022 	mov	(_endAddrCalc + 2),a
      001509 F5*37            [12] 5023 	mov	(_endAddrCalc + 3),a
                                   5024 ;	ecen4330lab7.c:1508: addr0 = 0;                      // Starting Address
      00150B F5*21            [12] 5025 	mov	_addr0,a
      00150D F5*22            [12] 5026 	mov	(_addr0 + 1),a
                                   5027 ;	ecen4330lab7.c:1509: addr1 = 0;                      // End Address
      00150F F5*23            [12] 5028 	mov	_addr1,a
      001511 F5*24            [12] 5029 	mov	(_addr1 + 1),a
                                   5030 ;	ecen4330lab7.c:1510: dataSize = 0;                   // Data Size
      001513 F5*1B            [12] 5031 	mov	_dataSize,a
      001515 F5*1C            [12] 5032 	mov	(_dataSize + 1),a
                                   5033 ;	ecen4330lab7.c:1511: byte1 = 0;                       // Find Value
      001517 F5*2F            [12] 5034 	mov	_byte1,a
      001519 F5*30            [12] 5035 	mov	(_byte1 + 1),a
                                   5036 ;	ecen4330lab7.c:1512: count = 0;
      00151B F5*32            [12] 5037 	mov	_count,a
      00151D F5*33            [12] 5038 	mov	(_count + 1),a
                                   5039 ;	ecen4330lab7.c:1513: addr3 = 0;						// Count overflow
      00151F F5*27            [12] 5040 	mov	_addr3,a
      001521 F5*28            [12] 5041 	mov	(_addr3 + 1),a
                                   5042 ;	ecen4330lab7.c:1514: dataEnd = 0;
                                   5043 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      001523 F5*1E            [12] 5044 	mov	_dataEnd,a
                                   5045 ;	ecen4330lab7.c:1517: resetLCD();
      001525 12r0Dr59         [24] 5046 	lcall	_resetLCD
                                   5047 ;	ecen4330lab7.c:1518: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001528 90r07r72         [24] 5048 	mov	dptr,#___str_25
      00152B 75 F0 80         [24] 5049 	mov	b,#0x80
      00152E 12r09rC5         [24] 5050 	lcall	_LCD_string_write
                                   5051 ;	ecen4330lab7.c:1519: cursor_x -= 4 * textsize * 6;
      001531 E5*0C            [12] 5052 	mov	a,_textsize
      001533 75 F0 18         [24] 5053 	mov	b,#0x18
      001536 A4               [48] 5054 	mul	ab
      001537 FE               [12] 5055 	mov	r6,a
      001538 AF F0            [24] 5056 	mov	r7,b
      00153A E5*08            [12] 5057 	mov	a,_cursor_x
      00153C C3               [12] 5058 	clr	c
      00153D 9E               [12] 5059 	subb	a,r6
      00153E F5*08            [12] 5060 	mov	_cursor_x,a
      001540 E5*09            [12] 5061 	mov	a,(_cursor_x + 1)
      001542 9F               [12] 5062 	subb	a,r7
      001543 F5*09            [12] 5063 	mov	(_cursor_x + 1),a
                                   5064 ;	ecen4330lab7.c:1520: inputRead16();                  // Read input
      001545 12r0DrAA         [24] 5065 	lcall	_inputRead16
                                   5066 ;	ecen4330lab7.c:1521: addr0 = input16;                // Start address
      001548 85*17*21         [24] 5067 	mov	_addr0,_input16
      00154B 85*18*22         [24] 5068 	mov	(_addr0 + 1),(_input16 + 1)
                                   5069 ;	ecen4330lab7.c:1524: resetLCD();
      00154E 12r0Dr59         [24] 5070 	lcall	_resetLCD
                                   5071 ;	ecen4330lab7.c:1525: inputDataSize();                // Prompt & read input
      001551 12r0Fr76         [24] 5072 	lcall	_inputDataSize
                                   5073 ;	ecen4330lab7.c:1528: resetLCD();
      001554 12r0Dr59         [24] 5074 	lcall	_resetLCD
                                   5075 ;	ecen4330lab7.c:1529: LCD_string_write("\nEnter search\nvalue:\n\n  0x__");
      001557 90r07r99         [24] 5076 	mov	dptr,#___str_26
      00155A 75 F0 80         [24] 5077 	mov	b,#0x80
      00155D 12r09rC5         [24] 5078 	lcall	_LCD_string_write
                                   5079 ;	ecen4330lab7.c:1530: cursor_x -= 2 * textsize * 6;
      001560 E5*0C            [12] 5080 	mov	a,_textsize
      001562 75 F0 0C         [24] 5081 	mov	b,#0x0c
      001565 A4               [48] 5082 	mul	ab
      001566 FE               [12] 5083 	mov	r6,a
      001567 AF F0            [24] 5084 	mov	r7,b
      001569 E5*08            [12] 5085 	mov	a,_cursor_x
      00156B C3               [12] 5086 	clr	c
      00156C 9E               [12] 5087 	subb	a,r6
      00156D F5*08            [12] 5088 	mov	_cursor_x,a
      00156F E5*09            [12] 5089 	mov	a,(_cursor_x + 1)
      001571 9F               [12] 5090 	subb	a,r7
      001572 F5*09            [12] 5091 	mov	(_cursor_x + 1),a
                                   5092 ;	ecen4330lab7.c:1531: inputRead8();                  // Read input
      001574 12r0Er65         [24] 5093 	lcall	_inputRead8
                                   5094 ;	ecen4330lab7.c:1532: byte1 = input8;                 // Find value
      001577 85*19*2F         [24] 5095 	mov	_byte1,_input8
      00157A 75*30 00         [24] 5096 	mov	(_byte1 + 1),#0x00
                                   5097 ;	ecen4330lab7.c:1535: endAddrCalc = addr0 + dataSize;
      00157D E5*1B            [12] 5098 	mov	a,_dataSize
      00157F 25*21            [12] 5099 	add	a,_addr0
      001581 FE               [12] 5100 	mov	r6,a
      001582 E5*1C            [12] 5101 	mov	a,(_dataSize + 1)
      001584 35*22            [12] 5102 	addc	a,(_addr0 + 1)
      001586 FF               [12] 5103 	mov	r7,a
      001587 8E*34            [24] 5104 	mov	_endAddrCalc,r6
      001589 8F*35            [24] 5105 	mov	(_endAddrCalc + 1),r7
      00158B 75*36 00         [24] 5106 	mov	(_endAddrCalc + 2),#0x00
      00158E 75*37 00         [24] 5107 	mov	(_endAddrCalc + 3),#0x00
                                   5108 ;	ecen4330lab7.c:1536: if(endAddrCalc < addr0){ // RAM overflow
      001591 AC*21            [24] 5109 	mov	r4,_addr0
      001593 AD*22            [24] 5110 	mov	r5,(_addr0 + 1)
      001595 7E 00            [12] 5111 	mov	r6,#0x00
      001597 7F 00            [12] 5112 	mov	r7,#0x00
      001599 C3               [12] 5113 	clr	c
      00159A E5*34            [12] 5114 	mov	a,_endAddrCalc
      00159C 9C               [12] 5115 	subb	a,r4
      00159D E5*35            [12] 5116 	mov	a,(_endAddrCalc + 1)
      00159F 9D               [12] 5117 	subb	a,r5
      0015A0 E5*36            [12] 5118 	mov	a,(_endAddrCalc + 2)
      0015A2 9E               [12] 5119 	subb	a,r6
      0015A3 E5*37            [12] 5120 	mov	a,(_endAddrCalc + 3)
      0015A5 9F               [12] 5121 	subb	a,r7
      0015A6 50 14            [24] 5122 	jnc	00102$
                                   5123 ;	ecen4330lab7.c:1537: addr1 = 0xFFFF;             // Set end address
      0015A8 75*23 FF         [24] 5124 	mov	_addr1,#0xff
                                   5125 ;	ecen4330lab7.c:1538: dataSize = addr1 - addr0;   // Recalculate data size
      0015AB 74 FF            [12] 5126 	mov	a,#0xff
      0015AD F5*24            [12] 5127 	mov	(_addr1 + 1),a
      0015AF C3               [12] 5128 	clr	c
      0015B0 95*21            [12] 5129 	subb	a,_addr0
      0015B2 F5*1B            [12] 5130 	mov	_dataSize,a
      0015B4 74 FF            [12] 5131 	mov	a,#0xff
      0015B6 95*22            [12] 5132 	subb	a,(_addr0 + 1)
      0015B8 F5*1C            [12] 5133 	mov	(_dataSize + 1),a
      0015BA 80 0C            [24] 5134 	sjmp	00103$
      0015BC                       5135 00102$:
                                   5136 ;	ecen4330lab7.c:1541: addr1 = addr0 + dataSize;
      0015BC E5*1B            [12] 5137 	mov	a,_dataSize
      0015BE 25*21            [12] 5138 	add	a,_addr0
      0015C0 F5*23            [12] 5139 	mov	_addr1,a
      0015C2 E5*1C            [12] 5140 	mov	a,(_dataSize + 1)
      0015C4 35*22            [12] 5141 	addc	a,(_addr0 + 1)
      0015C6 F5*24            [12] 5142 	mov	(_addr1 + 1),a
      0015C8                       5143 00103$:
                                   5144 ;	ecen4330lab7.c:1559: int i = addr0;
      0015C8 AE*21            [24] 5145 	mov	r6,_addr0
      0015CA AF*22            [24] 5146 	mov	r7,(_addr0 + 1)
                                   5147 ;	ecen4330lab7.c:1560: while(i <= addr1 && dataEnd == 0){
      0015CC                       5148 00111$:
      0015CC 8E 04            [24] 5149 	mov	ar4,r6
      0015CE 8F 05            [24] 5150 	mov	ar5,r7
      0015D0 C3               [12] 5151 	clr	c
      0015D1 E5*23            [12] 5152 	mov	a,_addr1
      0015D3 9C               [12] 5153 	subb	a,r4
      0015D4 E5*24            [12] 5154 	mov	a,(_addr1 + 1)
      0015D6 9D               [12] 5155 	subb	a,r5
      0015D7 40 4C            [24] 5156 	jc	00113$
      0015D9 E5*1E            [12] 5157 	mov	a,_dataEnd
      0015DB 70 48            [24] 5158 	jnz	00113$
                                   5159 ;	ecen4330lab7.c:1561: data = RAMread(i);
      0015DD 8E 82            [24] 5160 	mov	dpl,r6
      0015DF 8F 83            [24] 5161 	mov	dph,r7
      0015E1 C0 07            [24] 5162 	push	ar7
      0015E3 C0 06            [24] 5163 	push	ar6
      0015E5 12r0Dr46         [24] 5164 	lcall	_RAMread
      0015E8 85 82*20         [24] 5165 	mov	_data,dpl
      0015EB D0 06            [24] 5166 	pop	ar6
      0015ED D0 07            [24] 5167 	pop	ar7
                                   5168 ;	ecen4330lab7.c:1562: if(data == byte1){
      0015EF AC*20            [24] 5169 	mov	r4,_data
      0015F1 7D 00            [12] 5170 	mov	r5,#0x00
      0015F3 EC               [12] 5171 	mov	a,r4
      0015F4 B5*2F 1A         [24] 5172 	cjne	a,_byte1,00107$
      0015F7 ED               [12] 5173 	mov	a,r5
      0015F8 B5*30 16         [24] 5174 	cjne	a,(_byte1 + 1),00107$
                                   5175 ;	ecen4330lab7.c:1563: if(count == 0xFFFF){
      0015FB 74 FF            [12] 5176 	mov	a,#0xff
      0015FD B5*32 09         [24] 5177 	cjne	a,_count,00105$
      001600 B5*33 06         [24] 5178 	cjne	a,(_count + 1),00105$
                                   5179 ;	ecen4330lab7.c:1564: addr3 = 1;
      001603 75*27 01         [24] 5180 	mov	_addr3,#0x01
      001606 75*28 00         [24] 5181 	mov	(_addr3 + 1),#0x00
      001609                       5182 00105$:
                                   5183 ;	ecen4330lab7.c:1566: count++;
      001609 05*32            [12] 5184 	inc	_count
      00160B E4               [12] 5185 	clr	a
      00160C B5*32 02         [24] 5186 	cjne	a,_count,00173$
      00160F 05*33            [12] 5187 	inc	(_count + 1)
      001611                       5188 00173$:
      001611                       5189 00107$:
                                   5190 ;	ecen4330lab7.c:1568: if(i == 0xFFFF){
      001611 8E 04            [24] 5191 	mov	ar4,r6
      001613 8F 05            [24] 5192 	mov	ar5,r7
      001615 BC FF 06         [24] 5193 	cjne	r4,#0xff,00109$
      001618 BD FF 03         [24] 5194 	cjne	r5,#0xff,00109$
                                   5195 ;	ecen4330lab7.c:1569: dataEnd = 1;
      00161B 75*1E 01         [24] 5196 	mov	_dataEnd,#0x01
      00161E                       5197 00109$:
                                   5198 ;	ecen4330lab7.c:1571: i++;
      00161E 0E               [12] 5199 	inc	r6
      00161F BE 00 AA         [24] 5200 	cjne	r6,#0x00,00111$
      001622 0F               [12] 5201 	inc	r7
      001623 80 A7            [24] 5202 	sjmp	00111$
      001625                       5203 00113$:
                                   5204 ;	ecen4330lab7.c:1574: if(count > 0 || addr3 == 1){
      001625 E5*32            [12] 5205 	mov	a,_count
      001627 45*33            [12] 5206 	orl	a,(_count + 1)
      001629 70 0D            [24] 5207 	jnz	00119$
      00162B 74 01            [12] 5208 	mov	a,#0x01
      00162D B5*27 06         [24] 5209 	cjne	a,_addr3,00178$
      001630 14               [12] 5210 	dec	a
      001631 B5*28 02         [24] 5211 	cjne	a,(_addr3 + 1),00178$
      001634 80 02            [24] 5212 	sjmp	00179$
      001636                       5213 00178$:
      001636 80 5F            [24] 5214 	sjmp	00120$
      001638                       5215 00179$:
      001638                       5216 00119$:
                                   5217 ;	ecen4330lab7.c:1575: resetLCD();
      001638 12r0Dr59         [24] 5218 	lcall	_resetLCD
                                   5219 ;	ecen4330lab7.c:1576: setTextColor(GREEN, BLACK);
      00163B E4               [12] 5220 	clr	a
      00163C F5*00            [12] 5221 	mov	_setTextColor_PARM_2,a
      00163E F5*01            [12] 5222 	mov	(_setTextColor_PARM_2 + 1),a
      001640 90 07 E0         [24] 5223 	mov	dptr,#0x07e0
      001643 12r02rD6         [24] 5224 	lcall	_setTextColor
                                   5225 ;	ecen4330lab7.c:1577: LCD_string_write("\n0x");
      001646 90r07rB6         [24] 5226 	mov	dptr,#___str_27
      001649 75 F0 80         [24] 5227 	mov	b,#0x80
      00164C 12r09rC5         [24] 5228 	lcall	_LCD_string_write
                                   5229 ;	ecen4330lab7.c:1578: HEXtoASCII_8write(byte1);
      00164F 85*2F 82         [24] 5230 	mov	dpl,_byte1
      001652 12r0Cr35         [24] 5231 	lcall	_HEXtoASCII_8write
                                   5232 ;	ecen4330lab7.c:1579: LCD_string_write(" found\n");
      001655 90r07rBA         [24] 5233 	mov	dptr,#___str_28
      001658 75 F0 80         [24] 5234 	mov	b,#0x80
      00165B 12r09rC5         [24] 5235 	lcall	_LCD_string_write
                                   5236 ;	ecen4330lab7.c:1581: if(count > 0){
      00165E E5*32            [12] 5237 	mov	a,_count
      001660 45*33            [12] 5238 	orl	a,(_count + 1)
      001662 60 0B            [24] 5239 	jz	00117$
                                   5240 ;	ecen4330lab7.c:1582: HEXtoASCII_16write(count);
      001664 85*32 82         [24] 5241 	mov	dpl,_count
      001667 85*33 83         [24] 5242 	mov	dph,(_count + 1)
      00166A 12r0Cr72         [24] 5243 	lcall	_HEXtoASCII_16write
      00166D 80 16            [24] 5244 	sjmp	00118$
      00166F                       5245 00117$:
                                   5246 ;	ecen4330lab7.c:1584: else if(addr3 == 1){
      00166F 74 01            [12] 5247 	mov	a,#0x01
      001671 B5*27 06         [24] 5248 	cjne	a,_addr3,00181$
      001674 14               [12] 5249 	dec	a
      001675 B5*28 02         [24] 5250 	cjne	a,(_addr3 + 1),00181$
      001678 80 02            [24] 5251 	sjmp	00182$
      00167A                       5252 00181$:
      00167A 80 09            [24] 5253 	sjmp	00118$
      00167C                       5254 00182$:
                                   5255 ;	ecen4330lab7.c:1585: LCD_string_write("0x10000");
      00167C 90r07rC2         [24] 5256 	mov	dptr,#___str_29
      00167F 75 F0 80         [24] 5257 	mov	b,#0x80
      001682 12r09rC5         [24] 5258 	lcall	_LCD_string_write
      001685                       5259 00118$:
                                   5260 ;	ecen4330lab7.c:1587: LCD_string_write("\ntimes.");
      001685 90r07rCA         [24] 5261 	mov	dptr,#___str_30
      001688 75 F0 80         [24] 5262 	mov	b,#0x80
      00168B 12r09rC5         [24] 5263 	lcall	_LCD_string_write
                                   5264 ;	ecen4330lab7.c:1588: delay(300);
      00168E 90 01 2C         [24] 5265 	mov	dptr,#0x012c
      001691 12r00r25         [24] 5266 	lcall	_delay
                                   5267 ;	ecen4330lab7.c:1589: FIND_display();                 // Display dump data
      001694 02r1CrD2         [24] 5268 	ljmp	_FIND_display
      001697                       5269 00120$:
                                   5270 ;	ecen4330lab7.c:1592: resetLCD();
      001697 12r0Dr59         [24] 5271 	lcall	_resetLCD
                                   5272 ;	ecen4330lab7.c:1593: LCD_string_write("\n0x");
      00169A 90r07rB6         [24] 5273 	mov	dptr,#___str_27
      00169D 75 F0 80         [24] 5274 	mov	b,#0x80
      0016A0 12r09rC5         [24] 5275 	lcall	_LCD_string_write
                                   5276 ;	ecen4330lab7.c:1594: HEXtoASCII_8write(byte1);
      0016A3 85*2F 82         [24] 5277 	mov	dpl,_byte1
      0016A6 12r0Cr35         [24] 5278 	lcall	_HEXtoASCII_8write
                                   5279 ;	ecen4330lab7.c:1595: LCD_string_write(" not\nfound in\nexternal RAM\n");
      0016A9 90r07rD2         [24] 5280 	mov	dptr,#___str_31
      0016AC 75 F0 80         [24] 5281 	mov	b,#0x80
      0016AF 12r09rC5         [24] 5282 	lcall	_LCD_string_write
                                   5283 ;	ecen4330lab7.c:1596: HEXtoASCII_16write(addr0);
      0016B2 85*21 82         [24] 5284 	mov	dpl,_addr0
      0016B5 85*22 83         [24] 5285 	mov	dph,(_addr0 + 1)
      0016B8 12r0Cr72         [24] 5286 	lcall	_HEXtoASCII_16write
                                   5287 ;	ecen4330lab7.c:1597: LCD_string_write(" -\n");
      0016BB 90r07rEE         [24] 5288 	mov	dptr,#___str_32
      0016BE 75 F0 80         [24] 5289 	mov	b,#0x80
      0016C1 12r09rC5         [24] 5290 	lcall	_LCD_string_write
                                   5291 ;	ecen4330lab7.c:1598: HEXtoASCII_16write(addr1);
      0016C4 85*23 82         [24] 5292 	mov	dpl,_addr1
      0016C7 85*24 83         [24] 5293 	mov	dph,(_addr1 + 1)
      0016CA 12r0Cr72         [24] 5294 	lcall	_HEXtoASCII_16write
                                   5295 ;	ecen4330lab7.c:1599: delay(300);
      0016CD 90 01 2C         [24] 5296 	mov	dptr,#0x012c
      0016D0 12r00r25         [24] 5297 	lcall	_delay
                                   5298 ;	ecen4330lab7.c:1600: resetLCD();
      0016D3 12r0Dr59         [24] 5299 	lcall	_resetLCD
                                   5300 ;	ecen4330lab7.c:1601: LCD_string_write("Returning to\nmain menu.");
      0016D6 90r06r1F         [24] 5301 	mov	dptr,#___str_15
      0016D9 75 F0 80         [24] 5302 	mov	b,#0x80
      0016DC 12r09rC5         [24] 5303 	lcall	_LCD_string_write
                                   5304 ;	ecen4330lab7.c:1602: delay(200);
      0016DF 90 00 C8         [24] 5305 	mov	dptr,#0x00c8
                                   5306 ;	ecen4330lab7.c:1604: }
      0016E2 02r00r25         [24] 5307 	ljmp	_delay
                                   5308 ;------------------------------------------------------------
                                   5309 ;Allocation info for local variables in function 'DUMP_display'
                                   5310 ;------------------------------------------------------------
                                   5311 ;i                         Allocated to registers r6 r7 
                                   5312 ;j                         Allocated to registers r4 r5 
                                   5313 ;------------------------------------------------------------
                                   5314 ;	ecen4330lab7.c:1613: void DUMP_display(){
                                   5315 ;	-----------------------------------------
                                   5316 ;	 function DUMP_display
                                   5317 ;	-----------------------------------------
      0016E5                       5318 _DUMP_display:
                                   5319 ;	ecen4330lab7.c:1616: currAddr1 = 0;              // Page Count
      0016E5 E4               [12] 5320 	clr	a
      0016E6 F5*2B            [12] 5321 	mov	_currAddr1,a
      0016E8 F5*2C            [12] 5322 	mov	(_currAddr1 + 1),a
                                   5323 ;	ecen4330lab7.c:1617: dataEnd = 0;
                                   5324 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      0016EA F5*1E            [12] 5325 	mov	_dataEnd,a
                                   5326 ;	ecen4330lab7.c:1618: addr2 = 0;					// Prev data count
      0016EC F5*25            [12] 5327 	mov	_addr2,a
      0016EE F5*26            [12] 5328 	mov	(_addr2 + 1),a
                                   5329 ;	ecen4330lab7.c:1620: currAddr0 = addr0;          // Set current address
      0016F0 85*21*29         [24] 5330 	mov	_currAddr0,_addr0
      0016F3 85*22*2A         [24] 5331 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5332 ;	ecen4330lab7.c:1622: do{
      0016F6                       5333 00134$:
                                   5334 ;	ecen4330lab7.c:1623: resetLCD();
      0016F6 12r0Dr59         [24] 5335 	lcall	_resetLCD
                                   5336 ;	ecen4330lab7.c:1624: setTextSize(2);
      0016F9 75 82 02         [24] 5337 	mov	dpl,#0x02
      0016FC 12r02rE3         [24] 5338 	lcall	_setTextSize
                                   5339 ;	ecen4330lab7.c:1625: LCD_string_write("\n");
      0016FF 90r07rF2         [24] 5340 	mov	dptr,#___str_33
      001702 75 F0 80         [24] 5341 	mov	b,#0x80
      001705 12r09rC5         [24] 5342 	lcall	_LCD_string_write
                                   5343 ;	ecen4330lab7.c:1628: if(dataSize >= 10){
      001708 C3               [12] 5344 	clr	c
      001709 E5*1B            [12] 5345 	mov	a,_dataSize
      00170B 94 0A            [12] 5346 	subb	a,#0x0a
      00170D E5*1C            [12] 5347 	mov	a,(_dataSize + 1)
      00170F 94 00            [12] 5348 	subb	a,#0x00
      001711 50 03            [24] 5349 	jnc	00258$
      001713 02r17rB4         [24] 5350 	ljmp	00119$
      001716                       5351 00258$:
                                   5352 ;	ecen4330lab7.c:1629: addr2 = 10;
      001716 75*25 0A         [24] 5353 	mov	_addr2,#0x0a
      001719 75*26 00         [24] 5354 	mov	(_addr2 + 1),#0x00
                                   5355 ;	ecen4330lab7.c:1631: for(i = 0; i < 10; i++){
      00171C 7E 00            [12] 5356 	mov	r6,#0x00
      00171E 7F 00            [12] 5357 	mov	r7,#0x00
      001720                       5358 00140$:
                                   5359 ;	ecen4330lab7.c:1632: HEXtoASCII_16write(currAddr0);
      001720 85*29 82         [24] 5360 	mov	dpl,_currAddr0
      001723 85*2A 83         [24] 5361 	mov	dph,(_currAddr0 + 1)
      001726 C0 07            [24] 5362 	push	ar7
      001728 C0 06            [24] 5363 	push	ar6
      00172A 12r0Cr72         [24] 5364 	lcall	_HEXtoASCII_16write
                                   5365 ;	ecen4330lab7.c:1633: LCD_string_write(": 0x");
      00172D 90r06r1A         [24] 5366 	mov	dptr,#___str_14
      001730 75 F0 80         [24] 5367 	mov	b,#0x80
      001733 12r09rC5         [24] 5368 	lcall	_LCD_string_write
      001736 D0 06            [24] 5369 	pop	ar6
      001738 D0 07            [24] 5370 	pop	ar7
                                   5371 ;	ecen4330lab7.c:1634: for(j = 0; j < dataType; j++){
      00173A 7C 00            [12] 5372 	mov	r4,#0x00
      00173C 7D 00            [12] 5373 	mov	r5,#0x00
      00173E                       5374 00138$:
      00173E AA*1A            [24] 5375 	mov	r2,_dataType
      001740 7B 00            [12] 5376 	mov	r3,#0x00
      001742 C3               [12] 5377 	clr	c
      001743 EC               [12] 5378 	mov	a,r4
      001744 9A               [12] 5379 	subb	a,r2
      001745 ED               [12] 5380 	mov	a,r5
      001746 64 80            [12] 5381 	xrl	a,#0x80
      001748 8B F0            [24] 5382 	mov	b,r3
      00174A 63 F0 80         [24] 5383 	xrl	b,#0x80
      00174D 95 F0            [12] 5384 	subb	a,b
      00174F 50 2B            [24] 5385 	jnc	00101$
                                   5386 ;	ecen4330lab7.c:1635: HEXtoASCII_8write(RAMread(currAddr0));
      001751 85*29 82         [24] 5387 	mov	dpl,_currAddr0
      001754 85*2A 83         [24] 5388 	mov	dph,(_currAddr0 + 1)
      001757 C0 07            [24] 5389 	push	ar7
      001759 C0 06            [24] 5390 	push	ar6
      00175B C0 05            [24] 5391 	push	ar5
      00175D C0 04            [24] 5392 	push	ar4
      00175F 12r0Dr46         [24] 5393 	lcall	_RAMread
      001762 12r0Cr35         [24] 5394 	lcall	_HEXtoASCII_8write
      001765 D0 04            [24] 5395 	pop	ar4
      001767 D0 05            [24] 5396 	pop	ar5
      001769 D0 06            [24] 5397 	pop	ar6
      00176B D0 07            [24] 5398 	pop	ar7
                                   5399 ;	ecen4330lab7.c:1636: currAddr0++;
      00176D 05*29            [12] 5400 	inc	_currAddr0
      00176F E4               [12] 5401 	clr	a
      001770 B5*29 02         [24] 5402 	cjne	a,_currAddr0,00260$
      001773 05*2A            [12] 5403 	inc	(_currAddr0 + 1)
      001775                       5404 00260$:
                                   5405 ;	ecen4330lab7.c:1634: for(j = 0; j < dataType; j++){
      001775 0C               [12] 5406 	inc	r4
      001776 BC 00 C5         [24] 5407 	cjne	r4,#0x00,00138$
      001779 0D               [12] 5408 	inc	r5
      00177A 80 C2            [24] 5409 	sjmp	00138$
      00177C                       5410 00101$:
                                   5411 ;	ecen4330lab7.c:1638: LCD_string_write("\n");
      00177C 90r07rF2         [24] 5412 	mov	dptr,#___str_33
      00177F 75 F0 80         [24] 5413 	mov	b,#0x80
      001782 C0 07            [24] 5414 	push	ar7
      001784 C0 06            [24] 5415 	push	ar6
      001786 12r09rC5         [24] 5416 	lcall	_LCD_string_write
      001789 D0 06            [24] 5417 	pop	ar6
      00178B D0 07            [24] 5418 	pop	ar7
                                   5419 ;	ecen4330lab7.c:1639: dataSize--;
      00178D 15*1B            [12] 5420 	dec	_dataSize
      00178F 74 FF            [12] 5421 	mov	a,#0xff
      001791 B5*1B 02         [24] 5422 	cjne	a,_dataSize,00262$
      001794 15*1C            [12] 5423 	dec	(_dataSize + 1)
      001796                       5424 00262$:
                                   5425 ;	ecen4330lab7.c:1631: for(i = 0; i < 10; i++){
      001796 0E               [12] 5426 	inc	r6
      001797 BE 00 01         [24] 5427 	cjne	r6,#0x00,00263$
      00179A 0F               [12] 5428 	inc	r7
      00179B                       5429 00263$:
      00179B C3               [12] 5430 	clr	c
      00179C EE               [12] 5431 	mov	a,r6
      00179D 94 0A            [12] 5432 	subb	a,#0x0a
      00179F EF               [12] 5433 	mov	a,r7
      0017A0 64 80            [12] 5434 	xrl	a,#0x80
      0017A2 94 80            [12] 5435 	subb	a,#0x80
      0017A4 50 03            [24] 5436 	jnc	00264$
      0017A6 02r17r20         [24] 5437 	ljmp	00140$
      0017A9                       5438 00264$:
                                   5439 ;	ecen4330lab7.c:1641: currAddr1++;        // Next page
      0017A9 05*2B            [12] 5440 	inc	_currAddr1
      0017AB E4               [12] 5441 	clr	a
      0017AC B5*2B 02         [24] 5442 	cjne	a,_currAddr1,00265$
      0017AF 05*2C            [12] 5443 	inc	(_currAddr1 + 1)
      0017B1                       5444 00265$:
      0017B1 02r19r19         [24] 5445 	ljmp	00120$
      0017B4                       5446 00119$:
                                   5447 ;	ecen4330lab7.c:1645: else if(dataSize > 0 && dataSize < 10){
      0017B4 E5*1B            [12] 5448 	mov	a,_dataSize
      0017B6 45*1C            [12] 5449 	orl	a,(_dataSize + 1)
      0017B8 70 03            [24] 5450 	jnz	00266$
      0017BA 02r18rA3         [24] 5451 	ljmp	00115$
      0017BD                       5452 00266$:
      0017BD C3               [12] 5453 	clr	c
      0017BE E5*1B            [12] 5454 	mov	a,_dataSize
      0017C0 94 0A            [12] 5455 	subb	a,#0x0a
      0017C2 E5*1C            [12] 5456 	mov	a,(_dataSize + 1)
      0017C4 94 00            [12] 5457 	subb	a,#0x00
      0017C6 40 03            [24] 5458 	jc	00267$
      0017C8 02r18rA3         [24] 5459 	ljmp	00115$
      0017CB                       5460 00267$:
                                   5461 ;	ecen4330lab7.c:1646: addr2 = dataSize;
      0017CB 85*1B*25         [24] 5462 	mov	_addr2,_dataSize
      0017CE 85*1C*26         [24] 5463 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5464 ;	ecen4330lab7.c:1648: while(dataSize > 0){
      0017D1                       5465 00104$:
      0017D1 E5*1B            [12] 5466 	mov	a,_dataSize
      0017D3 45*1C            [12] 5467 	orl	a,(_dataSize + 1)
      0017D5 60 60            [24] 5468 	jz	00106$
                                   5469 ;	ecen4330lab7.c:1649: HEXtoASCII_16write(currAddr0);
      0017D7 85*29 82         [24] 5470 	mov	dpl,_currAddr0
      0017DA 85*2A 83         [24] 5471 	mov	dph,(_currAddr0 + 1)
      0017DD 12r0Cr72         [24] 5472 	lcall	_HEXtoASCII_16write
                                   5473 ;	ecen4330lab7.c:1650: LCD_string_write(": 0x");
      0017E0 90r06r1A         [24] 5474 	mov	dptr,#___str_14
      0017E3 75 F0 80         [24] 5475 	mov	b,#0x80
      0017E6 12r09rC5         [24] 5476 	lcall	_LCD_string_write
                                   5477 ;	ecen4330lab7.c:1651: for(j = 0; j < dataType; j++){
      0017E9 7E 00            [12] 5478 	mov	r6,#0x00
      0017EB 7F 00            [12] 5479 	mov	r7,#0x00
      0017ED                       5480 00143$:
      0017ED AC*1A            [24] 5481 	mov	r4,_dataType
      0017EF 7D 00            [12] 5482 	mov	r5,#0x00
      0017F1 C3               [12] 5483 	clr	c
      0017F2 EE               [12] 5484 	mov	a,r6
      0017F3 9C               [12] 5485 	subb	a,r4
      0017F4 EF               [12] 5486 	mov	a,r7
      0017F5 64 80            [12] 5487 	xrl	a,#0x80
      0017F7 8D F0            [24] 5488 	mov	b,r5
      0017F9 63 F0 80         [24] 5489 	xrl	b,#0x80
      0017FC 95 F0            [12] 5490 	subb	a,b
      0017FE 50 23            [24] 5491 	jnc	00103$
                                   5492 ;	ecen4330lab7.c:1652: HEXtoASCII_8write(RAMread(currAddr0));
      001800 85*29 82         [24] 5493 	mov	dpl,_currAddr0
      001803 85*2A 83         [24] 5494 	mov	dph,(_currAddr0 + 1)
      001806 C0 07            [24] 5495 	push	ar7
      001808 C0 06            [24] 5496 	push	ar6
      00180A 12r0Dr46         [24] 5497 	lcall	_RAMread
      00180D 12r0Cr35         [24] 5498 	lcall	_HEXtoASCII_8write
      001810 D0 06            [24] 5499 	pop	ar6
      001812 D0 07            [24] 5500 	pop	ar7
                                   5501 ;	ecen4330lab7.c:1653: currAddr0++;
      001814 05*29            [12] 5502 	inc	_currAddr0
      001816 E4               [12] 5503 	clr	a
      001817 B5*29 02         [24] 5504 	cjne	a,_currAddr0,00270$
      00181A 05*2A            [12] 5505 	inc	(_currAddr0 + 1)
      00181C                       5506 00270$:
                                   5507 ;	ecen4330lab7.c:1651: for(j = 0; j < dataType; j++){
      00181C 0E               [12] 5508 	inc	r6
      00181D BE 00 CD         [24] 5509 	cjne	r6,#0x00,00143$
      001820 0F               [12] 5510 	inc	r7
      001821 80 CA            [24] 5511 	sjmp	00143$
      001823                       5512 00103$:
                                   5513 ;	ecen4330lab7.c:1655: LCD_string_write("\n");
      001823 90r07rF2         [24] 5514 	mov	dptr,#___str_33
      001826 75 F0 80         [24] 5515 	mov	b,#0x80
      001829 12r09rC5         [24] 5516 	lcall	_LCD_string_write
                                   5517 ;	ecen4330lab7.c:1656: dataSize--;
      00182C 15*1B            [12] 5518 	dec	_dataSize
      00182E 74 FF            [12] 5519 	mov	a,#0xff
      001830 B5*1B 02         [24] 5520 	cjne	a,_dataSize,00272$
      001833 15*1C            [12] 5521 	dec	(_dataSize + 1)
      001835                       5522 00272$:
      001835 80 9A            [24] 5523 	sjmp	00104$
      001837                       5524 00106$:
                                   5525 ;	ecen4330lab7.c:1658: if(addr3 > 0){
      001837 E5*27            [12] 5526 	mov	a,_addr3
      001839 45*28            [12] 5527 	orl	a,(_addr3 + 1)
      00183B 60 5C            [24] 5528 	jz	00109$
                                   5529 ;	ecen4330lab7.c:1659: HEXtoASCII_16write(currAddr0);
      00183D 85*29 82         [24] 5530 	mov	dpl,_currAddr0
      001840 85*2A 83         [24] 5531 	mov	dph,(_currAddr0 + 1)
      001843 12r0Cr72         [24] 5532 	lcall	_HEXtoASCII_16write
                                   5533 ;	ecen4330lab7.c:1660: LCD_string_write(": 0x");
      001846 90r06r1A         [24] 5534 	mov	dptr,#___str_14
      001849 75 F0 80         [24] 5535 	mov	b,#0x80
      00184C 12r09rC5         [24] 5536 	lcall	_LCD_string_write
                                   5537 ;	ecen4330lab7.c:1661: for(j = 0; j < addr3; j++){
      00184F 7E 00            [12] 5538 	mov	r6,#0x00
      001851 7F 00            [12] 5539 	mov	r7,#0x00
      001853                       5540 00146$:
      001853 8E 04            [24] 5541 	mov	ar4,r6
      001855 8F 05            [24] 5542 	mov	ar5,r7
      001857 C3               [12] 5543 	clr	c
      001858 EC               [12] 5544 	mov	a,r4
      001859 95*27            [12] 5545 	subb	a,_addr3
      00185B ED               [12] 5546 	mov	a,r5
      00185C 95*28            [12] 5547 	subb	a,(_addr3 + 1)
      00185E 50 23            [24] 5548 	jnc	00107$
                                   5549 ;	ecen4330lab7.c:1662: HEXtoASCII_8write(RAMread(currAddr0));
      001860 85*29 82         [24] 5550 	mov	dpl,_currAddr0
      001863 85*2A 83         [24] 5551 	mov	dph,(_currAddr0 + 1)
      001866 C0 07            [24] 5552 	push	ar7
      001868 C0 06            [24] 5553 	push	ar6
      00186A 12r0Dr46         [24] 5554 	lcall	_RAMread
      00186D 12r0Cr35         [24] 5555 	lcall	_HEXtoASCII_8write
      001870 D0 06            [24] 5556 	pop	ar6
      001872 D0 07            [24] 5557 	pop	ar7
                                   5558 ;	ecen4330lab7.c:1663: currAddr0++;
      001874 05*29            [12] 5559 	inc	_currAddr0
      001876 E4               [12] 5560 	clr	a
      001877 B5*29 02         [24] 5561 	cjne	a,_currAddr0,00275$
      00187A 05*2A            [12] 5562 	inc	(_currAddr0 + 1)
      00187C                       5563 00275$:
                                   5564 ;	ecen4330lab7.c:1661: for(j = 0; j < addr3; j++){
      00187C 0E               [12] 5565 	inc	r6
      00187D BE 00 D3         [24] 5566 	cjne	r6,#0x00,00146$
      001880 0F               [12] 5567 	inc	r7
      001881 80 D0            [24] 5568 	sjmp	00146$
      001883                       5569 00107$:
                                   5570 ;	ecen4330lab7.c:1665: currAddr0 -= addr3;
      001883 E5*29            [12] 5571 	mov	a,_currAddr0
      001885 C3               [12] 5572 	clr	c
      001886 95*27            [12] 5573 	subb	a,_addr3
      001888 F5*29            [12] 5574 	mov	_currAddr0,a
      00188A E5*2A            [12] 5575 	mov	a,(_currAddr0 + 1)
      00188C 95*28            [12] 5576 	subb	a,(_addr3 + 1)
      00188E F5*2A            [12] 5577 	mov	(_currAddr0 + 1),a
                                   5578 ;	ecen4330lab7.c:1666: LCD_string_write("\n");
      001890 90r07rF2         [24] 5579 	mov	dptr,#___str_33
      001893 75 F0 80         [24] 5580 	mov	b,#0x80
      001896 12r09rC5         [24] 5581 	lcall	_LCD_string_write
      001899                       5582 00109$:
                                   5583 ;	ecen4330lab7.c:1668: currAddr1++; 
      001899 05*2B            [12] 5584 	inc	_currAddr1
      00189B E4               [12] 5585 	clr	a
      00189C B5*2B 7A         [24] 5586 	cjne	a,_currAddr1,00120$
      00189F 05*2C            [12] 5587 	inc	(_currAddr1 + 1)
      0018A1 80 76            [24] 5588 	sjmp	00120$
      0018A3                       5589 00115$:
                                   5590 ;	ecen4330lab7.c:1671: else if(dataSize == 0 && addr3 > 0){
      0018A3 E5*1B            [12] 5591 	mov	a,_dataSize
      0018A5 45*1C            [12] 5592 	orl	a,(_dataSize + 1)
      0018A7 70 70            [24] 5593 	jnz	00120$
      0018A9 E5*27            [12] 5594 	mov	a,_addr3
      0018AB 45*28            [12] 5595 	orl	a,(_addr3 + 1)
      0018AD 60 6A            [24] 5596 	jz	00120$
                                   5597 ;	ecen4330lab7.c:1672: addr2 = dataSize;
      0018AF 85*1B*25         [24] 5598 	mov	_addr2,_dataSize
      0018B2 85*1C*26         [24] 5599 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5600 ;	ecen4330lab7.c:1673: HEXtoASCII_16write(currAddr0);
      0018B5 85*29 82         [24] 5601 	mov	dpl,_currAddr0
      0018B8 85*2A 83         [24] 5602 	mov	dph,(_currAddr0 + 1)
      0018BB 12r0Cr72         [24] 5603 	lcall	_HEXtoASCII_16write
                                   5604 ;	ecen4330lab7.c:1674: LCD_string_write(": 0x");
      0018BE 90r06r1A         [24] 5605 	mov	dptr,#___str_14
      0018C1 75 F0 80         [24] 5606 	mov	b,#0x80
      0018C4 12r09rC5         [24] 5607 	lcall	_LCD_string_write
                                   5608 ;	ecen4330lab7.c:1675: for(j = 0; j < addr3; j++){
      0018C7 7E 00            [12] 5609 	mov	r6,#0x00
      0018C9 7F 00            [12] 5610 	mov	r7,#0x00
      0018CB                       5611 00149$:
      0018CB 8E 04            [24] 5612 	mov	ar4,r6
      0018CD 8F 05            [24] 5613 	mov	ar5,r7
      0018CF C3               [12] 5614 	clr	c
      0018D0 EC               [12] 5615 	mov	a,r4
      0018D1 95*27            [12] 5616 	subb	a,_addr3
      0018D3 ED               [12] 5617 	mov	a,r5
      0018D4 95*28            [12] 5618 	subb	a,(_addr3 + 1)
      0018D6 50 23            [24] 5619 	jnc	00110$
                                   5620 ;	ecen4330lab7.c:1676: HEXtoASCII_8write(RAMread(currAddr0));
      0018D8 85*29 82         [24] 5621 	mov	dpl,_currAddr0
      0018DB 85*2A 83         [24] 5622 	mov	dph,(_currAddr0 + 1)
      0018DE C0 07            [24] 5623 	push	ar7
      0018E0 C0 06            [24] 5624 	push	ar6
      0018E2 12r0Dr46         [24] 5625 	lcall	_RAMread
      0018E5 12r0Cr35         [24] 5626 	lcall	_HEXtoASCII_8write
      0018E8 D0 06            [24] 5627 	pop	ar6
      0018EA D0 07            [24] 5628 	pop	ar7
                                   5629 ;	ecen4330lab7.c:1677: currAddr0++;
      0018EC 05*29            [12] 5630 	inc	_currAddr0
      0018EE E4               [12] 5631 	clr	a
      0018EF B5*29 02         [24] 5632 	cjne	a,_currAddr0,00281$
      0018F2 05*2A            [12] 5633 	inc	(_currAddr0 + 1)
      0018F4                       5634 00281$:
                                   5635 ;	ecen4330lab7.c:1675: for(j = 0; j < addr3; j++){
      0018F4 0E               [12] 5636 	inc	r6
      0018F5 BE 00 D3         [24] 5637 	cjne	r6,#0x00,00149$
      0018F8 0F               [12] 5638 	inc	r7
      0018F9 80 D0            [24] 5639 	sjmp	00149$
      0018FB                       5640 00110$:
                                   5641 ;	ecen4330lab7.c:1679: LCD_string_write("\n");
      0018FB 90r07rF2         [24] 5642 	mov	dptr,#___str_33
      0018FE 75 F0 80         [24] 5643 	mov	b,#0x80
      001901 12r09rC5         [24] 5644 	lcall	_LCD_string_write
                                   5645 ;	ecen4330lab7.c:1680: currAddr1++; 
      001904 05*2B            [12] 5646 	inc	_currAddr1
      001906 E4               [12] 5647 	clr	a
      001907 B5*2B 02         [24] 5648 	cjne	a,_currAddr1,00283$
      00190A 05*2C            [12] 5649 	inc	(_currAddr1 + 1)
      00190C                       5650 00283$:
                                   5651 ;	ecen4330lab7.c:1681: currAddr0 -= addr3;
      00190C E5*29            [12] 5652 	mov	a,_currAddr0
      00190E C3               [12] 5653 	clr	c
      00190F 95*27            [12] 5654 	subb	a,_addr3
      001911 F5*29            [12] 5655 	mov	_currAddr0,a
      001913 E5*2A            [12] 5656 	mov	a,(_currAddr0 + 1)
      001915 95*28            [12] 5657 	subb	a,(_addr3 + 1)
      001917 F5*2A            [12] 5658 	mov	(_currAddr0 + 1),a
      001919                       5659 00120$:
                                   5660 ;	ecen4330lab7.c:1685: setCursor(0, 250);
      001919 75*00 FA         [24] 5661 	mov	_setCursor_PARM_2,#0xfa
      00191C 75*01 00         [24] 5662 	mov	(_setCursor_PARM_2 + 1),#0x00
      00191F 90 00 00         [24] 5663 	mov	dptr,#0x0000
      001922 12r02rC9         [24] 5664 	lcall	_setCursor
                                   5665 ;	ecen4330lab7.c:1686: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001925 90r07rF4         [24] 5666 	mov	dptr,#___str_34
      001928 75 F0 80         [24] 5667 	mov	b,#0x80
      00192B 12r09rC5         [24] 5668 	lcall	_LCD_string_write
                                   5669 ;	ecen4330lab7.c:1687: HEXtoASCII_16write(currAddr1);
      00192E 85*2B 82         [24] 5670 	mov	dpl,_currAddr1
      001931 85*2C 83         [24] 5671 	mov	dph,(_currAddr1 + 1)
      001934 12r0Cr72         [24] 5672 	lcall	_HEXtoASCII_16write
                                   5673 ;	ecen4330lab7.c:1688: key = keyDetect();
      001937 12r0Ar04         [24] 5674 	lcall	_keyDetect
      00193A 85 82*16         [24] 5675 	mov	_key,dpl
                                   5676 ;	ecen4330lab7.c:1689: switch (key)
      00193D 74 30            [12] 5677 	mov	a,#0x30
      00193F B5*16 02         [24] 5678 	cjne	a,_key,00284$
      001942 80 12            [24] 5679 	sjmp	00121$
      001944                       5680 00284$:
      001944 74 31            [12] 5681 	mov	a,#0x31
      001946 B5*16 02         [24] 5682 	cjne	a,_key,00285$
      001949 80 65            [24] 5683 	sjmp	00125$
      00194B                       5684 00285$:
      00194B 74 45            [12] 5685 	mov	a,#0x45
      00194D B5*16 03         [24] 5686 	cjne	a,_key,00286$
      001950 02r1Ar4D         [24] 5687 	ljmp	00129$
      001953                       5688 00286$:
      001953 02r1Ar64         [24] 5689 	ljmp	00130$
                                   5690 ;	ecen4330lab7.c:1693: case '0':
      001956                       5691 00121$:
                                   5692 ;	ecen4330lab7.c:1694: validInput = 1;
      001956 75*1D 01         [24] 5693 	mov	_validInput,#0x01
                                   5694 ;	ecen4330lab7.c:1697: if(dataSize > 0){
      001959 E5*1B            [12] 5695 	mov	a,_dataSize
      00195B 45*1C            [12] 5696 	orl	a,(_dataSize + 1)
      00195D 60 06            [24] 5697 	jz	00123$
                                   5698 ;	ecen4330lab7.c:1698: dataEnd = 0;
      00195F 75*1E 00         [24] 5699 	mov	_dataEnd,#0x00
      001962 02r1ArA8         [24] 5700 	ljmp	00135$
      001965                       5701 00123$:
                                   5702 ;	ecen4330lab7.c:1704: dataEnd = 0;
      001965 75*1E 00         [24] 5703 	mov	_dataEnd,#0x00
                                   5704 ;	ecen4330lab7.c:1705: currAddr0 -= (addr2 * dataType); // 1st address of previous page displayed
      001968 85*1A*00         [24] 5705 	mov	__mulint_PARM_2,_dataType
      00196B 75*01 00         [24] 5706 	mov	(__mulint_PARM_2 + 1),#0x00
      00196E 85*25 82         [24] 5707 	mov	dpl,_addr2
      001971 85*26 83         [24] 5708 	mov	dph,(_addr2 + 1)
      001974 12r00r00         [24] 5709 	lcall	__mulint
      001977 AE 82            [24] 5710 	mov	r6,dpl
      001979 AF 83            [24] 5711 	mov	r7,dph
      00197B E5*29            [12] 5712 	mov	a,_currAddr0
      00197D C3               [12] 5713 	clr	c
      00197E 9E               [12] 5714 	subb	a,r6
      00197F F5*29            [12] 5715 	mov	_currAddr0,a
      001981 E5*2A            [12] 5716 	mov	a,(_currAddr0 + 1)
      001983 9F               [12] 5717 	subb	a,r7
      001984 F5*2A            [12] 5718 	mov	(_currAddr0 + 1),a
                                   5719 ;	ecen4330lab7.c:1706: dataSize += addr2;  // restore data size of previous page
      001986 E5*25            [12] 5720 	mov	a,_addr2
      001988 25*1B            [12] 5721 	add	a,_dataSize
      00198A F5*1B            [12] 5722 	mov	_dataSize,a
      00198C E5*26            [12] 5723 	mov	a,(_addr2 + 1)
      00198E 35*1C            [12] 5724 	addc	a,(_dataSize + 1)
      001990 F5*1C            [12] 5725 	mov	(_dataSize + 1),a
                                   5726 ;	ecen4330lab7.c:1707: currAddr1--;
      001992 15*2B            [12] 5727 	dec	_currAddr1
      001994 74 FF            [12] 5728 	mov	a,#0xff
      001996 B5*2B 02         [24] 5729 	cjne	a,_currAddr1,00288$
      001999 15*2C            [12] 5730 	dec	(_currAddr1 + 1)
      00199B                       5731 00288$:
                                   5732 ;	ecen4330lab7.c:1708: resetLCD();
      00199B 12r0Dr59         [24] 5733 	lcall	_resetLCD
                                   5734 ;	ecen4330lab7.c:1709: LCD_string_write("\nEnd of Data.");
      00199E 90r08r25         [24] 5735 	mov	dptr,#___str_35
      0019A1 75 F0 80         [24] 5736 	mov	b,#0x80
      0019A4 12r09rC5         [24] 5737 	lcall	_LCD_string_write
                                   5738 ;	ecen4330lab7.c:1710: delay(200);
      0019A7 90 00 C8         [24] 5739 	mov	dptr,#0x00c8
      0019AA 12r00r25         [24] 5740 	lcall	_delay
                                   5741 ;	ecen4330lab7.c:1712: break;
      0019AD 02r1ArA8         [24] 5742 	ljmp	00135$
                                   5743 ;	ecen4330lab7.c:1715: case '1':
      0019B0                       5744 00125$:
                                   5745 ;	ecen4330lab7.c:1718: if(currAddr1 > 1){
      0019B0 C3               [12] 5746 	clr	c
      0019B1 74 01            [12] 5747 	mov	a,#0x01
      0019B3 95*2B            [12] 5748 	subb	a,_currAddr1
      0019B5 E4               [12] 5749 	clr	a
      0019B6 95*2C            [12] 5750 	subb	a,(_currAddr1 + 1)
      0019B8 50 49            [24] 5751 	jnc	00127$
                                   5752 ;	ecen4330lab7.c:1719: dataEnd = 0;
      0019BA 75*1E 00         [24] 5753 	mov	_dataEnd,#0x00
                                   5754 ;	ecen4330lab7.c:1720: currAddr0 -= ((addr2 + 10) * dataType);
      0019BD 74 0A            [12] 5755 	mov	a,#0x0a
      0019BF 25*25            [12] 5756 	add	a,_addr2
      0019C1 FE               [12] 5757 	mov	r6,a
      0019C2 E4               [12] 5758 	clr	a
      0019C3 35*26            [12] 5759 	addc	a,(_addr2 + 1)
      0019C5 FF               [12] 5760 	mov	r7,a
      0019C6 85*1A*00         [24] 5761 	mov	__mulint_PARM_2,_dataType
      0019C9 75*01 00         [24] 5762 	mov	(__mulint_PARM_2 + 1),#0x00
      0019CC 8E 82            [24] 5763 	mov	dpl,r6
      0019CE 8F 83            [24] 5764 	mov	dph,r7
      0019D0 C0 07            [24] 5765 	push	ar7
      0019D2 C0 06            [24] 5766 	push	ar6
      0019D4 12r00r00         [24] 5767 	lcall	__mulint
      0019D7 AC 82            [24] 5768 	mov	r4,dpl
      0019D9 AD 83            [24] 5769 	mov	r5,dph
      0019DB D0 06            [24] 5770 	pop	ar6
      0019DD D0 07            [24] 5771 	pop	ar7
      0019DF E5*29            [12] 5772 	mov	a,_currAddr0
      0019E1 C3               [12] 5773 	clr	c
      0019E2 9C               [12] 5774 	subb	a,r4
      0019E3 F5*29            [12] 5775 	mov	_currAddr0,a
      0019E5 E5*2A            [12] 5776 	mov	a,(_currAddr0 + 1)
      0019E7 9D               [12] 5777 	subb	a,r5
      0019E8 F5*2A            [12] 5778 	mov	(_currAddr0 + 1),a
                                   5779 ;	ecen4330lab7.c:1721: currAddr1 -= 2;
      0019EA E5*2B            [12] 5780 	mov	a,_currAddr1
      0019EC 24 FE            [12] 5781 	add	a,#0xfe
      0019EE F5*2B            [12] 5782 	mov	_currAddr1,a
      0019F0 E5*2C            [12] 5783 	mov	a,(_currAddr1 + 1)
      0019F2 34 FF            [12] 5784 	addc	a,#0xff
      0019F4 F5*2C            [12] 5785 	mov	(_currAddr1 + 1),a
                                   5786 ;	ecen4330lab7.c:1722: dataSize += (addr2 + 10);
      0019F6 EE               [12] 5787 	mov	a,r6
      0019F7 25*1B            [12] 5788 	add	a,_dataSize
      0019F9 F5*1B            [12] 5789 	mov	_dataSize,a
      0019FB EF               [12] 5790 	mov	a,r7
      0019FC 35*1C            [12] 5791 	addc	a,(_dataSize + 1)
      0019FE F5*1C            [12] 5792 	mov	(_dataSize + 1),a
      001A00 02r1ArA8         [24] 5793 	ljmp	00135$
      001A03                       5794 00127$:
                                   5795 ;	ecen4330lab7.c:1727: dataEnd = 0;
      001A03 75*1E 00         [24] 5796 	mov	_dataEnd,#0x00
                                   5797 ;	ecen4330lab7.c:1728: resetLCD();
      001A06 12r0Dr59         [24] 5798 	lcall	_resetLCD
                                   5799 ;	ecen4330lab7.c:1729: LCD_string_write("End of Data");
      001A09 90r08r33         [24] 5800 	mov	dptr,#___str_36
      001A0C 75 F0 80         [24] 5801 	mov	b,#0x80
      001A0F 12r09rC5         [24] 5802 	lcall	_LCD_string_write
                                   5803 ;	ecen4330lab7.c:1730: delay(200);
      001A12 90 00 C8         [24] 5804 	mov	dptr,#0x00c8
      001A15 12r00r25         [24] 5805 	lcall	_delay
                                   5806 ;	ecen4330lab7.c:1731: currAddr0 -= (addr2 * dataType);
      001A18 85*1A*00         [24] 5807 	mov	__mulint_PARM_2,_dataType
      001A1B 75*01 00         [24] 5808 	mov	(__mulint_PARM_2 + 1),#0x00
      001A1E 85*25 82         [24] 5809 	mov	dpl,_addr2
      001A21 85*26 83         [24] 5810 	mov	dph,(_addr2 + 1)
      001A24 12r00r00         [24] 5811 	lcall	__mulint
      001A27 AE 82            [24] 5812 	mov	r6,dpl
      001A29 AF 83            [24] 5813 	mov	r7,dph
      001A2B E5*29            [12] 5814 	mov	a,_currAddr0
      001A2D C3               [12] 5815 	clr	c
      001A2E 9E               [12] 5816 	subb	a,r6
      001A2F F5*29            [12] 5817 	mov	_currAddr0,a
      001A31 E5*2A            [12] 5818 	mov	a,(_currAddr0 + 1)
      001A33 9F               [12] 5819 	subb	a,r7
      001A34 F5*2A            [12] 5820 	mov	(_currAddr0 + 1),a
                                   5821 ;	ecen4330lab7.c:1732: currAddr1--;
      001A36 15*2B            [12] 5822 	dec	_currAddr1
      001A38 74 FF            [12] 5823 	mov	a,#0xff
      001A3A B5*2B 02         [24] 5824 	cjne	a,_currAddr1,00290$
      001A3D 15*2C            [12] 5825 	dec	(_currAddr1 + 1)
      001A3F                       5826 00290$:
                                   5827 ;	ecen4330lab7.c:1733: dataSize += addr2;
      001A3F E5*25            [12] 5828 	mov	a,_addr2
      001A41 25*1B            [12] 5829 	add	a,_dataSize
      001A43 F5*1B            [12] 5830 	mov	_dataSize,a
      001A45 E5*26            [12] 5831 	mov	a,(_addr2 + 1)
      001A47 35*1C            [12] 5832 	addc	a,(_dataSize + 1)
      001A49 F5*1C            [12] 5833 	mov	(_dataSize + 1),a
                                   5834 ;	ecen4330lab7.c:1735: break;
                                   5835 ;	ecen4330lab7.c:1738: case 'E':
      001A4B 80 5B            [24] 5836 	sjmp	00135$
      001A4D                       5837 00129$:
                                   5838 ;	ecen4330lab7.c:1739: resetLCD();
      001A4D 12r0Dr59         [24] 5839 	lcall	_resetLCD
                                   5840 ;	ecen4330lab7.c:1740: LCD_string_write("\nReturning to\nMain Menu.");
      001A50 90r08r3F         [24] 5841 	mov	dptr,#___str_37
      001A53 75 F0 80         [24] 5842 	mov	b,#0x80
      001A56 12r09rC5         [24] 5843 	lcall	_LCD_string_write
                                   5844 ;	ecen4330lab7.c:1741: delay(200);
      001A59 90 00 C8         [24] 5845 	mov	dptr,#0x00c8
      001A5C 12r00r25         [24] 5846 	lcall	_delay
                                   5847 ;	ecen4330lab7.c:1742: dataEnd = 1;
      001A5F 75*1E 01         [24] 5848 	mov	_dataEnd,#0x01
                                   5849 ;	ecen4330lab7.c:1743: break;
                                   5850 ;	ecen4330lab7.c:1746: default:
      001A62 80 44            [24] 5851 	sjmp	00135$
      001A64                       5852 00130$:
                                   5853 ;	ecen4330lab7.c:1747: dataEnd = 0;
      001A64 75*1E 00         [24] 5854 	mov	_dataEnd,#0x00
                                   5855 ;	ecen4330lab7.c:1748: invalidInput();
      001A67 12r0Dr81         [24] 5856 	lcall	_invalidInput
                                   5857 ;	ecen4330lab7.c:1749: if(addr2 > 0 ){
      001A6A E5*25            [12] 5858 	mov	a,_addr2
      001A6C 45*26            [12] 5859 	orl	a,(_addr2 + 1)
      001A6E 60 38            [24] 5860 	jz	00135$
                                   5861 ;	ecen4330lab7.c:1750: currAddr0 -= (addr2 * dataType);
      001A70 85*1A*00         [24] 5862 	mov	__mulint_PARM_2,_dataType
      001A73 75*01 00         [24] 5863 	mov	(__mulint_PARM_2 + 1),#0x00
      001A76 85*25 82         [24] 5864 	mov	dpl,_addr2
      001A79 85*26 83         [24] 5865 	mov	dph,(_addr2 + 1)
      001A7C 12r00r00         [24] 5866 	lcall	__mulint
      001A7F AE 82            [24] 5867 	mov	r6,dpl
      001A81 AF 83            [24] 5868 	mov	r7,dph
      001A83 E5*29            [12] 5869 	mov	a,_currAddr0
      001A85 C3               [12] 5870 	clr	c
      001A86 9E               [12] 5871 	subb	a,r6
      001A87 F5*29            [12] 5872 	mov	_currAddr0,a
      001A89 E5*2A            [12] 5873 	mov	a,(_currAddr0 + 1)
      001A8B 9F               [12] 5874 	subb	a,r7
      001A8C F5*2A            [12] 5875 	mov	(_currAddr0 + 1),a
                                   5876 ;	ecen4330lab7.c:1751: currAddr1 --;
      001A8E 15*2B            [12] 5877 	dec	_currAddr1
      001A90 74 FF            [12] 5878 	mov	a,#0xff
      001A92 B5*2B 02         [24] 5879 	cjne	a,_currAddr1,00292$
      001A95 15*2C            [12] 5880 	dec	(_currAddr1 + 1)
      001A97                       5881 00292$:
                                   5882 ;	ecen4330lab7.c:1752: dataSize += addr2;
      001A97 E5*25            [12] 5883 	mov	a,_addr2
      001A99 25*1B            [12] 5884 	add	a,_dataSize
      001A9B F5*1B            [12] 5885 	mov	_dataSize,a
      001A9D E5*26            [12] 5886 	mov	a,(_addr2 + 1)
      001A9F 35*1C            [12] 5887 	addc	a,(_dataSize + 1)
      001AA1 F5*1C            [12] 5888 	mov	(_dataSize + 1),a
                                   5889 ;	ecen4330lab7.c:1753: addr2 = 0;
      001AA3 E4               [12] 5890 	clr	a
      001AA4 F5*25            [12] 5891 	mov	_addr2,a
      001AA6 F5*26            [12] 5892 	mov	(_addr2 + 1),a
                                   5893 ;	ecen4330lab7.c:1756: }
      001AA8                       5894 00135$:
                                   5895 ;	ecen4330lab7.c:1757: } while(dataEnd == 0);
      001AA8 E5*1E            [12] 5896 	mov	a,_dataEnd
      001AAA 70 03            [24] 5897 	jnz	00293$
      001AAC 02r16rF6         [24] 5898 	ljmp	00134$
      001AAF                       5899 00293$:
                                   5900 ;	ecen4330lab7.c:1758: }
      001AAF 22               [24] 5901 	ret
                                   5902 ;------------------------------------------------------------
                                   5903 ;Allocation info for local variables in function 'DUMP'
                                   5904 ;------------------------------------------------------------
                                   5905 ;	ecen4330lab7.c:1766: void DUMP(){
                                   5906 ;	-----------------------------------------
                                   5907 ;	 function DUMP
                                   5908 ;	-----------------------------------------
      001AB0                       5909 _DUMP:
                                   5910 ;	ecen4330lab7.c:1767: endAddrCalc = 0;
      001AB0 E4               [12] 5911 	clr	a
      001AB1 F5*34            [12] 5912 	mov	_endAddrCalc,a
      001AB3 F5*35            [12] 5913 	mov	(_endAddrCalc + 1),a
      001AB5 F5*36            [12] 5914 	mov	(_endAddrCalc + 2),a
      001AB7 F5*37            [12] 5915 	mov	(_endAddrCalc + 3),a
                                   5916 ;	ecen4330lab7.c:1768: addr0 = 0;                      // Source Address
      001AB9 F5*21            [12] 5917 	mov	_addr0,a
      001ABB F5*22            [12] 5918 	mov	(_addr0 + 1),a
                                   5919 ;	ecen4330lab7.c:1769: addr1 = 0;                      // Source End Address
      001ABD F5*23            [12] 5920 	mov	_addr1,a
      001ABF F5*24            [12] 5921 	mov	(_addr1 + 1),a
                                   5922 ;	ecen4330lab7.c:1770: dataType = 0;                   // Data Type
                                   5923 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001AC1 F5*1A            [12] 5924 	mov	_dataType,a
                                   5925 ;	ecen4330lab7.c:1771: dataSize = 0;                   // Data Size
      001AC3 F5*1B            [12] 5926 	mov	_dataSize,a
      001AC5 F5*1C            [12] 5927 	mov	(_dataSize + 1),a
                                   5928 ;	ecen4330lab7.c:1772: addr3 = 0;						// Remainder
      001AC7 F5*27            [12] 5929 	mov	_addr3,a
      001AC9 F5*28            [12] 5930 	mov	(_addr3 + 1),a
                                   5931 ;	ecen4330lab7.c:1775: resetLCD();
      001ACB 12r0Dr59         [24] 5932 	lcall	_resetLCD
                                   5933 ;	ecen4330lab7.c:1776: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n  0x____");
      001ACE 90r08r58         [24] 5934 	mov	dptr,#___str_38
      001AD1 75 F0 80         [24] 5935 	mov	b,#0x80
      001AD4 12r09rC5         [24] 5936 	lcall	_LCD_string_write
                                   5937 ;	ecen4330lab7.c:1777: cursor_x -= 4 * textsize * 6;
      001AD7 E5*0C            [12] 5938 	mov	a,_textsize
      001AD9 75 F0 18         [24] 5939 	mov	b,#0x18
      001ADC A4               [48] 5940 	mul	ab
      001ADD FE               [12] 5941 	mov	r6,a
      001ADE AF F0            [24] 5942 	mov	r7,b
      001AE0 E5*08            [12] 5943 	mov	a,_cursor_x
      001AE2 C3               [12] 5944 	clr	c
      001AE3 9E               [12] 5945 	subb	a,r6
      001AE4 F5*08            [12] 5946 	mov	_cursor_x,a
      001AE6 E5*09            [12] 5947 	mov	a,(_cursor_x + 1)
      001AE8 9F               [12] 5948 	subb	a,r7
      001AE9 F5*09            [12] 5949 	mov	(_cursor_x + 1),a
                                   5950 ;	ecen4330lab7.c:1778: inputRead16();                  // Read input
      001AEB 12r0DrAA         [24] 5951 	lcall	_inputRead16
                                   5952 ;	ecen4330lab7.c:1779: addr0 = input16;                // Set starting address
      001AEE 85*17*21         [24] 5953 	mov	_addr0,_input16
      001AF1 85*18*22         [24] 5954 	mov	(_addr0 + 1),(_input16 + 1)
                                   5955 ;	ecen4330lab7.c:1782: inputDataType();                // Prompt & read input
      001AF4 12r0ErB9         [24] 5956 	lcall	_inputDataType
                                   5957 ;	ecen4330lab7.c:1785: resetLCD();
      001AF7 12r0Dr59         [24] 5958 	lcall	_resetLCD
                                   5959 ;	ecen4330lab7.c:1786: inputDataSize();                // Prompt & read input
      001AFA 12r0Fr76         [24] 5960 	lcall	_inputDataSize
                                   5961 ;	ecen4330lab7.c:1789: endAddrCalc = addr0 + (dataType * dataSize);
      001AFD AE*1A            [24] 5962 	mov	r6,_dataType
      001AFF 7F 00            [12] 5963 	mov	r7,#0x00
      001B01 85*1B*00         [24] 5964 	mov	__mulint_PARM_2,_dataSize
      001B04 85*1C*01         [24] 5965 	mov	(__mulint_PARM_2 + 1),(_dataSize + 1)
      001B07 8E 82            [24] 5966 	mov	dpl,r6
      001B09 8F 83            [24] 5967 	mov	dph,r7
      001B0B C0 07            [24] 5968 	push	ar7
      001B0D C0 06            [24] 5969 	push	ar6
      001B0F 12r00r00         [24] 5970 	lcall	__mulint
      001B12 AC 82            [24] 5971 	mov	r4,dpl
      001B14 AD 83            [24] 5972 	mov	r5,dph
      001B16 D0 06            [24] 5973 	pop	ar6
      001B18 D0 07            [24] 5974 	pop	ar7
      001B1A EC               [12] 5975 	mov	a,r4
      001B1B 25*21            [12] 5976 	add	a,_addr0
      001B1D FA               [12] 5977 	mov	r2,a
      001B1E ED               [12] 5978 	mov	a,r5
      001B1F 35*22            [12] 5979 	addc	a,(_addr0 + 1)
      001B21 FB               [12] 5980 	mov	r3,a
      001B22 8A*34            [24] 5981 	mov	_endAddrCalc,r2
      001B24 8B*35            [24] 5982 	mov	(_endAddrCalc + 1),r3
      001B26 75*36 00         [24] 5983 	mov	(_endAddrCalc + 2),#0x00
      001B29 75*37 00         [24] 5984 	mov	(_endAddrCalc + 3),#0x00
                                   5985 ;	ecen4330lab7.c:1790: if(endAddrCalc < addr0){ // RAM overflow
      001B2C A8*21            [24] 5986 	mov	r0,_addr0
      001B2E A9*22            [24] 5987 	mov	r1,(_addr0 + 1)
      001B30 7A 00            [12] 5988 	mov	r2,#0x00
      001B32 7B 00            [12] 5989 	mov	r3,#0x00
      001B34 C3               [12] 5990 	clr	c
      001B35 E5*34            [12] 5991 	mov	a,_endAddrCalc
      001B37 98               [12] 5992 	subb	a,r0
      001B38 E5*35            [12] 5993 	mov	a,(_endAddrCalc + 1)
      001B3A 99               [12] 5994 	subb	a,r1
      001B3B E5*36            [12] 5995 	mov	a,(_endAddrCalc + 2)
      001B3D 9A               [12] 5996 	subb	a,r2
      001B3E E5*37            [12] 5997 	mov	a,(_endAddrCalc + 3)
      001B40 9B               [12] 5998 	subb	a,r3
      001B41 50 08            [24] 5999 	jnc	00102$
                                   6000 ;	ecen4330lab7.c:1791: addr1 = 0xFFFF;             // Set end address
      001B43 75*23 FF         [24] 6001 	mov	_addr1,#0xff
      001B46 75*24 FF         [24] 6002 	mov	(_addr1 + 1),#0xff
      001B49 80 12            [24] 6003 	sjmp	00103$
      001B4B                       6004 00102$:
                                   6005 ;	ecen4330lab7.c:1794: addr1 = addr0 + (dataType * dataSize) - 1;
      001B4B EC               [12] 6006 	mov	a,r4
      001B4C 25*21            [12] 6007 	add	a,_addr0
      001B4E FC               [12] 6008 	mov	r4,a
      001B4F ED               [12] 6009 	mov	a,r5
      001B50 35*22            [12] 6010 	addc	a,(_addr0 + 1)
      001B52 FD               [12] 6011 	mov	r5,a
      001B53 EC               [12] 6012 	mov	a,r4
      001B54 24 FF            [12] 6013 	add	a,#0xff
      001B56 F5*23            [12] 6014 	mov	_addr1,a
      001B58 ED               [12] 6015 	mov	a,r5
      001B59 34 FF            [12] 6016 	addc	a,#0xff
      001B5B F5*24            [12] 6017 	mov	(_addr1 + 1),a
      001B5D                       6018 00103$:
                                   6019 ;	ecen4330lab7.c:1796: dataSize = ((addr1 - addr0) + 1) / dataType;   // Recalculate data size
      001B5D E5*23            [12] 6020 	mov	a,_addr1
      001B5F C3               [12] 6021 	clr	c
      001B60 95*21            [12] 6022 	subb	a,_addr0
      001B62 FC               [12] 6023 	mov	r4,a
      001B63 E5*24            [12] 6024 	mov	a,(_addr1 + 1)
      001B65 95*22            [12] 6025 	subb	a,(_addr0 + 1)
      001B67 FD               [12] 6026 	mov	r5,a
      001B68 0C               [12] 6027 	inc	r4
      001B69 BC 00 01         [24] 6028 	cjne	r4,#0x00,00111$
      001B6C 0D               [12] 6029 	inc	r5
      001B6D                       6030 00111$:
      001B6D 8E*00            [24] 6031 	mov	__divuint_PARM_2,r6
      001B6F 8F*01            [24] 6032 	mov	(__divuint_PARM_2 + 1),r7
      001B71 8C 82            [24] 6033 	mov	dpl,r4
      001B73 8D 83            [24] 6034 	mov	dph,r5
      001B75 C0 07            [24] 6035 	push	ar7
      001B77 C0 06            [24] 6036 	push	ar6
      001B79 C0 05            [24] 6037 	push	ar5
      001B7B C0 04            [24] 6038 	push	ar4
      001B7D 12r00r00         [24] 6039 	lcall	__divuint
      001B80 85 82*1B         [24] 6040 	mov	_dataSize,dpl
      001B83 85 83*1C         [24] 6041 	mov	(_dataSize + 1),dph
      001B86 D0 04            [24] 6042 	pop	ar4
      001B88 D0 05            [24] 6043 	pop	ar5
      001B8A D0 06            [24] 6044 	pop	ar6
      001B8C D0 07            [24] 6045 	pop	ar7
                                   6046 ;	ecen4330lab7.c:1797: addr3 = ((addr1 - addr0) + 1) % dataType;
      001B8E 8E*00            [24] 6047 	mov	__moduint_PARM_2,r6
      001B90 8F*01            [24] 6048 	mov	(__moduint_PARM_2 + 1),r7
      001B92 8C 82            [24] 6049 	mov	dpl,r4
      001B94 8D 83            [24] 6050 	mov	dph,r5
      001B96 12r00r00         [24] 6051 	lcall	__moduint
      001B99 85 82*27         [24] 6052 	mov	_addr3,dpl
      001B9C 85 83*28         [24] 6053 	mov	(_addr3 + 1),dph
                                   6054 ;	ecen4330lab7.c:1816: DUMP_display();                 // Display dump data
                                   6055 ;	ecen4330lab7.c:1817: }
      001B9F 02r16rE5         [24] 6056 	ljmp	_DUMP_display
                                   6057 ;------------------------------------------------------------
                                   6058 ;Allocation info for local variables in function 'EDIT_display'
                                   6059 ;------------------------------------------------------------
                                   6060 ;addr                      Allocated to registers r6 r7 
                                   6061 ;------------------------------------------------------------
                                   6062 ;	ecen4330lab7.c:1827: void EDIT_display(unsigned int addr){
                                   6063 ;	-----------------------------------------
                                   6064 ;	 function EDIT_display
                                   6065 ;	-----------------------------------------
      001BA2                       6066 _EDIT_display:
                                   6067 ;	ecen4330lab7.c:1830: data = RAMread(addr);
      001BA2 AE 82            [24] 6068 	mov	r6,dpl
      001BA4 AF 83            [24] 6069 	mov  r7,dph
      001BA6 C0 07            [24] 6070 	push	ar7
      001BA8 C0 06            [24] 6071 	push	ar6
      001BAA 12r0Dr46         [24] 6072 	lcall	_RAMread
      001BAD 85 82*20         [24] 6073 	mov	_data,dpl
                                   6074 ;	ecen4330lab7.c:1833: resetLCD();
      001BB0 12r0Dr59         [24] 6075 	lcall	_resetLCD
                                   6076 ;	ecen4330lab7.c:1834: LCD_string_write("\n");
      001BB3 90r07rF2         [24] 6077 	mov	dptr,#___str_33
      001BB6 75 F0 80         [24] 6078 	mov	b,#0x80
      001BB9 12r09rC5         [24] 6079 	lcall	_LCD_string_write
      001BBC D0 06            [24] 6080 	pop	ar6
      001BBE D0 07            [24] 6081 	pop	ar7
                                   6082 ;	ecen4330lab7.c:1835: HEXtoASCII_16write(addr);
      001BC0 8E 82            [24] 6083 	mov	dpl,r6
      001BC2 8F 83            [24] 6084 	mov	dph,r7
      001BC4 C0 07            [24] 6085 	push	ar7
      001BC6 C0 06            [24] 6086 	push	ar6
      001BC8 12r0Cr72         [24] 6087 	lcall	_HEXtoASCII_16write
                                   6088 ;	ecen4330lab7.c:1836: LCD_string_write(": 0x");
      001BCB 90r06r1A         [24] 6089 	mov	dptr,#___str_14
      001BCE 75 F0 80         [24] 6090 	mov	b,#0x80
      001BD1 12r09rC5         [24] 6091 	lcall	_LCD_string_write
                                   6092 ;	ecen4330lab7.c:1837: HEXtoASCII_8write(data);
      001BD4 85*20 82         [24] 6093 	mov	dpl,_data
      001BD7 12r0Cr35         [24] 6094 	lcall	_HEXtoASCII_8write
                                   6095 ;	ecen4330lab7.c:1840: LCD_string_write("\n\nNew value:\n  0x__");
      001BDA 90r08r86         [24] 6096 	mov	dptr,#___str_39
      001BDD 75 F0 80         [24] 6097 	mov	b,#0x80
      001BE0 12r09rC5         [24] 6098 	lcall	_LCD_string_write
                                   6099 ;	ecen4330lab7.c:1841: cursor_x -= 2 * textsize * 6;
      001BE3 E5*0C            [12] 6100 	mov	a,_textsize
      001BE5 75 F0 0C         [24] 6101 	mov	b,#0x0c
      001BE8 A4               [48] 6102 	mul	ab
      001BE9 FC               [12] 6103 	mov	r4,a
      001BEA AD F0            [24] 6104 	mov	r5,b
      001BEC E5*08            [12] 6105 	mov	a,_cursor_x
      001BEE C3               [12] 6106 	clr	c
      001BEF 9C               [12] 6107 	subb	a,r4
      001BF0 F5*08            [12] 6108 	mov	_cursor_x,a
      001BF2 E5*09            [12] 6109 	mov	a,(_cursor_x + 1)
      001BF4 9D               [12] 6110 	subb	a,r5
      001BF5 F5*09            [12] 6111 	mov	(_cursor_x + 1),a
                                   6112 ;	ecen4330lab7.c:1842: inputRead8();
      001BF7 12r0Er65         [24] 6113 	lcall	_inputRead8
      001BFA D0 06            [24] 6114 	pop	ar6
      001BFC D0 07            [24] 6115 	pop	ar7
                                   6116 ;	ecen4330lab7.c:1843: RAMwrite(addr, input8);
      001BFE 85*19*00         [24] 6117 	mov	_RAMwrite_PARM_2,_input8
      001C01 8E 82            [24] 6118 	mov	dpl,r6
      001C03 8F 83            [24] 6119 	mov	dph,r7
      001C05 12r0Dr17         [24] 6120 	lcall	_RAMwrite
                                   6121 ;	ecen4330lab7.c:1846: LCD_string_write("\n\n\n\n(1) Edit next\nRAM location\n\n");
      001C08 90r08r9A         [24] 6122 	mov	dptr,#___str_40
      001C0B 75 F0 80         [24] 6123 	mov	b,#0x80
      001C0E 12r09rC5         [24] 6124 	lcall	_LCD_string_write
                                   6125 ;	ecen4330lab7.c:1847: LCD_string_write("(E) End");
      001C11 90r08rBB         [24] 6126 	mov	dptr,#___str_41
      001C14 75 F0 80         [24] 6127 	mov	b,#0x80
                                   6128 ;	ecen4330lab7.c:1848: }
      001C17 02r09rC5         [24] 6129 	ljmp	_LCD_string_write
                                   6130 ;------------------------------------------------------------
                                   6131 ;Allocation info for local variables in function 'EDIT'
                                   6132 ;------------------------------------------------------------
                                   6133 ;	ecen4330lab7.c:1860: void EDIT(){
                                   6134 ;	-----------------------------------------
                                   6135 ;	 function EDIT
                                   6136 ;	-----------------------------------------
      001C1A                       6137 _EDIT:
                                   6138 ;	ecen4330lab7.c:1861: dataEnd = 0;
      001C1A 75*1E 00         [24] 6139 	mov	_dataEnd,#0x00
                                   6140 ;	ecen4330lab7.c:1862: scrollEnd = 0;
      001C1D 75*1F 00         [24] 6141 	mov	_scrollEnd,#0x00
                                   6142 ;	ecen4330lab7.c:1863: validInput = 0;
      001C20 75*1D 00         [24] 6143 	mov	_validInput,#0x00
                                   6144 ;	ecen4330lab7.c:1866: resetLCD();
      001C23 12r0Dr59         [24] 6145 	lcall	_resetLCD
                                   6146 ;	ecen4330lab7.c:1867: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001C26 90r07r72         [24] 6147 	mov	dptr,#___str_25
      001C29 75 F0 80         [24] 6148 	mov	b,#0x80
      001C2C 12r09rC5         [24] 6149 	lcall	_LCD_string_write
                                   6150 ;	ecen4330lab7.c:1868: cursor_x -= 4 * textsize * 6;
      001C2F E5*0C            [12] 6151 	mov	a,_textsize
      001C31 75 F0 18         [24] 6152 	mov	b,#0x18
      001C34 A4               [48] 6153 	mul	ab
      001C35 FE               [12] 6154 	mov	r6,a
      001C36 AF F0            [24] 6155 	mov	r7,b
      001C38 E5*08            [12] 6156 	mov	a,_cursor_x
      001C3A C3               [12] 6157 	clr	c
      001C3B 9E               [12] 6158 	subb	a,r6
      001C3C F5*08            [12] 6159 	mov	_cursor_x,a
      001C3E E5*09            [12] 6160 	mov	a,(_cursor_x + 1)
      001C40 9F               [12] 6161 	subb	a,r7
      001C41 F5*09            [12] 6162 	mov	(_cursor_x + 1),a
                                   6163 ;	ecen4330lab7.c:1871: inputRead16();
      001C43 12r0DrAA         [24] 6164 	lcall	_inputRead16
                                   6165 ;	ecen4330lab7.c:1874: while(scrollEnd == 0 && dataEnd == 0){
      001C46                       6166 00112$:
      001C46 E5*1F            [12] 6167 	mov	a,_scrollEnd
      001C48 70 52            [24] 6168 	jnz	00114$
      001C4A E5*1E            [12] 6169 	mov	a,_dataEnd
      001C4C 70 4E            [24] 6170 	jnz	00114$
                                   6171 ;	ecen4330lab7.c:1877: do
      001C4E                       6172 00108$:
                                   6173 ;	ecen4330lab7.c:1879: EDIT_display(input16);
      001C4E 85*17 82         [24] 6174 	mov	dpl,_input16
      001C51 85*18 83         [24] 6175 	mov	dph,(_input16 + 1)
      001C54 12r1BrA2         [24] 6176 	lcall	_EDIT_display
                                   6177 ;	ecen4330lab7.c:1880: key = keyDetect();
      001C57 12r0Ar04         [24] 6178 	lcall	_keyDetect
      001C5A 85 82*16         [24] 6179 	mov	_key,dpl
                                   6180 ;	ecen4330lab7.c:1882: switch (key)
      001C5D 74 31            [12] 6181 	mov	a,#0x31
      001C5F B5*16 02         [24] 6182 	cjne	a,_key,00153$
      001C62 80 07            [24] 6183 	sjmp	00101$
      001C64                       6184 00153$:
      001C64 74 45            [12] 6185 	mov	a,#0x45
                                   6186 ;	ecen4330lab7.c:1886: case '1':
      001C66 B5*16 27         [24] 6187 	cjne	a,_key,00106$
      001C69 80 1D            [24] 6188 	sjmp	00105$
      001C6B                       6189 00101$:
                                   6190 ;	ecen4330lab7.c:1887: validInput = 1;
      001C6B 75*1D 01         [24] 6191 	mov	_validInput,#0x01
                                   6192 ;	ecen4330lab7.c:1890: if(input16 == 0xFFFF){
      001C6E 74 FF            [12] 6193 	mov	a,#0xff
      001C70 B5*17 08         [24] 6194 	cjne	a,_input16,00103$
      001C73 B5*18 05         [24] 6195 	cjne	a,(_input16 + 1),00103$
                                   6196 ;	ecen4330lab7.c:1891: scrollEnd = 1;
      001C76 75*1F 01         [24] 6197 	mov	_scrollEnd,#0x01
      001C79 80 1B            [24] 6198 	sjmp	00109$
      001C7B                       6199 00103$:
                                   6200 ;	ecen4330lab7.c:1896: input16++;
      001C7B 05*17            [12] 6201 	inc	_input16
      001C7D E4               [12] 6202 	clr	a
      001C7E B5*17 02         [24] 6203 	cjne	a,_input16,00157$
      001C81 05*18            [12] 6204 	inc	(_input16 + 1)
      001C83                       6205 00157$:
                                   6206 ;	ecen4330lab7.c:1897: scrollEnd = 0;
      001C83 75*1F 00         [24] 6207 	mov	_scrollEnd,#0x00
                                   6208 ;	ecen4330lab7.c:1899: break;
                                   6209 ;	ecen4330lab7.c:1902: case 'E':
      001C86 80 0E            [24] 6210 	sjmp	00109$
      001C88                       6211 00105$:
                                   6212 ;	ecen4330lab7.c:1903: validInput = 1;
      001C88 75*1D 01         [24] 6213 	mov	_validInput,#0x01
                                   6214 ;	ecen4330lab7.c:1904: dataEnd = 1;
      001C8B 75*1E 01         [24] 6215 	mov	_dataEnd,#0x01
                                   6216 ;	ecen4330lab7.c:1905: break;
                                   6217 ;	ecen4330lab7.c:1908: default:
      001C8E 80 06            [24] 6218 	sjmp	00109$
      001C90                       6219 00106$:
                                   6220 ;	ecen4330lab7.c:1909: validInput = 0;
      001C90 75*1D 00         [24] 6221 	mov	_validInput,#0x00
                                   6222 ;	ecen4330lab7.c:1910: invalidInput();
      001C93 12r0Dr81         [24] 6223 	lcall	_invalidInput
                                   6224 ;	ecen4330lab7.c:1912: }
      001C96                       6225 00109$:
                                   6226 ;	ecen4330lab7.c:1913: } while (validInput == 0);
      001C96 E5*1D            [12] 6227 	mov	a,_validInput
      001C98 60 B4            [24] 6228 	jz	00108$
      001C9A 80 AA            [24] 6229 	sjmp	00112$
      001C9C                       6230 00114$:
                                   6231 ;	ecen4330lab7.c:1917: resetLCD();
      001C9C 12r0Dr59         [24] 6232 	lcall	_resetLCD
                                   6233 ;	ecen4330lab7.c:1918: if(scrollEnd == 1){
      001C9F 74 01            [12] 6234 	mov	a,#0x01
      001CA1 B5*1F 14         [24] 6235 	cjne	a,_scrollEnd,00116$
                                   6236 ;	ecen4330lab7.c:1919: setTextColor(RED, BLACK);
      001CA4 E4               [12] 6237 	clr	a
      001CA5 F5*00            [12] 6238 	mov	_setTextColor_PARM_2,a
      001CA7 F5*01            [12] 6239 	mov	(_setTextColor_PARM_2 + 1),a
      001CA9 90 F8 00         [24] 6240 	mov	dptr,#0xf800
      001CAC 12r02rD6         [24] 6241 	lcall	_setTextColor
                                   6242 ;	ecen4330lab7.c:1920: LCD_string_write("\nEnd of data.\n");
      001CAF 90r08rC3         [24] 6243 	mov	dptr,#___str_42
      001CB2 75 F0 80         [24] 6244 	mov	b,#0x80
      001CB5 12r09rC5         [24] 6245 	lcall	_LCD_string_write
      001CB8                       6246 00116$:
                                   6247 ;	ecen4330lab7.c:1924: setTextColor(WHITE, BLACK);
      001CB8 E4               [12] 6248 	clr	a
      001CB9 F5*00            [12] 6249 	mov	_setTextColor_PARM_2,a
      001CBB F5*01            [12] 6250 	mov	(_setTextColor_PARM_2 + 1),a
      001CBD 90 FF FF         [24] 6251 	mov	dptr,#0xffff
      001CC0 12r02rD6         [24] 6252 	lcall	_setTextColor
                                   6253 ;	ecen4330lab7.c:1925: LCD_string_write("\nReturning to\nmain menu.");
      001CC3 90r08rD2         [24] 6254 	mov	dptr,#___str_43
      001CC6 75 F0 80         [24] 6255 	mov	b,#0x80
      001CC9 12r09rC5         [24] 6256 	lcall	_LCD_string_write
                                   6257 ;	ecen4330lab7.c:1926: delay(200);
      001CCC 90 00 C8         [24] 6258 	mov	dptr,#0x00c8
                                   6259 ;	ecen4330lab7.c:1927: }
      001CCF 02r00r25         [24] 6260 	ljmp	_delay
                                   6261 ;------------------------------------------------------------
                                   6262 ;Allocation info for local variables in function 'FIND_display'
                                   6263 ;------------------------------------------------------------
                                   6264 ;	ecen4330lab7.c:1941: void FIND_display(){
                                   6265 ;	-----------------------------------------
                                   6266 ;	 function FIND_display
                                   6267 ;	-----------------------------------------
      001CD2                       6268 _FIND_display:
                                   6269 ;	ecen4330lab7.c:1942: addr2 = 0;						// first addr of page
      001CD2 E4               [12] 6270 	clr	a
      001CD3 F5*25            [12] 6271 	mov	_addr2,a
      001CD5 F5*26            [12] 6272 	mov	(_addr2 + 1),a
                                   6273 ;	ecen4330lab7.c:1943: currAddr1 = 0;					// page count
      001CD7 F5*2B            [12] 6274 	mov	_currAddr1,a
      001CD9 F5*2C            [12] 6275 	mov	(_currAddr1 + 1),a
                                   6276 ;	ecen4330lab7.c:1944: resetLCD();
      001CDB 12r0Dr59         [24] 6277 	lcall	_resetLCD
                                   6278 ;	ecen4330lab7.c:1945: currAddr0 = addr0;				// Load starting address
      001CDE 85*21*29         [24] 6279 	mov	_currAddr0,_addr0
      001CE1 85*22*2A         [24] 6280 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   6281 ;	ecen4330lab7.c:1946: data = RAMread(currAddr0);		// Read data from starting address
      001CE4 85*29 82         [24] 6282 	mov	dpl,_currAddr0
      001CE7 85*2A 83         [24] 6283 	mov	dph,(_currAddr0 + 1)
      001CEA 12r0Dr46         [24] 6284 	lcall	_RAMread
      001CED 85 82*20         [24] 6285 	mov	_data,dpl
                                   6286 ;	ecen4330lab7.c:1949: while(data != byte1 && currAddr0 < addr1){
      001CF0                       6287 00102$:
      001CF0 AE*20            [24] 6288 	mov	r6,_data
      001CF2 7F 00            [12] 6289 	mov	r7,#0x00
      001CF4 EE               [12] 6290 	mov	a,r6
      001CF5 B5*2F 06         [24] 6291 	cjne	a,_byte1,00235$
      001CF8 EF               [12] 6292 	mov	a,r7
      001CF9 B5*30 02         [24] 6293 	cjne	a,(_byte1 + 1),00235$
      001CFC 80 21            [24] 6294 	sjmp	00104$
      001CFE                       6295 00235$:
      001CFE C3               [12] 6296 	clr	c
      001CFF E5*29            [12] 6297 	mov	a,_currAddr0
      001D01 95*23            [12] 6298 	subb	a,_addr1
      001D03 E5*2A            [12] 6299 	mov	a,(_currAddr0 + 1)
      001D05 95*24            [12] 6300 	subb	a,(_addr1 + 1)
      001D07 50 16            [24] 6301 	jnc	00104$
                                   6302 ;	ecen4330lab7.c:1950: currAddr0++;				// Next RAM address
      001D09 05*29            [12] 6303 	inc	_currAddr0
      001D0B E4               [12] 6304 	clr	a
      001D0C B5*29 02         [24] 6305 	cjne	a,_currAddr0,00237$
      001D0F 05*2A            [12] 6306 	inc	(_currAddr0 + 1)
      001D11                       6307 00237$:
                                   6308 ;	ecen4330lab7.c:1951: data = RAMread(currAddr0);	// Read data from RAM
      001D11 85*29 82         [24] 6309 	mov	dpl,_currAddr0
      001D14 85*2A 83         [24] 6310 	mov	dph,(_currAddr0 + 1)
      001D17 12r0Dr46         [24] 6311 	lcall	_RAMread
      001D1A 85 82*20         [24] 6312 	mov	_data,dpl
      001D1D 80 D1            [24] 6313 	sjmp	00102$
      001D1F                       6314 00104$:
                                   6315 ;	ecen4330lab7.c:1955: if(data != byte1 && currAddr0 == addr1){
      001D1F AE*20            [24] 6316 	mov	r6,_data
      001D21 7F 00            [12] 6317 	mov	r7,#0x00
      001D23 EE               [12] 6318 	mov	a,r6
      001D24 B5*2F 06         [24] 6319 	cjne	a,_byte1,00238$
      001D27 EF               [12] 6320 	mov	a,r7
      001D28 B5*30 02         [24] 6321 	cjne	a,(_byte1 + 1),00238$
      001D2B 80 58            [24] 6322 	sjmp	00142$
      001D2D                       6323 00238$:
      001D2D E5*23            [12] 6324 	mov	a,_addr1
      001D2F B5*29 53         [24] 6325 	cjne	a,_currAddr0,00142$
      001D32 E5*24            [12] 6326 	mov	a,(_addr1 + 1)
      001D34 B5*2A 4E         [24] 6327 	cjne	a,(_currAddr0 + 1),00142$
                                   6328 ;	ecen4330lab7.c:1956: resetLCD();
      001D37 12r0Dr59         [24] 6329 	lcall	_resetLCD
                                   6330 ;	ecen4330lab7.c:1957: LCD_string_write("\n0x");
      001D3A 90r07rB6         [24] 6331 	mov	dptr,#___str_27
      001D3D 75 F0 80         [24] 6332 	mov	b,#0x80
      001D40 12r09rC5         [24] 6333 	lcall	_LCD_string_write
                                   6334 ;	ecen4330lab7.c:1958: HEXtoASCII_8write(byte1);
      001D43 85*2F 82         [24] 6335 	mov	dpl,_byte1
      001D46 12r0Cr35         [24] 6336 	lcall	_HEXtoASCII_8write
                                   6337 ;	ecen4330lab7.c:1959: LCD_string_write(" not\nfound in\naddress range\n\n");
      001D49 90r08rEB         [24] 6338 	mov	dptr,#___str_44
      001D4C 75 F0 80         [24] 6339 	mov	b,#0x80
      001D4F 12r09rC5         [24] 6340 	lcall	_LCD_string_write
                                   6341 ;	ecen4330lab7.c:1960: HEXtoASCII_16write(addr0);
      001D52 85*21 82         [24] 6342 	mov	dpl,_addr0
      001D55 85*22 83         [24] 6343 	mov	dph,(_addr0 + 1)
      001D58 12r0Cr72         [24] 6344 	lcall	_HEXtoASCII_16write
                                   6345 ;	ecen4330lab7.c:1961: LCD_string_write(" -\n");
      001D5B 90r07rEE         [24] 6346 	mov	dptr,#___str_32
      001D5E 75 F0 80         [24] 6347 	mov	b,#0x80
      001D61 12r09rC5         [24] 6348 	lcall	_LCD_string_write
                                   6349 ;	ecen4330lab7.c:1962: HEXtoASCII_16write(addr1);
      001D64 85*23 82         [24] 6350 	mov	dpl,_addr1
      001D67 85*24 83         [24] 6351 	mov	dph,(_addr1 + 1)
      001D6A 12r0Cr72         [24] 6352 	lcall	_HEXtoASCII_16write
                                   6353 ;	ecen4330lab7.c:1963: delay(200);
      001D6D 90 00 C8         [24] 6354 	mov	dptr,#0x00c8
      001D70 12r00r25         [24] 6355 	lcall	_delay
                                   6356 ;	ecen4330lab7.c:1964: resetLCD();
      001D73 12r0Dr59         [24] 6357 	lcall	_resetLCD
                                   6358 ;	ecen4330lab7.c:1965: LCD_string_write("Returning to\nmain menu.");
      001D76 90r06r1F         [24] 6359 	mov	dptr,#___str_15
      001D79 75 F0 80         [24] 6360 	mov	b,#0x80
      001D7C 12r09rC5         [24] 6361 	lcall	_LCD_string_write
                                   6362 ;	ecen4330lab7.c:1966: delay(100);
      001D7F 90 00 64         [24] 6363 	mov	dptr,#0x0064
      001D82 02r00r25         [24] 6364 	ljmp	_delay
      001D85                       6365 00142$:
                                   6366 ;	ecen4330lab7.c:1974: resetLCD();
      001D85 12r0Dr59         [24] 6367 	lcall	_resetLCD
                                   6368 ;	ecen4330lab7.c:1975: setTextColor(GREEN, BLACK);
      001D88 E4               [12] 6369 	clr	a
      001D89 F5*00            [12] 6370 	mov	_setTextColor_PARM_2,a
      001D8B F5*01            [12] 6371 	mov	(_setTextColor_PARM_2 + 1),a
      001D8D 90 07 E0         [24] 6372 	mov	dptr,#0x07e0
      001D90 12r02rD6         [24] 6373 	lcall	_setTextColor
                                   6374 ;	ecen4330lab7.c:1976: LCD_string_write("\n0x");
      001D93 90r07rB6         [24] 6375 	mov	dptr,#___str_27
      001D96 75 F0 80         [24] 6376 	mov	b,#0x80
      001D99 12r09rC5         [24] 6377 	lcall	_LCD_string_write
                                   6378 ;	ecen4330lab7.c:1977: HEXtoASCII_8write(byte1);
      001D9C 85*2F 82         [24] 6379 	mov	dpl,_byte1
      001D9F 12r0Cr35         [24] 6380 	lcall	_HEXtoASCII_8write
                                   6381 ;	ecen4330lab7.c:1978: LCD_string_write(" found at\nthe following\naddresses:\n\n");
      001DA2 90r09r09         [24] 6382 	mov	dptr,#___str_45
      001DA5 75 F0 80         [24] 6383 	mov	b,#0x80
      001DA8 12r09rC5         [24] 6384 	lcall	_LCD_string_write
                                   6385 ;	ecen4330lab7.c:1979: delay(200);
      001DAB 90 00 C8         [24] 6386 	mov	dptr,#0x00c8
      001DAE 12r00r25         [24] 6387 	lcall	_delay
                                   6388 ;	ecen4330lab7.c:1980: addr2 = currAddr0;					// Load first found address of page
      001DB1 85*29*25         [24] 6389 	mov	_addr2,_currAddr0
      001DB4 85*2A*26         [24] 6390 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6391 ;	ecen4330lab7.c:1985: do{
      001DB7                       6392 00138$:
                                   6393 ;	ecen4330lab7.c:1986: resetLCD();
      001DB7 12r0Dr59         [24] 6394 	lcall	_resetLCD
                                   6395 ;	ecen4330lab7.c:1987: currAddr0 = addr2;				// Load current address	
      001DBA 85*25*29         [24] 6396 	mov	_currAddr0,_addr2
      001DBD 85*26*2A         [24] 6397 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6398 ;	ecen4330lab7.c:1988: HEXtoASCII_16write(currAddr0);	// Write found address to LCD
      001DC0 85*29 82         [24] 6399 	mov	dpl,_currAddr0
      001DC3 85*2A 83         [24] 6400 	mov	dph,(_currAddr0 + 1)
      001DC6 12r0Cr72         [24] 6401 	lcall	_HEXtoASCII_16write
                                   6402 ;	ecen4330lab7.c:1989: count = 7;						// Set page address display counter
      001DC9 75*32 07         [24] 6403 	mov	_count,#0x07
      001DCC 75*33 00         [24] 6404 	mov	(_count + 1),#0x00
                                   6405 ;	ecen4330lab7.c:1990: currAddr1++;					// Increment page count
      001DCF 05*2B            [12] 6406 	inc	_currAddr1
      001DD1 E4               [12] 6407 	clr	a
      001DD2 B5*2B 02         [24] 6408 	cjne	a,_currAddr1,00241$
      001DD5 05*2C            [12] 6409 	inc	(_currAddr1 + 1)
      001DD7                       6410 00241$:
                                   6411 ;	ecen4330lab7.c:1996: if(currAddr0 != 0xFFFF){
      001DD7 74 FF            [12] 6412 	mov	a,#0xff
      001DD9 B5*29 05         [24] 6413 	cjne	a,_currAddr0,00242$
      001DDC B5*2A 02         [24] 6414 	cjne	a,(_currAddr0 + 1),00242$
      001DDF 80 4C            [24] 6415 	sjmp	00112$
      001DE1                       6416 00242$:
                                   6417 ;	ecen4330lab7.c:1997: do{
      001DE1                       6418 00108$:
                                   6419 ;	ecen4330lab7.c:1998: currAddr0++;				// Next RAM address
      001DE1 05*29            [12] 6420 	inc	_currAddr0
      001DE3 E4               [12] 6421 	clr	a
      001DE4 B5*29 02         [24] 6422 	cjne	a,_currAddr0,00243$
      001DE7 05*2A            [12] 6423 	inc	(_currAddr0 + 1)
      001DE9                       6424 00243$:
                                   6425 ;	ecen4330lab7.c:1999: data = RAMread(currAddr0);	// Read data
      001DE9 85*29 82         [24] 6426 	mov	dpl,_currAddr0
      001DEC 85*2A 83         [24] 6427 	mov	dph,(_currAddr0 + 1)
      001DEF 12r0Dr46         [24] 6428 	lcall	_RAMread
      001DF2 85 82*20         [24] 6429 	mov	_data,dpl
                                   6430 ;	ecen4330lab7.c:2000: if(data == byte1){			// If data = search value
      001DF5 AE*20            [24] 6431 	mov	r6,_data
      001DF7 7F 00            [12] 6432 	mov	r7,#0x00
      001DF9 EE               [12] 6433 	mov	a,r6
      001DFA B5*2F 1F         [24] 6434 	cjne	a,_byte1,00109$
      001DFD EF               [12] 6435 	mov	a,r7
      001DFE B5*30 1B         [24] 6436 	cjne	a,(_byte1 + 1),00109$
                                   6437 ;	ecen4330lab7.c:2001: count--;				// Decrement page address display counter
      001E01 15*32            [12] 6438 	dec	_count
      001E03 74 FF            [12] 6439 	mov	a,#0xff
      001E05 B5*32 02         [24] 6440 	cjne	a,_count,00246$
      001E08 15*33            [12] 6441 	dec	(_count + 1)
      001E0A                       6442 00246$:
                                   6443 ;	ecen4330lab7.c:2002: LCD_string_write("\n");	// Next line
      001E0A 90r07rF2         [24] 6444 	mov	dptr,#___str_33
      001E0D 75 F0 80         [24] 6445 	mov	b,#0x80
      001E10 12r09rC5         [24] 6446 	lcall	_LCD_string_write
                                   6447 ;	ecen4330lab7.c:2003: HEXtoASCII_16write(currAddr0);	// Display found address
      001E13 85*29 82         [24] 6448 	mov	dpl,_currAddr0
      001E16 85*2A 83         [24] 6449 	mov	dph,(_currAddr0 + 1)
      001E19 12r0Cr72         [24] 6450 	lcall	_HEXtoASCII_16write
      001E1C                       6451 00109$:
                                   6452 ;	ecen4330lab7.c:2005: }while(currAddr0 < addr1 && count > 0);
      001E1C C3               [12] 6453 	clr	c
      001E1D E5*29            [12] 6454 	mov	a,_currAddr0
      001E1F 95*23            [12] 6455 	subb	a,_addr1
      001E21 E5*2A            [12] 6456 	mov	a,(_currAddr0 + 1)
      001E23 95*24            [12] 6457 	subb	a,(_addr1 + 1)
      001E25 50 06            [24] 6458 	jnc	00112$
      001E27 E5*32            [12] 6459 	mov	a,_count
      001E29 45*33            [12] 6460 	orl	a,(_count + 1)
      001E2B 70 B4            [24] 6461 	jnz	00108$
      001E2D                       6462 00112$:
                                   6463 ;	ecen4330lab7.c:2012: setCursor(0, 250);
      001E2D 75*00 FA         [24] 6464 	mov	_setCursor_PARM_2,#0xfa
      001E30 75*01 00         [24] 6465 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E33 90 00 00         [24] 6466 	mov	dptr,#0x0000
      001E36 12r02rC9         [24] 6467 	lcall	_setCursor
                                   6468 ;	ecen4330lab7.c:2013: setTextSize(2);
      001E39 75 82 02         [24] 6469 	mov	dpl,#0x02
      001E3C 12r02rE3         [24] 6470 	lcall	_setTextSize
                                   6471 ;	ecen4330lab7.c:2014: setTextColor(WHITE, BLACK);
      001E3F E4               [12] 6472 	clr	a
      001E40 F5*00            [12] 6473 	mov	_setTextColor_PARM_2,a
      001E42 F5*01            [12] 6474 	mov	(_setTextColor_PARM_2 + 1),a
      001E44 90 FF FF         [24] 6475 	mov	dptr,#0xffff
      001E47 12r02rD6         [24] 6476 	lcall	_setTextColor
                                   6477 ;	ecen4330lab7.c:2015: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001E4A 90r07rF4         [24] 6478 	mov	dptr,#___str_34
      001E4D 75 F0 80         [24] 6479 	mov	b,#0x80
      001E50 12r09rC5         [24] 6480 	lcall	_LCD_string_write
                                   6481 ;	ecen4330lab7.c:2016: HEXtoASCII_16write(currAddr1);
      001E53 85*2B 82         [24] 6482 	mov	dpl,_currAddr1
      001E56 85*2C 83         [24] 6483 	mov	dph,(_currAddr1 + 1)
      001E59 12r0Cr72         [24] 6484 	lcall	_HEXtoASCII_16write
                                   6485 ;	ecen4330lab7.c:2022: key = keyDetect();
      001E5C 12r0Ar04         [24] 6486 	lcall	_keyDetect
      001E5F 85 82*16         [24] 6487 	mov	_key,dpl
                                   6488 ;	ecen4330lab7.c:2023: switch (key)
      001E62 74 30            [12] 6489 	mov	a,#0x30
      001E64 B5*16 02         [24] 6490 	cjne	a,_key,00249$
      001E67 80 13            [24] 6491 	sjmp	00113$
      001E69                       6492 00249$:
      001E69 74 31            [12] 6493 	mov	a,#0x31
      001E6B B5*16 03         [24] 6494 	cjne	a,_key,00250$
      001E6E 02r1Fr1D         [24] 6495 	ljmp	00126$
      001E71                       6496 00250$:
      001E71 74 45            [12] 6497 	mov	a,#0x45
      001E73 B5*16 03         [24] 6498 	cjne	a,_key,00251$
      001E76 02r1Fr9D         [24] 6499 	ljmp	00135$
      001E79                       6500 00251$:
      001E79 02r1FrB1         [24] 6501 	ljmp	00136$
                                   6502 ;	ecen4330lab7.c:2029: case '0':
      001E7C                       6503 00113$:
                                   6504 ;	ecen4330lab7.c:2034: if(currAddr0 >= addr1){
      001E7C C3               [12] 6505 	clr	c
      001E7D E5*29            [12] 6506 	mov	a,_currAddr0
      001E7F 95*23            [12] 6507 	subb	a,_addr1
      001E81 E5*2A            [12] 6508 	mov	a,(_currAddr0 + 1)
      001E83 95*24            [12] 6509 	subb	a,(_addr1 + 1)
      001E85 40 1E            [24] 6510 	jc	00117$
                                   6511 ;	ecen4330lab7.c:2035: resetLCD();
      001E87 12r0Dr59         [24] 6512 	lcall	_resetLCD
                                   6513 ;	ecen4330lab7.c:2036: LCD_string_write("End of Data.");
      001E8A 90r09r2E         [24] 6514 	mov	dptr,#___str_46
      001E8D 75 F0 80         [24] 6515 	mov	b,#0x80
      001E90 12r09rC5         [24] 6516 	lcall	_LCD_string_write
                                   6517 ;	ecen4330lab7.c:2037: delay(200);
      001E93 90 00 C8         [24] 6518 	mov	dptr,#0x00c8
      001E96 12r00r25         [24] 6519 	lcall	_delay
                                   6520 ;	ecen4330lab7.c:2038: currAddr1--;	// Reset page count to last displayed page 
      001E99 15*2B            [12] 6521 	dec	_currAddr1
      001E9B 74 FF            [12] 6522 	mov	a,#0xff
      001E9D B5*2B 02         [24] 6523 	cjne	a,_currAddr1,00253$
      001EA0 15*2C            [12] 6524 	dec	(_currAddr1 + 1)
      001EA2                       6525 00253$:
      001EA2 02r1FrBD         [24] 6526 	ljmp	00139$
                                   6527 ;	ecen4330lab7.c:2051: do{
      001EA5                       6528 00117$:
                                   6529 ;	ecen4330lab7.c:2052: currAddr0++;			// Next RAM address
      001EA5 05*29            [12] 6530 	inc	_currAddr0
      001EA7 E4               [12] 6531 	clr	a
      001EA8 B5*29 02         [24] 6532 	cjne	a,_currAddr0,00254$
      001EAB 05*2A            [12] 6533 	inc	(_currAddr0 + 1)
      001EAD                       6534 00254$:
                                   6535 ;	ecen4330lab7.c:2053: data = RAMread(currAddr0);	// Read data
      001EAD 85*29 82         [24] 6536 	mov	dpl,_currAddr0
      001EB0 85*2A 83         [24] 6537 	mov	dph,(_currAddr0 + 1)
      001EB3 12r0Dr46         [24] 6538 	lcall	_RAMread
      001EB6 85 82*20         [24] 6539 	mov	_data,dpl
                                   6540 ;	ecen4330lab7.c:2054: if(data == byte1){			// If data matches search value
      001EB9 AE*20            [24] 6541 	mov	r6,_data
      001EBB 7F 00            [12] 6542 	mov	r7,#0x00
      001EBD EE               [12] 6543 	mov	a,r6
      001EBE B5*2F 0A         [24] 6544 	cjne	a,_byte1,00118$
      001EC1 EF               [12] 6545 	mov	a,r7
      001EC2 B5*30 06         [24] 6546 	cjne	a,(_byte1 + 1),00118$
                                   6547 ;	ecen4330lab7.c:2055: addr2 = currAddr0;		// Set first address of display page
      001EC5 85*29*25         [24] 6548 	mov	_addr2,_currAddr0
      001EC8 85*2A*26         [24] 6549 	mov	(_addr2 + 1),(_currAddr0 + 1)
      001ECB                       6550 00118$:
                                   6551 ;	ecen4330lab7.c:2057: }while(currAddr0 < addr1 && data != byte1);
      001ECB C3               [12] 6552 	clr	c
      001ECC E5*29            [12] 6553 	mov	a,_currAddr0
      001ECE 95*23            [12] 6554 	subb	a,_addr1
      001ED0 E5*2A            [12] 6555 	mov	a,(_currAddr0 + 1)
      001ED2 95*24            [12] 6556 	subb	a,(_addr1 + 1)
      001ED4 50 0C            [24] 6557 	jnc	00119$
      001ED6 AE*20            [24] 6558 	mov	r6,_data
      001ED8 7F 00            [12] 6559 	mov	r7,#0x00
      001EDA EE               [12] 6560 	mov	a,r6
      001EDB B5*2F C7         [24] 6561 	cjne	a,_byte1,00117$
      001EDE EF               [12] 6562 	mov	a,r7
      001EDF B5*30 C3         [24] 6563 	cjne	a,(_byte1 + 1),00117$
      001EE2                       6564 00119$:
                                   6565 ;	ecen4330lab7.c:2063: if(currAddr0 >= addr1 && data != byte1){
      001EE2 C3               [12] 6566 	clr	c
      001EE3 E5*29            [12] 6567 	mov	a,_currAddr0
      001EE5 95*23            [12] 6568 	subb	a,_addr1
      001EE7 E5*2A            [12] 6569 	mov	a,(_currAddr0 + 1)
      001EE9 95*24            [12] 6570 	subb	a,(_addr1 + 1)
      001EEB 50 03            [24] 6571 	jnc	00260$
      001EED 02r1FrBD         [24] 6572 	ljmp	00139$
      001EF0                       6573 00260$:
      001EF0 AE*20            [24] 6574 	mov	r6,_data
      001EF2 7F 00            [12] 6575 	mov	r7,#0x00
      001EF4 EE               [12] 6576 	mov	a,r6
      001EF5 B5*2F 07         [24] 6577 	cjne	a,_byte1,00261$
      001EF8 EF               [12] 6578 	mov	a,r7
      001EF9 B5*30 03         [24] 6579 	cjne	a,(_byte1 + 1),00261$
      001EFC 02r1FrBD         [24] 6580 	ljmp	00139$
      001EFF                       6581 00261$:
                                   6582 ;	ecen4330lab7.c:2064: resetLCD();
      001EFF 12r0Dr59         [24] 6583 	lcall	_resetLCD
                                   6584 ;	ecen4330lab7.c:2065: LCD_string_write("End of Data.");
      001F02 90r09r2E         [24] 6585 	mov	dptr,#___str_46
      001F05 75 F0 80         [24] 6586 	mov	b,#0x80
      001F08 12r09rC5         [24] 6587 	lcall	_LCD_string_write
                                   6588 ;	ecen4330lab7.c:2066: delay(200);
      001F0B 90 00 C8         [24] 6589 	mov	dptr,#0x00c8
      001F0E 12r00r25         [24] 6590 	lcall	_delay
                                   6591 ;	ecen4330lab7.c:2067: currAddr1--;	// Reset page count to last displayed page
      001F11 15*2B            [12] 6592 	dec	_currAddr1
      001F13 74 FF            [12] 6593 	mov	a,#0xff
      001F15 B5*2B 02         [24] 6594 	cjne	a,_currAddr1,00262$
      001F18 15*2C            [12] 6595 	dec	(_currAddr1 + 1)
      001F1A                       6596 00262$:
                                   6597 ;	ecen4330lab7.c:2072: break;
      001F1A 02r1FrBD         [24] 6598 	ljmp	00139$
                                   6599 ;	ecen4330lab7.c:2079: case '1':
      001F1D                       6600 00126$:
                                   6601 ;	ecen4330lab7.c:2083: if(currAddr1 == 1){
      001F1D 74 01            [12] 6602 	mov	a,#0x01
      001F1F B5*2B 06         [24] 6603 	cjne	a,_currAddr1,00263$
      001F22 14               [12] 6604 	dec	a
      001F23 B5*2C 02         [24] 6605 	cjne	a,(_currAddr1 + 1),00263$
      001F26 80 02            [24] 6606 	sjmp	00264$
      001F28                       6607 00263$:
      001F28 80 1E            [24] 6608 	sjmp	00133$
      001F2A                       6609 00264$:
                                   6610 ;	ecen4330lab7.c:2084: resetLCD();
      001F2A 12r0Dr59         [24] 6611 	lcall	_resetLCD
                                   6612 ;	ecen4330lab7.c:2085: LCD_string_write("End of Data.");
      001F2D 90r09r2E         [24] 6613 	mov	dptr,#___str_46
      001F30 75 F0 80         [24] 6614 	mov	b,#0x80
      001F33 12r09rC5         [24] 6615 	lcall	_LCD_string_write
                                   6616 ;	ecen4330lab7.c:2086: delay(200);
      001F36 90 00 C8         [24] 6617 	mov	dptr,#0x00c8
      001F39 12r00r25         [24] 6618 	lcall	_delay
                                   6619 ;	ecen4330lab7.c:2087: currAddr1--;	// Reset page count to last displayed page
      001F3C 15*2B            [12] 6620 	dec	_currAddr1
      001F3E 74 FF            [12] 6621 	mov	a,#0xff
      001F40 B5*2B 02         [24] 6622 	cjne	a,_currAddr1,00265$
      001F43 15*2C            [12] 6623 	dec	(_currAddr1 + 1)
      001F45                       6624 00265$:
      001F45 02r1FrBD         [24] 6625 	ljmp	00139$
      001F48                       6626 00133$:
                                   6627 ;	ecen4330lab7.c:2095: currAddr0 = addr2;
      001F48 85*25*29         [24] 6628 	mov	_currAddr0,_addr2
      001F4B 85*26*2A         [24] 6629 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6630 ;	ecen4330lab7.c:2096: count = 0;
      001F4E E4               [12] 6631 	clr	a
      001F4F F5*32            [12] 6632 	mov	_count,a
      001F51 F5*33            [12] 6633 	mov	(_count + 1),a
                                   6634 ;	ecen4330lab7.c:2097: while(count < 8){
      001F53                       6635 00129$:
      001F53 C3               [12] 6636 	clr	c
      001F54 E5*32            [12] 6637 	mov	a,_count
      001F56 94 08            [12] 6638 	subb	a,#0x08
      001F58 E5*33            [12] 6639 	mov	a,(_count + 1)
      001F5A 94 00            [12] 6640 	subb	a,#0x00
      001F5C 50 2B            [24] 6641 	jnc	00131$
                                   6642 ;	ecen4330lab7.c:2098: currAddr0--;
      001F5E 15*29            [12] 6643 	dec	_currAddr0
      001F60 74 FF            [12] 6644 	mov	a,#0xff
      001F62 B5*29 02         [24] 6645 	cjne	a,_currAddr0,00267$
      001F65 15*2A            [12] 6646 	dec	(_currAddr0 + 1)
      001F67                       6647 00267$:
                                   6648 ;	ecen4330lab7.c:2099: data = RAMread(currAddr0);
      001F67 85*29 82         [24] 6649 	mov	dpl,_currAddr0
      001F6A 85*2A 83         [24] 6650 	mov	dph,(_currAddr0 + 1)
      001F6D 12r0Dr46         [24] 6651 	lcall	_RAMread
      001F70 85 82*20         [24] 6652 	mov	_data,dpl
                                   6653 ;	ecen4330lab7.c:2100: if(data == byte1){
      001F73 AE*20            [24] 6654 	mov	r6,_data
      001F75 7F 00            [12] 6655 	mov	r7,#0x00
      001F77 EE               [12] 6656 	mov	a,r6
      001F78 B5*2F D8         [24] 6657 	cjne	a,_byte1,00129$
      001F7B EF               [12] 6658 	mov	a,r7
      001F7C B5*30 D4         [24] 6659 	cjne	a,(_byte1 + 1),00129$
                                   6660 ;	ecen4330lab7.c:2101: count++;
      001F7F 05*32            [12] 6661 	inc	_count
      001F81 E4               [12] 6662 	clr	a
      001F82 B5*32 CE         [24] 6663 	cjne	a,_count,00129$
      001F85 05*33            [12] 6664 	inc	(_count + 1)
      001F87 80 CA            [24] 6665 	sjmp	00129$
      001F89                       6666 00131$:
                                   6667 ;	ecen4330lab7.c:2104: addr2 = currAddr0;
      001F89 85*29*25         [24] 6668 	mov	_addr2,_currAddr0
      001F8C 85*2A*26         [24] 6669 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6670 ;	ecen4330lab7.c:2105: currAddr1 -= 2;
      001F8F E5*2B            [12] 6671 	mov	a,_currAddr1
      001F91 24 FE            [12] 6672 	add	a,#0xfe
      001F93 F5*2B            [12] 6673 	mov	_currAddr1,a
      001F95 E5*2C            [12] 6674 	mov	a,(_currAddr1 + 1)
      001F97 34 FF            [12] 6675 	addc	a,#0xff
      001F99 F5*2C            [12] 6676 	mov	(_currAddr1 + 1),a
                                   6677 ;	ecen4330lab7.c:2107: break;
                                   6678 ;	ecen4330lab7.c:2113: case 'E':
      001F9B 80 20            [24] 6679 	sjmp	00139$
      001F9D                       6680 00135$:
                                   6681 ;	ecen4330lab7.c:2114: resetLCD();
      001F9D 12r0Dr59         [24] 6682 	lcall	_resetLCD
                                   6683 ;	ecen4330lab7.c:2115: LCD_string_write("Returning to\nmain menu.");
      001FA0 90r06r1F         [24] 6684 	mov	dptr,#___str_15
      001FA3 75 F0 80         [24] 6685 	mov	b,#0x80
      001FA6 12r09rC5         [24] 6686 	lcall	_LCD_string_write
                                   6687 ;	ecen4330lab7.c:2116: delay(200);
      001FA9 90 00 C8         [24] 6688 	mov	dptr,#0x00c8
      001FAC 12r00r25         [24] 6689 	lcall	_delay
                                   6690 ;	ecen4330lab7.c:2117: break;
                                   6691 ;	ecen4330lab7.c:2123: default:
      001FAF 80 0C            [24] 6692 	sjmp	00139$
      001FB1                       6693 00136$:
                                   6694 ;	ecen4330lab7.c:2124: invalidInput();
      001FB1 12r0Dr81         [24] 6695 	lcall	_invalidInput
                                   6696 ;	ecen4330lab7.c:2125: currAddr1--;
      001FB4 15*2B            [12] 6697 	dec	_currAddr1
      001FB6 74 FF            [12] 6698 	mov	a,#0xff
      001FB8 B5*2B 02         [24] 6699 	cjne	a,_currAddr1,00271$
      001FBB 15*2C            [12] 6700 	dec	(_currAddr1 + 1)
      001FBD                       6701 00271$:
                                   6702 ;	ecen4330lab7.c:2128: }
      001FBD                       6703 00139$:
                                   6704 ;	ecen4330lab7.c:2129: }while(key != 'E');
      001FBD 74 45            [12] 6705 	mov	a,#0x45
      001FBF B5*16 01         [24] 6706 	cjne	a,_key,00272$
      001FC2 22               [24] 6707 	ret
      001FC3                       6708 00272$:
      001FC3 02r1DrB7         [24] 6709 	ljmp	00138$
                                   6710 ;	ecen4330lab7.c:2131: }
      001FC6 22               [24] 6711 	ret
                                   6712 ;------------------------------------------------------------
                                   6713 ;Allocation info for local variables in function 'FIND'
                                   6714 ;------------------------------------------------------------
                                   6715 ;	ecen4330lab7.c:2139: void FIND(){
                                   6716 ;	-----------------------------------------
                                   6717 ;	 function FIND
                                   6718 ;	-----------------------------------------
      001FC7                       6719 _FIND:
                                   6720 ;	ecen4330lab7.c:2140: endAddrCalc = 0;
      001FC7 E4               [12] 6721 	clr	a
      001FC8 F5*34            [12] 6722 	mov	_endAddrCalc,a
      001FCA F5*35            [12] 6723 	mov	(_endAddrCalc + 1),a
      001FCC F5*36            [12] 6724 	mov	(_endAddrCalc + 2),a
      001FCE F5*37            [12] 6725 	mov	(_endAddrCalc + 3),a
                                   6726 ;	ecen4330lab7.c:2141: addr0 = 0;                      // Starting Address
      001FD0 F5*21            [12] 6727 	mov	_addr0,a
      001FD2 F5*22            [12] 6728 	mov	(_addr0 + 1),a
                                   6729 ;	ecen4330lab7.c:2142: addr1 = 0;                      // End Address
      001FD4 F5*23            [12] 6730 	mov	_addr1,a
      001FD6 F5*24            [12] 6731 	mov	(_addr1 + 1),a
                                   6732 ;	ecen4330lab7.c:2143: dataType = 0;                   // Data Type
                                   6733 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001FD8 F5*1A            [12] 6734 	mov	_dataType,a
                                   6735 ;	ecen4330lab7.c:2144: dataSize = 0;                   // Data Size
      001FDA F5*1B            [12] 6736 	mov	_dataSize,a
      001FDC F5*1C            [12] 6737 	mov	(_dataSize + 1),a
                                   6738 ;	ecen4330lab7.c:2145: byte1 = 0;                       // Find Value
      001FDE F5*2F            [12] 6739 	mov	_byte1,a
      001FE0 F5*30            [12] 6740 	mov	(_byte1 + 1),a
                                   6741 ;	ecen4330lab7.c:2148: resetLCD();
      001FE2 12r0Dr59         [24] 6742 	lcall	_resetLCD
                                   6743 ;	ecen4330lab7.c:2149: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n   0x____");
      001FE5 90r09r3B         [24] 6744 	mov	dptr,#___str_47
      001FE8 75 F0 80         [24] 6745 	mov	b,#0x80
      001FEB 12r09rC5         [24] 6746 	lcall	_LCD_string_write
                                   6747 ;	ecen4330lab7.c:2150: cursor_x -= 4 * textsize * 6;
      001FEE E5*0C            [12] 6748 	mov	a,_textsize
      001FF0 75 F0 18         [24] 6749 	mov	b,#0x18
      001FF3 A4               [48] 6750 	mul	ab
      001FF4 FE               [12] 6751 	mov	r6,a
      001FF5 AF F0            [24] 6752 	mov	r7,b
      001FF7 E5*08            [12] 6753 	mov	a,_cursor_x
      001FF9 C3               [12] 6754 	clr	c
      001FFA 9E               [12] 6755 	subb	a,r6
      001FFB F5*08            [12] 6756 	mov	_cursor_x,a
      001FFD E5*09            [12] 6757 	mov	a,(_cursor_x + 1)
      001FFF 9F               [12] 6758 	subb	a,r7
      002000 F5*09            [12] 6759 	mov	(_cursor_x + 1),a
                                   6760 ;	ecen4330lab7.c:2151: inputRead16();                  // Read input
      002002 12r0DrAA         [24] 6761 	lcall	_inputRead16
                                   6762 ;	ecen4330lab7.c:2152: addr0 = input16;                // Start address
      002005 85*17*21         [24] 6763 	mov	_addr0,_input16
      002008 85*18*22         [24] 6764 	mov	(_addr0 + 1),(_input16 + 1)
                                   6765 ;	ecen4330lab7.c:2158: resetLCD();
      00200B 12r0Dr59         [24] 6766 	lcall	_resetLCD
                                   6767 ;	ecen4330lab7.c:2159: inputDataSize();                // Prompt & read input
      00200E 12r0Fr76         [24] 6768 	lcall	_inputDataSize
                                   6769 ;	ecen4330lab7.c:2162: resetLCD();
      002011 12r0Dr59         [24] 6770 	lcall	_resetLCD
                                   6771 ;	ecen4330lab7.c:2163: LCD_string_write("\nEnter search\nvalue:\n\n   0x__");
      002014 90r09r63         [24] 6772 	mov	dptr,#___str_48
      002017 75 F0 80         [24] 6773 	mov	b,#0x80
      00201A 12r09rC5         [24] 6774 	lcall	_LCD_string_write
                                   6775 ;	ecen4330lab7.c:2164: cursor_x -= 2 * textsize * 6;
      00201D E5*0C            [12] 6776 	mov	a,_textsize
      00201F 75 F0 0C         [24] 6777 	mov	b,#0x0c
      002022 A4               [48] 6778 	mul	ab
      002023 FE               [12] 6779 	mov	r6,a
      002024 AF F0            [24] 6780 	mov	r7,b
      002026 E5*08            [12] 6781 	mov	a,_cursor_x
      002028 C3               [12] 6782 	clr	c
      002029 9E               [12] 6783 	subb	a,r6
      00202A F5*08            [12] 6784 	mov	_cursor_x,a
      00202C E5*09            [12] 6785 	mov	a,(_cursor_x + 1)
      00202E 9F               [12] 6786 	subb	a,r7
      00202F F5*09            [12] 6787 	mov	(_cursor_x + 1),a
                                   6788 ;	ecen4330lab7.c:2165: inputRead8();                  // Read input
      002031 12r0Er65         [24] 6789 	lcall	_inputRead8
                                   6790 ;	ecen4330lab7.c:2166: byte1 = input8;                 // Find value
      002034 85*19*2F         [24] 6791 	mov	_byte1,_input8
      002037 75*30 00         [24] 6792 	mov	(_byte1 + 1),#0x00
                                   6793 ;	ecen4330lab7.c:2169: endAddrCalc = addr0 + dataSize;
      00203A E5*1B            [12] 6794 	mov	a,_dataSize
      00203C 25*21            [12] 6795 	add	a,_addr0
      00203E FE               [12] 6796 	mov	r6,a
      00203F E5*1C            [12] 6797 	mov	a,(_dataSize + 1)
      002041 35*22            [12] 6798 	addc	a,(_addr0 + 1)
      002043 FF               [12] 6799 	mov	r7,a
      002044 8E*34            [24] 6800 	mov	_endAddrCalc,r6
      002046 8F*35            [24] 6801 	mov	(_endAddrCalc + 1),r7
      002048 75*36 00         [24] 6802 	mov	(_endAddrCalc + 2),#0x00
      00204B 75*37 00         [24] 6803 	mov	(_endAddrCalc + 3),#0x00
                                   6804 ;	ecen4330lab7.c:2170: if(endAddrCalc < addr0){ // RAM overflow
      00204E AC*21            [24] 6805 	mov	r4,_addr0
      002050 AD*22            [24] 6806 	mov	r5,(_addr0 + 1)
      002052 7E 00            [12] 6807 	mov	r6,#0x00
      002054 7F 00            [12] 6808 	mov	r7,#0x00
      002056 C3               [12] 6809 	clr	c
      002057 E5*34            [12] 6810 	mov	a,_endAddrCalc
      002059 9C               [12] 6811 	subb	a,r4
      00205A E5*35            [12] 6812 	mov	a,(_endAddrCalc + 1)
      00205C 9D               [12] 6813 	subb	a,r5
      00205D E5*36            [12] 6814 	mov	a,(_endAddrCalc + 2)
      00205F 9E               [12] 6815 	subb	a,r6
      002060 E5*37            [12] 6816 	mov	a,(_endAddrCalc + 3)
      002062 9F               [12] 6817 	subb	a,r7
      002063 50 14            [24] 6818 	jnc	00102$
                                   6819 ;	ecen4330lab7.c:2171: addr1 = 0xFFFF;             // Set end address
      002065 75*23 FF         [24] 6820 	mov	_addr1,#0xff
                                   6821 ;	ecen4330lab7.c:2172: dataSize = addr1 - addr0;   // Recalculate data size
      002068 74 FF            [12] 6822 	mov	a,#0xff
      00206A F5*24            [12] 6823 	mov	(_addr1 + 1),a
      00206C C3               [12] 6824 	clr	c
      00206D 95*21            [12] 6825 	subb	a,_addr0
      00206F F5*1B            [12] 6826 	mov	_dataSize,a
      002071 74 FF            [12] 6827 	mov	a,#0xff
      002073 95*22            [12] 6828 	subb	a,(_addr0 + 1)
      002075 F5*1C            [12] 6829 	mov	(_dataSize + 1),a
      002077 80 0C            [24] 6830 	sjmp	00103$
      002079                       6831 00102$:
                                   6832 ;	ecen4330lab7.c:2175: addr1 = addr0 + dataSize;
      002079 E5*1B            [12] 6833 	mov	a,_dataSize
      00207B 25*21            [12] 6834 	add	a,_addr0
      00207D F5*23            [12] 6835 	mov	_addr1,a
      00207F E5*1C            [12] 6836 	mov	a,(_dataSize + 1)
      002081 35*22            [12] 6837 	addc	a,(_addr0 + 1)
      002083 F5*24            [12] 6838 	mov	(_addr1 + 1),a
      002085                       6839 00103$:
                                   6840 ;	ecen4330lab7.c:2195: FIND_display();                 // Display dump data
                                   6841 ;	ecen4330lab7.c:2196: }
      002085 02r1CrD2         [24] 6842 	ljmp	_FIND_display
                                   6843 ;------------------------------------------------------------
                                   6844 ;Allocation info for local variables in function 'resetLCD1'
                                   6845 ;------------------------------------------------------------
                                   6846 ;	ecen4330lab7.c:2198: void resetLCD1(){
                                   6847 ;	-----------------------------------------
                                   6848 ;	 function resetLCD1
                                   6849 ;	-----------------------------------------
      002088                       6850 _resetLCD1:
                                   6851 ;	ecen4330lab7.c:2199: setRotation(4);
      002088 75 82 04         [24] 6852 	mov	dpl,#0x04
      00208B 12r02rFB         [24] 6853 	lcall	_setRotation
                                   6854 ;	ecen4330lab7.c:2200: setTextColor(GRAY, BLACK);
      00208E E4               [12] 6855 	clr	a
      00208F F5*00            [12] 6856 	mov	_setTextColor_PARM_2,a
      002091 F5*01            [12] 6857 	mov	(_setTextColor_PARM_2 + 1),a
      002093 90 D6 BA         [24] 6858 	mov	dptr,#0xd6ba
      002096 12r02rD6         [24] 6859 	lcall	_setTextColor
                                   6860 ;	ecen4330lab7.c:2201: setTextSize(3);
      002099 75 82 03         [24] 6861 	mov	dpl,#0x03
      00209C 12r02rE3         [24] 6862 	lcall	_setTextSize
                                   6863 ;	ecen4330lab7.c:2202: fillScreen(BLACK);
      00209F 90 00 00         [24] 6864 	mov	dptr,#0x0000
      0020A2 12r06r6E         [24] 6865 	lcall	_fillScreen
                                   6866 ;	ecen4330lab7.c:2203: setCursor(0, 0);
      0020A5 E4               [12] 6867 	clr	a
      0020A6 F5*00            [12] 6868 	mov	_setCursor_PARM_2,a
      0020A8 F5*01            [12] 6869 	mov	(_setCursor_PARM_2 + 1),a
      0020AA 90 00 00         [24] 6870 	mov	dptr,#0x0000
                                   6871 ;	ecen4330lab7.c:2204: }
      0020AD 02r02rC9         [24] 6872 	ljmp	_setCursor
                                   6873 ;------------------------------------------------------------
                                   6874 ;Allocation info for local variables in function 'UART_dataRate'
                                   6875 ;------------------------------------------------------------
                                   6876 ;	ecen4330lab7.c:2223: void UART_dataRate() {
                                   6877 ;	-----------------------------------------
                                   6878 ;	 function UART_dataRate
                                   6879 ;	-----------------------------------------
      0020B0                       6880 _UART_dataRate:
                                   6881 ;	ecen4330lab7.c:2224: resetLCD();
      0020B0 12r0Dr59         [24] 6882 	lcall	_resetLCD
                                   6883 ;	ecen4330lab7.c:2225: do {
      0020B3                       6884 00118$:
                                   6885 ;	ecen4330lab7.c:2226: LCD_string_write("\n(1) 1200\n");
      0020B3 90r09r81         [24] 6886 	mov	dptr,#___str_49
      0020B6 75 F0 80         [24] 6887 	mov	b,#0x80
      0020B9 12r09rC5         [24] 6888 	lcall	_LCD_string_write
                                   6889 ;	ecen4330lab7.c:2227: LCD_string_write("(2) 2400\n");
      0020BC 90r09r8C         [24] 6890 	mov	dptr,#___str_50
      0020BF 75 F0 80         [24] 6891 	mov	b,#0x80
      0020C2 12r09rC5         [24] 6892 	lcall	_LCD_string_write
                                   6893 ;	ecen4330lab7.c:2228: LCD_string_write("(3) 4800\n");
      0020C5 90r09r96         [24] 6894 	mov	dptr,#___str_51
      0020C8 75 F0 80         [24] 6895 	mov	b,#0x80
      0020CB 12r09rC5         [24] 6896 	lcall	_LCD_string_write
                                   6897 ;	ecen4330lab7.c:2229: LCD_string_write("(4) 9600\n");
      0020CE 90r09rA0         [24] 6898 	mov	dptr,#___str_52
      0020D1 75 F0 80         [24] 6899 	mov	b,#0x80
      0020D4 12r09rC5         [24] 6900 	lcall	_LCD_string_write
                                   6901 ;	ecen4330lab7.c:2230: LCD_string_write("(5) 19200\n\n");
      0020D7 90r09rAA         [24] 6902 	mov	dptr,#___str_53
      0020DA 75 F0 80         [24] 6903 	mov	b,#0x80
      0020DD 12r09rC5         [24] 6904 	lcall	_LCD_string_write
                                   6905 ;	ecen4330lab7.c:2231: LCD_string_write("Current:\n");
      0020E0 90r09rB6         [24] 6906 	mov	dptr,#___str_54
      0020E3 75 F0 80         [24] 6907 	mov	b,#0x80
      0020E6 12r09rC5         [24] 6908 	lcall	_LCD_string_write
                                   6909 ;	ecen4330lab7.c:2232: if(PCON & 0x80 == 0x80){
      0020E9 E5 87            [12] 6910 	mov	a,_PCON
      0020EB 30 E0 42         [24] 6911 	jnb	acc.0,00109$
                                   6912 ;	ecen4330lab7.c:2233: switch(TH1) {
      0020EE AF 8D            [24] 6913 	mov	r7,_TH1
      0020F0 BF E8 02         [24] 6914 	cjne	r7,#0xe8,00176$
      0020F3 80 0F            [24] 6915 	sjmp	00101$
      0020F5                       6916 00176$:
      0020F5 BF F4 02         [24] 6917 	cjne	r7,#0xf4,00177$
      0020F8 80 15            [24] 6918 	sjmp	00102$
      0020FA                       6919 00177$:
      0020FA BF FA 02         [24] 6920 	cjne	r7,#0xfa,00178$
      0020FD 80 1B            [24] 6921 	sjmp	00103$
      0020FF                       6922 00178$:
                                   6923 ;	ecen4330lab7.c:2234: case 0xE8:
      0020FF BF FD 3C         [24] 6924 	cjne	r7,#0xfd,00110$
      002102 80 21            [24] 6925 	sjmp	00104$
      002104                       6926 00101$:
                                   6927 ;	ecen4330lab7.c:2235: LCD_string_write("1200\n");
      002104 90r09rC0         [24] 6928 	mov	dptr,#___str_55
      002107 75 F0 80         [24] 6929 	mov	b,#0x80
      00210A 12r09rC5         [24] 6930 	lcall	_LCD_string_write
                                   6931 ;	ecen4330lab7.c:2236: break;
                                   6932 ;	ecen4330lab7.c:2237: case 0xF4:
      00210D 80 2F            [24] 6933 	sjmp	00110$
      00210F                       6934 00102$:
                                   6935 ;	ecen4330lab7.c:2238: LCD_string_write("2400\n");
      00210F 90r09rC6         [24] 6936 	mov	dptr,#___str_56
      002112 75 F0 80         [24] 6937 	mov	b,#0x80
      002115 12r09rC5         [24] 6938 	lcall	_LCD_string_write
                                   6939 ;	ecen4330lab7.c:2239: break;
                                   6940 ;	ecen4330lab7.c:2240: case 0xFA:
      002118 80 24            [24] 6941 	sjmp	00110$
      00211A                       6942 00103$:
                                   6943 ;	ecen4330lab7.c:2241: LCD_string_write("4800\n");
      00211A 90r09rCC         [24] 6944 	mov	dptr,#___str_57
      00211D 75 F0 80         [24] 6945 	mov	b,#0x80
      002120 12r09rC5         [24] 6946 	lcall	_LCD_string_write
                                   6947 ;	ecen4330lab7.c:2242: break;
                                   6948 ;	ecen4330lab7.c:2243: case 0xFD:
      002123 80 19            [24] 6949 	sjmp	00110$
      002125                       6950 00104$:
                                   6951 ;	ecen4330lab7.c:2244: LCD_string_write("9600\n");
      002125 90r09rD2         [24] 6952 	mov	dptr,#___str_58
      002128 75 F0 80         [24] 6953 	mov	b,#0x80
      00212B 12r09rC5         [24] 6954 	lcall	_LCD_string_write
                                   6955 ;	ecen4330lab7.c:2246: }
      00212E 80 0E            [24] 6956 	sjmp	00110$
      002130                       6957 00109$:
                                   6958 ;	ecen4330lab7.c:2249: if (TH1 == 0xFD){
      002130 74 FD            [12] 6959 	mov	a,#0xfd
      002132 B5 8D 09         [24] 6960 	cjne	a,_TH1,00110$
                                   6961 ;	ecen4330lab7.c:2250: LCD_string_write("19200\n");
      002135 90r09rD8         [24] 6962 	mov	dptr,#___str_59
      002138 75 F0 80         [24] 6963 	mov	b,#0x80
      00213B 12r09rC5         [24] 6964 	lcall	_LCD_string_write
      00213E                       6965 00110$:
                                   6966 ;	ecen4330lab7.c:2253: LCD_string_write("\n   _");
      00213E 90r09rDF         [24] 6967 	mov	dptr,#___str_60
      002141 75 F0 80         [24] 6968 	mov	b,#0x80
      002144 12r09rC5         [24] 6969 	lcall	_LCD_string_write
                                   6970 ;	ecen4330lab7.c:2254: cursor_x -= 1 * textsize * 6;
      002147 E5*0C            [12] 6971 	mov	a,_textsize
      002149 75 F0 06         [24] 6972 	mov	b,#0x06
      00214C A4               [48] 6973 	mul	ab
      00214D FE               [12] 6974 	mov	r6,a
      00214E AF F0            [24] 6975 	mov	r7,b
      002150 E5*08            [12] 6976 	mov	a,_cursor_x
      002152 C3               [12] 6977 	clr	c
      002153 9E               [12] 6978 	subb	a,r6
      002154 F5*08            [12] 6979 	mov	_cursor_x,a
      002156 E5*09            [12] 6980 	mov	a,(_cursor_x + 1)
      002158 9F               [12] 6981 	subb	a,r7
      002159 F5*09            [12] 6982 	mov	(_cursor_x + 1),a
                                   6983 ;	ecen4330lab7.c:2255: key = keyDetect();
      00215B 12r0Ar04         [24] 6984 	lcall	_keyDetect
      00215E 85 82*16         [24] 6985 	mov	_key,dpl
                                   6986 ;	ecen4330lab7.c:2256: switch (key){
      002161 74 31            [12] 6987 	mov	a,#0x31
      002163 B5*16 02         [24] 6988 	cjne	a,_key,00182$
      002166 80 1C            [24] 6989 	sjmp	00111$
      002168                       6990 00182$:
      002168 74 32            [12] 6991 	mov	a,#0x32
      00216A B5*16 02         [24] 6992 	cjne	a,_key,00183$
      00216D 80 29            [24] 6993 	sjmp	00112$
      00216F                       6994 00183$:
      00216F 74 33            [12] 6995 	mov	a,#0x33
      002171 B5*16 02         [24] 6996 	cjne	a,_key,00184$
      002174 80 36            [24] 6997 	sjmp	00113$
      002176                       6998 00184$:
      002176 74 34            [12] 6999 	mov	a,#0x34
      002178 B5*16 02         [24] 7000 	cjne	a,_key,00185$
      00217B 80 43            [24] 7001 	sjmp	00114$
      00217D                       7002 00185$:
      00217D 74 35            [12] 7003 	mov	a,#0x35
                                   7004 ;	ecen4330lab7.c:2258: case '1':
      00217F B5*16 69         [24] 7005 	cjne	a,_key,00116$
      002182 80 50            [24] 7006 	sjmp	00115$
      002184                       7007 00111$:
                                   7008 ;	ecen4330lab7.c:2259: validInput = 1;
      002184 75*1D 01         [24] 7009 	mov	_validInput,#0x01
                                   7010 ;	ecen4330lab7.c:2260: TH1 = 0xE8;
      002187 75 8D E8         [24] 7011 	mov	_TH1,#0xe8
                                   7012 ;	ecen4330lab7.c:2261: dataEnd = 1;
      00218A 75*1E 01         [24] 7013 	mov	_dataEnd,#0x01
                                   7014 ;	ecen4330lab7.c:2262: LCD_string_write("1\n");
      00218D 90r09rE5         [24] 7015 	mov	dptr,#___str_61
      002190 75 F0 80         [24] 7016 	mov	b,#0x80
      002193 12r09rC5         [24] 7017 	lcall	_LCD_string_write
                                   7018 ;	ecen4330lab7.c:2263: break;
                                   7019 ;	ecen4330lab7.c:2264: case '2':
      002196 80 65            [24] 7020 	sjmp	00119$
      002198                       7021 00112$:
                                   7022 ;	ecen4330lab7.c:2265: validInput = 1;
      002198 75*1D 01         [24] 7023 	mov	_validInput,#0x01
                                   7024 ;	ecen4330lab7.c:2266: TH1 = 0xF4;
      00219B 75 8D F4         [24] 7025 	mov	_TH1,#0xf4
                                   7026 ;	ecen4330lab7.c:2267: dataEnd = 1;
      00219E 75*1E 01         [24] 7027 	mov	_dataEnd,#0x01
                                   7028 ;	ecen4330lab7.c:2268: LCD_string_write("2\n");
      0021A1 90r09rE8         [24] 7029 	mov	dptr,#___str_62
      0021A4 75 F0 80         [24] 7030 	mov	b,#0x80
      0021A7 12r09rC5         [24] 7031 	lcall	_LCD_string_write
                                   7032 ;	ecen4330lab7.c:2269: break;
                                   7033 ;	ecen4330lab7.c:2270: case '3':
      0021AA 80 51            [24] 7034 	sjmp	00119$
      0021AC                       7035 00113$:
                                   7036 ;	ecen4330lab7.c:2271: validInput = 1;
      0021AC 75*1D 01         [24] 7037 	mov	_validInput,#0x01
                                   7038 ;	ecen4330lab7.c:2272: TH1 = 0xFA;
      0021AF 75 8D FA         [24] 7039 	mov	_TH1,#0xfa
                                   7040 ;	ecen4330lab7.c:2273: dataEnd = 1;
      0021B2 75*1E 01         [24] 7041 	mov	_dataEnd,#0x01
                                   7042 ;	ecen4330lab7.c:2274: LCD_string_write("3\n");
      0021B5 90r09rEB         [24] 7043 	mov	dptr,#___str_63
      0021B8 75 F0 80         [24] 7044 	mov	b,#0x80
      0021BB 12r09rC5         [24] 7045 	lcall	_LCD_string_write
                                   7046 ;	ecen4330lab7.c:2275: break;
                                   7047 ;	ecen4330lab7.c:2276: case '4':
      0021BE 80 3D            [24] 7048 	sjmp	00119$
      0021C0                       7049 00114$:
                                   7050 ;	ecen4330lab7.c:2277: validInput = 1;
      0021C0 75*1D 01         [24] 7051 	mov	_validInput,#0x01
                                   7052 ;	ecen4330lab7.c:2278: TH1 = 0xFD;
      0021C3 75 8D FD         [24] 7053 	mov	_TH1,#0xfd
                                   7054 ;	ecen4330lab7.c:2279: dataEnd = 1;
      0021C6 75*1E 01         [24] 7055 	mov	_dataEnd,#0x01
                                   7056 ;	ecen4330lab7.c:2280: LCD_string_write("4\n");
      0021C9 90r09rEE         [24] 7057 	mov	dptr,#___str_64
      0021CC 75 F0 80         [24] 7058 	mov	b,#0x80
      0021CF 12r09rC5         [24] 7059 	lcall	_LCD_string_write
                                   7060 ;	ecen4330lab7.c:2281: break;
                                   7061 ;	ecen4330lab7.c:2282: case '5':
      0021D2 80 29            [24] 7062 	sjmp	00119$
      0021D4                       7063 00115$:
                                   7064 ;	ecen4330lab7.c:2283: validInput = 1;
      0021D4 75*1D 01         [24] 7065 	mov	_validInput,#0x01
                                   7066 ;	ecen4330lab7.c:2284: TH1 = 0xFD;
      0021D7 75 8D FD         [24] 7067 	mov	_TH1,#0xfd
                                   7068 ;	ecen4330lab7.c:2285: PCON = PCON | 0x80;
      0021DA 43 87 80         [24] 7069 	orl	_PCON,#0x80
                                   7070 ;	ecen4330lab7.c:2286: dataEnd = 1;
      0021DD 75*1E 01         [24] 7071 	mov	_dataEnd,#0x01
                                   7072 ;	ecen4330lab7.c:2287: LCD_string_write("5\n");
      0021E0 90r09rF1         [24] 7073 	mov	dptr,#___str_65
      0021E3 75 F0 80         [24] 7074 	mov	b,#0x80
      0021E6 12r09rC5         [24] 7075 	lcall	_LCD_string_write
                                   7076 ;	ecen4330lab7.c:2288: break;
                                   7077 ;	ecen4330lab7.c:2289: default:
      0021E9 80 12            [24] 7078 	sjmp	00119$
      0021EB                       7079 00116$:
                                   7080 ;	ecen4330lab7.c:2290: validInput = 0;
      0021EB 75*1D 00         [24] 7081 	mov	_validInput,#0x00
                                   7082 ;	ecen4330lab7.c:2291: LCD_string_write("X\n");
      0021EE 90r09rF4         [24] 7083 	mov	dptr,#___str_66
      0021F1 75 F0 80         [24] 7084 	mov	b,#0x80
      0021F4 12r09rC5         [24] 7085 	lcall	_LCD_string_write
                                   7086 ;	ecen4330lab7.c:2292: invalidInput();
      0021F7 12r0Dr81         [24] 7087 	lcall	_invalidInput
                                   7088 ;	ecen4330lab7.c:2293: dataEnd = 0;
      0021FA 75*1E 00         [24] 7089 	mov	_dataEnd,#0x00
                                   7090 ;	ecen4330lab7.c:2295: }
      0021FD                       7091 00119$:
                                   7092 ;	ecen4330lab7.c:2296: } while(!dataEnd);
      0021FD E5*1E            [12] 7093 	mov	a,_dataEnd
      0021FF 70 03            [24] 7094 	jnz	00187$
      002201 02r20rB3         [24] 7095 	ljmp	00118$
      002204                       7096 00187$:
                                   7097 ;	ecen4330lab7.c:2297: delay(200);
      002204 90 00 C8         [24] 7098 	mov	dptr,#0x00c8
      002207 12r00r25         [24] 7099 	lcall	_delay
                                   7100 ;	ecen4330lab7.c:2298: resetLCD1();
      00220A 12r20r88         [24] 7101 	lcall	_resetLCD1
                                   7102 ;	ecen4330lab7.c:2299: setTextColor(WHITE, BLACK);
      00220D E4               [12] 7103 	clr	a
      00220E F5*00            [12] 7104 	mov	_setTextColor_PARM_2,a
      002210 F5*01            [12] 7105 	mov	(_setTextColor_PARM_2 + 1),a
      002212 90 FF FF         [24] 7106 	mov	dptr,#0xffff
      002215 12r02rD6         [24] 7107 	lcall	_setTextColor
                                   7108 ;	ecen4330lab7.c:2300: LCD_string_write("\nReturning to\nlast menu.");
      002218 90r09rF7         [24] 7109 	mov	dptr,#___str_67
      00221B 75 F0 80         [24] 7110 	mov	b,#0x80
      00221E 12r09rC5         [24] 7111 	lcall	_LCD_string_write
                                   7112 ;	ecen4330lab7.c:2301: delay(200);
      002221 90 00 C8         [24] 7113 	mov	dptr,#0x00c8
                                   7114 ;	ecen4330lab7.c:2302: }
      002224 02r00r25         [24] 7115 	ljmp	_delay
                                   7116 ;------------------------------------------------------------
                                   7117 ;Allocation info for local variables in function 'UART_dataBits'
                                   7118 ;------------------------------------------------------------
                                   7119 ;	ecen4330lab7.c:2304: void UART_dataBits() {
                                   7120 ;	-----------------------------------------
                                   7121 ;	 function UART_dataBits
                                   7122 ;	-----------------------------------------
      002227                       7123 _UART_dataBits:
                                   7124 ;	ecen4330lab7.c:2305: resetLCD();
      002227 12r0Dr59         [24] 7125 	lcall	_resetLCD
                                   7126 ;	ecen4330lab7.c:2306: do {
      00222A                       7127 00108$:
                                   7128 ;	ecen4330lab7.c:2307: LCD_string_write("\nData Bits\n\n");
      00222A 90r0Ar10         [24] 7129 	mov	dptr,#___str_68
      00222D 75 F0 80         [24] 7130 	mov	b,#0x80
      002230 12r09rC5         [24] 7131 	lcall	_LCD_string_write
                                   7132 ;	ecen4330lab7.c:2308: LCD_string_write("(1) 8\n");
      002233 90r0Ar1D         [24] 7133 	mov	dptr,#___str_69
      002236 75 F0 80         [24] 7134 	mov	b,#0x80
      002239 12r09rC5         [24] 7135 	lcall	_LCD_string_write
                                   7136 ;	ecen4330lab7.c:2309: LCD_string_write("(2) 9\n");
      00223C 90r0Ar24         [24] 7137 	mov	dptr,#___str_70
      00223F 75 F0 80         [24] 7138 	mov	b,#0x80
      002242 12r09rC5         [24] 7139 	lcall	_LCD_string_write
                                   7140 ;	ecen4330lab7.c:2310: LCD_string_write("\nCurrent: ");
      002245 90r0Ar2B         [24] 7141 	mov	dptr,#___str_71
      002248 75 F0 80         [24] 7142 	mov	b,#0x80
      00224B 12r09rC5         [24] 7143 	lcall	_LCD_string_write
                                   7144 ;	ecen4330lab7.c:2311: switch(dataBits) {
      00224E E4               [12] 7145 	clr	a
      00224F B5*3F 02         [24] 7146 	cjne	a,_dataBits,00137$
      002252 80 07            [24] 7147 	sjmp	00101$
      002254                       7148 00137$:
      002254 74 01            [12] 7149 	mov	a,#0x01
                                   7150 ;	ecen4330lab7.c:2312: case 0:
      002256 B5*3F 16         [24] 7151 	cjne	a,_dataBits,00103$
      002259 80 0B            [24] 7152 	sjmp	00102$
      00225B                       7153 00101$:
                                   7154 ;	ecen4330lab7.c:2313: LCD_string_write("8\n");
      00225B 90r0Ar36         [24] 7155 	mov	dptr,#___str_72
      00225E 75 F0 80         [24] 7156 	mov	b,#0x80
      002261 12r09rC5         [24] 7157 	lcall	_LCD_string_write
                                   7158 ;	ecen4330lab7.c:2314: break;
                                   7159 ;	ecen4330lab7.c:2315: case 1:
      002264 80 09            [24] 7160 	sjmp	00103$
      002266                       7161 00102$:
                                   7162 ;	ecen4330lab7.c:2316: LCD_string_write("9\n");
      002266 90r0Ar39         [24] 7163 	mov	dptr,#___str_73
      002269 75 F0 80         [24] 7164 	mov	b,#0x80
      00226C 12r09rC5         [24] 7165 	lcall	_LCD_string_write
                                   7166 ;	ecen4330lab7.c:2318: }
      00226F                       7167 00103$:
                                   7168 ;	ecen4330lab7.c:2319: LCD_string_write("\n   _");
      00226F 90r09rDF         [24] 7169 	mov	dptr,#___str_60
      002272 75 F0 80         [24] 7170 	mov	b,#0x80
      002275 12r09rC5         [24] 7171 	lcall	_LCD_string_write
                                   7172 ;	ecen4330lab7.c:2320: cursor_x -= 1 * textsize * 6;
      002278 E5*0C            [12] 7173 	mov	a,_textsize
      00227A 75 F0 06         [24] 7174 	mov	b,#0x06
      00227D A4               [48] 7175 	mul	ab
      00227E FE               [12] 7176 	mov	r6,a
      00227F AF F0            [24] 7177 	mov	r7,b
      002281 E5*08            [12] 7178 	mov	a,_cursor_x
      002283 C3               [12] 7179 	clr	c
      002284 9E               [12] 7180 	subb	a,r6
      002285 F5*08            [12] 7181 	mov	_cursor_x,a
      002287 E5*09            [12] 7182 	mov	a,(_cursor_x + 1)
      002289 9F               [12] 7183 	subb	a,r7
      00228A F5*09            [12] 7184 	mov	(_cursor_x + 1),a
                                   7185 ;	ecen4330lab7.c:2321: key = keyDetect();
      00228C 12r0Ar04         [24] 7186 	lcall	_keyDetect
      00228F 85 82*16         [24] 7187 	mov	_key,dpl
                                   7188 ;	ecen4330lab7.c:2322: switch (key){
      002292 74 31            [12] 7189 	mov	a,#0x31
      002294 B5*16 02         [24] 7190 	cjne	a,_key,00139$
      002297 80 07            [24] 7191 	sjmp	00104$
      002299                       7192 00139$:
      002299 74 32            [12] 7193 	mov	a,#0x32
                                   7194 ;	ecen4330lab7.c:2324: case '1':
      00229B B5*16 2A         [24] 7195 	cjne	a,_key,00106$
      00229E 80 14            [24] 7196 	sjmp	00105$
      0022A0                       7197 00104$:
                                   7198 ;	ecen4330lab7.c:2325: validInput = 1;
      0022A0 75*1D 01         [24] 7199 	mov	_validInput,#0x01
                                   7200 ;	ecen4330lab7.c:2326: dataBits = 0;
      0022A3 75*3F 00         [24] 7201 	mov	_dataBits,#0x00
                                   7202 ;	ecen4330lab7.c:2327: dataEnd = 1;
      0022A6 75*1E 01         [24] 7203 	mov	_dataEnd,#0x01
                                   7204 ;	ecen4330lab7.c:2328: LCD_string_write("1\n");
      0022A9 90r09rE5         [24] 7205 	mov	dptr,#___str_61
      0022AC 75 F0 80         [24] 7206 	mov	b,#0x80
      0022AF 12r09rC5         [24] 7207 	lcall	_LCD_string_write
                                   7208 ;	ecen4330lab7.c:2329: break;
                                   7209 ;	ecen4330lab7.c:2330: case '2':
      0022B2 80 26            [24] 7210 	sjmp	00109$
      0022B4                       7211 00105$:
                                   7212 ;	ecen4330lab7.c:2331: validInput = 1;
      0022B4 75*1D 01         [24] 7213 	mov	_validInput,#0x01
                                   7214 ;	ecen4330lab7.c:2332: dataBits = 1;
      0022B7 75*3F 01         [24] 7215 	mov	_dataBits,#0x01
                                   7216 ;	ecen4330lab7.c:2333: dataEnd = 1;
      0022BA 75*1E 01         [24] 7217 	mov	_dataEnd,#0x01
                                   7218 ;	ecen4330lab7.c:2334: LCD_string_write("2\n");
      0022BD 90r09rE8         [24] 7219 	mov	dptr,#___str_62
      0022C0 75 F0 80         [24] 7220 	mov	b,#0x80
      0022C3 12r09rC5         [24] 7221 	lcall	_LCD_string_write
                                   7222 ;	ecen4330lab7.c:2335: break;
                                   7223 ;	ecen4330lab7.c:2336: default:
      0022C6 80 12            [24] 7224 	sjmp	00109$
      0022C8                       7225 00106$:
                                   7226 ;	ecen4330lab7.c:2337: validInput = 0;
      0022C8 75*1D 00         [24] 7227 	mov	_validInput,#0x00
                                   7228 ;	ecen4330lab7.c:2338: LCD_string_write("X\n");
      0022CB 90r09rF4         [24] 7229 	mov	dptr,#___str_66
      0022CE 75 F0 80         [24] 7230 	mov	b,#0x80
      0022D1 12r09rC5         [24] 7231 	lcall	_LCD_string_write
                                   7232 ;	ecen4330lab7.c:2339: invalidInput();
      0022D4 12r0Dr81         [24] 7233 	lcall	_invalidInput
                                   7234 ;	ecen4330lab7.c:2340: dataEnd = 0;
      0022D7 75*1E 00         [24] 7235 	mov	_dataEnd,#0x00
                                   7236 ;	ecen4330lab7.c:2342: }
      0022DA                       7237 00109$:
                                   7238 ;	ecen4330lab7.c:2343: } while(!dataEnd);
      0022DA E5*1E            [12] 7239 	mov	a,_dataEnd
      0022DC 70 03            [24] 7240 	jnz	00141$
      0022DE 02r22r2A         [24] 7241 	ljmp	00108$
      0022E1                       7242 00141$:
                                   7243 ;	ecen4330lab7.c:2344: delay(200);
      0022E1 90 00 C8         [24] 7244 	mov	dptr,#0x00c8
      0022E4 12r00r25         [24] 7245 	lcall	_delay
                                   7246 ;	ecen4330lab7.c:2345: resetLCD1();
      0022E7 12r20r88         [24] 7247 	lcall	_resetLCD1
                                   7248 ;	ecen4330lab7.c:2346: setTextColor(WHITE, BLACK);
      0022EA E4               [12] 7249 	clr	a
      0022EB F5*00            [12] 7250 	mov	_setTextColor_PARM_2,a
      0022ED F5*01            [12] 7251 	mov	(_setTextColor_PARM_2 + 1),a
      0022EF 90 FF FF         [24] 7252 	mov	dptr,#0xffff
      0022F2 12r02rD6         [24] 7253 	lcall	_setTextColor
                                   7254 ;	ecen4330lab7.c:2347: LCD_string_write("\nReturning to\nlast menu.");
      0022F5 90r09rF7         [24] 7255 	mov	dptr,#___str_67
      0022F8 75 F0 80         [24] 7256 	mov	b,#0x80
      0022FB 12r09rC5         [24] 7257 	lcall	_LCD_string_write
                                   7258 ;	ecen4330lab7.c:2348: delay(200);
      0022FE 90 00 C8         [24] 7259 	mov	dptr,#0x00c8
                                   7260 ;	ecen4330lab7.c:2349: }
      002301 02r00r25         [24] 7261 	ljmp	_delay
                                   7262 ;------------------------------------------------------------
                                   7263 ;Allocation info for local variables in function 'UART_parity'
                                   7264 ;------------------------------------------------------------
                                   7265 ;	ecen4330lab7.c:2352: void UART_parity() {
                                   7266 ;	-----------------------------------------
                                   7267 ;	 function UART_parity
                                   7268 ;	-----------------------------------------
      002304                       7269 _UART_parity:
                                   7270 ;	ecen4330lab7.c:2353: resetLCD();
      002304 12r0Dr59         [24] 7271 	lcall	_resetLCD
                                   7272 ;	ecen4330lab7.c:2354: do {
      002307                       7273 00110$:
                                   7274 ;	ecen4330lab7.c:2355: LCD_string_write("\nParity\n\n");
      002307 90r0Ar3C         [24] 7275 	mov	dptr,#___str_74
      00230A 75 F0 80         [24] 7276 	mov	b,#0x80
      00230D 12r09rC5         [24] 7277 	lcall	_LCD_string_write
                                   7278 ;	ecen4330lab7.c:2356: LCD_string_write("(1) Even\n");
      002310 90r0Ar46         [24] 7279 	mov	dptr,#___str_75
      002313 75 F0 80         [24] 7280 	mov	b,#0x80
      002316 12r09rC5         [24] 7281 	lcall	_LCD_string_write
                                   7282 ;	ecen4330lab7.c:2357: LCD_string_write("(2) Odd\n");
      002319 90r0Ar50         [24] 7283 	mov	dptr,#___str_76
      00231C 75 F0 80         [24] 7284 	mov	b,#0x80
      00231F 12r09rC5         [24] 7285 	lcall	_LCD_string_write
                                   7286 ;	ecen4330lab7.c:2358: LCD_string_write("(3) None\n");
      002322 90r0Ar59         [24] 7287 	mov	dptr,#___str_77
      002325 75 F0 80         [24] 7288 	mov	b,#0x80
      002328 12r09rC5         [24] 7289 	lcall	_LCD_string_write
                                   7290 ;	ecen4330lab7.c:2359: LCD_string_write("\nCurrent: ");
      00232B 90r0Ar2B         [24] 7291 	mov	dptr,#___str_71
      00232E 75 F0 80         [24] 7292 	mov	b,#0x80
      002331 12r09rC5         [24] 7293 	lcall	_LCD_string_write
                                   7294 ;	ecen4330lab7.c:2360: switch(parity) {
      002334 E4               [12] 7295 	clr	a
      002335 B5*40 02         [24] 7296 	cjne	a,_parity,00147$
      002338 80 0E            [24] 7297 	sjmp	00101$
      00233A                       7298 00147$:
      00233A 74 01            [12] 7299 	mov	a,#0x01
      00233C B5*40 02         [24] 7300 	cjne	a,_parity,00148$
      00233F 80 12            [24] 7301 	sjmp	00102$
      002341                       7302 00148$:
      002341 74 02            [12] 7303 	mov	a,#0x02
                                   7304 ;	ecen4330lab7.c:2361: case 0:
      002343 B5*40 21         [24] 7305 	cjne	a,_parity,00104$
      002346 80 16            [24] 7306 	sjmp	00103$
      002348                       7307 00101$:
                                   7308 ;	ecen4330lab7.c:2362: LCD_string_write("Even\n");
      002348 90r0Ar63         [24] 7309 	mov	dptr,#___str_78
      00234B 75 F0 80         [24] 7310 	mov	b,#0x80
      00234E 12r09rC5         [24] 7311 	lcall	_LCD_string_write
                                   7312 ;	ecen4330lab7.c:2363: break;
                                   7313 ;	ecen4330lab7.c:2364: case 1:
      002351 80 14            [24] 7314 	sjmp	00104$
      002353                       7315 00102$:
                                   7316 ;	ecen4330lab7.c:2365: LCD_string_write("Odd\n");
      002353 90r0Ar69         [24] 7317 	mov	dptr,#___str_79
      002356 75 F0 80         [24] 7318 	mov	b,#0x80
      002359 12r09rC5         [24] 7319 	lcall	_LCD_string_write
                                   7320 ;	ecen4330lab7.c:2366: break;
                                   7321 ;	ecen4330lab7.c:2367: case 2:
      00235C 80 09            [24] 7322 	sjmp	00104$
      00235E                       7323 00103$:
                                   7324 ;	ecen4330lab7.c:2368: LCD_string_write("None\n");
      00235E 90r0Ar6E         [24] 7325 	mov	dptr,#___str_80
      002361 75 F0 80         [24] 7326 	mov	b,#0x80
      002364 12r09rC5         [24] 7327 	lcall	_LCD_string_write
                                   7328 ;	ecen4330lab7.c:2370: }
      002367                       7329 00104$:
                                   7330 ;	ecen4330lab7.c:2371: LCD_string_write("\n   _");
      002367 90r09rDF         [24] 7331 	mov	dptr,#___str_60
      00236A 75 F0 80         [24] 7332 	mov	b,#0x80
      00236D 12r09rC5         [24] 7333 	lcall	_LCD_string_write
                                   7334 ;	ecen4330lab7.c:2372: cursor_x -= 1 * textsize * 6;
      002370 E5*0C            [12] 7335 	mov	a,_textsize
      002372 75 F0 06         [24] 7336 	mov	b,#0x06
      002375 A4               [48] 7337 	mul	ab
      002376 FE               [12] 7338 	mov	r6,a
      002377 AF F0            [24] 7339 	mov	r7,b
      002379 E5*08            [12] 7340 	mov	a,_cursor_x
      00237B C3               [12] 7341 	clr	c
      00237C 9E               [12] 7342 	subb	a,r6
      00237D F5*08            [12] 7343 	mov	_cursor_x,a
      00237F E5*09            [12] 7344 	mov	a,(_cursor_x + 1)
      002381 9F               [12] 7345 	subb	a,r7
      002382 F5*09            [12] 7346 	mov	(_cursor_x + 1),a
                                   7347 ;	ecen4330lab7.c:2373: key = keyDetect();
      002384 12r0Ar04         [24] 7348 	lcall	_keyDetect
      002387 85 82*16         [24] 7349 	mov	_key,dpl
                                   7350 ;	ecen4330lab7.c:2374: switch (key){
      00238A 74 31            [12] 7351 	mov	a,#0x31
      00238C B5*16 02         [24] 7352 	cjne	a,_key,00150$
      00238F 80 0E            [24] 7353 	sjmp	00105$
      002391                       7354 00150$:
      002391 74 32            [12] 7355 	mov	a,#0x32
      002393 B5*16 02         [24] 7356 	cjne	a,_key,00151$
      002396 80 1B            [24] 7357 	sjmp	00106$
      002398                       7358 00151$:
      002398 74 33            [12] 7359 	mov	a,#0x33
                                   7360 ;	ecen4330lab7.c:2376: case '1':
      00239A B5*16 3E         [24] 7361 	cjne	a,_key,00108$
      00239D 80 28            [24] 7362 	sjmp	00107$
      00239F                       7363 00105$:
                                   7364 ;	ecen4330lab7.c:2377: validInput = 1;
      00239F 75*1D 01         [24] 7365 	mov	_validInput,#0x01
                                   7366 ;	ecen4330lab7.c:2378: parity = 0;
      0023A2 75*40 00         [24] 7367 	mov	_parity,#0x00
                                   7368 ;	ecen4330lab7.c:2379: dataEnd = 1;
      0023A5 75*1E 01         [24] 7369 	mov	_dataEnd,#0x01
                                   7370 ;	ecen4330lab7.c:2380: LCD_string_write("1\n");
      0023A8 90r09rE5         [24] 7371 	mov	dptr,#___str_61
      0023AB 75 F0 80         [24] 7372 	mov	b,#0x80
      0023AE 12r09rC5         [24] 7373 	lcall	_LCD_string_write
                                   7374 ;	ecen4330lab7.c:2381: break;
                                   7375 ;	ecen4330lab7.c:2382: case '2':
      0023B1 80 3A            [24] 7376 	sjmp	00111$
      0023B3                       7377 00106$:
                                   7378 ;	ecen4330lab7.c:2383: validInput = 1;
      0023B3 75*1D 01         [24] 7379 	mov	_validInput,#0x01
                                   7380 ;	ecen4330lab7.c:2384: parity = 1;
      0023B6 75*40 01         [24] 7381 	mov	_parity,#0x01
                                   7382 ;	ecen4330lab7.c:2385: dataEnd = 1;
      0023B9 75*1E 01         [24] 7383 	mov	_dataEnd,#0x01
                                   7384 ;	ecen4330lab7.c:2386: LCD_string_write("2\n");
      0023BC 90r09rE8         [24] 7385 	mov	dptr,#___str_62
      0023BF 75 F0 80         [24] 7386 	mov	b,#0x80
      0023C2 12r09rC5         [24] 7387 	lcall	_LCD_string_write
                                   7388 ;	ecen4330lab7.c:2387: break;
                                   7389 ;	ecen4330lab7.c:2388: case '3':
      0023C5 80 26            [24] 7390 	sjmp	00111$
      0023C7                       7391 00107$:
                                   7392 ;	ecen4330lab7.c:2389: validInput = 1;
      0023C7 75*1D 01         [24] 7393 	mov	_validInput,#0x01
                                   7394 ;	ecen4330lab7.c:2390: parity = 2;
      0023CA 75*40 02         [24] 7395 	mov	_parity,#0x02
                                   7396 ;	ecen4330lab7.c:2391: dataEnd = 1;
      0023CD 75*1E 01         [24] 7397 	mov	_dataEnd,#0x01
                                   7398 ;	ecen4330lab7.c:2392: LCD_string_write("3\n");
      0023D0 90r09rEB         [24] 7399 	mov	dptr,#___str_63
      0023D3 75 F0 80         [24] 7400 	mov	b,#0x80
      0023D6 12r09rC5         [24] 7401 	lcall	_LCD_string_write
                                   7402 ;	ecen4330lab7.c:2393: break;
                                   7403 ;	ecen4330lab7.c:2394: default:
      0023D9 80 12            [24] 7404 	sjmp	00111$
      0023DB                       7405 00108$:
                                   7406 ;	ecen4330lab7.c:2395: validInput = 0;
      0023DB 75*1D 00         [24] 7407 	mov	_validInput,#0x00
                                   7408 ;	ecen4330lab7.c:2396: LCD_string_write("X\n");
      0023DE 90r09rF4         [24] 7409 	mov	dptr,#___str_66
      0023E1 75 F0 80         [24] 7410 	mov	b,#0x80
      0023E4 12r09rC5         [24] 7411 	lcall	_LCD_string_write
                                   7412 ;	ecen4330lab7.c:2397: invalidInput();
      0023E7 12r0Dr81         [24] 7413 	lcall	_invalidInput
                                   7414 ;	ecen4330lab7.c:2398: dataEnd = 0;
      0023EA 75*1E 00         [24] 7415 	mov	_dataEnd,#0x00
                                   7416 ;	ecen4330lab7.c:2400: }
      0023ED                       7417 00111$:
                                   7418 ;	ecen4330lab7.c:2401: } while(!dataEnd);
      0023ED E5*1E            [12] 7419 	mov	a,_dataEnd
      0023EF 70 03            [24] 7420 	jnz	00153$
      0023F1 02r23r07         [24] 7421 	ljmp	00110$
      0023F4                       7422 00153$:
                                   7423 ;	ecen4330lab7.c:2402: delay(200);
      0023F4 90 00 C8         [24] 7424 	mov	dptr,#0x00c8
      0023F7 12r00r25         [24] 7425 	lcall	_delay
                                   7426 ;	ecen4330lab7.c:2403: resetLCD1();
      0023FA 12r20r88         [24] 7427 	lcall	_resetLCD1
                                   7428 ;	ecen4330lab7.c:2404: setTextColor(WHITE, BLACK);
      0023FD E4               [12] 7429 	clr	a
      0023FE F5*00            [12] 7430 	mov	_setTextColor_PARM_2,a
      002400 F5*01            [12] 7431 	mov	(_setTextColor_PARM_2 + 1),a
      002402 90 FF FF         [24] 7432 	mov	dptr,#0xffff
      002405 12r02rD6         [24] 7433 	lcall	_setTextColor
                                   7434 ;	ecen4330lab7.c:2405: LCD_string_write("\nReturning to\nlast menu.");
      002408 90r09rF7         [24] 7435 	mov	dptr,#___str_67
      00240B 75 F0 80         [24] 7436 	mov	b,#0x80
      00240E 12r09rC5         [24] 7437 	lcall	_LCD_string_write
                                   7438 ;	ecen4330lab7.c:2406: delay(200);
      002411 90 00 C8         [24] 7439 	mov	dptr,#0x00c8
                                   7440 ;	ecen4330lab7.c:2407: }
      002414 02r00r25         [24] 7441 	ljmp	_delay
                                   7442 ;------------------------------------------------------------
                                   7443 ;Allocation info for local variables in function 'UART_send'
                                   7444 ;------------------------------------------------------------
                                   7445 ;	ecen4330lab7.c:2409: void UART_send() {
                                   7446 ;	-----------------------------------------
                                   7447 ;	 function UART_send
                                   7448 ;	-----------------------------------------
      002417                       7449 _UART_send:
                                   7450 ;	ecen4330lab7.c:2410: resetLCD();
      002417 12r0Dr59         [24] 7451 	lcall	_resetLCD
                                   7452 ;	ecen4330lab7.c:2411: LCD_string_write("\nEnter\ncharacter\nto send:\n\n   _");
      00241A 90r0Ar74         [24] 7453 	mov	dptr,#___str_81
      00241D 75 F0 80         [24] 7454 	mov	b,#0x80
      002420 12r09rC5         [24] 7455 	lcall	_LCD_string_write
                                   7456 ;	ecen4330lab7.c:2413: cursor_x -= 1 * textsize * 6;
      002423 E5*0C            [12] 7457 	mov	a,_textsize
      002425 75 F0 06         [24] 7458 	mov	b,#0x06
      002428 A4               [48] 7459 	mul	ab
      002429 FE               [12] 7460 	mov	r6,a
      00242A AF F0            [24] 7461 	mov	r7,b
      00242C E5*08            [12] 7462 	mov	a,_cursor_x
      00242E C3               [12] 7463 	clr	c
      00242F 9E               [12] 7464 	subb	a,r6
      002430 F5*08            [12] 7465 	mov	_cursor_x,a
      002432 E5*09            [12] 7466 	mov	a,(_cursor_x + 1)
      002434 9F               [12] 7467 	subb	a,r7
      002435 F5*09            [12] 7468 	mov	(_cursor_x + 1),a
                                   7469 ;	ecen4330lab7.c:2414: key = keyDetect();
      002437 12r0Ar04         [24] 7470 	lcall	_keyDetect
                                   7471 ;	ecen4330lab7.c:2415: write(key);
      00243A 85 82*16         [24] 7472 	mov  _key,dpl
      00243D 12r09r5F         [24] 7473 	lcall	_write
                                   7474 ;	ecen4330lab7.c:2416: delay(200);
      002440 90 00 C8         [24] 7475 	mov	dptr,#0x00c8
      002443 12r00r25         [24] 7476 	lcall	_delay
                                   7477 ;	ecen4330lab7.c:2417: resetLCD();
                                   7478 ;	ecen4330lab7.c:2418: }
      002446 02r0Dr59         [24] 7479 	ljmp	_resetLCD
                                   7480 ;------------------------------------------------------------
                                   7481 ;Allocation info for local variables in function 'UART'
                                   7482 ;------------------------------------------------------------
                                   7483 ;	ecen4330lab7.c:2426: void UART(){
                                   7484 ;	-----------------------------------------
                                   7485 ;	 function UART
                                   7486 ;	-----------------------------------------
      002449                       7487 _UART:
                                   7488 ;	ecen4330lab7.c:2427: do{
      002449                       7489 00108$:
                                   7490 ;	ecen4330lab7.c:2428: resetLCD();
      002449 12r0Dr59         [24] 7491 	lcall	_resetLCD
                                   7492 ;	ecen4330lab7.c:2429: LCD_string_write("\n(1) Data Rate");
      00244C 90r0Ar94         [24] 7493 	mov	dptr,#___str_82
      00244F 75 F0 80         [24] 7494 	mov	b,#0x80
      002452 12r09rC5         [24] 7495 	lcall	_LCD_string_write
                                   7496 ;	ecen4330lab7.c:2430: LCD_string_write("\n(2) # of Data\n    Bits");
      002455 90r0ArA3         [24] 7497 	mov	dptr,#___str_83
      002458 75 F0 80         [24] 7498 	mov	b,#0x80
      00245B 12r09rC5         [24] 7499 	lcall	_LCD_string_write
                                   7500 ;	ecen4330lab7.c:2431: LCD_string_write("\n(3) Parity");
      00245E 90r0ArBB         [24] 7501 	mov	dptr,#___str_84
      002461 75 F0 80         [24] 7502 	mov	b,#0x80
      002464 12r09rC5         [24] 7503 	lcall	_LCD_string_write
                                   7504 ;	ecen4330lab7.c:2432: LCD_string_write("\n(4) Send Data");
      002467 90r0ArC7         [24] 7505 	mov	dptr,#___str_85
      00246A 75 F0 80         [24] 7506 	mov	b,#0x80
      00246D 12r09rC5         [24] 7507 	lcall	_LCD_string_write
                                   7508 ;	ecen4330lab7.c:2433: LCD_string_write("\n(E) End\n");
      002470 90r0ArD6         [24] 7509 	mov	dptr,#___str_86
      002473 75 F0 80         [24] 7510 	mov	b,#0x80
      002476 12r09rC5         [24] 7511 	lcall	_LCD_string_write
                                   7512 ;	ecen4330lab7.c:2435: key = keyDetect();
      002479 12r0Ar04         [24] 7513 	lcall	_keyDetect
      00247C 85 82*16         [24] 7514 	mov	_key,dpl
                                   7515 ;	ecen4330lab7.c:2436: switch (key){
      00247F 74 31            [12] 7516 	mov	a,#0x31
      002481 B5*16 02         [24] 7517 	cjne	a,_key,00137$
      002484 80 1C            [24] 7518 	sjmp	00101$
      002486                       7519 00137$:
      002486 74 32            [12] 7520 	mov	a,#0x32
      002488 B5*16 02         [24] 7521 	cjne	a,_key,00138$
      00248B 80 1D            [24] 7522 	sjmp	00102$
      00248D                       7523 00138$:
      00248D 74 33            [12] 7524 	mov	a,#0x33
      00248F B5*16 02         [24] 7525 	cjne	a,_key,00139$
      002492 80 1E            [24] 7526 	sjmp	00103$
      002494                       7527 00139$:
      002494 74 34            [12] 7528 	mov	a,#0x34
      002496 B5*16 02         [24] 7529 	cjne	a,_key,00140$
      002499 80 1F            [24] 7530 	sjmp	00104$
      00249B                       7531 00140$:
      00249B 74 45            [12] 7532 	mov	a,#0x45
                                   7533 ;	ecen4330lab7.c:2438: case '1':
      00249D B5*16 44         [24] 7534 	cjne	a,_key,00106$
      0024A0 80 20            [24] 7535 	sjmp	00105$
      0024A2                       7536 00101$:
                                   7537 ;	ecen4330lab7.c:2439: UART_dataRate();
      0024A2 12r20rB0         [24] 7538 	lcall	_UART_dataRate
                                   7539 ;	ecen4330lab7.c:2440: dataEnd = 0;
      0024A5 75*1E 00         [24] 7540 	mov	_dataEnd,#0x00
                                   7541 ;	ecen4330lab7.c:2441: break;
                                   7542 ;	ecen4330lab7.c:2442: case '2':
      0024A8 80 40            [24] 7543 	sjmp	00109$
      0024AA                       7544 00102$:
                                   7545 ;	ecen4330lab7.c:2443: UART_dataBits();
      0024AA 12r22r27         [24] 7546 	lcall	_UART_dataBits
                                   7547 ;	ecen4330lab7.c:2444: dataEnd = 0;
      0024AD 75*1E 00         [24] 7548 	mov	_dataEnd,#0x00
                                   7549 ;	ecen4330lab7.c:2445: break;
                                   7550 ;	ecen4330lab7.c:2446: case '3':
      0024B0 80 38            [24] 7551 	sjmp	00109$
      0024B2                       7552 00103$:
                                   7553 ;	ecen4330lab7.c:2447: UART_parity();
      0024B2 12r23r04         [24] 7554 	lcall	_UART_parity
                                   7555 ;	ecen4330lab7.c:2448: dataEnd = 0;
      0024B5 75*1E 00         [24] 7556 	mov	_dataEnd,#0x00
                                   7557 ;	ecen4330lab7.c:2449: break;
                                   7558 ;	ecen4330lab7.c:2450: case '4':
      0024B8 80 30            [24] 7559 	sjmp	00109$
      0024BA                       7560 00104$:
                                   7561 ;	ecen4330lab7.c:2451: UART_send();
      0024BA 12r24r17         [24] 7562 	lcall	_UART_send
                                   7563 ;	ecen4330lab7.c:2452: dataEnd = 0;
      0024BD 75*1E 00         [24] 7564 	mov	_dataEnd,#0x00
                                   7565 ;	ecen4330lab7.c:2453: break;
                                   7566 ;	ecen4330lab7.c:2454: case 'E':
      0024C0 80 28            [24] 7567 	sjmp	00109$
      0024C2                       7568 00105$:
                                   7569 ;	ecen4330lab7.c:2455: resetLCD1();
      0024C2 12r20r88         [24] 7570 	lcall	_resetLCD1
                                   7571 ;	ecen4330lab7.c:2456: setTextColor(WHITE, BLACK);
      0024C5 E4               [12] 7572 	clr	a
      0024C6 F5*00            [12] 7573 	mov	_setTextColor_PARM_2,a
      0024C8 F5*01            [12] 7574 	mov	(_setTextColor_PARM_2 + 1),a
      0024CA 90 FF FF         [24] 7575 	mov	dptr,#0xffff
      0024CD 12r02rD6         [24] 7576 	lcall	_setTextColor
                                   7577 ;	ecen4330lab7.c:2457: LCD_string_write("\nReturning to\nmain menu.");
      0024D0 90r08rD2         [24] 7578 	mov	dptr,#___str_43
      0024D3 75 F0 80         [24] 7579 	mov	b,#0x80
      0024D6 12r09rC5         [24] 7580 	lcall	_LCD_string_write
                                   7581 ;	ecen4330lab7.c:2458: delay(200);
      0024D9 90 00 C8         [24] 7582 	mov	dptr,#0x00c8
      0024DC 12r00r25         [24] 7583 	lcall	_delay
                                   7584 ;	ecen4330lab7.c:2459: dataEnd = 1;
      0024DF 75*1E 01         [24] 7585 	mov	_dataEnd,#0x01
                                   7586 ;	ecen4330lab7.c:2460: break;
                                   7587 ;	ecen4330lab7.c:2461: default:
      0024E2 80 06            [24] 7588 	sjmp	00109$
      0024E4                       7589 00106$:
                                   7590 ;	ecen4330lab7.c:2462: invalidInput();
      0024E4 12r0Dr81         [24] 7591 	lcall	_invalidInput
                                   7592 ;	ecen4330lab7.c:2463: dataEnd = 0;
      0024E7 75*1E 00         [24] 7593 	mov	_dataEnd,#0x00
                                   7594 ;	ecen4330lab7.c:2465: }
      0024EA                       7595 00109$:
                                   7596 ;	ecen4330lab7.c:2466: } while(dataEnd == 0);
      0024EA E5*1E            [12] 7597 	mov	a,_dataEnd
      0024EC 70 03            [24] 7598 	jnz	00142$
      0024EE 02r24r49         [24] 7599 	ljmp	00108$
      0024F1                       7600 00142$:
                                   7601 ;	ecen4330lab7.c:2467: }
      0024F1 22               [24] 7602 	ret
                                   7603 ;------------------------------------------------------------
                                   7604 ;Allocation info for local variables in function 'LCD_mainMenu'
                                   7605 ;------------------------------------------------------------
                                   7606 ;__1310720043              Allocated to registers 
                                   7607 ;__1310720044              Allocated to registers 
                                   7608 ;map_address               Allocated to registers 
                                   7609 ;d                         Allocated to registers 
                                   7610 ;__1966080046              Allocated to registers 
                                   7611 ;__1966080047              Allocated to registers 
                                   7612 ;map_address               Allocated to registers 
                                   7613 ;d                         Allocated to registers 
                                   7614 ;__1966080049              Allocated to registers 
                                   7615 ;__1966080050              Allocated to registers 
                                   7616 ;map_address               Allocated to registers 
                                   7617 ;d                         Allocated to registers 
                                   7618 ;__1966080052              Allocated to registers 
                                   7619 ;__1966080053              Allocated to registers 
                                   7620 ;map_address               Allocated to registers 
                                   7621 ;d                         Allocated to registers 
                                   7622 ;__1966080055              Allocated to registers 
                                   7623 ;__1966080056              Allocated to registers 
                                   7624 ;map_address               Allocated to registers 
                                   7625 ;d                         Allocated to registers 
                                   7626 ;__1966080058              Allocated to registers 
                                   7627 ;__1966080059              Allocated to registers 
                                   7628 ;map_address               Allocated to registers 
                                   7629 ;d                         Allocated to registers 
                                   7630 ;__1966080061              Allocated to registers 
                                   7631 ;__1966080062              Allocated to registers 
                                   7632 ;map_address               Allocated to registers 
                                   7633 ;d                         Allocated to registers 
                                   7634 ;__1966080064              Allocated to registers 
                                   7635 ;__1966080065              Allocated to registers 
                                   7636 ;map_address               Allocated to registers 
                                   7637 ;d                         Allocated to registers 
                                   7638 ;__1966080067              Allocated to registers 
                                   7639 ;__1966080068              Allocated to registers 
                                   7640 ;map_address               Allocated to registers 
                                   7641 ;d                         Allocated to registers 
                                   7642 ;------------------------------------------------------------
                                   7643 ;	ecen4330lab7.c:2491: void LCD_mainMenu() {
                                   7644 ;	-----------------------------------------
                                   7645 ;	 function LCD_mainMenu
                                   7646 ;	-----------------------------------------
      0024F2                       7647 _LCD_mainMenu:
                                   7648 ;	ecen4330lab7.c:2493: key = 0;
      0024F2 75*16 00         [24] 7649 	mov	_key,#0x00
                                   7650 ;	ecen4330lab7.c:2494: iowrite8(seg7_address, 0xC0);
      0024F5 85*04 82         [24] 7651 	mov	dpl,_seg7_address
      0024F8 85*05 83         [24] 7652 	mov	dph,(_seg7_address + 1)
                                   7653 ;	ecen4330lab7.c:177: IOM = 1;
                                   7654 ;	assignBit
      0024FB D2 B4            [12] 7655 	setb	_P3_4
                                   7656 ;	ecen4330lab7.c:178: *map_address = d;
      0024FD 74 C0            [12] 7657 	mov	a,#0xc0
      0024FF F0               [24] 7658 	movx	@dptr,a
                                   7659 ;	ecen4330lab7.c:179: IOM = 0;
                                   7660 ;	assignBit
      002500 C2 B4            [12] 7661 	clr	_P3_4
                                   7662 ;	ecen4330lab7.c:2497: resetLCD();
      002502 12r0Dr59         [24] 7663 	lcall	_resetLCD
                                   7664 ;	ecen4330lab7.c:2498: setTextColor(GREEN, BLACK);
      002505 E4               [12] 7665 	clr	a
      002506 F5*00            [12] 7666 	mov	_setTextColor_PARM_2,a
      002508 F5*01            [12] 7667 	mov	(_setTextColor_PARM_2 + 1),a
      00250A 90 07 E0         [24] 7668 	mov	dptr,#0x07e0
      00250D 12r02rD6         [24] 7669 	lcall	_setTextColor
                                   7670 ;	ecen4330lab7.c:2499: LCD_string_write("   Cameron\n   Biniamow\n");
      002510 90r0ArE0         [24] 7671 	mov	dptr,#___str_87
      002513 75 F0 80         [24] 7672 	mov	b,#0x80
      002516 12r09rC5         [24] 7673 	lcall	_LCD_string_write
                                   7674 ;	ecen4330lab7.c:2500: LCD_string_write("  ECEN-4330\n\n");
      002519 90r0ArF8         [24] 7675 	mov	dptr,#___str_88
      00251C 75 F0 80         [24] 7676 	mov	b,#0x80
      00251F 12r09rC5         [24] 7677 	lcall	_LCD_string_write
                                   7678 ;	ecen4330lab7.c:2503: setTextColor(WHITE, BLACK);
      002522 E4               [12] 7679 	clr	a
      002523 F5*00            [12] 7680 	mov	_setTextColor_PARM_2,a
      002525 F5*01            [12] 7681 	mov	(_setTextColor_PARM_2 + 1),a
      002527 90 FF FF         [24] 7682 	mov	dptr,#0xffff
      00252A 12r02rD6         [24] 7683 	lcall	_setTextColor
                                   7684 ;	ecen4330lab7.c:2504: LCD_string_write("(A) RAM CHECK\n");
      00252D 90r0Br06         [24] 7685 	mov	dptr,#___str_89
      002530 75 F0 80         [24] 7686 	mov	b,#0x80
      002533 12r09rC5         [24] 7687 	lcall	_LCD_string_write
                                   7688 ;	ecen4330lab7.c:2505: LCD_string_write("(B) MOVE\n");
      002536 90r0Br15         [24] 7689 	mov	dptr,#___str_90
      002539 75 F0 80         [24] 7690 	mov	b,#0x80
      00253C 12r09rC5         [24] 7691 	lcall	_LCD_string_write
                                   7692 ;	ecen4330lab7.c:2506: LCD_string_write("(C) COUNT\n");
      00253F 90r0Br1F         [24] 7693 	mov	dptr,#___str_91
      002542 75 F0 80         [24] 7694 	mov	b,#0x80
      002545 12r09rC5         [24] 7695 	lcall	_LCD_string_write
                                   7696 ;	ecen4330lab7.c:2507: LCD_string_write("(D) DUMP\n");
      002548 90r0Br2A         [24] 7697 	mov	dptr,#___str_92
      00254B 75 F0 80         [24] 7698 	mov	b,#0x80
      00254E 12r09rC5         [24] 7699 	lcall	_LCD_string_write
                                   7700 ;	ecen4330lab7.c:2508: LCD_string_write("(E) EDIT\n");
      002551 90r0Br34         [24] 7701 	mov	dptr,#___str_93
      002554 75 F0 80         [24] 7702 	mov	b,#0x80
      002557 12r09rC5         [24] 7703 	lcall	_LCD_string_write
                                   7704 ;	ecen4330lab7.c:2509: LCD_string_write("(F) FIND\n");
      00255A 90r0Br3E         [24] 7705 	mov	dptr,#___str_94
      00255D 75 F0 80         [24] 7706 	mov	b,#0x80
      002560 12r09rC5         [24] 7707 	lcall	_LCD_string_write
                                   7708 ;	ecen4330lab7.c:2511: LCD_string_write("(1) UART\n");
      002563 90r0Br48         [24] 7709 	mov	dptr,#___str_95
      002566 75 F0 80         [24] 7710 	mov	b,#0x80
      002569 12r09rC5         [24] 7711 	lcall	_LCD_string_write
                                   7712 ;	ecen4330lab7.c:2512: setTextColor(WHITE, BLACK);
      00256C E4               [12] 7713 	clr	a
      00256D F5*00            [12] 7714 	mov	_setTextColor_PARM_2,a
      00256F F5*01            [12] 7715 	mov	(_setTextColor_PARM_2 + 1),a
      002571 90 FF FF         [24] 7716 	mov	dptr,#0xffff
      002574 12r02rD6         [24] 7717 	lcall	_setTextColor
                                   7718 ;	ecen4330lab7.c:2513: setTextSize(1);
      002577 75 82 01         [24] 7719 	mov	dpl,#0x01
      00257A 12r02rE3         [24] 7720 	lcall	_setTextSize
                                   7721 ;	ecen4330lab7.c:2514: setCursor(3, 304);
      00257D 75*00 30         [24] 7722 	mov	_setCursor_PARM_2,#0x30
      002580 75*01 01         [24] 7723 	mov	(_setCursor_PARM_2 + 1),#0x01
      002583 90 00 03         [24] 7724 	mov	dptr,#0x0003
      002586 12r02rC9         [24] 7725 	lcall	_setCursor
                                   7726 ;	ecen4330lab7.c:2515: LCD_string_write("Spring 2021");
      002589 90r0Br52         [24] 7727 	mov	dptr,#___str_96
      00258C 75 F0 80         [24] 7728 	mov	b,#0x80
      00258F 12r09rC5         [24] 7729 	lcall	_LCD_string_write
                                   7730 ;	ecen4330lab7.c:2516: rtcPrint();
      002592 12r01r6D         [24] 7731 	lcall	_rtcPrint
                                   7732 ;	ecen4330lab7.c:2519: key = keyDetect();
      002595 12r0Ar04         [24] 7733 	lcall	_keyDetect
      002598 85 82*16         [24] 7734 	mov	_key,dpl
                                   7735 ;	ecen4330lab7.c:2520: switch (key)
      00259B 74 31            [12] 7736 	mov	a,#0x31
      00259D B5*16 03         [24] 7737 	cjne	a,_key,00149$
      0025A0 02r26r30         [24] 7738 	ljmp	00107$
      0025A3                       7739 00149$:
      0025A3 74 41            [12] 7740 	mov	a,#0x41
      0025A5 B5*16 02         [24] 7741 	cjne	a,_key,00150$
      0025A8 80 26            [24] 7742 	sjmp	00101$
      0025AA                       7743 00150$:
      0025AA 74 42            [12] 7744 	mov	a,#0x42
      0025AC B5*16 02         [24] 7745 	cjne	a,_key,00151$
      0025AF 80 2F            [24] 7746 	sjmp	00102$
      0025B1                       7747 00151$:
      0025B1 74 43            [12] 7748 	mov	a,#0x43
      0025B3 B5*16 02         [24] 7749 	cjne	a,_key,00152$
      0025B6 80 38            [24] 7750 	sjmp	00103$
      0025B8                       7751 00152$:
      0025B8 74 44            [12] 7752 	mov	a,#0x44
      0025BA B5*16 02         [24] 7753 	cjne	a,_key,00153$
      0025BD 80 41            [24] 7754 	sjmp	00104$
      0025BF                       7755 00153$:
      0025BF 74 45            [12] 7756 	mov	a,#0x45
      0025C1 B5*16 02         [24] 7757 	cjne	a,_key,00154$
      0025C4 80 4A            [24] 7758 	sjmp	00105$
      0025C6                       7759 00154$:
      0025C6 74 46            [12] 7760 	mov	a,#0x46
      0025C8 B5*16 02         [24] 7761 	cjne	a,_key,00155$
      0025CB 80 53            [24] 7762 	sjmp	00106$
      0025CD                       7763 00155$:
      0025CD 02r26r40         [24] 7764 	ljmp	00108$
                                   7765 ;	ecen4330lab7.c:2522: case 'A':
      0025D0                       7766 00101$:
                                   7767 ;	ecen4330lab7.c:2523: iowrite8(seg7_address, 0x88);
      0025D0 85*04 82         [24] 7768 	mov	dpl,_seg7_address
      0025D3 85*05 83         [24] 7769 	mov	dph,(_seg7_address + 1)
                                   7770 ;	ecen4330lab7.c:177: IOM = 1;
                                   7771 ;	assignBit
      0025D6 D2 B4            [12] 7772 	setb	_P3_4
                                   7773 ;	ecen4330lab7.c:178: *map_address = d;
      0025D8 74 88            [12] 7774 	mov	a,#0x88
      0025DA F0               [24] 7775 	movx	@dptr,a
                                   7776 ;	ecen4330lab7.c:179: IOM = 0;
                                   7777 ;	assignBit
      0025DB C2 B4            [12] 7778 	clr	_P3_4
                                   7779 ;	ecen4330lab7.c:2524: RAM_CHECK();
                                   7780 ;	ecen4330lab7.c:2525: break;
      0025DD 02r10rAD         [24] 7781 	ljmp	_RAM_CHECK
                                   7782 ;	ecen4330lab7.c:2526: case 'B':
      0025E0                       7783 00102$:
                                   7784 ;	ecen4330lab7.c:2527: iowrite8(seg7_address, 0x83);
      0025E0 85*04 82         [24] 7785 	mov	dpl,_seg7_address
      0025E3 85*05 83         [24] 7786 	mov	dph,(_seg7_address + 1)
                                   7787 ;	ecen4330lab7.c:177: IOM = 1;
                                   7788 ;	assignBit
      0025E6 D2 B4            [12] 7789 	setb	_P3_4
                                   7790 ;	ecen4330lab7.c:178: *map_address = d;
      0025E8 74 83            [12] 7791 	mov	a,#0x83
      0025EA F0               [24] 7792 	movx	@dptr,a
                                   7793 ;	ecen4330lab7.c:179: IOM = 0;
                                   7794 ;	assignBit
      0025EB C2 B4            [12] 7795 	clr	_P3_4
                                   7796 ;	ecen4330lab7.c:2528: MOVE();
                                   7797 ;	ecen4330lab7.c:2529: break;
                                   7798 ;	ecen4330lab7.c:2530: case 'C':
      0025ED 02r12rE6         [24] 7799 	ljmp	_MOVE
      0025F0                       7800 00103$:
                                   7801 ;	ecen4330lab7.c:2531: iowrite8(seg7_address, 0xC6);
      0025F0 85*04 82         [24] 7802 	mov	dpl,_seg7_address
      0025F3 85*05 83         [24] 7803 	mov	dph,(_seg7_address + 1)
                                   7804 ;	ecen4330lab7.c:177: IOM = 1;
                                   7805 ;	assignBit
      0025F6 D2 B4            [12] 7806 	setb	_P3_4
                                   7807 ;	ecen4330lab7.c:178: *map_address = d;
      0025F8 74 C6            [12] 7808 	mov	a,#0xc6
      0025FA F0               [24] 7809 	movx	@dptr,a
                                   7810 ;	ecen4330lab7.c:179: IOM = 0;
                                   7811 ;	assignBit
      0025FB C2 B4            [12] 7812 	clr	_P3_4
                                   7813 ;	ecen4330lab7.c:2532: COUNT();
                                   7814 ;	ecen4330lab7.c:2533: break;
                                   7815 ;	ecen4330lab7.c:2534: case 'D':
      0025FD 02r15r02         [24] 7816 	ljmp	_COUNT
      002600                       7817 00104$:
                                   7818 ;	ecen4330lab7.c:2535: iowrite8(seg7_address, 0xA1);
      002600 85*04 82         [24] 7819 	mov	dpl,_seg7_address
      002603 85*05 83         [24] 7820 	mov	dph,(_seg7_address + 1)
                                   7821 ;	ecen4330lab7.c:177: IOM = 1;
                                   7822 ;	assignBit
      002606 D2 B4            [12] 7823 	setb	_P3_4
                                   7824 ;	ecen4330lab7.c:178: *map_address = d;
      002608 74 A1            [12] 7825 	mov	a,#0xa1
      00260A F0               [24] 7826 	movx	@dptr,a
                                   7827 ;	ecen4330lab7.c:179: IOM = 0;
                                   7828 ;	assignBit
      00260B C2 B4            [12] 7829 	clr	_P3_4
                                   7830 ;	ecen4330lab7.c:2536: DUMP();
                                   7831 ;	ecen4330lab7.c:2537: break;
                                   7832 ;	ecen4330lab7.c:2538: case 'E':
      00260D 02r1ArB0         [24] 7833 	ljmp	_DUMP
      002610                       7834 00105$:
                                   7835 ;	ecen4330lab7.c:2539: iowrite8(seg7_address, 0x86);
      002610 85*04 82         [24] 7836 	mov	dpl,_seg7_address
      002613 85*05 83         [24] 7837 	mov	dph,(_seg7_address + 1)
                                   7838 ;	ecen4330lab7.c:177: IOM = 1;
                                   7839 ;	assignBit
      002616 D2 B4            [12] 7840 	setb	_P3_4
                                   7841 ;	ecen4330lab7.c:178: *map_address = d;
      002618 74 86            [12] 7842 	mov	a,#0x86
      00261A F0               [24] 7843 	movx	@dptr,a
                                   7844 ;	ecen4330lab7.c:179: IOM = 0;
                                   7845 ;	assignBit
      00261B C2 B4            [12] 7846 	clr	_P3_4
                                   7847 ;	ecen4330lab7.c:2540: EDIT();
                                   7848 ;	ecen4330lab7.c:2541: break;
                                   7849 ;	ecen4330lab7.c:2542: case 'F':
      00261D 02r1Cr1A         [24] 7850 	ljmp	_EDIT
      002620                       7851 00106$:
                                   7852 ;	ecen4330lab7.c:2543: iowrite8(seg7_address, 0x8E);
      002620 85*04 82         [24] 7853 	mov	dpl,_seg7_address
      002623 85*05 83         [24] 7854 	mov	dph,(_seg7_address + 1)
                                   7855 ;	ecen4330lab7.c:177: IOM = 1;
                                   7856 ;	assignBit
      002626 D2 B4            [12] 7857 	setb	_P3_4
                                   7858 ;	ecen4330lab7.c:178: *map_address = d;
      002628 74 8E            [12] 7859 	mov	a,#0x8e
      00262A F0               [24] 7860 	movx	@dptr,a
                                   7861 ;	ecen4330lab7.c:179: IOM = 0;
                                   7862 ;	assignBit
      00262B C2 B4            [12] 7863 	clr	_P3_4
                                   7864 ;	ecen4330lab7.c:2544: FIND();
                                   7865 ;	ecen4330lab7.c:2545: break;
                                   7866 ;	ecen4330lab7.c:2546: case '1':
      00262D 02r1FrC7         [24] 7867 	ljmp	_FIND
      002630                       7868 00107$:
                                   7869 ;	ecen4330lab7.c:2547: iowrite8(seg7_address, 0xF9);
      002630 85*04 82         [24] 7870 	mov	dpl,_seg7_address
      002633 85*05 83         [24] 7871 	mov	dph,(_seg7_address + 1)
                                   7872 ;	ecen4330lab7.c:177: IOM = 1;
                                   7873 ;	assignBit
      002636 D2 B4            [12] 7874 	setb	_P3_4
                                   7875 ;	ecen4330lab7.c:178: *map_address = d;
      002638 74 F9            [12] 7876 	mov	a,#0xf9
      00263A F0               [24] 7877 	movx	@dptr,a
                                   7878 ;	ecen4330lab7.c:179: IOM = 0;
                                   7879 ;	assignBit
      00263B C2 B4            [12] 7880 	clr	_P3_4
                                   7881 ;	ecen4330lab7.c:2548: UART();
                                   7882 ;	ecen4330lab7.c:2549: break;
                                   7883 ;	ecen4330lab7.c:2555: default:
      00263D 02r24r49         [24] 7884 	ljmp	_UART
      002640                       7885 00108$:
                                   7886 ;	ecen4330lab7.c:2556: iowrite8(seg7_address, 0xFF);
      002640 85*04 82         [24] 7887 	mov	dpl,_seg7_address
      002643 85*05 83         [24] 7888 	mov	dph,(_seg7_address + 1)
                                   7889 ;	ecen4330lab7.c:177: IOM = 1;
                                   7890 ;	assignBit
      002646 D2 B4            [12] 7891 	setb	_P3_4
                                   7892 ;	ecen4330lab7.c:178: *map_address = d;
      002648 74 FF            [12] 7893 	mov	a,#0xff
      00264A F0               [24] 7894 	movx	@dptr,a
                                   7895 ;	ecen4330lab7.c:179: IOM = 0;
                                   7896 ;	assignBit
      00264B C2 B4            [12] 7897 	clr	_P3_4
                                   7898 ;	ecen4330lab7.c:2557: invalidInput();
                                   7899 ;	ecen4330lab7.c:2559: }
                                   7900 ;	ecen4330lab7.c:2560: }
      00264D 02r0Dr81         [24] 7901 	ljmp	_invalidInput
                                   7902 ;------------------------------------------------------------
                                   7903 ;Allocation info for local variables in function 'main'
                                   7904 ;------------------------------------------------------------
                                   7905 ;__1310720070              Allocated to registers 
                                   7906 ;__1310720071              Allocated to registers 
                                   7907 ;map_address               Allocated to registers 
                                   7908 ;d                         Allocated to registers 
                                   7909 ;__1310720073              Allocated to registers 
                                   7910 ;__1310720074              Allocated to registers 
                                   7911 ;map_address               Allocated to registers 
                                   7912 ;d                         Allocated to registers 
                                   7913 ;__1310720076              Allocated to registers 
                                   7914 ;__1310720077              Allocated to registers 
                                   7915 ;map_address               Allocated to registers 
                                   7916 ;d                         Allocated to registers 
                                   7917 ;__1310720079              Allocated to registers 
                                   7918 ;__1310720080              Allocated to registers 
                                   7919 ;map_address               Allocated to registers 
                                   7920 ;d                         Allocated to registers 
                                   7921 ;__1310720082              Allocated to registers 
                                   7922 ;__1310720083              Allocated to registers 
                                   7923 ;map_address               Allocated to registers 
                                   7924 ;d                         Allocated to registers 
                                   7925 ;__1310720085              Allocated to registers 
                                   7926 ;__1310720086              Allocated to registers 
                                   7927 ;map_address               Allocated to registers 
                                   7928 ;d                         Allocated to registers 
                                   7929 ;__1310720088              Allocated to registers 
                                   7930 ;__1310720089              Allocated to registers 
                                   7931 ;map_address               Allocated to registers 
                                   7932 ;d                         Allocated to registers 
                                   7933 ;------------------------------------------------------------
                                   7934 ;	ecen4330lab7.c:2569: void main (void) {
                                   7935 ;	-----------------------------------------
                                   7936 ;	 function main
                                   7937 ;	-----------------------------------------
      002650                       7938 _main:
                                   7939 ;	ecen4330lab7.c:2570: CD = 0;
                                   7940 ;	assignBit
      002650 C2 B5            [12] 7941 	clr	_P3_5
                                   7942 ;	ecen4330lab7.c:2571: IOM = 0;
                                   7943 ;	assignBit
      002652 C2 B4            [12] 7944 	clr	_P3_4
                                   7945 ;	ecen4330lab7.c:2573: UART_Init();
      002654 12r00r0C         [24] 7946 	lcall	_UART_Init
                                   7947 ;	ecen4330lab7.c:2574: rtcInit();
      002657 12r00rB6         [24] 7948 	lcall	_rtcInit
                                   7949 ;	ecen4330lab7.c:2576: iowrite8(seg7_address, 0xFE);//a
      00265A 85*04 82         [24] 7950 	mov	dpl,_seg7_address
      00265D 85*05 83         [24] 7951 	mov	dph,(_seg7_address + 1)
                                   7952 ;	ecen4330lab7.c:177: IOM = 1;
                                   7953 ;	assignBit
      002660 D2 B4            [12] 7954 	setb	_P3_4
                                   7955 ;	ecen4330lab7.c:178: *map_address = d;
      002662 74 FE            [12] 7956 	mov	a,#0xfe
      002664 F0               [24] 7957 	movx	@dptr,a
                                   7958 ;	ecen4330lab7.c:179: IOM = 0;
                                   7959 ;	assignBit
      002665 C2 B4            [12] 7960 	clr	_P3_4
                                   7961 ;	ecen4330lab7.c:2577: delay(100);
      002667 90 00 64         [24] 7962 	mov	dptr,#0x0064
      00266A 12r00r25         [24] 7963 	lcall	_delay
                                   7964 ;	ecen4330lab7.c:2578: iowrite8(seg7_address, 0xFC);//a & b
      00266D 85*04 82         [24] 7965 	mov	dpl,_seg7_address
      002670 85*05 83         [24] 7966 	mov	dph,(_seg7_address + 1)
                                   7967 ;	ecen4330lab7.c:177: IOM = 1;
                                   7968 ;	assignBit
      002673 D2 B4            [12] 7969 	setb	_P3_4
                                   7970 ;	ecen4330lab7.c:178: *map_address = d;
      002675 74 FC            [12] 7971 	mov	a,#0xfc
      002677 F0               [24] 7972 	movx	@dptr,a
                                   7973 ;	ecen4330lab7.c:179: IOM = 0;
                                   7974 ;	assignBit
      002678 C2 B4            [12] 7975 	clr	_P3_4
                                   7976 ;	ecen4330lab7.c:2579: delay(100);
      00267A 90 00 64         [24] 7977 	mov	dptr,#0x0064
      00267D 12r00r25         [24] 7978 	lcall	_delay
                                   7979 ;	ecen4330lab7.c:2580: iowrite8(seg7_address, 0xF8);//a & b & c
      002680 85*04 82         [24] 7980 	mov	dpl,_seg7_address
      002683 85*05 83         [24] 7981 	mov	dph,(_seg7_address + 1)
                                   7982 ;	ecen4330lab7.c:177: IOM = 1;
                                   7983 ;	assignBit
      002686 D2 B4            [12] 7984 	setb	_P3_4
                                   7985 ;	ecen4330lab7.c:178: *map_address = d;
      002688 74 F8            [12] 7986 	mov	a,#0xf8
      00268A F0               [24] 7987 	movx	@dptr,a
                                   7988 ;	ecen4330lab7.c:179: IOM = 0;
                                   7989 ;	assignBit
      00268B C2 B4            [12] 7990 	clr	_P3_4
                                   7991 ;	ecen4330lab7.c:2581: delay(100);
      00268D 90 00 64         [24] 7992 	mov	dptr,#0x0064
      002690 12r00r25         [24] 7993 	lcall	_delay
                                   7994 ;	ecen4330lab7.c:2582: iowrite8(seg7_address, 0xF0);//a & b & c & d
      002693 85*04 82         [24] 7995 	mov	dpl,_seg7_address
      002696 85*05 83         [24] 7996 	mov	dph,(_seg7_address + 1)
                                   7997 ;	ecen4330lab7.c:177: IOM = 1;
                                   7998 ;	assignBit
      002699 D2 B4            [12] 7999 	setb	_P3_4
                                   8000 ;	ecen4330lab7.c:178: *map_address = d;
      00269B 74 F0            [12] 8001 	mov	a,#0xf0
      00269D F0               [24] 8002 	movx	@dptr,a
                                   8003 ;	ecen4330lab7.c:179: IOM = 0;
                                   8004 ;	assignBit
      00269E C2 B4            [12] 8005 	clr	_P3_4
                                   8006 ;	ecen4330lab7.c:2583: delay(100);
      0026A0 90 00 64         [24] 8007 	mov	dptr,#0x0064
      0026A3 12r00r25         [24] 8008 	lcall	_delay
                                   8009 ;	ecen4330lab7.c:2584: iowrite8(seg7_address, 0xE0);//a & b & c & d & e
      0026A6 85*04 82         [24] 8010 	mov	dpl,_seg7_address
      0026A9 85*05 83         [24] 8011 	mov	dph,(_seg7_address + 1)
                                   8012 ;	ecen4330lab7.c:177: IOM = 1;
                                   8013 ;	assignBit
      0026AC D2 B4            [12] 8014 	setb	_P3_4
                                   8015 ;	ecen4330lab7.c:178: *map_address = d;
      0026AE 74 E0            [12] 8016 	mov	a,#0xe0
      0026B0 F0               [24] 8017 	movx	@dptr,a
                                   8018 ;	ecen4330lab7.c:179: IOM = 0;
                                   8019 ;	assignBit
      0026B1 C2 B4            [12] 8020 	clr	_P3_4
                                   8021 ;	ecen4330lab7.c:2585: delay(100);
      0026B3 90 00 64         [24] 8022 	mov	dptr,#0x0064
      0026B6 12r00r25         [24] 8023 	lcall	_delay
                                   8024 ;	ecen4330lab7.c:2586: iowrite8(seg7_address, 0xC0);//a & b & c & d & e & f
      0026B9 85*04 82         [24] 8025 	mov	dpl,_seg7_address
      0026BC 85*05 83         [24] 8026 	mov	dph,(_seg7_address + 1)
                                   8027 ;	ecen4330lab7.c:177: IOM = 1;
                                   8028 ;	assignBit
      0026BF D2 B4            [12] 8029 	setb	_P3_4
                                   8030 ;	ecen4330lab7.c:178: *map_address = d;
      0026C1 74 C0            [12] 8031 	mov	a,#0xc0
      0026C3 F0               [24] 8032 	movx	@dptr,a
                                   8033 ;	ecen4330lab7.c:179: IOM = 0;
                                   8034 ;	assignBit
      0026C4 C2 B4            [12] 8035 	clr	_P3_4
                                   8036 ;	ecen4330lab7.c:2587: delay(100);
      0026C6 90 00 64         [24] 8037 	mov	dptr,#0x0064
      0026C9 12r00r25         [24] 8038 	lcall	_delay
                                   8039 ;	ecen4330lab7.c:2588: IOM = 0;
                                   8040 ;	assignBit
      0026CC C2 B4            [12] 8041 	clr	_P3_4
                                   8042 ;	ecen4330lab7.c:2589: CD = 1;
                                   8043 ;	assignBit
      0026CE D2 B5            [12] 8044 	setb	_P3_5
                                   8045 ;	ecen4330lab7.c:2591: TFT_LCD_INIT();
      0026D0 12r04r01         [24] 8046 	lcall	_TFT_LCD_INIT
                                   8047 ;	ecen4330lab7.c:2592: iowrite8(seg7_address, 0xF9);
      0026D3 85*04 82         [24] 8048 	mov	dpl,_seg7_address
      0026D6 85*05 83         [24] 8049 	mov	dph,(_seg7_address + 1)
                                   8050 ;	ecen4330lab7.c:177: IOM = 1;
                                   8051 ;	assignBit
      0026D9 D2 B4            [12] 8052 	setb	_P3_4
                                   8053 ;	ecen4330lab7.c:178: *map_address = d;
      0026DB 74 F9            [12] 8054 	mov	a,#0xf9
      0026DD F0               [24] 8055 	movx	@dptr,a
                                   8056 ;	ecen4330lab7.c:179: IOM = 0;
                                   8057 ;	assignBit
      0026DE C2 B4            [12] 8058 	clr	_P3_4
                                   8059 ;	ecen4330lab7.c:2593: resetLCD();
      0026E0 12r0Dr59         [24] 8060 	lcall	_resetLCD
                                   8061 ;	ecen4330lab7.c:2595: while(1) {
      0026E3                       8062 00102$:
                                   8063 ;	ecen4330lab7.c:2596: LCD_mainMenu();
      0026E3 12r24rF2         [24] 8064 	lcall	_LCD_mainMenu
                                   8065 ;	ecen4330lab7.c:2598: }
      0026E6 80 FB            [24] 8066 	sjmp	00102$
                                   8067 	.area CSEG    (CODE)
                                   8068 	.area CONST   (CODE)
      000000                       8069 _font:
      000000 00                    8070 	.db #0x00	; 0
      000001 00                    8071 	.db #0x00	; 0
      000002 00                    8072 	.db #0x00	; 0
      000003 00                    8073 	.db #0x00	; 0
      000004 00                    8074 	.db #0x00	; 0
      000005 3E                    8075 	.db #0x3e	; 62
      000006 5B                    8076 	.db #0x5b	; 91
      000007 4F                    8077 	.db #0x4f	; 79	'O'
      000008 5B                    8078 	.db #0x5b	; 91
      000009 3E                    8079 	.db #0x3e	; 62
      00000A 3E                    8080 	.db #0x3e	; 62
      00000B 6B                    8081 	.db #0x6b	; 107	'k'
      00000C 4F                    8082 	.db #0x4f	; 79	'O'
      00000D 6B                    8083 	.db #0x6b	; 107	'k'
      00000E 3E                    8084 	.db #0x3e	; 62
      00000F 1C                    8085 	.db #0x1c	; 28
      000010 3E                    8086 	.db #0x3e	; 62
      000011 7C                    8087 	.db #0x7c	; 124
      000012 3E                    8088 	.db #0x3e	; 62
      000013 1C                    8089 	.db #0x1c	; 28
      000014 18                    8090 	.db #0x18	; 24
      000015 3C                    8091 	.db #0x3c	; 60
      000016 7E                    8092 	.db #0x7e	; 126
      000017 3C                    8093 	.db #0x3c	; 60
      000018 18                    8094 	.db #0x18	; 24
      000019 1C                    8095 	.db #0x1c	; 28
      00001A 57                    8096 	.db #0x57	; 87	'W'
      00001B 7D                    8097 	.db #0x7d	; 125
      00001C 57                    8098 	.db #0x57	; 87	'W'
      00001D 1C                    8099 	.db #0x1c	; 28
      00001E 1C                    8100 	.db #0x1c	; 28
      00001F 5E                    8101 	.db #0x5e	; 94
      000020 7F                    8102 	.db #0x7f	; 127
      000021 5E                    8103 	.db #0x5e	; 94
      000022 1C                    8104 	.db #0x1c	; 28
      000023 00                    8105 	.db #0x00	; 0
      000024 18                    8106 	.db #0x18	; 24
      000025 3C                    8107 	.db #0x3c	; 60
      000026 18                    8108 	.db #0x18	; 24
      000027 00                    8109 	.db #0x00	; 0
      000028 FF                    8110 	.db #0xff	; 255
      000029 E7                    8111 	.db #0xe7	; 231
      00002A C3                    8112 	.db #0xc3	; 195
      00002B E7                    8113 	.db #0xe7	; 231
      00002C FF                    8114 	.db #0xff	; 255
      00002D 00                    8115 	.db #0x00	; 0
      00002E 18                    8116 	.db #0x18	; 24
      00002F 24                    8117 	.db #0x24	; 36
      000030 18                    8118 	.db #0x18	; 24
      000031 00                    8119 	.db #0x00	; 0
      000032 FF                    8120 	.db #0xff	; 255
      000033 E7                    8121 	.db #0xe7	; 231
      000034 DB                    8122 	.db #0xdb	; 219
      000035 E7                    8123 	.db #0xe7	; 231
      000036 FF                    8124 	.db #0xff	; 255
      000037 30                    8125 	.db #0x30	; 48	'0'
      000038 48                    8126 	.db #0x48	; 72	'H'
      000039 3A                    8127 	.db #0x3a	; 58
      00003A 06                    8128 	.db #0x06	; 6
      00003B 0E                    8129 	.db #0x0e	; 14
      00003C 26                    8130 	.db #0x26	; 38
      00003D 29                    8131 	.db #0x29	; 41
      00003E 79                    8132 	.db #0x79	; 121	'y'
      00003F 29                    8133 	.db #0x29	; 41
      000040 26                    8134 	.db #0x26	; 38
      000041 40                    8135 	.db #0x40	; 64
      000042 7F                    8136 	.db #0x7f	; 127
      000043 05                    8137 	.db #0x05	; 5
      000044 05                    8138 	.db #0x05	; 5
      000045 07                    8139 	.db #0x07	; 7
      000046 40                    8140 	.db #0x40	; 64
      000047 7F                    8141 	.db #0x7f	; 127
      000048 05                    8142 	.db #0x05	; 5
      000049 25                    8143 	.db #0x25	; 37
      00004A 3F                    8144 	.db #0x3f	; 63
      00004B 5A                    8145 	.db #0x5a	; 90	'Z'
      00004C 3C                    8146 	.db #0x3c	; 60
      00004D E7                    8147 	.db #0xe7	; 231
      00004E 3C                    8148 	.db #0x3c	; 60
      00004F 5A                    8149 	.db #0x5a	; 90	'Z'
      000050 7F                    8150 	.db #0x7f	; 127
      000051 3E                    8151 	.db #0x3e	; 62
      000052 1C                    8152 	.db #0x1c	; 28
      000053 1C                    8153 	.db #0x1c	; 28
      000054 08                    8154 	.db #0x08	; 8
      000055 08                    8155 	.db #0x08	; 8
      000056 1C                    8156 	.db #0x1c	; 28
      000057 1C                    8157 	.db #0x1c	; 28
      000058 3E                    8158 	.db #0x3e	; 62
      000059 7F                    8159 	.db #0x7f	; 127
      00005A 14                    8160 	.db #0x14	; 20
      00005B 22                    8161 	.db #0x22	; 34
      00005C 7F                    8162 	.db #0x7f	; 127
      00005D 22                    8163 	.db #0x22	; 34
      00005E 14                    8164 	.db #0x14	; 20
      00005F 5F                    8165 	.db #0x5f	; 95
      000060 5F                    8166 	.db #0x5f	; 95
      000061 00                    8167 	.db #0x00	; 0
      000062 5F                    8168 	.db #0x5f	; 95
      000063 5F                    8169 	.db #0x5f	; 95
      000064 06                    8170 	.db #0x06	; 6
      000065 09                    8171 	.db #0x09	; 9
      000066 7F                    8172 	.db #0x7f	; 127
      000067 01                    8173 	.db #0x01	; 1
      000068 7F                    8174 	.db #0x7f	; 127
      000069 00                    8175 	.db #0x00	; 0
      00006A 66                    8176 	.db #0x66	; 102	'f'
      00006B 89                    8177 	.db #0x89	; 137
      00006C 95                    8178 	.db #0x95	; 149
      00006D 6A                    8179 	.db #0x6a	; 106	'j'
      00006E 60                    8180 	.db #0x60	; 96
      00006F 60                    8181 	.db #0x60	; 96
      000070 60                    8182 	.db #0x60	; 96
      000071 60                    8183 	.db #0x60	; 96
      000072 60                    8184 	.db #0x60	; 96
      000073 94                    8185 	.db #0x94	; 148
      000074 A2                    8186 	.db #0xa2	; 162
      000075 FF                    8187 	.db #0xff	; 255
      000076 A2                    8188 	.db #0xa2	; 162
      000077 94                    8189 	.db #0x94	; 148
      000078 08                    8190 	.db #0x08	; 8
      000079 04                    8191 	.db #0x04	; 4
      00007A 7E                    8192 	.db #0x7e	; 126
      00007B 04                    8193 	.db #0x04	; 4
      00007C 08                    8194 	.db #0x08	; 8
      00007D 10                    8195 	.db #0x10	; 16
      00007E 20                    8196 	.db #0x20	; 32
      00007F 7E                    8197 	.db #0x7e	; 126
      000080 20                    8198 	.db #0x20	; 32
      000081 10                    8199 	.db #0x10	; 16
      000082 08                    8200 	.db #0x08	; 8
      000083 08                    8201 	.db #0x08	; 8
      000084 2A                    8202 	.db #0x2a	; 42
      000085 1C                    8203 	.db #0x1c	; 28
      000086 08                    8204 	.db #0x08	; 8
      000087 08                    8205 	.db #0x08	; 8
      000088 1C                    8206 	.db #0x1c	; 28
      000089 2A                    8207 	.db #0x2a	; 42
      00008A 08                    8208 	.db #0x08	; 8
      00008B 08                    8209 	.db #0x08	; 8
      00008C 1E                    8210 	.db #0x1e	; 30
      00008D 10                    8211 	.db #0x10	; 16
      00008E 10                    8212 	.db #0x10	; 16
      00008F 10                    8213 	.db #0x10	; 16
      000090 10                    8214 	.db #0x10	; 16
      000091 0C                    8215 	.db #0x0c	; 12
      000092 1E                    8216 	.db #0x1e	; 30
      000093 0C                    8217 	.db #0x0c	; 12
      000094 1E                    8218 	.db #0x1e	; 30
      000095 0C                    8219 	.db #0x0c	; 12
      000096 30                    8220 	.db #0x30	; 48	'0'
      000097 38                    8221 	.db #0x38	; 56	'8'
      000098 3E                    8222 	.db #0x3e	; 62
      000099 38                    8223 	.db #0x38	; 56	'8'
      00009A 30                    8224 	.db #0x30	; 48	'0'
      00009B 06                    8225 	.db #0x06	; 6
      00009C 0E                    8226 	.db #0x0e	; 14
      00009D 3E                    8227 	.db #0x3e	; 62
      00009E 0E                    8228 	.db #0x0e	; 14
      00009F 06                    8229 	.db #0x06	; 6
      0000A0 00                    8230 	.db #0x00	; 0
      0000A1 00                    8231 	.db #0x00	; 0
      0000A2 00                    8232 	.db #0x00	; 0
      0000A3 00                    8233 	.db #0x00	; 0
      0000A4 00                    8234 	.db #0x00	; 0
      0000A5 00                    8235 	.db #0x00	; 0
      0000A6 00                    8236 	.db #0x00	; 0
      0000A7 5F                    8237 	.db #0x5f	; 95
      0000A8 00                    8238 	.db #0x00	; 0
      0000A9 00                    8239 	.db #0x00	; 0
      0000AA 00                    8240 	.db #0x00	; 0
      0000AB 07                    8241 	.db #0x07	; 7
      0000AC 00                    8242 	.db #0x00	; 0
      0000AD 07                    8243 	.db #0x07	; 7
      0000AE 00                    8244 	.db #0x00	; 0
      0000AF 14                    8245 	.db #0x14	; 20
      0000B0 7F                    8246 	.db #0x7f	; 127
      0000B1 14                    8247 	.db #0x14	; 20
      0000B2 7F                    8248 	.db #0x7f	; 127
      0000B3 14                    8249 	.db #0x14	; 20
      0000B4 24                    8250 	.db #0x24	; 36
      0000B5 2A                    8251 	.db #0x2a	; 42
      0000B6 7F                    8252 	.db #0x7f	; 127
      0000B7 2A                    8253 	.db #0x2a	; 42
      0000B8 12                    8254 	.db #0x12	; 18
      0000B9 23                    8255 	.db #0x23	; 35
      0000BA 13                    8256 	.db #0x13	; 19
      0000BB 08                    8257 	.db #0x08	; 8
      0000BC 64                    8258 	.db #0x64	; 100	'd'
      0000BD 62                    8259 	.db #0x62	; 98	'b'
      0000BE 36                    8260 	.db #0x36	; 54	'6'
      0000BF 49                    8261 	.db #0x49	; 73	'I'
      0000C0 56                    8262 	.db #0x56	; 86	'V'
      0000C1 20                    8263 	.db #0x20	; 32
      0000C2 50                    8264 	.db #0x50	; 80	'P'
      0000C3 00                    8265 	.db #0x00	; 0
      0000C4 08                    8266 	.db #0x08	; 8
      0000C5 07                    8267 	.db #0x07	; 7
      0000C6 03                    8268 	.db #0x03	; 3
      0000C7 00                    8269 	.db #0x00	; 0
      0000C8 00                    8270 	.db #0x00	; 0
      0000C9 1C                    8271 	.db #0x1c	; 28
      0000CA 22                    8272 	.db #0x22	; 34
      0000CB 41                    8273 	.db #0x41	; 65	'A'
      0000CC 00                    8274 	.db #0x00	; 0
      0000CD 00                    8275 	.db #0x00	; 0
      0000CE 41                    8276 	.db #0x41	; 65	'A'
      0000CF 22                    8277 	.db #0x22	; 34
      0000D0 1C                    8278 	.db #0x1c	; 28
      0000D1 00                    8279 	.db #0x00	; 0
      0000D2 2A                    8280 	.db #0x2a	; 42
      0000D3 1C                    8281 	.db #0x1c	; 28
      0000D4 7F                    8282 	.db #0x7f	; 127
      0000D5 1C                    8283 	.db #0x1c	; 28
      0000D6 2A                    8284 	.db #0x2a	; 42
      0000D7 08                    8285 	.db #0x08	; 8
      0000D8 08                    8286 	.db #0x08	; 8
      0000D9 3E                    8287 	.db #0x3e	; 62
      0000DA 08                    8288 	.db #0x08	; 8
      0000DB 08                    8289 	.db #0x08	; 8
      0000DC 00                    8290 	.db #0x00	; 0
      0000DD 80                    8291 	.db #0x80	; 128
      0000DE 70                    8292 	.db #0x70	; 112	'p'
      0000DF 30                    8293 	.db #0x30	; 48	'0'
      0000E0 00                    8294 	.db #0x00	; 0
      0000E1 08                    8295 	.db #0x08	; 8
      0000E2 08                    8296 	.db #0x08	; 8
      0000E3 08                    8297 	.db #0x08	; 8
      0000E4 08                    8298 	.db #0x08	; 8
      0000E5 08                    8299 	.db #0x08	; 8
      0000E6 00                    8300 	.db #0x00	; 0
      0000E7 00                    8301 	.db #0x00	; 0
      0000E8 60                    8302 	.db #0x60	; 96
      0000E9 60                    8303 	.db #0x60	; 96
      0000EA 00                    8304 	.db #0x00	; 0
      0000EB 20                    8305 	.db #0x20	; 32
      0000EC 10                    8306 	.db #0x10	; 16
      0000ED 08                    8307 	.db #0x08	; 8
      0000EE 04                    8308 	.db #0x04	; 4
      0000EF 02                    8309 	.db #0x02	; 2
      0000F0 3E                    8310 	.db #0x3e	; 62
      0000F1 51                    8311 	.db #0x51	; 81	'Q'
      0000F2 49                    8312 	.db #0x49	; 73	'I'
      0000F3 45                    8313 	.db #0x45	; 69	'E'
      0000F4 3E                    8314 	.db #0x3e	; 62
      0000F5 00                    8315 	.db #0x00	; 0
      0000F6 42                    8316 	.db #0x42	; 66	'B'
      0000F7 7F                    8317 	.db #0x7f	; 127
      0000F8 40                    8318 	.db #0x40	; 64
      0000F9 00                    8319 	.db #0x00	; 0
      0000FA 72                    8320 	.db #0x72	; 114	'r'
      0000FB 49                    8321 	.db #0x49	; 73	'I'
      0000FC 49                    8322 	.db #0x49	; 73	'I'
      0000FD 49                    8323 	.db #0x49	; 73	'I'
      0000FE 46                    8324 	.db #0x46	; 70	'F'
      0000FF 21                    8325 	.db #0x21	; 33
      000100 41                    8326 	.db #0x41	; 65	'A'
      000101 49                    8327 	.db #0x49	; 73	'I'
      000102 4D                    8328 	.db #0x4d	; 77	'M'
      000103 33                    8329 	.db #0x33	; 51	'3'
      000104 18                    8330 	.db #0x18	; 24
      000105 14                    8331 	.db #0x14	; 20
      000106 12                    8332 	.db #0x12	; 18
      000107 7F                    8333 	.db #0x7f	; 127
      000108 10                    8334 	.db #0x10	; 16
      000109 27                    8335 	.db #0x27	; 39
      00010A 45                    8336 	.db #0x45	; 69	'E'
      00010B 45                    8337 	.db #0x45	; 69	'E'
      00010C 45                    8338 	.db #0x45	; 69	'E'
      00010D 39                    8339 	.db #0x39	; 57	'9'
      00010E 3C                    8340 	.db #0x3c	; 60
      00010F 4A                    8341 	.db #0x4a	; 74	'J'
      000110 49                    8342 	.db #0x49	; 73	'I'
      000111 49                    8343 	.db #0x49	; 73	'I'
      000112 31                    8344 	.db #0x31	; 49	'1'
      000113 41                    8345 	.db #0x41	; 65	'A'
      000114 21                    8346 	.db #0x21	; 33
      000115 11                    8347 	.db #0x11	; 17
      000116 09                    8348 	.db #0x09	; 9
      000117 07                    8349 	.db #0x07	; 7
      000118 36                    8350 	.db #0x36	; 54	'6'
      000119 49                    8351 	.db #0x49	; 73	'I'
      00011A 49                    8352 	.db #0x49	; 73	'I'
      00011B 49                    8353 	.db #0x49	; 73	'I'
      00011C 36                    8354 	.db #0x36	; 54	'6'
      00011D 46                    8355 	.db #0x46	; 70	'F'
      00011E 49                    8356 	.db #0x49	; 73	'I'
      00011F 49                    8357 	.db #0x49	; 73	'I'
      000120 29                    8358 	.db #0x29	; 41
      000121 1E                    8359 	.db #0x1e	; 30
      000122 00                    8360 	.db #0x00	; 0
      000123 00                    8361 	.db #0x00	; 0
      000124 14                    8362 	.db #0x14	; 20
      000125 00                    8363 	.db #0x00	; 0
      000126 00                    8364 	.db #0x00	; 0
      000127 00                    8365 	.db #0x00	; 0
      000128 40                    8366 	.db #0x40	; 64
      000129 34                    8367 	.db #0x34	; 52	'4'
      00012A 00                    8368 	.db #0x00	; 0
      00012B 00                    8369 	.db #0x00	; 0
      00012C 00                    8370 	.db #0x00	; 0
      00012D 08                    8371 	.db #0x08	; 8
      00012E 14                    8372 	.db #0x14	; 20
      00012F 22                    8373 	.db #0x22	; 34
      000130 41                    8374 	.db #0x41	; 65	'A'
      000131 14                    8375 	.db #0x14	; 20
      000132 14                    8376 	.db #0x14	; 20
      000133 14                    8377 	.db #0x14	; 20
      000134 14                    8378 	.db #0x14	; 20
      000135 14                    8379 	.db #0x14	; 20
      000136 00                    8380 	.db #0x00	; 0
      000137 41                    8381 	.db #0x41	; 65	'A'
      000138 22                    8382 	.db #0x22	; 34
      000139 14                    8383 	.db #0x14	; 20
      00013A 08                    8384 	.db #0x08	; 8
      00013B 02                    8385 	.db #0x02	; 2
      00013C 01                    8386 	.db #0x01	; 1
      00013D 59                    8387 	.db #0x59	; 89	'Y'
      00013E 09                    8388 	.db #0x09	; 9
      00013F 06                    8389 	.db #0x06	; 6
      000140 3E                    8390 	.db #0x3e	; 62
      000141 41                    8391 	.db #0x41	; 65	'A'
      000142 5D                    8392 	.db #0x5d	; 93
      000143 59                    8393 	.db #0x59	; 89	'Y'
      000144 4E                    8394 	.db #0x4e	; 78	'N'
      000145 7C                    8395 	.db #0x7c	; 124
      000146 12                    8396 	.db #0x12	; 18
      000147 11                    8397 	.db #0x11	; 17
      000148 12                    8398 	.db #0x12	; 18
      000149 7C                    8399 	.db #0x7c	; 124
      00014A 7F                    8400 	.db #0x7f	; 127
      00014B 49                    8401 	.db #0x49	; 73	'I'
      00014C 49                    8402 	.db #0x49	; 73	'I'
      00014D 49                    8403 	.db #0x49	; 73	'I'
      00014E 36                    8404 	.db #0x36	; 54	'6'
      00014F 3E                    8405 	.db #0x3e	; 62
      000150 41                    8406 	.db #0x41	; 65	'A'
      000151 41                    8407 	.db #0x41	; 65	'A'
      000152 41                    8408 	.db #0x41	; 65	'A'
      000153 22                    8409 	.db #0x22	; 34
      000154 7F                    8410 	.db #0x7f	; 127
      000155 41                    8411 	.db #0x41	; 65	'A'
      000156 41                    8412 	.db #0x41	; 65	'A'
      000157 41                    8413 	.db #0x41	; 65	'A'
      000158 3E                    8414 	.db #0x3e	; 62
      000159 7F                    8415 	.db #0x7f	; 127
      00015A 49                    8416 	.db #0x49	; 73	'I'
      00015B 49                    8417 	.db #0x49	; 73	'I'
      00015C 49                    8418 	.db #0x49	; 73	'I'
      00015D 41                    8419 	.db #0x41	; 65	'A'
      00015E 7F                    8420 	.db #0x7f	; 127
      00015F 09                    8421 	.db #0x09	; 9
      000160 09                    8422 	.db #0x09	; 9
      000161 09                    8423 	.db #0x09	; 9
      000162 01                    8424 	.db #0x01	; 1
      000163 3E                    8425 	.db #0x3e	; 62
      000164 41                    8426 	.db #0x41	; 65	'A'
      000165 41                    8427 	.db #0x41	; 65	'A'
      000166 51                    8428 	.db #0x51	; 81	'Q'
      000167 73                    8429 	.db #0x73	; 115	's'
      000168 7F                    8430 	.db #0x7f	; 127
      000169 08                    8431 	.db #0x08	; 8
      00016A 08                    8432 	.db #0x08	; 8
      00016B 08                    8433 	.db #0x08	; 8
      00016C 7F                    8434 	.db #0x7f	; 127
      00016D 00                    8435 	.db #0x00	; 0
      00016E 41                    8436 	.db #0x41	; 65	'A'
      00016F 7F                    8437 	.db #0x7f	; 127
      000170 41                    8438 	.db #0x41	; 65	'A'
      000171 00                    8439 	.db #0x00	; 0
      000172 20                    8440 	.db #0x20	; 32
      000173 40                    8441 	.db #0x40	; 64
      000174 41                    8442 	.db #0x41	; 65	'A'
      000175 3F                    8443 	.db #0x3f	; 63
      000176 01                    8444 	.db #0x01	; 1
      000177 7F                    8445 	.db #0x7f	; 127
      000178 08                    8446 	.db #0x08	; 8
      000179 14                    8447 	.db #0x14	; 20
      00017A 22                    8448 	.db #0x22	; 34
      00017B 41                    8449 	.db #0x41	; 65	'A'
      00017C 7F                    8450 	.db #0x7f	; 127
      00017D 40                    8451 	.db #0x40	; 64
      00017E 40                    8452 	.db #0x40	; 64
      00017F 40                    8453 	.db #0x40	; 64
      000180 40                    8454 	.db #0x40	; 64
      000181 7F                    8455 	.db #0x7f	; 127
      000182 02                    8456 	.db #0x02	; 2
      000183 1C                    8457 	.db #0x1c	; 28
      000184 02                    8458 	.db #0x02	; 2
      000185 7F                    8459 	.db #0x7f	; 127
      000186 7F                    8460 	.db #0x7f	; 127
      000187 04                    8461 	.db #0x04	; 4
      000188 08                    8462 	.db #0x08	; 8
      000189 10                    8463 	.db #0x10	; 16
      00018A 7F                    8464 	.db #0x7f	; 127
      00018B 3E                    8465 	.db #0x3e	; 62
      00018C 41                    8466 	.db #0x41	; 65	'A'
      00018D 41                    8467 	.db #0x41	; 65	'A'
      00018E 41                    8468 	.db #0x41	; 65	'A'
      00018F 3E                    8469 	.db #0x3e	; 62
      000190 7F                    8470 	.db #0x7f	; 127
      000191 09                    8471 	.db #0x09	; 9
      000192 09                    8472 	.db #0x09	; 9
      000193 09                    8473 	.db #0x09	; 9
      000194 06                    8474 	.db #0x06	; 6
      000195 3E                    8475 	.db #0x3e	; 62
      000196 41                    8476 	.db #0x41	; 65	'A'
      000197 51                    8477 	.db #0x51	; 81	'Q'
      000198 21                    8478 	.db #0x21	; 33
      000199 5E                    8479 	.db #0x5e	; 94
      00019A 7F                    8480 	.db #0x7f	; 127
      00019B 09                    8481 	.db #0x09	; 9
      00019C 19                    8482 	.db #0x19	; 25
      00019D 29                    8483 	.db #0x29	; 41
      00019E 46                    8484 	.db #0x46	; 70	'F'
      00019F 26                    8485 	.db #0x26	; 38
      0001A0 49                    8486 	.db #0x49	; 73	'I'
      0001A1 49                    8487 	.db #0x49	; 73	'I'
      0001A2 49                    8488 	.db #0x49	; 73	'I'
      0001A3 32                    8489 	.db #0x32	; 50	'2'
      0001A4 03                    8490 	.db #0x03	; 3
      0001A5 01                    8491 	.db #0x01	; 1
      0001A6 7F                    8492 	.db #0x7f	; 127
      0001A7 01                    8493 	.db #0x01	; 1
      0001A8 03                    8494 	.db #0x03	; 3
      0001A9 3F                    8495 	.db #0x3f	; 63
      0001AA 40                    8496 	.db #0x40	; 64
      0001AB 40                    8497 	.db #0x40	; 64
      0001AC 40                    8498 	.db #0x40	; 64
      0001AD 3F                    8499 	.db #0x3f	; 63
      0001AE 1F                    8500 	.db #0x1f	; 31
      0001AF 20                    8501 	.db #0x20	; 32
      0001B0 40                    8502 	.db #0x40	; 64
      0001B1 20                    8503 	.db #0x20	; 32
      0001B2 1F                    8504 	.db #0x1f	; 31
      0001B3 3F                    8505 	.db #0x3f	; 63
      0001B4 40                    8506 	.db #0x40	; 64
      0001B5 38                    8507 	.db #0x38	; 56	'8'
      0001B6 40                    8508 	.db #0x40	; 64
      0001B7 3F                    8509 	.db #0x3f	; 63
      0001B8 63                    8510 	.db #0x63	; 99	'c'
      0001B9 14                    8511 	.db #0x14	; 20
      0001BA 08                    8512 	.db #0x08	; 8
      0001BB 14                    8513 	.db #0x14	; 20
      0001BC 63                    8514 	.db #0x63	; 99	'c'
      0001BD 03                    8515 	.db #0x03	; 3
      0001BE 04                    8516 	.db #0x04	; 4
      0001BF 78                    8517 	.db #0x78	; 120	'x'
      0001C0 04                    8518 	.db #0x04	; 4
      0001C1 03                    8519 	.db #0x03	; 3
      0001C2 61                    8520 	.db #0x61	; 97	'a'
      0001C3 59                    8521 	.db #0x59	; 89	'Y'
      0001C4 49                    8522 	.db #0x49	; 73	'I'
      0001C5 4D                    8523 	.db #0x4d	; 77	'M'
      0001C6 43                    8524 	.db #0x43	; 67	'C'
      0001C7 00                    8525 	.db #0x00	; 0
      0001C8 7F                    8526 	.db #0x7f	; 127
      0001C9 41                    8527 	.db #0x41	; 65	'A'
      0001CA 41                    8528 	.db #0x41	; 65	'A'
      0001CB 41                    8529 	.db #0x41	; 65	'A'
      0001CC 02                    8530 	.db #0x02	; 2
      0001CD 04                    8531 	.db #0x04	; 4
      0001CE 08                    8532 	.db #0x08	; 8
      0001CF 10                    8533 	.db #0x10	; 16
      0001D0 20                    8534 	.db #0x20	; 32
      0001D1 00                    8535 	.db #0x00	; 0
      0001D2 41                    8536 	.db #0x41	; 65	'A'
      0001D3 41                    8537 	.db #0x41	; 65	'A'
      0001D4 41                    8538 	.db #0x41	; 65	'A'
      0001D5 7F                    8539 	.db #0x7f	; 127
      0001D6 04                    8540 	.db #0x04	; 4
      0001D7 02                    8541 	.db #0x02	; 2
      0001D8 01                    8542 	.db #0x01	; 1
      0001D9 02                    8543 	.db #0x02	; 2
      0001DA 04                    8544 	.db #0x04	; 4
      0001DB 40                    8545 	.db #0x40	; 64
      0001DC 40                    8546 	.db #0x40	; 64
      0001DD 40                    8547 	.db #0x40	; 64
      0001DE 40                    8548 	.db #0x40	; 64
      0001DF 40                    8549 	.db #0x40	; 64
      0001E0 00                    8550 	.db #0x00	; 0
      0001E1 03                    8551 	.db #0x03	; 3
      0001E2 07                    8552 	.db #0x07	; 7
      0001E3 08                    8553 	.db #0x08	; 8
      0001E4 00                    8554 	.db #0x00	; 0
      0001E5 20                    8555 	.db #0x20	; 32
      0001E6 54                    8556 	.db #0x54	; 84	'T'
      0001E7 54                    8557 	.db #0x54	; 84	'T'
      0001E8 78                    8558 	.db #0x78	; 120	'x'
      0001E9 40                    8559 	.db #0x40	; 64
      0001EA 7F                    8560 	.db #0x7f	; 127
      0001EB 28                    8561 	.db #0x28	; 40
      0001EC 44                    8562 	.db #0x44	; 68	'D'
      0001ED 44                    8563 	.db #0x44	; 68	'D'
      0001EE 38                    8564 	.db #0x38	; 56	'8'
      0001EF 38                    8565 	.db #0x38	; 56	'8'
      0001F0 44                    8566 	.db #0x44	; 68	'D'
      0001F1 44                    8567 	.db #0x44	; 68	'D'
      0001F2 44                    8568 	.db #0x44	; 68	'D'
      0001F3 28                    8569 	.db #0x28	; 40
      0001F4 38                    8570 	.db #0x38	; 56	'8'
      0001F5 44                    8571 	.db #0x44	; 68	'D'
      0001F6 44                    8572 	.db #0x44	; 68	'D'
      0001F7 28                    8573 	.db #0x28	; 40
      0001F8 7F                    8574 	.db #0x7f	; 127
      0001F9 38                    8575 	.db #0x38	; 56	'8'
      0001FA 54                    8576 	.db #0x54	; 84	'T'
      0001FB 54                    8577 	.db #0x54	; 84	'T'
      0001FC 54                    8578 	.db #0x54	; 84	'T'
      0001FD 18                    8579 	.db #0x18	; 24
      0001FE 00                    8580 	.db #0x00	; 0
      0001FF 08                    8581 	.db #0x08	; 8
      000200 7E                    8582 	.db #0x7e	; 126
      000201 09                    8583 	.db #0x09	; 9
      000202 02                    8584 	.db #0x02	; 2
      000203 18                    8585 	.db #0x18	; 24
      000204 A4                    8586 	.db #0xa4	; 164
      000205 A4                    8587 	.db #0xa4	; 164
      000206 9C                    8588 	.db #0x9c	; 156
      000207 78                    8589 	.db #0x78	; 120	'x'
      000208 7F                    8590 	.db #0x7f	; 127
      000209 08                    8591 	.db #0x08	; 8
      00020A 04                    8592 	.db #0x04	; 4
      00020B 04                    8593 	.db #0x04	; 4
      00020C 78                    8594 	.db #0x78	; 120	'x'
      00020D 00                    8595 	.db #0x00	; 0
      00020E 44                    8596 	.db #0x44	; 68	'D'
      00020F 7D                    8597 	.db #0x7d	; 125
      000210 40                    8598 	.db #0x40	; 64
      000211 00                    8599 	.db #0x00	; 0
      000212 20                    8600 	.db #0x20	; 32
      000213 40                    8601 	.db #0x40	; 64
      000214 40                    8602 	.db #0x40	; 64
      000215 3D                    8603 	.db #0x3d	; 61
      000216 00                    8604 	.db #0x00	; 0
      000217 7F                    8605 	.db #0x7f	; 127
      000218 10                    8606 	.db #0x10	; 16
      000219 28                    8607 	.db #0x28	; 40
      00021A 44                    8608 	.db #0x44	; 68	'D'
      00021B 00                    8609 	.db #0x00	; 0
      00021C 00                    8610 	.db #0x00	; 0
      00021D 41                    8611 	.db #0x41	; 65	'A'
      00021E 7F                    8612 	.db #0x7f	; 127
      00021F 40                    8613 	.db #0x40	; 64
      000220 00                    8614 	.db #0x00	; 0
      000221 7C                    8615 	.db #0x7c	; 124
      000222 04                    8616 	.db #0x04	; 4
      000223 78                    8617 	.db #0x78	; 120	'x'
      000224 04                    8618 	.db #0x04	; 4
      000225 78                    8619 	.db #0x78	; 120	'x'
      000226 7C                    8620 	.db #0x7c	; 124
      000227 08                    8621 	.db #0x08	; 8
      000228 04                    8622 	.db #0x04	; 4
      000229 04                    8623 	.db #0x04	; 4
      00022A 78                    8624 	.db #0x78	; 120	'x'
      00022B 38                    8625 	.db #0x38	; 56	'8'
      00022C 44                    8626 	.db #0x44	; 68	'D'
      00022D 44                    8627 	.db #0x44	; 68	'D'
      00022E 44                    8628 	.db #0x44	; 68	'D'
      00022F 38                    8629 	.db #0x38	; 56	'8'
      000230 FC                    8630 	.db #0xfc	; 252
      000231 18                    8631 	.db #0x18	; 24
      000232 24                    8632 	.db #0x24	; 36
      000233 24                    8633 	.db #0x24	; 36
      000234 18                    8634 	.db #0x18	; 24
      000235 18                    8635 	.db #0x18	; 24
      000236 24                    8636 	.db #0x24	; 36
      000237 24                    8637 	.db #0x24	; 36
      000238 18                    8638 	.db #0x18	; 24
      000239 FC                    8639 	.db #0xfc	; 252
      00023A 7C                    8640 	.db #0x7c	; 124
      00023B 08                    8641 	.db #0x08	; 8
      00023C 04                    8642 	.db #0x04	; 4
      00023D 04                    8643 	.db #0x04	; 4
      00023E 08                    8644 	.db #0x08	; 8
      00023F 48                    8645 	.db #0x48	; 72	'H'
      000240 54                    8646 	.db #0x54	; 84	'T'
      000241 54                    8647 	.db #0x54	; 84	'T'
      000242 54                    8648 	.db #0x54	; 84	'T'
      000243 24                    8649 	.db #0x24	; 36
      000244 04                    8650 	.db #0x04	; 4
      000245 04                    8651 	.db #0x04	; 4
      000246 3F                    8652 	.db #0x3f	; 63
      000247 44                    8653 	.db #0x44	; 68	'D'
      000248 24                    8654 	.db #0x24	; 36
      000249 3C                    8655 	.db #0x3c	; 60
      00024A 40                    8656 	.db #0x40	; 64
      00024B 40                    8657 	.db #0x40	; 64
      00024C 20                    8658 	.db #0x20	; 32
      00024D 7C                    8659 	.db #0x7c	; 124
      00024E 1C                    8660 	.db #0x1c	; 28
      00024F 20                    8661 	.db #0x20	; 32
      000250 40                    8662 	.db #0x40	; 64
      000251 20                    8663 	.db #0x20	; 32
      000252 1C                    8664 	.db #0x1c	; 28
      000253 3C                    8665 	.db #0x3c	; 60
      000254 40                    8666 	.db #0x40	; 64
      000255 30                    8667 	.db #0x30	; 48	'0'
      000256 40                    8668 	.db #0x40	; 64
      000257 3C                    8669 	.db #0x3c	; 60
      000258 44                    8670 	.db #0x44	; 68	'D'
      000259 28                    8671 	.db #0x28	; 40
      00025A 10                    8672 	.db #0x10	; 16
      00025B 28                    8673 	.db #0x28	; 40
      00025C 44                    8674 	.db #0x44	; 68	'D'
      00025D 4C                    8675 	.db #0x4c	; 76	'L'
      00025E 90                    8676 	.db #0x90	; 144
      00025F 90                    8677 	.db #0x90	; 144
      000260 90                    8678 	.db #0x90	; 144
      000261 7C                    8679 	.db #0x7c	; 124
      000262 44                    8680 	.db #0x44	; 68	'D'
      000263 64                    8681 	.db #0x64	; 100	'd'
      000264 54                    8682 	.db #0x54	; 84	'T'
      000265 4C                    8683 	.db #0x4c	; 76	'L'
      000266 44                    8684 	.db #0x44	; 68	'D'
      000267 00                    8685 	.db #0x00	; 0
      000268 08                    8686 	.db #0x08	; 8
      000269 36                    8687 	.db #0x36	; 54	'6'
      00026A 41                    8688 	.db #0x41	; 65	'A'
      00026B 00                    8689 	.db #0x00	; 0
      00026C 00                    8690 	.db #0x00	; 0
      00026D 00                    8691 	.db #0x00	; 0
      00026E 77                    8692 	.db #0x77	; 119	'w'
      00026F 00                    8693 	.db #0x00	; 0
      000270 00                    8694 	.db #0x00	; 0
      000271 00                    8695 	.db #0x00	; 0
      000272 41                    8696 	.db #0x41	; 65	'A'
      000273 36                    8697 	.db #0x36	; 54	'6'
      000274 08                    8698 	.db #0x08	; 8
      000275 00                    8699 	.db #0x00	; 0
      000276 02                    8700 	.db #0x02	; 2
      000277 01                    8701 	.db #0x01	; 1
      000278 02                    8702 	.db #0x02	; 2
      000279 04                    8703 	.db #0x04	; 4
      00027A 02                    8704 	.db #0x02	; 2
      00027B 3C                    8705 	.db #0x3c	; 60
      00027C 26                    8706 	.db #0x26	; 38
      00027D 23                    8707 	.db #0x23	; 35
      00027E 26                    8708 	.db #0x26	; 38
      00027F 3C                    8709 	.db #0x3c	; 60
      000280 1E                    8710 	.db #0x1e	; 30
      000281 A1                    8711 	.db #0xa1	; 161
      000282 A1                    8712 	.db #0xa1	; 161
      000283 61                    8713 	.db #0x61	; 97	'a'
      000284 12                    8714 	.db #0x12	; 18
      000285 3A                    8715 	.db #0x3a	; 58
      000286 40                    8716 	.db #0x40	; 64
      000287 40                    8717 	.db #0x40	; 64
      000288 20                    8718 	.db #0x20	; 32
      000289 7A                    8719 	.db #0x7a	; 122	'z'
      00028A 38                    8720 	.db #0x38	; 56	'8'
      00028B 54                    8721 	.db #0x54	; 84	'T'
      00028C 54                    8722 	.db #0x54	; 84	'T'
      00028D 55                    8723 	.db #0x55	; 85	'U'
      00028E 59                    8724 	.db #0x59	; 89	'Y'
      00028F 21                    8725 	.db #0x21	; 33
      000290 55                    8726 	.db #0x55	; 85	'U'
      000291 55                    8727 	.db #0x55	; 85	'U'
      000292 79                    8728 	.db #0x79	; 121	'y'
      000293 41                    8729 	.db #0x41	; 65	'A'
      000294 22                    8730 	.db #0x22	; 34
      000295 54                    8731 	.db #0x54	; 84	'T'
      000296 54                    8732 	.db #0x54	; 84	'T'
      000297 78                    8733 	.db #0x78	; 120	'x'
      000298 42                    8734 	.db #0x42	; 66	'B'
      000299 21                    8735 	.db #0x21	; 33
      00029A 55                    8736 	.db #0x55	; 85	'U'
      00029B 54                    8737 	.db #0x54	; 84	'T'
      00029C 78                    8738 	.db #0x78	; 120	'x'
      00029D 40                    8739 	.db #0x40	; 64
      00029E 20                    8740 	.db #0x20	; 32
      00029F 54                    8741 	.db #0x54	; 84	'T'
      0002A0 55                    8742 	.db #0x55	; 85	'U'
      0002A1 79                    8743 	.db #0x79	; 121	'y'
      0002A2 40                    8744 	.db #0x40	; 64
      0002A3 0C                    8745 	.db #0x0c	; 12
      0002A4 1E                    8746 	.db #0x1e	; 30
      0002A5 52                    8747 	.db #0x52	; 82	'R'
      0002A6 72                    8748 	.db #0x72	; 114	'r'
      0002A7 12                    8749 	.db #0x12	; 18
      0002A8 39                    8750 	.db #0x39	; 57	'9'
      0002A9 55                    8751 	.db #0x55	; 85	'U'
      0002AA 55                    8752 	.db #0x55	; 85	'U'
      0002AB 55                    8753 	.db #0x55	; 85	'U'
      0002AC 59                    8754 	.db #0x59	; 89	'Y'
      0002AD 39                    8755 	.db #0x39	; 57	'9'
      0002AE 54                    8756 	.db #0x54	; 84	'T'
      0002AF 54                    8757 	.db #0x54	; 84	'T'
      0002B0 54                    8758 	.db #0x54	; 84	'T'
      0002B1 59                    8759 	.db #0x59	; 89	'Y'
      0002B2 39                    8760 	.db #0x39	; 57	'9'
      0002B3 55                    8761 	.db #0x55	; 85	'U'
      0002B4 54                    8762 	.db #0x54	; 84	'T'
      0002B5 54                    8763 	.db #0x54	; 84	'T'
      0002B6 58                    8764 	.db #0x58	; 88	'X'
      0002B7 00                    8765 	.db #0x00	; 0
      0002B8 00                    8766 	.db #0x00	; 0
      0002B9 45                    8767 	.db #0x45	; 69	'E'
      0002BA 7C                    8768 	.db #0x7c	; 124
      0002BB 41                    8769 	.db #0x41	; 65	'A'
      0002BC 00                    8770 	.db #0x00	; 0
      0002BD 02                    8771 	.db #0x02	; 2
      0002BE 45                    8772 	.db #0x45	; 69	'E'
      0002BF 7D                    8773 	.db #0x7d	; 125
      0002C0 42                    8774 	.db #0x42	; 66	'B'
      0002C1 00                    8775 	.db #0x00	; 0
      0002C2 01                    8776 	.db #0x01	; 1
      0002C3 45                    8777 	.db #0x45	; 69	'E'
      0002C4 7C                    8778 	.db #0x7c	; 124
      0002C5 40                    8779 	.db #0x40	; 64
      0002C6 7D                    8780 	.db #0x7d	; 125
      0002C7 12                    8781 	.db #0x12	; 18
      0002C8 11                    8782 	.db #0x11	; 17
      0002C9 12                    8783 	.db #0x12	; 18
      0002CA 7D                    8784 	.db #0x7d	; 125
      0002CB F0                    8785 	.db #0xf0	; 240
      0002CC 28                    8786 	.db #0x28	; 40
      0002CD 25                    8787 	.db #0x25	; 37
      0002CE 28                    8788 	.db #0x28	; 40
      0002CF F0                    8789 	.db #0xf0	; 240
      0002D0 7C                    8790 	.db #0x7c	; 124
      0002D1 54                    8791 	.db #0x54	; 84	'T'
      0002D2 55                    8792 	.db #0x55	; 85	'U'
      0002D3 45                    8793 	.db #0x45	; 69	'E'
      0002D4 00                    8794 	.db #0x00	; 0
      0002D5 20                    8795 	.db #0x20	; 32
      0002D6 54                    8796 	.db #0x54	; 84	'T'
      0002D7 54                    8797 	.db #0x54	; 84	'T'
      0002D8 7C                    8798 	.db #0x7c	; 124
      0002D9 54                    8799 	.db #0x54	; 84	'T'
      0002DA 7C                    8800 	.db #0x7c	; 124
      0002DB 0A                    8801 	.db #0x0a	; 10
      0002DC 09                    8802 	.db #0x09	; 9
      0002DD 7F                    8803 	.db #0x7f	; 127
      0002DE 49                    8804 	.db #0x49	; 73	'I'
      0002DF 32                    8805 	.db #0x32	; 50	'2'
      0002E0 49                    8806 	.db #0x49	; 73	'I'
      0002E1 49                    8807 	.db #0x49	; 73	'I'
      0002E2 49                    8808 	.db #0x49	; 73	'I'
      0002E3 32                    8809 	.db #0x32	; 50	'2'
      0002E4 3A                    8810 	.db #0x3a	; 58
      0002E5 44                    8811 	.db #0x44	; 68	'D'
      0002E6 44                    8812 	.db #0x44	; 68	'D'
      0002E7 44                    8813 	.db #0x44	; 68	'D'
      0002E8 3A                    8814 	.db #0x3a	; 58
      0002E9 32                    8815 	.db #0x32	; 50	'2'
      0002EA 4A                    8816 	.db #0x4a	; 74	'J'
      0002EB 48                    8817 	.db #0x48	; 72	'H'
      0002EC 48                    8818 	.db #0x48	; 72	'H'
      0002ED 30                    8819 	.db #0x30	; 48	'0'
      0002EE 3A                    8820 	.db #0x3a	; 58
      0002EF 41                    8821 	.db #0x41	; 65	'A'
      0002F0 41                    8822 	.db #0x41	; 65	'A'
      0002F1 21                    8823 	.db #0x21	; 33
      0002F2 7A                    8824 	.db #0x7a	; 122	'z'
      0002F3 3A                    8825 	.db #0x3a	; 58
      0002F4 42                    8826 	.db #0x42	; 66	'B'
      0002F5 40                    8827 	.db #0x40	; 64
      0002F6 20                    8828 	.db #0x20	; 32
      0002F7 78                    8829 	.db #0x78	; 120	'x'
      0002F8 00                    8830 	.db #0x00	; 0
      0002F9 9D                    8831 	.db #0x9d	; 157
      0002FA A0                    8832 	.db #0xa0	; 160
      0002FB A0                    8833 	.db #0xa0	; 160
      0002FC 7D                    8834 	.db #0x7d	; 125
      0002FD 3D                    8835 	.db #0x3d	; 61
      0002FE 42                    8836 	.db #0x42	; 66	'B'
      0002FF 42                    8837 	.db #0x42	; 66	'B'
      000300 42                    8838 	.db #0x42	; 66	'B'
      000301 3D                    8839 	.db #0x3d	; 61
      000302 3D                    8840 	.db #0x3d	; 61
      000303 40                    8841 	.db #0x40	; 64
      000304 40                    8842 	.db #0x40	; 64
      000305 40                    8843 	.db #0x40	; 64
      000306 3D                    8844 	.db #0x3d	; 61
      000307 3C                    8845 	.db #0x3c	; 60
      000308 24                    8846 	.db #0x24	; 36
      000309 FF                    8847 	.db #0xff	; 255
      00030A 24                    8848 	.db #0x24	; 36
      00030B 24                    8849 	.db #0x24	; 36
      00030C 48                    8850 	.db #0x48	; 72	'H'
      00030D 7E                    8851 	.db #0x7e	; 126
      00030E 49                    8852 	.db #0x49	; 73	'I'
      00030F 43                    8853 	.db #0x43	; 67	'C'
      000310 66                    8854 	.db #0x66	; 102	'f'
      000311 2B                    8855 	.db #0x2b	; 43
      000312 2F                    8856 	.db #0x2f	; 47
      000313 FC                    8857 	.db #0xfc	; 252
      000314 2F                    8858 	.db #0x2f	; 47
      000315 2B                    8859 	.db #0x2b	; 43
      000316 FF                    8860 	.db #0xff	; 255
      000317 09                    8861 	.db #0x09	; 9
      000318 29                    8862 	.db #0x29	; 41
      000319 F6                    8863 	.db #0xf6	; 246
      00031A 20                    8864 	.db #0x20	; 32
      00031B C0                    8865 	.db #0xc0	; 192
      00031C 88                    8866 	.db #0x88	; 136
      00031D 7E                    8867 	.db #0x7e	; 126
      00031E 09                    8868 	.db #0x09	; 9
      00031F 03                    8869 	.db #0x03	; 3
      000320 20                    8870 	.db #0x20	; 32
      000321 54                    8871 	.db #0x54	; 84	'T'
      000322 54                    8872 	.db #0x54	; 84	'T'
      000323 79                    8873 	.db #0x79	; 121	'y'
      000324 41                    8874 	.db #0x41	; 65	'A'
      000325 00                    8875 	.db #0x00	; 0
      000326 00                    8876 	.db #0x00	; 0
      000327 44                    8877 	.db #0x44	; 68	'D'
      000328 7D                    8878 	.db #0x7d	; 125
      000329 41                    8879 	.db #0x41	; 65	'A'
      00032A 30                    8880 	.db #0x30	; 48	'0'
      00032B 48                    8881 	.db #0x48	; 72	'H'
      00032C 48                    8882 	.db #0x48	; 72	'H'
      00032D 4A                    8883 	.db #0x4a	; 74	'J'
      00032E 32                    8884 	.db #0x32	; 50	'2'
      00032F 38                    8885 	.db #0x38	; 56	'8'
      000330 40                    8886 	.db #0x40	; 64
      000331 40                    8887 	.db #0x40	; 64
      000332 22                    8888 	.db #0x22	; 34
      000333 7A                    8889 	.db #0x7a	; 122	'z'
      000334 00                    8890 	.db #0x00	; 0
      000335 7A                    8891 	.db #0x7a	; 122	'z'
      000336 0A                    8892 	.db #0x0a	; 10
      000337 0A                    8893 	.db #0x0a	; 10
      000338 72                    8894 	.db #0x72	; 114	'r'
      000339 7D                    8895 	.db #0x7d	; 125
      00033A 0D                    8896 	.db #0x0d	; 13
      00033B 19                    8897 	.db #0x19	; 25
      00033C 31                    8898 	.db #0x31	; 49	'1'
      00033D 7D                    8899 	.db #0x7d	; 125
      00033E 26                    8900 	.db #0x26	; 38
      00033F 29                    8901 	.db #0x29	; 41
      000340 29                    8902 	.db #0x29	; 41
      000341 2F                    8903 	.db #0x2f	; 47
      000342 28                    8904 	.db #0x28	; 40
      000343 26                    8905 	.db #0x26	; 38
      000344 29                    8906 	.db #0x29	; 41
      000345 29                    8907 	.db #0x29	; 41
      000346 29                    8908 	.db #0x29	; 41
      000347 26                    8909 	.db #0x26	; 38
      000348 30                    8910 	.db #0x30	; 48	'0'
      000349 48                    8911 	.db #0x48	; 72	'H'
      00034A 4D                    8912 	.db #0x4d	; 77	'M'
      00034B 40                    8913 	.db #0x40	; 64
      00034C 20                    8914 	.db #0x20	; 32
      00034D 38                    8915 	.db #0x38	; 56	'8'
      00034E 08                    8916 	.db #0x08	; 8
      00034F 08                    8917 	.db #0x08	; 8
      000350 08                    8918 	.db #0x08	; 8
      000351 08                    8919 	.db #0x08	; 8
      000352 08                    8920 	.db #0x08	; 8
      000353 08                    8921 	.db #0x08	; 8
      000354 08                    8922 	.db #0x08	; 8
      000355 08                    8923 	.db #0x08	; 8
      000356 38                    8924 	.db #0x38	; 56	'8'
      000357 2F                    8925 	.db #0x2f	; 47
      000358 10                    8926 	.db #0x10	; 16
      000359 C8                    8927 	.db #0xc8	; 200
      00035A AC                    8928 	.db #0xac	; 172
      00035B BA                    8929 	.db #0xba	; 186
      00035C 2F                    8930 	.db #0x2f	; 47
      00035D 10                    8931 	.db #0x10	; 16
      00035E 28                    8932 	.db #0x28	; 40
      00035F 34                    8933 	.db #0x34	; 52	'4'
      000360 FA                    8934 	.db #0xfa	; 250
      000361 00                    8935 	.db #0x00	; 0
      000362 00                    8936 	.db #0x00	; 0
      000363 7B                    8937 	.db #0x7b	; 123
      000364 00                    8938 	.db #0x00	; 0
      000365 00                    8939 	.db #0x00	; 0
      000366 08                    8940 	.db #0x08	; 8
      000367 14                    8941 	.db #0x14	; 20
      000368 2A                    8942 	.db #0x2a	; 42
      000369 14                    8943 	.db #0x14	; 20
      00036A 22                    8944 	.db #0x22	; 34
      00036B 22                    8945 	.db #0x22	; 34
      00036C 14                    8946 	.db #0x14	; 20
      00036D 2A                    8947 	.db #0x2a	; 42
      00036E 14                    8948 	.db #0x14	; 20
      00036F 08                    8949 	.db #0x08	; 8
      000370 AA                    8950 	.db #0xaa	; 170
      000371 00                    8951 	.db #0x00	; 0
      000372 55                    8952 	.db #0x55	; 85	'U'
      000373 00                    8953 	.db #0x00	; 0
      000374 AA                    8954 	.db #0xaa	; 170
      000375 AA                    8955 	.db #0xaa	; 170
      000376 55                    8956 	.db #0x55	; 85	'U'
      000377 AA                    8957 	.db #0xaa	; 170
      000378 55                    8958 	.db #0x55	; 85	'U'
      000379 AA                    8959 	.db #0xaa	; 170
      00037A 00                    8960 	.db #0x00	; 0
      00037B 00                    8961 	.db #0x00	; 0
      00037C 00                    8962 	.db #0x00	; 0
      00037D FF                    8963 	.db #0xff	; 255
      00037E 00                    8964 	.db #0x00	; 0
      00037F 10                    8965 	.db #0x10	; 16
      000380 10                    8966 	.db #0x10	; 16
      000381 10                    8967 	.db #0x10	; 16
      000382 FF                    8968 	.db #0xff	; 255
      000383 00                    8969 	.db #0x00	; 0
      000384 14                    8970 	.db #0x14	; 20
      000385 14                    8971 	.db #0x14	; 20
      000386 14                    8972 	.db #0x14	; 20
      000387 FF                    8973 	.db #0xff	; 255
      000388 00                    8974 	.db #0x00	; 0
      000389 10                    8975 	.db #0x10	; 16
      00038A 10                    8976 	.db #0x10	; 16
      00038B FF                    8977 	.db #0xff	; 255
      00038C 00                    8978 	.db #0x00	; 0
      00038D FF                    8979 	.db #0xff	; 255
      00038E 10                    8980 	.db #0x10	; 16
      00038F 10                    8981 	.db #0x10	; 16
      000390 F0                    8982 	.db #0xf0	; 240
      000391 10                    8983 	.db #0x10	; 16
      000392 F0                    8984 	.db #0xf0	; 240
      000393 14                    8985 	.db #0x14	; 20
      000394 14                    8986 	.db #0x14	; 20
      000395 14                    8987 	.db #0x14	; 20
      000396 FC                    8988 	.db #0xfc	; 252
      000397 00                    8989 	.db #0x00	; 0
      000398 14                    8990 	.db #0x14	; 20
      000399 14                    8991 	.db #0x14	; 20
      00039A F7                    8992 	.db #0xf7	; 247
      00039B 00                    8993 	.db #0x00	; 0
      00039C FF                    8994 	.db #0xff	; 255
      00039D 00                    8995 	.db #0x00	; 0
      00039E 00                    8996 	.db #0x00	; 0
      00039F FF                    8997 	.db #0xff	; 255
      0003A0 00                    8998 	.db #0x00	; 0
      0003A1 FF                    8999 	.db #0xff	; 255
      0003A2 14                    9000 	.db #0x14	; 20
      0003A3 14                    9001 	.db #0x14	; 20
      0003A4 F4                    9002 	.db #0xf4	; 244
      0003A5 04                    9003 	.db #0x04	; 4
      0003A6 FC                    9004 	.db #0xfc	; 252
      0003A7 14                    9005 	.db #0x14	; 20
      0003A8 14                    9006 	.db #0x14	; 20
      0003A9 17                    9007 	.db #0x17	; 23
      0003AA 10                    9008 	.db #0x10	; 16
      0003AB 1F                    9009 	.db #0x1f	; 31
      0003AC 10                    9010 	.db #0x10	; 16
      0003AD 10                    9011 	.db #0x10	; 16
      0003AE 1F                    9012 	.db #0x1f	; 31
      0003AF 10                    9013 	.db #0x10	; 16
      0003B0 1F                    9014 	.db #0x1f	; 31
      0003B1 14                    9015 	.db #0x14	; 20
      0003B2 14                    9016 	.db #0x14	; 20
      0003B3 14                    9017 	.db #0x14	; 20
      0003B4 1F                    9018 	.db #0x1f	; 31
      0003B5 00                    9019 	.db #0x00	; 0
      0003B6 10                    9020 	.db #0x10	; 16
      0003B7 10                    9021 	.db #0x10	; 16
      0003B8 10                    9022 	.db #0x10	; 16
      0003B9 F0                    9023 	.db #0xf0	; 240
      0003BA 00                    9024 	.db #0x00	; 0
      0003BB 00                    9025 	.db #0x00	; 0
      0003BC 00                    9026 	.db #0x00	; 0
      0003BD 00                    9027 	.db #0x00	; 0
      0003BE 1F                    9028 	.db #0x1f	; 31
      0003BF 10                    9029 	.db #0x10	; 16
      0003C0 10                    9030 	.db #0x10	; 16
      0003C1 10                    9031 	.db #0x10	; 16
      0003C2 10                    9032 	.db #0x10	; 16
      0003C3 1F                    9033 	.db #0x1f	; 31
      0003C4 10                    9034 	.db #0x10	; 16
      0003C5 10                    9035 	.db #0x10	; 16
      0003C6 10                    9036 	.db #0x10	; 16
      0003C7 10                    9037 	.db #0x10	; 16
      0003C8 F0                    9038 	.db #0xf0	; 240
      0003C9 10                    9039 	.db #0x10	; 16
      0003CA 00                    9040 	.db #0x00	; 0
      0003CB 00                    9041 	.db #0x00	; 0
      0003CC 00                    9042 	.db #0x00	; 0
      0003CD FF                    9043 	.db #0xff	; 255
      0003CE 10                    9044 	.db #0x10	; 16
      0003CF 10                    9045 	.db #0x10	; 16
      0003D0 10                    9046 	.db #0x10	; 16
      0003D1 10                    9047 	.db #0x10	; 16
      0003D2 10                    9048 	.db #0x10	; 16
      0003D3 10                    9049 	.db #0x10	; 16
      0003D4 10                    9050 	.db #0x10	; 16
      0003D5 10                    9051 	.db #0x10	; 16
      0003D6 10                    9052 	.db #0x10	; 16
      0003D7 FF                    9053 	.db #0xff	; 255
      0003D8 10                    9054 	.db #0x10	; 16
      0003D9 00                    9055 	.db #0x00	; 0
      0003DA 00                    9056 	.db #0x00	; 0
      0003DB 00                    9057 	.db #0x00	; 0
      0003DC FF                    9058 	.db #0xff	; 255
      0003DD 14                    9059 	.db #0x14	; 20
      0003DE 00                    9060 	.db #0x00	; 0
      0003DF 00                    9061 	.db #0x00	; 0
      0003E0 FF                    9062 	.db #0xff	; 255
      0003E1 00                    9063 	.db #0x00	; 0
      0003E2 FF                    9064 	.db #0xff	; 255
      0003E3 00                    9065 	.db #0x00	; 0
      0003E4 00                    9066 	.db #0x00	; 0
      0003E5 1F                    9067 	.db #0x1f	; 31
      0003E6 10                    9068 	.db #0x10	; 16
      0003E7 17                    9069 	.db #0x17	; 23
      0003E8 00                    9070 	.db #0x00	; 0
      0003E9 00                    9071 	.db #0x00	; 0
      0003EA FC                    9072 	.db #0xfc	; 252
      0003EB 04                    9073 	.db #0x04	; 4
      0003EC F4                    9074 	.db #0xf4	; 244
      0003ED 14                    9075 	.db #0x14	; 20
      0003EE 14                    9076 	.db #0x14	; 20
      0003EF 17                    9077 	.db #0x17	; 23
      0003F0 10                    9078 	.db #0x10	; 16
      0003F1 17                    9079 	.db #0x17	; 23
      0003F2 14                    9080 	.db #0x14	; 20
      0003F3 14                    9081 	.db #0x14	; 20
      0003F4 F4                    9082 	.db #0xf4	; 244
      0003F5 04                    9083 	.db #0x04	; 4
      0003F6 F4                    9084 	.db #0xf4	; 244
      0003F7 00                    9085 	.db #0x00	; 0
      0003F8 00                    9086 	.db #0x00	; 0
      0003F9 FF                    9087 	.db #0xff	; 255
      0003FA 00                    9088 	.db #0x00	; 0
      0003FB F7                    9089 	.db #0xf7	; 247
      0003FC 14                    9090 	.db #0x14	; 20
      0003FD 14                    9091 	.db #0x14	; 20
      0003FE 14                    9092 	.db #0x14	; 20
      0003FF 14                    9093 	.db #0x14	; 20
      000400 14                    9094 	.db #0x14	; 20
      000401 14                    9095 	.db #0x14	; 20
      000402 14                    9096 	.db #0x14	; 20
      000403 F7                    9097 	.db #0xf7	; 247
      000404 00                    9098 	.db #0x00	; 0
      000405 F7                    9099 	.db #0xf7	; 247
      000406 14                    9100 	.db #0x14	; 20
      000407 14                    9101 	.db #0x14	; 20
      000408 14                    9102 	.db #0x14	; 20
      000409 17                    9103 	.db #0x17	; 23
      00040A 14                    9104 	.db #0x14	; 20
      00040B 10                    9105 	.db #0x10	; 16
      00040C 10                    9106 	.db #0x10	; 16
      00040D 1F                    9107 	.db #0x1f	; 31
      00040E 10                    9108 	.db #0x10	; 16
      00040F 1F                    9109 	.db #0x1f	; 31
      000410 14                    9110 	.db #0x14	; 20
      000411 14                    9111 	.db #0x14	; 20
      000412 14                    9112 	.db #0x14	; 20
      000413 F4                    9113 	.db #0xf4	; 244
      000414 14                    9114 	.db #0x14	; 20
      000415 10                    9115 	.db #0x10	; 16
      000416 10                    9116 	.db #0x10	; 16
      000417 F0                    9117 	.db #0xf0	; 240
      000418 10                    9118 	.db #0x10	; 16
      000419 F0                    9119 	.db #0xf0	; 240
      00041A 00                    9120 	.db #0x00	; 0
      00041B 00                    9121 	.db #0x00	; 0
      00041C 1F                    9122 	.db #0x1f	; 31
      00041D 10                    9123 	.db #0x10	; 16
      00041E 1F                    9124 	.db #0x1f	; 31
      00041F 00                    9125 	.db #0x00	; 0
      000420 00                    9126 	.db #0x00	; 0
      000421 00                    9127 	.db #0x00	; 0
      000422 1F                    9128 	.db #0x1f	; 31
      000423 14                    9129 	.db #0x14	; 20
      000424 00                    9130 	.db #0x00	; 0
      000425 00                    9131 	.db #0x00	; 0
      000426 00                    9132 	.db #0x00	; 0
      000427 FC                    9133 	.db #0xfc	; 252
      000428 14                    9134 	.db #0x14	; 20
      000429 00                    9135 	.db #0x00	; 0
      00042A 00                    9136 	.db #0x00	; 0
      00042B F0                    9137 	.db #0xf0	; 240
      00042C 10                    9138 	.db #0x10	; 16
      00042D F0                    9139 	.db #0xf0	; 240
      00042E 10                    9140 	.db #0x10	; 16
      00042F 10                    9141 	.db #0x10	; 16
      000430 FF                    9142 	.db #0xff	; 255
      000431 10                    9143 	.db #0x10	; 16
      000432 FF                    9144 	.db #0xff	; 255
      000433 14                    9145 	.db #0x14	; 20
      000434 14                    9146 	.db #0x14	; 20
      000435 14                    9147 	.db #0x14	; 20
      000436 FF                    9148 	.db #0xff	; 255
      000437 14                    9149 	.db #0x14	; 20
      000438 10                    9150 	.db #0x10	; 16
      000439 10                    9151 	.db #0x10	; 16
      00043A 10                    9152 	.db #0x10	; 16
      00043B 1F                    9153 	.db #0x1f	; 31
      00043C 00                    9154 	.db #0x00	; 0
      00043D 00                    9155 	.db #0x00	; 0
      00043E 00                    9156 	.db #0x00	; 0
      00043F 00                    9157 	.db #0x00	; 0
      000440 F0                    9158 	.db #0xf0	; 240
      000441 10                    9159 	.db #0x10	; 16
      000442 FF                    9160 	.db #0xff	; 255
      000443 FF                    9161 	.db #0xff	; 255
      000444 FF                    9162 	.db #0xff	; 255
      000445 FF                    9163 	.db #0xff	; 255
      000446 FF                    9164 	.db #0xff	; 255
      000447 F0                    9165 	.db #0xf0	; 240
      000448 F0                    9166 	.db #0xf0	; 240
      000449 F0                    9167 	.db #0xf0	; 240
      00044A F0                    9168 	.db #0xf0	; 240
      00044B F0                    9169 	.db #0xf0	; 240
      00044C FF                    9170 	.db #0xff	; 255
      00044D FF                    9171 	.db #0xff	; 255
      00044E FF                    9172 	.db #0xff	; 255
      00044F 00                    9173 	.db #0x00	; 0
      000450 00                    9174 	.db #0x00	; 0
      000451 00                    9175 	.db #0x00	; 0
      000452 00                    9176 	.db #0x00	; 0
      000453 00                    9177 	.db #0x00	; 0
      000454 FF                    9178 	.db #0xff	; 255
      000455 FF                    9179 	.db #0xff	; 255
      000456 0F                    9180 	.db #0x0f	; 15
      000457 0F                    9181 	.db #0x0f	; 15
      000458 0F                    9182 	.db #0x0f	; 15
      000459 0F                    9183 	.db #0x0f	; 15
      00045A 0F                    9184 	.db #0x0f	; 15
      00045B 38                    9185 	.db #0x38	; 56	'8'
      00045C 44                    9186 	.db #0x44	; 68	'D'
      00045D 44                    9187 	.db #0x44	; 68	'D'
      00045E 38                    9188 	.db #0x38	; 56	'8'
      00045F 44                    9189 	.db #0x44	; 68	'D'
      000460 FC                    9190 	.db #0xfc	; 252
      000461 4A                    9191 	.db #0x4a	; 74	'J'
      000462 4A                    9192 	.db #0x4a	; 74	'J'
      000463 4A                    9193 	.db #0x4a	; 74	'J'
      000464 34                    9194 	.db #0x34	; 52	'4'
      000465 7E                    9195 	.db #0x7e	; 126
      000466 02                    9196 	.db #0x02	; 2
      000467 02                    9197 	.db #0x02	; 2
      000468 06                    9198 	.db #0x06	; 6
      000469 06                    9199 	.db #0x06	; 6
      00046A 02                    9200 	.db #0x02	; 2
      00046B 7E                    9201 	.db #0x7e	; 126
      00046C 02                    9202 	.db #0x02	; 2
      00046D 7E                    9203 	.db #0x7e	; 126
      00046E 02                    9204 	.db #0x02	; 2
      00046F 63                    9205 	.db #0x63	; 99	'c'
      000470 55                    9206 	.db #0x55	; 85	'U'
      000471 49                    9207 	.db #0x49	; 73	'I'
      000472 41                    9208 	.db #0x41	; 65	'A'
      000473 63                    9209 	.db #0x63	; 99	'c'
      000474 38                    9210 	.db #0x38	; 56	'8'
      000475 44                    9211 	.db #0x44	; 68	'D'
      000476 44                    9212 	.db #0x44	; 68	'D'
      000477 3C                    9213 	.db #0x3c	; 60
      000478 04                    9214 	.db #0x04	; 4
      000479 40                    9215 	.db #0x40	; 64
      00047A 7E                    9216 	.db #0x7e	; 126
      00047B 20                    9217 	.db #0x20	; 32
      00047C 1E                    9218 	.db #0x1e	; 30
      00047D 20                    9219 	.db #0x20	; 32
      00047E 06                    9220 	.db #0x06	; 6
      00047F 02                    9221 	.db #0x02	; 2
      000480 7E                    9222 	.db #0x7e	; 126
      000481 02                    9223 	.db #0x02	; 2
      000482 02                    9224 	.db #0x02	; 2
      000483 99                    9225 	.db #0x99	; 153
      000484 A5                    9226 	.db #0xa5	; 165
      000485 E7                    9227 	.db #0xe7	; 231
      000486 A5                    9228 	.db #0xa5	; 165
      000487 99                    9229 	.db #0x99	; 153
      000488 1C                    9230 	.db #0x1c	; 28
      000489 2A                    9231 	.db #0x2a	; 42
      00048A 49                    9232 	.db #0x49	; 73	'I'
      00048B 2A                    9233 	.db #0x2a	; 42
      00048C 1C                    9234 	.db #0x1c	; 28
      00048D 4C                    9235 	.db #0x4c	; 76	'L'
      00048E 72                    9236 	.db #0x72	; 114	'r'
      00048F 01                    9237 	.db #0x01	; 1
      000490 72                    9238 	.db #0x72	; 114	'r'
      000491 4C                    9239 	.db #0x4c	; 76	'L'
      000492 30                    9240 	.db #0x30	; 48	'0'
      000493 4A                    9241 	.db #0x4a	; 74	'J'
      000494 4D                    9242 	.db #0x4d	; 77	'M'
      000495 4D                    9243 	.db #0x4d	; 77	'M'
      000496 30                    9244 	.db #0x30	; 48	'0'
      000497 30                    9245 	.db #0x30	; 48	'0'
      000498 48                    9246 	.db #0x48	; 72	'H'
      000499 78                    9247 	.db #0x78	; 120	'x'
      00049A 48                    9248 	.db #0x48	; 72	'H'
      00049B 30                    9249 	.db #0x30	; 48	'0'
      00049C BC                    9250 	.db #0xbc	; 188
      00049D 62                    9251 	.db #0x62	; 98	'b'
      00049E 5A                    9252 	.db #0x5a	; 90	'Z'
      00049F 46                    9253 	.db #0x46	; 70	'F'
      0004A0 3D                    9254 	.db #0x3d	; 61
      0004A1 3E                    9255 	.db #0x3e	; 62
      0004A2 49                    9256 	.db #0x49	; 73	'I'
      0004A3 49                    9257 	.db #0x49	; 73	'I'
      0004A4 49                    9258 	.db #0x49	; 73	'I'
      0004A5 00                    9259 	.db #0x00	; 0
      0004A6 7E                    9260 	.db #0x7e	; 126
      0004A7 01                    9261 	.db #0x01	; 1
      0004A8 01                    9262 	.db #0x01	; 1
      0004A9 01                    9263 	.db #0x01	; 1
      0004AA 7E                    9264 	.db #0x7e	; 126
      0004AB 2A                    9265 	.db #0x2a	; 42
      0004AC 2A                    9266 	.db #0x2a	; 42
      0004AD 2A                    9267 	.db #0x2a	; 42
      0004AE 2A                    9268 	.db #0x2a	; 42
      0004AF 2A                    9269 	.db #0x2a	; 42
      0004B0 44                    9270 	.db #0x44	; 68	'D'
      0004B1 44                    9271 	.db #0x44	; 68	'D'
      0004B2 5F                    9272 	.db #0x5f	; 95
      0004B3 44                    9273 	.db #0x44	; 68	'D'
      0004B4 44                    9274 	.db #0x44	; 68	'D'
      0004B5 40                    9275 	.db #0x40	; 64
      0004B6 51                    9276 	.db #0x51	; 81	'Q'
      0004B7 4A                    9277 	.db #0x4a	; 74	'J'
      0004B8 44                    9278 	.db #0x44	; 68	'D'
      0004B9 40                    9279 	.db #0x40	; 64
      0004BA 40                    9280 	.db #0x40	; 64
      0004BB 44                    9281 	.db #0x44	; 68	'D'
      0004BC 4A                    9282 	.db #0x4a	; 74	'J'
      0004BD 51                    9283 	.db #0x51	; 81	'Q'
      0004BE 40                    9284 	.db #0x40	; 64
      0004BF 00                    9285 	.db #0x00	; 0
      0004C0 00                    9286 	.db #0x00	; 0
      0004C1 FF                    9287 	.db #0xff	; 255
      0004C2 01                    9288 	.db #0x01	; 1
      0004C3 03                    9289 	.db #0x03	; 3
      0004C4 E0                    9290 	.db #0xe0	; 224
      0004C5 80                    9291 	.db #0x80	; 128
      0004C6 FF                    9292 	.db #0xff	; 255
      0004C7 00                    9293 	.db #0x00	; 0
      0004C8 00                    9294 	.db #0x00	; 0
      0004C9 08                    9295 	.db #0x08	; 8
      0004CA 08                    9296 	.db #0x08	; 8
      0004CB 6B                    9297 	.db #0x6b	; 107	'k'
      0004CC 6B                    9298 	.db #0x6b	; 107	'k'
      0004CD 08                    9299 	.db #0x08	; 8
      0004CE 36                    9300 	.db #0x36	; 54	'6'
      0004CF 12                    9301 	.db #0x12	; 18
      0004D0 36                    9302 	.db #0x36	; 54	'6'
      0004D1 24                    9303 	.db #0x24	; 36
      0004D2 36                    9304 	.db #0x36	; 54	'6'
      0004D3 06                    9305 	.db #0x06	; 6
      0004D4 0F                    9306 	.db #0x0f	; 15
      0004D5 09                    9307 	.db #0x09	; 9
      0004D6 0F                    9308 	.db #0x0f	; 15
      0004D7 06                    9309 	.db #0x06	; 6
      0004D8 00                    9310 	.db #0x00	; 0
      0004D9 00                    9311 	.db #0x00	; 0
      0004DA 18                    9312 	.db #0x18	; 24
      0004DB 18                    9313 	.db #0x18	; 24
      0004DC 00                    9314 	.db #0x00	; 0
      0004DD 00                    9315 	.db #0x00	; 0
      0004DE 00                    9316 	.db #0x00	; 0
      0004DF 10                    9317 	.db #0x10	; 16
      0004E0 10                    9318 	.db #0x10	; 16
      0004E1 00                    9319 	.db #0x00	; 0
      0004E2 30                    9320 	.db #0x30	; 48	'0'
      0004E3 40                    9321 	.db #0x40	; 64
      0004E4 FF                    9322 	.db #0xff	; 255
      0004E5 01                    9323 	.db #0x01	; 1
      0004E6 01                    9324 	.db #0x01	; 1
      0004E7 00                    9325 	.db #0x00	; 0
      0004E8 1F                    9326 	.db #0x1f	; 31
      0004E9 01                    9327 	.db #0x01	; 1
      0004EA 01                    9328 	.db #0x01	; 1
      0004EB 1E                    9329 	.db #0x1e	; 30
      0004EC 00                    9330 	.db #0x00	; 0
      0004ED 19                    9331 	.db #0x19	; 25
      0004EE 1D                    9332 	.db #0x1d	; 29
      0004EF 17                    9333 	.db #0x17	; 23
      0004F0 12                    9334 	.db #0x12	; 18
      0004F1 00                    9335 	.db #0x00	; 0
      0004F2 3C                    9336 	.db #0x3c	; 60
      0004F3 3C                    9337 	.db #0x3c	; 60
      0004F4 3C                    9338 	.db #0x3c	; 60
      0004F5 3C                    9339 	.db #0x3c	; 60
      0004F6 00                    9340 	.db #0x00	; 0
      0004F7 00                    9341 	.db #0x00	; 0
      0004F8 00                    9342 	.db #0x00	; 0
      0004F9 00                    9343 	.db #0x00	; 0
      0004FA 00                    9344 	.db #0x00	; 0
      0004FB                       9345 _keypad:
      0004FB 31                    9346 	.db #0x31	; 49	'1'
      0004FC 34                    9347 	.db #0x34	; 52	'4'
      0004FD 37                    9348 	.db #0x37	; 55	'7'
      0004FE 45                    9349 	.db #0x45	; 69	'E'
      0004FF 32                    9350 	.db #0x32	; 50	'2'
      000500 35                    9351 	.db #0x35	; 53	'5'
      000501 38                    9352 	.db #0x38	; 56	'8'
      000502 30                    9353 	.db #0x30	; 48	'0'
      000503 33                    9354 	.db #0x33	; 51	'3'
      000504 36                    9355 	.db #0x36	; 54	'6'
      000505 39                    9356 	.db #0x39	; 57	'9'
      000506 46                    9357 	.db #0x46	; 70	'F'
      000507 41                    9358 	.db #0x41	; 65	'A'
      000508 42                    9359 	.db #0x42	; 66	'B'
      000509 43                    9360 	.db #0x43	; 67	'C'
      00050A 44                    9361 	.db #0x44	; 68	'D'
                                   9362 	.area CONST   (CODE)
      00050B                       9363 ___str_0:
      00050B 3A                    9364 	.ascii ":"
      00050C 00                    9365 	.db 0x00
                                   9366 	.area CSEG    (CODE)
                                   9367 	.area CONST   (CODE)
      00050D                       9368 ___str_1:
      00050D 30 78                 9369 	.ascii "0x"
      00050F 00                    9370 	.db 0x00
                                   9371 	.area CSEG    (CODE)
                                   9372 	.area CONST   (CODE)
      000510                       9373 ___str_2:
      000510 0A                    9374 	.db 0x0a
      000511 20 20 20 49 6E 76 61  9375 	.ascii "   Invalid"
             6C 69 64
      00051B 0A                    9376 	.db 0x0a
      00051C 0A                    9377 	.db 0x0a
      00051D 00                    9378 	.db 0x00
                                   9379 	.area CSEG    (CODE)
                                   9380 	.area CONST   (CODE)
      00051E                       9381 ___str_3:
      00051E 20 20 20 20 49 6E 70  9382 	.ascii "    Input"
             75 74
      000527 00                    9383 	.db 0x00
                                   9384 	.area CSEG    (CODE)
                                   9385 	.area CONST   (CODE)
      000528                       9386 ___str_4:
      000528 0A                    9387 	.db 0x0a
      000529 53 65 6C 65 63 74 20  9388 	.ascii "Select Data"
             44 61 74 61
      000534 0A                    9389 	.db 0x0a
      000535 54 79 70 65 3A        9390 	.ascii "Type:"
      00053A 0A                    9391 	.db 0x0a
      00053B 0A                    9392 	.db 0x0a
      00053C 00                    9393 	.db 0x00
                                   9394 	.area CSEG    (CODE)
                                   9395 	.area CONST   (CODE)
      00053D                       9396 ___str_5:
      00053D 28 31 29 20 42 79 74  9397 	.ascii "(1) Byte"
             65
      000545 0A                    9398 	.db 0x0a
      000546 00                    9399 	.db 0x00
                                   9400 	.area CSEG    (CODE)
                                   9401 	.area CONST   (CODE)
      000547                       9402 ___str_6:
      000547 28 32 29 20 57 6F 72  9403 	.ascii "(2) Word"
             64
      00054F 0A                    9404 	.db 0x0a
      000550 00                    9405 	.db 0x00
                                   9406 	.area CSEG    (CODE)
                                   9407 	.area CONST   (CODE)
      000551                       9408 ___str_7:
      000551 28 33 29 20 44 6F 75  9409 	.ascii "(3) Double"
             62 6C 65
      00055B 0A                    9410 	.db 0x0a
      00055C 20 20 20 20 57 6F 72  9411 	.ascii "    Word"
             64
      000564 0A                    9412 	.db 0x0a
      000565 0A                    9413 	.db 0x0a
      000566 20 20 5F              9414 	.ascii "  _"
      000569 00                    9415 	.db 0x00
                                   9416 	.area CSEG    (CODE)
                                   9417 	.area CONST   (CODE)
      00056A                       9418 ___str_8:
      00056A 0A                    9419 	.db 0x0a
      00056B 45 6E 74 65 72 20 44  9420 	.ascii "Enter Data"
             61 74 61
      000575 0A                    9421 	.db 0x0a
      000576 53 69 7A 65 3A        9422 	.ascii "Size:"
      00057B 0A                    9423 	.db 0x0a
      00057C 0A                    9424 	.db 0x0a
      00057D 20 20 30 78 5F 5F 5F  9425 	.ascii "  0x____"
             5F
      000585 00                    9426 	.db 0x00
                                   9427 	.area CSEG    (CODE)
                                   9428 	.area CONST   (CODE)
      000586                       9429 ___str_9:
      000586 0A                    9430 	.db 0x0a
      000587 57 72 69 74 69 6E 67  9431 	.ascii "Writing 0x55"
             20 30 78 35 35
      000593 0A                    9432 	.db 0x0a
      000594 74 6F 20 61 6C 6C     9433 	.ascii "to all"
      00059A 0A                    9434 	.db 0x0a
      00059B 65 78 74 65 72 6E 61  9435 	.ascii "external RAM"
             6C 20 52 41 4D
      0005A7 0A                    9436 	.db 0x0a
      0005A8 6C 6F 63 61 74 69 6F  9437 	.ascii "locations."
             6E 73 2E
      0005B2 0A                    9438 	.db 0x0a
      0005B3 0A                    9439 	.db 0x0a
      0005B4 00                    9440 	.db 0x00
                                   9441 	.area CSEG    (CODE)
                                   9442 	.area CONST   (CODE)
      0005B5                       9443 ___str_10:
      0005B5 57 72 69 74 65        9444 	.ascii "Write"
      0005BA 0A                    9445 	.db 0x0a
      0005BB 63 6F 6D 70 6C 65 74  9446 	.ascii "complete."
             65 2E
      0005C4 0A                    9447 	.db 0x0a
      0005C5 00                    9448 	.db 0x00
                                   9449 	.area CSEG    (CODE)
                                   9450 	.area CONST   (CODE)
      0005C6                       9451 ___str_11:
      0005C6 0A                    9452 	.db 0x0a
      0005C7 56 65 72 69 66 79 69  9453 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0005D4 0A                    9454 	.db 0x0a
      0005D5 52 41 4D 20 6C 6F 63  9455 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0005E2 0A                    9456 	.db 0x0a
      0005E3 65 71 75 61 6C 20 30  9457 	.ascii "equal 0x55."
             78 35 35 2E
      0005EE 0A                    9458 	.db 0x0a
      0005EF 0A                    9459 	.db 0x0a
      0005F0 00                    9460 	.db 0x00
                                   9461 	.area CSEG    (CODE)
                                   9462 	.area CONST   (CODE)
      0005F1                       9463 ___str_12:
      0005F1 31 73 74 20 52 41 4D  9464 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      0005FE 0A                    9465 	.db 0x0a
      0005FF 75 6E 73 75 63 63 65  9466 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      00060C 0A                    9467 	.db 0x0a
      00060D 0A                    9468 	.db 0x0a
      00060E 00                    9469 	.db 0x00
                                   9470 	.area CSEG    (CODE)
                                   9471 	.area CONST   (CODE)
      00060F                       9472 ___str_13:
      00060F 45 72 72 6F 72 20 61  9473 	.ascii "Error at:"
             74 3A
      000618 0A                    9474 	.db 0x0a
      000619 00                    9475 	.db 0x00
                                   9476 	.area CSEG    (CODE)
                                   9477 	.area CONST   (CODE)
      00061A                       9478 ___str_14:
      00061A 3A 20 30 78           9479 	.ascii ": 0x"
      00061E 00                    9480 	.db 0x00
                                   9481 	.area CSEG    (CODE)
                                   9482 	.area CONST   (CODE)
      00061F                       9483 ___str_15:
      00061F 52 65 74 75 72 6E 69  9484 	.ascii "Returning to"
             6E 67 20 74 6F
      00062B 0A                    9485 	.db 0x0a
      00062C 6D 61 69 6E 20 6D 65  9486 	.ascii "main menu."
             6E 75 2E
      000636 00                    9487 	.db 0x00
                                   9488 	.area CSEG    (CODE)
                                   9489 	.area CONST   (CODE)
      000637                       9490 ___str_16:
      000637 31 73 74 20 52 41 4D  9491 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      000644 0A                    9492 	.db 0x0a
      000645 73 75 63 63 65 73 73  9493 	.ascii "successful."
             66 75 6C 2E
      000650 0A                    9494 	.db 0x0a
      000651 0A                    9495 	.db 0x0a
      000652 00                    9496 	.db 0x00
                                   9497 	.area CSEG    (CODE)
                                   9498 	.area CONST   (CODE)
      000653                       9499 ___str_17:
      000653 0A                    9500 	.db 0x0a
      000654 57 72 69 74 69 6E 67  9501 	.ascii "Writing 0xAA"
             20 30 78 41 41
      000660 0A                    9502 	.db 0x0a
      000661 74 6F 20 61 6C 6C     9503 	.ascii "to all"
      000667 0A                    9504 	.db 0x0a
      000668 65 78 74 65 72 6E 61  9505 	.ascii "external RAM"
             6C 20 52 41 4D
      000674 0A                    9506 	.db 0x0a
      000675 6C 6F 63 61 74 69 6F  9507 	.ascii "locations."
             6E 73 2E
      00067F 0A                    9508 	.db 0x0a
      000680 0A                    9509 	.db 0x0a
      000681 00                    9510 	.db 0x00
                                   9511 	.area CSEG    (CODE)
                                   9512 	.area CONST   (CODE)
      000682                       9513 ___str_18:
      000682 0A                    9514 	.db 0x0a
      000683 56 65 72 69 66 79 69  9515 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      000690 0A                    9516 	.db 0x0a
      000691 52 41 4D 20 6C 6F 63  9517 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      00069E 0A                    9518 	.db 0x0a
      00069F 65 71 75 61 6C 20 30  9519 	.ascii "equal 0xAA."
             78 41 41 2E
      0006AA 0A                    9520 	.db 0x0a
      0006AB 0A                    9521 	.db 0x0a
      0006AC 00                    9522 	.db 0x00
                                   9523 	.area CSEG    (CODE)
                                   9524 	.area CONST   (CODE)
      0006AD                       9525 ___str_19:
      0006AD 32 6E 64 20 52 41 4D  9526 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006BA 0A                    9527 	.db 0x0a
      0006BB 75 6E 73 75 63 63 65  9528 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      0006C8 0A                    9529 	.db 0x0a
      0006C9 0A                    9530 	.db 0x0a
      0006CA 00                    9531 	.db 0x00
                                   9532 	.area CSEG    (CODE)
                                   9533 	.area CONST   (CODE)
      0006CB                       9534 ___str_20:
      0006CB 32 6E 64 20 52 41 4D  9535 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006D8 0A                    9536 	.db 0x0a
      0006D9 73 75 63 63 65 73 73  9537 	.ascii "successful."
             66 75 6C 2E
      0006E4 0A                    9538 	.db 0x0a
      0006E5 0A                    9539 	.db 0x0a
      0006E6 00                    9540 	.db 0x00
                                   9541 	.area CSEG    (CODE)
                                   9542 	.area CONST   (CODE)
      0006E7                       9543 ___str_21:
      0006E7 52 41 4D 20 63 68 65  9544 	.ascii "RAM check"
             63 6B
      0006F0 0A                    9545 	.db 0x0a
      0006F1 63 6F 6D 70 6C 65 74  9546 	.ascii "complete."
             65 2E
      0006FA 0A                    9547 	.db 0x0a
      0006FB 0A                    9548 	.db 0x0a
      0006FC 00                    9549 	.db 0x00
                                   9550 	.area CSEG    (CODE)
                                   9551 	.area CONST   (CODE)
      0006FD                       9552 ___str_22:
      0006FD 0A                    9553 	.db 0x0a
      0006FE 45 6E 74 65 72 20 73  9554 	.ascii "Enter source"
             6F 75 72 63 65
      00070A 0A                    9555 	.db 0x0a
      00070B 73 74 61 72 74 69 6E  9556 	.ascii "starting RAM"
             67 20 52 41 4D
      000717 0A                    9557 	.db 0x0a
      000718 61 64 64 72 65 73 73  9558 	.ascii "address:"
             3A
      000720 0A                    9559 	.db 0x0a
      000721 0A                    9560 	.db 0x0a
      000722 0A                    9561 	.db 0x0a
      000723 20 20 30 78 5F 5F 5F  9562 	.ascii "  0x____"
             5F
      00072B 00                    9563 	.db 0x00
                                   9564 	.area CSEG    (CODE)
                                   9565 	.area CONST   (CODE)
      00072C                       9566 ___str_23:
      00072C 0A                    9567 	.db 0x0a
      00072D 45 6E 74 65 72        9568 	.ascii "Enter"
      000732 0A                    9569 	.db 0x0a
      000733 64 65 73 74 69 6E 61  9570 	.ascii "destination"
             74 69 6F 6E
      00073E 0A                    9571 	.db 0x0a
      00073F 73 74 61 72 74 69 6E  9572 	.ascii "starting RAM"
             67 20 52 41 4D
      00074B 0A                    9573 	.db 0x0a
      00074C 61 64 64 72 65 73 73  9574 	.ascii "address:"
             3A
      000754 0A                    9575 	.db 0x0a
      000755 0A                    9576 	.db 0x0a
      000756 0A                    9577 	.db 0x0a
      000757 20 20 30 78 5F 5F 5F  9578 	.ascii "  0x____"
             5F
      00075F 00                    9579 	.db 0x00
                                   9580 	.area CSEG    (CODE)
                                   9581 	.area CONST   (CODE)
      000760                       9582 ___str_24:
      000760 0A                    9583 	.db 0x0a
      000761 4D 6F 76 65 20 63 6F  9584 	.ascii "Move complete."
             6D 70 6C 65 74 65 2E
      00076F 0A                    9585 	.db 0x0a
      000770 0A                    9586 	.db 0x0a
      000771 00                    9587 	.db 0x00
                                   9588 	.area CSEG    (CODE)
                                   9589 	.area CONST   (CODE)
      000772                       9590 ___str_25:
      000772 0A                    9591 	.db 0x0a
      000773 45 6E 74 65 72        9592 	.ascii "Enter"
      000778 0A                    9593 	.db 0x0a
      000779 73 74 61 72 74 69 6E  9594 	.ascii "starting RAM"
             67 20 52 41 4D
      000785 0A                    9595 	.db 0x0a
      000786 61 64 64 72 65 73 73  9596 	.ascii "address:"
             3A
      00078E 0A                    9597 	.db 0x0a
      00078F 0A                    9598 	.db 0x0a
      000790 20 20 30 78 5F 5F 5F  9599 	.ascii "  0x____"
             5F
      000798 00                    9600 	.db 0x00
                                   9601 	.area CSEG    (CODE)
                                   9602 	.area CONST   (CODE)
      000799                       9603 ___str_26:
      000799 0A                    9604 	.db 0x0a
      00079A 45 6E 74 65 72 20 73  9605 	.ascii "Enter search"
             65 61 72 63 68
      0007A6 0A                    9606 	.db 0x0a
      0007A7 76 61 6C 75 65 3A     9607 	.ascii "value:"
      0007AD 0A                    9608 	.db 0x0a
      0007AE 0A                    9609 	.db 0x0a
      0007AF 20 20 30 78 5F 5F     9610 	.ascii "  0x__"
      0007B5 00                    9611 	.db 0x00
                                   9612 	.area CSEG    (CODE)
                                   9613 	.area CONST   (CODE)
      0007B6                       9614 ___str_27:
      0007B6 0A                    9615 	.db 0x0a
      0007B7 30 78                 9616 	.ascii "0x"
      0007B9 00                    9617 	.db 0x00
                                   9618 	.area CSEG    (CODE)
                                   9619 	.area CONST   (CODE)
      0007BA                       9620 ___str_28:
      0007BA 20 66 6F 75 6E 64     9621 	.ascii " found"
      0007C0 0A                    9622 	.db 0x0a
      0007C1 00                    9623 	.db 0x00
                                   9624 	.area CSEG    (CODE)
                                   9625 	.area CONST   (CODE)
      0007C2                       9626 ___str_29:
      0007C2 30 78 31 30 30 30 30  9627 	.ascii "0x10000"
      0007C9 00                    9628 	.db 0x00
                                   9629 	.area CSEG    (CODE)
                                   9630 	.area CONST   (CODE)
      0007CA                       9631 ___str_30:
      0007CA 0A                    9632 	.db 0x0a
      0007CB 74 69 6D 65 73 2E     9633 	.ascii "times."
      0007D1 00                    9634 	.db 0x00
                                   9635 	.area CSEG    (CODE)
                                   9636 	.area CONST   (CODE)
      0007D2                       9637 ___str_31:
      0007D2 20 6E 6F 74           9638 	.ascii " not"
      0007D6 0A                    9639 	.db 0x0a
      0007D7 66 6F 75 6E 64 20 69  9640 	.ascii "found in"
             6E
      0007DF 0A                    9641 	.db 0x0a
      0007E0 65 78 74 65 72 6E 61  9642 	.ascii "external RAM"
             6C 20 52 41 4D
      0007EC 0A                    9643 	.db 0x0a
      0007ED 00                    9644 	.db 0x00
                                   9645 	.area CSEG    (CODE)
                                   9646 	.area CONST   (CODE)
      0007EE                       9647 ___str_32:
      0007EE 20 2D                 9648 	.ascii " -"
      0007F0 0A                    9649 	.db 0x0a
      0007F1 00                    9650 	.db 0x00
                                   9651 	.area CSEG    (CODE)
                                   9652 	.area CONST   (CODE)
      0007F2                       9653 ___str_33:
      0007F2 0A                    9654 	.db 0x0a
      0007F3 00                    9655 	.db 0x00
                                   9656 	.area CSEG    (CODE)
                                   9657 	.area CONST   (CODE)
      0007F4                       9658 ___str_34:
      0007F4 20 20 28 30 29 20 2D  9659 	.ascii "  (0) - Next Page"
             20 4E 65 78 74 20 50
             61 67 65
      000805 0A                    9660 	.db 0x0a
      000806 20 20 28 31 29 20 2D  9661 	.ascii "  (1) - Prev Page"
             20 50 72 65 76 20 50
             61 67 65
      000817 0A                    9662 	.db 0x0a
      000818 20 20 28 45 29 20 2D  9663 	.ascii "  (E) - END"
             20 45 4E 44
      000823 0A                    9664 	.db 0x0a
      000824 00                    9665 	.db 0x00
                                   9666 	.area CSEG    (CODE)
                                   9667 	.area CONST   (CODE)
      000825                       9668 ___str_35:
      000825 0A                    9669 	.db 0x0a
      000826 45 6E 64 20 6F 66 20  9670 	.ascii "End of Data."
             44 61 74 61 2E
      000832 00                    9671 	.db 0x00
                                   9672 	.area CSEG    (CODE)
                                   9673 	.area CONST   (CODE)
      000833                       9674 ___str_36:
      000833 45 6E 64 20 6F 66 20  9675 	.ascii "End of Data"
             44 61 74 61
      00083E 00                    9676 	.db 0x00
                                   9677 	.area CSEG    (CODE)
                                   9678 	.area CONST   (CODE)
      00083F                       9679 ___str_37:
      00083F 0A                    9680 	.db 0x0a
      000840 52 65 74 75 72 6E 69  9681 	.ascii "Returning to"
             6E 67 20 74 6F
      00084C 0A                    9682 	.db 0x0a
      00084D 4D 61 69 6E 20 4D 65  9683 	.ascii "Main Menu."
             6E 75 2E
      000857 00                    9684 	.db 0x00
                                   9685 	.area CSEG    (CODE)
                                   9686 	.area CONST   (CODE)
      000858                       9687 ___str_38:
      000858 0A                    9688 	.db 0x0a
      000859 45 6E 74 65 72 20 73  9689 	.ascii "Enter source"
             6F 75 72 63 65
      000865 0A                    9690 	.db 0x0a
      000866 73 74 61 72 74 69 6E  9691 	.ascii "starting RAM"
             67 20 52 41 4D
      000872 0A                    9692 	.db 0x0a
      000873 61 64 64 72 65 73 73  9693 	.ascii "address:"
             3A
      00087B 0A                    9694 	.db 0x0a
      00087C 0A                    9695 	.db 0x0a
      00087D 20 20 30 78 5F 5F 5F  9696 	.ascii "  0x____"
             5F
      000885 00                    9697 	.db 0x00
                                   9698 	.area CSEG    (CODE)
                                   9699 	.area CONST   (CODE)
      000886                       9700 ___str_39:
      000886 0A                    9701 	.db 0x0a
      000887 0A                    9702 	.db 0x0a
      000888 4E 65 77 20 76 61 6C  9703 	.ascii "New value:"
             75 65 3A
      000892 0A                    9704 	.db 0x0a
      000893 20 20 30 78 5F 5F     9705 	.ascii "  0x__"
      000899 00                    9706 	.db 0x00
                                   9707 	.area CSEG    (CODE)
                                   9708 	.area CONST   (CODE)
      00089A                       9709 ___str_40:
      00089A 0A                    9710 	.db 0x0a
      00089B 0A                    9711 	.db 0x0a
      00089C 0A                    9712 	.db 0x0a
      00089D 0A                    9713 	.db 0x0a
      00089E 28 31 29 20 45 64 69  9714 	.ascii "(1) Edit next"
             74 20 6E 65 78 74
      0008AB 0A                    9715 	.db 0x0a
      0008AC 52 41 4D 20 6C 6F 63  9716 	.ascii "RAM location"
             61 74 69 6F 6E
      0008B8 0A                    9717 	.db 0x0a
      0008B9 0A                    9718 	.db 0x0a
      0008BA 00                    9719 	.db 0x00
                                   9720 	.area CSEG    (CODE)
                                   9721 	.area CONST   (CODE)
      0008BB                       9722 ___str_41:
      0008BB 28 45 29 20 45 6E 64  9723 	.ascii "(E) End"
      0008C2 00                    9724 	.db 0x00
                                   9725 	.area CSEG    (CODE)
                                   9726 	.area CONST   (CODE)
      0008C3                       9727 ___str_42:
      0008C3 0A                    9728 	.db 0x0a
      0008C4 45 6E 64 20 6F 66 20  9729 	.ascii "End of data."
             64 61 74 61 2E
      0008D0 0A                    9730 	.db 0x0a
      0008D1 00                    9731 	.db 0x00
                                   9732 	.area CSEG    (CODE)
                                   9733 	.area CONST   (CODE)
      0008D2                       9734 ___str_43:
      0008D2 0A                    9735 	.db 0x0a
      0008D3 52 65 74 75 72 6E 69  9736 	.ascii "Returning to"
             6E 67 20 74 6F
      0008DF 0A                    9737 	.db 0x0a
      0008E0 6D 61 69 6E 20 6D 65  9738 	.ascii "main menu."
             6E 75 2E
      0008EA 00                    9739 	.db 0x00
                                   9740 	.area CSEG    (CODE)
                                   9741 	.area CONST   (CODE)
      0008EB                       9742 ___str_44:
      0008EB 20 6E 6F 74           9743 	.ascii " not"
      0008EF 0A                    9744 	.db 0x0a
      0008F0 66 6F 75 6E 64 20 69  9745 	.ascii "found in"
             6E
      0008F8 0A                    9746 	.db 0x0a
      0008F9 61 64 64 72 65 73 73  9747 	.ascii "address range"
             20 72 61 6E 67 65
      000906 0A                    9748 	.db 0x0a
      000907 0A                    9749 	.db 0x0a
      000908 00                    9750 	.db 0x00
                                   9751 	.area CSEG    (CODE)
                                   9752 	.area CONST   (CODE)
      000909                       9753 ___str_45:
      000909 20 66 6F 75 6E 64 20  9754 	.ascii " found at"
             61 74
      000912 0A                    9755 	.db 0x0a
      000913 74 68 65 20 66 6F 6C  9756 	.ascii "the following"
             6C 6F 77 69 6E 67
      000920 0A                    9757 	.db 0x0a
      000921 61 64 64 72 65 73 73  9758 	.ascii "addresses:"
             65 73 3A
      00092B 0A                    9759 	.db 0x0a
      00092C 0A                    9760 	.db 0x0a
      00092D 00                    9761 	.db 0x00
                                   9762 	.area CSEG    (CODE)
                                   9763 	.area CONST   (CODE)
      00092E                       9764 ___str_46:
      00092E 45 6E 64 20 6F 66 20  9765 	.ascii "End of Data."
             44 61 74 61 2E
      00093A 00                    9766 	.db 0x00
                                   9767 	.area CSEG    (CODE)
                                   9768 	.area CONST   (CODE)
      00093B                       9769 ___str_47:
      00093B 0A                    9770 	.db 0x0a
      00093C 45 6E 74 65 72        9771 	.ascii "Enter"
      000941 0A                    9772 	.db 0x0a
      000942 73 74 61 72 74 69 6E  9773 	.ascii "starting RAM"
             67 20 52 41 4D
      00094E 0A                    9774 	.db 0x0a
      00094F 61 64 64 72 65 73 73  9775 	.ascii "address:"
             3A
      000957 0A                    9776 	.db 0x0a
      000958 0A                    9777 	.db 0x0a
      000959 20 20 20 30 78 5F 5F  9778 	.ascii "   0x____"
             5F 5F
      000962 00                    9779 	.db 0x00
                                   9780 	.area CSEG    (CODE)
                                   9781 	.area CONST   (CODE)
      000963                       9782 ___str_48:
      000963 0A                    9783 	.db 0x0a
      000964 45 6E 74 65 72 20 73  9784 	.ascii "Enter search"
             65 61 72 63 68
      000970 0A                    9785 	.db 0x0a
      000971 76 61 6C 75 65 3A     9786 	.ascii "value:"
      000977 0A                    9787 	.db 0x0a
      000978 0A                    9788 	.db 0x0a
      000979 20 20 20 30 78 5F 5F  9789 	.ascii "   0x__"
      000980 00                    9790 	.db 0x00
                                   9791 	.area CSEG    (CODE)
                                   9792 	.area CONST   (CODE)
      000981                       9793 ___str_49:
      000981 0A                    9794 	.db 0x0a
      000982 28 31 29 20 31 32 30  9795 	.ascii "(1) 1200"
             30
      00098A 0A                    9796 	.db 0x0a
      00098B 00                    9797 	.db 0x00
                                   9798 	.area CSEG    (CODE)
                                   9799 	.area CONST   (CODE)
      00098C                       9800 ___str_50:
      00098C 28 32 29 20 32 34 30  9801 	.ascii "(2) 2400"
             30
      000994 0A                    9802 	.db 0x0a
      000995 00                    9803 	.db 0x00
                                   9804 	.area CSEG    (CODE)
                                   9805 	.area CONST   (CODE)
      000996                       9806 ___str_51:
      000996 28 33 29 20 34 38 30  9807 	.ascii "(3) 4800"
             30
      00099E 0A                    9808 	.db 0x0a
      00099F 00                    9809 	.db 0x00
                                   9810 	.area CSEG    (CODE)
                                   9811 	.area CONST   (CODE)
      0009A0                       9812 ___str_52:
      0009A0 28 34 29 20 39 36 30  9813 	.ascii "(4) 9600"
             30
      0009A8 0A                    9814 	.db 0x0a
      0009A9 00                    9815 	.db 0x00
                                   9816 	.area CSEG    (CODE)
                                   9817 	.area CONST   (CODE)
      0009AA                       9818 ___str_53:
      0009AA 28 35 29 20 31 39 32  9819 	.ascii "(5) 19200"
             30 30
      0009B3 0A                    9820 	.db 0x0a
      0009B4 0A                    9821 	.db 0x0a
      0009B5 00                    9822 	.db 0x00
                                   9823 	.area CSEG    (CODE)
                                   9824 	.area CONST   (CODE)
      0009B6                       9825 ___str_54:
      0009B6 43 75 72 72 65 6E 74  9826 	.ascii "Current:"
             3A
      0009BE 0A                    9827 	.db 0x0a
      0009BF 00                    9828 	.db 0x00
                                   9829 	.area CSEG    (CODE)
                                   9830 	.area CONST   (CODE)
      0009C0                       9831 ___str_55:
      0009C0 31 32 30 30           9832 	.ascii "1200"
      0009C4 0A                    9833 	.db 0x0a
      0009C5 00                    9834 	.db 0x00
                                   9835 	.area CSEG    (CODE)
                                   9836 	.area CONST   (CODE)
      0009C6                       9837 ___str_56:
      0009C6 32 34 30 30           9838 	.ascii "2400"
      0009CA 0A                    9839 	.db 0x0a
      0009CB 00                    9840 	.db 0x00
                                   9841 	.area CSEG    (CODE)
                                   9842 	.area CONST   (CODE)
      0009CC                       9843 ___str_57:
      0009CC 34 38 30 30           9844 	.ascii "4800"
      0009D0 0A                    9845 	.db 0x0a
      0009D1 00                    9846 	.db 0x00
                                   9847 	.area CSEG    (CODE)
                                   9848 	.area CONST   (CODE)
      0009D2                       9849 ___str_58:
      0009D2 39 36 30 30           9850 	.ascii "9600"
      0009D6 0A                    9851 	.db 0x0a
      0009D7 00                    9852 	.db 0x00
                                   9853 	.area CSEG    (CODE)
                                   9854 	.area CONST   (CODE)
      0009D8                       9855 ___str_59:
      0009D8 31 39 32 30 30        9856 	.ascii "19200"
      0009DD 0A                    9857 	.db 0x0a
      0009DE 00                    9858 	.db 0x00
                                   9859 	.area CSEG    (CODE)
                                   9860 	.area CONST   (CODE)
      0009DF                       9861 ___str_60:
      0009DF 0A                    9862 	.db 0x0a
      0009E0 20 20 20 5F           9863 	.ascii "   _"
      0009E4 00                    9864 	.db 0x00
                                   9865 	.area CSEG    (CODE)
                                   9866 	.area CONST   (CODE)
      0009E5                       9867 ___str_61:
      0009E5 31                    9868 	.ascii "1"
      0009E6 0A                    9869 	.db 0x0a
      0009E7 00                    9870 	.db 0x00
                                   9871 	.area CSEG    (CODE)
                                   9872 	.area CONST   (CODE)
      0009E8                       9873 ___str_62:
      0009E8 32                    9874 	.ascii "2"
      0009E9 0A                    9875 	.db 0x0a
      0009EA 00                    9876 	.db 0x00
                                   9877 	.area CSEG    (CODE)
                                   9878 	.area CONST   (CODE)
      0009EB                       9879 ___str_63:
      0009EB 33                    9880 	.ascii "3"
      0009EC 0A                    9881 	.db 0x0a
      0009ED 00                    9882 	.db 0x00
                                   9883 	.area CSEG    (CODE)
                                   9884 	.area CONST   (CODE)
      0009EE                       9885 ___str_64:
      0009EE 34                    9886 	.ascii "4"
      0009EF 0A                    9887 	.db 0x0a
      0009F0 00                    9888 	.db 0x00
                                   9889 	.area CSEG    (CODE)
                                   9890 	.area CONST   (CODE)
      0009F1                       9891 ___str_65:
      0009F1 35                    9892 	.ascii "5"
      0009F2 0A                    9893 	.db 0x0a
      0009F3 00                    9894 	.db 0x00
                                   9895 	.area CSEG    (CODE)
                                   9896 	.area CONST   (CODE)
      0009F4                       9897 ___str_66:
      0009F4 58                    9898 	.ascii "X"
      0009F5 0A                    9899 	.db 0x0a
      0009F6 00                    9900 	.db 0x00
                                   9901 	.area CSEG    (CODE)
                                   9902 	.area CONST   (CODE)
      0009F7                       9903 ___str_67:
      0009F7 0A                    9904 	.db 0x0a
      0009F8 52 65 74 75 72 6E 69  9905 	.ascii "Returning to"
             6E 67 20 74 6F
      000A04 0A                    9906 	.db 0x0a
      000A05 6C 61 73 74 20 6D 65  9907 	.ascii "last menu."
             6E 75 2E
      000A0F 00                    9908 	.db 0x00
                                   9909 	.area CSEG    (CODE)
                                   9910 	.area CONST   (CODE)
      000A10                       9911 ___str_68:
      000A10 0A                    9912 	.db 0x0a
      000A11 44 61 74 61 20 42 69  9913 	.ascii "Data Bits"
             74 73
      000A1A 0A                    9914 	.db 0x0a
      000A1B 0A                    9915 	.db 0x0a
      000A1C 00                    9916 	.db 0x00
                                   9917 	.area CSEG    (CODE)
                                   9918 	.area CONST   (CODE)
      000A1D                       9919 ___str_69:
      000A1D 28 31 29 20 38        9920 	.ascii "(1) 8"
      000A22 0A                    9921 	.db 0x0a
      000A23 00                    9922 	.db 0x00
                                   9923 	.area CSEG    (CODE)
                                   9924 	.area CONST   (CODE)
      000A24                       9925 ___str_70:
      000A24 28 32 29 20 39        9926 	.ascii "(2) 9"
      000A29 0A                    9927 	.db 0x0a
      000A2A 00                    9928 	.db 0x00
                                   9929 	.area CSEG    (CODE)
                                   9930 	.area CONST   (CODE)
      000A2B                       9931 ___str_71:
      000A2B 0A                    9932 	.db 0x0a
      000A2C 43 75 72 72 65 6E 74  9933 	.ascii "Current: "
             3A 20
      000A35 00                    9934 	.db 0x00
                                   9935 	.area CSEG    (CODE)
                                   9936 	.area CONST   (CODE)
      000A36                       9937 ___str_72:
      000A36 38                    9938 	.ascii "8"
      000A37 0A                    9939 	.db 0x0a
      000A38 00                    9940 	.db 0x00
                                   9941 	.area CSEG    (CODE)
                                   9942 	.area CONST   (CODE)
      000A39                       9943 ___str_73:
      000A39 39                    9944 	.ascii "9"
      000A3A 0A                    9945 	.db 0x0a
      000A3B 00                    9946 	.db 0x00
                                   9947 	.area CSEG    (CODE)
                                   9948 	.area CONST   (CODE)
      000A3C                       9949 ___str_74:
      000A3C 0A                    9950 	.db 0x0a
      000A3D 50 61 72 69 74 79     9951 	.ascii "Parity"
      000A43 0A                    9952 	.db 0x0a
      000A44 0A                    9953 	.db 0x0a
      000A45 00                    9954 	.db 0x00
                                   9955 	.area CSEG    (CODE)
                                   9956 	.area CONST   (CODE)
      000A46                       9957 ___str_75:
      000A46 28 31 29 20 45 76 65  9958 	.ascii "(1) Even"
             6E
      000A4E 0A                    9959 	.db 0x0a
      000A4F 00                    9960 	.db 0x00
                                   9961 	.area CSEG    (CODE)
                                   9962 	.area CONST   (CODE)
      000A50                       9963 ___str_76:
      000A50 28 32 29 20 4F 64 64  9964 	.ascii "(2) Odd"
      000A57 0A                    9965 	.db 0x0a
      000A58 00                    9966 	.db 0x00
                                   9967 	.area CSEG    (CODE)
                                   9968 	.area CONST   (CODE)
      000A59                       9969 ___str_77:
      000A59 28 33 29 20 4E 6F 6E  9970 	.ascii "(3) None"
             65
      000A61 0A                    9971 	.db 0x0a
      000A62 00                    9972 	.db 0x00
                                   9973 	.area CSEG    (CODE)
                                   9974 	.area CONST   (CODE)
      000A63                       9975 ___str_78:
      000A63 45 76 65 6E           9976 	.ascii "Even"
      000A67 0A                    9977 	.db 0x0a
      000A68 00                    9978 	.db 0x00
                                   9979 	.area CSEG    (CODE)
                                   9980 	.area CONST   (CODE)
      000A69                       9981 ___str_79:
      000A69 4F 64 64              9982 	.ascii "Odd"
      000A6C 0A                    9983 	.db 0x0a
      000A6D 00                    9984 	.db 0x00
                                   9985 	.area CSEG    (CODE)
                                   9986 	.area CONST   (CODE)
      000A6E                       9987 ___str_80:
      000A6E 4E 6F 6E 65           9988 	.ascii "None"
      000A72 0A                    9989 	.db 0x0a
      000A73 00                    9990 	.db 0x00
                                   9991 	.area CSEG    (CODE)
                                   9992 	.area CONST   (CODE)
      000A74                       9993 ___str_81:
      000A74 0A                    9994 	.db 0x0a
      000A75 45 6E 74 65 72        9995 	.ascii "Enter"
      000A7A 0A                    9996 	.db 0x0a
      000A7B 63 68 61 72 61 63 74  9997 	.ascii "character"
             65 72
      000A84 0A                    9998 	.db 0x0a
      000A85 74 6F 20 73 65 6E 64  9999 	.ascii "to send:"
             3A
      000A8D 0A                   10000 	.db 0x0a
      000A8E 0A                   10001 	.db 0x0a
      000A8F 20 20 20 5F          10002 	.ascii "   _"
      000A93 00                   10003 	.db 0x00
                                  10004 	.area CSEG    (CODE)
                                  10005 	.area CONST   (CODE)
      000A94                      10006 ___str_82:
      000A94 0A                   10007 	.db 0x0a
      000A95 28 31 29 20 44 61 74 10008 	.ascii "(1) Data Rate"
             61 20 52 61 74 65
      000AA2 00                   10009 	.db 0x00
                                  10010 	.area CSEG    (CODE)
                                  10011 	.area CONST   (CODE)
      000AA3                      10012 ___str_83:
      000AA3 0A                   10013 	.db 0x0a
      000AA4 28 32 29 20 23 20 6F 10014 	.ascii "(2) # of Data"
             66 20 44 61 74 61
      000AB1 0A                   10015 	.db 0x0a
      000AB2 20 20 20 20 42 69 74 10016 	.ascii "    Bits"
             73
      000ABA 00                   10017 	.db 0x00
                                  10018 	.area CSEG    (CODE)
                                  10019 	.area CONST   (CODE)
      000ABB                      10020 ___str_84:
      000ABB 0A                   10021 	.db 0x0a
      000ABC 28 33 29 20 50 61 72 10022 	.ascii "(3) Parity"
             69 74 79
      000AC6 00                   10023 	.db 0x00
                                  10024 	.area CSEG    (CODE)
                                  10025 	.area CONST   (CODE)
      000AC7                      10026 ___str_85:
      000AC7 0A                   10027 	.db 0x0a
      000AC8 28 34 29 20 53 65 6E 10028 	.ascii "(4) Send Data"
             64 20 44 61 74 61
      000AD5 00                   10029 	.db 0x00
                                  10030 	.area CSEG    (CODE)
                                  10031 	.area CONST   (CODE)
      000AD6                      10032 ___str_86:
      000AD6 0A                   10033 	.db 0x0a
      000AD7 28 45 29 20 45 6E 64 10034 	.ascii "(E) End"
      000ADE 0A                   10035 	.db 0x0a
      000ADF 00                   10036 	.db 0x00
                                  10037 	.area CSEG    (CODE)
                                  10038 	.area CONST   (CODE)
      000AE0                      10039 ___str_87:
      000AE0 20 20 20 43 61 6D 65 10040 	.ascii "   Cameron"
             72 6F 6E
      000AEA 0A                   10041 	.db 0x0a
      000AEB 20 20 20 42 69 6E 69 10042 	.ascii "   Biniamow"
             61 6D 6F 77
      000AF6 0A                   10043 	.db 0x0a
      000AF7 00                   10044 	.db 0x00
                                  10045 	.area CSEG    (CODE)
                                  10046 	.area CONST   (CODE)
      000AF8                      10047 ___str_88:
      000AF8 20 20 45 43 45 4E 2D 10048 	.ascii "  ECEN-4330"
             34 33 33 30
      000B03 0A                   10049 	.db 0x0a
      000B04 0A                   10050 	.db 0x0a
      000B05 00                   10051 	.db 0x00
                                  10052 	.area CSEG    (CODE)
                                  10053 	.area CONST   (CODE)
      000B06                      10054 ___str_89:
      000B06 28 41 29 20 52 41 4D 10055 	.ascii "(A) RAM CHECK"
             20 43 48 45 43 4B
      000B13 0A                   10056 	.db 0x0a
      000B14 00                   10057 	.db 0x00
                                  10058 	.area CSEG    (CODE)
                                  10059 	.area CONST   (CODE)
      000B15                      10060 ___str_90:
      000B15 28 42 29 20 4D 4F 56 10061 	.ascii "(B) MOVE"
             45
      000B1D 0A                   10062 	.db 0x0a
      000B1E 00                   10063 	.db 0x00
                                  10064 	.area CSEG    (CODE)
                                  10065 	.area CONST   (CODE)
      000B1F                      10066 ___str_91:
      000B1F 28 43 29 20 43 4F 55 10067 	.ascii "(C) COUNT"
             4E 54
      000B28 0A                   10068 	.db 0x0a
      000B29 00                   10069 	.db 0x00
                                  10070 	.area CSEG    (CODE)
                                  10071 	.area CONST   (CODE)
      000B2A                      10072 ___str_92:
      000B2A 28 44 29 20 44 55 4D 10073 	.ascii "(D) DUMP"
             50
      000B32 0A                   10074 	.db 0x0a
      000B33 00                   10075 	.db 0x00
                                  10076 	.area CSEG    (CODE)
                                  10077 	.area CONST   (CODE)
      000B34                      10078 ___str_93:
      000B34 28 45 29 20 45 44 49 10079 	.ascii "(E) EDIT"
             54
      000B3C 0A                   10080 	.db 0x0a
      000B3D 00                   10081 	.db 0x00
                                  10082 	.area CSEG    (CODE)
                                  10083 	.area CONST   (CODE)
      000B3E                      10084 ___str_94:
      000B3E 28 46 29 20 46 49 4E 10085 	.ascii "(F) FIND"
             44
      000B46 0A                   10086 	.db 0x0a
      000B47 00                   10087 	.db 0x00
                                  10088 	.area CSEG    (CODE)
                                  10089 	.area CONST   (CODE)
      000B48                      10090 ___str_95:
      000B48 28 31 29 20 55 41 52 10091 	.ascii "(1) UART"
             54
      000B50 0A                   10092 	.db 0x0a
      000B51 00                   10093 	.db 0x00
                                  10094 	.area CSEG    (CODE)
                                  10095 	.area CONST   (CODE)
      000B52                      10096 ___str_96:
      000B52 53 70 72 69 6E 67 20 10097 	.ascii "Spring 2021"
             32 30 32 31
      000B5D 00                   10098 	.db 0x00
                                  10099 	.area CSEG    (CODE)
                                  10100 	.area XINIT   (CODE)
                                  10101 	.area CABS    (ABS,CODE)
