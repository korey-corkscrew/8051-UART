                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.9 #12669 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4330lab7
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _RAMwrite_PARM_2
                                     12 	.globl _setAddress_PARM_4
                                     13 	.globl _setAddress_PARM_3
                                     14 	.globl _setAddress_PARM_2
                                     15 	.globl _setTextColor_PARM_2
                                     16 	.globl _setCursor_PARM_2
                                     17 	.globl _rtcCmd_PARM_2
                                     18 	.globl _writeRegister16_PARM_2
                                     19 	.globl _writeRegister8_PARM_2
                                     20 	.globl _keypad
                                     21 	.globl _main
                                     22 	.globl _LCD_mainMenu
                                     23 	.globl _UART
                                     24 	.globl _UART_send
                                     25 	.globl _UART_parity
                                     26 	.globl _UART_dataBits
                                     27 	.globl _UART_dataRate
                                     28 	.globl _resetLCD1
                                     29 	.globl _FIND
                                     30 	.globl _EDIT
                                     31 	.globl _EDIT_display
                                     32 	.globl _DUMP
                                     33 	.globl _DUMP_display
                                     34 	.globl _COUNT
                                     35 	.globl _MOVE
                                     36 	.globl _RAM_CHECK
                                     37 	.globl _inputDataSize
                                     38 	.globl _inputDataType
                                     39 	.globl _inputRead8
                                     40 	.globl _inputRead16
                                     41 	.globl _invalidInput
                                     42 	.globl _resetLCD
                                     43 	.globl _RAMread
                                     44 	.globl _RAMwrite
                                     45 	.globl _HEXtoASCII_16write
                                     46 	.globl _HEXtoASCII
                                     47 	.globl _ASCIItoHEX
                                     48 	.globl _drawChar
                                     49 	.globl _setRotation
                                     50 	.globl _UART_transmit
                                     51 	.globl _UART_Init
                                     52 	.globl _ISR_receive
                                     53 	.globl _CY
                                     54 	.globl _AC
                                     55 	.globl _F0
                                     56 	.globl _RS1
                                     57 	.globl _RS0
                                     58 	.globl _OV
                                     59 	.globl _FL
                                     60 	.globl _P
                                     61 	.globl _TF2
                                     62 	.globl _EXF2
                                     63 	.globl _RCLK
                                     64 	.globl _TCLK
                                     65 	.globl _EXEN2
                                     66 	.globl _TR2
                                     67 	.globl _C_T2
                                     68 	.globl _CP_RL2
                                     69 	.globl _T2CON_7
                                     70 	.globl _T2CON_6
                                     71 	.globl _T2CON_5
                                     72 	.globl _T2CON_4
                                     73 	.globl _T2CON_3
                                     74 	.globl _T2CON_2
                                     75 	.globl _T2CON_1
                                     76 	.globl _T2CON_0
                                     77 	.globl _PT2
                                     78 	.globl _PS
                                     79 	.globl _PT1
                                     80 	.globl _PX1
                                     81 	.globl _PT0
                                     82 	.globl _PX0
                                     83 	.globl _RD
                                     84 	.globl _WR
                                     85 	.globl _T1
                                     86 	.globl _T0
                                     87 	.globl _INT1
                                     88 	.globl _INT0
                                     89 	.globl _TXD
                                     90 	.globl _RXD
                                     91 	.globl _P3_7
                                     92 	.globl _P3_6
                                     93 	.globl _P3_5
                                     94 	.globl _P3_4
                                     95 	.globl _P3_3
                                     96 	.globl _P3_2
                                     97 	.globl _P3_1
                                     98 	.globl _P3_0
                                     99 	.globl _EA
                                    100 	.globl _ET2
                                    101 	.globl _ES
                                    102 	.globl _ET1
                                    103 	.globl _EX1
                                    104 	.globl _ET0
                                    105 	.globl _EX0
                                    106 	.globl _P2_7
                                    107 	.globl _P2_6
                                    108 	.globl _P2_5
                                    109 	.globl _P2_4
                                    110 	.globl _P2_3
                                    111 	.globl _P2_2
                                    112 	.globl _P2_1
                                    113 	.globl _P2_0
                                    114 	.globl _SM0
                                    115 	.globl _SM1
                                    116 	.globl _SM2
                                    117 	.globl _REN
                                    118 	.globl _TB8
                                    119 	.globl _RB8
                                    120 	.globl _TI
                                    121 	.globl _RI
                                    122 	.globl _T2EX
                                    123 	.globl _T2
                                    124 	.globl _P1_7
                                    125 	.globl _P1_6
                                    126 	.globl _P1_5
                                    127 	.globl _P1_4
                                    128 	.globl _P1_3
                                    129 	.globl _P1_2
                                    130 	.globl _P1_1
                                    131 	.globl _P1_0
                                    132 	.globl _TF1
                                    133 	.globl _TR1
                                    134 	.globl _TF0
                                    135 	.globl _TR0
                                    136 	.globl _IE1
                                    137 	.globl _IT1
                                    138 	.globl _IE0
                                    139 	.globl _IT0
                                    140 	.globl _P0_7
                                    141 	.globl _P0_6
                                    142 	.globl _P0_5
                                    143 	.globl _P0_4
                                    144 	.globl _P0_3
                                    145 	.globl _P0_2
                                    146 	.globl _P0_1
                                    147 	.globl _P0_0
                                    148 	.globl _B
                                    149 	.globl _A
                                    150 	.globl _ACC
                                    151 	.globl _PSW
                                    152 	.globl _TH2
                                    153 	.globl _TL2
                                    154 	.globl _RCAP2H
                                    155 	.globl _RCAP2L
                                    156 	.globl _T2MOD
                                    157 	.globl _T2CON
                                    158 	.globl _IP
                                    159 	.globl _P3
                                    160 	.globl _IE
                                    161 	.globl _P2
                                    162 	.globl _SBUF
                                    163 	.globl _SCON
                                    164 	.globl _P1
                                    165 	.globl _TH1
                                    166 	.globl _TH0
                                    167 	.globl _TL1
                                    168 	.globl _TL0
                                    169 	.globl _TMOD
                                    170 	.globl _TCON
                                    171 	.globl _PCON
                                    172 	.globl _DPH
                                    173 	.globl _DPL
                                    174 	.globl _SP
                                    175 	.globl _P0
                                    176 	.globl _drawChar_PARM_6
                                    177 	.globl _drawChar_PARM_5
                                    178 	.globl _drawChar_PARM_4
                                    179 	.globl _drawChar_PARM_3
                                    180 	.globl _drawChar_PARM_2
                                    181 	.globl _fillRect_PARM_5
                                    182 	.globl _fillRect_PARM_4
                                    183 	.globl _fillRect_PARM_3
                                    184 	.globl _fillRect_PARM_2
                                    185 	.globl _drawPixel_PARM_3
                                    186 	.globl _drawPixel_PARM_2
                                    187 	.globl _rtcWrite_PARM_2
                                    188 	.globl _received_flag
                                    189 	.globl _received_byte
                                    190 	.globl _parity
                                    191 	.globl _dataBits
                                    192 	.globl _dataRate
                                    193 	.globl _ts
                                    194 	.globl _y
                                    195 	.globl _x
                                    196 	.globl _textSizeHold
                                    197 	.globl _yCursorHold
                                    198 	.globl _xCursorHold
                                    199 	.globl _endAddrCalc
                                    200 	.globl _count
                                    201 	.globl _ASCII
                                    202 	.globl _byte1
                                    203 	.globl _byte
                                    204 	.globl _currAddr1
                                    205 	.globl _currAddr0
                                    206 	.globl _addr3
                                    207 	.globl _addr2
                                    208 	.globl _addr1
                                    209 	.globl _addr0
                                    210 	.globl _data
                                    211 	.globl _scrollEnd
                                    212 	.globl _dataEnd
                                    213 	.globl _validInput
                                    214 	.globl _dataSize
                                    215 	.globl _dataType
                                    216 	.globl _input8
                                    217 	.globl _input16
                                    218 	.globl _key
                                    219 	.globl __height
                                    220 	.globl __width
                                    221 	.globl _textbgcolor
                                    222 	.globl _textcolor
                                    223 	.globl _rotation
                                    224 	.globl _textsize
                                    225 	.globl _cursor_y
                                    226 	.globl _cursor_x
                                    227 	.globl _read_ram_address
                                    228 	.globl _seg7_address
                                    229 	.globl _lcd_address
                                    230 	.globl _rowloc
                                    231 	.globl _colloc
                                    232 	.globl _delay
                                    233 	.globl _writeRegister8
                                    234 	.globl _writeRegister16
                                    235 	.globl _rtcInit
                                    236 	.globl _rtcBusy
                                    237 	.globl _rtcCmd
                                    238 	.globl _rtcWrite
                                    239 	.globl _rtcRead
                                    240 	.globl _rtcPrint
                                    241 	.globl _setCursor
                                    242 	.globl _setTextColor
                                    243 	.globl _setTextSize
                                    244 	.globl _setAddress
                                    245 	.globl _TFT_LCD_INIT
                                    246 	.globl _drawPixel
                                    247 	.globl _fillRect
                                    248 	.globl _fillScreen
                                    249 	.globl _write
                                    250 	.globl _LCD_string_write
                                    251 	.globl _keyDetect
                                    252 	.globl _HEXtoASCII_8write
                                    253 	.globl _testRAM
                                    254 	.globl _FIND_display
                                    255 ;--------------------------------------------------------
                                    256 ; special function registers
                                    257 ;--------------------------------------------------------
                                    258 	.area RSEG    (ABS,DATA)
      000000                        259 	.org 0x0000
                           000080   260 _P0	=	0x0080
                           000081   261 _SP	=	0x0081
                           000082   262 _DPL	=	0x0082
                           000083   263 _DPH	=	0x0083
                           000087   264 _PCON	=	0x0087
                           000088   265 _TCON	=	0x0088
                           000089   266 _TMOD	=	0x0089
                           00008A   267 _TL0	=	0x008a
                           00008B   268 _TL1	=	0x008b
                           00008C   269 _TH0	=	0x008c
                           00008D   270 _TH1	=	0x008d
                           000090   271 _P1	=	0x0090
                           000098   272 _SCON	=	0x0098
                           000099   273 _SBUF	=	0x0099
                           0000A0   274 _P2	=	0x00a0
                           0000A8   275 _IE	=	0x00a8
                           0000B0   276 _P3	=	0x00b0
                           0000B8   277 _IP	=	0x00b8
                           0000C8   278 _T2CON	=	0x00c8
                           0000C9   279 _T2MOD	=	0x00c9
                           0000CA   280 _RCAP2L	=	0x00ca
                           0000CB   281 _RCAP2H	=	0x00cb
                           0000CC   282 _TL2	=	0x00cc
                           0000CD   283 _TH2	=	0x00cd
                           0000D0   284 _PSW	=	0x00d0
                           0000E0   285 _ACC	=	0x00e0
                           0000E0   286 _A	=	0x00e0
                           0000F0   287 _B	=	0x00f0
                                    288 ;--------------------------------------------------------
                                    289 ; special function bits
                                    290 ;--------------------------------------------------------
                                    291 	.area RSEG    (ABS,DATA)
      000000                        292 	.org 0x0000
                           000080   293 _P0_0	=	0x0080
                           000081   294 _P0_1	=	0x0081
                           000082   295 _P0_2	=	0x0082
                           000083   296 _P0_3	=	0x0083
                           000084   297 _P0_4	=	0x0084
                           000085   298 _P0_5	=	0x0085
                           000086   299 _P0_6	=	0x0086
                           000087   300 _P0_7	=	0x0087
                           000088   301 _IT0	=	0x0088
                           000089   302 _IE0	=	0x0089
                           00008A   303 _IT1	=	0x008a
                           00008B   304 _IE1	=	0x008b
                           00008C   305 _TR0	=	0x008c
                           00008D   306 _TF0	=	0x008d
                           00008E   307 _TR1	=	0x008e
                           00008F   308 _TF1	=	0x008f
                           000090   309 _P1_0	=	0x0090
                           000091   310 _P1_1	=	0x0091
                           000092   311 _P1_2	=	0x0092
                           000093   312 _P1_3	=	0x0093
                           000094   313 _P1_4	=	0x0094
                           000095   314 _P1_5	=	0x0095
                           000096   315 _P1_6	=	0x0096
                           000097   316 _P1_7	=	0x0097
                           000090   317 _T2	=	0x0090
                           000091   318 _T2EX	=	0x0091
                           000098   319 _RI	=	0x0098
                           000099   320 _TI	=	0x0099
                           00009A   321 _RB8	=	0x009a
                           00009B   322 _TB8	=	0x009b
                           00009C   323 _REN	=	0x009c
                           00009D   324 _SM2	=	0x009d
                           00009E   325 _SM1	=	0x009e
                           00009F   326 _SM0	=	0x009f
                           0000A0   327 _P2_0	=	0x00a0
                           0000A1   328 _P2_1	=	0x00a1
                           0000A2   329 _P2_2	=	0x00a2
                           0000A3   330 _P2_3	=	0x00a3
                           0000A4   331 _P2_4	=	0x00a4
                           0000A5   332 _P2_5	=	0x00a5
                           0000A6   333 _P2_6	=	0x00a6
                           0000A7   334 _P2_7	=	0x00a7
                           0000A8   335 _EX0	=	0x00a8
                           0000A9   336 _ET0	=	0x00a9
                           0000AA   337 _EX1	=	0x00aa
                           0000AB   338 _ET1	=	0x00ab
                           0000AC   339 _ES	=	0x00ac
                           0000AD   340 _ET2	=	0x00ad
                           0000AF   341 _EA	=	0x00af
                           0000B0   342 _P3_0	=	0x00b0
                           0000B1   343 _P3_1	=	0x00b1
                           0000B2   344 _P3_2	=	0x00b2
                           0000B3   345 _P3_3	=	0x00b3
                           0000B4   346 _P3_4	=	0x00b4
                           0000B5   347 _P3_5	=	0x00b5
                           0000B6   348 _P3_6	=	0x00b6
                           0000B7   349 _P3_7	=	0x00b7
                           0000B0   350 _RXD	=	0x00b0
                           0000B1   351 _TXD	=	0x00b1
                           0000B2   352 _INT0	=	0x00b2
                           0000B3   353 _INT1	=	0x00b3
                           0000B4   354 _T0	=	0x00b4
                           0000B5   355 _T1	=	0x00b5
                           0000B6   356 _WR	=	0x00b6
                           0000B7   357 _RD	=	0x00b7
                           0000B8   358 _PX0	=	0x00b8
                           0000B9   359 _PT0	=	0x00b9
                           0000BA   360 _PX1	=	0x00ba
                           0000BB   361 _PT1	=	0x00bb
                           0000BC   362 _PS	=	0x00bc
                           0000BD   363 _PT2	=	0x00bd
                           0000C8   364 _T2CON_0	=	0x00c8
                           0000C9   365 _T2CON_1	=	0x00c9
                           0000CA   366 _T2CON_2	=	0x00ca
                           0000CB   367 _T2CON_3	=	0x00cb
                           0000CC   368 _T2CON_4	=	0x00cc
                           0000CD   369 _T2CON_5	=	0x00cd
                           0000CE   370 _T2CON_6	=	0x00ce
                           0000CF   371 _T2CON_7	=	0x00cf
                           0000C8   372 _CP_RL2	=	0x00c8
                           0000C9   373 _C_T2	=	0x00c9
                           0000CA   374 _TR2	=	0x00ca
                           0000CB   375 _EXEN2	=	0x00cb
                           0000CC   376 _TCLK	=	0x00cc
                           0000CD   377 _RCLK	=	0x00cd
                           0000CE   378 _EXF2	=	0x00ce
                           0000CF   379 _TF2	=	0x00cf
                           0000D0   380 _P	=	0x00d0
                           0000D1   381 _FL	=	0x00d1
                           0000D2   382 _OV	=	0x00d2
                           0000D3   383 _RS0	=	0x00d3
                           0000D4   384 _RS1	=	0x00d4
                           0000D5   385 _F0	=	0x00d5
                           0000D6   386 _AC	=	0x00d6
                           0000D7   387 _CY	=	0x00d7
                                    388 ;--------------------------------------------------------
                                    389 ; overlayable register banks
                                    390 ;--------------------------------------------------------
                                    391 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        392 	.ds 8
                                    393 ;--------------------------------------------------------
                                    394 ; internal ram data
                                    395 ;--------------------------------------------------------
                                    396 	.area DSEG    (DATA)
      000000                        397 _colloc::
      000000                        398 	.ds 1
      000001                        399 _rowloc::
      000001                        400 	.ds 1
      000002                        401 _lcd_address::
      000002                        402 	.ds 2
      000004                        403 _seg7_address::
      000004                        404 	.ds 2
      000006                        405 _read_ram_address::
      000006                        406 	.ds 2
      000008                        407 _cursor_x::
      000008                        408 	.ds 2
      00000A                        409 _cursor_y::
      00000A                        410 	.ds 2
      00000C                        411 _textsize::
      00000C                        412 	.ds 1
      00000D                        413 _rotation::
      00000D                        414 	.ds 1
      00000E                        415 _textcolor::
      00000E                        416 	.ds 2
      000010                        417 _textbgcolor::
      000010                        418 	.ds 2
      000012                        419 __width::
      000012                        420 	.ds 2
      000014                        421 __height::
      000014                        422 	.ds 2
      000016                        423 _key::
      000016                        424 	.ds 1
      000017                        425 _input16::
      000017                        426 	.ds 2
      000019                        427 _input8::
      000019                        428 	.ds 1
      00001A                        429 _dataType::
      00001A                        430 	.ds 1
      00001B                        431 _dataSize::
      00001B                        432 	.ds 2
      00001D                        433 _validInput::
      00001D                        434 	.ds 1
      00001E                        435 _dataEnd::
      00001E                        436 	.ds 1
      00001F                        437 _scrollEnd::
      00001F                        438 	.ds 1
      000020                        439 _data::
      000020                        440 	.ds 1
      000021                        441 _addr0::
      000021                        442 	.ds 2
      000023                        443 _addr1::
      000023                        444 	.ds 2
      000025                        445 _addr2::
      000025                        446 	.ds 2
      000027                        447 _addr3::
      000027                        448 	.ds 2
      000029                        449 _currAddr0::
      000029                        450 	.ds 2
      00002B                        451 _currAddr1::
      00002B                        452 	.ds 2
      00002D                        453 _byte::
      00002D                        454 	.ds 2
      00002F                        455 _byte1::
      00002F                        456 	.ds 2
      000031                        457 _ASCII::
      000031                        458 	.ds 1
      000032                        459 _count::
      000032                        460 	.ds 2
      000034                        461 _endAddrCalc::
      000034                        462 	.ds 4
      000038                        463 _xCursorHold::
      000038                        464 	.ds 1
      000039                        465 _yCursorHold::
      000039                        466 	.ds 1
      00003A                        467 _textSizeHold::
      00003A                        468 	.ds 1
      00003B                        469 _x::
      00003B                        470 	.ds 1
      00003C                        471 _y::
      00003C                        472 	.ds 1
      00003D                        473 _ts::
      00003D                        474 	.ds 1
      00003E                        475 _dataRate::
      00003E                        476 	.ds 1
      00003F                        477 _dataBits::
      00003F                        478 	.ds 1
      000040                        479 _parity::
      000040                        480 	.ds 1
      000041                        481 _received_byte::
      000041                        482 	.ds 1
      000042                        483 _received_flag::
      000042                        484 	.ds 1
      000043                        485 _rtcWrite_PARM_2:
      000043                        486 	.ds 1
      000044                        487 _drawPixel_PARM_2:
      000044                        488 	.ds 2
      000046                        489 _drawPixel_PARM_3:
      000046                        490 	.ds 2
      000048                        491 _fillRect_PARM_2:
      000048                        492 	.ds 2
      00004A                        493 _fillRect_PARM_3:
      00004A                        494 	.ds 2
      00004C                        495 _fillRect_PARM_4:
      00004C                        496 	.ds 2
      00004E                        497 _fillRect_PARM_5:
      00004E                        498 	.ds 2
      000050                        499 _drawChar_PARM_2:
      000050                        500 	.ds 2
      000052                        501 _drawChar_PARM_3:
      000052                        502 	.ds 1
      000053                        503 _drawChar_PARM_4:
      000053                        504 	.ds 2
      000055                        505 _drawChar_PARM_5:
      000055                        506 	.ds 2
      000057                        507 _drawChar_PARM_6:
      000057                        508 	.ds 1
      000058                        509 _drawChar_x_65536_311:
      000058                        510 	.ds 2
      00005A                        511 _drawChar_line_196608_315:
      00005A                        512 	.ds 1
      00005B                        513 _drawChar_sloc1_1_0:
      00005B                        514 	.ds 2
                                    515 ;--------------------------------------------------------
                                    516 ; overlayable items in internal ram 
                                    517 ;--------------------------------------------------------
                                    518 	.area	OSEG    (OVR,DATA)
                                    519 	.area	OSEG    (OVR,DATA)
      000000                        520 _writeRegister8_PARM_2:
      000000                        521 	.ds 1
                                    522 	.area	OSEG    (OVR,DATA)
      000000                        523 _writeRegister16_PARM_2:
      000000                        524 	.ds 2
                                    525 	.area	OSEG    (OVR,DATA)
                                    526 	.area	OSEG    (OVR,DATA)
      000000                        527 _rtcCmd_PARM_2:
      000000                        528 	.ds 1
                                    529 	.area	OSEG    (OVR,DATA)
      000000                        530 _setCursor_PARM_2:
      000000                        531 	.ds 2
                                    532 	.area	OSEG    (OVR,DATA)
      000000                        533 _setTextColor_PARM_2:
      000000                        534 	.ds 2
                                    535 	.area	OSEG    (OVR,DATA)
                                    536 	.area	OSEG    (OVR,DATA)
      000000                        537 _setAddress_PARM_2:
      000000                        538 	.ds 2
      000002                        539 _setAddress_PARM_3:
      000002                        540 	.ds 2
      000004                        541 _setAddress_PARM_4:
      000004                        542 	.ds 2
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 	.area	OSEG    (OVR,DATA)
                                    545 	.area	OSEG    (OVR,DATA)
      000000                        546 _RAMwrite_PARM_2:
      000000                        547 	.ds 1
                                    548 	.area	OSEG    (OVR,DATA)
                                    549 	.area	OSEG    (OVR,DATA)
                                    550 ;--------------------------------------------------------
                                    551 ; Stack segment in internal ram 
                                    552 ;--------------------------------------------------------
                                    553 	.area	SSEG
      000000                        554 __start__stack:
      000000                        555 	.ds	1
                                    556 
                                    557 ;--------------------------------------------------------
                                    558 ; indirectly addressable internal ram data
                                    559 ;--------------------------------------------------------
                                    560 	.area ISEG    (DATA)
                                    561 ;--------------------------------------------------------
                                    562 ; absolute internal ram data
                                    563 ;--------------------------------------------------------
                                    564 	.area IABS    (ABS,DATA)
                                    565 	.area IABS    (ABS,DATA)
                                    566 ;--------------------------------------------------------
                                    567 ; bit data
                                    568 ;--------------------------------------------------------
                                    569 	.area BSEG    (BIT)
      000000                        570 _drawChar_sloc0_1_0:
      000000                        571 	.ds 1
                                    572 ;--------------------------------------------------------
                                    573 ; paged external ram data
                                    574 ;--------------------------------------------------------
                                    575 	.area PSEG    (PAG,XDATA)
                                    576 ;--------------------------------------------------------
                                    577 ; external ram data
                                    578 ;--------------------------------------------------------
                                    579 	.area XSEG    (XDATA)
                                    580 ;--------------------------------------------------------
                                    581 ; absolute external ram data
                                    582 ;--------------------------------------------------------
                                    583 	.area XABS    (ABS,XDATA)
                                    584 ;--------------------------------------------------------
                                    585 ; external initialized ram data
                                    586 ;--------------------------------------------------------
                                    587 	.area XISEG   (XDATA)
                                    588 	.area HOME    (CODE)
                                    589 	.area GSINIT0 (CODE)
                                    590 	.area GSINIT1 (CODE)
                                    591 	.area GSINIT2 (CODE)
                                    592 	.area GSINIT3 (CODE)
                                    593 	.area GSINIT4 (CODE)
                                    594 	.area GSINIT5 (CODE)
                                    595 	.area GSINIT  (CODE)
                                    596 	.area GSFINAL (CODE)
                                    597 	.area CSEG    (CODE)
                                    598 ;--------------------------------------------------------
                                    599 ; interrupt vector 
                                    600 ;--------------------------------------------------------
                                    601 	.area HOME    (CODE)
      000000                        602 __interrupt_vect:
      000000 02r00r00         [24]  603 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  604 	reti
      000004                        605 	.ds	7
      00000B 32               [24]  606 	reti
      00000C                        607 	.ds	7
      000013 32               [24]  608 	reti
      000014                        609 	.ds	7
      00001B 32               [24]  610 	reti
      00001C                        611 	.ds	7
      000023 02r00r00         [24]  612 	ljmp	_ISR_receive
                                    613 ;--------------------------------------------------------
                                    614 ; global & static initialisations
                                    615 ;--------------------------------------------------------
                                    616 	.area HOME    (CODE)
                                    617 	.area GSINIT  (CODE)
                                    618 	.area GSFINAL (CODE)
                                    619 	.area GSINIT  (CODE)
                                    620 	.globl __sdcc_gsinit_startup
                                    621 	.globl __sdcc_program_startup
                                    622 	.globl __start__stack
                                    623 	.globl __mcs51_genXINIT
                                    624 	.globl __mcs51_genXRAMCLEAR
                                    625 	.globl __mcs51_genRAMCLEAR
                                    626 ;	ecen4330lab7.c:39: __xdata unsigned char* lcd_address = (unsigned char __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  627 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  628 	mov	(_lcd_address + 1),#0x40
                                    629 ;	ecen4330lab7.c:40: __xdata unsigned char* seg7_address = (unsigned char __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  630 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  631 	mov	(_seg7_address + 1),#0x80
                                    632 ;	ecen4330lab7.c:103: unsigned int count = 0;
      00000C E4               [12]  633 	clr	a
      00000D F5*32            [12]  634 	mov	_count,a
      00000F F5*33            [12]  635 	mov	(_count + 1),a
                                    636 ;	ecen4330lab7.c:107: unsigned char dataRate = 3;
      000011 75*3E 03         [24]  637 	mov	_dataRate,#0x03
                                    638 ;	ecen4330lab7.c:108: unsigned char dataBits = 0;
                                    639 ;	1-genFromRTrack replaced	mov	_dataBits,#0x00
      000014 F5*3F            [12]  640 	mov	_dataBits,a
                                    641 ;	ecen4330lab7.c:109: unsigned char parity = 2;
      000016 75*40 02         [24]  642 	mov	_parity,#0x02
                                    643 ;	ecen4330lab7.c:111: volatile unsigned char received_byte = 0;
                                    644 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000019 F5*41            [12]  645 	mov	_received_byte,a
                                    646 ;	ecen4330lab7.c:112: volatile unsigned char received_flag = 0;
                                    647 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      00001B F5*42            [12]  648 	mov	_received_flag,a
                                    649 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  650 	ljmp	__sdcc_program_startup
                                    651 ;--------------------------------------------------------
                                    652 ; Home
                                    653 ;--------------------------------------------------------
                                    654 	.area HOME    (CODE)
                                    655 	.area HOME    (CODE)
      000026                        656 __sdcc_program_startup:
      000026 02r26r6E         [24]  657 	ljmp	_main
                                    658 ;	return from main will return to caller
                                    659 ;--------------------------------------------------------
                                    660 ; code
                                    661 ;--------------------------------------------------------
                                    662 	.area CSEG    (CODE)
                                    663 ;------------------------------------------------------------
                                    664 ;Allocation info for local variables in function 'ISR_receive'
                                    665 ;------------------------------------------------------------
                                    666 ;	ecen4330lab7.c:135: void ISR_receive() __interrupt (4) {
                                    667 ;	-----------------------------------------
                                    668 ;	 function ISR_receive
                                    669 ;	-----------------------------------------
      000000                        670 _ISR_receive:
                           000007   671 	ar7 = 0x07
                           000006   672 	ar6 = 0x06
                           000005   673 	ar5 = 0x05
                           000004   674 	ar4 = 0x04
                           000003   675 	ar3 = 0x03
                           000002   676 	ar2 = 0x02
                           000001   677 	ar1 = 0x01
                           000000   678 	ar0 = 0x00
                                    679 ;	ecen4330lab7.c:136: if (RI == 1){
      000000 30 98 08         [24]  680 	jnb	_RI,00103$
                                    681 ;	ecen4330lab7.c:137: received_byte = SBUF;
      000003 85 99*41         [24]  682 	mov	_received_byte,_SBUF
                                    683 ;	ecen4330lab7.c:138: RI = 0;
                                    684 ;	assignBit
      000006 C2 98            [12]  685 	clr	_RI
                                    686 ;	ecen4330lab7.c:139: received_flag = 1;
      000008 75*42 01         [24]  687 	mov	_received_flag,#0x01
      00000B                        688 00103$:
                                    689 ;	ecen4330lab7.c:141: }
      00000B 32               [24]  690 	reti
                                    691 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    692 ;	eliminated unneeded push/pop not_psw
                                    693 ;	eliminated unneeded push/pop dpl
                                    694 ;	eliminated unneeded push/pop dph
                                    695 ;	eliminated unneeded push/pop b
                                    696 ;	eliminated unneeded push/pop acc
                                    697 ;------------------------------------------------------------
                                    698 ;Allocation info for local variables in function 'UART_Init'
                                    699 ;------------------------------------------------------------
                                    700 ;	ecen4330lab7.c:149: void UART_Init(){
                                    701 ;	-----------------------------------------
                                    702 ;	 function UART_Init
                                    703 ;	-----------------------------------------
      00000C                        704 _UART_Init:
                                    705 ;	ecen4330lab7.c:150: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      00000C 75 98 50         [24]  706 	mov	_SCON,#0x50
                                    707 ;	ecen4330lab7.c:151: PCON = 0x00;
      00000F 75 87 00         [24]  708 	mov	_PCON,#0x00
                                    709 ;	ecen4330lab7.c:152: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      000012 75 89 20         [24]  710 	mov	_TMOD,#0x20
                                    711 ;	ecen4330lab7.c:153: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      000015 75 8D FD         [24]  712 	mov	_TH1,#0xfd
                                    713 ;	ecen4330lab7.c:154: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    714 ;	assignBit
      000018 D2 8E            [12]  715 	setb	_TR1
                                    716 ;	ecen4330lab7.c:155: ES  = 1;      // Enable Serial Interrupt
                                    717 ;	assignBit
      00001A D2 AC            [12]  718 	setb	_ES
                                    719 ;	ecen4330lab7.c:156: EA  = 1;      // Enable Global Interrupt bit
                                    720 ;	assignBit
      00001C D2 AF            [12]  721 	setb	_EA
                                    722 ;	ecen4330lab7.c:157: }
      00001E 22               [24]  723 	ret
                                    724 ;------------------------------------------------------------
                                    725 ;Allocation info for local variables in function 'UART_transmit'
                                    726 ;------------------------------------------------------------
                                    727 ;	ecen4330lab7.c:165: void UART_transmit(){
                                    728 ;	-----------------------------------------
                                    729 ;	 function UART_transmit
                                    730 ;	-----------------------------------------
      00001F                        731 _UART_transmit:
                                    732 ;	ecen4330lab7.c:166: SBUF = byte;
      00001F 85*2D 99         [24]  733 	mov	_SBUF,_byte
                                    734 ;	ecen4330lab7.c:167: while(TI == 1);
      000022                        735 00101$:
      000022 20 99 FD         [24]  736 	jb	_TI,00101$
                                    737 ;	ecen4330lab7.c:168: TI = 0;
                                    738 ;	assignBit
      000025 C2 99            [12]  739 	clr	_TI
                                    740 ;	ecen4330lab7.c:169: }
      000027 22               [24]  741 	ret
                                    742 ;------------------------------------------------------------
                                    743 ;Allocation info for local variables in function 'delay'
                                    744 ;------------------------------------------------------------
                                    745 ;d                         Allocated to registers r6 r7 
                                    746 ;i                         Allocated to registers r4 r5 
                                    747 ;j                         Allocated to registers r2 r3 
                                    748 ;------------------------------------------------------------
                                    749 ;	ecen4330lab7.c:203: void delay (int d) /// x 1ms
                                    750 ;	-----------------------------------------
                                    751 ;	 function delay
                                    752 ;	-----------------------------------------
      000028                        753 _delay:
      000028 AE 82            [24]  754 	mov	r6,dpl
      00002A AF 83            [24]  755 	mov	r7,dph
                                    756 ;	ecen4330lab7.c:206: for (i=0;i<d;i++)
      00002C 7C 00            [12]  757 	mov	r4,#0x00
      00002E 7D 00            [12]  758 	mov	r5,#0x00
      000030                        759 00107$:
      000030 C3               [12]  760 	clr	c
      000031 EC               [12]  761 	mov	a,r4
      000032 9E               [12]  762 	subb	a,r6
      000033 ED               [12]  763 	mov	a,r5
      000034 64 80            [12]  764 	xrl	a,#0x80
      000036 8F F0            [24]  765 	mov	b,r7
      000038 63 F0 80         [24]  766 	xrl	b,#0x80
      00003B 95 F0            [12]  767 	subb	a,b
      00003D 50 14            [24]  768 	jnc	00109$
                                    769 ;	ecen4330lab7.c:208: for (j=0;j<1000;j++);
      00003F 7A E8            [12]  770 	mov	r2,#0xe8
      000041 7B 03            [12]  771 	mov	r3,#0x03
      000043                        772 00105$:
      000043 1A               [12]  773 	dec	r2
      000044 BA FF 01         [24]  774 	cjne	r2,#0xff,00130$
      000047 1B               [12]  775 	dec	r3
      000048                        776 00130$:
      000048 EA               [12]  777 	mov	a,r2
      000049 4B               [12]  778 	orl	a,r3
      00004A 70 F7            [24]  779 	jnz	00105$
                                    780 ;	ecen4330lab7.c:206: for (i=0;i<d;i++)
      00004C 0C               [12]  781 	inc	r4
      00004D BC 00 E0         [24]  782 	cjne	r4,#0x00,00107$
      000050 0D               [12]  783 	inc	r5
      000051 80 DD            [24]  784 	sjmp	00107$
      000053                        785 00109$:
                                    786 ;	ecen4330lab7.c:210: }
      000053 22               [24]  787 	ret
                                    788 ;------------------------------------------------------------
                                    789 ;Allocation info for local variables in function 'writeRegister8'
                                    790 ;------------------------------------------------------------
                                    791 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    792 ;a                         Allocated to registers r7 
                                    793 ;------------------------------------------------------------
                                    794 ;	ecen4330lab7.c:218: void writeRegister8(u8 a, u8 d) {
                                    795 ;	-----------------------------------------
                                    796 ;	 function writeRegister8
                                    797 ;	-----------------------------------------
      000054                        798 _writeRegister8:
      000054 AF 82            [24]  799 	mov	r7,dpl
                                    800 ;	ecen4330lab7.c:219: CD = __CMD__;
                                    801 ;	assignBit
      000056 C2 B5            [12]  802 	clr	_P3_5
                                    803 ;	ecen4330lab7.c:220: write8(a);
                                    804 ;	assignBit
      000058 D2 B4            [12]  805 	setb	_P3_4
      00005A 85*02 82         [24]  806 	mov	dpl,_lcd_address
      00005D 85*03 83         [24]  807 	mov	dph,(_lcd_address + 1)
      000060 EF               [12]  808 	mov	a,r7
      000061 F0               [24]  809 	movx	@dptr,a
                                    810 ;	assignBit
      000062 C2 B4            [12]  811 	clr	_P3_4
                                    812 ;	ecen4330lab7.c:221: CD = __DATA__;
                                    813 ;	assignBit
      000064 D2 B5            [12]  814 	setb	_P3_5
                                    815 ;	ecen4330lab7.c:222: write8(d);
                                    816 ;	assignBit
      000066 D2 B4            [12]  817 	setb	_P3_4
      000068 85*02 82         [24]  818 	mov	dpl,_lcd_address
      00006B 85*03 83         [24]  819 	mov	dph,(_lcd_address + 1)
      00006E E5*00            [12]  820 	mov	a,_writeRegister8_PARM_2
      000070 F0               [24]  821 	movx	@dptr,a
                                    822 ;	assignBit
      000071 C2 B4            [12]  823 	clr	_P3_4
                                    824 ;	ecen4330lab7.c:223: }
      000073 22               [24]  825 	ret
                                    826 ;------------------------------------------------------------
                                    827 ;Allocation info for local variables in function 'writeRegister16'
                                    828 ;------------------------------------------------------------
                                    829 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    830 ;a                         Allocated to registers r6 r7 
                                    831 ;hi                        Allocated to registers r6 r7 
                                    832 ;lo                        Allocated to registers r4 r5 
                                    833 ;------------------------------------------------------------
                                    834 ;	ecen4330lab7.c:231: void writeRegister16(u16 a, u16 d){
                                    835 ;	-----------------------------------------
                                    836 ;	 function writeRegister16
                                    837 ;	-----------------------------------------
      000074                        838 _writeRegister16:
      000074 AE 82            [24]  839 	mov	r6,dpl
      000076 AF 83            [24]  840 	mov	r7,dph
                                    841 ;	ecen4330lab7.c:233: hi = (a) >> 8;
      000078 8F 04            [24]  842 	mov	ar4,r7
                                    843 ;	ecen4330lab7.c:234: lo = (a);
                                    844 ;	ecen4330lab7.c:235: write8Reg(hi);
                                    845 ;	assignBit
      00007A C2 B5            [12]  846 	clr	_P3_5
                                    847 ;	assignBit
      00007C D2 B4            [12]  848 	setb	_P3_4
      00007E 85*02 82         [24]  849 	mov	dpl,_lcd_address
      000081 85*03 83         [24]  850 	mov	dph,(_lcd_address + 1)
      000084 EC               [12]  851 	mov	a,r4
      000085 F0               [24]  852 	movx	@dptr,a
                                    853 ;	assignBit
      000086 C2 B4            [12]  854 	clr	_P3_4
                                    855 ;	ecen4330lab7.c:236: write8Reg(lo);
                                    856 ;	assignBit
      000088 C2 B5            [12]  857 	clr	_P3_5
                                    858 ;	assignBit
      00008A D2 B4            [12]  859 	setb	_P3_4
      00008C 85*02 82         [24]  860 	mov	dpl,_lcd_address
      00008F 85*03 83         [24]  861 	mov	dph,(_lcd_address + 1)
      000092 EE               [12]  862 	mov	a,r6
      000093 F0               [24]  863 	movx	@dptr,a
                                    864 ;	assignBit
      000094 C2 B4            [12]  865 	clr	_P3_4
                                    866 ;	ecen4330lab7.c:237: hi = (d) >> 8;
      000096 AE*01            [24]  867 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                    868 ;	ecen4330lab7.c:238: lo = (d);
      000098 AC*00            [24]  869 	mov	r4,_writeRegister16_PARM_2
                                    870 ;	ecen4330lab7.c:239: CD = 1 ;
                                    871 ;	assignBit
      00009A D2 B5            [12]  872 	setb	_P3_5
                                    873 ;	ecen4330lab7.c:240: write8Data(hi);
                                    874 ;	assignBit
      00009C D2 B5            [12]  875 	setb	_P3_5
                                    876 ;	assignBit
      00009E D2 B4            [12]  877 	setb	_P3_4
      0000A0 85*02 82         [24]  878 	mov	dpl,_lcd_address
      0000A3 85*03 83         [24]  879 	mov	dph,(_lcd_address + 1)
      0000A6 EE               [12]  880 	mov	a,r6
      0000A7 F0               [24]  881 	movx	@dptr,a
                                    882 ;	assignBit
      0000A8 C2 B4            [12]  883 	clr	_P3_4
                                    884 ;	ecen4330lab7.c:241: write8Data(lo);
                                    885 ;	assignBit
      0000AA D2 B5            [12]  886 	setb	_P3_5
                                    887 ;	assignBit
      0000AC D2 B4            [12]  888 	setb	_P3_4
      0000AE 85*02 82         [24]  889 	mov	dpl,_lcd_address
      0000B1 85*03 83         [24]  890 	mov	dph,(_lcd_address + 1)
      0000B4 EC               [12]  891 	mov	a,r4
      0000B5 F0               [24]  892 	movx	@dptr,a
                                    893 ;	assignBit
      0000B6 C2 B4            [12]  894 	clr	_P3_4
                                    895 ;	ecen4330lab7.c:242: }
      0000B8 22               [24]  896 	ret
                                    897 ;------------------------------------------------------------
                                    898 ;Allocation info for local variables in function 'rtcInit'
                                    899 ;------------------------------------------------------------
                                    900 ;i                         Allocated with name '_rtcInit_i_65536_63'
                                    901 ;------------------------------------------------------------
                                    902 ;	ecen4330lab7.c:264: void rtcInit(void) {
                                    903 ;	-----------------------------------------
                                    904 ;	 function rtcInit
                                    905 ;	-----------------------------------------
      0000B9                        906 _rtcInit:
                                    907 ;	ecen4330lab7.c:267: rtcCmd(__REG_F__, __HR_24__|__STOP__|__RESET__);  // stop and reset
      0000B9 75*00 07         [24]  908 	mov	_rtcCmd_PARM_2,#0x07
      0000BC 90 00 0F         [24]  909 	mov	dptr,#0x000f
      0000BF 12r00rFF         [24]  910 	lcall	_rtcCmd
                                    911 ;	ecen4330lab7.c:270: for (i = __S1_REG__; i < __REG_D__;i++) {
      0000C2 7E 00            [12]  912 	mov	r6,#0x00
      0000C4 7F 00            [12]  913 	mov	r7,#0x00
      0000C6                        914 00102$:
                                    915 ;	ecen4330lab7.c:271: rtcWrite(i, 0x00);
      0000C6 75*43 00         [24]  916 	mov	_rtcWrite_PARM_2,#0x00
      0000C9 8E 82            [24]  917 	mov	dpl,r6
      0000CB 8F 83            [24]  918 	mov	dph,r7
      0000CD C0 07            [24]  919 	push	ar7
      0000CF C0 06            [24]  920 	push	ar6
      0000D1 12r01r08         [24]  921 	lcall	_rtcWrite
      0000D4 D0 06            [24]  922 	pop	ar6
      0000D6 D0 07            [24]  923 	pop	ar7
                                    924 ;	ecen4330lab7.c:270: for (i = __S1_REG__; i < __REG_D__;i++) {
      0000D8 0E               [12]  925 	inc	r6
      0000D9 BE 00 01         [24]  926 	cjne	r6,#0x00,00115$
      0000DC 0F               [12]  927 	inc	r7
      0000DD                        928 00115$:
      0000DD C3               [12]  929 	clr	c
      0000DE EE               [12]  930 	mov	a,r6
      0000DF 94 0D            [12]  931 	subb	a,#0x0d
      0000E1 EF               [12]  932 	mov	a,r7
      0000E2 94 00            [12]  933 	subb	a,#0x00
      0000E4 40 E0            [24]  934 	jc	00102$
                                    935 ;	ecen4330lab7.c:274: rtcCmd(__REG_F__, __HR_24__);
      0000E6 75*00 04         [24]  936 	mov	_rtcCmd_PARM_2,#0x04
      0000E9 90 00 0F         [24]  937 	mov	dptr,#0x000f
                                    938 ;	ecen4330lab7.c:275: }
      0000EC 02r00rFF         [24]  939 	ljmp	_rtcCmd
                                    940 ;------------------------------------------------------------
                                    941 ;Allocation info for local variables in function 'rtcBusy'
                                    942 ;------------------------------------------------------------
                                    943 ;__1310720001              Allocated to registers 
                                    944 ;map_address               Allocated to registers 
                                    945 ;__1310720002              Allocated to registers 
                                    946 ;map_address               Allocated to registers 
                                    947 ;------------------------------------------------------------
                                    948 ;	ecen4330lab7.c:283: void rtcBusy(void) {
                                    949 ;	-----------------------------------------
                                    950 ;	 function rtcBusy
                                    951 ;	-----------------------------------------
      0000EF                        952 _rtcBusy:
                                    953 ;	ecen4330lab7.c:285: while((ioread8(map_address) & 0x02));
      0000EF                        954 00101$:
                                    955 ;	ecen4330lab7.c:191: IOM = 1;                            
                                    956 ;	assignBit
      0000EF D2 B4            [12]  957 	setb	_P3_4
                                    958 ;	ecen4330lab7.c:192: data = *map_address;
      0000F1 90 00 0D         [24]  959 	mov	dptr,#0x000d
      0000F4 E0               [24]  960 	movx	a,@dptr
      0000F5 F5*20            [12]  961 	mov	_data,a
                                    962 ;	ecen4330lab7.c:193: IOM = 0;    
                                    963 ;	assignBit
      0000F7 C2 B4            [12]  964 	clr	_P3_4
                                    965 ;	ecen4330lab7.c:194: return data;   
      0000F9 E5*20            [12]  966 	mov	a,_data
                                    967 ;	ecen4330lab7.c:285: while((ioread8(map_address) & 0x02));
      0000FB 20 E1 F1         [24]  968 	jb	acc.1,00101$
                                    969 ;	ecen4330lab7.c:286: }
      0000FE 22               [24]  970 	ret
                                    971 ;------------------------------------------------------------
                                    972 ;Allocation info for local variables in function 'rtcCmd'
                                    973 ;------------------------------------------------------------
                                    974 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                    975 ;addr                      Allocated to registers r6 r7 
                                    976 ;map_address               Allocated to registers 
                                    977 ;__1310720004              Allocated to registers 
                                    978 ;__1310720005              Allocated to registers r7 
                                    979 ;map_address               Allocated to registers 
                                    980 ;d                         Allocated to registers 
                                    981 ;------------------------------------------------------------
                                    982 ;	ecen4330lab7.c:294: inline void rtcCmd(unsigned int addr, unsigned char d) {
                                    983 ;	-----------------------------------------
                                    984 ;	 function rtcCmd
                                    985 ;	-----------------------------------------
      0000FF                        986 _rtcCmd:
                                    987 ;	ecen4330lab7.c:295: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                    988 ;	ecen4330lab7.c:296: iowrite8(map_address, d);
      0000FF AF*00            [24]  989 	mov	r7,_rtcCmd_PARM_2
                                    990 ;	ecen4330lab7.c:178: IOM = 1;
                                    991 ;	assignBit
      000101 D2 B4            [12]  992 	setb	_P3_4
                                    993 ;	ecen4330lab7.c:179: *map_address = d;
      000103 EF               [12]  994 	mov	a,r7
      000104 F0               [24]  995 	movx	@dptr,a
                                    996 ;	ecen4330lab7.c:180: IOM = 0;
                                    997 ;	assignBit
      000105 C2 B4            [12]  998 	clr	_P3_4
                                    999 ;	ecen4330lab7.c:296: iowrite8(map_address, d);
                                   1000 ;	ecen4330lab7.c:297: }
      000107 22               [24] 1001 	ret
                                   1002 ;------------------------------------------------------------
                                   1003 ;Allocation info for local variables in function 'rtcWrite'
                                   1004 ;------------------------------------------------------------
                                   1005 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1006 ;addr                      Allocated to registers r6 r7 
                                   1007 ;map_address               Allocated to registers r6 r7 
                                   1008 ;__1310720007              Allocated to registers 
                                   1009 ;__1310720008              Allocated to registers 
                                   1010 ;addr                      Allocated to registers 
                                   1011 ;d                         Allocated to registers 
                                   1012 ;map_address               Allocated to registers 
                                   1013 ;__1310720004              Allocated to registers 
                                   1014 ;__1310720005              Allocated to registers 
                                   1015 ;map_address               Allocated to registers 
                                   1016 ;d                         Allocated to registers 
                                   1017 ;__1310720010              Allocated to registers 
                                   1018 ;__1310720011              Allocated to registers 
                                   1019 ;map_address               Allocated to registers 
                                   1020 ;d                         Allocated to registers 
                                   1021 ;__1310720013              Allocated to registers 
                                   1022 ;__1310720014              Allocated to registers r7 
                                   1023 ;addr                      Allocated to registers 
                                   1024 ;d                         Allocated to registers 
                                   1025 ;map_address               Allocated to registers 
                                   1026 ;__1310720004              Allocated to registers 
                                   1027 ;__1310720005              Allocated to registers 
                                   1028 ;map_address               Allocated to registers 
                                   1029 ;d                         Allocated to registers 
                                   1030 ;------------------------------------------------------------
                                   1031 ;	ecen4330lab7.c:305: inline void rtcWrite(unsigned int addr, unsigned char d) {
                                   1032 ;	-----------------------------------------
                                   1033 ;	 function rtcWrite
                                   1034 ;	-----------------------------------------
      000108                       1035 _rtcWrite:
      000108 AE 82            [24] 1036 	mov	r6,dpl
      00010A AF 83            [24] 1037 	mov	r7,dph
                                   1038 ;	ecen4330lab7.c:306: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1039 ;	ecen4330lab7.c:178: IOM = 1;
                                   1040 ;	assignBit
      00010C D2 B4            [12] 1041 	setb	_P3_4
                                   1042 ;	ecen4330lab7.c:179: *map_address = d;
      00010E 90 00 0D         [24] 1043 	mov	dptr,#0x000d
      000111 74 01            [12] 1044 	mov	a,#0x01
      000113 F0               [24] 1045 	movx	@dptr,a
                                   1046 ;	ecen4330lab7.c:180: IOM = 0;
                                   1047 ;	assignBit
      000114 C2 B4            [12] 1048 	clr	_P3_4
                                   1049 ;	ecen4330lab7.c:308: rtcBusy();
      000116 C0 07            [24] 1050 	push	ar7
      000118 C0 06            [24] 1051 	push	ar6
      00011A 12r00rEF         [24] 1052 	lcall	_rtcBusy
      00011D D0 06            [24] 1053 	pop	ar6
      00011F D0 07            [24] 1054 	pop	ar7
                                   1055 ;	ecen4330lab7.c:178: IOM = 1;
                                   1056 ;	assignBit
      000121 D2 B4            [12] 1057 	setb	_P3_4
                                   1058 ;	ecen4330lab7.c:179: *map_address = d;
      000123 8E 82            [24] 1059 	mov	dpl,r6
      000125 8F 83            [24] 1060 	mov	dph,r7
      000127 E4               [12] 1061 	clr	a
      000128 F0               [24] 1062 	movx	@dptr,a
                                   1063 ;	ecen4330lab7.c:180: IOM = 0;
                                   1064 ;	assignBit
      000129 C2 B4            [12] 1065 	clr	_P3_4
                                   1066 ;	ecen4330lab7.c:310: rtcCmd(__REG_D__, d);
      00012B AF*43            [24] 1067 	mov	r7,_rtcWrite_PARM_2
                                   1068 ;	ecen4330lab7.c:178: IOM = 1;
                                   1069 ;	assignBit
      00012D D2 B4            [12] 1070 	setb	_P3_4
                                   1071 ;	ecen4330lab7.c:179: *map_address = d;
      00012F 90 00 0D         [24] 1072 	mov	dptr,#0x000d
      000132 EF               [12] 1073 	mov	a,r7
      000133 F0               [24] 1074 	movx	@dptr,a
                                   1075 ;	ecen4330lab7.c:180: IOM = 0;
                                   1076 ;	assignBit
      000134 C2 B4            [12] 1077 	clr	_P3_4
                                   1078 ;	ecen4330lab7.c:310: rtcCmd(__REG_D__, d);
                                   1079 ;	ecen4330lab7.c:311: }
      000136 22               [24] 1080 	ret
                                   1081 ;------------------------------------------------------------
                                   1082 ;Allocation info for local variables in function 'rtcRead'
                                   1083 ;------------------------------------------------------------
                                   1084 ;addr                      Allocated to registers r6 r7 
                                   1085 ;__1310720019              Allocated to registers 
                                   1086 ;map_address               Allocated to registers r6 r7 
                                   1087 ;__1310720016              Allocated to registers 
                                   1088 ;__1310720017              Allocated to registers 
                                   1089 ;addr                      Allocated to registers 
                                   1090 ;d                         Allocated to registers 
                                   1091 ;map_address               Allocated to registers 
                                   1092 ;__1310720004              Allocated to registers 
                                   1093 ;__1310720005              Allocated to registers 
                                   1094 ;map_address               Allocated to registers 
                                   1095 ;d                         Allocated to registers 
                                   1096 ;__1310720020              Allocated to registers 
                                   1097 ;map_address               Allocated to registers 
                                   1098 ;__1310720022              Allocated to registers 
                                   1099 ;__1310720023              Allocated to registers 
                                   1100 ;addr                      Allocated to registers 
                                   1101 ;d                         Allocated to registers 
                                   1102 ;map_address               Allocated to registers 
                                   1103 ;__1310720004              Allocated to registers 
                                   1104 ;__1310720005              Allocated to registers 
                                   1105 ;map_address               Allocated to registers 
                                   1106 ;d                         Allocated to registers 
                                   1107 ;------------------------------------------------------------
                                   1108 ;	ecen4330lab7.c:320: inline unsigned char rtcRead(unsigned int addr) {
                                   1109 ;	-----------------------------------------
                                   1110 ;	 function rtcRead
                                   1111 ;	-----------------------------------------
      000137                       1112 _rtcRead:
      000137 AE 82            [24] 1113 	mov	r6,dpl
      000139 AF 83            [24] 1114 	mov	r7,dph
                                   1115 ;	ecen4330lab7.c:321: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1116 ;	ecen4330lab7.c:178: IOM = 1;
                                   1117 ;	assignBit
      00013B D2 B4            [12] 1118 	setb	_P3_4
                                   1119 ;	ecen4330lab7.c:179: *map_address = d;
      00013D 90 00 0D         [24] 1120 	mov	dptr,#0x000d
      000140 74 01            [12] 1121 	mov	a,#0x01
      000142 F0               [24] 1122 	movx	@dptr,a
                                   1123 ;	ecen4330lab7.c:180: IOM = 0;
                                   1124 ;	assignBit
      000143 C2 B4            [12] 1125 	clr	_P3_4
                                   1126 ;	ecen4330lab7.c:323: rtcBusy();
      000145 C0 07            [24] 1127 	push	ar7
      000147 C0 06            [24] 1128 	push	ar6
      000149 12r00rEF         [24] 1129 	lcall	_rtcBusy
      00014C D0 06            [24] 1130 	pop	ar6
      00014E D0 07            [24] 1131 	pop	ar7
                                   1132 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1133 ;	assignBit
      000150 D2 B4            [12] 1134 	setb	_P3_4
                                   1135 ;	ecen4330lab7.c:192: data = *map_address;
      000152 8E 82            [24] 1136 	mov	dpl,r6
      000154 8F 83            [24] 1137 	mov	dph,r7
      000156 E0               [24] 1138 	movx	a,@dptr
      000157 F5*20            [12] 1139 	mov	_data,a
                                   1140 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1141 ;	assignBit
      000159 C2 B4            [12] 1142 	clr	_P3_4
                                   1143 ;	ecen4330lab7.c:194: return data;   
                                   1144 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      00015B E5*20            [12] 1145 	mov	a,_data
      00015D 54 0F            [12] 1146 	anl	a,#0x0f
      00015F 44 30            [12] 1147 	orl	a,#0x30
      000161 F5*20            [12] 1148 	mov	_data,a
                                   1149 ;	ecen4330lab7.c:178: IOM = 1;
                                   1150 ;	assignBit
      000163 D2 B4            [12] 1151 	setb	_P3_4
                                   1152 ;	ecen4330lab7.c:179: *map_address = d;
      000165 90 00 0D         [24] 1153 	mov	dptr,#0x000d
      000168 E4               [12] 1154 	clr	a
      000169 F0               [24] 1155 	movx	@dptr,a
                                   1156 ;	ecen4330lab7.c:180: IOM = 0;
                                   1157 ;	assignBit
      00016A C2 B4            [12] 1158 	clr	_P3_4
                                   1159 ;	ecen4330lab7.c:328: return data;
      00016C 85*20 82         [24] 1160 	mov	dpl,_data
                                   1161 ;	ecen4330lab7.c:329: }
      00016F 22               [24] 1162 	ret
                                   1163 ;------------------------------------------------------------
                                   1164 ;Allocation info for local variables in function 'rtcPrint'
                                   1165 ;------------------------------------------------------------
                                   1166 ;__1310720040              Allocated to registers 
                                   1167 ;__1310720037              Allocated to registers 
                                   1168 ;__1310720034              Allocated to registers 
                                   1169 ;__1310720031              Allocated to registers 
                                   1170 ;__1310720028              Allocated to registers 
                                   1171 ;__1310720025              Allocated to registers 
                                   1172 ;t                         Allocated to registers 
                                   1173 ;__1310720026              Allocated to registers 
                                   1174 ;addr                      Allocated to registers 
                                   1175 ;__1310720019              Allocated to registers 
                                   1176 ;map_address               Allocated to registers 
                                   1177 ;__1310720016              Allocated to registers 
                                   1178 ;__1310720017              Allocated to registers 
                                   1179 ;addr                      Allocated to registers 
                                   1180 ;d                         Allocated to registers 
                                   1181 ;map_address               Allocated to registers 
                                   1182 ;__1310720004              Allocated to registers 
                                   1183 ;__1310720005              Allocated to registers 
                                   1184 ;map_address               Allocated to registers 
                                   1185 ;d                         Allocated to registers 
                                   1186 ;__1310720020              Allocated to registers 
                                   1187 ;map_address               Allocated to registers 
                                   1188 ;__1310720022              Allocated to registers 
                                   1189 ;__1310720023              Allocated to registers 
                                   1190 ;addr                      Allocated to registers 
                                   1191 ;d                         Allocated to registers 
                                   1192 ;map_address               Allocated to registers 
                                   1193 ;__1310720004              Allocated to registers 
                                   1194 ;__1310720005              Allocated to registers 
                                   1195 ;map_address               Allocated to registers 
                                   1196 ;d                         Allocated to registers 
                                   1197 ;__1310720029              Allocated to registers 
                                   1198 ;addr                      Allocated to registers 
                                   1199 ;__1310720019              Allocated to registers 
                                   1200 ;map_address               Allocated to registers 
                                   1201 ;__1310720016              Allocated to registers 
                                   1202 ;__1310720017              Allocated to registers 
                                   1203 ;addr                      Allocated to registers 
                                   1204 ;d                         Allocated to registers 
                                   1205 ;map_address               Allocated to registers 
                                   1206 ;__1310720004              Allocated to registers 
                                   1207 ;__1310720005              Allocated to registers 
                                   1208 ;map_address               Allocated to registers 
                                   1209 ;d                         Allocated to registers 
                                   1210 ;__1310720020              Allocated to registers 
                                   1211 ;map_address               Allocated to registers 
                                   1212 ;__1310720022              Allocated to registers 
                                   1213 ;__1310720023              Allocated to registers 
                                   1214 ;addr                      Allocated to registers 
                                   1215 ;d                         Allocated to registers 
                                   1216 ;map_address               Allocated to registers 
                                   1217 ;__1310720004              Allocated to registers 
                                   1218 ;__1310720005              Allocated to registers 
                                   1219 ;map_address               Allocated to registers 
                                   1220 ;d                         Allocated to registers 
                                   1221 ;__1310720032              Allocated to registers 
                                   1222 ;addr                      Allocated to registers 
                                   1223 ;__1310720019              Allocated to registers 
                                   1224 ;map_address               Allocated to registers 
                                   1225 ;__1310720016              Allocated to registers 
                                   1226 ;__1310720017              Allocated to registers 
                                   1227 ;addr                      Allocated to registers 
                                   1228 ;d                         Allocated to registers 
                                   1229 ;map_address               Allocated to registers 
                                   1230 ;__1310720004              Allocated to registers 
                                   1231 ;__1310720005              Allocated to registers 
                                   1232 ;map_address               Allocated to registers 
                                   1233 ;d                         Allocated to registers 
                                   1234 ;__1310720020              Allocated to registers 
                                   1235 ;map_address               Allocated to registers 
                                   1236 ;__1310720022              Allocated to registers 
                                   1237 ;__1310720023              Allocated to registers 
                                   1238 ;addr                      Allocated to registers 
                                   1239 ;d                         Allocated to registers 
                                   1240 ;map_address               Allocated to registers 
                                   1241 ;__1310720004              Allocated to registers 
                                   1242 ;__1310720005              Allocated to registers 
                                   1243 ;map_address               Allocated to registers 
                                   1244 ;d                         Allocated to registers 
                                   1245 ;__1310720035              Allocated to registers 
                                   1246 ;addr                      Allocated to registers 
                                   1247 ;__1310720019              Allocated to registers 
                                   1248 ;map_address               Allocated to registers 
                                   1249 ;__1310720016              Allocated to registers 
                                   1250 ;__1310720017              Allocated to registers 
                                   1251 ;addr                      Allocated to registers 
                                   1252 ;d                         Allocated to registers 
                                   1253 ;map_address               Allocated to registers 
                                   1254 ;__1310720004              Allocated to registers 
                                   1255 ;__1310720005              Allocated to registers 
                                   1256 ;map_address               Allocated to registers 
                                   1257 ;d                         Allocated to registers 
                                   1258 ;__1310720020              Allocated to registers 
                                   1259 ;map_address               Allocated to registers 
                                   1260 ;__1310720022              Allocated to registers 
                                   1261 ;__1310720023              Allocated to registers 
                                   1262 ;addr                      Allocated to registers 
                                   1263 ;d                         Allocated to registers 
                                   1264 ;map_address               Allocated to registers 
                                   1265 ;__1310720004              Allocated to registers 
                                   1266 ;__1310720005              Allocated to registers 
                                   1267 ;map_address               Allocated to registers 
                                   1268 ;d                         Allocated to registers 
                                   1269 ;__1310720038              Allocated to registers 
                                   1270 ;addr                      Allocated to registers 
                                   1271 ;__1310720019              Allocated to registers 
                                   1272 ;map_address               Allocated to registers 
                                   1273 ;__1310720016              Allocated to registers 
                                   1274 ;__1310720017              Allocated to registers 
                                   1275 ;addr                      Allocated to registers 
                                   1276 ;d                         Allocated to registers 
                                   1277 ;map_address               Allocated to registers 
                                   1278 ;__1310720004              Allocated to registers 
                                   1279 ;__1310720005              Allocated to registers 
                                   1280 ;map_address               Allocated to registers 
                                   1281 ;d                         Allocated to registers 
                                   1282 ;__1310720020              Allocated to registers 
                                   1283 ;map_address               Allocated to registers 
                                   1284 ;__1310720022              Allocated to registers 
                                   1285 ;__1310720023              Allocated to registers 
                                   1286 ;addr                      Allocated to registers 
                                   1287 ;d                         Allocated to registers 
                                   1288 ;map_address               Allocated to registers 
                                   1289 ;__1310720004              Allocated to registers 
                                   1290 ;__1310720005              Allocated to registers 
                                   1291 ;map_address               Allocated to registers 
                                   1292 ;d                         Allocated to registers 
                                   1293 ;__1310720041              Allocated to registers 
                                   1294 ;addr                      Allocated to registers 
                                   1295 ;__1310720019              Allocated to registers 
                                   1296 ;map_address               Allocated to registers 
                                   1297 ;__1310720016              Allocated to registers 
                                   1298 ;__1310720017              Allocated to registers 
                                   1299 ;addr                      Allocated to registers 
                                   1300 ;d                         Allocated to registers 
                                   1301 ;map_address               Allocated to registers 
                                   1302 ;__1310720004              Allocated to registers 
                                   1303 ;__1310720005              Allocated to registers 
                                   1304 ;map_address               Allocated to registers 
                                   1305 ;d                         Allocated to registers 
                                   1306 ;__1310720020              Allocated to registers 
                                   1307 ;map_address               Allocated to registers 
                                   1308 ;__1310720022              Allocated to registers 
                                   1309 ;__1310720023              Allocated to registers 
                                   1310 ;addr                      Allocated to registers 
                                   1311 ;d                         Allocated to registers 
                                   1312 ;map_address               Allocated to registers 
                                   1313 ;__1310720004              Allocated to registers 
                                   1314 ;__1310720005              Allocated to registers 
                                   1315 ;map_address               Allocated to registers 
                                   1316 ;d                         Allocated to registers 
                                   1317 ;------------------------------------------------------------
                                   1318 ;	ecen4330lab7.c:338: void rtcPrint(void) {
                                   1319 ;	-----------------------------------------
                                   1320 ;	 function rtcPrint
                                   1321 ;	-----------------------------------------
      000170                       1322 _rtcPrint:
                                   1323 ;	ecen4330lab7.c:341: xCursorHold = cursor_x;
      000170 85*08*38         [24] 1324 	mov	_xCursorHold,_cursor_x
                                   1325 ;	ecen4330lab7.c:342: yCursorHold = cursor_y;
      000173 85*0A*39         [24] 1326 	mov	_yCursorHold,_cursor_y
                                   1327 ;	ecen4330lab7.c:343: textSizeHold = textsize;
      000176 85*0C*3A         [24] 1328 	mov	_textSizeHold,_textsize
                                   1329 ;	ecen4330lab7.c:345: setTextColor(GRAY, BLACK);
      000179 E4               [12] 1330 	clr	a
      00017A F5*00            [12] 1331 	mov	_setTextColor_PARM_2,a
      00017C F5*01            [12] 1332 	mov	(_setTextColor_PARM_2 + 1),a
      00017E 90 D6 BA         [24] 1333 	mov	dptr,#0xd6ba
      000181 12r02rD9         [24] 1334 	lcall	_setTextColor
                                   1335 ;	ecen4330lab7.c:346: setTextSize(2);
      000184 75 82 02         [24] 1336 	mov	dpl,#0x02
      000187 12r02rE6         [24] 1337 	lcall	_setTextSize
                                   1338 ;	ecen4330lab7.c:347: setCursor(132, 304);
      00018A 75*00 30         [24] 1339 	mov	_setCursor_PARM_2,#0x30
      00018D 75*01 01         [24] 1340 	mov	(_setCursor_PARM_2 + 1),#0x01
      000190 90 00 84         [24] 1341 	mov	dptr,#0x0084
      000193 12r02rCC         [24] 1342 	lcall	_setCursor
                                   1343 ;	ecen4330lab7.c:178: IOM = 1;
                                   1344 ;	assignBit
      000196 D2 B4            [12] 1345 	setb	_P3_4
                                   1346 ;	ecen4330lab7.c:179: *map_address = d;
      000198 90 00 0D         [24] 1347 	mov	dptr,#0x000d
      00019B 74 01            [12] 1348 	mov	a,#0x01
      00019D F0               [24] 1349 	movx	@dptr,a
                                   1350 ;	ecen4330lab7.c:180: IOM = 0;
                                   1351 ;	assignBit
      00019E C2 B4            [12] 1352 	clr	_P3_4
                                   1353 ;	ecen4330lab7.c:323: rtcBusy();
      0001A0 12r00rEF         [24] 1354 	lcall	_rtcBusy
                                   1355 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1356 ;	assignBit
      0001A3 D2 B4            [12] 1357 	setb	_P3_4
                                   1358 ;	ecen4330lab7.c:192: data = *map_address;
      0001A5 90 00 05         [24] 1359 	mov	dptr,#0x0005
      0001A8 E0               [24] 1360 	movx	a,@dptr
      0001A9 F5*20            [12] 1361 	mov	_data,a
                                   1362 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1363 ;	assignBit
      0001AB C2 B4            [12] 1364 	clr	_P3_4
                                   1365 ;	ecen4330lab7.c:194: return data;   
                                   1366 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001AD E5*20            [12] 1367 	mov	a,_data
      0001AF 54 0F            [12] 1368 	anl	a,#0x0f
      0001B1 44 30            [12] 1369 	orl	a,#0x30
      0001B3 F5*20            [12] 1370 	mov	_data,a
                                   1371 ;	ecen4330lab7.c:178: IOM = 1;
                                   1372 ;	assignBit
      0001B5 D2 B4            [12] 1373 	setb	_P3_4
                                   1374 ;	ecen4330lab7.c:179: *map_address = d;
      0001B7 90 00 0D         [24] 1375 	mov	dptr,#0x000d
      0001BA E4               [12] 1376 	clr	a
      0001BB F0               [24] 1377 	movx	@dptr,a
                                   1378 ;	ecen4330lab7.c:180: IOM = 0;
                                   1379 ;	assignBit
      0001BC C2 B4            [12] 1380 	clr	_P3_4
                                   1381 ;	ecen4330lab7.c:328: return data;
      0001BE 85*20 82         [24] 1382 	mov	dpl,_data
                                   1383 ;	ecen4330lab7.c:350: write(t);
      0001C1 12r09r62         [24] 1384 	lcall	_write
                                   1385 ;	ecen4330lab7.c:178: IOM = 1;
                                   1386 ;	assignBit
      0001C4 D2 B4            [12] 1387 	setb	_P3_4
                                   1388 ;	ecen4330lab7.c:179: *map_address = d;
      0001C6 90 00 0D         [24] 1389 	mov	dptr,#0x000d
      0001C9 74 01            [12] 1390 	mov	a,#0x01
      0001CB F0               [24] 1391 	movx	@dptr,a
                                   1392 ;	ecen4330lab7.c:180: IOM = 0;
                                   1393 ;	assignBit
      0001CC C2 B4            [12] 1394 	clr	_P3_4
                                   1395 ;	ecen4330lab7.c:323: rtcBusy();
      0001CE 12r00rEF         [24] 1396 	lcall	_rtcBusy
                                   1397 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1398 ;	assignBit
      0001D1 D2 B4            [12] 1399 	setb	_P3_4
                                   1400 ;	ecen4330lab7.c:192: data = *map_address;
      0001D3 90 00 04         [24] 1401 	mov	dptr,#0x0004
      0001D6 E0               [24] 1402 	movx	a,@dptr
      0001D7 F5*20            [12] 1403 	mov	_data,a
                                   1404 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1405 ;	assignBit
      0001D9 C2 B4            [12] 1406 	clr	_P3_4
                                   1407 ;	ecen4330lab7.c:194: return data;   
                                   1408 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001DB E5*20            [12] 1409 	mov	a,_data
      0001DD 54 0F            [12] 1410 	anl	a,#0x0f
      0001DF 44 30            [12] 1411 	orl	a,#0x30
      0001E1 F5*20            [12] 1412 	mov	_data,a
                                   1413 ;	ecen4330lab7.c:178: IOM = 1;
                                   1414 ;	assignBit
      0001E3 D2 B4            [12] 1415 	setb	_P3_4
                                   1416 ;	ecen4330lab7.c:179: *map_address = d;
      0001E5 90 00 0D         [24] 1417 	mov	dptr,#0x000d
      0001E8 E4               [12] 1418 	clr	a
      0001E9 F0               [24] 1419 	movx	@dptr,a
                                   1420 ;	ecen4330lab7.c:180: IOM = 0;
                                   1421 ;	assignBit
      0001EA C2 B4            [12] 1422 	clr	_P3_4
                                   1423 ;	ecen4330lab7.c:328: return data;
      0001EC 85*20 82         [24] 1424 	mov	dpl,_data
                                   1425 ;	ecen4330lab7.c:352: write(t);
      0001EF 12r09r62         [24] 1426 	lcall	_write
                                   1427 ;	ecen4330lab7.c:353: LCD_string_write(":");
      0001F2 90r05r0B         [24] 1428 	mov	dptr,#___str_0
      0001F5 75 F0 80         [24] 1429 	mov	b,#0x80
      0001F8 12r09rC8         [24] 1430 	lcall	_LCD_string_write
                                   1431 ;	ecen4330lab7.c:178: IOM = 1;
                                   1432 ;	assignBit
      0001FB D2 B4            [12] 1433 	setb	_P3_4
                                   1434 ;	ecen4330lab7.c:179: *map_address = d;
      0001FD 90 00 0D         [24] 1435 	mov	dptr,#0x000d
      000200 74 01            [12] 1436 	mov	a,#0x01
      000202 F0               [24] 1437 	movx	@dptr,a
                                   1438 ;	ecen4330lab7.c:180: IOM = 0;
                                   1439 ;	assignBit
      000203 C2 B4            [12] 1440 	clr	_P3_4
                                   1441 ;	ecen4330lab7.c:323: rtcBusy();
      000205 12r00rEF         [24] 1442 	lcall	_rtcBusy
                                   1443 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1444 ;	assignBit
      000208 D2 B4            [12] 1445 	setb	_P3_4
                                   1446 ;	ecen4330lab7.c:192: data = *map_address;
      00020A 90 00 03         [24] 1447 	mov	dptr,#0x0003
      00020D E0               [24] 1448 	movx	a,@dptr
      00020E F5*20            [12] 1449 	mov	_data,a
                                   1450 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1451 ;	assignBit
      000210 C2 B4            [12] 1452 	clr	_P3_4
                                   1453 ;	ecen4330lab7.c:194: return data;   
                                   1454 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      000212 E5*20            [12] 1455 	mov	a,_data
      000214 54 0F            [12] 1456 	anl	a,#0x0f
      000216 44 30            [12] 1457 	orl	a,#0x30
      000218 F5*20            [12] 1458 	mov	_data,a
                                   1459 ;	ecen4330lab7.c:178: IOM = 1;
                                   1460 ;	assignBit
      00021A D2 B4            [12] 1461 	setb	_P3_4
                                   1462 ;	ecen4330lab7.c:179: *map_address = d;
      00021C 90 00 0D         [24] 1463 	mov	dptr,#0x000d
      00021F E4               [12] 1464 	clr	a
      000220 F0               [24] 1465 	movx	@dptr,a
                                   1466 ;	ecen4330lab7.c:180: IOM = 0;
                                   1467 ;	assignBit
      000221 C2 B4            [12] 1468 	clr	_P3_4
                                   1469 ;	ecen4330lab7.c:328: return data;
      000223 85*20 82         [24] 1470 	mov	dpl,_data
                                   1471 ;	ecen4330lab7.c:355: write(t);
      000226 12r09r62         [24] 1472 	lcall	_write
                                   1473 ;	ecen4330lab7.c:178: IOM = 1;
                                   1474 ;	assignBit
      000229 D2 B4            [12] 1475 	setb	_P3_4
                                   1476 ;	ecen4330lab7.c:179: *map_address = d;
      00022B 90 00 0D         [24] 1477 	mov	dptr,#0x000d
      00022E 74 01            [12] 1478 	mov	a,#0x01
      000230 F0               [24] 1479 	movx	@dptr,a
                                   1480 ;	ecen4330lab7.c:180: IOM = 0;
                                   1481 ;	assignBit
      000231 C2 B4            [12] 1482 	clr	_P3_4
                                   1483 ;	ecen4330lab7.c:323: rtcBusy();
      000233 12r00rEF         [24] 1484 	lcall	_rtcBusy
                                   1485 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1486 ;	assignBit
      000236 D2 B4            [12] 1487 	setb	_P3_4
                                   1488 ;	ecen4330lab7.c:192: data = *map_address;
      000238 90 00 02         [24] 1489 	mov	dptr,#0x0002
      00023B E0               [24] 1490 	movx	a,@dptr
      00023C F5*20            [12] 1491 	mov	_data,a
                                   1492 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1493 ;	assignBit
      00023E C2 B4            [12] 1494 	clr	_P3_4
                                   1495 ;	ecen4330lab7.c:194: return data;   
                                   1496 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      000240 E5*20            [12] 1497 	mov	a,_data
      000242 54 0F            [12] 1498 	anl	a,#0x0f
      000244 44 30            [12] 1499 	orl	a,#0x30
      000246 F5*20            [12] 1500 	mov	_data,a
                                   1501 ;	ecen4330lab7.c:178: IOM = 1;
                                   1502 ;	assignBit
      000248 D2 B4            [12] 1503 	setb	_P3_4
                                   1504 ;	ecen4330lab7.c:179: *map_address = d;
      00024A 90 00 0D         [24] 1505 	mov	dptr,#0x000d
      00024D E4               [12] 1506 	clr	a
      00024E F0               [24] 1507 	movx	@dptr,a
                                   1508 ;	ecen4330lab7.c:180: IOM = 0;
                                   1509 ;	assignBit
      00024F C2 B4            [12] 1510 	clr	_P3_4
                                   1511 ;	ecen4330lab7.c:328: return data;
      000251 85*20 82         [24] 1512 	mov	dpl,_data
                                   1513 ;	ecen4330lab7.c:357: write(t);
      000254 12r09r62         [24] 1514 	lcall	_write
                                   1515 ;	ecen4330lab7.c:358: LCD_string_write(":");
      000257 90r05r0B         [24] 1516 	mov	dptr,#___str_0
      00025A 75 F0 80         [24] 1517 	mov	b,#0x80
      00025D 12r09rC8         [24] 1518 	lcall	_LCD_string_write
                                   1519 ;	ecen4330lab7.c:178: IOM = 1;
                                   1520 ;	assignBit
      000260 D2 B4            [12] 1521 	setb	_P3_4
                                   1522 ;	ecen4330lab7.c:179: *map_address = d;
      000262 90 00 0D         [24] 1523 	mov	dptr,#0x000d
      000265 74 01            [12] 1524 	mov	a,#0x01
      000267 F0               [24] 1525 	movx	@dptr,a
                                   1526 ;	ecen4330lab7.c:180: IOM = 0;
                                   1527 ;	assignBit
      000268 C2 B4            [12] 1528 	clr	_P3_4
                                   1529 ;	ecen4330lab7.c:323: rtcBusy();
      00026A 12r00rEF         [24] 1530 	lcall	_rtcBusy
                                   1531 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1532 ;	assignBit
      00026D D2 B4            [12] 1533 	setb	_P3_4
                                   1534 ;	ecen4330lab7.c:192: data = *map_address;
      00026F 90 00 01         [24] 1535 	mov	dptr,#0x0001
      000272 E0               [24] 1536 	movx	a,@dptr
      000273 F5*20            [12] 1537 	mov	_data,a
                                   1538 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1539 ;	assignBit
      000275 C2 B4            [12] 1540 	clr	_P3_4
                                   1541 ;	ecen4330lab7.c:194: return data;   
                                   1542 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      000277 E5*20            [12] 1543 	mov	a,_data
      000279 54 0F            [12] 1544 	anl	a,#0x0f
      00027B 44 30            [12] 1545 	orl	a,#0x30
      00027D F5*20            [12] 1546 	mov	_data,a
                                   1547 ;	ecen4330lab7.c:178: IOM = 1;
                                   1548 ;	assignBit
      00027F D2 B4            [12] 1549 	setb	_P3_4
                                   1550 ;	ecen4330lab7.c:179: *map_address = d;
      000281 90 00 0D         [24] 1551 	mov	dptr,#0x000d
      000284 E4               [12] 1552 	clr	a
      000285 F0               [24] 1553 	movx	@dptr,a
                                   1554 ;	ecen4330lab7.c:180: IOM = 0;
                                   1555 ;	assignBit
      000286 C2 B4            [12] 1556 	clr	_P3_4
                                   1557 ;	ecen4330lab7.c:328: return data;
      000288 85*20 82         [24] 1558 	mov	dpl,_data
                                   1559 ;	ecen4330lab7.c:360: write(t);
      00028B 12r09r62         [24] 1560 	lcall	_write
                                   1561 ;	ecen4330lab7.c:178: IOM = 1;
                                   1562 ;	assignBit
      00028E D2 B4            [12] 1563 	setb	_P3_4
                                   1564 ;	ecen4330lab7.c:179: *map_address = d;
      000290 90 00 0D         [24] 1565 	mov	dptr,#0x000d
      000293 74 01            [12] 1566 	mov	a,#0x01
      000295 F0               [24] 1567 	movx	@dptr,a
                                   1568 ;	ecen4330lab7.c:180: IOM = 0;
                                   1569 ;	assignBit
      000296 C2 B4            [12] 1570 	clr	_P3_4
                                   1571 ;	ecen4330lab7.c:323: rtcBusy();
      000298 12r00rEF         [24] 1572 	lcall	_rtcBusy
                                   1573 ;	ecen4330lab7.c:191: IOM = 1;                            
                                   1574 ;	assignBit
      00029B D2 B4            [12] 1575 	setb	_P3_4
                                   1576 ;	ecen4330lab7.c:192: data = *map_address;
      00029D 90 00 00         [24] 1577 	mov	dptr,#0x0000
      0002A0 E0               [24] 1578 	movx	a,@dptr
      0002A1 F5*20            [12] 1579 	mov	_data,a
                                   1580 ;	ecen4330lab7.c:193: IOM = 0;    
                                   1581 ;	assignBit
      0002A3 C2 B4            [12] 1582 	clr	_P3_4
                                   1583 ;	ecen4330lab7.c:194: return data;   
                                   1584 ;	ecen4330lab7.c:326: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002A5 E5*20            [12] 1585 	mov	a,_data
      0002A7 54 0F            [12] 1586 	anl	a,#0x0f
      0002A9 44 30            [12] 1587 	orl	a,#0x30
      0002AB F5*20            [12] 1588 	mov	_data,a
                                   1589 ;	ecen4330lab7.c:178: IOM = 1;
                                   1590 ;	assignBit
      0002AD D2 B4            [12] 1591 	setb	_P3_4
                                   1592 ;	ecen4330lab7.c:179: *map_address = d;
      0002AF 90 00 0D         [24] 1593 	mov	dptr,#0x000d
      0002B2 E4               [12] 1594 	clr	a
      0002B3 F0               [24] 1595 	movx	@dptr,a
                                   1596 ;	ecen4330lab7.c:180: IOM = 0;
                                   1597 ;	assignBit
      0002B4 C2 B4            [12] 1598 	clr	_P3_4
                                   1599 ;	ecen4330lab7.c:328: return data;
      0002B6 85*20 82         [24] 1600 	mov	dpl,_data
                                   1601 ;	ecen4330lab7.c:362: write(t);
      0002B9 12r09r62         [24] 1602 	lcall	_write
                                   1603 ;	ecen4330lab7.c:364: cursor_x = xCursorHold;
      0002BC 85*38*08         [24] 1604 	mov	_cursor_x,_xCursorHold
      0002BF 75*09 00         [24] 1605 	mov	(_cursor_x + 1),#0x00
                                   1606 ;	ecen4330lab7.c:365: cursor_y = yCursorHold;
      0002C2 85*39*0A         [24] 1607 	mov	_cursor_y,_yCursorHold
      0002C5 75*0B 00         [24] 1608 	mov	(_cursor_y + 1),#0x00
                                   1609 ;	ecen4330lab7.c:366: textsize = textSizeHold;
      0002C8 85*3A*0C         [24] 1610 	mov	_textsize,_textSizeHold
                                   1611 ;	ecen4330lab7.c:367: }
      0002CB 22               [24] 1612 	ret
                                   1613 ;------------------------------------------------------------
                                   1614 ;Allocation info for local variables in function 'setCursor'
                                   1615 ;------------------------------------------------------------
                                   1616 ;y                         Allocated with name '_setCursor_PARM_2'
                                   1617 ;x                         Allocated to registers 
                                   1618 ;------------------------------------------------------------
                                   1619 ;	ecen4330lab7.c:387: void setCursor(u16 x, u16 y){
                                   1620 ;	-----------------------------------------
                                   1621 ;	 function setCursor
                                   1622 ;	-----------------------------------------
      0002CC                       1623 _setCursor:
      0002CC 85 82*08         [24] 1624 	mov	_cursor_x,dpl
      0002CF 85 83*09         [24] 1625 	mov	(_cursor_x + 1),dph
                                   1626 ;	ecen4330lab7.c:389: cursor_y = y;
      0002D2 85*00*0A         [24] 1627 	mov	_cursor_y,_setCursor_PARM_2
      0002D5 85*01*0B         [24] 1628 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   1629 ;	ecen4330lab7.c:390: }
      0002D8 22               [24] 1630 	ret
                                   1631 ;------------------------------------------------------------
                                   1632 ;Allocation info for local variables in function 'setTextColor'
                                   1633 ;------------------------------------------------------------
                                   1634 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   1635 ;x                         Allocated to registers 
                                   1636 ;------------------------------------------------------------
                                   1637 ;	ecen4330lab7.c:398: void setTextColor(u16 x, u16 y){
                                   1638 ;	-----------------------------------------
                                   1639 ;	 function setTextColor
                                   1640 ;	-----------------------------------------
      0002D9                       1641 _setTextColor:
      0002D9 85 82*0E         [24] 1642 	mov	_textcolor,dpl
      0002DC 85 83*0F         [24] 1643 	mov	(_textcolor + 1),dph
                                   1644 ;	ecen4330lab7.c:400: textbgcolor = y;
      0002DF 85*00*10         [24] 1645 	mov	_textbgcolor,_setTextColor_PARM_2
      0002E2 85*01*11         [24] 1646 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   1647 ;	ecen4330lab7.c:401: }
      0002E5 22               [24] 1648 	ret
                                   1649 ;------------------------------------------------------------
                                   1650 ;Allocation info for local variables in function 'setTextSize'
                                   1651 ;------------------------------------------------------------
                                   1652 ;s                         Allocated to registers r7 
                                   1653 ;------------------------------------------------------------
                                   1654 ;	ecen4330lab7.c:409: void setTextSize(u8 s){
                                   1655 ;	-----------------------------------------
                                   1656 ;	 function setTextSize
                                   1657 ;	-----------------------------------------
      0002E6                       1658 _setTextSize:
                                   1659 ;	ecen4330lab7.c:410: if (s > 8) return;
      0002E6 E5 82            [12] 1660 	mov	a,dpl
      0002E8 FF               [12] 1661 	mov	r7,a
      0002E9 24 F7            [12] 1662 	add	a,#0xff - 0x08
      0002EB 50 01            [24] 1663 	jnc	00102$
      0002ED 22               [24] 1664 	ret
      0002EE                       1665 00102$:
                                   1666 ;	ecen4330lab7.c:411: textsize = (s>0) ? s : 1 ;
      0002EE EF               [12] 1667 	mov	a,r7
      0002EF 60 06            [24] 1668 	jz	00105$
      0002F1 8F 06            [24] 1669 	mov	ar6,r7
      0002F3 7F 00            [12] 1670 	mov	r7,#0x00
      0002F5 80 04            [24] 1671 	sjmp	00106$
      0002F7                       1672 00105$:
      0002F7 7E 01            [12] 1673 	mov	r6,#0x01
      0002F9 7F 00            [12] 1674 	mov	r7,#0x00
      0002FB                       1675 00106$:
      0002FB 8E*0C            [24] 1676 	mov	_textsize,r6
                                   1677 ;	ecen4330lab7.c:412: }
      0002FD 22               [24] 1678 	ret
                                   1679 ;------------------------------------------------------------
                                   1680 ;Allocation info for local variables in function 'setRotation'
                                   1681 ;------------------------------------------------------------
                                   1682 ;flag                      Allocated to registers r7 
                                   1683 ;------------------------------------------------------------
                                   1684 ;	ecen4330lab7.c:420: void setRotation(u8 flag){
                                   1685 ;	-----------------------------------------
                                   1686 ;	 function setRotation
                                   1687 ;	-----------------------------------------
      0002FE                       1688 _setRotation:
                                   1689 ;	ecen4330lab7.c:421: switch(flag) {
      0002FE E5 82            [12] 1690 	mov	a,dpl
      000300 FF               [12] 1691 	mov	r7,a
      000301 24 FC            [12] 1692 	add	a,#0xff - 0x03
      000303 40 4E            [24] 1693 	jc	00105$
      000305 EF               [12] 1694 	mov	a,r7
      000306 2F               [12] 1695 	add	a,r7
                                   1696 ;	ecen4330lab7.c:422: case 0:
      000307 90r03r0B         [24] 1697 	mov	dptr,#00115$
      00030A 73               [24] 1698 	jmp	@a+dptr
      00030B                       1699 00115$:
      00030B 80 06            [24] 1700 	sjmp	00101$
      00030D 80 14            [24] 1701 	sjmp	00102$
      00030F 80 22            [24] 1702 	sjmp	00103$
      000311 80 30            [24] 1703 	sjmp	00104$
      000313                       1704 00101$:
                                   1705 ;	ecen4330lab7.c:423: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000313 7F 48            [12] 1706 	mov	r7,#0x48
                                   1707 ;	ecen4330lab7.c:424: _width = TFTWIDTH;
      000315 75*12 F0         [24] 1708 	mov	__width,#0xf0
      000318 75*13 00         [24] 1709 	mov	(__width + 1),#0x00
                                   1710 ;	ecen4330lab7.c:425: _height = TFTHEIGHT;
      00031B 75*14 40         [24] 1711 	mov	__height,#0x40
      00031E 75*15 01         [24] 1712 	mov	(__height + 1),#0x01
                                   1713 ;	ecen4330lab7.c:426: break;
                                   1714 ;	ecen4330lab7.c:427: case 1:
      000321 80 3E            [24] 1715 	sjmp	00106$
      000323                       1716 00102$:
                                   1717 ;	ecen4330lab7.c:428: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000323 7F 28            [12] 1718 	mov	r7,#0x28
                                   1719 ;	ecen4330lab7.c:429: _width = TFTHEIGHT;
      000325 75*12 40         [24] 1720 	mov	__width,#0x40
      000328 75*13 01         [24] 1721 	mov	(__width + 1),#0x01
                                   1722 ;	ecen4330lab7.c:430: _height = TFTWIDTH;
      00032B 75*14 F0         [24] 1723 	mov	__height,#0xf0
      00032E 75*15 00         [24] 1724 	mov	(__height + 1),#0x00
                                   1725 ;	ecen4330lab7.c:431: break;
                                   1726 ;	ecen4330lab7.c:432: case 2:
      000331 80 2E            [24] 1727 	sjmp	00106$
      000333                       1728 00103$:
                                   1729 ;	ecen4330lab7.c:433: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000333 7F 88            [12] 1730 	mov	r7,#0x88
                                   1731 ;	ecen4330lab7.c:434: _width = TFTWIDTH;
      000335 75*12 F0         [24] 1732 	mov	__width,#0xf0
      000338 75*13 00         [24] 1733 	mov	(__width + 1),#0x00
                                   1734 ;	ecen4330lab7.c:435: _height = TFTHEIGHT;
      00033B 75*14 40         [24] 1735 	mov	__height,#0x40
      00033E 75*15 01         [24] 1736 	mov	(__height + 1),#0x01
                                   1737 ;	ecen4330lab7.c:436: break;
                                   1738 ;	ecen4330lab7.c:437: case 3:
      000341 80 1E            [24] 1739 	sjmp	00106$
      000343                       1740 00104$:
                                   1741 ;	ecen4330lab7.c:438: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000343 7F E8            [12] 1742 	mov	r7,#0xe8
                                   1743 ;	ecen4330lab7.c:439: _width = TFTHEIGHT;
      000345 75*12 40         [24] 1744 	mov	__width,#0x40
      000348 75*13 01         [24] 1745 	mov	(__width + 1),#0x01
                                   1746 ;	ecen4330lab7.c:440: _height = TFTWIDTH;
      00034B 75*14 F0         [24] 1747 	mov	__height,#0xf0
      00034E 75*15 00         [24] 1748 	mov	(__height + 1),#0x00
                                   1749 ;	ecen4330lab7.c:441: break;
                                   1750 ;	ecen4330lab7.c:442: default:
      000351 80 0E            [24] 1751 	sjmp	00106$
      000353                       1752 00105$:
                                   1753 ;	ecen4330lab7.c:443: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000353 7F 48            [12] 1754 	mov	r7,#0x48
                                   1755 ;	ecen4330lab7.c:444: _width = TFTWIDTH;
      000355 75*12 F0         [24] 1756 	mov	__width,#0xf0
      000358 75*13 00         [24] 1757 	mov	(__width + 1),#0x00
                                   1758 ;	ecen4330lab7.c:445: _height = TFTHEIGHT;
      00035B 75*14 40         [24] 1759 	mov	__height,#0x40
      00035E 75*15 01         [24] 1760 	mov	(__height + 1),#0x01
                                   1761 ;	ecen4330lab7.c:447: }
      000361                       1762 00106$:
                                   1763 ;	ecen4330lab7.c:448: writeRegister8(ILI9341_MEMCONTROL, flag);
      000361 8F*00            [24] 1764 	mov	_writeRegister8_PARM_2,r7
      000363 75 82 36         [24] 1765 	mov	dpl,#0x36
                                   1766 ;	ecen4330lab7.c:449: }
      000366 02r00r54         [24] 1767 	ljmp	_writeRegister8
                                   1768 ;------------------------------------------------------------
                                   1769 ;Allocation info for local variables in function 'setAddress'
                                   1770 ;------------------------------------------------------------
                                   1771 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1772 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1773 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1774 ;x1                        Allocated to registers r6 r7 
                                   1775 ;------------------------------------------------------------
                                   1776 ;	ecen4330lab7.c:458: void setAddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2){
                                   1777 ;	-----------------------------------------
                                   1778 ;	 function setAddress
                                   1779 ;	-----------------------------------------
      000369                       1780 _setAddress:
      000369 AE 82            [24] 1781 	mov	r6,dpl
      00036B AF 83            [24] 1782 	mov	r7,dph
                                   1783 ;	ecen4330lab7.c:459: write8Reg(0x2A);
                                   1784 ;	assignBit
      00036D C2 B5            [12] 1785 	clr	_P3_5
                                   1786 ;	assignBit
      00036F D2 B4            [12] 1787 	setb	_P3_4
      000371 85*02 82         [24] 1788 	mov	dpl,_lcd_address
      000374 85*03 83         [24] 1789 	mov	dph,(_lcd_address + 1)
      000377 74 2A            [12] 1790 	mov	a,#0x2a
      000379 F0               [24] 1791 	movx	@dptr,a
                                   1792 ;	assignBit
      00037A C2 B4            [12] 1793 	clr	_P3_4
                                   1794 ;	ecen4330lab7.c:460: write8Data(x1 >> 8);
                                   1795 ;	assignBit
      00037C D2 B5            [12] 1796 	setb	_P3_5
                                   1797 ;	assignBit
      00037E D2 B4            [12] 1798 	setb	_P3_4
      000380 85*02 82         [24] 1799 	mov	dpl,_lcd_address
      000383 85*03 83         [24] 1800 	mov	dph,(_lcd_address + 1)
      000386 8F 05            [24] 1801 	mov	ar5,r7
      000388 ED               [12] 1802 	mov	a,r5
      000389 F0               [24] 1803 	movx	@dptr,a
                                   1804 ;	assignBit
      00038A C2 B4            [12] 1805 	clr	_P3_4
                                   1806 ;	ecen4330lab7.c:461: write8Data(x1);
                                   1807 ;	assignBit
      00038C D2 B5            [12] 1808 	setb	_P3_5
                                   1809 ;	assignBit
      00038E D2 B4            [12] 1810 	setb	_P3_4
      000390 85*02 82         [24] 1811 	mov	dpl,_lcd_address
      000393 85*03 83         [24] 1812 	mov	dph,(_lcd_address + 1)
      000396 EE               [12] 1813 	mov	a,r6
      000397 F0               [24] 1814 	movx	@dptr,a
                                   1815 ;	assignBit
      000398 C2 B4            [12] 1816 	clr	_P3_4
                                   1817 ;	ecen4330lab7.c:462: write8Data(x2 >> 8);
                                   1818 ;	assignBit
      00039A D2 B5            [12] 1819 	setb	_P3_5
                                   1820 ;	assignBit
      00039C D2 B4            [12] 1821 	setb	_P3_4
      00039E 85*02 82         [24] 1822 	mov	dpl,_lcd_address
      0003A1 85*03 83         [24] 1823 	mov	dph,(_lcd_address + 1)
      0003A4 E5*03            [12] 1824 	mov	a,(_setAddress_PARM_3 + 1)
      0003A6 F0               [24] 1825 	movx	@dptr,a
                                   1826 ;	assignBit
      0003A7 C2 B4            [12] 1827 	clr	_P3_4
                                   1828 ;	ecen4330lab7.c:463: write8Data(x2);
                                   1829 ;	assignBit
      0003A9 D2 B5            [12] 1830 	setb	_P3_5
                                   1831 ;	assignBit
      0003AB D2 B4            [12] 1832 	setb	_P3_4
      0003AD 85*02 82         [24] 1833 	mov	dpl,_lcd_address
      0003B0 85*03 83         [24] 1834 	mov	dph,(_lcd_address + 1)
      0003B3 E5*02            [12] 1835 	mov	a,_setAddress_PARM_3
      0003B5 F0               [24] 1836 	movx	@dptr,a
                                   1837 ;	assignBit
      0003B6 C2 B4            [12] 1838 	clr	_P3_4
                                   1839 ;	ecen4330lab7.c:464: write8Reg(0x2B);
                                   1840 ;	assignBit
      0003B8 C2 B5            [12] 1841 	clr	_P3_5
                                   1842 ;	assignBit
      0003BA D2 B4            [12] 1843 	setb	_P3_4
      0003BC 85*02 82         [24] 1844 	mov	dpl,_lcd_address
      0003BF 85*03 83         [24] 1845 	mov	dph,(_lcd_address + 1)
      0003C2 74 2B            [12] 1846 	mov	a,#0x2b
      0003C4 F0               [24] 1847 	movx	@dptr,a
                                   1848 ;	assignBit
      0003C5 C2 B4            [12] 1849 	clr	_P3_4
                                   1850 ;	ecen4330lab7.c:465: write8Data(y1 >> 8);
                                   1851 ;	assignBit
      0003C7 D2 B5            [12] 1852 	setb	_P3_5
                                   1853 ;	assignBit
      0003C9 D2 B4            [12] 1854 	setb	_P3_4
      0003CB 85*02 82         [24] 1855 	mov	dpl,_lcd_address
      0003CE 85*03 83         [24] 1856 	mov	dph,(_lcd_address + 1)
      0003D1 E5*01            [12] 1857 	mov	a,(_setAddress_PARM_2 + 1)
      0003D3 F0               [24] 1858 	movx	@dptr,a
                                   1859 ;	assignBit
      0003D4 C2 B4            [12] 1860 	clr	_P3_4
                                   1861 ;	ecen4330lab7.c:466: write8Data(y1);
                                   1862 ;	assignBit
      0003D6 D2 B5            [12] 1863 	setb	_P3_5
                                   1864 ;	assignBit
      0003D8 D2 B4            [12] 1865 	setb	_P3_4
      0003DA 85*02 82         [24] 1866 	mov	dpl,_lcd_address
      0003DD 85*03 83         [24] 1867 	mov	dph,(_lcd_address + 1)
      0003E0 E5*00            [12] 1868 	mov	a,_setAddress_PARM_2
      0003E2 F0               [24] 1869 	movx	@dptr,a
                                   1870 ;	assignBit
      0003E3 C2 B4            [12] 1871 	clr	_P3_4
                                   1872 ;	ecen4330lab7.c:467: write8Data(y2 >> 8);
                                   1873 ;	assignBit
      0003E5 D2 B5            [12] 1874 	setb	_P3_5
                                   1875 ;	assignBit
      0003E7 D2 B4            [12] 1876 	setb	_P3_4
      0003E9 85*02 82         [24] 1877 	mov	dpl,_lcd_address
      0003EC 85*03 83         [24] 1878 	mov	dph,(_lcd_address + 1)
      0003EF E5*05            [12] 1879 	mov	a,(_setAddress_PARM_4 + 1)
      0003F1 F0               [24] 1880 	movx	@dptr,a
                                   1881 ;	assignBit
      0003F2 C2 B4            [12] 1882 	clr	_P3_4
                                   1883 ;	ecen4330lab7.c:468: write8Data(y2);
                                   1884 ;	assignBit
      0003F4 D2 B5            [12] 1885 	setb	_P3_5
                                   1886 ;	assignBit
      0003F6 D2 B4            [12] 1887 	setb	_P3_4
      0003F8 85*02 82         [24] 1888 	mov	dpl,_lcd_address
      0003FB 85*03 83         [24] 1889 	mov	dph,(_lcd_address + 1)
      0003FE E5*04            [12] 1890 	mov	a,_setAddress_PARM_4
      000400 F0               [24] 1891 	movx	@dptr,a
                                   1892 ;	assignBit
      000401 C2 B4            [12] 1893 	clr	_P3_4
                                   1894 ;	ecen4330lab7.c:469: }
      000403 22               [24] 1895 	ret
                                   1896 ;------------------------------------------------------------
                                   1897 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1898 ;------------------------------------------------------------
                                   1899 ;	ecen4330lab7.c:477: void TFT_LCD_INIT(void){
                                   1900 ;	-----------------------------------------
                                   1901 ;	 function TFT_LCD_INIT
                                   1902 ;	-----------------------------------------
      000404                       1903 _TFT_LCD_INIT:
                                   1904 ;	ecen4330lab7.c:478: _width = TFTWIDTH;
      000404 75*12 F0         [24] 1905 	mov	__width,#0xf0
      000407 75*13 00         [24] 1906 	mov	(__width + 1),#0x00
                                   1907 ;	ecen4330lab7.c:479: _height = TFTHEIGHT;
      00040A 75*14 40         [24] 1908 	mov	__height,#0x40
      00040D 75*15 01         [24] 1909 	mov	(__height + 1),#0x01
                                   1910 ;	ecen4330lab7.c:481: IOM = 0;
                                   1911 ;	assignBit
      000410 C2 B4            [12] 1912 	clr	_P3_4
                                   1913 ;	ecen4330lab7.c:482: CD = 1;
                                   1914 ;	assignBit
      000412 D2 B5            [12] 1915 	setb	_P3_5
                                   1916 ;	ecen4330lab7.c:484: write8Reg(0x00);
                                   1917 ;	assignBit
      000414 C2 B5            [12] 1918 	clr	_P3_5
                                   1919 ;	assignBit
      000416 D2 B4            [12] 1920 	setb	_P3_4
      000418 85*02 82         [24] 1921 	mov	dpl,_lcd_address
      00041B 85*03 83         [24] 1922 	mov	dph,(_lcd_address + 1)
      00041E E4               [12] 1923 	clr	a
      00041F F0               [24] 1924 	movx	@dptr,a
                                   1925 ;	assignBit
      000420 C2 B4            [12] 1926 	clr	_P3_4
                                   1927 ;	ecen4330lab7.c:485: write8Data(0x00);
                                   1928 ;	assignBit
      000422 D2 B5            [12] 1929 	setb	_P3_5
                                   1930 ;	assignBit
      000424 D2 B4            [12] 1931 	setb	_P3_4
      000426 85*02 82         [24] 1932 	mov	dpl,_lcd_address
      000429 85*03 83         [24] 1933 	mov	dph,(_lcd_address + 1)
      00042C E4               [12] 1934 	clr	a
      00042D F0               [24] 1935 	movx	@dptr,a
                                   1936 ;	assignBit
      00042E C2 B4            [12] 1937 	clr	_P3_4
                                   1938 ;	ecen4330lab7.c:486: write8Data(0x00);
                                   1939 ;	assignBit
      000430 D2 B5            [12] 1940 	setb	_P3_5
                                   1941 ;	assignBit
      000432 D2 B4            [12] 1942 	setb	_P3_4
      000434 85*02 82         [24] 1943 	mov	dpl,_lcd_address
      000437 85*03 83         [24] 1944 	mov	dph,(_lcd_address + 1)
      00043A E4               [12] 1945 	clr	a
      00043B F0               [24] 1946 	movx	@dptr,a
                                   1947 ;	assignBit
      00043C C2 B4            [12] 1948 	clr	_P3_4
                                   1949 ;	ecen4330lab7.c:487: write8Data(0x00);
                                   1950 ;	assignBit
      00043E D2 B5            [12] 1951 	setb	_P3_5
                                   1952 ;	assignBit
      000440 D2 B4            [12] 1953 	setb	_P3_4
      000442 85*02 82         [24] 1954 	mov	dpl,_lcd_address
      000445 85*03 83         [24] 1955 	mov	dph,(_lcd_address + 1)
      000448 E4               [12] 1956 	clr	a
      000449 F0               [24] 1957 	movx	@dptr,a
                                   1958 ;	assignBit
      00044A C2 B4            [12] 1959 	clr	_P3_4
                                   1960 ;	ecen4330lab7.c:488: delay(200);
      00044C 90 00 C8         [24] 1961 	mov	dptr,#0x00c8
      00044F 12r00r28         [24] 1962 	lcall	_delay
                                   1963 ;	ecen4330lab7.c:490: writeRegister8(ILI9341_SOFTRESET, 0);
      000452 75*00 00         [24] 1964 	mov	_writeRegister8_PARM_2,#0x00
      000455 75 82 01         [24] 1965 	mov	dpl,#0x01
      000458 12r00r54         [24] 1966 	lcall	_writeRegister8
                                   1967 ;	ecen4330lab7.c:491: delay(50);
      00045B 90 00 32         [24] 1968 	mov	dptr,#0x0032
      00045E 12r00r28         [24] 1969 	lcall	_delay
                                   1970 ;	ecen4330lab7.c:493: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000461 75*00 00         [24] 1971 	mov	_writeRegister8_PARM_2,#0x00
      000464 75 82 28         [24] 1972 	mov	dpl,#0x28
      000467 12r00r54         [24] 1973 	lcall	_writeRegister8
                                   1974 ;	ecen4330lab7.c:494: delay(10);
      00046A 90 00 0A         [24] 1975 	mov	dptr,#0x000a
      00046D 12r00r28         [24] 1976 	lcall	_delay
                                   1977 ;	ecen4330lab7.c:496: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000470 75*00 23         [24] 1978 	mov	_writeRegister8_PARM_2,#0x23
      000473 75 82 C0         [24] 1979 	mov	dpl,#0xc0
      000476 12r00r54         [24] 1980 	lcall	_writeRegister8
                                   1981 ;	ecen4330lab7.c:497: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      000479 75*00 11         [24] 1982 	mov	_writeRegister8_PARM_2,#0x11
      00047C 75 82 C1         [24] 1983 	mov	dpl,#0xc1
      00047F 12r00r54         [24] 1984 	lcall	_writeRegister8
                                   1985 ;	ecen4330lab7.c:498: write8Reg(ILI9341_VCOMCONTROL1);
                                   1986 ;	assignBit
      000482 C2 B5            [12] 1987 	clr	_P3_5
                                   1988 ;	assignBit
      000484 D2 B4            [12] 1989 	setb	_P3_4
      000486 85*02 82         [24] 1990 	mov	dpl,_lcd_address
      000489 85*03 83         [24] 1991 	mov	dph,(_lcd_address + 1)
      00048C 74 C5            [12] 1992 	mov	a,#0xc5
      00048E F0               [24] 1993 	movx	@dptr,a
                                   1994 ;	assignBit
      00048F C2 B4            [12] 1995 	clr	_P3_4
                                   1996 ;	ecen4330lab7.c:499: write8Data(0x3d);
                                   1997 ;	assignBit
      000491 D2 B5            [12] 1998 	setb	_P3_5
                                   1999 ;	assignBit
      000493 D2 B4            [12] 2000 	setb	_P3_4
      000495 85*02 82         [24] 2001 	mov	dpl,_lcd_address
      000498 85*03 83         [24] 2002 	mov	dph,(_lcd_address + 1)
      00049B 74 3D            [12] 2003 	mov	a,#0x3d
      00049D F0               [24] 2004 	movx	@dptr,a
                                   2005 ;	assignBit
      00049E C2 B4            [12] 2006 	clr	_P3_4
                                   2007 ;	ecen4330lab7.c:500: write8Data(0x30);
                                   2008 ;	assignBit
      0004A0 D2 B5            [12] 2009 	setb	_P3_5
                                   2010 ;	assignBit
      0004A2 D2 B4            [12] 2011 	setb	_P3_4
      0004A4 85*02 82         [24] 2012 	mov	dpl,_lcd_address
      0004A7 85*03 83         [24] 2013 	mov	dph,(_lcd_address + 1)
      0004AA 74 30            [12] 2014 	mov	a,#0x30
      0004AC F0               [24] 2015 	movx	@dptr,a
                                   2016 ;	assignBit
      0004AD C2 B4            [12] 2017 	clr	_P3_4
                                   2018 ;	ecen4330lab7.c:501: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0004AF 75*00 AA         [24] 2019 	mov	_writeRegister8_PARM_2,#0xaa
      0004B2 75 82 C7         [24] 2020 	mov	dpl,#0xc7
      0004B5 12r00r54         [24] 2021 	lcall	_writeRegister8
                                   2022 ;	ecen4330lab7.c:502: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0004B8 75*00 88         [24] 2023 	mov	_writeRegister8_PARM_2,#0x88
      0004BB 75 82 36         [24] 2024 	mov	dpl,#0x36
      0004BE 12r00r54         [24] 2025 	lcall	_writeRegister8
                                   2026 ;	ecen4330lab7.c:503: write8Reg(ILI9341_PIXELFORMAT);
                                   2027 ;	assignBit
      0004C1 C2 B5            [12] 2028 	clr	_P3_5
                                   2029 ;	assignBit
      0004C3 D2 B4            [12] 2030 	setb	_P3_4
      0004C5 85*02 82         [24] 2031 	mov	dpl,_lcd_address
      0004C8 85*03 83         [24] 2032 	mov	dph,(_lcd_address + 1)
      0004CB 74 3A            [12] 2033 	mov	a,#0x3a
      0004CD F0               [24] 2034 	movx	@dptr,a
                                   2035 ;	assignBit
      0004CE C2 B4            [12] 2036 	clr	_P3_4
                                   2037 ;	ecen4330lab7.c:504: write8Data(0x55);
                                   2038 ;	assignBit
      0004D0 D2 B5            [12] 2039 	setb	_P3_5
                                   2040 ;	assignBit
      0004D2 D2 B4            [12] 2041 	setb	_P3_4
      0004D4 85*02 82         [24] 2042 	mov	dpl,_lcd_address
      0004D7 85*03 83         [24] 2043 	mov	dph,(_lcd_address + 1)
      0004DA 74 55            [12] 2044 	mov	a,#0x55
      0004DC F0               [24] 2045 	movx	@dptr,a
                                   2046 ;	assignBit
      0004DD C2 B4            [12] 2047 	clr	_P3_4
                                   2048 ;	ecen4330lab7.c:505: write8Data(0x00);
                                   2049 ;	assignBit
      0004DF D2 B5            [12] 2050 	setb	_P3_5
                                   2051 ;	assignBit
      0004E1 D2 B4            [12] 2052 	setb	_P3_4
      0004E3 85*02 82         [24] 2053 	mov	dpl,_lcd_address
      0004E6 85*03 83         [24] 2054 	mov	dph,(_lcd_address + 1)
      0004E9 E4               [12] 2055 	clr	a
      0004EA F0               [24] 2056 	movx	@dptr,a
                                   2057 ;	assignBit
      0004EB C2 B4            [12] 2058 	clr	_P3_4
                                   2059 ;	ecen4330lab7.c:506: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0004ED 75*00 1B         [24] 2060 	mov	_writeRegister16_PARM_2,#0x1b
      0004F0 75*01 00         [24] 2061 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0004F3 90 00 B1         [24] 2062 	mov	dptr,#0x00b1
      0004F6 12r00r74         [24] 2063 	lcall	_writeRegister16
                                   2064 ;	ecen4330lab7.c:507: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0004F9 75*00 07         [24] 2065 	mov	_writeRegister8_PARM_2,#0x07
      0004FC 75 82 B7         [24] 2066 	mov	dpl,#0xb7
      0004FF 12r00r54         [24] 2067 	lcall	_writeRegister8
                                   2068 ;	ecen4330lab7.c:508: writeRegister8(ILI9341_SLEEPOUT, 0);
      000502 75*00 00         [24] 2069 	mov	_writeRegister8_PARM_2,#0x00
      000505 75 82 11         [24] 2070 	mov	dpl,#0x11
      000508 12r00r54         [24] 2071 	lcall	_writeRegister8
                                   2072 ;	ecen4330lab7.c:509: delay(150);
      00050B 90 00 96         [24] 2073 	mov	dptr,#0x0096
      00050E 12r00r28         [24] 2074 	lcall	_delay
                                   2075 ;	ecen4330lab7.c:511: writeRegister8(ILI9341_DISPLAYON, 0);
      000511 75*00 00         [24] 2076 	mov	_writeRegister8_PARM_2,#0x00
      000514 75 82 29         [24] 2077 	mov	dpl,#0x29
      000517 12r00r54         [24] 2078 	lcall	_writeRegister8
                                   2079 ;	ecen4330lab7.c:512: delay(500);
      00051A 90 01 F4         [24] 2080 	mov	dptr,#0x01f4
      00051D 12r00r28         [24] 2081 	lcall	_delay
                                   2082 ;	ecen4330lab7.c:514: setAddress(0,0,_width-1,_height-1);
      000520 E5*12            [12] 2083 	mov	a,__width
      000522 24 FF            [12] 2084 	add	a,#0xff
      000524 F5*02            [12] 2085 	mov	_setAddress_PARM_3,a
      000526 E5*13            [12] 2086 	mov	a,(__width + 1)
      000528 34 FF            [12] 2087 	addc	a,#0xff
      00052A F5*03            [12] 2088 	mov	(_setAddress_PARM_3 + 1),a
      00052C E5*14            [12] 2089 	mov	a,__height
      00052E 24 FF            [12] 2090 	add	a,#0xff
      000530 F5*04            [12] 2091 	mov	_setAddress_PARM_4,a
      000532 E5*15            [12] 2092 	mov	a,(__height + 1)
      000534 34 FF            [12] 2093 	addc	a,#0xff
      000536 F5*05            [12] 2094 	mov	(_setAddress_PARM_4 + 1),a
      000538 E4               [12] 2095 	clr	a
      000539 F5*00            [12] 2096 	mov	_setAddress_PARM_2,a
      00053B F5*01            [12] 2097 	mov	(_setAddress_PARM_2 + 1),a
      00053D 90 00 00         [24] 2098 	mov	dptr,#0x0000
                                   2099 ;	ecen4330lab7.c:515: }
      000540 02r03r69         [24] 2100 	ljmp	_setAddress
                                   2101 ;------------------------------------------------------------
                                   2102 ;Allocation info for local variables in function 'drawPixel'
                                   2103 ;------------------------------------------------------------
                                   2104 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2105 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2106 ;x3                        Allocated to registers r6 r7 
                                   2107 ;------------------------------------------------------------
                                   2108 ;	ecen4330lab7.c:523: void drawPixel(u16 x3,u16 y3,u16 color1)
                                   2109 ;	-----------------------------------------
                                   2110 ;	 function drawPixel
                                   2111 ;	-----------------------------------------
      000543                       2112 _drawPixel:
      000543 AE 82            [24] 2113 	mov	r6,dpl
      000545 AF 83            [24] 2114 	mov	r7,dph
                                   2115 ;	ecen4330lab7.c:525: setAddress(x3,y3,x3+1,y3+1);
      000547 74 01            [12] 2116 	mov	a,#0x01
      000549 2E               [12] 2117 	add	a,r6
      00054A F5*02            [12] 2118 	mov	_setAddress_PARM_3,a
      00054C E4               [12] 2119 	clr	a
      00054D 3F               [12] 2120 	addc	a,r7
      00054E F5*03            [12] 2121 	mov	(_setAddress_PARM_3 + 1),a
      000550 74 01            [12] 2122 	mov	a,#0x01
      000552 25*44            [12] 2123 	add	a,_drawPixel_PARM_2
      000554 F5*04            [12] 2124 	mov	_setAddress_PARM_4,a
      000556 E4               [12] 2125 	clr	a
      000557 35*45            [12] 2126 	addc	a,(_drawPixel_PARM_2 + 1)
      000559 F5*05            [12] 2127 	mov	(_setAddress_PARM_4 + 1),a
      00055B 85*44*00         [24] 2128 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      00055E 85*45*01         [24] 2129 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000561 8E 82            [24] 2130 	mov	dpl,r6
      000563 8F 83            [24] 2131 	mov	dph,r7
      000565 12r03r69         [24] 2132 	lcall	_setAddress
                                   2133 ;	ecen4330lab7.c:526: CD=0; 
                                   2134 ;	assignBit
      000568 C2 B5            [12] 2135 	clr	_P3_5
                                   2136 ;	ecen4330lab7.c:527: write8(0x2C);
                                   2137 ;	assignBit
      00056A D2 B4            [12] 2138 	setb	_P3_4
      00056C 85*02 82         [24] 2139 	mov	dpl,_lcd_address
      00056F 85*03 83         [24] 2140 	mov	dph,(_lcd_address + 1)
      000572 74 2C            [12] 2141 	mov	a,#0x2c
      000574 F0               [24] 2142 	movx	@dptr,a
                                   2143 ;	assignBit
      000575 C2 B4            [12] 2144 	clr	_P3_4
                                   2145 ;	ecen4330lab7.c:528: CD = 1;
                                   2146 ;	assignBit
      000577 D2 B5            [12] 2147 	setb	_P3_5
                                   2148 ;	ecen4330lab7.c:529: write8(color1>>8);
                                   2149 ;	assignBit
      000579 D2 B4            [12] 2150 	setb	_P3_4
      00057B 85*02 82         [24] 2151 	mov	dpl,_lcd_address
      00057E 85*03 83         [24] 2152 	mov	dph,(_lcd_address + 1)
      000581 E5*47            [12] 2153 	mov	a,(_drawPixel_PARM_3 + 1)
      000583 F0               [24] 2154 	movx	@dptr,a
                                   2155 ;	assignBit
      000584 C2 B4            [12] 2156 	clr	_P3_4
                                   2157 ;	ecen4330lab7.c:530: write8(color1);
                                   2158 ;	assignBit
      000586 D2 B4            [12] 2159 	setb	_P3_4
      000588 85*02 82         [24] 2160 	mov	dpl,_lcd_address
      00058B 85*03 83         [24] 2161 	mov	dph,(_lcd_address + 1)
      00058E E5*46            [12] 2162 	mov	a,_drawPixel_PARM_3
      000590 F0               [24] 2163 	movx	@dptr,a
                                   2164 ;	assignBit
      000591 C2 B4            [12] 2165 	clr	_P3_4
                                   2166 ;	ecen4330lab7.c:531: }
      000593 22               [24] 2167 	ret
                                   2168 ;------------------------------------------------------------
                                   2169 ;Allocation info for local variables in function 'fillRect'
                                   2170 ;------------------------------------------------------------
                                   2171 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2172 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2173 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2174 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2175 ;x                         Allocated to registers 
                                   2176 ;------------------------------------------------------------
                                   2177 ;	ecen4330lab7.c:539: void fillRect(u16 x,u16 y,u16 w,u16 h,u16 color){
                                   2178 ;	-----------------------------------------
                                   2179 ;	 function fillRect
                                   2180 ;	-----------------------------------------
      000594                       2181 _fillRect:
      000594 AE 82            [24] 2182 	mov	r6,dpl
      000596 AF 83            [24] 2183 	mov	r7,dph
                                   2184 ;	ecen4330lab7.c:540: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      000598 C3               [12] 2185 	clr	c
      000599 EE               [12] 2186 	mov	a,r6
      00059A 94 F0            [12] 2187 	subb	a,#0xf0
      00059C EF               [12] 2188 	mov	a,r7
      00059D 94 00            [12] 2189 	subb	a,#0x00
      00059F 50 0B            [24] 2190 	jnc	00101$
      0005A1 C3               [12] 2191 	clr	c
      0005A2 E5*48            [12] 2192 	mov	a,_fillRect_PARM_2
      0005A4 94 40            [12] 2193 	subb	a,#0x40
      0005A6 E5*49            [12] 2194 	mov	a,(_fillRect_PARM_2 + 1)
      0005A8 94 01            [12] 2195 	subb	a,#0x01
      0005AA 40 01            [24] 2196 	jc	00102$
      0005AC                       2197 00101$:
                                   2198 ;	ecen4330lab7.c:542: return;
      0005AC 22               [24] 2199 	ret
      0005AD                       2200 00102$:
                                   2201 ;	ecen4330lab7.c:545: if ((x+w-1) >= TFTWIDTH)
      0005AD E5*4A            [12] 2202 	mov	a,_fillRect_PARM_3
      0005AF 2E               [12] 2203 	add	a,r6
      0005B0 FC               [12] 2204 	mov	r4,a
      0005B1 E5*4B            [12] 2205 	mov	a,(_fillRect_PARM_3 + 1)
      0005B3 3F               [12] 2206 	addc	a,r7
      0005B4 FD               [12] 2207 	mov	r5,a
      0005B5 1C               [12] 2208 	dec	r4
      0005B6 BC FF 01         [24] 2209 	cjne	r4,#0xff,00161$
      0005B9 1D               [12] 2210 	dec	r5
      0005BA                       2211 00161$:
      0005BA C3               [12] 2212 	clr	c
      0005BB EC               [12] 2213 	mov	a,r4
      0005BC 94 F0            [12] 2214 	subb	a,#0xf0
      0005BE ED               [12] 2215 	mov	a,r5
      0005BF 94 00            [12] 2216 	subb	a,#0x00
      0005C1 40 0A            [24] 2217 	jc	00105$
                                   2218 ;	ecen4330lab7.c:547: w = TFTWIDTH-x;
      0005C3 74 F0            [12] 2219 	mov	a,#0xf0
      0005C5 C3               [12] 2220 	clr	c
      0005C6 9E               [12] 2221 	subb	a,r6
      0005C7 F5*4A            [12] 2222 	mov	_fillRect_PARM_3,a
      0005C9 E4               [12] 2223 	clr	a
      0005CA 9F               [12] 2224 	subb	a,r7
      0005CB F5*4B            [12] 2225 	mov	(_fillRect_PARM_3 + 1),a
      0005CD                       2226 00105$:
                                   2227 ;	ecen4330lab7.c:550: if ((y+h-1) >= TFTHEIGHT)
      0005CD E5*4C            [12] 2228 	mov	a,_fillRect_PARM_4
      0005CF 25*48            [12] 2229 	add	a,_fillRect_PARM_2
      0005D1 FC               [12] 2230 	mov	r4,a
      0005D2 E5*4D            [12] 2231 	mov	a,(_fillRect_PARM_4 + 1)
      0005D4 35*49            [12] 2232 	addc	a,(_fillRect_PARM_2 + 1)
      0005D6 FD               [12] 2233 	mov	r5,a
      0005D7 1C               [12] 2234 	dec	r4
      0005D8 BC FF 01         [24] 2235 	cjne	r4,#0xff,00163$
      0005DB 1D               [12] 2236 	dec	r5
      0005DC                       2237 00163$:
      0005DC C3               [12] 2238 	clr	c
      0005DD EC               [12] 2239 	mov	a,r4
      0005DE 94 40            [12] 2240 	subb	a,#0x40
      0005E0 ED               [12] 2241 	mov	a,r5
      0005E1 94 01            [12] 2242 	subb	a,#0x01
      0005E3 40 0D            [24] 2243 	jc	00107$
                                   2244 ;	ecen4330lab7.c:552: h = TFTHEIGHT-y;
      0005E5 74 40            [12] 2245 	mov	a,#0x40
      0005E7 C3               [12] 2246 	clr	c
      0005E8 95*48            [12] 2247 	subb	a,_fillRect_PARM_2
      0005EA F5*4C            [12] 2248 	mov	_fillRect_PARM_4,a
      0005EC 74 01            [12] 2249 	mov	a,#0x01
      0005EE 95*49            [12] 2250 	subb	a,(_fillRect_PARM_2 + 1)
      0005F0 F5*4D            [12] 2251 	mov	(_fillRect_PARM_4 + 1),a
      0005F2                       2252 00107$:
                                   2253 ;	ecen4330lab7.c:555: setAddress(x, y, x+w-1, y+h-1);
      0005F2 E5*4A            [12] 2254 	mov	a,_fillRect_PARM_3
      0005F4 2E               [12] 2255 	add	a,r6
      0005F5 FC               [12] 2256 	mov	r4,a
      0005F6 E5*4B            [12] 2257 	mov	a,(_fillRect_PARM_3 + 1)
      0005F8 3F               [12] 2258 	addc	a,r7
      0005F9 FD               [12] 2259 	mov	r5,a
      0005FA EC               [12] 2260 	mov	a,r4
      0005FB 24 FF            [12] 2261 	add	a,#0xff
      0005FD F5*02            [12] 2262 	mov	_setAddress_PARM_3,a
      0005FF ED               [12] 2263 	mov	a,r5
      000600 34 FF            [12] 2264 	addc	a,#0xff
      000602 F5*03            [12] 2265 	mov	(_setAddress_PARM_3 + 1),a
      000604 E5*4C            [12] 2266 	mov	a,_fillRect_PARM_4
      000606 25*48            [12] 2267 	add	a,_fillRect_PARM_2
      000608 FC               [12] 2268 	mov	r4,a
      000609 E5*4D            [12] 2269 	mov	a,(_fillRect_PARM_4 + 1)
      00060B 35*49            [12] 2270 	addc	a,(_fillRect_PARM_2 + 1)
      00060D FD               [12] 2271 	mov	r5,a
      00060E EC               [12] 2272 	mov	a,r4
      00060F 24 FF            [12] 2273 	add	a,#0xff
      000611 F5*04            [12] 2274 	mov	_setAddress_PARM_4,a
      000613 ED               [12] 2275 	mov	a,r5
      000614 34 FF            [12] 2276 	addc	a,#0xff
      000616 F5*05            [12] 2277 	mov	(_setAddress_PARM_4 + 1),a
      000618 85*48*00         [24] 2278 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      00061B 85*49*01         [24] 2279 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      00061E 8E 82            [24] 2280 	mov	dpl,r6
      000620 8F 83            [24] 2281 	mov	dph,r7
      000622 12r03r69         [24] 2282 	lcall	_setAddress
                                   2283 ;	ecen4330lab7.c:556: write8Reg(0x2C);
                                   2284 ;	assignBit
      000625 C2 B5            [12] 2285 	clr	_P3_5
                                   2286 ;	assignBit
      000627 D2 B4            [12] 2287 	setb	_P3_4
      000629 85*02 82         [24] 2288 	mov	dpl,_lcd_address
      00062C 85*03 83         [24] 2289 	mov	dph,(_lcd_address + 1)
      00062F 74 2C            [12] 2290 	mov	a,#0x2c
      000631 F0               [24] 2291 	movx	@dptr,a
                                   2292 ;	assignBit
      000632 C2 B4            [12] 2293 	clr	_P3_4
                                   2294 ;	ecen4330lab7.c:557: CD = 1;
                                   2295 ;	assignBit
      000634 D2 B5            [12] 2296 	setb	_P3_5
                                   2297 ;	ecen4330lab7.c:558: for(y=h; y>0; y--)
      000636 AF*4F            [24] 2298 	mov	r7,(_fillRect_PARM_5 + 1)
      000638 AD*4C            [24] 2299 	mov	r5,_fillRect_PARM_4
      00063A AE*4D            [24] 2300 	mov	r6,(_fillRect_PARM_4 + 1)
      00063C                       2301 00114$:
      00063C ED               [12] 2302 	mov	a,r5
      00063D 4E               [12] 2303 	orl	a,r6
      00063E 60 30            [24] 2304 	jz	00116$
                                   2305 ;	ecen4330lab7.c:560: for(x=w; x>0; x--)
      000640 AB*4A            [24] 2306 	mov	r3,_fillRect_PARM_3
      000642 AC*4B            [24] 2307 	mov	r4,(_fillRect_PARM_3 + 1)
      000644                       2308 00111$:
      000644 EB               [12] 2309 	mov	a,r3
      000645 4C               [12] 2310 	orl	a,r4
      000646 60 21            [24] 2311 	jz	00115$
                                   2312 ;	ecen4330lab7.c:562: write8(color>>8); 
                                   2313 ;	assignBit
      000648 D2 B4            [12] 2314 	setb	_P3_4
      00064A 85*02 82         [24] 2315 	mov	dpl,_lcd_address
      00064D 85*03 83         [24] 2316 	mov	dph,(_lcd_address + 1)
      000650 EF               [12] 2317 	mov	a,r7
      000651 F0               [24] 2318 	movx	@dptr,a
                                   2319 ;	assignBit
      000652 C2 B4            [12] 2320 	clr	_P3_4
                                   2321 ;	ecen4330lab7.c:563: write8(color);
                                   2322 ;	assignBit
      000654 D2 B4            [12] 2323 	setb	_P3_4
      000656 85*02 82         [24] 2324 	mov	dpl,_lcd_address
      000659 85*03 83         [24] 2325 	mov	dph,(_lcd_address + 1)
      00065C E5*4E            [12] 2326 	mov	a,_fillRect_PARM_5
      00065E FA               [12] 2327 	mov	r2,a
      00065F F0               [24] 2328 	movx	@dptr,a
                                   2329 ;	assignBit
      000660 C2 B4            [12] 2330 	clr	_P3_4
                                   2331 ;	ecen4330lab7.c:560: for(x=w; x>0; x--)
      000662 1B               [12] 2332 	dec	r3
      000663 BB FF 01         [24] 2333 	cjne	r3,#0xff,00167$
      000666 1C               [12] 2334 	dec	r4
      000667                       2335 00167$:
      000667 80 DB            [24] 2336 	sjmp	00111$
      000669                       2337 00115$:
                                   2338 ;	ecen4330lab7.c:558: for(y=h; y>0; y--)
      000669 1D               [12] 2339 	dec	r5
      00066A BD FF 01         [24] 2340 	cjne	r5,#0xff,00168$
      00066D 1E               [12] 2341 	dec	r6
      00066E                       2342 00168$:
      00066E 80 CC            [24] 2343 	sjmp	00114$
      000670                       2344 00116$:
                                   2345 ;	ecen4330lab7.c:566: }
      000670 22               [24] 2346 	ret
                                   2347 ;------------------------------------------------------------
                                   2348 ;Allocation info for local variables in function 'fillScreen'
                                   2349 ;------------------------------------------------------------
                                   2350 ;Color                     Allocated to registers r6 r7 
                                   2351 ;len                       Allocated to registers 
                                   2352 ;blocks                    Allocated to registers r4 r7 
                                   2353 ;i                         Allocated to registers r3 
                                   2354 ;hi                        Allocated to registers r5 
                                   2355 ;lo                        Allocated to registers r6 
                                   2356 ;------------------------------------------------------------
                                   2357 ;	ecen4330lab7.c:574: void fillScreen(unsigned int Color){
                                   2358 ;	-----------------------------------------
                                   2359 ;	 function fillScreen
                                   2360 ;	-----------------------------------------
      000671                       2361 _fillScreen:
      000671 AE 82            [24] 2362 	mov	r6,dpl
      000673 AF 83            [24] 2363 	mov	r7,dph
                                   2364 ;	ecen4330lab7.c:577: unsigned char  i, hi = Color >> 8, lo = Color;
      000675 8F 05            [24] 2365 	mov	ar5,r7
                                   2366 ;	ecen4330lab7.c:580: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      000677 E4               [12] 2367 	clr	a
      000678 F5*00            [12] 2368 	mov	_setAddress_PARM_2,a
      00067A F5*01            [12] 2369 	mov	(_setAddress_PARM_2 + 1),a
      00067C 75*02 EF         [24] 2370 	mov	_setAddress_PARM_3,#0xef
                                   2371 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      00067F F5*03            [12] 2372 	mov	(_setAddress_PARM_3 + 1),a
      000681 75*04 3F         [24] 2373 	mov	_setAddress_PARM_4,#0x3f
      000684 75*05 01         [24] 2374 	mov	(_setAddress_PARM_4 + 1),#0x01
      000687 90 00 00         [24] 2375 	mov	dptr,#0x0000
      00068A C0 06            [24] 2376 	push	ar6
      00068C C0 05            [24] 2377 	push	ar5
      00068E 12r03r69         [24] 2378 	lcall	_setAddress
      000691 D0 05            [24] 2379 	pop	ar5
      000693 D0 06            [24] 2380 	pop	ar6
                                   2381 ;	ecen4330lab7.c:581: write8Reg(0x2C);
                                   2382 ;	assignBit
      000695 C2 B5            [12] 2383 	clr	_P3_5
                                   2384 ;	assignBit
      000697 D2 B4            [12] 2385 	setb	_P3_4
      000699 85*02 82         [24] 2386 	mov	dpl,_lcd_address
      00069C 85*03 83         [24] 2387 	mov	dph,(_lcd_address + 1)
      00069F 74 2C            [12] 2388 	mov	a,#0x2c
      0006A1 F0               [24] 2389 	movx	@dptr,a
                                   2390 ;	assignBit
      0006A2 C2 B4            [12] 2391 	clr	_P3_4
                                   2392 ;	ecen4330lab7.c:582: CD = 1;
                                   2393 ;	assignBit
      0006A4 D2 B5            [12] 2394 	setb	_P3_5
                                   2395 ;	ecen4330lab7.c:583: write8(hi); 
                                   2396 ;	assignBit
      0006A6 D2 B4            [12] 2397 	setb	_P3_4
      0006A8 85*02 82         [24] 2398 	mov	dpl,_lcd_address
      0006AB 85*03 83         [24] 2399 	mov	dph,(_lcd_address + 1)
      0006AE ED               [12] 2400 	mov	a,r5
      0006AF F0               [24] 2401 	movx	@dptr,a
                                   2402 ;	assignBit
      0006B0 C2 B4            [12] 2403 	clr	_P3_4
                                   2404 ;	ecen4330lab7.c:584: write8(lo);
                                   2405 ;	assignBit
      0006B2 D2 B4            [12] 2406 	setb	_P3_4
      0006B4 85*02 82         [24] 2407 	mov	dpl,_lcd_address
      0006B7 85*03 83         [24] 2408 	mov	dph,(_lcd_address + 1)
      0006BA EE               [12] 2409 	mov	a,r6
      0006BB F0               [24] 2410 	movx	@dptr,a
                                   2411 ;	assignBit
      0006BC C2 B4            [12] 2412 	clr	_P3_4
                                   2413 ;	ecen4330lab7.c:586: while(blocks--) {
      0006BE 7C B0            [12] 2414 	mov	r4,#0xb0
      0006C0 7F 04            [12] 2415 	mov	r7,#0x04
      0006C2                       2416 00104$:
      0006C2 8C 02            [24] 2417 	mov	ar2,r4
      0006C4 8F 03            [24] 2418 	mov	ar3,r7
      0006C6 1C               [12] 2419 	dec	r4
      0006C7 BC FF 01         [24] 2420 	cjne	r4,#0xff,00140$
      0006CA 1F               [12] 2421 	dec	r7
      0006CB                       2422 00140$:
      0006CB EA               [12] 2423 	mov	a,r2
      0006CC 4B               [12] 2424 	orl	a,r3
      0006CD 60 66            [24] 2425 	jz	00106$
                                   2426 ;	ecen4330lab7.c:588: do {
      0006CF 7B 10            [12] 2427 	mov	r3,#0x10
      0006D1                       2428 00101$:
                                   2429 ;	ecen4330lab7.c:589: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2430 ;	assignBit
      0006D1 D2 B4            [12] 2431 	setb	_P3_4
      0006D3 85*02 82         [24] 2432 	mov	dpl,_lcd_address
      0006D6 85*03 83         [24] 2433 	mov	dph,(_lcd_address + 1)
      0006D9 ED               [12] 2434 	mov	a,r5
      0006DA F0               [24] 2435 	movx	@dptr,a
                                   2436 ;	assignBit
      0006DB C2 B4            [12] 2437 	clr	_P3_4
                                   2438 ;	assignBit
      0006DD D2 B4            [12] 2439 	setb	_P3_4
      0006DF 85*02 82         [24] 2440 	mov	dpl,_lcd_address
      0006E2 85*03 83         [24] 2441 	mov	dph,(_lcd_address + 1)
      0006E5 EE               [12] 2442 	mov	a,r6
      0006E6 F0               [24] 2443 	movx	@dptr,a
                                   2444 ;	assignBit
      0006E7 C2 B4            [12] 2445 	clr	_P3_4
                                   2446 ;	assignBit
      0006E9 D2 B4            [12] 2447 	setb	_P3_4
      0006EB 85*02 82         [24] 2448 	mov	dpl,_lcd_address
      0006EE 85*03 83         [24] 2449 	mov	dph,(_lcd_address + 1)
      0006F1 ED               [12] 2450 	mov	a,r5
      0006F2 F0               [24] 2451 	movx	@dptr,a
                                   2452 ;	assignBit
      0006F3 C2 B4            [12] 2453 	clr	_P3_4
                                   2454 ;	assignBit
      0006F5 D2 B4            [12] 2455 	setb	_P3_4
      0006F7 85*02 82         [24] 2456 	mov	dpl,_lcd_address
      0006FA 85*03 83         [24] 2457 	mov	dph,(_lcd_address + 1)
      0006FD EE               [12] 2458 	mov	a,r6
      0006FE F0               [24] 2459 	movx	@dptr,a
                                   2460 ;	assignBit
      0006FF C2 B4            [12] 2461 	clr	_P3_4
                                   2462 ;	ecen4330lab7.c:590: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2463 ;	assignBit
      000701 D2 B4            [12] 2464 	setb	_P3_4
      000703 85*02 82         [24] 2465 	mov	dpl,_lcd_address
      000706 85*03 83         [24] 2466 	mov	dph,(_lcd_address + 1)
      000709 ED               [12] 2467 	mov	a,r5
      00070A F0               [24] 2468 	movx	@dptr,a
                                   2469 ;	assignBit
      00070B C2 B4            [12] 2470 	clr	_P3_4
                                   2471 ;	assignBit
      00070D D2 B4            [12] 2472 	setb	_P3_4
      00070F 85*02 82         [24] 2473 	mov	dpl,_lcd_address
      000712 85*03 83         [24] 2474 	mov	dph,(_lcd_address + 1)
      000715 EE               [12] 2475 	mov	a,r6
      000716 F0               [24] 2476 	movx	@dptr,a
                                   2477 ;	assignBit
      000717 C2 B4            [12] 2478 	clr	_P3_4
                                   2479 ;	assignBit
      000719 D2 B4            [12] 2480 	setb	_P3_4
      00071B 85*02 82         [24] 2481 	mov	dpl,_lcd_address
      00071E 85*03 83         [24] 2482 	mov	dph,(_lcd_address + 1)
      000721 ED               [12] 2483 	mov	a,r5
      000722 F0               [24] 2484 	movx	@dptr,a
                                   2485 ;	assignBit
      000723 C2 B4            [12] 2486 	clr	_P3_4
                                   2487 ;	assignBit
      000725 D2 B4            [12] 2488 	setb	_P3_4
      000727 85*02 82         [24] 2489 	mov	dpl,_lcd_address
      00072A 85*03 83         [24] 2490 	mov	dph,(_lcd_address + 1)
      00072D EE               [12] 2491 	mov	a,r6
      00072E F0               [24] 2492 	movx	@dptr,a
                                   2493 ;	assignBit
      00072F C2 B4            [12] 2494 	clr	_P3_4
                                   2495 ;	ecen4330lab7.c:591: } while(--i);
      000731 DB 9E            [24] 2496 	djnz	r3,00101$
      000733 80 8D            [24] 2497 	sjmp	00104$
      000735                       2498 00106$:
                                   2499 ;	ecen4330lab7.c:593: for(i = (char)len & 63; i--; ) {
      000735 7F 3F            [12] 2500 	mov	r7,#0x3f
      000737                       2501 00109$:
      000737 8F 04            [24] 2502 	mov	ar4,r7
      000739 1F               [12] 2503 	dec	r7
      00073A EC               [12] 2504 	mov	a,r4
      00073B 60 1A            [24] 2505 	jz	00111$
                                   2506 ;	ecen4330lab7.c:594: write8(hi); 
                                   2507 ;	assignBit
      00073D D2 B4            [12] 2508 	setb	_P3_4
      00073F 85*02 82         [24] 2509 	mov	dpl,_lcd_address
      000742 85*03 83         [24] 2510 	mov	dph,(_lcd_address + 1)
      000745 ED               [12] 2511 	mov	a,r5
      000746 F0               [24] 2512 	movx	@dptr,a
                                   2513 ;	assignBit
      000747 C2 B4            [12] 2514 	clr	_P3_4
                                   2515 ;	ecen4330lab7.c:595: write8(lo);
                                   2516 ;	assignBit
      000749 D2 B4            [12] 2517 	setb	_P3_4
      00074B 85*02 82         [24] 2518 	mov	dpl,_lcd_address
      00074E 85*03 83         [24] 2519 	mov	dph,(_lcd_address + 1)
      000751 EE               [12] 2520 	mov	a,r6
      000752 F0               [24] 2521 	movx	@dptr,a
                                   2522 ;	assignBit
      000753 C2 B4            [12] 2523 	clr	_P3_4
      000755 80 E0            [24] 2524 	sjmp	00109$
      000757                       2525 00111$:
                                   2526 ;	ecen4330lab7.c:597: }
      000757 22               [24] 2527 	ret
                                   2528 ;------------------------------------------------------------
                                   2529 ;Allocation info for local variables in function 'drawChar'
                                   2530 ;------------------------------------------------------------
                                   2531 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2532 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2533 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2534 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2535 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2536 ;x                         Allocated with name '_drawChar_x_65536_311'
                                   2537 ;i                         Allocated to registers r3 
                                   2538 ;line                      Allocated with name '_drawChar_line_196608_315'
                                   2539 ;j                         Allocated to registers r2 
                                   2540 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2541 ;------------------------------------------------------------
                                   2542 ;	ecen4330lab7.c:605: void drawChar(int x, int y, unsigned char c,u16 color, u16 bg, u8 size){
                                   2543 ;	-----------------------------------------
                                   2544 ;	 function drawChar
                                   2545 ;	-----------------------------------------
      000758                       2546 _drawChar:
      000758 85 82*58         [24] 2547 	mov	_drawChar_x_65536_311,dpl
      00075B 85 83*59         [24] 2548 	mov	(_drawChar_x_65536_311 + 1),dph
                                   2549 ;	ecen4330lab7.c:606: if ((x >=TFTWIDTH) || // Clip right
      00075E C3               [12] 2550 	clr	c
      00075F E5*58            [12] 2551 	mov	a,_drawChar_x_65536_311
      000761 94 F0            [12] 2552 	subb	a,#0xf0
      000763 E5*59            [12] 2553 	mov	a,(_drawChar_x_65536_311 + 1)
      000765 64 80            [12] 2554 	xrl	a,#0x80
      000767 94 80            [12] 2555 	subb	a,#0x80
      000769 50 59            [24] 2556 	jnc	00101$
                                   2557 ;	ecen4330lab7.c:607: (y >=TFTHEIGHT)           || // Clip bottom
      00076B C3               [12] 2558 	clr	c
      00076C E5*50            [12] 2559 	mov	a,_drawChar_PARM_2
      00076E 94 40            [12] 2560 	subb	a,#0x40
      000770 E5*51            [12] 2561 	mov	a,(_drawChar_PARM_2 + 1)
      000772 64 80            [12] 2562 	xrl	a,#0x80
      000774 94 81            [12] 2563 	subb	a,#0x81
      000776 50 4C            [24] 2564 	jnc	00101$
                                   2565 ;	ecen4330lab7.c:608: ((x + 6 * size - 1) < 0) || // Clip left
      000778 AC*57            [24] 2566 	mov	r4,_drawChar_PARM_6
      00077A 7D 00            [12] 2567 	mov	r5,#0x00
      00077C 8C*00            [24] 2568 	mov	__mulint_PARM_2,r4
      00077E 8D*01            [24] 2569 	mov	(__mulint_PARM_2 + 1),r5
      000780 90 00 06         [24] 2570 	mov	dptr,#0x0006
      000783 C0 05            [24] 2571 	push	ar5
      000785 C0 04            [24] 2572 	push	ar4
      000787 12r00r00         [24] 2573 	lcall	__mulint
      00078A AA 82            [24] 2574 	mov	r2,dpl
      00078C AB 83            [24] 2575 	mov	r3,dph
      00078E D0 04            [24] 2576 	pop	ar4
      000790 D0 05            [24] 2577 	pop	ar5
      000792 EA               [12] 2578 	mov	a,r2
      000793 25*58            [12] 2579 	add	a,_drawChar_x_65536_311
      000795 FA               [12] 2580 	mov	r2,a
      000796 EB               [12] 2581 	mov	a,r3
      000797 35*59            [12] 2582 	addc	a,(_drawChar_x_65536_311 + 1)
      000799 FB               [12] 2583 	mov	r3,a
      00079A 1A               [12] 2584 	dec	r2
      00079B BA FF 01         [24] 2585 	cjne	r2,#0xff,00182$
      00079E 1B               [12] 2586 	dec	r3
      00079F                       2587 00182$:
      00079F EB               [12] 2588 	mov	a,r3
      0007A0 20 E7 21         [24] 2589 	jb	acc.7,00101$
                                   2590 ;	ecen4330lab7.c:609: ((y + 8 * size - 1) < 0))   // Clip top
      0007A3 ED               [12] 2591 	mov	a,r5
      0007A4 C4               [12] 2592 	swap	a
      0007A5 03               [12] 2593 	rr	a
      0007A6 54 F8            [12] 2594 	anl	a,#0xf8
      0007A8 CC               [12] 2595 	xch	a,r4
      0007A9 C4               [12] 2596 	swap	a
      0007AA 03               [12] 2597 	rr	a
      0007AB CC               [12] 2598 	xch	a,r4
      0007AC 6C               [12] 2599 	xrl	a,r4
      0007AD CC               [12] 2600 	xch	a,r4
      0007AE 54 F8            [12] 2601 	anl	a,#0xf8
      0007B0 CC               [12] 2602 	xch	a,r4
      0007B1 6C               [12] 2603 	xrl	a,r4
      0007B2 FD               [12] 2604 	mov	r5,a
      0007B3 EC               [12] 2605 	mov	a,r4
      0007B4 25*50            [12] 2606 	add	a,_drawChar_PARM_2
      0007B6 FC               [12] 2607 	mov	r4,a
      0007B7 ED               [12] 2608 	mov	a,r5
      0007B8 35*51            [12] 2609 	addc	a,(_drawChar_PARM_2 + 1)
      0007BA FD               [12] 2610 	mov	r5,a
      0007BB 1C               [12] 2611 	dec	r4
      0007BC BC FF 01         [24] 2612 	cjne	r4,#0xff,00184$
      0007BF 1D               [12] 2613 	dec	r5
      0007C0                       2614 00184$:
      0007C0 ED               [12] 2615 	mov	a,r5
      0007C1 30 E7 01         [24] 2616 	jnb	acc.7,00141$
      0007C4                       2617 00101$:
                                   2618 ;	ecen4330lab7.c:611: return;
      0007C4 22               [24] 2619 	ret
                                   2620 ;	ecen4330lab7.c:614: for (char i=0; i<6; i++ )
      0007C5                       2621 00141$:
      0007C5 74 01            [12] 2622 	mov	a,#0x01
      0007C7 B5*57 04         [24] 2623 	cjne	a,_drawChar_PARM_6,00186$
      0007CA 74 01            [12] 2624 	mov	a,#0x01
      0007CC 80 01            [24] 2625 	sjmp	00187$
      0007CE                       2626 00186$:
      0007CE E4               [12] 2627 	clr	a
      0007CF                       2628 00187$:
      0007CF FD               [12] 2629 	mov	r5,a
      0007D0 FC               [12] 2630 	mov	r4,a
      0007D1 E5*53            [12] 2631 	mov	a,_drawChar_PARM_4
      0007D3 B5*55 08         [24] 2632 	cjne	a,_drawChar_PARM_5,00188$
      0007D6 E5*54            [12] 2633 	mov	a,(_drawChar_PARM_4 + 1)
      0007D8 B5*56 03         [24] 2634 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      0007DB D3               [12] 2635 	setb	c
      0007DC 80 01            [24] 2636 	sjmp	00189$
      0007DE                       2637 00188$:
      0007DE C3               [12] 2638 	clr	c
      0007DF                       2639 00189$:
      0007DF 92*00            [24] 2640 	mov	_drawChar_sloc0_1_0,c
      0007E1 7B 00            [12] 2641 	mov	r3,#0x00
      0007E3                       2642 00126$:
      0007E3 BB 06 00         [24] 2643 	cjne	r3,#0x06,00190$
      0007E6                       2644 00190$:
      0007E6 40 01            [24] 2645 	jc	00191$
      0007E8 22               [24] 2646 	ret
      0007E9                       2647 00191$:
                                   2648 ;	ecen4330lab7.c:618: if (i == 5)
      0007E9 BB 05 05         [24] 2649 	cjne	r3,#0x05,00107$
                                   2650 ;	ecen4330lab7.c:620: line = 0x0;
      0007EC 75*5A 00         [24] 2651 	mov	_drawChar_line_196608_315,#0x00
      0007EF 80 30            [24] 2652 	sjmp	00140$
      0007F1                       2653 00107$:
                                   2654 ;	ecen4330lab7.c:624: line = pgm_read_byte(font+(c*5)+i);
      0007F1 85*52*00         [24] 2655 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0007F4 75*01 00         [24] 2656 	mov	(__mulint_PARM_2 + 1),#0x00
      0007F7 90 00 05         [24] 2657 	mov	dptr,#0x0005
      0007FA C0 05            [24] 2658 	push	ar5
      0007FC C0 04            [24] 2659 	push	ar4
      0007FE C0 03            [24] 2660 	push	ar3
      000800 12r00r00         [24] 2661 	lcall	__mulint
      000803 A8 82            [24] 2662 	mov	r0,dpl
      000805 A9 83            [24] 2663 	mov	r1,dph
      000807 D0 03            [24] 2664 	pop	ar3
      000809 D0 04            [24] 2665 	pop	ar4
      00080B D0 05            [24] 2666 	pop	ar5
      00080D E8               [12] 2667 	mov	a,r0
      00080E 24r00            [12] 2668 	add	a,#_font
      000810 F8               [12] 2669 	mov	r0,a
      000811 E9               [12] 2670 	mov	a,r1
      000812 34s00            [12] 2671 	addc	a,#(_font >> 8)
      000814 F9               [12] 2672 	mov	r1,a
      000815 EB               [12] 2673 	mov	a,r3
      000816 28               [12] 2674 	add	a,r0
      000817 F5 82            [12] 2675 	mov	dpl,a
      000819 E4               [12] 2676 	clr	a
      00081A 39               [12] 2677 	addc	a,r1
      00081B F5 83            [12] 2678 	mov	dph,a
      00081D E4               [12] 2679 	clr	a
      00081E 93               [24] 2680 	movc	a,@a+dptr
      00081F F5*5A            [12] 2681 	mov	_drawChar_line_196608_315,a
                                   2682 ;	ecen4330lab7.c:627: for (char j = 0; j<8; j++)
      000821                       2683 00140$:
      000821 8B F0            [24] 2684 	mov	b,r3
      000823 E5*57            [12] 2685 	mov	a,_drawChar_PARM_6
      000825 A4               [48] 2686 	mul	ab
      000826 25*58            [12] 2687 	add	a,_drawChar_x_65536_311
      000828 F8               [12] 2688 	mov	r0,a
      000829 E5*59            [12] 2689 	mov	a,(_drawChar_x_65536_311 + 1)
      00082B 35 F0            [12] 2690 	addc	a,b
      00082D F9               [12] 2691 	mov	r1,a
      00082E 88*5B            [24] 2692 	mov	_drawChar_sloc1_1_0,r0
      000830 89*5C            [24] 2693 	mov	(_drawChar_sloc1_1_0 + 1),r1
      000832 7A 00            [12] 2694 	mov	r2,#0x00
      000834                       2695 00123$:
      000834 BA 08 00         [24] 2696 	cjne	r2,#0x08,00194$
      000837                       2697 00194$:
      000837 40 03            [24] 2698 	jc	00195$
      000839 02r09r5E         [24] 2699 	ljmp	00127$
      00083C                       2700 00195$:
                                   2701 ;	ecen4330lab7.c:629: if (line & 0x1)
      00083C E5*5A            [12] 2702 	mov	a,_drawChar_line_196608_315
      00083E 20 E0 03         [24] 2703 	jb	acc.0,00196$
      000841 02r08rCC         [24] 2704 	ljmp	00118$
      000844                       2705 00196$:
                                   2706 ;	ecen4330lab7.c:631: if (size == 1) // default size
      000844 ED               [12] 2707 	mov	a,r5
      000845 60 40            [24] 2708 	jz	00110$
                                   2709 ;	ecen4330lab7.c:633: drawPixel(x+i, y+j, color);
      000847 8B 06            [24] 2710 	mov	ar6,r3
      000849 7F 00            [12] 2711 	mov	r7,#0x00
      00084B EE               [12] 2712 	mov	a,r6
      00084C 25*58            [12] 2713 	add	a,_drawChar_x_65536_311
      00084E F5 82            [12] 2714 	mov	dpl,a
      000850 EF               [12] 2715 	mov	a,r7
      000851 35*59            [12] 2716 	addc	a,(_drawChar_x_65536_311 + 1)
      000853 F5 83            [12] 2717 	mov	dph,a
      000855 8A 06            [24] 2718 	mov	ar6,r2
      000857 7F 00            [12] 2719 	mov	r7,#0x00
      000859 EE               [12] 2720 	mov	a,r6
      00085A 25*50            [12] 2721 	add	a,_drawChar_PARM_2
      00085C F5*44            [12] 2722 	mov	_drawPixel_PARM_2,a
      00085E EF               [12] 2723 	mov	a,r7
      00085F 35*51            [12] 2724 	addc	a,(_drawChar_PARM_2 + 1)
      000861 F5*45            [12] 2725 	mov	(_drawPixel_PARM_2 + 1),a
      000863 85*53*46         [24] 2726 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000866 85*54*47         [24] 2727 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      000869 C0 05            [24] 2728 	push	ar5
      00086B C0 04            [24] 2729 	push	ar4
      00086D C0 03            [24] 2730 	push	ar3
      00086F C0 02            [24] 2731 	push	ar2
      000871 C0 01            [24] 2732 	push	ar1
      000873 C0 00            [24] 2733 	push	ar0
      000875 12r05r43         [24] 2734 	lcall	_drawPixel
      000878 D0 00            [24] 2735 	pop	ar0
      00087A D0 01            [24] 2736 	pop	ar1
      00087C D0 02            [24] 2737 	pop	ar2
      00087E D0 03            [24] 2738 	pop	ar3
      000880 D0 04            [24] 2739 	pop	ar4
      000882 D0 05            [24] 2740 	pop	ar5
      000884 02r09r54         [24] 2741 	ljmp	00119$
      000887                       2742 00110$:
                                   2743 ;	ecen4330lab7.c:636: fillRect(x+(i*size), y+(j*size), size, size, color);
      000887 8A F0            [24] 2744 	mov	b,r2
      000889 E5*57            [12] 2745 	mov	a,_drawChar_PARM_6
      00088B A4               [48] 2746 	mul	ab
      00088C 25*50            [12] 2747 	add	a,_drawChar_PARM_2
      00088E F5*48            [12] 2748 	mov	_fillRect_PARM_2,a
      000890 E5*51            [12] 2749 	mov	a,(_drawChar_PARM_2 + 1)
      000892 35 F0            [12] 2750 	addc	a,b
      000894 F5*49            [12] 2751 	mov	(_fillRect_PARM_2 + 1),a
      000896 AE*57            [24] 2752 	mov	r6,_drawChar_PARM_6
      000898 7F 00            [12] 2753 	mov	r7,#0x00
      00089A 8E*4A            [24] 2754 	mov	_fillRect_PARM_3,r6
      00089C 8F*4B            [24] 2755 	mov	(_fillRect_PARM_3 + 1),r7
      00089E 8E*4C            [24] 2756 	mov	_fillRect_PARM_4,r6
      0008A0 8F*4D            [24] 2757 	mov	(_fillRect_PARM_4 + 1),r7
      0008A2 85*53*4E         [24] 2758 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      0008A5 85*54*4F         [24] 2759 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      0008A8 85*5B 82         [24] 2760 	mov	dpl,_drawChar_sloc1_1_0
      0008AB 85*5C 83         [24] 2761 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      0008AE C0 05            [24] 2762 	push	ar5
      0008B0 C0 04            [24] 2763 	push	ar4
      0008B2 C0 03            [24] 2764 	push	ar3
      0008B4 C0 02            [24] 2765 	push	ar2
      0008B6 C0 01            [24] 2766 	push	ar1
      0008B8 C0 00            [24] 2767 	push	ar0
      0008BA 12r05r94         [24] 2768 	lcall	_fillRect
      0008BD D0 00            [24] 2769 	pop	ar0
      0008BF D0 01            [24] 2770 	pop	ar1
      0008C1 D0 02            [24] 2771 	pop	ar2
      0008C3 D0 03            [24] 2772 	pop	ar3
      0008C5 D0 04            [24] 2773 	pop	ar4
      0008C7 D0 05            [24] 2774 	pop	ar5
      0008C9 02r09r54         [24] 2775 	ljmp	00119$
      0008CC                       2776 00118$:
                                   2777 ;	ecen4330lab7.c:638: } else if (bg != color)
      0008CC 30*00 03         [24] 2778 	jnb	_drawChar_sloc0_1_0,00198$
      0008CF 02r09r54         [24] 2779 	ljmp	00119$
      0008D2                       2780 00198$:
                                   2781 ;	ecen4330lab7.c:640: if (size == 1) // default size
      0008D2 EC               [12] 2782 	mov	a,r4
      0008D3 60 3F            [24] 2783 	jz	00113$
                                   2784 ;	ecen4330lab7.c:642: drawPixel(x+i, y+j, bg);
      0008D5 8B 06            [24] 2785 	mov	ar6,r3
      0008D7 7F 00            [12] 2786 	mov	r7,#0x00
      0008D9 EE               [12] 2787 	mov	a,r6
      0008DA 25*58            [12] 2788 	add	a,_drawChar_x_65536_311
      0008DC F5 82            [12] 2789 	mov	dpl,a
      0008DE EF               [12] 2790 	mov	a,r7
      0008DF 35*59            [12] 2791 	addc	a,(_drawChar_x_65536_311 + 1)
      0008E1 F5 83            [12] 2792 	mov	dph,a
      0008E3 8A 06            [24] 2793 	mov	ar6,r2
      0008E5 7F 00            [12] 2794 	mov	r7,#0x00
      0008E7 EE               [12] 2795 	mov	a,r6
      0008E8 25*50            [12] 2796 	add	a,_drawChar_PARM_2
      0008EA F5*44            [12] 2797 	mov	_drawPixel_PARM_2,a
      0008EC EF               [12] 2798 	mov	a,r7
      0008ED 35*51            [12] 2799 	addc	a,(_drawChar_PARM_2 + 1)
      0008EF F5*45            [12] 2800 	mov	(_drawPixel_PARM_2 + 1),a
      0008F1 85*55*46         [24] 2801 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      0008F4 85*56*47         [24] 2802 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      0008F7 C0 05            [24] 2803 	push	ar5
      0008F9 C0 04            [24] 2804 	push	ar4
      0008FB C0 03            [24] 2805 	push	ar3
      0008FD C0 02            [24] 2806 	push	ar2
      0008FF C0 01            [24] 2807 	push	ar1
      000901 C0 00            [24] 2808 	push	ar0
      000903 12r05r43         [24] 2809 	lcall	_drawPixel
      000906 D0 00            [24] 2810 	pop	ar0
      000908 D0 01            [24] 2811 	pop	ar1
      00090A D0 02            [24] 2812 	pop	ar2
      00090C D0 03            [24] 2813 	pop	ar3
      00090E D0 04            [24] 2814 	pop	ar4
      000910 D0 05            [24] 2815 	pop	ar5
      000912 80 40            [24] 2816 	sjmp	00119$
      000914                       2817 00113$:
                                   2818 ;	ecen4330lab7.c:646: fillRect(x+i*size, y+j*size, size, size, bg);
      000914 8A F0            [24] 2819 	mov	b,r2
      000916 E5*57            [12] 2820 	mov	a,_drawChar_PARM_6
      000918 A4               [48] 2821 	mul	ab
      000919 25*50            [12] 2822 	add	a,_drawChar_PARM_2
      00091B F5*48            [12] 2823 	mov	_fillRect_PARM_2,a
      00091D E5*51            [12] 2824 	mov	a,(_drawChar_PARM_2 + 1)
      00091F 35 F0            [12] 2825 	addc	a,b
      000921 F5*49            [12] 2826 	mov	(_fillRect_PARM_2 + 1),a
      000923 AE*57            [24] 2827 	mov	r6,_drawChar_PARM_6
      000925 7F 00            [12] 2828 	mov	r7,#0x00
      000927 8E*4A            [24] 2829 	mov	_fillRect_PARM_3,r6
      000929 8F*4B            [24] 2830 	mov	(_fillRect_PARM_3 + 1),r7
      00092B 8E*4C            [24] 2831 	mov	_fillRect_PARM_4,r6
      00092D 8F*4D            [24] 2832 	mov	(_fillRect_PARM_4 + 1),r7
      00092F 85*55*4E         [24] 2833 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000932 85*56*4F         [24] 2834 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000935 88 82            [24] 2835 	mov	dpl,r0
      000937 89 83            [24] 2836 	mov	dph,r1
      000939 C0 05            [24] 2837 	push	ar5
      00093B C0 04            [24] 2838 	push	ar4
      00093D C0 03            [24] 2839 	push	ar3
      00093F C0 02            [24] 2840 	push	ar2
      000941 C0 01            [24] 2841 	push	ar1
      000943 C0 00            [24] 2842 	push	ar0
      000945 12r05r94         [24] 2843 	lcall	_fillRect
      000948 D0 00            [24] 2844 	pop	ar0
      00094A D0 01            [24] 2845 	pop	ar1
      00094C D0 02            [24] 2846 	pop	ar2
      00094E D0 03            [24] 2847 	pop	ar3
      000950 D0 04            [24] 2848 	pop	ar4
      000952 D0 05            [24] 2849 	pop	ar5
      000954                       2850 00119$:
                                   2851 ;	ecen4330lab7.c:650: line >>= 1;
      000954 E5*5A            [12] 2852 	mov	a,_drawChar_line_196608_315
      000956 C3               [12] 2853 	clr	c
      000957 13               [12] 2854 	rrc	a
      000958 F5*5A            [12] 2855 	mov	_drawChar_line_196608_315,a
                                   2856 ;	ecen4330lab7.c:627: for (char j = 0; j<8; j++)
      00095A 0A               [12] 2857 	inc	r2
      00095B 02r08r34         [24] 2858 	ljmp	00123$
      00095E                       2859 00127$:
                                   2860 ;	ecen4330lab7.c:614: for (char i=0; i<6; i++ )
      00095E 0B               [12] 2861 	inc	r3
                                   2862 ;	ecen4330lab7.c:654: }
      00095F 02r07rE3         [24] 2863 	ljmp	00126$
                                   2864 ;------------------------------------------------------------
                                   2865 ;Allocation info for local variables in function 'write'
                                   2866 ;------------------------------------------------------------
                                   2867 ;c                         Allocated to registers r7 
                                   2868 ;------------------------------------------------------------
                                   2869 ;	ecen4330lab7.c:662: void write(u8 c)
                                   2870 ;	-----------------------------------------
                                   2871 ;	 function write
                                   2872 ;	-----------------------------------------
      000962                       2873 _write:
      000962 AF 82            [24] 2874 	mov	r7,dpl
                                   2875 ;	ecen4330lab7.c:664: if (c == '\n')
      000964 BF 0A 22         [24] 2876 	cjne	r7,#0x0a,00105$
                                   2877 ;	ecen4330lab7.c:666: cursor_y += textsize*8;
      000967 AD*0C            [24] 2878 	mov	r5,_textsize
      000969 E4               [12] 2879 	clr	a
      00096A C4               [12] 2880 	swap	a
      00096B 03               [12] 2881 	rr	a
      00096C 54 F8            [12] 2882 	anl	a,#0xf8
      00096E CD               [12] 2883 	xch	a,r5
      00096F C4               [12] 2884 	swap	a
      000970 03               [12] 2885 	rr	a
      000971 CD               [12] 2886 	xch	a,r5
      000972 6D               [12] 2887 	xrl	a,r5
      000973 CD               [12] 2888 	xch	a,r5
      000974 54 F8            [12] 2889 	anl	a,#0xf8
      000976 CD               [12] 2890 	xch	a,r5
      000977 6D               [12] 2891 	xrl	a,r5
      000978 FE               [12] 2892 	mov	r6,a
      000979 ED               [12] 2893 	mov	a,r5
      00097A 25*0A            [12] 2894 	add	a,_cursor_y
      00097C F5*0A            [12] 2895 	mov	_cursor_y,a
      00097E EE               [12] 2896 	mov	a,r6
      00097F 35*0B            [12] 2897 	addc	a,(_cursor_y + 1)
      000981 F5*0B            [12] 2898 	mov	(_cursor_y + 1),a
                                   2899 ;	ecen4330lab7.c:667: cursor_x  = 0;
      000983 E4               [12] 2900 	clr	a
      000984 F5*08            [12] 2901 	mov	_cursor_x,a
      000986 F5*09            [12] 2902 	mov	(_cursor_x + 1),a
      000988 22               [24] 2903 	ret
      000989                       2904 00105$:
                                   2905 ;	ecen4330lab7.c:669: else if (c == '\r')
      000989 BF 0D 01         [24] 2906 	cjne	r7,#0x0d,00119$
      00098C 22               [24] 2907 	ret
      00098D                       2908 00119$:
                                   2909 ;	ecen4330lab7.c:675: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      00098D 85*0A*50         [24] 2910 	mov	_drawChar_PARM_2,_cursor_y
      000990 85*0B*51         [24] 2911 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000993 8F*52            [24] 2912 	mov	_drawChar_PARM_3,r7
      000995 85*0E*53         [24] 2913 	mov	_drawChar_PARM_4,_textcolor
      000998 85*0F*54         [24] 2914 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      00099B 85*10*55         [24] 2915 	mov	_drawChar_PARM_5,_textbgcolor
      00099E 85*11*56         [24] 2916 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      0009A1 85*0C*57         [24] 2917 	mov	_drawChar_PARM_6,_textsize
      0009A4 85*08 82         [24] 2918 	mov	dpl,_cursor_x
      0009A7 85*09 83         [24] 2919 	mov	dph,(_cursor_x + 1)
      0009AA 12r07r58         [24] 2920 	lcall	_drawChar
                                   2921 ;	ecen4330lab7.c:676: cursor_x += textsize*6;
      0009AD 85*0C*00         [24] 2922 	mov	__mulint_PARM_2,_textsize
      0009B0 75*01 00         [24] 2923 	mov	(__mulint_PARM_2 + 1),#0x00
      0009B3 90 00 06         [24] 2924 	mov	dptr,#0x0006
      0009B6 12r00r00         [24] 2925 	lcall	__mulint
      0009B9 AE 82            [24] 2926 	mov	r6,dpl
      0009BB AF 83            [24] 2927 	mov	r7,dph
      0009BD EE               [12] 2928 	mov	a,r6
      0009BE 25*08            [12] 2929 	add	a,_cursor_x
      0009C0 F5*08            [12] 2930 	mov	_cursor_x,a
      0009C2 EF               [12] 2931 	mov	a,r7
      0009C3 35*09            [12] 2932 	addc	a,(_cursor_x + 1)
      0009C5 F5*09            [12] 2933 	mov	(_cursor_x + 1),a
                                   2934 ;	ecen4330lab7.c:678: }
      0009C7 22               [24] 2935 	ret
                                   2936 ;------------------------------------------------------------
                                   2937 ;Allocation info for local variables in function 'LCD_string_write'
                                   2938 ;------------------------------------------------------------
                                   2939 ;str                       Allocated to registers r5 r6 r7 
                                   2940 ;i                         Allocated to registers r3 r4 
                                   2941 ;------------------------------------------------------------
                                   2942 ;	ecen4330lab7.c:686: void LCD_string_write(char *str)
                                   2943 ;	-----------------------------------------
                                   2944 ;	 function LCD_string_write
                                   2945 ;	-----------------------------------------
      0009C8                       2946 _LCD_string_write:
      0009C8 AD 82            [24] 2947 	mov	r5,dpl
      0009CA AE 83            [24] 2948 	mov	r6,dph
      0009CC AF F0            [24] 2949 	mov	r7,b
                                   2950 ;	ecen4330lab7.c:689: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      0009CE 7B 00            [12] 2951 	mov	r3,#0x00
      0009D0 7C 00            [12] 2952 	mov	r4,#0x00
      0009D2                       2953 00103$:
      0009D2 EB               [12] 2954 	mov	a,r3
      0009D3 2D               [12] 2955 	add	a,r5
      0009D4 F8               [12] 2956 	mov	r0,a
      0009D5 EC               [12] 2957 	mov	a,r4
      0009D6 3E               [12] 2958 	addc	a,r6
      0009D7 F9               [12] 2959 	mov	r1,a
      0009D8 8F 02            [24] 2960 	mov	ar2,r7
      0009DA 88 82            [24] 2961 	mov	dpl,r0
      0009DC 89 83            [24] 2962 	mov	dph,r1
      0009DE 8A F0            [24] 2963 	mov	b,r2
      0009E0 12r00r00         [24] 2964 	lcall	__gptrget
      0009E3 FA               [12] 2965 	mov	r2,a
      0009E4 60 20            [24] 2966 	jz	00105$
                                   2967 ;	ecen4330lab7.c:691: write(str[i]);  /* Call transmit data function */
      0009E6 8A 82            [24] 2968 	mov	dpl,r2
      0009E8 C0 07            [24] 2969 	push	ar7
      0009EA C0 06            [24] 2970 	push	ar6
      0009EC C0 05            [24] 2971 	push	ar5
      0009EE C0 04            [24] 2972 	push	ar4
      0009F0 C0 03            [24] 2973 	push	ar3
      0009F2 12r09r62         [24] 2974 	lcall	_write
      0009F5 D0 03            [24] 2975 	pop	ar3
      0009F7 D0 04            [24] 2976 	pop	ar4
      0009F9 D0 05            [24] 2977 	pop	ar5
      0009FB D0 06            [24] 2978 	pop	ar6
      0009FD D0 07            [24] 2979 	pop	ar7
                                   2980 ;	ecen4330lab7.c:689: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      0009FF 0B               [12] 2981 	inc	r3
      000A00 BB 00 CF         [24] 2982 	cjne	r3,#0x00,00103$
      000A03 0C               [12] 2983 	inc	r4
      000A04 80 CC            [24] 2984 	sjmp	00103$
      000A06                       2985 00105$:
                                   2986 ;	ecen4330lab7.c:693: }
      000A06 22               [24] 2987 	ret
                                   2988 ;------------------------------------------------------------
                                   2989 ;Allocation info for local variables in function 'keyDetect'
                                   2990 ;------------------------------------------------------------
                                   2991 ;	ecen4330lab7.c:713: unsigned char keyDetect(){
                                   2992 ;	-----------------------------------------
                                   2993 ;	 function keyDetect
                                   2994 ;	-----------------------------------------
      000A07                       2995 _keyDetect:
                                   2996 ;	ecen4330lab7.c:714: __KEYPAD_PORT__=0xF0;           /*set port direction as input-output*/
      000A07 75 90 F0         [24] 2997 	mov	_P1,#0xf0
                                   2998 ;	ecen4330lab7.c:715: received_flag = 0;
      000A0A 75*42 00         [24] 2999 	mov	_received_flag,#0x00
                                   3000 ;	ecen4330lab7.c:716: do
      000A0D                       3001 00102$:
                                   3002 ;	ecen4330lab7.c:718: __KEYPAD_PORT__ = 0xF0;
      000A0D 75 90 F0         [24] 3003 	mov	_P1,#0xf0
                                   3004 ;	ecen4330lab7.c:719: colloc = __KEYPAD_PORT__;
      000A10 85 90*00         [24] 3005 	mov	_colloc,_P1
                                   3006 ;	ecen4330lab7.c:720: colloc&= 0xF0;  /* mask port for column read only */
      000A13 53*00 F0         [24] 3007 	anl	_colloc,#0xf0
                                   3008 ;	ecen4330lab7.c:721: }while(colloc != 0xF0 && received_flag == 0);     /* read status of column */
      000A16 74 F0            [12] 3009 	mov	a,#0xf0
      000A18 B5*00 02         [24] 3010 	cjne	a,_colloc,00190$
      000A1B 80 04            [24] 3011 	sjmp	00106$
      000A1D                       3012 00190$:
      000A1D E5*42            [12] 3013 	mov	a,_received_flag
      000A1F 60 EC            [24] 3014 	jz	00102$
                                   3015 ;	ecen4330lab7.c:725: do
      000A21                       3016 00106$:
                                   3017 ;	ecen4330lab7.c:728: rtcPrint();
      000A21 12r01r70         [24] 3018 	lcall	_rtcPrint
                                   3019 ;	ecen4330lab7.c:729: delay(10);  /* 20ms key debounce time */
      000A24 90 00 0A         [24] 3020 	mov	dptr,#0x000a
      000A27 12r00r28         [24] 3021 	lcall	_delay
                                   3022 ;	ecen4330lab7.c:730: colloc = (__KEYPAD_PORT__ & 0xF0);  /* read status of column */
      000A2A E5 90            [12] 3023 	mov	a,_P1
      000A2C 54 F0            [12] 3024 	anl	a,#0xf0
      000A2E F5*00            [12] 3025 	mov	_colloc,a
                                   3026 ;	ecen4330lab7.c:731: }while(colloc == 0xF0 && received_flag == 0); /* check for any key press */
      000A30 74 F0            [12] 3027 	mov	a,#0xf0
      000A32 B5*00 04         [24] 3028 	cjne	a,_colloc,00108$
      000A35 E5*42            [12] 3029 	mov	a,_received_flag
      000A37 60 E8            [24] 3030 	jz	00106$
      000A39                       3031 00108$:
                                   3032 ;	ecen4330lab7.c:733: delay(1);
      000A39 90 00 01         [24] 3033 	mov	dptr,#0x0001
      000A3C 12r00r28         [24] 3034 	lcall	_delay
                                   3035 ;	ecen4330lab7.c:734: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A3F E5 90            [12] 3036 	mov	a,_P1
      000A41 54 F0            [12] 3037 	anl	a,#0xf0
      000A43 F5*00            [12] 3038 	mov	_colloc,a
                                   3039 ;	ecen4330lab7.c:735: }while(colloc == 0xF0 && received_flag == 0);
      000A45 74 F0            [12] 3040 	mov	a,#0xf0
      000A47 B5*00 04         [24] 3041 	cjne	a,_colloc,00112$
      000A4A E5*42            [12] 3042 	mov	a,_received_flag
      000A4C 60 D3            [24] 3043 	jz	00106$
      000A4E                       3044 00112$:
                                   3045 ;	ecen4330lab7.c:737: if(received_flag == 0){
      000A4E E5*42            [12] 3046 	mov	a,_received_flag
      000A50 60 03            [24] 3047 	jz	00198$
      000A52 02r0Br16         [24] 3048 	ljmp	00134$
      000A55                       3049 00198$:
                                   3050 ;	ecen4330lab7.c:738: while(1)
      000A55                       3051 00122$:
                                   3052 ;	ecen4330lab7.c:742: __KEYPAD_PORT__= 0xFE;                                          /* check for pressed key in 1st row */
      000A55 75 90 FE         [24] 3053 	mov	_P1,#0xfe
                                   3054 ;	ecen4330lab7.c:743: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A58 E5 90            [12] 3055 	mov	a,_P1
      000A5A 54 F0            [12] 3056 	anl	a,#0xf0
      000A5C F5*00            [12] 3057 	mov	_colloc,a
                                   3058 ;	ecen4330lab7.c:744: if(colloc != 0xF0)
      000A5E 74 F0            [12] 3059 	mov	a,#0xf0
      000A60 B5*00 02         [24] 3060 	cjne	a,_colloc,00199$
      000A63 80 05            [24] 3061 	sjmp	00114$
      000A65                       3062 00199$:
                                   3063 ;	ecen4330lab7.c:746: rowloc = 0;
      000A65 75*01 00         [24] 3064 	mov	_rowloc,#0x00
                                   3065 ;	ecen4330lab7.c:747: break;
      000A68 80 3D            [24] 3066 	sjmp	00123$
      000A6A                       3067 00114$:
                                   3068 ;	ecen4330lab7.c:750: __KEYPAD_PORT__ = 0xFD;                                 /* check for pressed key in 2nd row */
      000A6A 75 90 FD         [24] 3069 	mov	_P1,#0xfd
                                   3070 ;	ecen4330lab7.c:751: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A6D E5 90            [12] 3071 	mov	a,_P1
      000A6F 54 F0            [12] 3072 	anl	a,#0xf0
      000A71 F5*00            [12] 3073 	mov	_colloc,a
                                   3074 ;	ecen4330lab7.c:752: if(colloc != 0xF0)
      000A73 74 F0            [12] 3075 	mov	a,#0xf0
      000A75 B5*00 02         [24] 3076 	cjne	a,_colloc,00200$
      000A78 80 05            [24] 3077 	sjmp	00116$
      000A7A                       3078 00200$:
                                   3079 ;	ecen4330lab7.c:754: rowloc = 1;
      000A7A 75*01 01         [24] 3080 	mov	_rowloc,#0x01
                                   3081 ;	ecen4330lab7.c:755: break;
      000A7D 80 28            [24] 3082 	sjmp	00123$
      000A7F                       3083 00116$:
                                   3084 ;	ecen4330lab7.c:758: __KEYPAD_PORT__ = 0xFB;         /* check for pressed key in 3rd row */
      000A7F 75 90 FB         [24] 3085 	mov	_P1,#0xfb
                                   3086 ;	ecen4330lab7.c:759: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A82 E5 90            [12] 3087 	mov	a,_P1
      000A84 54 F0            [12] 3088 	anl	a,#0xf0
      000A86 F5*00            [12] 3089 	mov	_colloc,a
                                   3090 ;	ecen4330lab7.c:760: if(colloc != 0xF0)
      000A88 74 F0            [12] 3091 	mov	a,#0xf0
      000A8A B5*00 02         [24] 3092 	cjne	a,_colloc,00201$
      000A8D 80 05            [24] 3093 	sjmp	00118$
      000A8F                       3094 00201$:
                                   3095 ;	ecen4330lab7.c:762: rowloc = 2;
      000A8F 75*01 02         [24] 3096 	mov	_rowloc,#0x02
                                   3097 ;	ecen4330lab7.c:763: break;
      000A92 80 13            [24] 3098 	sjmp	00123$
      000A94                       3099 00118$:
                                   3100 ;	ecen4330lab7.c:766: __KEYPAD_PORT__ = 0xF7;         /* check for pressed key in 4th row */
      000A94 75 90 F7         [24] 3101 	mov	_P1,#0xf7
                                   3102 ;	ecen4330lab7.c:767: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A97 E5 90            [12] 3103 	mov	a,_P1
      000A99 54 F0            [12] 3104 	anl	a,#0xf0
      000A9B F5*00            [12] 3105 	mov	_colloc,a
                                   3106 ;	ecen4330lab7.c:768: if(colloc != 0xF0)
      000A9D 74 F0            [12] 3107 	mov	a,#0xf0
      000A9F B5*00 02         [24] 3108 	cjne	a,_colloc,00202$
      000AA2 80 B1            [24] 3109 	sjmp	00122$
      000AA4                       3110 00202$:
                                   3111 ;	ecen4330lab7.c:770: rowloc = 3;
      000AA4 75*01 03         [24] 3112 	mov	_rowloc,#0x03
                                   3113 ;	ecen4330lab7.c:771: break;
      000AA7                       3114 00123$:
                                   3115 ;	ecen4330lab7.c:775: if(colloc == 0xE0)
      000AA7 74 E0            [12] 3116 	mov	a,#0xe0
      000AA9 B5*00 15         [24] 3117 	cjne	a,_colloc,00131$
                                   3118 ;	ecen4330lab7.c:777: return(keypad[rowloc][0]);
      000AAC E5*01            [12] 3119 	mov	a,_rowloc
      000AAE 75 F0 04         [24] 3120 	mov	b,#0x04
      000AB1 A4               [48] 3121 	mul	ab
      000AB2 24rFB            [12] 3122 	add	a,#_keypad
      000AB4 F5 82            [12] 3123 	mov	dpl,a
      000AB6 74s04            [12] 3124 	mov	a,#(_keypad >> 8)
      000AB8 35 F0            [12] 3125 	addc	a,b
      000ABA F5 83            [12] 3126 	mov	dph,a
      000ABC E4               [12] 3127 	clr	a
      000ABD 93               [24] 3128 	movc	a,@a+dptr
      000ABE F5 82            [12] 3129 	mov	dpl,a
      000AC0 22               [24] 3130 	ret
      000AC1                       3131 00131$:
                                   3132 ;	ecen4330lab7.c:779: else if(colloc == 0xD0)
      000AC1 74 D0            [12] 3133 	mov	a,#0xd0
      000AC3 B5*00 18         [24] 3134 	cjne	a,_colloc,00128$
                                   3135 ;	ecen4330lab7.c:781: return(keypad[rowloc][1]);
      000AC6 E5*01            [12] 3136 	mov	a,_rowloc
      000AC8 75 F0 04         [24] 3137 	mov	b,#0x04
      000ACB A4               [48] 3138 	mul	ab
      000ACC 24rFB            [12] 3139 	add	a,#_keypad
      000ACE FE               [12] 3140 	mov	r6,a
      000ACF 74s04            [12] 3141 	mov	a,#(_keypad >> 8)
      000AD1 35 F0            [12] 3142 	addc	a,b
      000AD3 FF               [12] 3143 	mov	r7,a
      000AD4 8E 82            [24] 3144 	mov	dpl,r6
      000AD6 8F 83            [24] 3145 	mov	dph,r7
      000AD8 A3               [24] 3146 	inc	dptr
      000AD9 E4               [12] 3147 	clr	a
      000ADA 93               [24] 3148 	movc	a,@a+dptr
      000ADB F5 82            [12] 3149 	mov	dpl,a
      000ADD 22               [24] 3150 	ret
      000ADE                       3151 00128$:
                                   3152 ;	ecen4330lab7.c:783: else if(colloc == 0xB0)
      000ADE 74 B0            [12] 3153 	mov	a,#0xb0
      000AE0 B5*00 19         [24] 3154 	cjne	a,_colloc,00125$
                                   3155 ;	ecen4330lab7.c:785: return(keypad[rowloc][2]);
      000AE3 E5*01            [12] 3156 	mov	a,_rowloc
      000AE5 75 F0 04         [24] 3157 	mov	b,#0x04
      000AE8 A4               [48] 3158 	mul	ab
      000AE9 24rFB            [12] 3159 	add	a,#_keypad
      000AEB FE               [12] 3160 	mov	r6,a
      000AEC 74s04            [12] 3161 	mov	a,#(_keypad >> 8)
      000AEE 35 F0            [12] 3162 	addc	a,b
      000AF0 FF               [12] 3163 	mov	r7,a
      000AF1 8E 82            [24] 3164 	mov	dpl,r6
      000AF3 8F 83            [24] 3165 	mov	dph,r7
      000AF5 A3               [24] 3166 	inc	dptr
      000AF6 A3               [24] 3167 	inc	dptr
      000AF7 E4               [12] 3168 	clr	a
      000AF8 93               [24] 3169 	movc	a,@a+dptr
      000AF9 F5 82            [12] 3170 	mov	dpl,a
      000AFB 22               [24] 3171 	ret
      000AFC                       3172 00125$:
                                   3173 ;	ecen4330lab7.c:789: return(keypad[rowloc][3]);
      000AFC E5*01            [12] 3174 	mov	a,_rowloc
      000AFE 75 F0 04         [24] 3175 	mov	b,#0x04
      000B01 A4               [48] 3176 	mul	ab
      000B02 24rFB            [12] 3177 	add	a,#_keypad
      000B04 FE               [12] 3178 	mov	r6,a
      000B05 74s04            [12] 3179 	mov	a,#(_keypad >> 8)
      000B07 35 F0            [12] 3180 	addc	a,b
      000B09 FF               [12] 3181 	mov	r7,a
      000B0A 8E 82            [24] 3182 	mov	dpl,r6
      000B0C 8F 83            [24] 3183 	mov	dph,r7
      000B0E A3               [24] 3184 	inc	dptr
      000B0F A3               [24] 3185 	inc	dptr
      000B10 A3               [24] 3186 	inc	dptr
      000B11 E4               [12] 3187 	clr	a
      000B12 93               [24] 3188 	movc	a,@a+dptr
      000B13 F5 82            [12] 3189 	mov	dpl,a
      000B15 22               [24] 3190 	ret
      000B16                       3191 00134$:
                                   3192 ;	ecen4330lab7.c:793: received_flag = 0;
      000B16 75*42 00         [24] 3193 	mov	_received_flag,#0x00
                                   3194 ;	ecen4330lab7.c:794: return received_byte - 0x40;
      000B19 E5*41            [12] 3195 	mov	a,_received_byte
      000B1B 24 C0            [12] 3196 	add	a,#0xc0
      000B1D F5 82            [12] 3197 	mov	dpl,a
                                   3198 ;	ecen4330lab7.c:796: }
      000B1F 22               [24] 3199 	ret
                                   3200 ;------------------------------------------------------------
                                   3201 ;Allocation info for local variables in function 'ASCIItoHEX'
                                   3202 ;------------------------------------------------------------
                                   3203 ;a                         Allocated to registers r7 
                                   3204 ;h                         Allocated to registers r7 
                                   3205 ;------------------------------------------------------------
                                   3206 ;	ecen4330lab7.c:804: unsigned char ASCIItoHEX(unsigned char a){
                                   3207 ;	-----------------------------------------
                                   3208 ;	 function ASCIItoHEX
                                   3209 ;	-----------------------------------------
      000B20                       3210 _ASCIItoHEX:
      000B20 AF 82            [24] 3211 	mov	r7,dpl
                                   3212 ;	ecen4330lab7.c:807: switch (a)
      000B22 BF 30 00         [24] 3213 	cjne	r7,#0x30,00129$
      000B25                       3214 00129$:
      000B25 50 03            [24] 3215 	jnc	00130$
      000B27 02r0BrB1         [24] 3216 	ljmp	00117$
      000B2A                       3217 00130$:
      000B2A EF               [12] 3218 	mov	a,r7
      000B2B 24 B9            [12] 3219 	add	a,#0xff - 0x46
      000B2D 50 03            [24] 3220 	jnc	00131$
      000B2F 02r0BrB1         [24] 3221 	ljmp	00117$
      000B32                       3222 00131$:
      000B32 EF               [12] 3223 	mov	a,r7
      000B33 24 D0            [12] 3224 	add	a,#0xd0
      000B35 FF               [12] 3225 	mov	r7,a
      000B36 24 0A            [12] 3226 	add	a,#(00132$-3-.)
      000B38 83               [24] 3227 	movc	a,@a+pc
      000B39 F5 82            [12] 3228 	mov	dpl,a
      000B3B EF               [12] 3229 	mov	a,r7
      000B3C 24 1B            [12] 3230 	add	a,#(00133$-3-.)
      000B3E 83               [24] 3231 	movc	a,@a+pc
      000B3F F5 83            [12] 3232 	mov	dph,a
      000B41 E4               [12] 3233 	clr	a
      000B42 73               [24] 3234 	jmp	@a+dptr
      000B43                       3235 00132$:
      000B43r71                    3236 	.db	00101$
      000B44r75                    3237 	.db	00102$
      000B45r79                    3238 	.db	00103$
      000B46r7D                    3239 	.db	00104$
      000B47r81                    3240 	.db	00105$
      000B48r85                    3241 	.db	00106$
      000B49r89                    3242 	.db	00107$
      000B4Ar8D                    3243 	.db	00108$
      000B4Br91                    3244 	.db	00109$
      000B4Cr95                    3245 	.db	00110$
      000B4DrB1                    3246 	.db	00117$
      000B4ErB1                    3247 	.db	00117$
      000B4FrB1                    3248 	.db	00117$
      000B50rB1                    3249 	.db	00117$
      000B51rB1                    3250 	.db	00117$
      000B52rB1                    3251 	.db	00117$
      000B53rB1                    3252 	.db	00117$
      000B54r99                    3253 	.db	00111$
      000B55r9D                    3254 	.db	00112$
      000B56rA1                    3255 	.db	00113$
      000B57rA5                    3256 	.db	00114$
      000B58rA9                    3257 	.db	00115$
      000B59rAD                    3258 	.db	00116$
      000B5A                       3259 00133$:
      000B5As0B                    3260 	.db	00101$>>8
      000B5Bs0B                    3261 	.db	00102$>>8
      000B5Cs0B                    3262 	.db	00103$>>8
      000B5Ds0B                    3263 	.db	00104$>>8
      000B5Es0B                    3264 	.db	00105$>>8
      000B5Fs0B                    3265 	.db	00106$>>8
      000B60s0B                    3266 	.db	00107$>>8
      000B61s0B                    3267 	.db	00108$>>8
      000B62s0B                    3268 	.db	00109$>>8
      000B63s0B                    3269 	.db	00110$>>8
      000B64s0B                    3270 	.db	00117$>>8
      000B65s0B                    3271 	.db	00117$>>8
      000B66s0B                    3272 	.db	00117$>>8
      000B67s0B                    3273 	.db	00117$>>8
      000B68s0B                    3274 	.db	00117$>>8
      000B69s0B                    3275 	.db	00117$>>8
      000B6As0B                    3276 	.db	00117$>>8
      000B6Bs0B                    3277 	.db	00111$>>8
      000B6Cs0B                    3278 	.db	00112$>>8
      000B6Ds0B                    3279 	.db	00113$>>8
      000B6Es0B                    3280 	.db	00114$>>8
      000B6Fs0B                    3281 	.db	00115$>>8
      000B70s0B                    3282 	.db	00116$>>8
                                   3283 ;	ecen4330lab7.c:809: case '0':
      000B71                       3284 00101$:
                                   3285 ;	ecen4330lab7.c:810: h = 0x00;
      000B71 7F 00            [12] 3286 	mov	r7,#0x00
                                   3287 ;	ecen4330lab7.c:811: break;
                                   3288 ;	ecen4330lab7.c:812: case '1':
      000B73 80 3E            [24] 3289 	sjmp	00118$
      000B75                       3290 00102$:
                                   3291 ;	ecen4330lab7.c:813: h = 0x01;
      000B75 7F 01            [12] 3292 	mov	r7,#0x01
                                   3293 ;	ecen4330lab7.c:814: break;
                                   3294 ;	ecen4330lab7.c:815: case '2':
      000B77 80 3A            [24] 3295 	sjmp	00118$
      000B79                       3296 00103$:
                                   3297 ;	ecen4330lab7.c:816: h = 0x02;
      000B79 7F 02            [12] 3298 	mov	r7,#0x02
                                   3299 ;	ecen4330lab7.c:817: break;
                                   3300 ;	ecen4330lab7.c:818: case '3':
      000B7B 80 36            [24] 3301 	sjmp	00118$
      000B7D                       3302 00104$:
                                   3303 ;	ecen4330lab7.c:819: h = 0x03;
      000B7D 7F 03            [12] 3304 	mov	r7,#0x03
                                   3305 ;	ecen4330lab7.c:820: break;
                                   3306 ;	ecen4330lab7.c:821: case '4':
      000B7F 80 32            [24] 3307 	sjmp	00118$
      000B81                       3308 00105$:
                                   3309 ;	ecen4330lab7.c:822: h = 0x04;
      000B81 7F 04            [12] 3310 	mov	r7,#0x04
                                   3311 ;	ecen4330lab7.c:823: break;
                                   3312 ;	ecen4330lab7.c:824: case '5':
      000B83 80 2E            [24] 3313 	sjmp	00118$
      000B85                       3314 00106$:
                                   3315 ;	ecen4330lab7.c:825: h = 0x05;
      000B85 7F 05            [12] 3316 	mov	r7,#0x05
                                   3317 ;	ecen4330lab7.c:826: break;
                                   3318 ;	ecen4330lab7.c:827: case '6':
      000B87 80 2A            [24] 3319 	sjmp	00118$
      000B89                       3320 00107$:
                                   3321 ;	ecen4330lab7.c:828: h = 0x06;
      000B89 7F 06            [12] 3322 	mov	r7,#0x06
                                   3323 ;	ecen4330lab7.c:829: break;
                                   3324 ;	ecen4330lab7.c:830: case '7':
      000B8B 80 26            [24] 3325 	sjmp	00118$
      000B8D                       3326 00108$:
                                   3327 ;	ecen4330lab7.c:831: h = 0x07;
      000B8D 7F 07            [12] 3328 	mov	r7,#0x07
                                   3329 ;	ecen4330lab7.c:832: break;
                                   3330 ;	ecen4330lab7.c:833: case '8':
      000B8F 80 22            [24] 3331 	sjmp	00118$
      000B91                       3332 00109$:
                                   3333 ;	ecen4330lab7.c:834: h = 0x08;
      000B91 7F 08            [12] 3334 	mov	r7,#0x08
                                   3335 ;	ecen4330lab7.c:835: break;
                                   3336 ;	ecen4330lab7.c:836: case '9':
      000B93 80 1E            [24] 3337 	sjmp	00118$
      000B95                       3338 00110$:
                                   3339 ;	ecen4330lab7.c:837: h = 0x09;
      000B95 7F 09            [12] 3340 	mov	r7,#0x09
                                   3341 ;	ecen4330lab7.c:838: break;
                                   3342 ;	ecen4330lab7.c:839: case 'A':
      000B97 80 1A            [24] 3343 	sjmp	00118$
      000B99                       3344 00111$:
                                   3345 ;	ecen4330lab7.c:840: h = 0x0A;
      000B99 7F 0A            [12] 3346 	mov	r7,#0x0a
                                   3347 ;	ecen4330lab7.c:841: break;
                                   3348 ;	ecen4330lab7.c:842: case 'B':
      000B9B 80 16            [24] 3349 	sjmp	00118$
      000B9D                       3350 00112$:
                                   3351 ;	ecen4330lab7.c:843: h = 0x0B;
      000B9D 7F 0B            [12] 3352 	mov	r7,#0x0b
                                   3353 ;	ecen4330lab7.c:844: break;
                                   3354 ;	ecen4330lab7.c:845: case 'C':
      000B9F 80 12            [24] 3355 	sjmp	00118$
      000BA1                       3356 00113$:
                                   3357 ;	ecen4330lab7.c:846: h = 0x0C;
      000BA1 7F 0C            [12] 3358 	mov	r7,#0x0c
                                   3359 ;	ecen4330lab7.c:847: break;
                                   3360 ;	ecen4330lab7.c:848: case 'D':
      000BA3 80 0E            [24] 3361 	sjmp	00118$
      000BA5                       3362 00114$:
                                   3363 ;	ecen4330lab7.c:849: h = 0x0D;
      000BA5 7F 0D            [12] 3364 	mov	r7,#0x0d
                                   3365 ;	ecen4330lab7.c:850: break;
                                   3366 ;	ecen4330lab7.c:851: case 'E':
      000BA7 80 0A            [24] 3367 	sjmp	00118$
      000BA9                       3368 00115$:
                                   3369 ;	ecen4330lab7.c:852: h = 0x0E;
      000BA9 7F 0E            [12] 3370 	mov	r7,#0x0e
                                   3371 ;	ecen4330lab7.c:853: break;
                                   3372 ;	ecen4330lab7.c:854: case 'F':
      000BAB 80 06            [24] 3373 	sjmp	00118$
      000BAD                       3374 00116$:
                                   3375 ;	ecen4330lab7.c:855: h = 0x0F;
      000BAD 7F 0F            [12] 3376 	mov	r7,#0x0f
                                   3377 ;	ecen4330lab7.c:856: break;
                                   3378 ;	ecen4330lab7.c:857: default:
      000BAF 80 02            [24] 3379 	sjmp	00118$
      000BB1                       3380 00117$:
                                   3381 ;	ecen4330lab7.c:858: h = 0x00;
      000BB1 7F 00            [12] 3382 	mov	r7,#0x00
                                   3383 ;	ecen4330lab7.c:860: }
      000BB3                       3384 00118$:
                                   3385 ;	ecen4330lab7.c:861: return h;
      000BB3 8F 82            [24] 3386 	mov	dpl,r7
                                   3387 ;	ecen4330lab7.c:862: }
      000BB5 22               [24] 3388 	ret
                                   3389 ;------------------------------------------------------------
                                   3390 ;Allocation info for local variables in function 'HEXtoASCII'
                                   3391 ;------------------------------------------------------------
                                   3392 ;h                         Allocated to registers r6 r7 
                                   3393 ;a                         Allocated to registers r7 
                                   3394 ;------------------------------------------------------------
                                   3395 ;	ecen4330lab7.c:869: unsigned char HEXtoASCII(unsigned int h){
                                   3396 ;	-----------------------------------------
                                   3397 ;	 function HEXtoASCII
                                   3398 ;	-----------------------------------------
      000BB6                       3399 _HEXtoASCII:
      000BB6 AE 82            [24] 3400 	mov	r6,dpl
      000BB8 AF 83            [24] 3401 	mov	r7,dph
                                   3402 ;	ecen4330lab7.c:872: switch (h)
      000BBA C3               [12] 3403 	clr	c
      000BBB 74 0F            [12] 3404 	mov	a,#0x0f
      000BBD 9E               [12] 3405 	subb	a,r6
      000BBE E4               [12] 3406 	clr	a
      000BBF 9F               [12] 3407 	subb	a,r7
      000BC0 50 03            [24] 3408 	jnc	00125$
      000BC2 02r0Cr33         [24] 3409 	ljmp	00117$
      000BC5                       3410 00125$:
      000BC5 EE               [12] 3411 	mov	a,r6
      000BC6 24 0A            [12] 3412 	add	a,#(00126$-3-.)
      000BC8 83               [24] 3413 	movc	a,@a+pc
      000BC9 F5 82            [12] 3414 	mov	dpl,a
      000BCB EE               [12] 3415 	mov	a,r6
      000BCC 24 14            [12] 3416 	add	a,#(00127$-3-.)
      000BCE 83               [24] 3417 	movc	a,@a+pc
      000BCF F5 83            [12] 3418 	mov	dph,a
      000BD1 E4               [12] 3419 	clr	a
      000BD2 73               [24] 3420 	jmp	@a+dptr
      000BD3                       3421 00126$:
      000BD3rF3                    3422 	.db	00101$
      000BD4rF7                    3423 	.db	00102$
      000BD5rFB                    3424 	.db	00103$
      000BD6rFF                    3425 	.db	00104$
      000BD7r03                    3426 	.db	00105$
      000BD8r07                    3427 	.db	00106$
      000BD9r0B                    3428 	.db	00107$
      000BDAr0F                    3429 	.db	00108$
      000BDBr13                    3430 	.db	00109$
      000BDCr17                    3431 	.db	00110$
      000BDDr1B                    3432 	.db	00111$
      000BDEr1F                    3433 	.db	00112$
      000BDFr23                    3434 	.db	00113$
      000BE0r27                    3435 	.db	00114$
      000BE1r2B                    3436 	.db	00115$
      000BE2r2F                    3437 	.db	00116$
      000BE3                       3438 00127$:
      000BE3s0B                    3439 	.db	00101$>>8
      000BE4s0B                    3440 	.db	00102$>>8
      000BE5s0B                    3441 	.db	00103$>>8
      000BE6s0B                    3442 	.db	00104$>>8
      000BE7s0C                    3443 	.db	00105$>>8
      000BE8s0C                    3444 	.db	00106$>>8
      000BE9s0C                    3445 	.db	00107$>>8
      000BEAs0C                    3446 	.db	00108$>>8
      000BEBs0C                    3447 	.db	00109$>>8
      000BECs0C                    3448 	.db	00110$>>8
      000BEDs0C                    3449 	.db	00111$>>8
      000BEEs0C                    3450 	.db	00112$>>8
      000BEFs0C                    3451 	.db	00113$>>8
      000BF0s0C                    3452 	.db	00114$>>8
      000BF1s0C                    3453 	.db	00115$>>8
      000BF2s0C                    3454 	.db	00116$>>8
                                   3455 ;	ecen4330lab7.c:874: case 0x0000:
      000BF3                       3456 00101$:
                                   3457 ;	ecen4330lab7.c:875: a = '0';
      000BF3 7F 30            [12] 3458 	mov	r7,#0x30
                                   3459 ;	ecen4330lab7.c:876: break;
                                   3460 ;	ecen4330lab7.c:877: case 0x0001:
      000BF5 80 3E            [24] 3461 	sjmp	00118$
      000BF7                       3462 00102$:
                                   3463 ;	ecen4330lab7.c:878: a = '1';
      000BF7 7F 31            [12] 3464 	mov	r7,#0x31
                                   3465 ;	ecen4330lab7.c:879: break;
                                   3466 ;	ecen4330lab7.c:880: case 0x0002:
      000BF9 80 3A            [24] 3467 	sjmp	00118$
      000BFB                       3468 00103$:
                                   3469 ;	ecen4330lab7.c:881: a = '2';
      000BFB 7F 32            [12] 3470 	mov	r7,#0x32
                                   3471 ;	ecen4330lab7.c:882: break;
                                   3472 ;	ecen4330lab7.c:883: case 0x0003:
      000BFD 80 36            [24] 3473 	sjmp	00118$
      000BFF                       3474 00104$:
                                   3475 ;	ecen4330lab7.c:884: a = '3';
      000BFF 7F 33            [12] 3476 	mov	r7,#0x33
                                   3477 ;	ecen4330lab7.c:885: break;
                                   3478 ;	ecen4330lab7.c:886: case 0x0004:
      000C01 80 32            [24] 3479 	sjmp	00118$
      000C03                       3480 00105$:
                                   3481 ;	ecen4330lab7.c:887: a = '4';
      000C03 7F 34            [12] 3482 	mov	r7,#0x34
                                   3483 ;	ecen4330lab7.c:888: break;
                                   3484 ;	ecen4330lab7.c:889: case 0x0005:
      000C05 80 2E            [24] 3485 	sjmp	00118$
      000C07                       3486 00106$:
                                   3487 ;	ecen4330lab7.c:890: a = '5';
      000C07 7F 35            [12] 3488 	mov	r7,#0x35
                                   3489 ;	ecen4330lab7.c:891: break;
                                   3490 ;	ecen4330lab7.c:892: case 0x0006:
      000C09 80 2A            [24] 3491 	sjmp	00118$
      000C0B                       3492 00107$:
                                   3493 ;	ecen4330lab7.c:893: a = '6';
      000C0B 7F 36            [12] 3494 	mov	r7,#0x36
                                   3495 ;	ecen4330lab7.c:894: break;
                                   3496 ;	ecen4330lab7.c:895: case 0x0007:
      000C0D 80 26            [24] 3497 	sjmp	00118$
      000C0F                       3498 00108$:
                                   3499 ;	ecen4330lab7.c:896: a = '7';
      000C0F 7F 37            [12] 3500 	mov	r7,#0x37
                                   3501 ;	ecen4330lab7.c:897: break;
                                   3502 ;	ecen4330lab7.c:898: case 0x0008:
      000C11 80 22            [24] 3503 	sjmp	00118$
      000C13                       3504 00109$:
                                   3505 ;	ecen4330lab7.c:899: a = '8';
      000C13 7F 38            [12] 3506 	mov	r7,#0x38
                                   3507 ;	ecen4330lab7.c:900: break;
                                   3508 ;	ecen4330lab7.c:901: case 0x0009:
      000C15 80 1E            [24] 3509 	sjmp	00118$
      000C17                       3510 00110$:
                                   3511 ;	ecen4330lab7.c:902: a = '9';
      000C17 7F 39            [12] 3512 	mov	r7,#0x39
                                   3513 ;	ecen4330lab7.c:903: break;
                                   3514 ;	ecen4330lab7.c:904: case 0x000A:
      000C19 80 1A            [24] 3515 	sjmp	00118$
      000C1B                       3516 00111$:
                                   3517 ;	ecen4330lab7.c:905: a = 'A';
      000C1B 7F 41            [12] 3518 	mov	r7,#0x41
                                   3519 ;	ecen4330lab7.c:906: break;
                                   3520 ;	ecen4330lab7.c:907: case 0x000B:
      000C1D 80 16            [24] 3521 	sjmp	00118$
      000C1F                       3522 00112$:
                                   3523 ;	ecen4330lab7.c:908: a = 'B';
      000C1F 7F 42            [12] 3524 	mov	r7,#0x42
                                   3525 ;	ecen4330lab7.c:909: break;
                                   3526 ;	ecen4330lab7.c:910: case 0x000C:
      000C21 80 12            [24] 3527 	sjmp	00118$
      000C23                       3528 00113$:
                                   3529 ;	ecen4330lab7.c:911: a = 'C';
      000C23 7F 43            [12] 3530 	mov	r7,#0x43
                                   3531 ;	ecen4330lab7.c:912: break;
                                   3532 ;	ecen4330lab7.c:913: case 0x000D:
      000C25 80 0E            [24] 3533 	sjmp	00118$
      000C27                       3534 00114$:
                                   3535 ;	ecen4330lab7.c:914: a = 'D';
      000C27 7F 44            [12] 3536 	mov	r7,#0x44
                                   3537 ;	ecen4330lab7.c:915: break;
                                   3538 ;	ecen4330lab7.c:916: case 0x000E:
      000C29 80 0A            [24] 3539 	sjmp	00118$
      000C2B                       3540 00115$:
                                   3541 ;	ecen4330lab7.c:917: a = 'E';
      000C2B 7F 45            [12] 3542 	mov	r7,#0x45
                                   3543 ;	ecen4330lab7.c:918: break;
                                   3544 ;	ecen4330lab7.c:919: case 0x000F:
      000C2D 80 06            [24] 3545 	sjmp	00118$
      000C2F                       3546 00116$:
                                   3547 ;	ecen4330lab7.c:920: a = 'F';
      000C2F 7F 46            [12] 3548 	mov	r7,#0x46
                                   3549 ;	ecen4330lab7.c:921: break;
                                   3550 ;	ecen4330lab7.c:922: default:
      000C31 80 02            [24] 3551 	sjmp	00118$
      000C33                       3552 00117$:
                                   3553 ;	ecen4330lab7.c:923: a = '0';
      000C33 7F 30            [12] 3554 	mov	r7,#0x30
                                   3555 ;	ecen4330lab7.c:925: }
      000C35                       3556 00118$:
                                   3557 ;	ecen4330lab7.c:926: return a;
      000C35 8F 82            [24] 3558 	mov	dpl,r7
                                   3559 ;	ecen4330lab7.c:927: }
      000C37 22               [24] 3560 	ret
                                   3561 ;------------------------------------------------------------
                                   3562 ;Allocation info for local variables in function 'HEXtoASCII_8write'
                                   3563 ;------------------------------------------------------------
                                   3564 ;h                         Allocated to registers r7 
                                   3565 ;------------------------------------------------------------
                                   3566 ;	ecen4330lab7.c:935: void HEXtoASCII_8write(unsigned char h){
                                   3567 ;	-----------------------------------------
                                   3568 ;	 function HEXtoASCII_8write
                                   3569 ;	-----------------------------------------
      000C38                       3570 _HEXtoASCII_8write:
                                   3571 ;	ecen4330lab7.c:938: byte = (h >> 4);
      000C38 E5 82            [12] 3572 	mov	a,dpl
      000C3A FF               [12] 3573 	mov	r7,a
      000C3B C4               [12] 3574 	swap	a
      000C3C 54 0F            [12] 3575 	anl	a,#0x0f
      000C3E FE               [12] 3576 	mov	r6,a
      000C3F 8E*2D            [24] 3577 	mov	_byte,r6
      000C41 75*2E 00         [24] 3578 	mov	(_byte + 1),#0x00
                                   3579 ;	ecen4330lab7.c:939: byte &= 0x0F;
      000C44 53*2D 0F         [24] 3580 	anl	_byte,#0x0f
      000C47 75*2E 00         [24] 3581 	mov	(_byte + 1),#0x00
                                   3582 ;	ecen4330lab7.c:940: ASCII = HEXtoASCII(byte);
      000C4A 85*2D 82         [24] 3583 	mov	dpl,_byte
      000C4D 85*2E 83         [24] 3584 	mov	dph,(_byte + 1)
      000C50 C0 07            [24] 3585 	push	ar7
      000C52 12r0BrB6         [24] 3586 	lcall	_HEXtoASCII
                                   3587 ;	ecen4330lab7.c:941: write(ASCII);
      000C55 85 82*31         [24] 3588 	mov  _ASCII,dpl
      000C58 12r09r62         [24] 3589 	lcall	_write
      000C5B D0 07            [24] 3590 	pop	ar7
                                   3591 ;	ecen4330lab7.c:944: byte = (h & 0x0F);
      000C5D 7E 00            [12] 3592 	mov	r6,#0x00
      000C5F 74 0F            [12] 3593 	mov	a,#0x0f
      000C61 5F               [12] 3594 	anl	a,r7
      000C62 F5*2D            [12] 3595 	mov	_byte,a
                                   3596 ;	1-genFromRTrack replaced	mov	(_byte + 1),#0x00
      000C64 8E*2E            [24] 3597 	mov	(_byte + 1),r6
                                   3598 ;	ecen4330lab7.c:945: ASCII = HEXtoASCII(byte);
      000C66 85*2D 82         [24] 3599 	mov	dpl,_byte
      000C69 85*2E 83         [24] 3600 	mov	dph,(_byte + 1)
      000C6C 12r0BrB6         [24] 3601 	lcall	_HEXtoASCII
                                   3602 ;	ecen4330lab7.c:946: write(ASCII);
      000C6F 85 82*31         [24] 3603 	mov  _ASCII,dpl
                                   3604 ;	ecen4330lab7.c:947: }
      000C72 02r09r62         [24] 3605 	ljmp	_write
                                   3606 ;------------------------------------------------------------
                                   3607 ;Allocation info for local variables in function 'HEXtoASCII_16write'
                                   3608 ;------------------------------------------------------------
                                   3609 ;h                         Allocated to registers r6 r7 
                                   3610 ;------------------------------------------------------------
                                   3611 ;	ecen4330lab7.c:955: void HEXtoASCII_16write(unsigned int h){
                                   3612 ;	-----------------------------------------
                                   3613 ;	 function HEXtoASCII_16write
                                   3614 ;	-----------------------------------------
      000C75                       3615 _HEXtoASCII_16write:
      000C75 AE 82            [24] 3616 	mov	r6,dpl
                                   3617 ;	ecen4330lab7.c:958: byte = (h >> 12);
      000C77 E5 83            [12] 3618 	mov	a,dph
      000C79 FF               [12] 3619 	mov	r7,a
      000C7A C4               [12] 3620 	swap	a
      000C7B 54 0F            [12] 3621 	anl	a,#0x0f
      000C7D F5*2D            [12] 3622 	mov	_byte,a
      000C7F 75*2E 00         [24] 3623 	mov	(_byte + 1),#0x00
                                   3624 ;	ecen4330lab7.c:959: byte &= 0x000F;
      000C82 53*2D 0F         [24] 3625 	anl	_byte,#0x0f
      000C85 75*2E 00         [24] 3626 	mov	(_byte + 1),#0x00
                                   3627 ;	ecen4330lab7.c:960: ASCII = HEXtoASCII(byte);
      000C88 85*2D 82         [24] 3628 	mov	dpl,_byte
      000C8B 85*2E 83         [24] 3629 	mov	dph,(_byte + 1)
      000C8E C0 07            [24] 3630 	push	ar7
      000C90 C0 06            [24] 3631 	push	ar6
      000C92 12r0BrB6         [24] 3632 	lcall	_HEXtoASCII
      000C95 85 82*31         [24] 3633 	mov	_ASCII,dpl
                                   3634 ;	ecen4330lab7.c:961: LCD_string_write("0x");
      000C98 90r05r0D         [24] 3635 	mov	dptr,#___str_1
      000C9B 75 F0 80         [24] 3636 	mov	b,#0x80
      000C9E 12r09rC8         [24] 3637 	lcall	_LCD_string_write
                                   3638 ;	ecen4330lab7.c:962: write(ASCII);
      000CA1 85*31 82         [24] 3639 	mov	dpl,_ASCII
      000CA4 12r09r62         [24] 3640 	lcall	_write
      000CA7 D0 06            [24] 3641 	pop	ar6
      000CA9 D0 07            [24] 3642 	pop	ar7
                                   3643 ;	ecen4330lab7.c:965: byte = (h >> 8);
      000CAB 8F*2D            [24] 3644 	mov	_byte,r7
      000CAD 75*2E 00         [24] 3645 	mov	(_byte + 1),#0x00
                                   3646 ;	ecen4330lab7.c:966: byte &= 0x000F;
      000CB0 53*2D 0F         [24] 3647 	anl	_byte,#0x0f
      000CB3 75*2E 00         [24] 3648 	mov	(_byte + 1),#0x00
                                   3649 ;	ecen4330lab7.c:967: ASCII = HEXtoASCII(byte);
      000CB6 85*2D 82         [24] 3650 	mov	dpl,_byte
      000CB9 85*2E 83         [24] 3651 	mov	dph,(_byte + 1)
      000CBC C0 07            [24] 3652 	push	ar7
      000CBE C0 06            [24] 3653 	push	ar6
      000CC0 12r0BrB6         [24] 3654 	lcall	_HEXtoASCII
                                   3655 ;	ecen4330lab7.c:968: write(ASCII);
      000CC3 85 82*31         [24] 3656 	mov  _ASCII,dpl
      000CC6 12r09r62         [24] 3657 	lcall	_write
      000CC9 D0 06            [24] 3658 	pop	ar6
      000CCB D0 07            [24] 3659 	pop	ar7
                                   3660 ;	ecen4330lab7.c:971: byte = (h >> 4);
      000CCD 8E*2D            [24] 3661 	mov	_byte,r6
      000CCF EF               [12] 3662 	mov	a,r7
      000CD0 C4               [12] 3663 	swap	a
      000CD1 C5*2D            [12] 3664 	xch	a,_byte
      000CD3 C4               [12] 3665 	swap	a
      000CD4 54 0F            [12] 3666 	anl	a,#0x0f
      000CD6 65*2D            [12] 3667 	xrl	a,_byte
      000CD8 C5*2D            [12] 3668 	xch	a,_byte
      000CDA 54 0F            [12] 3669 	anl	a,#0x0f
      000CDC C5*2D            [12] 3670 	xch	a,_byte
      000CDE 65*2D            [12] 3671 	xrl	a,_byte
      000CE0 C5*2D            [12] 3672 	xch	a,_byte
      000CE2 F5*2E            [12] 3673 	mov	(_byte + 1),a
                                   3674 ;	ecen4330lab7.c:972: byte &= 0x000F;
      000CE4 53*2D 0F         [24] 3675 	anl	_byte,#0x0f
      000CE7 75*2E 00         [24] 3676 	mov	(_byte + 1),#0x00
                                   3677 ;	ecen4330lab7.c:973: ASCII = HEXtoASCII(byte);
      000CEA 85*2D 82         [24] 3678 	mov	dpl,_byte
      000CED 85*2E 83         [24] 3679 	mov	dph,(_byte + 1)
      000CF0 C0 07            [24] 3680 	push	ar7
      000CF2 C0 06            [24] 3681 	push	ar6
      000CF4 12r0BrB6         [24] 3682 	lcall	_HEXtoASCII
                                   3683 ;	ecen4330lab7.c:974: write(ASCII);
      000CF7 85 82*31         [24] 3684 	mov  _ASCII,dpl
      000CFA 12r09r62         [24] 3685 	lcall	_write
      000CFD D0 06            [24] 3686 	pop	ar6
      000CFF D0 07            [24] 3687 	pop	ar7
                                   3688 ;	ecen4330lab7.c:977: byte = h;
      000D01 8E*2D            [24] 3689 	mov	_byte,r6
      000D03 8F*2E            [24] 3690 	mov	(_byte + 1),r7
                                   3691 ;	ecen4330lab7.c:978: byte &= 0x000F;
      000D05 53*2D 0F         [24] 3692 	anl	_byte,#0x0f
      000D08 75*2E 00         [24] 3693 	mov	(_byte + 1),#0x00
                                   3694 ;	ecen4330lab7.c:979: ASCII = HEXtoASCII(byte);
      000D0B 85*2D 82         [24] 3695 	mov	dpl,_byte
      000D0E 85*2E 83         [24] 3696 	mov	dph,(_byte + 1)
      000D11 12r0BrB6         [24] 3697 	lcall	_HEXtoASCII
                                   3698 ;	ecen4330lab7.c:980: write(ASCII);
      000D14 85 82*31         [24] 3699 	mov  _ASCII,dpl
                                   3700 ;	ecen4330lab7.c:981: }
      000D17 02r09r62         [24] 3701 	ljmp	_write
                                   3702 ;------------------------------------------------------------
                                   3703 ;Allocation info for local variables in function 'RAMwrite'
                                   3704 ;------------------------------------------------------------
                                   3705 ;d                         Allocated with name '_RAMwrite_PARM_2'
                                   3706 ;a                         Allocated to registers r6 r7 
                                   3707 ;ram_address               Allocated to registers 
                                   3708 ;------------------------------------------------------------
                                   3709 ;	ecen4330lab7.c:989: void RAMwrite(unsigned int a, unsigned char d){
                                   3710 ;	-----------------------------------------
                                   3711 ;	 function RAMwrite
                                   3712 ;	-----------------------------------------
      000D1A                       3713 _RAMwrite:
      000D1A AE 82            [24] 3714 	mov	r6,dpl
      000D1C AF 83            [24] 3715 	mov	r7,dph
                                   3716 ;	ecen4330lab7.c:992: IOM = 0;
                                   3717 ;	assignBit
      000D1E C2 B4            [12] 3718 	clr	_P3_4
                                   3719 ;	ecen4330lab7.c:995: ram_address = (unsigned char __xdata*)(a);
      000D20 8E 82            [24] 3720 	mov	dpl,r6
      000D22 8F 83            [24] 3721 	mov	dph,r7
                                   3722 ;	ecen4330lab7.c:998: *ram_address = d;
      000D24 E5*00            [12] 3723 	mov	a,_RAMwrite_PARM_2
      000D26 F0               [24] 3724 	movx	@dptr,a
                                   3725 ;	ecen4330lab7.c:999: IOM = 1;
                                   3726 ;	assignBit
      000D27 D2 B4            [12] 3727 	setb	_P3_4
                                   3728 ;	ecen4330lab7.c:1000: }
      000D29 22               [24] 3729 	ret
                                   3730 ;------------------------------------------------------------
                                   3731 ;Allocation info for local variables in function 'testRAM'
                                   3732 ;------------------------------------------------------------
                                   3733 ;d                         Allocated to registers r7 
                                   3734 ;i                         Allocated to registers r5 r6 
                                   3735 ;ram_address               Allocated to registers 
                                   3736 ;------------------------------------------------------------
                                   3737 ;	ecen4330lab7.c:1003: void testRAM(unsigned char d){
                                   3738 ;	-----------------------------------------
                                   3739 ;	 function testRAM
                                   3740 ;	-----------------------------------------
      000D2A                       3741 _testRAM:
      000D2A AF 82            [24] 3742 	mov	r7,dpl
                                   3743 ;	ecen4330lab7.c:1007: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D2C 7D 00            [12] 3744 	mov	r5,#0x00
      000D2E 7E 00            [12] 3745 	mov	r6,#0x00
      000D30                       3746 00102$:
                                   3747 ;	ecen4330lab7.c:1008: IOM = 0;
                                   3748 ;	assignBit
      000D30 C2 B4            [12] 3749 	clr	_P3_4
                                   3750 ;	ecen4330lab7.c:1009: ram_address = (unsigned char __xdata*)(i);
      000D32 8D 82            [24] 3751 	mov	dpl,r5
      000D34 8E 83            [24] 3752 	mov	dph,r6
                                   3753 ;	ecen4330lab7.c:1010: *ram_address = d;
      000D36 EF               [12] 3754 	mov	a,r7
      000D37 F0               [24] 3755 	movx	@dptr,a
                                   3756 ;	ecen4330lab7.c:1011: IOM = 1;
                                   3757 ;	assignBit
      000D38 D2 B4            [12] 3758 	setb	_P3_4
                                   3759 ;	ecen4330lab7.c:1007: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D3A 0D               [12] 3760 	inc	r5
      000D3B BD 00 01         [24] 3761 	cjne	r5,#0x00,00111$
      000D3E 0E               [12] 3762 	inc	r6
      000D3F                       3763 00111$:
      000D3F C3               [12] 3764 	clr	c
      000D40 74 FE            [12] 3765 	mov	a,#0xfe
      000D42 9D               [12] 3766 	subb	a,r5
      000D43 74 FF            [12] 3767 	mov	a,#0xff
      000D45 9E               [12] 3768 	subb	a,r6
      000D46 50 E8            [24] 3769 	jnc	00102$
                                   3770 ;	ecen4330lab7.c:1014: }
      000D48 22               [24] 3771 	ret
                                   3772 ;------------------------------------------------------------
                                   3773 ;Allocation info for local variables in function 'RAMread'
                                   3774 ;------------------------------------------------------------
                                   3775 ;a                         Allocated to registers r6 r7 
                                   3776 ;ram_address               Allocated to registers 
                                   3777 ;------------------------------------------------------------
                                   3778 ;	ecen4330lab7.c:1021: unsigned char RAMread(unsigned int a){
                                   3779 ;	-----------------------------------------
                                   3780 ;	 function RAMread
                                   3781 ;	-----------------------------------------
      000D49                       3782 _RAMread:
      000D49 AE 82            [24] 3783 	mov	r6,dpl
      000D4B AF 83            [24] 3784 	mov	r7,dph
                                   3785 ;	ecen4330lab7.c:1024: IOM = 0;
                                   3786 ;	assignBit
      000D4D C2 B4            [12] 3787 	clr	_P3_4
                                   3788 ;	ecen4330lab7.c:1027: ram_address = (unsigned char __xdata*)(a);
      000D4F 8E 82            [24] 3789 	mov	dpl,r6
      000D51 8F 83            [24] 3790 	mov	dph,r7
                                   3791 ;	ecen4330lab7.c:1030: data = *ram_address;
      000D53 E0               [24] 3792 	movx	a,@dptr
      000D54 F5*20            [12] 3793 	mov	_data,a
                                   3794 ;	ecen4330lab7.c:1031: IOM = 1;
                                   3795 ;	assignBit
      000D56 D2 B4            [12] 3796 	setb	_P3_4
                                   3797 ;	ecen4330lab7.c:1032: return data;
      000D58 85*20 82         [24] 3798 	mov	dpl,_data
                                   3799 ;	ecen4330lab7.c:1033: }
      000D5B 22               [24] 3800 	ret
                                   3801 ;------------------------------------------------------------
                                   3802 ;Allocation info for local variables in function 'resetLCD'
                                   3803 ;------------------------------------------------------------
                                   3804 ;	ecen4330lab7.c:1045: void resetLCD(){
                                   3805 ;	-----------------------------------------
                                   3806 ;	 function resetLCD
                                   3807 ;	-----------------------------------------
      000D5C                       3808 _resetLCD:
                                   3809 ;	ecen4330lab7.c:1046: setRotation(4);
      000D5C 75 82 04         [24] 3810 	mov	dpl,#0x04
      000D5F 12r02rFE         [24] 3811 	lcall	_setRotation
                                   3812 ;	ecen4330lab7.c:1047: setTextColor(GRAY, BLACK);
      000D62 E4               [12] 3813 	clr	a
      000D63 F5*00            [12] 3814 	mov	_setTextColor_PARM_2,a
      000D65 F5*01            [12] 3815 	mov	(_setTextColor_PARM_2 + 1),a
      000D67 90 D6 BA         [24] 3816 	mov	dptr,#0xd6ba
      000D6A 12r02rD9         [24] 3817 	lcall	_setTextColor
                                   3818 ;	ecen4330lab7.c:1048: setTextSize(3);
      000D6D 75 82 03         [24] 3819 	mov	dpl,#0x03
      000D70 12r02rE6         [24] 3820 	lcall	_setTextSize
                                   3821 ;	ecen4330lab7.c:1049: fillScreen(BLACK);
      000D73 90 00 00         [24] 3822 	mov	dptr,#0x0000
      000D76 12r06r71         [24] 3823 	lcall	_fillScreen
                                   3824 ;	ecen4330lab7.c:1050: setCursor(0, 0);
      000D79 E4               [12] 3825 	clr	a
      000D7A F5*00            [12] 3826 	mov	_setCursor_PARM_2,a
      000D7C F5*01            [12] 3827 	mov	(_setCursor_PARM_2 + 1),a
      000D7E 90 00 00         [24] 3828 	mov	dptr,#0x0000
                                   3829 ;	ecen4330lab7.c:1051: }
      000D81 02r02rCC         [24] 3830 	ljmp	_setCursor
                                   3831 ;------------------------------------------------------------
                                   3832 ;Allocation info for local variables in function 'invalidInput'
                                   3833 ;------------------------------------------------------------
                                   3834 ;	ecen4330lab7.c:1063: void invalidInput(){
                                   3835 ;	-----------------------------------------
                                   3836 ;	 function invalidInput
                                   3837 ;	-----------------------------------------
      000D84                       3838 _invalidInput:
                                   3839 ;	ecen4330lab7.c:1064: resetLCD();
      000D84 12r0Dr5C         [24] 3840 	lcall	_resetLCD
                                   3841 ;	ecen4330lab7.c:1065: setTextColor(RED, BLACK);
      000D87 E4               [12] 3842 	clr	a
      000D88 F5*00            [12] 3843 	mov	_setTextColor_PARM_2,a
      000D8A F5*01            [12] 3844 	mov	(_setTextColor_PARM_2 + 1),a
      000D8C 90 F8 00         [24] 3845 	mov	dptr,#0xf800
      000D8F 12r02rD9         [24] 3846 	lcall	_setTextColor
                                   3847 ;	ecen4330lab7.c:1068: LCD_string_write("\n   Invalid\n\n");
      000D92 90r05r10         [24] 3848 	mov	dptr,#___str_2
      000D95 75 F0 80         [24] 3849 	mov	b,#0x80
      000D98 12r09rC8         [24] 3850 	lcall	_LCD_string_write
                                   3851 ;	ecen4330lab7.c:1069: LCD_string_write("    Input");
      000D9B 90r05r1E         [24] 3852 	mov	dptr,#___str_3
      000D9E 75 F0 80         [24] 3853 	mov	b,#0x80
      000DA1 12r09rC8         [24] 3854 	lcall	_LCD_string_write
                                   3855 ;	ecen4330lab7.c:1072: delay(200);
      000DA4 90 00 C8         [24] 3856 	mov	dptr,#0x00c8
      000DA7 12r00r28         [24] 3857 	lcall	_delay
                                   3858 ;	ecen4330lab7.c:1073: resetLCD();
                                   3859 ;	ecen4330lab7.c:1074: }
      000DAA 02r0Dr5C         [24] 3860 	ljmp	_resetLCD
                                   3861 ;------------------------------------------------------------
                                   3862 ;Allocation info for local variables in function 'inputRead16'
                                   3863 ;------------------------------------------------------------
                                   3864 ;	ecen4330lab7.c:1085: void inputRead16(){
                                   3865 ;	-----------------------------------------
                                   3866 ;	 function inputRead16
                                   3867 ;	-----------------------------------------
      000DAD                       3868 _inputRead16:
                                   3869 ;	ecen4330lab7.c:1086: input16 = 0x0000;
      000DAD E4               [12] 3870 	clr	a
      000DAE F5*17            [12] 3871 	mov	_input16,a
      000DB0 F5*18            [12] 3872 	mov	(_input16 + 1),a
                                   3873 ;	ecen4330lab7.c:1088: setTextColor(WHITE, BLACK);
      000DB2 F5*00            [12] 3874 	mov	_setTextColor_PARM_2,a
      000DB4 F5*01            [12] 3875 	mov	(_setTextColor_PARM_2 + 1),a
      000DB6 90 FF FF         [24] 3876 	mov	dptr,#0xffff
      000DB9 12r02rD9         [24] 3877 	lcall	_setTextColor
                                   3878 ;	ecen4330lab7.c:1091: key = keyDetect();
      000DBC 12r0Ar07         [24] 3879 	lcall	_keyDetect
      000DBF 85 82*16         [24] 3880 	mov	_key,dpl
                                   3881 ;	ecen4330lab7.c:1092: setTextColor(WHITE, BLACK);
      000DC2 E4               [12] 3882 	clr	a
      000DC3 F5*00            [12] 3883 	mov	_setTextColor_PARM_2,a
      000DC5 F5*01            [12] 3884 	mov	(_setTextColor_PARM_2 + 1),a
      000DC7 90 FF FF         [24] 3885 	mov	dptr,#0xffff
      000DCA 12r02rD9         [24] 3886 	lcall	_setTextColor
                                   3887 ;	ecen4330lab7.c:1093: write(key);
      000DCD 85*16 82         [24] 3888 	mov	dpl,_key
      000DD0 12r09r62         [24] 3889 	lcall	_write
                                   3890 ;	ecen4330lab7.c:1094: input16 |= (ASCIItoHEX(key) << 12);
      000DD3 85*16 82         [24] 3891 	mov	dpl,_key
      000DD6 12r0Br20         [24] 3892 	lcall	_ASCIItoHEX
      000DD9 AF 82            [24] 3893 	mov	r7,dpl
      000DDB EF               [12] 3894 	mov	a,r7
      000DDC C4               [12] 3895 	swap	a
      000DDD 54 F0            [12] 3896 	anl	a,#0xf0
      000DDF FE               [12] 3897 	mov	r6,a
      000DE0 E4               [12] 3898 	clr	a
      000DE1 42*17            [12] 3899 	orl	_input16,a
      000DE3 EE               [12] 3900 	mov	a,r6
      000DE4 42*18            [12] 3901 	orl	(_input16 + 1),a
                                   3902 ;	ecen4330lab7.c:1096: key = keyDetect();
      000DE6 12r0Ar07         [24] 3903 	lcall	_keyDetect
      000DE9 85 82*16         [24] 3904 	mov	_key,dpl
                                   3905 ;	ecen4330lab7.c:1097: setTextColor(WHITE, BLACK);
      000DEC E4               [12] 3906 	clr	a
      000DED F5*00            [12] 3907 	mov	_setTextColor_PARM_2,a
      000DEF F5*01            [12] 3908 	mov	(_setTextColor_PARM_2 + 1),a
      000DF1 90 FF FF         [24] 3909 	mov	dptr,#0xffff
      000DF4 12r02rD9         [24] 3910 	lcall	_setTextColor
                                   3911 ;	ecen4330lab7.c:1098: write(key);
      000DF7 85*16 82         [24] 3912 	mov	dpl,_key
      000DFA 12r09r62         [24] 3913 	lcall	_write
                                   3914 ;	ecen4330lab7.c:1099: input16 |= (ASCIItoHEX(key) << 8);
      000DFD 85*16 82         [24] 3915 	mov	dpl,_key
      000E00 12r0Br20         [24] 3916 	lcall	_ASCIItoHEX
      000E03 AF 82            [24] 3917 	mov	r7,dpl
      000E05 8F 06            [24] 3918 	mov	ar6,r7
      000E07 E4               [12] 3919 	clr	a
      000E08 42*17            [12] 3920 	orl	_input16,a
      000E0A EE               [12] 3921 	mov	a,r6
      000E0B 42*18            [12] 3922 	orl	(_input16 + 1),a
                                   3923 ;	ecen4330lab7.c:1101: key = keyDetect();
      000E0D 12r0Ar07         [24] 3924 	lcall	_keyDetect
      000E10 85 82*16         [24] 3925 	mov	_key,dpl
                                   3926 ;	ecen4330lab7.c:1102: setTextColor(WHITE, BLACK);
      000E13 E4               [12] 3927 	clr	a
      000E14 F5*00            [12] 3928 	mov	_setTextColor_PARM_2,a
      000E16 F5*01            [12] 3929 	mov	(_setTextColor_PARM_2 + 1),a
      000E18 90 FF FF         [24] 3930 	mov	dptr,#0xffff
      000E1B 12r02rD9         [24] 3931 	lcall	_setTextColor
                                   3932 ;	ecen4330lab7.c:1103: write(key);
      000E1E 85*16 82         [24] 3933 	mov	dpl,_key
      000E21 12r09r62         [24] 3934 	lcall	_write
                                   3935 ;	ecen4330lab7.c:1104: input16 |= (ASCIItoHEX(key) << 4);
      000E24 85*16 82         [24] 3936 	mov	dpl,_key
      000E27 12r0Br20         [24] 3937 	lcall	_ASCIItoHEX
      000E2A AF 82            [24] 3938 	mov	r7,dpl
      000E2C E4               [12] 3939 	clr	a
      000E2D C4               [12] 3940 	swap	a
      000E2E 54 F0            [12] 3941 	anl	a,#0xf0
      000E30 CF               [12] 3942 	xch	a,r7
      000E31 C4               [12] 3943 	swap	a
      000E32 CF               [12] 3944 	xch	a,r7
      000E33 6F               [12] 3945 	xrl	a,r7
      000E34 CF               [12] 3946 	xch	a,r7
      000E35 54 F0            [12] 3947 	anl	a,#0xf0
      000E37 CF               [12] 3948 	xch	a,r7
      000E38 6F               [12] 3949 	xrl	a,r7
      000E39 FE               [12] 3950 	mov	r6,a
      000E3A EF               [12] 3951 	mov	a,r7
      000E3B 42*17            [12] 3952 	orl	_input16,a
      000E3D EE               [12] 3953 	mov	a,r6
      000E3E 42*18            [12] 3954 	orl	(_input16 + 1),a
                                   3955 ;	ecen4330lab7.c:1106: key = keyDetect();
      000E40 12r0Ar07         [24] 3956 	lcall	_keyDetect
      000E43 85 82*16         [24] 3957 	mov	_key,dpl
                                   3958 ;	ecen4330lab7.c:1107: setTextColor(WHITE, BLACK);
      000E46 E4               [12] 3959 	clr	a
      000E47 F5*00            [12] 3960 	mov	_setTextColor_PARM_2,a
      000E49 F5*01            [12] 3961 	mov	(_setTextColor_PARM_2 + 1),a
      000E4B 90 FF FF         [24] 3962 	mov	dptr,#0xffff
      000E4E 12r02rD9         [24] 3963 	lcall	_setTextColor
                                   3964 ;	ecen4330lab7.c:1108: write(key);
      000E51 85*16 82         [24] 3965 	mov	dpl,_key
      000E54 12r09r62         [24] 3966 	lcall	_write
                                   3967 ;	ecen4330lab7.c:1109: input16 |= ASCIItoHEX(key);
      000E57 85*16 82         [24] 3968 	mov	dpl,_key
      000E5A 12r0Br20         [24] 3969 	lcall	_ASCIItoHEX
      000E5D AF 82            [24] 3970 	mov	r7,dpl
      000E5F 7E 00            [12] 3971 	mov	r6,#0x00
      000E61 EF               [12] 3972 	mov	a,r7
      000E62 42*17            [12] 3973 	orl	_input16,a
      000E64 EE               [12] 3974 	mov	a,r6
      000E65 42*18            [12] 3975 	orl	(_input16 + 1),a
                                   3976 ;	ecen4330lab7.c:1110: }
      000E67 22               [24] 3977 	ret
                                   3978 ;------------------------------------------------------------
                                   3979 ;Allocation info for local variables in function 'inputRead8'
                                   3980 ;------------------------------------------------------------
                                   3981 ;	ecen4330lab7.c:1120: void inputRead8(){
                                   3982 ;	-----------------------------------------
                                   3983 ;	 function inputRead8
                                   3984 ;	-----------------------------------------
      000E68                       3985 _inputRead8:
                                   3986 ;	ecen4330lab7.c:1121: setTextColor(WHITE, BLACK);
      000E68 E4               [12] 3987 	clr	a
      000E69 F5*00            [12] 3988 	mov	_setTextColor_PARM_2,a
      000E6B F5*01            [12] 3989 	mov	(_setTextColor_PARM_2 + 1),a
      000E6D 90 FF FF         [24] 3990 	mov	dptr,#0xffff
      000E70 12r02rD9         [24] 3991 	lcall	_setTextColor
                                   3992 ;	ecen4330lab7.c:1123: input8 = 0x00;
      000E73 75*19 00         [24] 3993 	mov	_input8,#0x00
                                   3994 ;	ecen4330lab7.c:1125: key = keyDetect();
      000E76 12r0Ar07         [24] 3995 	lcall	_keyDetect
      000E79 85 82*16         [24] 3996 	mov	_key,dpl
                                   3997 ;	ecen4330lab7.c:1126: setTextColor(WHITE, BLACK);
      000E7C E4               [12] 3998 	clr	a
      000E7D F5*00            [12] 3999 	mov	_setTextColor_PARM_2,a
      000E7F F5*01            [12] 4000 	mov	(_setTextColor_PARM_2 + 1),a
      000E81 90 FF FF         [24] 4001 	mov	dptr,#0xffff
      000E84 12r02rD9         [24] 4002 	lcall	_setTextColor
                                   4003 ;	ecen4330lab7.c:1127: write(key);
      000E87 85*16 82         [24] 4004 	mov	dpl,_key
      000E8A 12r09r62         [24] 4005 	lcall	_write
                                   4006 ;	ecen4330lab7.c:1128: input8 |= (ASCIItoHEX(key) << 4);
      000E8D 85*16 82         [24] 4007 	mov	dpl,_key
      000E90 12r0Br20         [24] 4008 	lcall	_ASCIItoHEX
      000E93 E5 82            [12] 4009 	mov	a,dpl
      000E95 C4               [12] 4010 	swap	a
      000E96 54 F0            [12] 4011 	anl	a,#0xf0
      000E98 42*19            [12] 4012 	orl	_input8,a
                                   4013 ;	ecen4330lab7.c:1130: key = keyDetect();
      000E9A 12r0Ar07         [24] 4014 	lcall	_keyDetect
      000E9D 85 82*16         [24] 4015 	mov	_key,dpl
                                   4016 ;	ecen4330lab7.c:1131: setTextColor(WHITE, BLACK);
      000EA0 E4               [12] 4017 	clr	a
      000EA1 F5*00            [12] 4018 	mov	_setTextColor_PARM_2,a
      000EA3 F5*01            [12] 4019 	mov	(_setTextColor_PARM_2 + 1),a
      000EA5 90 FF FF         [24] 4020 	mov	dptr,#0xffff
      000EA8 12r02rD9         [24] 4021 	lcall	_setTextColor
                                   4022 ;	ecen4330lab7.c:1132: write(key);
      000EAB 85*16 82         [24] 4023 	mov	dpl,_key
      000EAE 12r09r62         [24] 4024 	lcall	_write
                                   4025 ;	ecen4330lab7.c:1133: input8 |= ASCIItoHEX(key);
      000EB1 85*16 82         [24] 4026 	mov	dpl,_key
      000EB4 12r0Br20         [24] 4027 	lcall	_ASCIItoHEX
      000EB7 E5 82            [12] 4028 	mov	a,dpl
      000EB9 42*19            [12] 4029 	orl	_input8,a
                                   4030 ;	ecen4330lab7.c:1134: }
      000EBB 22               [24] 4031 	ret
                                   4032 ;------------------------------------------------------------
                                   4033 ;Allocation info for local variables in function 'inputDataType'
                                   4034 ;------------------------------------------------------------
                                   4035 ;	ecen4330lab7.c:1153: void inputDataType(){
                                   4036 ;	-----------------------------------------
                                   4037 ;	 function inputDataType
                                   4038 ;	-----------------------------------------
      000EBC                       4039 _inputDataType:
                                   4040 ;	ecen4330lab7.c:1154: validInput = 0;
      000EBC 75*1D 00         [24] 4041 	mov	_validInput,#0x00
                                   4042 ;	ecen4330lab7.c:1155: dataType = 0;
      000EBF 75*1A 00         [24] 4043 	mov	_dataType,#0x00
                                   4044 ;	ecen4330lab7.c:1157: do
      000EC2                       4045 00106$:
                                   4046 ;	ecen4330lab7.c:1160: resetLCD();
      000EC2 12r0Dr5C         [24] 4047 	lcall	_resetLCD
                                   4048 ;	ecen4330lab7.c:1161: setTextColor(WHITE, BLACK);
      000EC5 E4               [12] 4049 	clr	a
      000EC6 F5*00            [12] 4050 	mov	_setTextColor_PARM_2,a
      000EC8 F5*01            [12] 4051 	mov	(_setTextColor_PARM_2 + 1),a
      000ECA 90 FF FF         [24] 4052 	mov	dptr,#0xffff
      000ECD 12r02rD9         [24] 4053 	lcall	_setTextColor
                                   4054 ;	ecen4330lab7.c:1162: LCD_string_write("\nSelect Data\nType:\n\n");
      000ED0 90r05r28         [24] 4055 	mov	dptr,#___str_4
      000ED3 75 F0 80         [24] 4056 	mov	b,#0x80
      000ED6 12r09rC8         [24] 4057 	lcall	_LCD_string_write
                                   4058 ;	ecen4330lab7.c:1163: LCD_string_write("(1) Byte\n");
      000ED9 90r05r3D         [24] 4059 	mov	dptr,#___str_5
      000EDC 75 F0 80         [24] 4060 	mov	b,#0x80
      000EDF 12r09rC8         [24] 4061 	lcall	_LCD_string_write
                                   4062 ;	ecen4330lab7.c:1164: LCD_string_write("(2) Word\n");
      000EE2 90r05r47         [24] 4063 	mov	dptr,#___str_6
      000EE5 75 F0 80         [24] 4064 	mov	b,#0x80
      000EE8 12r09rC8         [24] 4065 	lcall	_LCD_string_write
                                   4066 ;	ecen4330lab7.c:1165: LCD_string_write("(3) Double\n    Word\n\n  _");
      000EEB 90r05r51         [24] 4067 	mov	dptr,#___str_7
      000EEE 75 F0 80         [24] 4068 	mov	b,#0x80
      000EF1 12r09rC8         [24] 4069 	lcall	_LCD_string_write
                                   4070 ;	ecen4330lab7.c:1166: cursor_x -= textsize * 6;
      000EF4 85*0C*00         [24] 4071 	mov	__mulint_PARM_2,_textsize
      000EF7 75*01 00         [24] 4072 	mov	(__mulint_PARM_2 + 1),#0x00
      000EFA 90 00 06         [24] 4073 	mov	dptr,#0x0006
      000EFD 12r00r00         [24] 4074 	lcall	__mulint
      000F00 AE 82            [24] 4075 	mov	r6,dpl
      000F02 AF 83            [24] 4076 	mov	r7,dph
      000F04 E5*08            [12] 4077 	mov	a,_cursor_x
      000F06 C3               [12] 4078 	clr	c
      000F07 9E               [12] 4079 	subb	a,r6
      000F08 F5*08            [12] 4080 	mov	_cursor_x,a
      000F0A E5*09            [12] 4081 	mov	a,(_cursor_x + 1)
      000F0C 9F               [12] 4082 	subb	a,r7
      000F0D F5*09            [12] 4083 	mov	(_cursor_x + 1),a
                                   4084 ;	ecen4330lab7.c:1167: x = cursor_x;
      000F0F 85*08*3B         [24] 4085 	mov	_x,_cursor_x
                                   4086 ;	ecen4330lab7.c:1168: y = cursor_y;
      000F12 85*0A*3C         [24] 4087 	mov	_y,_cursor_y
                                   4088 ;	ecen4330lab7.c:1169: ts = textsize;
      000F15 85*0C*3D         [24] 4089 	mov	_ts,_textsize
                                   4090 ;	ecen4330lab7.c:1172: setTextColor(WHITE, BLACK);
      000F18 E4               [12] 4091 	clr	a
      000F19 F5*00            [12] 4092 	mov	_setTextColor_PARM_2,a
      000F1B F5*01            [12] 4093 	mov	(_setTextColor_PARM_2 + 1),a
      000F1D 90 FF FF         [24] 4094 	mov	dptr,#0xffff
      000F20 12r02rD9         [24] 4095 	lcall	_setTextColor
                                   4096 ;	ecen4330lab7.c:1173: key = keyDetect();
      000F23 12r0Ar07         [24] 4097 	lcall	_keyDetect
      000F26 85 82*16         [24] 4098 	mov	_key,dpl
                                   4099 ;	ecen4330lab7.c:1174: cursor_x = x;
      000F29 85*3B*08         [24] 4100 	mov	_cursor_x,_x
      000F2C 75*09 00         [24] 4101 	mov	(_cursor_x + 1),#0x00
                                   4102 ;	ecen4330lab7.c:1175: cursor_y = y;
      000F2F 85*3C*0A         [24] 4103 	mov	_cursor_y,_y
      000F32 75*0B 00         [24] 4104 	mov	(_cursor_y + 1),#0x00
                                   4105 ;	ecen4330lab7.c:1176: textsize = ts;
      000F35 85*3D*0C         [24] 4106 	mov	_textsize,_ts
                                   4107 ;	ecen4330lab7.c:1177: write(key);
      000F38 85*16 82         [24] 4108 	mov	dpl,_key
      000F3B 12r09r62         [24] 4109 	lcall	_write
                                   4110 ;	ecen4330lab7.c:1179: switch (key)
      000F3E 74 31            [12] 4111 	mov	a,#0x31
      000F40 B5*16 02         [24] 4112 	cjne	a,_key,00127$
      000F43 80 0E            [24] 4113 	sjmp	00101$
      000F45                       4114 00127$:
      000F45 74 32            [12] 4115 	mov	a,#0x32
      000F47 B5*16 02         [24] 4116 	cjne	a,_key,00128$
      000F4A 80 0F            [24] 4117 	sjmp	00102$
      000F4C                       4118 00128$:
      000F4C 74 33            [12] 4119 	mov	a,#0x33
                                   4120 ;	ecen4330lab7.c:1182: case '1':
      000F4E B5*16 1A         [24] 4121 	cjne	a,_key,00104$
      000F51 80 10            [24] 4122 	sjmp	00103$
      000F53                       4123 00101$:
                                   4124 ;	ecen4330lab7.c:1183: dataType = 1;
      000F53 75*1A 01         [24] 4125 	mov	_dataType,#0x01
                                   4126 ;	ecen4330lab7.c:1184: validInput = 1;
      000F56 75*1D 01         [24] 4127 	mov	_validInput,#0x01
                                   4128 ;	ecen4330lab7.c:1185: break;
                                   4129 ;	ecen4330lab7.c:1188: case '2':
      000F59 80 16            [24] 4130 	sjmp	00107$
      000F5B                       4131 00102$:
                                   4132 ;	ecen4330lab7.c:1189: dataType = 2;
      000F5B 75*1A 02         [24] 4133 	mov	_dataType,#0x02
                                   4134 ;	ecen4330lab7.c:1190: validInput = 1;
      000F5E 75*1D 01         [24] 4135 	mov	_validInput,#0x01
                                   4136 ;	ecen4330lab7.c:1191: break;
                                   4137 ;	ecen4330lab7.c:1194: case '3':
      000F61 80 0E            [24] 4138 	sjmp	00107$
      000F63                       4139 00103$:
                                   4140 ;	ecen4330lab7.c:1195: dataType = 4;
      000F63 75*1A 04         [24] 4141 	mov	_dataType,#0x04
                                   4142 ;	ecen4330lab7.c:1196: validInput = 1;
      000F66 75*1D 01         [24] 4143 	mov	_validInput,#0x01
                                   4144 ;	ecen4330lab7.c:1197: break;
                                   4145 ;	ecen4330lab7.c:1200: default:
      000F69 80 06            [24] 4146 	sjmp	00107$
      000F6B                       4147 00104$:
                                   4148 ;	ecen4330lab7.c:1201: invalidInput();
      000F6B 12r0Dr84         [24] 4149 	lcall	_invalidInput
                                   4150 ;	ecen4330lab7.c:1202: validInput = 0;
      000F6E 75*1D 00         [24] 4151 	mov	_validInput,#0x00
                                   4152 ;	ecen4330lab7.c:1204: }
      000F71                       4153 00107$:
                                   4154 ;	ecen4330lab7.c:1205: } while (validInput == 0);
      000F71 E5*1D            [12] 4155 	mov	a,_validInput
      000F73 70 03            [24] 4156 	jnz	00130$
      000F75 02r0ErC2         [24] 4157 	ljmp	00106$
      000F78                       4158 00130$:
                                   4159 ;	ecen4330lab7.c:1206: }
      000F78 22               [24] 4160 	ret
                                   4161 ;------------------------------------------------------------
                                   4162 ;Allocation info for local variables in function 'inputDataSize'
                                   4163 ;------------------------------------------------------------
                                   4164 ;	ecen4330lab7.c:1216: void inputDataSize(){
                                   4165 ;	-----------------------------------------
                                   4166 ;	 function inputDataSize
                                   4167 ;	-----------------------------------------
      000F79                       4168 _inputDataSize:
                                   4169 ;	ecen4330lab7.c:1217: validInput = 0;
                                   4170 ;	ecen4330lab7.c:1218: dataSize = 0x0000;
      000F79 E4               [12] 4171 	clr	a
      000F7A F5*1D            [12] 4172 	mov	_validInput,a
      000F7C F5*1B            [12] 4173 	mov	_dataSize,a
      000F7E F5*1C            [12] 4174 	mov	(_dataSize + 1),a
                                   4175 ;	ecen4330lab7.c:1220: do
      000F80                       4176 00104$:
                                   4177 ;	ecen4330lab7.c:1223: resetLCD();
      000F80 12r0Dr5C         [24] 4178 	lcall	_resetLCD
                                   4179 ;	ecen4330lab7.c:1224: LCD_string_write("\nEnter Data\nSize:\n\n  0x____");
      000F83 90r05r6A         [24] 4180 	mov	dptr,#___str_8
      000F86 75 F0 80         [24] 4181 	mov	b,#0x80
      000F89 12r09rC8         [24] 4182 	lcall	_LCD_string_write
                                   4183 ;	ecen4330lab7.c:1225: cursor_x -= 4 * textsize * 6;
      000F8C E5*0C            [12] 4184 	mov	a,_textsize
      000F8E 75 F0 18         [24] 4185 	mov	b,#0x18
      000F91 A4               [48] 4186 	mul	ab
      000F92 FE               [12] 4187 	mov	r6,a
      000F93 AF F0            [24] 4188 	mov	r7,b
      000F95 E5*08            [12] 4189 	mov	a,_cursor_x
      000F97 C3               [12] 4190 	clr	c
      000F98 9E               [12] 4191 	subb	a,r6
      000F99 F5*08            [12] 4192 	mov	_cursor_x,a
      000F9B E5*09            [12] 4193 	mov	a,(_cursor_x + 1)
      000F9D 9F               [12] 4194 	subb	a,r7
      000F9E F5*09            [12] 4195 	mov	(_cursor_x + 1),a
                                   4196 ;	ecen4330lab7.c:1226: x = cursor_x;
      000FA0 85*08*3B         [24] 4197 	mov	_x,_cursor_x
                                   4198 ;	ecen4330lab7.c:1227: y = cursor_y;
      000FA3 85*0A*3C         [24] 4199 	mov	_y,_cursor_y
                                   4200 ;	ecen4330lab7.c:1228: ts = textsize;
      000FA6 85*0C*3D         [24] 4201 	mov	_ts,_textsize
                                   4202 ;	ecen4330lab7.c:1230: input16 = 0x0000;
      000FA9 E4               [12] 4203 	clr	a
      000FAA F5*17            [12] 4204 	mov	_input16,a
      000FAC F5*18            [12] 4205 	mov	(_input16 + 1),a
                                   4206 ;	ecen4330lab7.c:1232: setTextColor(WHITE, BLACK);
      000FAE F5*00            [12] 4207 	mov	_setTextColor_PARM_2,a
      000FB0 F5*01            [12] 4208 	mov	(_setTextColor_PARM_2 + 1),a
      000FB2 90 FF FF         [24] 4209 	mov	dptr,#0xffff
      000FB5 12r02rD9         [24] 4210 	lcall	_setTextColor
                                   4211 ;	ecen4330lab7.c:1235: key = keyDetect();
      000FB8 12r0Ar07         [24] 4212 	lcall	_keyDetect
      000FBB 85 82*16         [24] 4213 	mov	_key,dpl
                                   4214 ;	ecen4330lab7.c:1236: cursor_x = x;
      000FBE 85*3B*08         [24] 4215 	mov	_cursor_x,_x
      000FC1 75*09 00         [24] 4216 	mov	(_cursor_x + 1),#0x00
                                   4217 ;	ecen4330lab7.c:1237: cursor_y = y;
      000FC4 85*3C*0A         [24] 4218 	mov	_cursor_y,_y
      000FC7 75*0B 00         [24] 4219 	mov	(_cursor_y + 1),#0x00
                                   4220 ;	ecen4330lab7.c:1238: textsize = ts;
      000FCA 85*3D*0C         [24] 4221 	mov	_textsize,_ts
                                   4222 ;	ecen4330lab7.c:1239: write(key);
      000FCD 85*16 82         [24] 4223 	mov	dpl,_key
      000FD0 12r09r62         [24] 4224 	lcall	_write
                                   4225 ;	ecen4330lab7.c:1240: x = cursor_x;
      000FD3 85*08*3B         [24] 4226 	mov	_x,_cursor_x
                                   4227 ;	ecen4330lab7.c:1241: y = cursor_y;
      000FD6 85*0A*3C         [24] 4228 	mov	_y,_cursor_y
                                   4229 ;	ecen4330lab7.c:1242: ts = textsize;
      000FD9 85*0C*3D         [24] 4230 	mov	_ts,_textsize
                                   4231 ;	ecen4330lab7.c:1243: input16 |= (ASCIItoHEX(key) << 12);
      000FDC 85*16 82         [24] 4232 	mov	dpl,_key
      000FDF 12r0Br20         [24] 4233 	lcall	_ASCIItoHEX
      000FE2 AF 82            [24] 4234 	mov	r7,dpl
      000FE4 EF               [12] 4235 	mov	a,r7
      000FE5 C4               [12] 4236 	swap	a
      000FE6 54 F0            [12] 4237 	anl	a,#0xf0
      000FE8 FE               [12] 4238 	mov	r6,a
      000FE9 E4               [12] 4239 	clr	a
      000FEA 42*17            [12] 4240 	orl	_input16,a
      000FEC EE               [12] 4241 	mov	a,r6
      000FED 42*18            [12] 4242 	orl	(_input16 + 1),a
                                   4243 ;	ecen4330lab7.c:1245: key = keyDetect();
      000FEF 12r0Ar07         [24] 4244 	lcall	_keyDetect
      000FF2 85 82*16         [24] 4245 	mov	_key,dpl
                                   4246 ;	ecen4330lab7.c:1246: cursor_x = x;
      000FF5 85*3B*08         [24] 4247 	mov	_cursor_x,_x
      000FF8 75*09 00         [24] 4248 	mov	(_cursor_x + 1),#0x00
                                   4249 ;	ecen4330lab7.c:1247: cursor_y = y;
      000FFB 85*3C*0A         [24] 4250 	mov	_cursor_y,_y
      000FFE 75*0B 00         [24] 4251 	mov	(_cursor_y + 1),#0x00
                                   4252 ;	ecen4330lab7.c:1248: textsize = ts;
      001001 85*3D*0C         [24] 4253 	mov	_textsize,_ts
                                   4254 ;	ecen4330lab7.c:1249: write(key);
      001004 85*16 82         [24] 4255 	mov	dpl,_key
      001007 12r09r62         [24] 4256 	lcall	_write
                                   4257 ;	ecen4330lab7.c:1250: x = cursor_x;
      00100A 85*08*3B         [24] 4258 	mov	_x,_cursor_x
                                   4259 ;	ecen4330lab7.c:1251: y = cursor_y;
      00100D 85*0A*3C         [24] 4260 	mov	_y,_cursor_y
                                   4261 ;	ecen4330lab7.c:1252: ts = textsize;
      001010 85*0C*3D         [24] 4262 	mov	_ts,_textsize
                                   4263 ;	ecen4330lab7.c:1253: input16 |= (ASCIItoHEX(key) << 8);
      001013 85*16 82         [24] 4264 	mov	dpl,_key
      001016 12r0Br20         [24] 4265 	lcall	_ASCIItoHEX
      001019 AF 82            [24] 4266 	mov	r7,dpl
      00101B 8F 06            [24] 4267 	mov	ar6,r7
      00101D E4               [12] 4268 	clr	a
      00101E 42*17            [12] 4269 	orl	_input16,a
      001020 EE               [12] 4270 	mov	a,r6
      001021 42*18            [12] 4271 	orl	(_input16 + 1),a
                                   4272 ;	ecen4330lab7.c:1255: key = keyDetect();
      001023 12r0Ar07         [24] 4273 	lcall	_keyDetect
      001026 85 82*16         [24] 4274 	mov	_key,dpl
                                   4275 ;	ecen4330lab7.c:1256: cursor_x = x;
      001029 85*3B*08         [24] 4276 	mov	_cursor_x,_x
      00102C 75*09 00         [24] 4277 	mov	(_cursor_x + 1),#0x00
                                   4278 ;	ecen4330lab7.c:1257: cursor_y = y;
      00102F 85*3C*0A         [24] 4279 	mov	_cursor_y,_y
      001032 75*0B 00         [24] 4280 	mov	(_cursor_y + 1),#0x00
                                   4281 ;	ecen4330lab7.c:1258: textsize = ts;
      001035 85*3D*0C         [24] 4282 	mov	_textsize,_ts
                                   4283 ;	ecen4330lab7.c:1259: write(key);
      001038 85*16 82         [24] 4284 	mov	dpl,_key
      00103B 12r09r62         [24] 4285 	lcall	_write
                                   4286 ;	ecen4330lab7.c:1260: x = cursor_x;
      00103E 85*08*3B         [24] 4287 	mov	_x,_cursor_x
                                   4288 ;	ecen4330lab7.c:1261: y = cursor_y;
      001041 85*0A*3C         [24] 4289 	mov	_y,_cursor_y
                                   4290 ;	ecen4330lab7.c:1262: ts = textsize;
      001044 85*0C*3D         [24] 4291 	mov	_ts,_textsize
                                   4292 ;	ecen4330lab7.c:1263: input16 |= (ASCIItoHEX(key) << 4);
      001047 85*16 82         [24] 4293 	mov	dpl,_key
      00104A 12r0Br20         [24] 4294 	lcall	_ASCIItoHEX
      00104D AF 82            [24] 4295 	mov	r7,dpl
      00104F E4               [12] 4296 	clr	a
      001050 C4               [12] 4297 	swap	a
      001051 54 F0            [12] 4298 	anl	a,#0xf0
      001053 CF               [12] 4299 	xch	a,r7
      001054 C4               [12] 4300 	swap	a
      001055 CF               [12] 4301 	xch	a,r7
      001056 6F               [12] 4302 	xrl	a,r7
      001057 CF               [12] 4303 	xch	a,r7
      001058 54 F0            [12] 4304 	anl	a,#0xf0
      00105A CF               [12] 4305 	xch	a,r7
      00105B 6F               [12] 4306 	xrl	a,r7
      00105C FE               [12] 4307 	mov	r6,a
      00105D EF               [12] 4308 	mov	a,r7
      00105E 42*17            [12] 4309 	orl	_input16,a
      001060 EE               [12] 4310 	mov	a,r6
      001061 42*18            [12] 4311 	orl	(_input16 + 1),a
                                   4312 ;	ecen4330lab7.c:1265: key = keyDetect();
      001063 12r0Ar07         [24] 4313 	lcall	_keyDetect
      001066 85 82*16         [24] 4314 	mov	_key,dpl
                                   4315 ;	ecen4330lab7.c:1266: cursor_x = x;
      001069 85*3B*08         [24] 4316 	mov	_cursor_x,_x
      00106C 75*09 00         [24] 4317 	mov	(_cursor_x + 1),#0x00
                                   4318 ;	ecen4330lab7.c:1267: cursor_y = y;
      00106F 85*3C*0A         [24] 4319 	mov	_cursor_y,_y
      001072 75*0B 00         [24] 4320 	mov	(_cursor_y + 1),#0x00
                                   4321 ;	ecen4330lab7.c:1268: textsize = ts;
      001075 85*3D*0C         [24] 4322 	mov	_textsize,_ts
                                   4323 ;	ecen4330lab7.c:1269: write(key);
      001078 85*16 82         [24] 4324 	mov	dpl,_key
      00107B 12r09r62         [24] 4325 	lcall	_write
                                   4326 ;	ecen4330lab7.c:1270: x = cursor_x;
      00107E 85*08*3B         [24] 4327 	mov	_x,_cursor_x
                                   4328 ;	ecen4330lab7.c:1271: y = cursor_y;
      001081 85*0A*3C         [24] 4329 	mov	_y,_cursor_y
                                   4330 ;	ecen4330lab7.c:1272: ts = textsize;
      001084 85*0C*3D         [24] 4331 	mov	_ts,_textsize
                                   4332 ;	ecen4330lab7.c:1273: input16 |= ASCIItoHEX(key);
      001087 85*16 82         [24] 4333 	mov	dpl,_key
      00108A 12r0Br20         [24] 4334 	lcall	_ASCIItoHEX
      00108D AF 82            [24] 4335 	mov	r7,dpl
      00108F 7E 00            [12] 4336 	mov	r6,#0x00
      001091 EF               [12] 4337 	mov	a,r7
      001092 42*17            [12] 4338 	orl	_input16,a
      001094 EE               [12] 4339 	mov	a,r6
      001095 42*18            [12] 4340 	orl	(_input16 + 1),a
                                   4341 ;	ecen4330lab7.c:1274: dataSize = input16;
      001097 85*17*1B         [24] 4342 	mov	_dataSize,_input16
      00109A 85*18*1C         [24] 4343 	mov	(_dataSize + 1),(_input16 + 1)
                                   4344 ;	ecen4330lab7.c:1277: if(dataSize == 0x0000){
      00109D E5*1B            [12] 4345 	mov	a,_dataSize
      00109F 45*1C            [12] 4346 	orl	a,(_dataSize + 1)
      0010A1 70 09            [24] 4347 	jnz	00102$
                                   4348 ;	ecen4330lab7.c:1278: invalidInput();
      0010A3 12r0Dr84         [24] 4349 	lcall	_invalidInput
                                   4350 ;	ecen4330lab7.c:1279: validInput = 0;
      0010A6 75*1D 00         [24] 4351 	mov	_validInput,#0x00
      0010A9 02r0Fr80         [24] 4352 	ljmp	00104$
      0010AC                       4353 00102$:
                                   4354 ;	ecen4330lab7.c:1282: validInput = 1;
      0010AC 75*1D 01         [24] 4355 	mov	_validInput,#0x01
                                   4356 ;	ecen4330lab7.c:1284: } while (validInput == 0);
                                   4357 ;	ecen4330lab7.c:1285: }
      0010AF 22               [24] 4358 	ret
                                   4359 ;------------------------------------------------------------
                                   4360 ;Allocation info for local variables in function 'RAM_CHECK'
                                   4361 ;------------------------------------------------------------
                                   4362 ;i                         Allocated to registers r6 r7 
                                   4363 ;------------------------------------------------------------
                                   4364 ;	ecen4330lab7.c:1296: void RAM_CHECK(){
                                   4365 ;	-----------------------------------------
                                   4366 ;	 function RAM_CHECK
                                   4367 ;	-----------------------------------------
      0010B0                       4368 _RAM_CHECK:
                                   4369 ;	ecen4330lab7.c:1298: data = 0;
      0010B0 75*20 00         [24] 4370 	mov	_data,#0x00
                                   4371 ;	ecen4330lab7.c:1299: dataEnd = 0;
      0010B3 75*1E 00         [24] 4372 	mov	_dataEnd,#0x00
                                   4373 ;	ecen4330lab7.c:1302: resetLCD();
      0010B6 12r0Dr5C         [24] 4374 	lcall	_resetLCD
                                   4375 ;	ecen4330lab7.c:1303: LCD_string_write("\nWriting 0x55\nto all\nexternal RAM\nlocations.\n\n");
      0010B9 90r05r86         [24] 4376 	mov	dptr,#___str_9
      0010BC 75 F0 80         [24] 4377 	mov	b,#0x80
      0010BF 12r09rC8         [24] 4378 	lcall	_LCD_string_write
                                   4379 ;	ecen4330lab7.c:1304: testRAM(RAMcheckVal1);
      0010C2 75 82 55         [24] 4380 	mov	dpl,#0x55
      0010C5 12r0Dr2A         [24] 4381 	lcall	_testRAM
                                   4382 ;	ecen4330lab7.c:1305: RAMwrite(0xFFFF, RAMcheckVal1);
      0010C8 75*00 55         [24] 4383 	mov	_RAMwrite_PARM_2,#0x55
      0010CB 90 FF FF         [24] 4384 	mov	dptr,#0xffff
      0010CE 12r0Dr1A         [24] 4385 	lcall	_RAMwrite
                                   4386 ;	ecen4330lab7.c:1307: setTextColor(GREEN, BLACK);
      0010D1 E4               [12] 4387 	clr	a
      0010D2 F5*00            [12] 4388 	mov	_setTextColor_PARM_2,a
      0010D4 F5*01            [12] 4389 	mov	(_setTextColor_PARM_2 + 1),a
      0010D6 90 07 E0         [24] 4390 	mov	dptr,#0x07e0
      0010D9 12r02rD9         [24] 4391 	lcall	_setTextColor
                                   4392 ;	ecen4330lab7.c:1308: LCD_string_write("Write\ncomplete.\n");
      0010DC 90r05rB5         [24] 4393 	mov	dptr,#___str_10
      0010DF 75 F0 80         [24] 4394 	mov	b,#0x80
      0010E2 12r09rC8         [24] 4395 	lcall	_LCD_string_write
                                   4396 ;	ecen4330lab7.c:1309: delay(200);
      0010E5 90 00 C8         [24] 4397 	mov	dptr,#0x00c8
      0010E8 12r00r28         [24] 4398 	lcall	_delay
                                   4399 ;	ecen4330lab7.c:1312: resetLCD();
      0010EB 12r0Dr5C         [24] 4400 	lcall	_resetLCD
                                   4401 ;	ecen4330lab7.c:1313: LCD_string_write("\nVerifying all\nRAM locations\nequal 0x55.\n\n");
      0010EE 90r05rC6         [24] 4402 	mov	dptr,#___str_11
      0010F1 75 F0 80         [24] 4403 	mov	b,#0x80
      0010F4 12r09rC8         [24] 4404 	lcall	_LCD_string_write
                                   4405 ;	ecen4330lab7.c:1315: do
      0010F7 7E 00            [12] 4406 	mov	r6,#0x00
      0010F9 7F 00            [12] 4407 	mov	r7,#0x00
      0010FB                       4408 00102$:
                                   4409 ;	ecen4330lab7.c:1317: data = RAMread(i);
      0010FB 8E 82            [24] 4410 	mov	dpl,r6
      0010FD 8F 83            [24] 4411 	mov	dph,r7
      0010FF C0 07            [24] 4412 	push	ar7
      001101 C0 06            [24] 4413 	push	ar6
      001103 12r0Dr49         [24] 4414 	lcall	_RAMread
      001106 85 82*20         [24] 4415 	mov	_data,dpl
      001109 D0 06            [24] 4416 	pop	ar6
      00110B D0 07            [24] 4417 	pop	ar7
                                   4418 ;	ecen4330lab7.c:1318: i++;
      00110D 0E               [12] 4419 	inc	r6
      00110E BE 00 01         [24] 4420 	cjne	r6,#0x00,00163$
      001111 0F               [12] 4421 	inc	r7
      001112                       4422 00163$:
                                   4423 ;	ecen4330lab7.c:1319: } while (data == RAMcheckVal1 && i <= __END_RAM__);
      001112 74 55            [12] 4424 	mov	a,#0x55
      001114 B5*20 04         [24] 4425 	cjne	a,_data,00164$
      001117 74 01            [12] 4426 	mov	a,#0x01
      001119 80 01            [24] 4427 	sjmp	00165$
      00111B                       4428 00164$:
      00111B E4               [12] 4429 	clr	a
      00111C                       4430 00165$:
      00111C FD               [12] 4431 	mov	r5,a
      00111D 60 09            [24] 4432 	jz	00129$
      00111F C3               [12] 4433 	clr	c
      001120 74 FE            [12] 4434 	mov	a,#0xfe
      001122 9E               [12] 4435 	subb	a,r6
      001123 74 FF            [12] 4436 	mov	a,#0xff
      001125 9F               [12] 4437 	subb	a,r7
      001126 50 D3            [24] 4438 	jnc	00102$
      001128                       4439 00129$:
                                   4440 ;	ecen4330lab7.c:1320: if(data == RAMcheckVal1){
      001128 ED               [12] 4441 	mov	a,r5
      001129 60 11            [24] 4442 	jz	00106$
                                   4443 ;	ecen4330lab7.c:1321: data = RAMread(0xFFFF);
      00112B 90 FF FF         [24] 4444 	mov	dptr,#0xffff
      00112E C0 07            [24] 4445 	push	ar7
      001130 C0 06            [24] 4446 	push	ar6
      001132 12r0Dr49         [24] 4447 	lcall	_RAMread
      001135 85 82*20         [24] 4448 	mov	_data,dpl
      001138 D0 06            [24] 4449 	pop	ar6
      00113A D0 07            [24] 4450 	pop	ar7
      00113C                       4451 00106$:
                                   4452 ;	ecen4330lab7.c:1325: if(data != RAMcheckVal1){
      00113C 74 55            [12] 4453 	mov	a,#0x55
      00113E B5*20 02         [24] 4454 	cjne	a,_data,00169$
      001141 80 61            [24] 4455 	sjmp	00117$
      001143                       4456 00169$:
                                   4457 ;	ecen4330lab7.c:1326: setTextColor(RED, BLACK);
      001143 E4               [12] 4458 	clr	a
      001144 F5*00            [12] 4459 	mov	_setTextColor_PARM_2,a
      001146 F5*01            [12] 4460 	mov	(_setTextColor_PARM_2 + 1),a
      001148 90 F8 00         [24] 4461 	mov	dptr,#0xf800
      00114B C0 07            [24] 4462 	push	ar7
      00114D C0 06            [24] 4463 	push	ar6
      00114F 12r02rD9         [24] 4464 	lcall	_setTextColor
                                   4465 ;	ecen4330lab7.c:1327: LCD_string_write("1st RAM check\nunsuccessful.\n\n");
      001152 90r05rF1         [24] 4466 	mov	dptr,#___str_12
      001155 75 F0 80         [24] 4467 	mov	b,#0x80
      001158 12r09rC8         [24] 4468 	lcall	_LCD_string_write
                                   4469 ;	ecen4330lab7.c:1328: delay(100);
      00115B 90 00 64         [24] 4470 	mov	dptr,#0x0064
      00115E 12r00r28         [24] 4471 	lcall	_delay
                                   4472 ;	ecen4330lab7.c:1330: LCD_string_write("Error at:\n");
      001161 90r06r0F         [24] 4473 	mov	dptr,#___str_13
      001164 75 F0 80         [24] 4474 	mov	b,#0x80
      001167 12r09rC8         [24] 4475 	lcall	_LCD_string_write
      00116A D0 06            [24] 4476 	pop	ar6
      00116C D0 07            [24] 4477 	pop	ar7
                                   4478 ;	ecen4330lab7.c:1331: HEXtoASCII_16write(i - 1);
      00116E EE               [12] 4479 	mov	a,r6
      00116F 24 FF            [12] 4480 	add	a,#0xff
      001171 F5 82            [12] 4481 	mov	dpl,a
      001173 EF               [12] 4482 	mov	a,r7
      001174 34 FF            [12] 4483 	addc	a,#0xff
      001176 F5 83            [12] 4484 	mov	dph,a
      001178 12r0Cr75         [24] 4485 	lcall	_HEXtoASCII_16write
                                   4486 ;	ecen4330lab7.c:1332: LCD_string_write(": 0x");
      00117B 90r06r1A         [24] 4487 	mov	dptr,#___str_14
      00117E 75 F0 80         [24] 4488 	mov	b,#0x80
      001181 12r09rC8         [24] 4489 	lcall	_LCD_string_write
                                   4490 ;	ecen4330lab7.c:1333: HEXtoASCII_8write(data);
      001184 85*20 82         [24] 4491 	mov	dpl,_data
      001187 12r0Cr38         [24] 4492 	lcall	_HEXtoASCII_8write
                                   4493 ;	ecen4330lab7.c:1335: setTextColor(WHITE, BLACK);
      00118A E4               [12] 4494 	clr	a
      00118B F5*00            [12] 4495 	mov	_setTextColor_PARM_2,a
      00118D F5*01            [12] 4496 	mov	(_setTextColor_PARM_2 + 1),a
      00118F 90 FF FF         [24] 4497 	mov	dptr,#0xffff
      001192 12r02rD9         [24] 4498 	lcall	_setTextColor
                                   4499 ;	ecen4330lab7.c:1336: LCD_string_write("Returning to\nmain menu.");
      001195 90r06r1F         [24] 4500 	mov	dptr,#___str_15
      001198 75 F0 80         [24] 4501 	mov	b,#0x80
      00119B 12r09rC8         [24] 4502 	lcall	_LCD_string_write
                                   4503 ;	ecen4330lab7.c:1337: delay(200);
      00119E 90 00 C8         [24] 4504 	mov	dptr,#0x00c8
      0011A1 02r00r28         [24] 4505 	ljmp	_delay
      0011A4                       4506 00117$:
                                   4507 ;	ecen4330lab7.c:1342: setTextColor(GREEN, BLACK);
      0011A4 E4               [12] 4508 	clr	a
      0011A5 F5*00            [12] 4509 	mov	_setTextColor_PARM_2,a
      0011A7 F5*01            [12] 4510 	mov	(_setTextColor_PARM_2 + 1),a
      0011A9 90 07 E0         [24] 4511 	mov	dptr,#0x07e0
      0011AC 12r02rD9         [24] 4512 	lcall	_setTextColor
                                   4513 ;	ecen4330lab7.c:1343: LCD_string_write("1st RAM check\nsuccessful.\n\n");
      0011AF 90r06r37         [24] 4514 	mov	dptr,#___str_16
      0011B2 75 F0 80         [24] 4515 	mov	b,#0x80
      0011B5 12r09rC8         [24] 4516 	lcall	_LCD_string_write
                                   4517 ;	ecen4330lab7.c:1344: delay(200);
      0011B8 90 00 C8         [24] 4518 	mov	dptr,#0x00c8
      0011BB 12r00r28         [24] 4519 	lcall	_delay
                                   4520 ;	ecen4330lab7.c:1346: resetLCD();
      0011BE 12r0Dr5C         [24] 4521 	lcall	_resetLCD
                                   4522 ;	ecen4330lab7.c:1347: LCD_string_write("\nWriting 0xAA\nto all\nexternal RAM\nlocations.\n\n");
      0011C1 90r06r53         [24] 4523 	mov	dptr,#___str_17
      0011C4 75 F0 80         [24] 4524 	mov	b,#0x80
      0011C7 12r09rC8         [24] 4525 	lcall	_LCD_string_write
                                   4526 ;	ecen4330lab7.c:1348: testRAM(RAMcheckVal2);
      0011CA 75 82 AA         [24] 4527 	mov	dpl,#0xaa
      0011CD 12r0Dr2A         [24] 4528 	lcall	_testRAM
                                   4529 ;	ecen4330lab7.c:1349: RAMwrite(0xFFFF, RAMcheckVal2);
      0011D0 75*00 AA         [24] 4530 	mov	_RAMwrite_PARM_2,#0xaa
      0011D3 90 FF FF         [24] 4531 	mov	dptr,#0xffff
      0011D6 12r0Dr1A         [24] 4532 	lcall	_RAMwrite
                                   4533 ;	ecen4330lab7.c:1350: setTextColor(GREEN, BLACK);
      0011D9 E4               [12] 4534 	clr	a
      0011DA F5*00            [12] 4535 	mov	_setTextColor_PARM_2,a
      0011DC F5*01            [12] 4536 	mov	(_setTextColor_PARM_2 + 1),a
      0011DE 90 07 E0         [24] 4537 	mov	dptr,#0x07e0
      0011E1 12r02rD9         [24] 4538 	lcall	_setTextColor
                                   4539 ;	ecen4330lab7.c:1351: LCD_string_write("Write\ncomplete.\n");
      0011E4 90r05rB5         [24] 4540 	mov	dptr,#___str_10
      0011E7 75 F0 80         [24] 4541 	mov	b,#0x80
      0011EA 12r09rC8         [24] 4542 	lcall	_LCD_string_write
                                   4543 ;	ecen4330lab7.c:1352: delay(200);
      0011ED 90 00 C8         [24] 4544 	mov	dptr,#0x00c8
      0011F0 12r00r28         [24] 4545 	lcall	_delay
                                   4546 ;	ecen4330lab7.c:1355: resetLCD();
      0011F3 12r0Dr5C         [24] 4547 	lcall	_resetLCD
                                   4548 ;	ecen4330lab7.c:1356: LCD_string_write("\nVerifying all\nRAM locations\nequal 0xAA.\n\n");
      0011F6 90r06r82         [24] 4549 	mov	dptr,#___str_18
      0011F9 75 F0 80         [24] 4550 	mov	b,#0x80
      0011FC 12r09rC8         [24] 4551 	lcall	_LCD_string_write
                                   4552 ;	ecen4330lab7.c:1358: do
      0011FF 7E 00            [12] 4553 	mov	r6,#0x00
      001201 7F 00            [12] 4554 	mov	r7,#0x00
      001203                       4555 00108$:
                                   4556 ;	ecen4330lab7.c:1360: data = RAMread(i);
      001203 8E 82            [24] 4557 	mov	dpl,r6
      001205 8F 83            [24] 4558 	mov	dph,r7
      001207 C0 07            [24] 4559 	push	ar7
      001209 C0 06            [24] 4560 	push	ar6
      00120B 12r0Dr49         [24] 4561 	lcall	_RAMread
      00120E 85 82*20         [24] 4562 	mov	_data,dpl
      001211 D0 06            [24] 4563 	pop	ar6
      001213 D0 07            [24] 4564 	pop	ar7
                                   4565 ;	ecen4330lab7.c:1361: i++;
      001215 0E               [12] 4566 	inc	r6
      001216 BE 00 01         [24] 4567 	cjne	r6,#0x00,00170$
      001219 0F               [12] 4568 	inc	r7
      00121A                       4569 00170$:
                                   4570 ;	ecen4330lab7.c:1362: } while (data == RAMcheckVal2 && i <= __END_RAM__);
      00121A 74 AA            [12] 4571 	mov	a,#0xaa
      00121C B5*20 04         [24] 4572 	cjne	a,_data,00171$
      00121F 74 01            [12] 4573 	mov	a,#0x01
      001221 80 01            [24] 4574 	sjmp	00172$
      001223                       4575 00171$:
      001223 E4               [12] 4576 	clr	a
      001224                       4577 00172$:
      001224 FD               [12] 4578 	mov	r5,a
      001225 60 09            [24] 4579 	jz	00130$
      001227 C3               [12] 4580 	clr	c
      001228 74 FE            [12] 4581 	mov	a,#0xfe
      00122A 9E               [12] 4582 	subb	a,r6
      00122B 74 FF            [12] 4583 	mov	a,#0xff
      00122D 9F               [12] 4584 	subb	a,r7
      00122E 50 D3            [24] 4585 	jnc	00108$
      001230                       4586 00130$:
                                   4587 ;	ecen4330lab7.c:1363: if(data == RAMcheckVal2){
      001230 ED               [12] 4588 	mov	a,r5
      001231 60 11            [24] 4589 	jz	00112$
                                   4590 ;	ecen4330lab7.c:1364: data = RAMread(0xFFFF);
      001233 90 FF FF         [24] 4591 	mov	dptr,#0xffff
      001236 C0 07            [24] 4592 	push	ar7
      001238 C0 06            [24] 4593 	push	ar6
      00123A 12r0Dr49         [24] 4594 	lcall	_RAMread
      00123D 85 82*20         [24] 4595 	mov	_data,dpl
      001240 D0 06            [24] 4596 	pop	ar6
      001242 D0 07            [24] 4597 	pop	ar7
      001244                       4598 00112$:
                                   4599 ;	ecen4330lab7.c:1367: if(data != RAMcheckVal2){
      001244 74 AA            [12] 4600 	mov	a,#0xaa
      001246 B5*20 02         [24] 4601 	cjne	a,_data,00176$
      001249 80 61            [24] 4602 	sjmp	00114$
      00124B                       4603 00176$:
                                   4604 ;	ecen4330lab7.c:1368: setTextColor(RED, BLACK);
      00124B E4               [12] 4605 	clr	a
      00124C F5*00            [12] 4606 	mov	_setTextColor_PARM_2,a
      00124E F5*01            [12] 4607 	mov	(_setTextColor_PARM_2 + 1),a
      001250 90 F8 00         [24] 4608 	mov	dptr,#0xf800
      001253 C0 07            [24] 4609 	push	ar7
      001255 C0 06            [24] 4610 	push	ar6
      001257 12r02rD9         [24] 4611 	lcall	_setTextColor
                                   4612 ;	ecen4330lab7.c:1369: LCD_string_write("2nd RAM check\nunsuccessful.\n\n");
      00125A 90r06rAD         [24] 4613 	mov	dptr,#___str_19
      00125D 75 F0 80         [24] 4614 	mov	b,#0x80
      001260 12r09rC8         [24] 4615 	lcall	_LCD_string_write
                                   4616 ;	ecen4330lab7.c:1370: delay(100);
      001263 90 00 64         [24] 4617 	mov	dptr,#0x0064
      001266 12r00r28         [24] 4618 	lcall	_delay
                                   4619 ;	ecen4330lab7.c:1372: LCD_string_write("Error at:\n");
      001269 90r06r0F         [24] 4620 	mov	dptr,#___str_13
      00126C 75 F0 80         [24] 4621 	mov	b,#0x80
      00126F 12r09rC8         [24] 4622 	lcall	_LCD_string_write
      001272 D0 06            [24] 4623 	pop	ar6
      001274 D0 07            [24] 4624 	pop	ar7
                                   4625 ;	ecen4330lab7.c:1373: HEXtoASCII_16write(i - 1);
      001276 EE               [12] 4626 	mov	a,r6
      001277 24 FF            [12] 4627 	add	a,#0xff
      001279 F5 82            [12] 4628 	mov	dpl,a
      00127B EF               [12] 4629 	mov	a,r7
      00127C 34 FF            [12] 4630 	addc	a,#0xff
      00127E F5 83            [12] 4631 	mov	dph,a
      001280 12r0Cr75         [24] 4632 	lcall	_HEXtoASCII_16write
                                   4633 ;	ecen4330lab7.c:1374: LCD_string_write(": 0x");
      001283 90r06r1A         [24] 4634 	mov	dptr,#___str_14
      001286 75 F0 80         [24] 4635 	mov	b,#0x80
      001289 12r09rC8         [24] 4636 	lcall	_LCD_string_write
                                   4637 ;	ecen4330lab7.c:1375: HEXtoASCII_8write(data);
      00128C 85*20 82         [24] 4638 	mov	dpl,_data
      00128F 12r0Cr38         [24] 4639 	lcall	_HEXtoASCII_8write
                                   4640 ;	ecen4330lab7.c:1377: setTextColor(WHITE, BLACK);
      001292 E4               [12] 4641 	clr	a
      001293 F5*00            [12] 4642 	mov	_setTextColor_PARM_2,a
      001295 F5*01            [12] 4643 	mov	(_setTextColor_PARM_2 + 1),a
      001297 90 FF FF         [24] 4644 	mov	dptr,#0xffff
      00129A 12r02rD9         [24] 4645 	lcall	_setTextColor
                                   4646 ;	ecen4330lab7.c:1378: LCD_string_write("Returning to\nmain menu.");
      00129D 90r06r1F         [24] 4647 	mov	dptr,#___str_15
      0012A0 75 F0 80         [24] 4648 	mov	b,#0x80
      0012A3 12r09rC8         [24] 4649 	lcall	_LCD_string_write
                                   4650 ;	ecen4330lab7.c:1379: delay(100);
      0012A6 90 00 64         [24] 4651 	mov	dptr,#0x0064
      0012A9 02r00r28         [24] 4652 	ljmp	_delay
      0012AC                       4653 00114$:
                                   4654 ;	ecen4330lab7.c:1384: setTextColor(GREEN, BLACK);
      0012AC E4               [12] 4655 	clr	a
      0012AD F5*00            [12] 4656 	mov	_setTextColor_PARM_2,a
      0012AF F5*01            [12] 4657 	mov	(_setTextColor_PARM_2 + 1),a
      0012B1 90 07 E0         [24] 4658 	mov	dptr,#0x07e0
      0012B4 12r02rD9         [24] 4659 	lcall	_setTextColor
                                   4660 ;	ecen4330lab7.c:1385: LCD_string_write("2nd RAM check\nsuccessful.\n\n");
      0012B7 90r06rCB         [24] 4661 	mov	dptr,#___str_20
      0012BA 75 F0 80         [24] 4662 	mov	b,#0x80
      0012BD 12r09rC8         [24] 4663 	lcall	_LCD_string_write
                                   4664 ;	ecen4330lab7.c:1386: LCD_string_write("RAM check\ncomplete.\n\n");
      0012C0 90r06rE7         [24] 4665 	mov	dptr,#___str_21
      0012C3 75 F0 80         [24] 4666 	mov	b,#0x80
      0012C6 12r09rC8         [24] 4667 	lcall	_LCD_string_write
                                   4668 ;	ecen4330lab7.c:1387: delay(100);
      0012C9 90 00 64         [24] 4669 	mov	dptr,#0x0064
      0012CC 12r00r28         [24] 4670 	lcall	_delay
                                   4671 ;	ecen4330lab7.c:1388: setTextColor(WHITE, BLACK);
      0012CF E4               [12] 4672 	clr	a
      0012D0 F5*00            [12] 4673 	mov	_setTextColor_PARM_2,a
      0012D2 F5*01            [12] 4674 	mov	(_setTextColor_PARM_2 + 1),a
      0012D4 90 FF FF         [24] 4675 	mov	dptr,#0xffff
      0012D7 12r02rD9         [24] 4676 	lcall	_setTextColor
                                   4677 ;	ecen4330lab7.c:1389: LCD_string_write("Returning to\nmain menu.");
      0012DA 90r06r1F         [24] 4678 	mov	dptr,#___str_15
      0012DD 75 F0 80         [24] 4679 	mov	b,#0x80
      0012E0 12r09rC8         [24] 4680 	lcall	_LCD_string_write
                                   4681 ;	ecen4330lab7.c:1390: delay(100);
      0012E3 90 00 64         [24] 4682 	mov	dptr,#0x0064
                                   4683 ;	ecen4330lab7.c:1393: }
      0012E6 02r00r28         [24] 4684 	ljmp	_delay
                                   4685 ;------------------------------------------------------------
                                   4686 ;Allocation info for local variables in function 'MOVE'
                                   4687 ;------------------------------------------------------------
                                   4688 ;	ecen4330lab7.c:1416: void MOVE(){
                                   4689 ;	-----------------------------------------
                                   4690 ;	 function MOVE
                                   4691 ;	-----------------------------------------
      0012E9                       4692 _MOVE:
                                   4693 ;	ecen4330lab7.c:1417: endAddrCalc = 0;
      0012E9 E4               [12] 4694 	clr	a
      0012EA F5*34            [12] 4695 	mov	_endAddrCalc,a
      0012EC F5*35            [12] 4696 	mov	(_endAddrCalc + 1),a
      0012EE F5*36            [12] 4697 	mov	(_endAddrCalc + 2),a
      0012F0 F5*37            [12] 4698 	mov	(_endAddrCalc + 3),a
                                   4699 ;	ecen4330lab7.c:1418: addr0 = 0;                  // Source Address
      0012F2 F5*21            [12] 4700 	mov	_addr0,a
      0012F4 F5*22            [12] 4701 	mov	(_addr0 + 1),a
                                   4702 ;	ecen4330lab7.c:1419: addr1 = 0;                  // Source End Address
      0012F6 F5*23            [12] 4703 	mov	_addr1,a
      0012F8 F5*24            [12] 4704 	mov	(_addr1 + 1),a
                                   4705 ;	ecen4330lab7.c:1420: addr2 = 0;                  // Destination Address
      0012FA F5*25            [12] 4706 	mov	_addr2,a
      0012FC F5*26            [12] 4707 	mov	(_addr2 + 1),a
                                   4708 ;	ecen4330lab7.c:1421: addr3 = 0;                  // Destination End Address
      0012FE F5*27            [12] 4709 	mov	_addr3,a
      001300 F5*28            [12] 4710 	mov	(_addr3 + 1),a
                                   4711 ;	ecen4330lab7.c:1422: currAddr0 = 0;              // Current Source Address
      001302 F5*29            [12] 4712 	mov	_currAddr0,a
      001304 F5*2A            [12] 4713 	mov	(_currAddr0 + 1),a
                                   4714 ;	ecen4330lab7.c:1423: currAddr1 = 0;              // Current Destination Address
      001306 F5*2B            [12] 4715 	mov	_currAddr1,a
      001308 F5*2C            [12] 4716 	mov	(_currAddr1 + 1),a
                                   4717 ;	ecen4330lab7.c:1426: resetLCD();
      00130A 12r0Dr5C         [24] 4718 	lcall	_resetLCD
                                   4719 ;	ecen4330lab7.c:1427: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n\n  0x____");
      00130D 90r06rFD         [24] 4720 	mov	dptr,#___str_22
      001310 75 F0 80         [24] 4721 	mov	b,#0x80
      001313 12r09rC8         [24] 4722 	lcall	_LCD_string_write
                                   4723 ;	ecen4330lab7.c:1428: cursor_x -= 4 * textsize * 6;
      001316 E5*0C            [12] 4724 	mov	a,_textsize
      001318 75 F0 18         [24] 4725 	mov	b,#0x18
      00131B A4               [48] 4726 	mul	ab
      00131C FE               [12] 4727 	mov	r6,a
      00131D AF F0            [24] 4728 	mov	r7,b
      00131F E5*08            [12] 4729 	mov	a,_cursor_x
      001321 C3               [12] 4730 	clr	c
      001322 9E               [12] 4731 	subb	a,r6
      001323 F5*08            [12] 4732 	mov	_cursor_x,a
      001325 E5*09            [12] 4733 	mov	a,(_cursor_x + 1)
      001327 9F               [12] 4734 	subb	a,r7
      001328 F5*09            [12] 4735 	mov	(_cursor_x + 1),a
                                   4736 ;	ecen4330lab7.c:1429: inputRead16();
      00132A 12r0DrAD         [24] 4737 	lcall	_inputRead16
                                   4738 ;	ecen4330lab7.c:1430: addr0 = input16;
      00132D 85*17*21         [24] 4739 	mov	_addr0,_input16
      001330 85*18*22         [24] 4740 	mov	(_addr0 + 1),(_input16 + 1)
                                   4741 ;	ecen4330lab7.c:1433: resetLCD();
      001333 12r0Dr5C         [24] 4742 	lcall	_resetLCD
                                   4743 ;	ecen4330lab7.c:1434: LCD_string_write("\nEnter\ndestination\nstarting RAM\naddress:\n\n\n  0x____");
      001336 90r07r2C         [24] 4744 	mov	dptr,#___str_23
      001339 75 F0 80         [24] 4745 	mov	b,#0x80
      00133C 12r09rC8         [24] 4746 	lcall	_LCD_string_write
                                   4747 ;	ecen4330lab7.c:1435: cursor_x -= 4 * textsize * 6;
      00133F E5*0C            [12] 4748 	mov	a,_textsize
      001341 75 F0 18         [24] 4749 	mov	b,#0x18
      001344 A4               [48] 4750 	mul	ab
      001345 FE               [12] 4751 	mov	r6,a
      001346 AF F0            [24] 4752 	mov	r7,b
      001348 E5*08            [12] 4753 	mov	a,_cursor_x
      00134A C3               [12] 4754 	clr	c
      00134B 9E               [12] 4755 	subb	a,r6
      00134C F5*08            [12] 4756 	mov	_cursor_x,a
      00134E E5*09            [12] 4757 	mov	a,(_cursor_x + 1)
      001350 9F               [12] 4758 	subb	a,r7
      001351 F5*09            [12] 4759 	mov	(_cursor_x + 1),a
                                   4760 ;	ecen4330lab7.c:1436: inputRead16();
      001353 12r0DrAD         [24] 4761 	lcall	_inputRead16
                                   4762 ;	ecen4330lab7.c:1437: addr2 = input16;
      001356 85*17*25         [24] 4763 	mov	_addr2,_input16
      001359 85*18*26         [24] 4764 	mov	(_addr2 + 1),(_input16 + 1)
                                   4765 ;	ecen4330lab7.c:1440: inputDataType();
      00135C 12r0ErBC         [24] 4766 	lcall	_inputDataType
                                   4767 ;	ecen4330lab7.c:1443: resetLCD();
      00135F 12r0Dr5C         [24] 4768 	lcall	_resetLCD
                                   4769 ;	ecen4330lab7.c:1444: inputDataSize();
      001362 12r0Fr79         [24] 4770 	lcall	_inputDataSize
                                   4771 ;	ecen4330lab7.c:1447: if(addr2 > addr0){
      001365 C3               [12] 4772 	clr	c
      001366 E5*21            [12] 4773 	mov	a,_addr0
      001368 95*25            [12] 4774 	subb	a,_addr2
      00136A E5*22            [12] 4775 	mov	a,(_addr0 + 1)
      00136C 95*26            [12] 4776 	subb	a,(_addr2 + 1)
      00136E 50 63            [24] 4777 	jnc	00108$
                                   4778 ;	ecen4330lab7.c:1448: endAddrCalc = addr2 + (dataSize * dataType);
      001370 85*1A*00         [24] 4779 	mov	__mulint_PARM_2,_dataType
      001373 75*01 00         [24] 4780 	mov	(__mulint_PARM_2 + 1),#0x00
      001376 85*1B 82         [24] 4781 	mov	dpl,_dataSize
      001379 85*1C 83         [24] 4782 	mov	dph,(_dataSize + 1)
      00137C 12r00r00         [24] 4783 	lcall	__mulint
      00137F AE 82            [24] 4784 	mov	r6,dpl
      001381 AF 83            [24] 4785 	mov	r7,dph
      001383 EE               [12] 4786 	mov	a,r6
      001384 25*25            [12] 4787 	add	a,_addr2
      001386 FC               [12] 4788 	mov	r4,a
      001387 EF               [12] 4789 	mov	a,r7
      001388 35*26            [12] 4790 	addc	a,(_addr2 + 1)
      00138A FD               [12] 4791 	mov	r5,a
      00138B 8C*34            [24] 4792 	mov	_endAddrCalc,r4
      00138D 8D*35            [24] 4793 	mov	(_endAddrCalc + 1),r5
      00138F 75*36 00         [24] 4794 	mov	(_endAddrCalc + 2),#0x00
      001392 75*37 00         [24] 4795 	mov	(_endAddrCalc + 3),#0x00
                                   4796 ;	ecen4330lab7.c:1449: if(endAddrCalc > 0xFFFF){
      001395 C3               [12] 4797 	clr	c
      001396 74 FF            [12] 4798 	mov	a,#0xff
      001398 95*34            [12] 4799 	subb	a,_endAddrCalc
      00139A 74 FF            [12] 4800 	mov	a,#0xff
      00139C 95*35            [12] 4801 	subb	a,(_endAddrCalc + 1)
      00139E E4               [12] 4802 	clr	a
      00139F 95*36            [12] 4803 	subb	a,(_endAddrCalc + 2)
      0013A1 E4               [12] 4804 	clr	a
      0013A2 95*37            [12] 4805 	subb	a,(_endAddrCalc + 3)
      0013A4 50 08            [24] 4806 	jnc	00102$
                                   4807 ;	ecen4330lab7.c:1450: addr3 = 0xFFFF;
      0013A6 75*27 FF         [24] 4808 	mov	_addr3,#0xff
      0013A9 75*28 FF         [24] 4809 	mov	(_addr3 + 1),#0xff
      0013AC 80 0A            [24] 4810 	sjmp	00103$
      0013AE                       4811 00102$:
                                   4812 ;	ecen4330lab7.c:1453: addr3 = addr2 + (dataSize * dataType);
      0013AE EE               [12] 4813 	mov	a,r6
      0013AF 25*25            [12] 4814 	add	a,_addr2
      0013B1 F5*27            [12] 4815 	mov	_addr3,a
      0013B3 EF               [12] 4816 	mov	a,r7
      0013B4 35*26            [12] 4817 	addc	a,(_addr2 + 1)
      0013B6 F5*28            [12] 4818 	mov	(_addr3 + 1),a
      0013B8                       4819 00103$:
                                   4820 ;	ecen4330lab7.c:1455: dataSize = addr3 - addr2;
      0013B8 E5*27            [12] 4821 	mov	a,_addr3
      0013BA C3               [12] 4822 	clr	c
      0013BB 95*25            [12] 4823 	subb	a,_addr2
      0013BD F5*1B            [12] 4824 	mov	_dataSize,a
      0013BF E5*28            [12] 4825 	mov	a,(_addr3 + 1)
      0013C1 95*26            [12] 4826 	subb	a,(_addr2 + 1)
      0013C3 F5*1C            [12] 4827 	mov	(_dataSize + 1),a
                                   4828 ;	ecen4330lab7.c:1456: addr1 = addr0 + dataSize;
      0013C5 E5*1B            [12] 4829 	mov	a,_dataSize
      0013C7 25*21            [12] 4830 	add	a,_addr0
      0013C9 F5*23            [12] 4831 	mov	_addr1,a
      0013CB E5*1C            [12] 4832 	mov	a,(_dataSize + 1)
      0013CD 35*22            [12] 4833 	addc	a,(_addr0 + 1)
      0013CF F5*24            [12] 4834 	mov	(_addr1 + 1),a
      0013D1 80 61            [24] 4835 	sjmp	00109$
      0013D3                       4836 00108$:
                                   4837 ;	ecen4330lab7.c:1459: endAddrCalc = addr0 + (dataSize * dataType);
      0013D3 85*1A*00         [24] 4838 	mov	__mulint_PARM_2,_dataType
      0013D6 75*01 00         [24] 4839 	mov	(__mulint_PARM_2 + 1),#0x00
      0013D9 85*1B 82         [24] 4840 	mov	dpl,_dataSize
      0013DC 85*1C 83         [24] 4841 	mov	dph,(_dataSize + 1)
      0013DF 12r00r00         [24] 4842 	lcall	__mulint
      0013E2 AE 82            [24] 4843 	mov	r6,dpl
      0013E4 AF 83            [24] 4844 	mov	r7,dph
      0013E6 EE               [12] 4845 	mov	a,r6
      0013E7 25*21            [12] 4846 	add	a,_addr0
      0013E9 FC               [12] 4847 	mov	r4,a
      0013EA EF               [12] 4848 	mov	a,r7
      0013EB 35*22            [12] 4849 	addc	a,(_addr0 + 1)
      0013ED FD               [12] 4850 	mov	r5,a
      0013EE 8C*34            [24] 4851 	mov	_endAddrCalc,r4
      0013F0 8D*35            [24] 4852 	mov	(_endAddrCalc + 1),r5
      0013F2 75*36 00         [24] 4853 	mov	(_endAddrCalc + 2),#0x00
      0013F5 75*37 00         [24] 4854 	mov	(_endAddrCalc + 3),#0x00
                                   4855 ;	ecen4330lab7.c:1460: if(endAddrCalc > 0xFFFF){
      0013F8 C3               [12] 4856 	clr	c
      0013F9 74 FF            [12] 4857 	mov	a,#0xff
      0013FB 95*34            [12] 4858 	subb	a,_endAddrCalc
      0013FD 74 FF            [12] 4859 	mov	a,#0xff
      0013FF 95*35            [12] 4860 	subb	a,(_endAddrCalc + 1)
      001401 E4               [12] 4861 	clr	a
      001402 95*36            [12] 4862 	subb	a,(_endAddrCalc + 2)
      001404 E4               [12] 4863 	clr	a
      001405 95*37            [12] 4864 	subb	a,(_endAddrCalc + 3)
      001407 50 08            [24] 4865 	jnc	00105$
                                   4866 ;	ecen4330lab7.c:1461: addr1 = 0xFFFF;
      001409 75*23 FF         [24] 4867 	mov	_addr1,#0xff
      00140C 75*24 FF         [24] 4868 	mov	(_addr1 + 1),#0xff
      00140F 80 0A            [24] 4869 	sjmp	00106$
      001411                       4870 00105$:
                                   4871 ;	ecen4330lab7.c:1464: addr1 = addr0 + (dataSize * dataType);
      001411 EE               [12] 4872 	mov	a,r6
      001412 25*21            [12] 4873 	add	a,_addr0
      001414 F5*23            [12] 4874 	mov	_addr1,a
      001416 EF               [12] 4875 	mov	a,r7
      001417 35*22            [12] 4876 	addc	a,(_addr0 + 1)
      001419 F5*24            [12] 4877 	mov	(_addr1 + 1),a
      00141B                       4878 00106$:
                                   4879 ;	ecen4330lab7.c:1466: dataSize = addr1 - addr0;
      00141B E5*23            [12] 4880 	mov	a,_addr1
      00141D C3               [12] 4881 	clr	c
      00141E 95*21            [12] 4882 	subb	a,_addr0
      001420 F5*1B            [12] 4883 	mov	_dataSize,a
      001422 E5*24            [12] 4884 	mov	a,(_addr1 + 1)
      001424 95*22            [12] 4885 	subb	a,(_addr0 + 1)
      001426 F5*1C            [12] 4886 	mov	(_dataSize + 1),a
                                   4887 ;	ecen4330lab7.c:1467: addr3 = addr2 + dataSize;
      001428 E5*1B            [12] 4888 	mov	a,_dataSize
      00142A 25*25            [12] 4889 	add	a,_addr2
      00142C F5*27            [12] 4890 	mov	_addr3,a
      00142E E5*1C            [12] 4891 	mov	a,(_dataSize + 1)
      001430 35*26            [12] 4892 	addc	a,(_addr2 + 1)
      001432 F5*28            [12] 4893 	mov	(_addr3 + 1),a
      001434                       4894 00109$:
                                   4895 ;	ecen4330lab7.c:1472: if(addr0 < addr2 && addr1 > addr2){
      001434 C3               [12] 4896 	clr	c
      001435 E5*21            [12] 4897 	mov	a,_addr0
      001437 95*25            [12] 4898 	subb	a,_addr2
      001439 E5*22            [12] 4899 	mov	a,(_addr0 + 1)
      00143B 95*26            [12] 4900 	subb	a,(_addr2 + 1)
      00143D 50 4E            [24] 4901 	jnc	00113$
      00143F C3               [12] 4902 	clr	c
      001440 E5*25            [12] 4903 	mov	a,_addr2
      001442 95*23            [12] 4904 	subb	a,_addr1
      001444 E5*26            [12] 4905 	mov	a,(_addr2 + 1)
      001446 95*24            [12] 4906 	subb	a,(_addr1 + 1)
      001448 50 43            [24] 4907 	jnc	00113$
                                   4908 ;	ecen4330lab7.c:1473: currAddr0 = addr1;
      00144A 85*23*29         [24] 4909 	mov	_currAddr0,_addr1
      00144D 85*24*2A         [24] 4910 	mov	(_currAddr0 + 1),(_addr1 + 1)
                                   4911 ;	ecen4330lab7.c:1474: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      001450 85*27*2B         [24] 4912 	mov	_currAddr1,_addr3
      001453 85*28*2C         [24] 4913 	mov	(_currAddr1 + 1),(_addr3 + 1)
      001456                       4914 00117$:
      001456 C3               [12] 4915 	clr	c
      001457 E5*2B            [12] 4916 	mov	a,_currAddr1
      001459 95*25            [12] 4917 	subb	a,_addr2
      00145B E5*2C            [12] 4918 	mov	a,(_currAddr1 + 1)
      00145D 95*26            [12] 4919 	subb	a,(_addr2 + 1)
      00145F 40 6D            [24] 4920 	jc	00114$
                                   4921 ;	ecen4330lab7.c:1475: data = RAMread(currAddr0);
      001461 85*29 82         [24] 4922 	mov	dpl,_currAddr0
      001464 85*2A 83         [24] 4923 	mov	dph,(_currAddr0 + 1)
      001467 12r0Dr49         [24] 4924 	lcall	_RAMread
      00146A 85 82*20         [24] 4925 	mov	_data,dpl
                                   4926 ;	ecen4330lab7.c:1476: RAMwrite(currAddr1, data);
      00146D 85*20*00         [24] 4927 	mov	_RAMwrite_PARM_2,_data
      001470 85*2B 82         [24] 4928 	mov	dpl,_currAddr1
      001473 85*2C 83         [24] 4929 	mov	dph,(_currAddr1 + 1)
      001476 12r0Dr1A         [24] 4930 	lcall	_RAMwrite
                                   4931 ;	ecen4330lab7.c:1477: currAddr0--;
      001479 15*29            [12] 4932 	dec	_currAddr0
      00147B 74 FF            [12] 4933 	mov	a,#0xff
      00147D B5*29 02         [24] 4934 	cjne	a,_currAddr0,00166$
      001480 15*2A            [12] 4935 	dec	(_currAddr0 + 1)
      001482                       4936 00166$:
                                   4937 ;	ecen4330lab7.c:1474: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      001482 15*2B            [12] 4938 	dec	_currAddr1
      001484 74 FF            [12] 4939 	mov	a,#0xff
      001486 B5*2B 02         [24] 4940 	cjne	a,_currAddr1,00167$
      001489 15*2C            [12] 4941 	dec	(_currAddr1 + 1)
      00148B                       4942 00167$:
      00148B 80 C9            [24] 4943 	sjmp	00117$
      00148D                       4944 00113$:
                                   4945 ;	ecen4330lab7.c:1484: currAddr0 = addr0;
      00148D 85*21*29         [24] 4946 	mov	_currAddr0,_addr0
      001490 85*22*2A         [24] 4947 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   4948 ;	ecen4330lab7.c:1485: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      001493 85*25*2B         [24] 4949 	mov	_currAddr1,_addr2
      001496 85*26*2C         [24] 4950 	mov	(_currAddr1 + 1),(_addr2 + 1)
      001499                       4951 00120$:
      001499 C3               [12] 4952 	clr	c
      00149A E5*27            [12] 4953 	mov	a,_addr3
      00149C 95*2B            [12] 4954 	subb	a,_currAddr1
      00149E E5*28            [12] 4955 	mov	a,(_addr3 + 1)
      0014A0 95*2C            [12] 4956 	subb	a,(_currAddr1 + 1)
      0014A2 40 2A            [24] 4957 	jc	00114$
                                   4958 ;	ecen4330lab7.c:1486: data = RAMread(currAddr0);
      0014A4 85*29 82         [24] 4959 	mov	dpl,_currAddr0
      0014A7 85*2A 83         [24] 4960 	mov	dph,(_currAddr0 + 1)
      0014AA 12r0Dr49         [24] 4961 	lcall	_RAMread
      0014AD 85 82*20         [24] 4962 	mov	_data,dpl
                                   4963 ;	ecen4330lab7.c:1487: RAMwrite(currAddr1, data);
      0014B0 85*20*00         [24] 4964 	mov	_RAMwrite_PARM_2,_data
      0014B3 85*2B 82         [24] 4965 	mov	dpl,_currAddr1
      0014B6 85*2C 83         [24] 4966 	mov	dph,(_currAddr1 + 1)
      0014B9 12r0Dr1A         [24] 4967 	lcall	_RAMwrite
                                   4968 ;	ecen4330lab7.c:1488: currAddr0++;
      0014BC 05*29            [12] 4969 	inc	_currAddr0
      0014BE E4               [12] 4970 	clr	a
      0014BF B5*29 02         [24] 4971 	cjne	a,_currAddr0,00169$
      0014C2 05*2A            [12] 4972 	inc	(_currAddr0 + 1)
      0014C4                       4973 00169$:
                                   4974 ;	ecen4330lab7.c:1485: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      0014C4 05*2B            [12] 4975 	inc	_currAddr1
      0014C6 E4               [12] 4976 	clr	a
      0014C7 B5*2B CF         [24] 4977 	cjne	a,_currAddr1,00120$
      0014CA 05*2C            [12] 4978 	inc	(_currAddr1 + 1)
      0014CC 80 CB            [24] 4979 	sjmp	00120$
      0014CE                       4980 00114$:
                                   4981 ;	ecen4330lab7.c:1493: resetLCD();
      0014CE 12r0Dr5C         [24] 4982 	lcall	_resetLCD
                                   4983 ;	ecen4330lab7.c:1494: setTextColor(GREEN, BLACK);
      0014D1 E4               [12] 4984 	clr	a
      0014D2 F5*00            [12] 4985 	mov	_setTextColor_PARM_2,a
      0014D4 F5*01            [12] 4986 	mov	(_setTextColor_PARM_2 + 1),a
      0014D6 90 07 E0         [24] 4987 	mov	dptr,#0x07e0
      0014D9 12r02rD9         [24] 4988 	lcall	_setTextColor
                                   4989 ;	ecen4330lab7.c:1495: LCD_string_write("\nMove complete.\n\n");
      0014DC 90r07r60         [24] 4990 	mov	dptr,#___str_24
      0014DF 75 F0 80         [24] 4991 	mov	b,#0x80
      0014E2 12r09rC8         [24] 4992 	lcall	_LCD_string_write
                                   4993 ;	ecen4330lab7.c:1496: delay(100);
      0014E5 90 00 64         [24] 4994 	mov	dptr,#0x0064
      0014E8 12r00r28         [24] 4995 	lcall	_delay
                                   4996 ;	ecen4330lab7.c:1497: setTextColor(WHITE, BLACK);
      0014EB E4               [12] 4997 	clr	a
      0014EC F5*00            [12] 4998 	mov	_setTextColor_PARM_2,a
      0014EE F5*01            [12] 4999 	mov	(_setTextColor_PARM_2 + 1),a
      0014F0 90 FF FF         [24] 5000 	mov	dptr,#0xffff
      0014F3 12r02rD9         [24] 5001 	lcall	_setTextColor
                                   5002 ;	ecen4330lab7.c:1498: LCD_string_write("Returning to\nmain menu.");
      0014F6 90r06r1F         [24] 5003 	mov	dptr,#___str_15
      0014F9 75 F0 80         [24] 5004 	mov	b,#0x80
      0014FC 12r09rC8         [24] 5005 	lcall	_LCD_string_write
                                   5006 ;	ecen4330lab7.c:1499: delay(100);
      0014FF 90 00 64         [24] 5007 	mov	dptr,#0x0064
                                   5008 ;	ecen4330lab7.c:1500: }
      001502 02r00r28         [24] 5009 	ljmp	_delay
                                   5010 ;------------------------------------------------------------
                                   5011 ;Allocation info for local variables in function 'COUNT'
                                   5012 ;------------------------------------------------------------
                                   5013 ;i                         Allocated to registers 
                                   5014 ;------------------------------------------------------------
                                   5015 ;	ecen4330lab7.c:1507: void COUNT(){
                                   5016 ;	-----------------------------------------
                                   5017 ;	 function COUNT
                                   5018 ;	-----------------------------------------
      001505                       5019 _COUNT:
                                   5020 ;	ecen4330lab7.c:1508: endAddrCalc = 0;
      001505 E4               [12] 5021 	clr	a
      001506 F5*34            [12] 5022 	mov	_endAddrCalc,a
      001508 F5*35            [12] 5023 	mov	(_endAddrCalc + 1),a
      00150A F5*36            [12] 5024 	mov	(_endAddrCalc + 2),a
      00150C F5*37            [12] 5025 	mov	(_endAddrCalc + 3),a
                                   5026 ;	ecen4330lab7.c:1509: addr0 = 0;                      // Starting Address
      00150E F5*21            [12] 5027 	mov	_addr0,a
      001510 F5*22            [12] 5028 	mov	(_addr0 + 1),a
                                   5029 ;	ecen4330lab7.c:1510: addr1 = 0;                      // End Address
      001512 F5*23            [12] 5030 	mov	_addr1,a
      001514 F5*24            [12] 5031 	mov	(_addr1 + 1),a
                                   5032 ;	ecen4330lab7.c:1511: dataSize = 0;                   // Data Size
      001516 F5*1B            [12] 5033 	mov	_dataSize,a
      001518 F5*1C            [12] 5034 	mov	(_dataSize + 1),a
                                   5035 ;	ecen4330lab7.c:1512: byte1 = 0;                       // Find Value
      00151A F5*2F            [12] 5036 	mov	_byte1,a
      00151C F5*30            [12] 5037 	mov	(_byte1 + 1),a
                                   5038 ;	ecen4330lab7.c:1513: count = 0;
      00151E F5*32            [12] 5039 	mov	_count,a
      001520 F5*33            [12] 5040 	mov	(_count + 1),a
                                   5041 ;	ecen4330lab7.c:1514: addr3 = 0;						// Count overflow
      001522 F5*27            [12] 5042 	mov	_addr3,a
      001524 F5*28            [12] 5043 	mov	(_addr3 + 1),a
                                   5044 ;	ecen4330lab7.c:1515: dataEnd = 0;
                                   5045 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      001526 F5*1E            [12] 5046 	mov	_dataEnd,a
                                   5047 ;	ecen4330lab7.c:1518: resetLCD();
      001528 12r0Dr5C         [24] 5048 	lcall	_resetLCD
                                   5049 ;	ecen4330lab7.c:1519: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      00152B 90r07r72         [24] 5050 	mov	dptr,#___str_25
      00152E 75 F0 80         [24] 5051 	mov	b,#0x80
      001531 12r09rC8         [24] 5052 	lcall	_LCD_string_write
                                   5053 ;	ecen4330lab7.c:1520: cursor_x -= 4 * textsize * 6;
      001534 E5*0C            [12] 5054 	mov	a,_textsize
      001536 75 F0 18         [24] 5055 	mov	b,#0x18
      001539 A4               [48] 5056 	mul	ab
      00153A FE               [12] 5057 	mov	r6,a
      00153B AF F0            [24] 5058 	mov	r7,b
      00153D E5*08            [12] 5059 	mov	a,_cursor_x
      00153F C3               [12] 5060 	clr	c
      001540 9E               [12] 5061 	subb	a,r6
      001541 F5*08            [12] 5062 	mov	_cursor_x,a
      001543 E5*09            [12] 5063 	mov	a,(_cursor_x + 1)
      001545 9F               [12] 5064 	subb	a,r7
      001546 F5*09            [12] 5065 	mov	(_cursor_x + 1),a
                                   5066 ;	ecen4330lab7.c:1521: inputRead16();                  // Read input
      001548 12r0DrAD         [24] 5067 	lcall	_inputRead16
                                   5068 ;	ecen4330lab7.c:1522: addr0 = input16;                // Start address
      00154B 85*17*21         [24] 5069 	mov	_addr0,_input16
      00154E 85*18*22         [24] 5070 	mov	(_addr0 + 1),(_input16 + 1)
                                   5071 ;	ecen4330lab7.c:1525: resetLCD();
      001551 12r0Dr5C         [24] 5072 	lcall	_resetLCD
                                   5073 ;	ecen4330lab7.c:1526: inputDataSize();                // Prompt & read input
      001554 12r0Fr79         [24] 5074 	lcall	_inputDataSize
                                   5075 ;	ecen4330lab7.c:1529: resetLCD();
      001557 12r0Dr5C         [24] 5076 	lcall	_resetLCD
                                   5077 ;	ecen4330lab7.c:1530: LCD_string_write("\nEnter search\nvalue:\n\n  0x__");
      00155A 90r07r99         [24] 5078 	mov	dptr,#___str_26
      00155D 75 F0 80         [24] 5079 	mov	b,#0x80
      001560 12r09rC8         [24] 5080 	lcall	_LCD_string_write
                                   5081 ;	ecen4330lab7.c:1531: cursor_x -= 2 * textsize * 6;
      001563 E5*0C            [12] 5082 	mov	a,_textsize
      001565 75 F0 0C         [24] 5083 	mov	b,#0x0c
      001568 A4               [48] 5084 	mul	ab
      001569 FE               [12] 5085 	mov	r6,a
      00156A AF F0            [24] 5086 	mov	r7,b
      00156C E5*08            [12] 5087 	mov	a,_cursor_x
      00156E C3               [12] 5088 	clr	c
      00156F 9E               [12] 5089 	subb	a,r6
      001570 F5*08            [12] 5090 	mov	_cursor_x,a
      001572 E5*09            [12] 5091 	mov	a,(_cursor_x + 1)
      001574 9F               [12] 5092 	subb	a,r7
      001575 F5*09            [12] 5093 	mov	(_cursor_x + 1),a
                                   5094 ;	ecen4330lab7.c:1532: inputRead8();                  // Read input
      001577 12r0Er68         [24] 5095 	lcall	_inputRead8
                                   5096 ;	ecen4330lab7.c:1533: byte1 = input8;                 // Find value
      00157A 85*19*2F         [24] 5097 	mov	_byte1,_input8
      00157D 75*30 00         [24] 5098 	mov	(_byte1 + 1),#0x00
                                   5099 ;	ecen4330lab7.c:1536: endAddrCalc = addr0 + dataSize;
      001580 E5*1B            [12] 5100 	mov	a,_dataSize
      001582 25*21            [12] 5101 	add	a,_addr0
      001584 FE               [12] 5102 	mov	r6,a
      001585 E5*1C            [12] 5103 	mov	a,(_dataSize + 1)
      001587 35*22            [12] 5104 	addc	a,(_addr0 + 1)
      001589 FF               [12] 5105 	mov	r7,a
      00158A 8E*34            [24] 5106 	mov	_endAddrCalc,r6
      00158C 8F*35            [24] 5107 	mov	(_endAddrCalc + 1),r7
      00158E 75*36 00         [24] 5108 	mov	(_endAddrCalc + 2),#0x00
      001591 75*37 00         [24] 5109 	mov	(_endAddrCalc + 3),#0x00
                                   5110 ;	ecen4330lab7.c:1537: if(endAddrCalc < addr0){ // RAM overflow
      001594 AC*21            [24] 5111 	mov	r4,_addr0
      001596 AD*22            [24] 5112 	mov	r5,(_addr0 + 1)
      001598 7E 00            [12] 5113 	mov	r6,#0x00
      00159A 7F 00            [12] 5114 	mov	r7,#0x00
      00159C C3               [12] 5115 	clr	c
      00159D E5*34            [12] 5116 	mov	a,_endAddrCalc
      00159F 9C               [12] 5117 	subb	a,r4
      0015A0 E5*35            [12] 5118 	mov	a,(_endAddrCalc + 1)
      0015A2 9D               [12] 5119 	subb	a,r5
      0015A3 E5*36            [12] 5120 	mov	a,(_endAddrCalc + 2)
      0015A5 9E               [12] 5121 	subb	a,r6
      0015A6 E5*37            [12] 5122 	mov	a,(_endAddrCalc + 3)
      0015A8 9F               [12] 5123 	subb	a,r7
      0015A9 50 14            [24] 5124 	jnc	00102$
                                   5125 ;	ecen4330lab7.c:1538: addr1 = 0xFFFF;             // Set end address
      0015AB 75*23 FF         [24] 5126 	mov	_addr1,#0xff
                                   5127 ;	ecen4330lab7.c:1539: dataSize = addr1 - addr0;   // Recalculate data size
      0015AE 74 FF            [12] 5128 	mov	a,#0xff
      0015B0 F5*24            [12] 5129 	mov	(_addr1 + 1),a
      0015B2 C3               [12] 5130 	clr	c
      0015B3 95*21            [12] 5131 	subb	a,_addr0
      0015B5 F5*1B            [12] 5132 	mov	_dataSize,a
      0015B7 74 FF            [12] 5133 	mov	a,#0xff
      0015B9 95*22            [12] 5134 	subb	a,(_addr0 + 1)
      0015BB F5*1C            [12] 5135 	mov	(_dataSize + 1),a
      0015BD 80 0C            [24] 5136 	sjmp	00103$
      0015BF                       5137 00102$:
                                   5138 ;	ecen4330lab7.c:1542: addr1 = addr0 + dataSize;
      0015BF E5*1B            [12] 5139 	mov	a,_dataSize
      0015C1 25*21            [12] 5140 	add	a,_addr0
      0015C3 F5*23            [12] 5141 	mov	_addr1,a
      0015C5 E5*1C            [12] 5142 	mov	a,(_dataSize + 1)
      0015C7 35*22            [12] 5143 	addc	a,(_addr0 + 1)
      0015C9 F5*24            [12] 5144 	mov	(_addr1 + 1),a
      0015CB                       5145 00103$:
                                   5146 ;	ecen4330lab7.c:1560: int i = addr0;
      0015CB AE*21            [24] 5147 	mov	r6,_addr0
      0015CD AF*22            [24] 5148 	mov	r7,(_addr0 + 1)
                                   5149 ;	ecen4330lab7.c:1561: while(i <= addr1 && dataEnd == 0){
      0015CF                       5150 00111$:
      0015CF 8E 04            [24] 5151 	mov	ar4,r6
      0015D1 8F 05            [24] 5152 	mov	ar5,r7
      0015D3 C3               [12] 5153 	clr	c
      0015D4 E5*23            [12] 5154 	mov	a,_addr1
      0015D6 9C               [12] 5155 	subb	a,r4
      0015D7 E5*24            [12] 5156 	mov	a,(_addr1 + 1)
      0015D9 9D               [12] 5157 	subb	a,r5
      0015DA 40 4C            [24] 5158 	jc	00113$
      0015DC E5*1E            [12] 5159 	mov	a,_dataEnd
      0015DE 70 48            [24] 5160 	jnz	00113$
                                   5161 ;	ecen4330lab7.c:1562: data = RAMread(i);
      0015E0 8E 82            [24] 5162 	mov	dpl,r6
      0015E2 8F 83            [24] 5163 	mov	dph,r7
      0015E4 C0 07            [24] 5164 	push	ar7
      0015E6 C0 06            [24] 5165 	push	ar6
      0015E8 12r0Dr49         [24] 5166 	lcall	_RAMread
      0015EB 85 82*20         [24] 5167 	mov	_data,dpl
      0015EE D0 06            [24] 5168 	pop	ar6
      0015F0 D0 07            [24] 5169 	pop	ar7
                                   5170 ;	ecen4330lab7.c:1563: if(data == byte1){
      0015F2 AC*20            [24] 5171 	mov	r4,_data
      0015F4 7D 00            [12] 5172 	mov	r5,#0x00
      0015F6 EC               [12] 5173 	mov	a,r4
      0015F7 B5*2F 1A         [24] 5174 	cjne	a,_byte1,00107$
      0015FA ED               [12] 5175 	mov	a,r5
      0015FB B5*30 16         [24] 5176 	cjne	a,(_byte1 + 1),00107$
                                   5177 ;	ecen4330lab7.c:1564: if(count == 0xFFFF){
      0015FE 74 FF            [12] 5178 	mov	a,#0xff
      001600 B5*32 09         [24] 5179 	cjne	a,_count,00105$
      001603 B5*33 06         [24] 5180 	cjne	a,(_count + 1),00105$
                                   5181 ;	ecen4330lab7.c:1565: addr3 = 1;
      001606 75*27 01         [24] 5182 	mov	_addr3,#0x01
      001609 75*28 00         [24] 5183 	mov	(_addr3 + 1),#0x00
      00160C                       5184 00105$:
                                   5185 ;	ecen4330lab7.c:1567: count++;
      00160C 05*32            [12] 5186 	inc	_count
      00160E E4               [12] 5187 	clr	a
      00160F B5*32 02         [24] 5188 	cjne	a,_count,00173$
      001612 05*33            [12] 5189 	inc	(_count + 1)
      001614                       5190 00173$:
      001614                       5191 00107$:
                                   5192 ;	ecen4330lab7.c:1569: if(i == 0xFFFF){
      001614 8E 04            [24] 5193 	mov	ar4,r6
      001616 8F 05            [24] 5194 	mov	ar5,r7
      001618 BC FF 06         [24] 5195 	cjne	r4,#0xff,00109$
      00161B BD FF 03         [24] 5196 	cjne	r5,#0xff,00109$
                                   5197 ;	ecen4330lab7.c:1570: dataEnd = 1;
      00161E 75*1E 01         [24] 5198 	mov	_dataEnd,#0x01
      001621                       5199 00109$:
                                   5200 ;	ecen4330lab7.c:1572: i++;
      001621 0E               [12] 5201 	inc	r6
      001622 BE 00 AA         [24] 5202 	cjne	r6,#0x00,00111$
      001625 0F               [12] 5203 	inc	r7
      001626 80 A7            [24] 5204 	sjmp	00111$
      001628                       5205 00113$:
                                   5206 ;	ecen4330lab7.c:1575: if(count > 0 || addr3 == 1){
      001628 E5*32            [12] 5207 	mov	a,_count
      00162A 45*33            [12] 5208 	orl	a,(_count + 1)
      00162C 70 0D            [24] 5209 	jnz	00119$
      00162E 74 01            [12] 5210 	mov	a,#0x01
      001630 B5*27 06         [24] 5211 	cjne	a,_addr3,00178$
      001633 14               [12] 5212 	dec	a
      001634 B5*28 02         [24] 5213 	cjne	a,(_addr3 + 1),00178$
      001637 80 02            [24] 5214 	sjmp	00179$
      001639                       5215 00178$:
      001639 80 5F            [24] 5216 	sjmp	00120$
      00163B                       5217 00179$:
      00163B                       5218 00119$:
                                   5219 ;	ecen4330lab7.c:1576: resetLCD();
      00163B 12r0Dr5C         [24] 5220 	lcall	_resetLCD
                                   5221 ;	ecen4330lab7.c:1577: setTextColor(GREEN, BLACK);
      00163E E4               [12] 5222 	clr	a
      00163F F5*00            [12] 5223 	mov	_setTextColor_PARM_2,a
      001641 F5*01            [12] 5224 	mov	(_setTextColor_PARM_2 + 1),a
      001643 90 07 E0         [24] 5225 	mov	dptr,#0x07e0
      001646 12r02rD9         [24] 5226 	lcall	_setTextColor
                                   5227 ;	ecen4330lab7.c:1578: LCD_string_write("\n0x");
      001649 90r07rB6         [24] 5228 	mov	dptr,#___str_27
      00164C 75 F0 80         [24] 5229 	mov	b,#0x80
      00164F 12r09rC8         [24] 5230 	lcall	_LCD_string_write
                                   5231 ;	ecen4330lab7.c:1579: HEXtoASCII_8write(byte1);
      001652 85*2F 82         [24] 5232 	mov	dpl,_byte1
      001655 12r0Cr38         [24] 5233 	lcall	_HEXtoASCII_8write
                                   5234 ;	ecen4330lab7.c:1580: LCD_string_write(" found\n");
      001658 90r07rBA         [24] 5235 	mov	dptr,#___str_28
      00165B 75 F0 80         [24] 5236 	mov	b,#0x80
      00165E 12r09rC8         [24] 5237 	lcall	_LCD_string_write
                                   5238 ;	ecen4330lab7.c:1582: if(count > 0){
      001661 E5*32            [12] 5239 	mov	a,_count
      001663 45*33            [12] 5240 	orl	a,(_count + 1)
      001665 60 0B            [24] 5241 	jz	00117$
                                   5242 ;	ecen4330lab7.c:1583: HEXtoASCII_16write(count);
      001667 85*32 82         [24] 5243 	mov	dpl,_count
      00166A 85*33 83         [24] 5244 	mov	dph,(_count + 1)
      00166D 12r0Cr75         [24] 5245 	lcall	_HEXtoASCII_16write
      001670 80 16            [24] 5246 	sjmp	00118$
      001672                       5247 00117$:
                                   5248 ;	ecen4330lab7.c:1585: else if(addr3 == 1){
      001672 74 01            [12] 5249 	mov	a,#0x01
      001674 B5*27 06         [24] 5250 	cjne	a,_addr3,00181$
      001677 14               [12] 5251 	dec	a
      001678 B5*28 02         [24] 5252 	cjne	a,(_addr3 + 1),00181$
      00167B 80 02            [24] 5253 	sjmp	00182$
      00167D                       5254 00181$:
      00167D 80 09            [24] 5255 	sjmp	00118$
      00167F                       5256 00182$:
                                   5257 ;	ecen4330lab7.c:1586: LCD_string_write("0x10000");
      00167F 90r07rC2         [24] 5258 	mov	dptr,#___str_29
      001682 75 F0 80         [24] 5259 	mov	b,#0x80
      001685 12r09rC8         [24] 5260 	lcall	_LCD_string_write
      001688                       5261 00118$:
                                   5262 ;	ecen4330lab7.c:1588: LCD_string_write("\ntimes.");
      001688 90r07rCA         [24] 5263 	mov	dptr,#___str_30
      00168B 75 F0 80         [24] 5264 	mov	b,#0x80
      00168E 12r09rC8         [24] 5265 	lcall	_LCD_string_write
                                   5266 ;	ecen4330lab7.c:1589: delay(300);
      001691 90 01 2C         [24] 5267 	mov	dptr,#0x012c
      001694 12r00r28         [24] 5268 	lcall	_delay
                                   5269 ;	ecen4330lab7.c:1590: FIND_display();                 // Display dump data
      001697 02r1CrD5         [24] 5270 	ljmp	_FIND_display
      00169A                       5271 00120$:
                                   5272 ;	ecen4330lab7.c:1593: resetLCD();
      00169A 12r0Dr5C         [24] 5273 	lcall	_resetLCD
                                   5274 ;	ecen4330lab7.c:1594: LCD_string_write("\n0x");
      00169D 90r07rB6         [24] 5275 	mov	dptr,#___str_27
      0016A0 75 F0 80         [24] 5276 	mov	b,#0x80
      0016A3 12r09rC8         [24] 5277 	lcall	_LCD_string_write
                                   5278 ;	ecen4330lab7.c:1595: HEXtoASCII_8write(byte1);
      0016A6 85*2F 82         [24] 5279 	mov	dpl,_byte1
      0016A9 12r0Cr38         [24] 5280 	lcall	_HEXtoASCII_8write
                                   5281 ;	ecen4330lab7.c:1596: LCD_string_write(" not\nfound in\nexternal RAM\n");
      0016AC 90r07rD2         [24] 5282 	mov	dptr,#___str_31
      0016AF 75 F0 80         [24] 5283 	mov	b,#0x80
      0016B2 12r09rC8         [24] 5284 	lcall	_LCD_string_write
                                   5285 ;	ecen4330lab7.c:1597: HEXtoASCII_16write(addr0);
      0016B5 85*21 82         [24] 5286 	mov	dpl,_addr0
      0016B8 85*22 83         [24] 5287 	mov	dph,(_addr0 + 1)
      0016BB 12r0Cr75         [24] 5288 	lcall	_HEXtoASCII_16write
                                   5289 ;	ecen4330lab7.c:1598: LCD_string_write(" -\n");
      0016BE 90r07rEE         [24] 5290 	mov	dptr,#___str_32
      0016C1 75 F0 80         [24] 5291 	mov	b,#0x80
      0016C4 12r09rC8         [24] 5292 	lcall	_LCD_string_write
                                   5293 ;	ecen4330lab7.c:1599: HEXtoASCII_16write(addr1);
      0016C7 85*23 82         [24] 5294 	mov	dpl,_addr1
      0016CA 85*24 83         [24] 5295 	mov	dph,(_addr1 + 1)
      0016CD 12r0Cr75         [24] 5296 	lcall	_HEXtoASCII_16write
                                   5297 ;	ecen4330lab7.c:1600: delay(300);
      0016D0 90 01 2C         [24] 5298 	mov	dptr,#0x012c
      0016D3 12r00r28         [24] 5299 	lcall	_delay
                                   5300 ;	ecen4330lab7.c:1601: resetLCD();
      0016D6 12r0Dr5C         [24] 5301 	lcall	_resetLCD
                                   5302 ;	ecen4330lab7.c:1602: LCD_string_write("Returning to\nmain menu.");
      0016D9 90r06r1F         [24] 5303 	mov	dptr,#___str_15
      0016DC 75 F0 80         [24] 5304 	mov	b,#0x80
      0016DF 12r09rC8         [24] 5305 	lcall	_LCD_string_write
                                   5306 ;	ecen4330lab7.c:1603: delay(200);
      0016E2 90 00 C8         [24] 5307 	mov	dptr,#0x00c8
                                   5308 ;	ecen4330lab7.c:1605: }
      0016E5 02r00r28         [24] 5309 	ljmp	_delay
                                   5310 ;------------------------------------------------------------
                                   5311 ;Allocation info for local variables in function 'DUMP_display'
                                   5312 ;------------------------------------------------------------
                                   5313 ;i                         Allocated to registers r6 r7 
                                   5314 ;j                         Allocated to registers r4 r5 
                                   5315 ;------------------------------------------------------------
                                   5316 ;	ecen4330lab7.c:1614: void DUMP_display(){
                                   5317 ;	-----------------------------------------
                                   5318 ;	 function DUMP_display
                                   5319 ;	-----------------------------------------
      0016E8                       5320 _DUMP_display:
                                   5321 ;	ecen4330lab7.c:1617: currAddr1 = 0;              // Page Count
      0016E8 E4               [12] 5322 	clr	a
      0016E9 F5*2B            [12] 5323 	mov	_currAddr1,a
      0016EB F5*2C            [12] 5324 	mov	(_currAddr1 + 1),a
                                   5325 ;	ecen4330lab7.c:1618: dataEnd = 0;
                                   5326 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      0016ED F5*1E            [12] 5327 	mov	_dataEnd,a
                                   5328 ;	ecen4330lab7.c:1619: addr2 = 0;					// Prev data count
      0016EF F5*25            [12] 5329 	mov	_addr2,a
      0016F1 F5*26            [12] 5330 	mov	(_addr2 + 1),a
                                   5331 ;	ecen4330lab7.c:1621: currAddr0 = addr0;          // Set current address
      0016F3 85*21*29         [24] 5332 	mov	_currAddr0,_addr0
      0016F6 85*22*2A         [24] 5333 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5334 ;	ecen4330lab7.c:1623: do{
      0016F9                       5335 00134$:
                                   5336 ;	ecen4330lab7.c:1624: resetLCD();
      0016F9 12r0Dr5C         [24] 5337 	lcall	_resetLCD
                                   5338 ;	ecen4330lab7.c:1625: setTextSize(2);
      0016FC 75 82 02         [24] 5339 	mov	dpl,#0x02
      0016FF 12r02rE6         [24] 5340 	lcall	_setTextSize
                                   5341 ;	ecen4330lab7.c:1626: LCD_string_write("\n");
      001702 90r07rF2         [24] 5342 	mov	dptr,#___str_33
      001705 75 F0 80         [24] 5343 	mov	b,#0x80
      001708 12r09rC8         [24] 5344 	lcall	_LCD_string_write
                                   5345 ;	ecen4330lab7.c:1629: if(dataSize >= 10){
      00170B C3               [12] 5346 	clr	c
      00170C E5*1B            [12] 5347 	mov	a,_dataSize
      00170E 94 0A            [12] 5348 	subb	a,#0x0a
      001710 E5*1C            [12] 5349 	mov	a,(_dataSize + 1)
      001712 94 00            [12] 5350 	subb	a,#0x00
      001714 50 03            [24] 5351 	jnc	00258$
      001716 02r17rB7         [24] 5352 	ljmp	00119$
      001719                       5353 00258$:
                                   5354 ;	ecen4330lab7.c:1630: addr2 = 10;
      001719 75*25 0A         [24] 5355 	mov	_addr2,#0x0a
      00171C 75*26 00         [24] 5356 	mov	(_addr2 + 1),#0x00
                                   5357 ;	ecen4330lab7.c:1632: for(i = 0; i < 10; i++){
      00171F 7E 00            [12] 5358 	mov	r6,#0x00
      001721 7F 00            [12] 5359 	mov	r7,#0x00
      001723                       5360 00140$:
                                   5361 ;	ecen4330lab7.c:1633: HEXtoASCII_16write(currAddr0);
      001723 85*29 82         [24] 5362 	mov	dpl,_currAddr0
      001726 85*2A 83         [24] 5363 	mov	dph,(_currAddr0 + 1)
      001729 C0 07            [24] 5364 	push	ar7
      00172B C0 06            [24] 5365 	push	ar6
      00172D 12r0Cr75         [24] 5366 	lcall	_HEXtoASCII_16write
                                   5367 ;	ecen4330lab7.c:1634: LCD_string_write(": 0x");
      001730 90r06r1A         [24] 5368 	mov	dptr,#___str_14
      001733 75 F0 80         [24] 5369 	mov	b,#0x80
      001736 12r09rC8         [24] 5370 	lcall	_LCD_string_write
      001739 D0 06            [24] 5371 	pop	ar6
      00173B D0 07            [24] 5372 	pop	ar7
                                   5373 ;	ecen4330lab7.c:1635: for(j = 0; j < dataType; j++){
      00173D 7C 00            [12] 5374 	mov	r4,#0x00
      00173F 7D 00            [12] 5375 	mov	r5,#0x00
      001741                       5376 00138$:
      001741 AA*1A            [24] 5377 	mov	r2,_dataType
      001743 7B 00            [12] 5378 	mov	r3,#0x00
      001745 C3               [12] 5379 	clr	c
      001746 EC               [12] 5380 	mov	a,r4
      001747 9A               [12] 5381 	subb	a,r2
      001748 ED               [12] 5382 	mov	a,r5
      001749 64 80            [12] 5383 	xrl	a,#0x80
      00174B 8B F0            [24] 5384 	mov	b,r3
      00174D 63 F0 80         [24] 5385 	xrl	b,#0x80
      001750 95 F0            [12] 5386 	subb	a,b
      001752 50 2B            [24] 5387 	jnc	00101$
                                   5388 ;	ecen4330lab7.c:1636: HEXtoASCII_8write(RAMread(currAddr0));
      001754 85*29 82         [24] 5389 	mov	dpl,_currAddr0
      001757 85*2A 83         [24] 5390 	mov	dph,(_currAddr0 + 1)
      00175A C0 07            [24] 5391 	push	ar7
      00175C C0 06            [24] 5392 	push	ar6
      00175E C0 05            [24] 5393 	push	ar5
      001760 C0 04            [24] 5394 	push	ar4
      001762 12r0Dr49         [24] 5395 	lcall	_RAMread
      001765 12r0Cr38         [24] 5396 	lcall	_HEXtoASCII_8write
      001768 D0 04            [24] 5397 	pop	ar4
      00176A D0 05            [24] 5398 	pop	ar5
      00176C D0 06            [24] 5399 	pop	ar6
      00176E D0 07            [24] 5400 	pop	ar7
                                   5401 ;	ecen4330lab7.c:1637: currAddr0++;
      001770 05*29            [12] 5402 	inc	_currAddr0
      001772 E4               [12] 5403 	clr	a
      001773 B5*29 02         [24] 5404 	cjne	a,_currAddr0,00260$
      001776 05*2A            [12] 5405 	inc	(_currAddr0 + 1)
      001778                       5406 00260$:
                                   5407 ;	ecen4330lab7.c:1635: for(j = 0; j < dataType; j++){
      001778 0C               [12] 5408 	inc	r4
      001779 BC 00 C5         [24] 5409 	cjne	r4,#0x00,00138$
      00177C 0D               [12] 5410 	inc	r5
      00177D 80 C2            [24] 5411 	sjmp	00138$
      00177F                       5412 00101$:
                                   5413 ;	ecen4330lab7.c:1639: LCD_string_write("\n");
      00177F 90r07rF2         [24] 5414 	mov	dptr,#___str_33
      001782 75 F0 80         [24] 5415 	mov	b,#0x80
      001785 C0 07            [24] 5416 	push	ar7
      001787 C0 06            [24] 5417 	push	ar6
      001789 12r09rC8         [24] 5418 	lcall	_LCD_string_write
      00178C D0 06            [24] 5419 	pop	ar6
      00178E D0 07            [24] 5420 	pop	ar7
                                   5421 ;	ecen4330lab7.c:1640: dataSize--;
      001790 15*1B            [12] 5422 	dec	_dataSize
      001792 74 FF            [12] 5423 	mov	a,#0xff
      001794 B5*1B 02         [24] 5424 	cjne	a,_dataSize,00262$
      001797 15*1C            [12] 5425 	dec	(_dataSize + 1)
      001799                       5426 00262$:
                                   5427 ;	ecen4330lab7.c:1632: for(i = 0; i < 10; i++){
      001799 0E               [12] 5428 	inc	r6
      00179A BE 00 01         [24] 5429 	cjne	r6,#0x00,00263$
      00179D 0F               [12] 5430 	inc	r7
      00179E                       5431 00263$:
      00179E C3               [12] 5432 	clr	c
      00179F EE               [12] 5433 	mov	a,r6
      0017A0 94 0A            [12] 5434 	subb	a,#0x0a
      0017A2 EF               [12] 5435 	mov	a,r7
      0017A3 64 80            [12] 5436 	xrl	a,#0x80
      0017A5 94 80            [12] 5437 	subb	a,#0x80
      0017A7 50 03            [24] 5438 	jnc	00264$
      0017A9 02r17r23         [24] 5439 	ljmp	00140$
      0017AC                       5440 00264$:
                                   5441 ;	ecen4330lab7.c:1642: currAddr1++;        // Next page
      0017AC 05*2B            [12] 5442 	inc	_currAddr1
      0017AE E4               [12] 5443 	clr	a
      0017AF B5*2B 02         [24] 5444 	cjne	a,_currAddr1,00265$
      0017B2 05*2C            [12] 5445 	inc	(_currAddr1 + 1)
      0017B4                       5446 00265$:
      0017B4 02r19r1C         [24] 5447 	ljmp	00120$
      0017B7                       5448 00119$:
                                   5449 ;	ecen4330lab7.c:1646: else if(dataSize > 0 && dataSize < 10){
      0017B7 E5*1B            [12] 5450 	mov	a,_dataSize
      0017B9 45*1C            [12] 5451 	orl	a,(_dataSize + 1)
      0017BB 70 03            [24] 5452 	jnz	00266$
      0017BD 02r18rA6         [24] 5453 	ljmp	00115$
      0017C0                       5454 00266$:
      0017C0 C3               [12] 5455 	clr	c
      0017C1 E5*1B            [12] 5456 	mov	a,_dataSize
      0017C3 94 0A            [12] 5457 	subb	a,#0x0a
      0017C5 E5*1C            [12] 5458 	mov	a,(_dataSize + 1)
      0017C7 94 00            [12] 5459 	subb	a,#0x00
      0017C9 40 03            [24] 5460 	jc	00267$
      0017CB 02r18rA6         [24] 5461 	ljmp	00115$
      0017CE                       5462 00267$:
                                   5463 ;	ecen4330lab7.c:1647: addr2 = dataSize;
      0017CE 85*1B*25         [24] 5464 	mov	_addr2,_dataSize
      0017D1 85*1C*26         [24] 5465 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5466 ;	ecen4330lab7.c:1649: while(dataSize > 0){
      0017D4                       5467 00104$:
      0017D4 E5*1B            [12] 5468 	mov	a,_dataSize
      0017D6 45*1C            [12] 5469 	orl	a,(_dataSize + 1)
      0017D8 60 60            [24] 5470 	jz	00106$
                                   5471 ;	ecen4330lab7.c:1650: HEXtoASCII_16write(currAddr0);
      0017DA 85*29 82         [24] 5472 	mov	dpl,_currAddr0
      0017DD 85*2A 83         [24] 5473 	mov	dph,(_currAddr0 + 1)
      0017E0 12r0Cr75         [24] 5474 	lcall	_HEXtoASCII_16write
                                   5475 ;	ecen4330lab7.c:1651: LCD_string_write(": 0x");
      0017E3 90r06r1A         [24] 5476 	mov	dptr,#___str_14
      0017E6 75 F0 80         [24] 5477 	mov	b,#0x80
      0017E9 12r09rC8         [24] 5478 	lcall	_LCD_string_write
                                   5479 ;	ecen4330lab7.c:1652: for(j = 0; j < dataType; j++){
      0017EC 7E 00            [12] 5480 	mov	r6,#0x00
      0017EE 7F 00            [12] 5481 	mov	r7,#0x00
      0017F0                       5482 00143$:
      0017F0 AC*1A            [24] 5483 	mov	r4,_dataType
      0017F2 7D 00            [12] 5484 	mov	r5,#0x00
      0017F4 C3               [12] 5485 	clr	c
      0017F5 EE               [12] 5486 	mov	a,r6
      0017F6 9C               [12] 5487 	subb	a,r4
      0017F7 EF               [12] 5488 	mov	a,r7
      0017F8 64 80            [12] 5489 	xrl	a,#0x80
      0017FA 8D F0            [24] 5490 	mov	b,r5
      0017FC 63 F0 80         [24] 5491 	xrl	b,#0x80
      0017FF 95 F0            [12] 5492 	subb	a,b
      001801 50 23            [24] 5493 	jnc	00103$
                                   5494 ;	ecen4330lab7.c:1653: HEXtoASCII_8write(RAMread(currAddr0));
      001803 85*29 82         [24] 5495 	mov	dpl,_currAddr0
      001806 85*2A 83         [24] 5496 	mov	dph,(_currAddr0 + 1)
      001809 C0 07            [24] 5497 	push	ar7
      00180B C0 06            [24] 5498 	push	ar6
      00180D 12r0Dr49         [24] 5499 	lcall	_RAMread
      001810 12r0Cr38         [24] 5500 	lcall	_HEXtoASCII_8write
      001813 D0 06            [24] 5501 	pop	ar6
      001815 D0 07            [24] 5502 	pop	ar7
                                   5503 ;	ecen4330lab7.c:1654: currAddr0++;
      001817 05*29            [12] 5504 	inc	_currAddr0
      001819 E4               [12] 5505 	clr	a
      00181A B5*29 02         [24] 5506 	cjne	a,_currAddr0,00270$
      00181D 05*2A            [12] 5507 	inc	(_currAddr0 + 1)
      00181F                       5508 00270$:
                                   5509 ;	ecen4330lab7.c:1652: for(j = 0; j < dataType; j++){
      00181F 0E               [12] 5510 	inc	r6
      001820 BE 00 CD         [24] 5511 	cjne	r6,#0x00,00143$
      001823 0F               [12] 5512 	inc	r7
      001824 80 CA            [24] 5513 	sjmp	00143$
      001826                       5514 00103$:
                                   5515 ;	ecen4330lab7.c:1656: LCD_string_write("\n");
      001826 90r07rF2         [24] 5516 	mov	dptr,#___str_33
      001829 75 F0 80         [24] 5517 	mov	b,#0x80
      00182C 12r09rC8         [24] 5518 	lcall	_LCD_string_write
                                   5519 ;	ecen4330lab7.c:1657: dataSize--;
      00182F 15*1B            [12] 5520 	dec	_dataSize
      001831 74 FF            [12] 5521 	mov	a,#0xff
      001833 B5*1B 02         [24] 5522 	cjne	a,_dataSize,00272$
      001836 15*1C            [12] 5523 	dec	(_dataSize + 1)
      001838                       5524 00272$:
      001838 80 9A            [24] 5525 	sjmp	00104$
      00183A                       5526 00106$:
                                   5527 ;	ecen4330lab7.c:1659: if(addr3 > 0){
      00183A E5*27            [12] 5528 	mov	a,_addr3
      00183C 45*28            [12] 5529 	orl	a,(_addr3 + 1)
      00183E 60 5C            [24] 5530 	jz	00109$
                                   5531 ;	ecen4330lab7.c:1660: HEXtoASCII_16write(currAddr0);
      001840 85*29 82         [24] 5532 	mov	dpl,_currAddr0
      001843 85*2A 83         [24] 5533 	mov	dph,(_currAddr0 + 1)
      001846 12r0Cr75         [24] 5534 	lcall	_HEXtoASCII_16write
                                   5535 ;	ecen4330lab7.c:1661: LCD_string_write(": 0x");
      001849 90r06r1A         [24] 5536 	mov	dptr,#___str_14
      00184C 75 F0 80         [24] 5537 	mov	b,#0x80
      00184F 12r09rC8         [24] 5538 	lcall	_LCD_string_write
                                   5539 ;	ecen4330lab7.c:1662: for(j = 0; j < addr3; j++){
      001852 7E 00            [12] 5540 	mov	r6,#0x00
      001854 7F 00            [12] 5541 	mov	r7,#0x00
      001856                       5542 00146$:
      001856 8E 04            [24] 5543 	mov	ar4,r6
      001858 8F 05            [24] 5544 	mov	ar5,r7
      00185A C3               [12] 5545 	clr	c
      00185B EC               [12] 5546 	mov	a,r4
      00185C 95*27            [12] 5547 	subb	a,_addr3
      00185E ED               [12] 5548 	mov	a,r5
      00185F 95*28            [12] 5549 	subb	a,(_addr3 + 1)
      001861 50 23            [24] 5550 	jnc	00107$
                                   5551 ;	ecen4330lab7.c:1663: HEXtoASCII_8write(RAMread(currAddr0));
      001863 85*29 82         [24] 5552 	mov	dpl,_currAddr0
      001866 85*2A 83         [24] 5553 	mov	dph,(_currAddr0 + 1)
      001869 C0 07            [24] 5554 	push	ar7
      00186B C0 06            [24] 5555 	push	ar6
      00186D 12r0Dr49         [24] 5556 	lcall	_RAMread
      001870 12r0Cr38         [24] 5557 	lcall	_HEXtoASCII_8write
      001873 D0 06            [24] 5558 	pop	ar6
      001875 D0 07            [24] 5559 	pop	ar7
                                   5560 ;	ecen4330lab7.c:1664: currAddr0++;
      001877 05*29            [12] 5561 	inc	_currAddr0
      001879 E4               [12] 5562 	clr	a
      00187A B5*29 02         [24] 5563 	cjne	a,_currAddr0,00275$
      00187D 05*2A            [12] 5564 	inc	(_currAddr0 + 1)
      00187F                       5565 00275$:
                                   5566 ;	ecen4330lab7.c:1662: for(j = 0; j < addr3; j++){
      00187F 0E               [12] 5567 	inc	r6
      001880 BE 00 D3         [24] 5568 	cjne	r6,#0x00,00146$
      001883 0F               [12] 5569 	inc	r7
      001884 80 D0            [24] 5570 	sjmp	00146$
      001886                       5571 00107$:
                                   5572 ;	ecen4330lab7.c:1666: currAddr0 -= addr3;
      001886 E5*29            [12] 5573 	mov	a,_currAddr0
      001888 C3               [12] 5574 	clr	c
      001889 95*27            [12] 5575 	subb	a,_addr3
      00188B F5*29            [12] 5576 	mov	_currAddr0,a
      00188D E5*2A            [12] 5577 	mov	a,(_currAddr0 + 1)
      00188F 95*28            [12] 5578 	subb	a,(_addr3 + 1)
      001891 F5*2A            [12] 5579 	mov	(_currAddr0 + 1),a
                                   5580 ;	ecen4330lab7.c:1667: LCD_string_write("\n");
      001893 90r07rF2         [24] 5581 	mov	dptr,#___str_33
      001896 75 F0 80         [24] 5582 	mov	b,#0x80
      001899 12r09rC8         [24] 5583 	lcall	_LCD_string_write
      00189C                       5584 00109$:
                                   5585 ;	ecen4330lab7.c:1669: currAddr1++; 
      00189C 05*2B            [12] 5586 	inc	_currAddr1
      00189E E4               [12] 5587 	clr	a
      00189F B5*2B 7A         [24] 5588 	cjne	a,_currAddr1,00120$
      0018A2 05*2C            [12] 5589 	inc	(_currAddr1 + 1)
      0018A4 80 76            [24] 5590 	sjmp	00120$
      0018A6                       5591 00115$:
                                   5592 ;	ecen4330lab7.c:1672: else if(dataSize == 0 && addr3 > 0){
      0018A6 E5*1B            [12] 5593 	mov	a,_dataSize
      0018A8 45*1C            [12] 5594 	orl	a,(_dataSize + 1)
      0018AA 70 70            [24] 5595 	jnz	00120$
      0018AC E5*27            [12] 5596 	mov	a,_addr3
      0018AE 45*28            [12] 5597 	orl	a,(_addr3 + 1)
      0018B0 60 6A            [24] 5598 	jz	00120$
                                   5599 ;	ecen4330lab7.c:1673: addr2 = dataSize;
      0018B2 85*1B*25         [24] 5600 	mov	_addr2,_dataSize
      0018B5 85*1C*26         [24] 5601 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5602 ;	ecen4330lab7.c:1674: HEXtoASCII_16write(currAddr0);
      0018B8 85*29 82         [24] 5603 	mov	dpl,_currAddr0
      0018BB 85*2A 83         [24] 5604 	mov	dph,(_currAddr0 + 1)
      0018BE 12r0Cr75         [24] 5605 	lcall	_HEXtoASCII_16write
                                   5606 ;	ecen4330lab7.c:1675: LCD_string_write(": 0x");
      0018C1 90r06r1A         [24] 5607 	mov	dptr,#___str_14
      0018C4 75 F0 80         [24] 5608 	mov	b,#0x80
      0018C7 12r09rC8         [24] 5609 	lcall	_LCD_string_write
                                   5610 ;	ecen4330lab7.c:1676: for(j = 0; j < addr3; j++){
      0018CA 7E 00            [12] 5611 	mov	r6,#0x00
      0018CC 7F 00            [12] 5612 	mov	r7,#0x00
      0018CE                       5613 00149$:
      0018CE 8E 04            [24] 5614 	mov	ar4,r6
      0018D0 8F 05            [24] 5615 	mov	ar5,r7
      0018D2 C3               [12] 5616 	clr	c
      0018D3 EC               [12] 5617 	mov	a,r4
      0018D4 95*27            [12] 5618 	subb	a,_addr3
      0018D6 ED               [12] 5619 	mov	a,r5
      0018D7 95*28            [12] 5620 	subb	a,(_addr3 + 1)
      0018D9 50 23            [24] 5621 	jnc	00110$
                                   5622 ;	ecen4330lab7.c:1677: HEXtoASCII_8write(RAMread(currAddr0));
      0018DB 85*29 82         [24] 5623 	mov	dpl,_currAddr0
      0018DE 85*2A 83         [24] 5624 	mov	dph,(_currAddr0 + 1)
      0018E1 C0 07            [24] 5625 	push	ar7
      0018E3 C0 06            [24] 5626 	push	ar6
      0018E5 12r0Dr49         [24] 5627 	lcall	_RAMread
      0018E8 12r0Cr38         [24] 5628 	lcall	_HEXtoASCII_8write
      0018EB D0 06            [24] 5629 	pop	ar6
      0018ED D0 07            [24] 5630 	pop	ar7
                                   5631 ;	ecen4330lab7.c:1678: currAddr0++;
      0018EF 05*29            [12] 5632 	inc	_currAddr0
      0018F1 E4               [12] 5633 	clr	a
      0018F2 B5*29 02         [24] 5634 	cjne	a,_currAddr0,00281$
      0018F5 05*2A            [12] 5635 	inc	(_currAddr0 + 1)
      0018F7                       5636 00281$:
                                   5637 ;	ecen4330lab7.c:1676: for(j = 0; j < addr3; j++){
      0018F7 0E               [12] 5638 	inc	r6
      0018F8 BE 00 D3         [24] 5639 	cjne	r6,#0x00,00149$
      0018FB 0F               [12] 5640 	inc	r7
      0018FC 80 D0            [24] 5641 	sjmp	00149$
      0018FE                       5642 00110$:
                                   5643 ;	ecen4330lab7.c:1680: LCD_string_write("\n");
      0018FE 90r07rF2         [24] 5644 	mov	dptr,#___str_33
      001901 75 F0 80         [24] 5645 	mov	b,#0x80
      001904 12r09rC8         [24] 5646 	lcall	_LCD_string_write
                                   5647 ;	ecen4330lab7.c:1681: currAddr1++; 
      001907 05*2B            [12] 5648 	inc	_currAddr1
      001909 E4               [12] 5649 	clr	a
      00190A B5*2B 02         [24] 5650 	cjne	a,_currAddr1,00283$
      00190D 05*2C            [12] 5651 	inc	(_currAddr1 + 1)
      00190F                       5652 00283$:
                                   5653 ;	ecen4330lab7.c:1682: currAddr0 -= addr3;
      00190F E5*29            [12] 5654 	mov	a,_currAddr0
      001911 C3               [12] 5655 	clr	c
      001912 95*27            [12] 5656 	subb	a,_addr3
      001914 F5*29            [12] 5657 	mov	_currAddr0,a
      001916 E5*2A            [12] 5658 	mov	a,(_currAddr0 + 1)
      001918 95*28            [12] 5659 	subb	a,(_addr3 + 1)
      00191A F5*2A            [12] 5660 	mov	(_currAddr0 + 1),a
      00191C                       5661 00120$:
                                   5662 ;	ecen4330lab7.c:1686: setCursor(0, 250);
      00191C 75*00 FA         [24] 5663 	mov	_setCursor_PARM_2,#0xfa
      00191F 75*01 00         [24] 5664 	mov	(_setCursor_PARM_2 + 1),#0x00
      001922 90 00 00         [24] 5665 	mov	dptr,#0x0000
      001925 12r02rCC         [24] 5666 	lcall	_setCursor
                                   5667 ;	ecen4330lab7.c:1687: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001928 90r07rF4         [24] 5668 	mov	dptr,#___str_34
      00192B 75 F0 80         [24] 5669 	mov	b,#0x80
      00192E 12r09rC8         [24] 5670 	lcall	_LCD_string_write
                                   5671 ;	ecen4330lab7.c:1688: HEXtoASCII_16write(currAddr1);
      001931 85*2B 82         [24] 5672 	mov	dpl,_currAddr1
      001934 85*2C 83         [24] 5673 	mov	dph,(_currAddr1 + 1)
      001937 12r0Cr75         [24] 5674 	lcall	_HEXtoASCII_16write
                                   5675 ;	ecen4330lab7.c:1689: key = keyDetect();
      00193A 12r0Ar07         [24] 5676 	lcall	_keyDetect
      00193D 85 82*16         [24] 5677 	mov	_key,dpl
                                   5678 ;	ecen4330lab7.c:1690: switch (key)
      001940 74 30            [12] 5679 	mov	a,#0x30
      001942 B5*16 02         [24] 5680 	cjne	a,_key,00284$
      001945 80 12            [24] 5681 	sjmp	00121$
      001947                       5682 00284$:
      001947 74 31            [12] 5683 	mov	a,#0x31
      001949 B5*16 02         [24] 5684 	cjne	a,_key,00285$
      00194C 80 65            [24] 5685 	sjmp	00125$
      00194E                       5686 00285$:
      00194E 74 45            [12] 5687 	mov	a,#0x45
      001950 B5*16 03         [24] 5688 	cjne	a,_key,00286$
      001953 02r1Ar50         [24] 5689 	ljmp	00129$
      001956                       5690 00286$:
      001956 02r1Ar67         [24] 5691 	ljmp	00130$
                                   5692 ;	ecen4330lab7.c:1694: case '0':
      001959                       5693 00121$:
                                   5694 ;	ecen4330lab7.c:1695: validInput = 1;
      001959 75*1D 01         [24] 5695 	mov	_validInput,#0x01
                                   5696 ;	ecen4330lab7.c:1698: if(dataSize > 0){
      00195C E5*1B            [12] 5697 	mov	a,_dataSize
      00195E 45*1C            [12] 5698 	orl	a,(_dataSize + 1)
      001960 60 06            [24] 5699 	jz	00123$
                                   5700 ;	ecen4330lab7.c:1699: dataEnd = 0;
      001962 75*1E 00         [24] 5701 	mov	_dataEnd,#0x00
      001965 02r1ArAB         [24] 5702 	ljmp	00135$
      001968                       5703 00123$:
                                   5704 ;	ecen4330lab7.c:1705: dataEnd = 0;
      001968 75*1E 00         [24] 5705 	mov	_dataEnd,#0x00
                                   5706 ;	ecen4330lab7.c:1706: currAddr0 -= (addr2 * dataType); // 1st address of previous page displayed
      00196B 85*1A*00         [24] 5707 	mov	__mulint_PARM_2,_dataType
      00196E 75*01 00         [24] 5708 	mov	(__mulint_PARM_2 + 1),#0x00
      001971 85*25 82         [24] 5709 	mov	dpl,_addr2
      001974 85*26 83         [24] 5710 	mov	dph,(_addr2 + 1)
      001977 12r00r00         [24] 5711 	lcall	__mulint
      00197A AE 82            [24] 5712 	mov	r6,dpl
      00197C AF 83            [24] 5713 	mov	r7,dph
      00197E E5*29            [12] 5714 	mov	a,_currAddr0
      001980 C3               [12] 5715 	clr	c
      001981 9E               [12] 5716 	subb	a,r6
      001982 F5*29            [12] 5717 	mov	_currAddr0,a
      001984 E5*2A            [12] 5718 	mov	a,(_currAddr0 + 1)
      001986 9F               [12] 5719 	subb	a,r7
      001987 F5*2A            [12] 5720 	mov	(_currAddr0 + 1),a
                                   5721 ;	ecen4330lab7.c:1707: dataSize += addr2;  // restore data size of previous page
      001989 E5*25            [12] 5722 	mov	a,_addr2
      00198B 25*1B            [12] 5723 	add	a,_dataSize
      00198D F5*1B            [12] 5724 	mov	_dataSize,a
      00198F E5*26            [12] 5725 	mov	a,(_addr2 + 1)
      001991 35*1C            [12] 5726 	addc	a,(_dataSize + 1)
      001993 F5*1C            [12] 5727 	mov	(_dataSize + 1),a
                                   5728 ;	ecen4330lab7.c:1708: currAddr1--;
      001995 15*2B            [12] 5729 	dec	_currAddr1
      001997 74 FF            [12] 5730 	mov	a,#0xff
      001999 B5*2B 02         [24] 5731 	cjne	a,_currAddr1,00288$
      00199C 15*2C            [12] 5732 	dec	(_currAddr1 + 1)
      00199E                       5733 00288$:
                                   5734 ;	ecen4330lab7.c:1709: resetLCD();
      00199E 12r0Dr5C         [24] 5735 	lcall	_resetLCD
                                   5736 ;	ecen4330lab7.c:1710: LCD_string_write("\nEnd of Data.");
      0019A1 90r08r25         [24] 5737 	mov	dptr,#___str_35
      0019A4 75 F0 80         [24] 5738 	mov	b,#0x80
      0019A7 12r09rC8         [24] 5739 	lcall	_LCD_string_write
                                   5740 ;	ecen4330lab7.c:1711: delay(200);
      0019AA 90 00 C8         [24] 5741 	mov	dptr,#0x00c8
      0019AD 12r00r28         [24] 5742 	lcall	_delay
                                   5743 ;	ecen4330lab7.c:1713: break;
      0019B0 02r1ArAB         [24] 5744 	ljmp	00135$
                                   5745 ;	ecen4330lab7.c:1716: case '1':
      0019B3                       5746 00125$:
                                   5747 ;	ecen4330lab7.c:1719: if(currAddr1 > 1){
      0019B3 C3               [12] 5748 	clr	c
      0019B4 74 01            [12] 5749 	mov	a,#0x01
      0019B6 95*2B            [12] 5750 	subb	a,_currAddr1
      0019B8 E4               [12] 5751 	clr	a
      0019B9 95*2C            [12] 5752 	subb	a,(_currAddr1 + 1)
      0019BB 50 49            [24] 5753 	jnc	00127$
                                   5754 ;	ecen4330lab7.c:1720: dataEnd = 0;
      0019BD 75*1E 00         [24] 5755 	mov	_dataEnd,#0x00
                                   5756 ;	ecen4330lab7.c:1721: currAddr0 -= ((addr2 + 10) * dataType);
      0019C0 74 0A            [12] 5757 	mov	a,#0x0a
      0019C2 25*25            [12] 5758 	add	a,_addr2
      0019C4 FE               [12] 5759 	mov	r6,a
      0019C5 E4               [12] 5760 	clr	a
      0019C6 35*26            [12] 5761 	addc	a,(_addr2 + 1)
      0019C8 FF               [12] 5762 	mov	r7,a
      0019C9 85*1A*00         [24] 5763 	mov	__mulint_PARM_2,_dataType
      0019CC 75*01 00         [24] 5764 	mov	(__mulint_PARM_2 + 1),#0x00
      0019CF 8E 82            [24] 5765 	mov	dpl,r6
      0019D1 8F 83            [24] 5766 	mov	dph,r7
      0019D3 C0 07            [24] 5767 	push	ar7
      0019D5 C0 06            [24] 5768 	push	ar6
      0019D7 12r00r00         [24] 5769 	lcall	__mulint
      0019DA AC 82            [24] 5770 	mov	r4,dpl
      0019DC AD 83            [24] 5771 	mov	r5,dph
      0019DE D0 06            [24] 5772 	pop	ar6
      0019E0 D0 07            [24] 5773 	pop	ar7
      0019E2 E5*29            [12] 5774 	mov	a,_currAddr0
      0019E4 C3               [12] 5775 	clr	c
      0019E5 9C               [12] 5776 	subb	a,r4
      0019E6 F5*29            [12] 5777 	mov	_currAddr0,a
      0019E8 E5*2A            [12] 5778 	mov	a,(_currAddr0 + 1)
      0019EA 9D               [12] 5779 	subb	a,r5
      0019EB F5*2A            [12] 5780 	mov	(_currAddr0 + 1),a
                                   5781 ;	ecen4330lab7.c:1722: currAddr1 -= 2;
      0019ED E5*2B            [12] 5782 	mov	a,_currAddr1
      0019EF 24 FE            [12] 5783 	add	a,#0xfe
      0019F1 F5*2B            [12] 5784 	mov	_currAddr1,a
      0019F3 E5*2C            [12] 5785 	mov	a,(_currAddr1 + 1)
      0019F5 34 FF            [12] 5786 	addc	a,#0xff
      0019F7 F5*2C            [12] 5787 	mov	(_currAddr1 + 1),a
                                   5788 ;	ecen4330lab7.c:1723: dataSize += (addr2 + 10);
      0019F9 EE               [12] 5789 	mov	a,r6
      0019FA 25*1B            [12] 5790 	add	a,_dataSize
      0019FC F5*1B            [12] 5791 	mov	_dataSize,a
      0019FE EF               [12] 5792 	mov	a,r7
      0019FF 35*1C            [12] 5793 	addc	a,(_dataSize + 1)
      001A01 F5*1C            [12] 5794 	mov	(_dataSize + 1),a
      001A03 02r1ArAB         [24] 5795 	ljmp	00135$
      001A06                       5796 00127$:
                                   5797 ;	ecen4330lab7.c:1728: dataEnd = 0;
      001A06 75*1E 00         [24] 5798 	mov	_dataEnd,#0x00
                                   5799 ;	ecen4330lab7.c:1729: resetLCD();
      001A09 12r0Dr5C         [24] 5800 	lcall	_resetLCD
                                   5801 ;	ecen4330lab7.c:1730: LCD_string_write("End of Data");
      001A0C 90r08r33         [24] 5802 	mov	dptr,#___str_36
      001A0F 75 F0 80         [24] 5803 	mov	b,#0x80
      001A12 12r09rC8         [24] 5804 	lcall	_LCD_string_write
                                   5805 ;	ecen4330lab7.c:1731: delay(200);
      001A15 90 00 C8         [24] 5806 	mov	dptr,#0x00c8
      001A18 12r00r28         [24] 5807 	lcall	_delay
                                   5808 ;	ecen4330lab7.c:1732: currAddr0 -= (addr2 * dataType);
      001A1B 85*1A*00         [24] 5809 	mov	__mulint_PARM_2,_dataType
      001A1E 75*01 00         [24] 5810 	mov	(__mulint_PARM_2 + 1),#0x00
      001A21 85*25 82         [24] 5811 	mov	dpl,_addr2
      001A24 85*26 83         [24] 5812 	mov	dph,(_addr2 + 1)
      001A27 12r00r00         [24] 5813 	lcall	__mulint
      001A2A AE 82            [24] 5814 	mov	r6,dpl
      001A2C AF 83            [24] 5815 	mov	r7,dph
      001A2E E5*29            [12] 5816 	mov	a,_currAddr0
      001A30 C3               [12] 5817 	clr	c
      001A31 9E               [12] 5818 	subb	a,r6
      001A32 F5*29            [12] 5819 	mov	_currAddr0,a
      001A34 E5*2A            [12] 5820 	mov	a,(_currAddr0 + 1)
      001A36 9F               [12] 5821 	subb	a,r7
      001A37 F5*2A            [12] 5822 	mov	(_currAddr0 + 1),a
                                   5823 ;	ecen4330lab7.c:1733: currAddr1--;
      001A39 15*2B            [12] 5824 	dec	_currAddr1
      001A3B 74 FF            [12] 5825 	mov	a,#0xff
      001A3D B5*2B 02         [24] 5826 	cjne	a,_currAddr1,00290$
      001A40 15*2C            [12] 5827 	dec	(_currAddr1 + 1)
      001A42                       5828 00290$:
                                   5829 ;	ecen4330lab7.c:1734: dataSize += addr2;
      001A42 E5*25            [12] 5830 	mov	a,_addr2
      001A44 25*1B            [12] 5831 	add	a,_dataSize
      001A46 F5*1B            [12] 5832 	mov	_dataSize,a
      001A48 E5*26            [12] 5833 	mov	a,(_addr2 + 1)
      001A4A 35*1C            [12] 5834 	addc	a,(_dataSize + 1)
      001A4C F5*1C            [12] 5835 	mov	(_dataSize + 1),a
                                   5836 ;	ecen4330lab7.c:1736: break;
                                   5837 ;	ecen4330lab7.c:1739: case 'E':
      001A4E 80 5B            [24] 5838 	sjmp	00135$
      001A50                       5839 00129$:
                                   5840 ;	ecen4330lab7.c:1740: resetLCD();
      001A50 12r0Dr5C         [24] 5841 	lcall	_resetLCD
                                   5842 ;	ecen4330lab7.c:1741: LCD_string_write("\nReturning to\nMain Menu.");
      001A53 90r08r3F         [24] 5843 	mov	dptr,#___str_37
      001A56 75 F0 80         [24] 5844 	mov	b,#0x80
      001A59 12r09rC8         [24] 5845 	lcall	_LCD_string_write
                                   5846 ;	ecen4330lab7.c:1742: delay(200);
      001A5C 90 00 C8         [24] 5847 	mov	dptr,#0x00c8
      001A5F 12r00r28         [24] 5848 	lcall	_delay
                                   5849 ;	ecen4330lab7.c:1743: dataEnd = 1;
      001A62 75*1E 01         [24] 5850 	mov	_dataEnd,#0x01
                                   5851 ;	ecen4330lab7.c:1744: break;
                                   5852 ;	ecen4330lab7.c:1747: default:
      001A65 80 44            [24] 5853 	sjmp	00135$
      001A67                       5854 00130$:
                                   5855 ;	ecen4330lab7.c:1748: dataEnd = 0;
      001A67 75*1E 00         [24] 5856 	mov	_dataEnd,#0x00
                                   5857 ;	ecen4330lab7.c:1749: invalidInput();
      001A6A 12r0Dr84         [24] 5858 	lcall	_invalidInput
                                   5859 ;	ecen4330lab7.c:1750: if(addr2 > 0 ){
      001A6D E5*25            [12] 5860 	mov	a,_addr2
      001A6F 45*26            [12] 5861 	orl	a,(_addr2 + 1)
      001A71 60 38            [24] 5862 	jz	00135$
                                   5863 ;	ecen4330lab7.c:1751: currAddr0 -= (addr2 * dataType);
      001A73 85*1A*00         [24] 5864 	mov	__mulint_PARM_2,_dataType
      001A76 75*01 00         [24] 5865 	mov	(__mulint_PARM_2 + 1),#0x00
      001A79 85*25 82         [24] 5866 	mov	dpl,_addr2
      001A7C 85*26 83         [24] 5867 	mov	dph,(_addr2 + 1)
      001A7F 12r00r00         [24] 5868 	lcall	__mulint
      001A82 AE 82            [24] 5869 	mov	r6,dpl
      001A84 AF 83            [24] 5870 	mov	r7,dph
      001A86 E5*29            [12] 5871 	mov	a,_currAddr0
      001A88 C3               [12] 5872 	clr	c
      001A89 9E               [12] 5873 	subb	a,r6
      001A8A F5*29            [12] 5874 	mov	_currAddr0,a
      001A8C E5*2A            [12] 5875 	mov	a,(_currAddr0 + 1)
      001A8E 9F               [12] 5876 	subb	a,r7
      001A8F F5*2A            [12] 5877 	mov	(_currAddr0 + 1),a
                                   5878 ;	ecen4330lab7.c:1752: currAddr1 --;
      001A91 15*2B            [12] 5879 	dec	_currAddr1
      001A93 74 FF            [12] 5880 	mov	a,#0xff
      001A95 B5*2B 02         [24] 5881 	cjne	a,_currAddr1,00292$
      001A98 15*2C            [12] 5882 	dec	(_currAddr1 + 1)
      001A9A                       5883 00292$:
                                   5884 ;	ecen4330lab7.c:1753: dataSize += addr2;
      001A9A E5*25            [12] 5885 	mov	a,_addr2
      001A9C 25*1B            [12] 5886 	add	a,_dataSize
      001A9E F5*1B            [12] 5887 	mov	_dataSize,a
      001AA0 E5*26            [12] 5888 	mov	a,(_addr2 + 1)
      001AA2 35*1C            [12] 5889 	addc	a,(_dataSize + 1)
      001AA4 F5*1C            [12] 5890 	mov	(_dataSize + 1),a
                                   5891 ;	ecen4330lab7.c:1754: addr2 = 0;
      001AA6 E4               [12] 5892 	clr	a
      001AA7 F5*25            [12] 5893 	mov	_addr2,a
      001AA9 F5*26            [12] 5894 	mov	(_addr2 + 1),a
                                   5895 ;	ecen4330lab7.c:1757: }
      001AAB                       5896 00135$:
                                   5897 ;	ecen4330lab7.c:1758: } while(dataEnd == 0);
      001AAB E5*1E            [12] 5898 	mov	a,_dataEnd
      001AAD 70 03            [24] 5899 	jnz	00293$
      001AAF 02r16rF9         [24] 5900 	ljmp	00134$
      001AB2                       5901 00293$:
                                   5902 ;	ecen4330lab7.c:1759: }
      001AB2 22               [24] 5903 	ret
                                   5904 ;------------------------------------------------------------
                                   5905 ;Allocation info for local variables in function 'DUMP'
                                   5906 ;------------------------------------------------------------
                                   5907 ;	ecen4330lab7.c:1767: void DUMP(){
                                   5908 ;	-----------------------------------------
                                   5909 ;	 function DUMP
                                   5910 ;	-----------------------------------------
      001AB3                       5911 _DUMP:
                                   5912 ;	ecen4330lab7.c:1768: endAddrCalc = 0;
      001AB3 E4               [12] 5913 	clr	a
      001AB4 F5*34            [12] 5914 	mov	_endAddrCalc,a
      001AB6 F5*35            [12] 5915 	mov	(_endAddrCalc + 1),a
      001AB8 F5*36            [12] 5916 	mov	(_endAddrCalc + 2),a
      001ABA F5*37            [12] 5917 	mov	(_endAddrCalc + 3),a
                                   5918 ;	ecen4330lab7.c:1769: addr0 = 0;                      // Source Address
      001ABC F5*21            [12] 5919 	mov	_addr0,a
      001ABE F5*22            [12] 5920 	mov	(_addr0 + 1),a
                                   5921 ;	ecen4330lab7.c:1770: addr1 = 0;                      // Source End Address
      001AC0 F5*23            [12] 5922 	mov	_addr1,a
      001AC2 F5*24            [12] 5923 	mov	(_addr1 + 1),a
                                   5924 ;	ecen4330lab7.c:1771: dataType = 0;                   // Data Type
                                   5925 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001AC4 F5*1A            [12] 5926 	mov	_dataType,a
                                   5927 ;	ecen4330lab7.c:1772: dataSize = 0;                   // Data Size
      001AC6 F5*1B            [12] 5928 	mov	_dataSize,a
      001AC8 F5*1C            [12] 5929 	mov	(_dataSize + 1),a
                                   5930 ;	ecen4330lab7.c:1773: addr3 = 0;						// Remainder
      001ACA F5*27            [12] 5931 	mov	_addr3,a
      001ACC F5*28            [12] 5932 	mov	(_addr3 + 1),a
                                   5933 ;	ecen4330lab7.c:1776: resetLCD();
      001ACE 12r0Dr5C         [24] 5934 	lcall	_resetLCD
                                   5935 ;	ecen4330lab7.c:1777: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n  0x____");
      001AD1 90r08r58         [24] 5936 	mov	dptr,#___str_38
      001AD4 75 F0 80         [24] 5937 	mov	b,#0x80
      001AD7 12r09rC8         [24] 5938 	lcall	_LCD_string_write
                                   5939 ;	ecen4330lab7.c:1778: cursor_x -= 4 * textsize * 6;
      001ADA E5*0C            [12] 5940 	mov	a,_textsize
      001ADC 75 F0 18         [24] 5941 	mov	b,#0x18
      001ADF A4               [48] 5942 	mul	ab
      001AE0 FE               [12] 5943 	mov	r6,a
      001AE1 AF F0            [24] 5944 	mov	r7,b
      001AE3 E5*08            [12] 5945 	mov	a,_cursor_x
      001AE5 C3               [12] 5946 	clr	c
      001AE6 9E               [12] 5947 	subb	a,r6
      001AE7 F5*08            [12] 5948 	mov	_cursor_x,a
      001AE9 E5*09            [12] 5949 	mov	a,(_cursor_x + 1)
      001AEB 9F               [12] 5950 	subb	a,r7
      001AEC F5*09            [12] 5951 	mov	(_cursor_x + 1),a
                                   5952 ;	ecen4330lab7.c:1779: inputRead16();                  // Read input
      001AEE 12r0DrAD         [24] 5953 	lcall	_inputRead16
                                   5954 ;	ecen4330lab7.c:1780: addr0 = input16;                // Set starting address
      001AF1 85*17*21         [24] 5955 	mov	_addr0,_input16
      001AF4 85*18*22         [24] 5956 	mov	(_addr0 + 1),(_input16 + 1)
                                   5957 ;	ecen4330lab7.c:1783: inputDataType();                // Prompt & read input
      001AF7 12r0ErBC         [24] 5958 	lcall	_inputDataType
                                   5959 ;	ecen4330lab7.c:1786: resetLCD();
      001AFA 12r0Dr5C         [24] 5960 	lcall	_resetLCD
                                   5961 ;	ecen4330lab7.c:1787: inputDataSize();                // Prompt & read input
      001AFD 12r0Fr79         [24] 5962 	lcall	_inputDataSize
                                   5963 ;	ecen4330lab7.c:1790: endAddrCalc = addr0 + (dataType * dataSize);
      001B00 AE*1A            [24] 5964 	mov	r6,_dataType
      001B02 7F 00            [12] 5965 	mov	r7,#0x00
      001B04 85*1B*00         [24] 5966 	mov	__mulint_PARM_2,_dataSize
      001B07 85*1C*01         [24] 5967 	mov	(__mulint_PARM_2 + 1),(_dataSize + 1)
      001B0A 8E 82            [24] 5968 	mov	dpl,r6
      001B0C 8F 83            [24] 5969 	mov	dph,r7
      001B0E C0 07            [24] 5970 	push	ar7
      001B10 C0 06            [24] 5971 	push	ar6
      001B12 12r00r00         [24] 5972 	lcall	__mulint
      001B15 AC 82            [24] 5973 	mov	r4,dpl
      001B17 AD 83            [24] 5974 	mov	r5,dph
      001B19 D0 06            [24] 5975 	pop	ar6
      001B1B D0 07            [24] 5976 	pop	ar7
      001B1D EC               [12] 5977 	mov	a,r4
      001B1E 25*21            [12] 5978 	add	a,_addr0
      001B20 FA               [12] 5979 	mov	r2,a
      001B21 ED               [12] 5980 	mov	a,r5
      001B22 35*22            [12] 5981 	addc	a,(_addr0 + 1)
      001B24 FB               [12] 5982 	mov	r3,a
      001B25 8A*34            [24] 5983 	mov	_endAddrCalc,r2
      001B27 8B*35            [24] 5984 	mov	(_endAddrCalc + 1),r3
      001B29 75*36 00         [24] 5985 	mov	(_endAddrCalc + 2),#0x00
      001B2C 75*37 00         [24] 5986 	mov	(_endAddrCalc + 3),#0x00
                                   5987 ;	ecen4330lab7.c:1791: if(endAddrCalc < addr0){ // RAM overflow
      001B2F A8*21            [24] 5988 	mov	r0,_addr0
      001B31 A9*22            [24] 5989 	mov	r1,(_addr0 + 1)
      001B33 7A 00            [12] 5990 	mov	r2,#0x00
      001B35 7B 00            [12] 5991 	mov	r3,#0x00
      001B37 C3               [12] 5992 	clr	c
      001B38 E5*34            [12] 5993 	mov	a,_endAddrCalc
      001B3A 98               [12] 5994 	subb	a,r0
      001B3B E5*35            [12] 5995 	mov	a,(_endAddrCalc + 1)
      001B3D 99               [12] 5996 	subb	a,r1
      001B3E E5*36            [12] 5997 	mov	a,(_endAddrCalc + 2)
      001B40 9A               [12] 5998 	subb	a,r2
      001B41 E5*37            [12] 5999 	mov	a,(_endAddrCalc + 3)
      001B43 9B               [12] 6000 	subb	a,r3
      001B44 50 08            [24] 6001 	jnc	00102$
                                   6002 ;	ecen4330lab7.c:1792: addr1 = 0xFFFF;             // Set end address
      001B46 75*23 FF         [24] 6003 	mov	_addr1,#0xff
      001B49 75*24 FF         [24] 6004 	mov	(_addr1 + 1),#0xff
      001B4C 80 12            [24] 6005 	sjmp	00103$
      001B4E                       6006 00102$:
                                   6007 ;	ecen4330lab7.c:1795: addr1 = addr0 + (dataType * dataSize) - 1;
      001B4E EC               [12] 6008 	mov	a,r4
      001B4F 25*21            [12] 6009 	add	a,_addr0
      001B51 FC               [12] 6010 	mov	r4,a
      001B52 ED               [12] 6011 	mov	a,r5
      001B53 35*22            [12] 6012 	addc	a,(_addr0 + 1)
      001B55 FD               [12] 6013 	mov	r5,a
      001B56 EC               [12] 6014 	mov	a,r4
      001B57 24 FF            [12] 6015 	add	a,#0xff
      001B59 F5*23            [12] 6016 	mov	_addr1,a
      001B5B ED               [12] 6017 	mov	a,r5
      001B5C 34 FF            [12] 6018 	addc	a,#0xff
      001B5E F5*24            [12] 6019 	mov	(_addr1 + 1),a
      001B60                       6020 00103$:
                                   6021 ;	ecen4330lab7.c:1797: dataSize = ((addr1 - addr0) + 1) / dataType;   // Recalculate data size
      001B60 E5*23            [12] 6022 	mov	a,_addr1
      001B62 C3               [12] 6023 	clr	c
      001B63 95*21            [12] 6024 	subb	a,_addr0
      001B65 FC               [12] 6025 	mov	r4,a
      001B66 E5*24            [12] 6026 	mov	a,(_addr1 + 1)
      001B68 95*22            [12] 6027 	subb	a,(_addr0 + 1)
      001B6A FD               [12] 6028 	mov	r5,a
      001B6B 0C               [12] 6029 	inc	r4
      001B6C BC 00 01         [24] 6030 	cjne	r4,#0x00,00111$
      001B6F 0D               [12] 6031 	inc	r5
      001B70                       6032 00111$:
      001B70 8E*00            [24] 6033 	mov	__divuint_PARM_2,r6
      001B72 8F*01            [24] 6034 	mov	(__divuint_PARM_2 + 1),r7
      001B74 8C 82            [24] 6035 	mov	dpl,r4
      001B76 8D 83            [24] 6036 	mov	dph,r5
      001B78 C0 07            [24] 6037 	push	ar7
      001B7A C0 06            [24] 6038 	push	ar6
      001B7C C0 05            [24] 6039 	push	ar5
      001B7E C0 04            [24] 6040 	push	ar4
      001B80 12r00r00         [24] 6041 	lcall	__divuint
      001B83 85 82*1B         [24] 6042 	mov	_dataSize,dpl
      001B86 85 83*1C         [24] 6043 	mov	(_dataSize + 1),dph
      001B89 D0 04            [24] 6044 	pop	ar4
      001B8B D0 05            [24] 6045 	pop	ar5
      001B8D D0 06            [24] 6046 	pop	ar6
      001B8F D0 07            [24] 6047 	pop	ar7
                                   6048 ;	ecen4330lab7.c:1798: addr3 = ((addr1 - addr0) + 1) % dataType;
      001B91 8E*00            [24] 6049 	mov	__moduint_PARM_2,r6
      001B93 8F*01            [24] 6050 	mov	(__moduint_PARM_2 + 1),r7
      001B95 8C 82            [24] 6051 	mov	dpl,r4
      001B97 8D 83            [24] 6052 	mov	dph,r5
      001B99 12r00r00         [24] 6053 	lcall	__moduint
      001B9C 85 82*27         [24] 6054 	mov	_addr3,dpl
      001B9F 85 83*28         [24] 6055 	mov	(_addr3 + 1),dph
                                   6056 ;	ecen4330lab7.c:1817: DUMP_display();                 // Display dump data
                                   6057 ;	ecen4330lab7.c:1818: }
      001BA2 02r16rE8         [24] 6058 	ljmp	_DUMP_display
                                   6059 ;------------------------------------------------------------
                                   6060 ;Allocation info for local variables in function 'EDIT_display'
                                   6061 ;------------------------------------------------------------
                                   6062 ;addr                      Allocated to registers r6 r7 
                                   6063 ;------------------------------------------------------------
                                   6064 ;	ecen4330lab7.c:1828: void EDIT_display(unsigned int addr){
                                   6065 ;	-----------------------------------------
                                   6066 ;	 function EDIT_display
                                   6067 ;	-----------------------------------------
      001BA5                       6068 _EDIT_display:
                                   6069 ;	ecen4330lab7.c:1831: data = RAMread(addr);
      001BA5 AE 82            [24] 6070 	mov	r6,dpl
      001BA7 AF 83            [24] 6071 	mov  r7,dph
      001BA9 C0 07            [24] 6072 	push	ar7
      001BAB C0 06            [24] 6073 	push	ar6
      001BAD 12r0Dr49         [24] 6074 	lcall	_RAMread
      001BB0 85 82*20         [24] 6075 	mov	_data,dpl
                                   6076 ;	ecen4330lab7.c:1834: resetLCD();
      001BB3 12r0Dr5C         [24] 6077 	lcall	_resetLCD
                                   6078 ;	ecen4330lab7.c:1835: LCD_string_write("\n");
      001BB6 90r07rF2         [24] 6079 	mov	dptr,#___str_33
      001BB9 75 F0 80         [24] 6080 	mov	b,#0x80
      001BBC 12r09rC8         [24] 6081 	lcall	_LCD_string_write
      001BBF D0 06            [24] 6082 	pop	ar6
      001BC1 D0 07            [24] 6083 	pop	ar7
                                   6084 ;	ecen4330lab7.c:1836: HEXtoASCII_16write(addr);
      001BC3 8E 82            [24] 6085 	mov	dpl,r6
      001BC5 8F 83            [24] 6086 	mov	dph,r7
      001BC7 C0 07            [24] 6087 	push	ar7
      001BC9 C0 06            [24] 6088 	push	ar6
      001BCB 12r0Cr75         [24] 6089 	lcall	_HEXtoASCII_16write
                                   6090 ;	ecen4330lab7.c:1837: LCD_string_write(": 0x");
      001BCE 90r06r1A         [24] 6091 	mov	dptr,#___str_14
      001BD1 75 F0 80         [24] 6092 	mov	b,#0x80
      001BD4 12r09rC8         [24] 6093 	lcall	_LCD_string_write
                                   6094 ;	ecen4330lab7.c:1838: HEXtoASCII_8write(data);
      001BD7 85*20 82         [24] 6095 	mov	dpl,_data
      001BDA 12r0Cr38         [24] 6096 	lcall	_HEXtoASCII_8write
                                   6097 ;	ecen4330lab7.c:1841: LCD_string_write("\n\nNew value:\n  0x__");
      001BDD 90r08r86         [24] 6098 	mov	dptr,#___str_39
      001BE0 75 F0 80         [24] 6099 	mov	b,#0x80
      001BE3 12r09rC8         [24] 6100 	lcall	_LCD_string_write
                                   6101 ;	ecen4330lab7.c:1842: cursor_x -= 2 * textsize * 6;
      001BE6 E5*0C            [12] 6102 	mov	a,_textsize
      001BE8 75 F0 0C         [24] 6103 	mov	b,#0x0c
      001BEB A4               [48] 6104 	mul	ab
      001BEC FC               [12] 6105 	mov	r4,a
      001BED AD F0            [24] 6106 	mov	r5,b
      001BEF E5*08            [12] 6107 	mov	a,_cursor_x
      001BF1 C3               [12] 6108 	clr	c
      001BF2 9C               [12] 6109 	subb	a,r4
      001BF3 F5*08            [12] 6110 	mov	_cursor_x,a
      001BF5 E5*09            [12] 6111 	mov	a,(_cursor_x + 1)
      001BF7 9D               [12] 6112 	subb	a,r5
      001BF8 F5*09            [12] 6113 	mov	(_cursor_x + 1),a
                                   6114 ;	ecen4330lab7.c:1843: inputRead8();
      001BFA 12r0Er68         [24] 6115 	lcall	_inputRead8
      001BFD D0 06            [24] 6116 	pop	ar6
      001BFF D0 07            [24] 6117 	pop	ar7
                                   6118 ;	ecen4330lab7.c:1844: RAMwrite(addr, input8);
      001C01 85*19*00         [24] 6119 	mov	_RAMwrite_PARM_2,_input8
      001C04 8E 82            [24] 6120 	mov	dpl,r6
      001C06 8F 83            [24] 6121 	mov	dph,r7
      001C08 12r0Dr1A         [24] 6122 	lcall	_RAMwrite
                                   6123 ;	ecen4330lab7.c:1847: LCD_string_write("\n\n\n\n(1) Edit next\nRAM location\n\n");
      001C0B 90r08r9A         [24] 6124 	mov	dptr,#___str_40
      001C0E 75 F0 80         [24] 6125 	mov	b,#0x80
      001C11 12r09rC8         [24] 6126 	lcall	_LCD_string_write
                                   6127 ;	ecen4330lab7.c:1848: LCD_string_write("(E) End");
      001C14 90r08rBB         [24] 6128 	mov	dptr,#___str_41
      001C17 75 F0 80         [24] 6129 	mov	b,#0x80
                                   6130 ;	ecen4330lab7.c:1849: }
      001C1A 02r09rC8         [24] 6131 	ljmp	_LCD_string_write
                                   6132 ;------------------------------------------------------------
                                   6133 ;Allocation info for local variables in function 'EDIT'
                                   6134 ;------------------------------------------------------------
                                   6135 ;	ecen4330lab7.c:1861: void EDIT(){
                                   6136 ;	-----------------------------------------
                                   6137 ;	 function EDIT
                                   6138 ;	-----------------------------------------
      001C1D                       6139 _EDIT:
                                   6140 ;	ecen4330lab7.c:1862: dataEnd = 0;
      001C1D 75*1E 00         [24] 6141 	mov	_dataEnd,#0x00
                                   6142 ;	ecen4330lab7.c:1863: scrollEnd = 0;
      001C20 75*1F 00         [24] 6143 	mov	_scrollEnd,#0x00
                                   6144 ;	ecen4330lab7.c:1864: validInput = 0;
      001C23 75*1D 00         [24] 6145 	mov	_validInput,#0x00
                                   6146 ;	ecen4330lab7.c:1867: resetLCD();
      001C26 12r0Dr5C         [24] 6147 	lcall	_resetLCD
                                   6148 ;	ecen4330lab7.c:1868: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001C29 90r07r72         [24] 6149 	mov	dptr,#___str_25
      001C2C 75 F0 80         [24] 6150 	mov	b,#0x80
      001C2F 12r09rC8         [24] 6151 	lcall	_LCD_string_write
                                   6152 ;	ecen4330lab7.c:1869: cursor_x -= 4 * textsize * 6;
      001C32 E5*0C            [12] 6153 	mov	a,_textsize
      001C34 75 F0 18         [24] 6154 	mov	b,#0x18
      001C37 A4               [48] 6155 	mul	ab
      001C38 FE               [12] 6156 	mov	r6,a
      001C39 AF F0            [24] 6157 	mov	r7,b
      001C3B E5*08            [12] 6158 	mov	a,_cursor_x
      001C3D C3               [12] 6159 	clr	c
      001C3E 9E               [12] 6160 	subb	a,r6
      001C3F F5*08            [12] 6161 	mov	_cursor_x,a
      001C41 E5*09            [12] 6162 	mov	a,(_cursor_x + 1)
      001C43 9F               [12] 6163 	subb	a,r7
      001C44 F5*09            [12] 6164 	mov	(_cursor_x + 1),a
                                   6165 ;	ecen4330lab7.c:1872: inputRead16();
      001C46 12r0DrAD         [24] 6166 	lcall	_inputRead16
                                   6167 ;	ecen4330lab7.c:1875: while(scrollEnd == 0 && dataEnd == 0){
      001C49                       6168 00112$:
      001C49 E5*1F            [12] 6169 	mov	a,_scrollEnd
      001C4B 70 52            [24] 6170 	jnz	00114$
      001C4D E5*1E            [12] 6171 	mov	a,_dataEnd
      001C4F 70 4E            [24] 6172 	jnz	00114$
                                   6173 ;	ecen4330lab7.c:1878: do
      001C51                       6174 00108$:
                                   6175 ;	ecen4330lab7.c:1880: EDIT_display(input16);
      001C51 85*17 82         [24] 6176 	mov	dpl,_input16
      001C54 85*18 83         [24] 6177 	mov	dph,(_input16 + 1)
      001C57 12r1BrA5         [24] 6178 	lcall	_EDIT_display
                                   6179 ;	ecen4330lab7.c:1881: key = keyDetect();
      001C5A 12r0Ar07         [24] 6180 	lcall	_keyDetect
      001C5D 85 82*16         [24] 6181 	mov	_key,dpl
                                   6182 ;	ecen4330lab7.c:1883: switch (key)
      001C60 74 31            [12] 6183 	mov	a,#0x31
      001C62 B5*16 02         [24] 6184 	cjne	a,_key,00153$
      001C65 80 07            [24] 6185 	sjmp	00101$
      001C67                       6186 00153$:
      001C67 74 45            [12] 6187 	mov	a,#0x45
                                   6188 ;	ecen4330lab7.c:1887: case '1':
      001C69 B5*16 27         [24] 6189 	cjne	a,_key,00106$
      001C6C 80 1D            [24] 6190 	sjmp	00105$
      001C6E                       6191 00101$:
                                   6192 ;	ecen4330lab7.c:1888: validInput = 1;
      001C6E 75*1D 01         [24] 6193 	mov	_validInput,#0x01
                                   6194 ;	ecen4330lab7.c:1891: if(input16 == 0xFFFF){
      001C71 74 FF            [12] 6195 	mov	a,#0xff
      001C73 B5*17 08         [24] 6196 	cjne	a,_input16,00103$
      001C76 B5*18 05         [24] 6197 	cjne	a,(_input16 + 1),00103$
                                   6198 ;	ecen4330lab7.c:1892: scrollEnd = 1;
      001C79 75*1F 01         [24] 6199 	mov	_scrollEnd,#0x01
      001C7C 80 1B            [24] 6200 	sjmp	00109$
      001C7E                       6201 00103$:
                                   6202 ;	ecen4330lab7.c:1897: input16++;
      001C7E 05*17            [12] 6203 	inc	_input16
      001C80 E4               [12] 6204 	clr	a
      001C81 B5*17 02         [24] 6205 	cjne	a,_input16,00157$
      001C84 05*18            [12] 6206 	inc	(_input16 + 1)
      001C86                       6207 00157$:
                                   6208 ;	ecen4330lab7.c:1898: scrollEnd = 0;
      001C86 75*1F 00         [24] 6209 	mov	_scrollEnd,#0x00
                                   6210 ;	ecen4330lab7.c:1900: break;
                                   6211 ;	ecen4330lab7.c:1903: case 'E':
      001C89 80 0E            [24] 6212 	sjmp	00109$
      001C8B                       6213 00105$:
                                   6214 ;	ecen4330lab7.c:1904: validInput = 1;
      001C8B 75*1D 01         [24] 6215 	mov	_validInput,#0x01
                                   6216 ;	ecen4330lab7.c:1905: dataEnd = 1;
      001C8E 75*1E 01         [24] 6217 	mov	_dataEnd,#0x01
                                   6218 ;	ecen4330lab7.c:1906: break;
                                   6219 ;	ecen4330lab7.c:1909: default:
      001C91 80 06            [24] 6220 	sjmp	00109$
      001C93                       6221 00106$:
                                   6222 ;	ecen4330lab7.c:1910: validInput = 0;
      001C93 75*1D 00         [24] 6223 	mov	_validInput,#0x00
                                   6224 ;	ecen4330lab7.c:1911: invalidInput();
      001C96 12r0Dr84         [24] 6225 	lcall	_invalidInput
                                   6226 ;	ecen4330lab7.c:1913: }
      001C99                       6227 00109$:
                                   6228 ;	ecen4330lab7.c:1914: } while (validInput == 0);
      001C99 E5*1D            [12] 6229 	mov	a,_validInput
      001C9B 60 B4            [24] 6230 	jz	00108$
      001C9D 80 AA            [24] 6231 	sjmp	00112$
      001C9F                       6232 00114$:
                                   6233 ;	ecen4330lab7.c:1918: resetLCD();
      001C9F 12r0Dr5C         [24] 6234 	lcall	_resetLCD
                                   6235 ;	ecen4330lab7.c:1919: if(scrollEnd == 1){
      001CA2 74 01            [12] 6236 	mov	a,#0x01
      001CA4 B5*1F 14         [24] 6237 	cjne	a,_scrollEnd,00116$
                                   6238 ;	ecen4330lab7.c:1920: setTextColor(RED, BLACK);
      001CA7 E4               [12] 6239 	clr	a
      001CA8 F5*00            [12] 6240 	mov	_setTextColor_PARM_2,a
      001CAA F5*01            [12] 6241 	mov	(_setTextColor_PARM_2 + 1),a
      001CAC 90 F8 00         [24] 6242 	mov	dptr,#0xf800
      001CAF 12r02rD9         [24] 6243 	lcall	_setTextColor
                                   6244 ;	ecen4330lab7.c:1921: LCD_string_write("\nEnd of data.\n");
      001CB2 90r08rC3         [24] 6245 	mov	dptr,#___str_42
      001CB5 75 F0 80         [24] 6246 	mov	b,#0x80
      001CB8 12r09rC8         [24] 6247 	lcall	_LCD_string_write
      001CBB                       6248 00116$:
                                   6249 ;	ecen4330lab7.c:1925: setTextColor(WHITE, BLACK);
      001CBB E4               [12] 6250 	clr	a
      001CBC F5*00            [12] 6251 	mov	_setTextColor_PARM_2,a
      001CBE F5*01            [12] 6252 	mov	(_setTextColor_PARM_2 + 1),a
      001CC0 90 FF FF         [24] 6253 	mov	dptr,#0xffff
      001CC3 12r02rD9         [24] 6254 	lcall	_setTextColor
                                   6255 ;	ecen4330lab7.c:1926: LCD_string_write("\nReturning to\nmain menu.");
      001CC6 90r08rD2         [24] 6256 	mov	dptr,#___str_43
      001CC9 75 F0 80         [24] 6257 	mov	b,#0x80
      001CCC 12r09rC8         [24] 6258 	lcall	_LCD_string_write
                                   6259 ;	ecen4330lab7.c:1927: delay(200);
      001CCF 90 00 C8         [24] 6260 	mov	dptr,#0x00c8
                                   6261 ;	ecen4330lab7.c:1928: }
      001CD2 02r00r28         [24] 6262 	ljmp	_delay
                                   6263 ;------------------------------------------------------------
                                   6264 ;Allocation info for local variables in function 'FIND_display'
                                   6265 ;------------------------------------------------------------
                                   6266 ;	ecen4330lab7.c:1942: void FIND_display(){
                                   6267 ;	-----------------------------------------
                                   6268 ;	 function FIND_display
                                   6269 ;	-----------------------------------------
      001CD5                       6270 _FIND_display:
                                   6271 ;	ecen4330lab7.c:1943: addr2 = 0;						// first addr of page
      001CD5 E4               [12] 6272 	clr	a
      001CD6 F5*25            [12] 6273 	mov	_addr2,a
      001CD8 F5*26            [12] 6274 	mov	(_addr2 + 1),a
                                   6275 ;	ecen4330lab7.c:1944: currAddr1 = 0;					// page count
      001CDA F5*2B            [12] 6276 	mov	_currAddr1,a
      001CDC F5*2C            [12] 6277 	mov	(_currAddr1 + 1),a
                                   6278 ;	ecen4330lab7.c:1945: resetLCD();
      001CDE 12r0Dr5C         [24] 6279 	lcall	_resetLCD
                                   6280 ;	ecen4330lab7.c:1946: currAddr0 = addr0;				// Load starting address
      001CE1 85*21*29         [24] 6281 	mov	_currAddr0,_addr0
      001CE4 85*22*2A         [24] 6282 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   6283 ;	ecen4330lab7.c:1947: data = RAMread(currAddr0);		// Read data from starting address
      001CE7 85*29 82         [24] 6284 	mov	dpl,_currAddr0
      001CEA 85*2A 83         [24] 6285 	mov	dph,(_currAddr0 + 1)
      001CED 12r0Dr49         [24] 6286 	lcall	_RAMread
      001CF0 85 82*20         [24] 6287 	mov	_data,dpl
                                   6288 ;	ecen4330lab7.c:1950: while(data != byte1 && currAddr0 < addr1){
      001CF3                       6289 00102$:
      001CF3 AE*20            [24] 6290 	mov	r6,_data
      001CF5 7F 00            [12] 6291 	mov	r7,#0x00
      001CF7 EE               [12] 6292 	mov	a,r6
      001CF8 B5*2F 06         [24] 6293 	cjne	a,_byte1,00235$
      001CFB EF               [12] 6294 	mov	a,r7
      001CFC B5*30 02         [24] 6295 	cjne	a,(_byte1 + 1),00235$
      001CFF 80 21            [24] 6296 	sjmp	00104$
      001D01                       6297 00235$:
      001D01 C3               [12] 6298 	clr	c
      001D02 E5*29            [12] 6299 	mov	a,_currAddr0
      001D04 95*23            [12] 6300 	subb	a,_addr1
      001D06 E5*2A            [12] 6301 	mov	a,(_currAddr0 + 1)
      001D08 95*24            [12] 6302 	subb	a,(_addr1 + 1)
      001D0A 50 16            [24] 6303 	jnc	00104$
                                   6304 ;	ecen4330lab7.c:1951: currAddr0++;				// Next RAM address
      001D0C 05*29            [12] 6305 	inc	_currAddr0
      001D0E E4               [12] 6306 	clr	a
      001D0F B5*29 02         [24] 6307 	cjne	a,_currAddr0,00237$
      001D12 05*2A            [12] 6308 	inc	(_currAddr0 + 1)
      001D14                       6309 00237$:
                                   6310 ;	ecen4330lab7.c:1952: data = RAMread(currAddr0);	// Read data from RAM
      001D14 85*29 82         [24] 6311 	mov	dpl,_currAddr0
      001D17 85*2A 83         [24] 6312 	mov	dph,(_currAddr0 + 1)
      001D1A 12r0Dr49         [24] 6313 	lcall	_RAMread
      001D1D 85 82*20         [24] 6314 	mov	_data,dpl
      001D20 80 D1            [24] 6315 	sjmp	00102$
      001D22                       6316 00104$:
                                   6317 ;	ecen4330lab7.c:1956: if(data != byte1 && currAddr0 == addr1){
      001D22 AE*20            [24] 6318 	mov	r6,_data
      001D24 7F 00            [12] 6319 	mov	r7,#0x00
      001D26 EE               [12] 6320 	mov	a,r6
      001D27 B5*2F 06         [24] 6321 	cjne	a,_byte1,00238$
      001D2A EF               [12] 6322 	mov	a,r7
      001D2B B5*30 02         [24] 6323 	cjne	a,(_byte1 + 1),00238$
      001D2E 80 58            [24] 6324 	sjmp	00142$
      001D30                       6325 00238$:
      001D30 E5*23            [12] 6326 	mov	a,_addr1
      001D32 B5*29 53         [24] 6327 	cjne	a,_currAddr0,00142$
      001D35 E5*24            [12] 6328 	mov	a,(_addr1 + 1)
      001D37 B5*2A 4E         [24] 6329 	cjne	a,(_currAddr0 + 1),00142$
                                   6330 ;	ecen4330lab7.c:1957: resetLCD();
      001D3A 12r0Dr5C         [24] 6331 	lcall	_resetLCD
                                   6332 ;	ecen4330lab7.c:1958: LCD_string_write("\n0x");
      001D3D 90r07rB6         [24] 6333 	mov	dptr,#___str_27
      001D40 75 F0 80         [24] 6334 	mov	b,#0x80
      001D43 12r09rC8         [24] 6335 	lcall	_LCD_string_write
                                   6336 ;	ecen4330lab7.c:1959: HEXtoASCII_8write(byte1);
      001D46 85*2F 82         [24] 6337 	mov	dpl,_byte1
      001D49 12r0Cr38         [24] 6338 	lcall	_HEXtoASCII_8write
                                   6339 ;	ecen4330lab7.c:1960: LCD_string_write(" not\nfound in\naddress range\n\n");
      001D4C 90r08rEB         [24] 6340 	mov	dptr,#___str_44
      001D4F 75 F0 80         [24] 6341 	mov	b,#0x80
      001D52 12r09rC8         [24] 6342 	lcall	_LCD_string_write
                                   6343 ;	ecen4330lab7.c:1961: HEXtoASCII_16write(addr0);
      001D55 85*21 82         [24] 6344 	mov	dpl,_addr0
      001D58 85*22 83         [24] 6345 	mov	dph,(_addr0 + 1)
      001D5B 12r0Cr75         [24] 6346 	lcall	_HEXtoASCII_16write
                                   6347 ;	ecen4330lab7.c:1962: LCD_string_write(" -\n");
      001D5E 90r07rEE         [24] 6348 	mov	dptr,#___str_32
      001D61 75 F0 80         [24] 6349 	mov	b,#0x80
      001D64 12r09rC8         [24] 6350 	lcall	_LCD_string_write
                                   6351 ;	ecen4330lab7.c:1963: HEXtoASCII_16write(addr1);
      001D67 85*23 82         [24] 6352 	mov	dpl,_addr1
      001D6A 85*24 83         [24] 6353 	mov	dph,(_addr1 + 1)
      001D6D 12r0Cr75         [24] 6354 	lcall	_HEXtoASCII_16write
                                   6355 ;	ecen4330lab7.c:1964: delay(200);
      001D70 90 00 C8         [24] 6356 	mov	dptr,#0x00c8
      001D73 12r00r28         [24] 6357 	lcall	_delay
                                   6358 ;	ecen4330lab7.c:1965: resetLCD();
      001D76 12r0Dr5C         [24] 6359 	lcall	_resetLCD
                                   6360 ;	ecen4330lab7.c:1966: LCD_string_write("Returning to\nmain menu.");
      001D79 90r06r1F         [24] 6361 	mov	dptr,#___str_15
      001D7C 75 F0 80         [24] 6362 	mov	b,#0x80
      001D7F 12r09rC8         [24] 6363 	lcall	_LCD_string_write
                                   6364 ;	ecen4330lab7.c:1967: delay(100);
      001D82 90 00 64         [24] 6365 	mov	dptr,#0x0064
      001D85 02r00r28         [24] 6366 	ljmp	_delay
      001D88                       6367 00142$:
                                   6368 ;	ecen4330lab7.c:1975: resetLCD();
      001D88 12r0Dr5C         [24] 6369 	lcall	_resetLCD
                                   6370 ;	ecen4330lab7.c:1976: setTextColor(GREEN, BLACK);
      001D8B E4               [12] 6371 	clr	a
      001D8C F5*00            [12] 6372 	mov	_setTextColor_PARM_2,a
      001D8E F5*01            [12] 6373 	mov	(_setTextColor_PARM_2 + 1),a
      001D90 90 07 E0         [24] 6374 	mov	dptr,#0x07e0
      001D93 12r02rD9         [24] 6375 	lcall	_setTextColor
                                   6376 ;	ecen4330lab7.c:1977: LCD_string_write("\n0x");
      001D96 90r07rB6         [24] 6377 	mov	dptr,#___str_27
      001D99 75 F0 80         [24] 6378 	mov	b,#0x80
      001D9C 12r09rC8         [24] 6379 	lcall	_LCD_string_write
                                   6380 ;	ecen4330lab7.c:1978: HEXtoASCII_8write(byte1);
      001D9F 85*2F 82         [24] 6381 	mov	dpl,_byte1
      001DA2 12r0Cr38         [24] 6382 	lcall	_HEXtoASCII_8write
                                   6383 ;	ecen4330lab7.c:1979: LCD_string_write(" found at\nthe following\naddresses:\n\n");
      001DA5 90r09r09         [24] 6384 	mov	dptr,#___str_45
      001DA8 75 F0 80         [24] 6385 	mov	b,#0x80
      001DAB 12r09rC8         [24] 6386 	lcall	_LCD_string_write
                                   6387 ;	ecen4330lab7.c:1980: delay(200);
      001DAE 90 00 C8         [24] 6388 	mov	dptr,#0x00c8
      001DB1 12r00r28         [24] 6389 	lcall	_delay
                                   6390 ;	ecen4330lab7.c:1981: addr2 = currAddr0;					// Load first found address of page
      001DB4 85*29*25         [24] 6391 	mov	_addr2,_currAddr0
      001DB7 85*2A*26         [24] 6392 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6393 ;	ecen4330lab7.c:1986: do{
      001DBA                       6394 00138$:
                                   6395 ;	ecen4330lab7.c:1987: resetLCD();
      001DBA 12r0Dr5C         [24] 6396 	lcall	_resetLCD
                                   6397 ;	ecen4330lab7.c:1988: currAddr0 = addr2;				// Load current address	
      001DBD 85*25*29         [24] 6398 	mov	_currAddr0,_addr2
      001DC0 85*26*2A         [24] 6399 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6400 ;	ecen4330lab7.c:1989: HEXtoASCII_16write(currAddr0);	// Write found address to LCD
      001DC3 85*29 82         [24] 6401 	mov	dpl,_currAddr0
      001DC6 85*2A 83         [24] 6402 	mov	dph,(_currAddr0 + 1)
      001DC9 12r0Cr75         [24] 6403 	lcall	_HEXtoASCII_16write
                                   6404 ;	ecen4330lab7.c:1990: count = 7;						// Set page address display counter
      001DCC 75*32 07         [24] 6405 	mov	_count,#0x07
      001DCF 75*33 00         [24] 6406 	mov	(_count + 1),#0x00
                                   6407 ;	ecen4330lab7.c:1991: currAddr1++;					// Increment page count
      001DD2 05*2B            [12] 6408 	inc	_currAddr1
      001DD4 E4               [12] 6409 	clr	a
      001DD5 B5*2B 02         [24] 6410 	cjne	a,_currAddr1,00241$
      001DD8 05*2C            [12] 6411 	inc	(_currAddr1 + 1)
      001DDA                       6412 00241$:
                                   6413 ;	ecen4330lab7.c:1997: if(currAddr0 != 0xFFFF){
      001DDA 74 FF            [12] 6414 	mov	a,#0xff
      001DDC B5*29 05         [24] 6415 	cjne	a,_currAddr0,00242$
      001DDF B5*2A 02         [24] 6416 	cjne	a,(_currAddr0 + 1),00242$
      001DE2 80 4C            [24] 6417 	sjmp	00112$
      001DE4                       6418 00242$:
                                   6419 ;	ecen4330lab7.c:1998: do{
      001DE4                       6420 00108$:
                                   6421 ;	ecen4330lab7.c:1999: currAddr0++;				// Next RAM address
      001DE4 05*29            [12] 6422 	inc	_currAddr0
      001DE6 E4               [12] 6423 	clr	a
      001DE7 B5*29 02         [24] 6424 	cjne	a,_currAddr0,00243$
      001DEA 05*2A            [12] 6425 	inc	(_currAddr0 + 1)
      001DEC                       6426 00243$:
                                   6427 ;	ecen4330lab7.c:2000: data = RAMread(currAddr0);	// Read data
      001DEC 85*29 82         [24] 6428 	mov	dpl,_currAddr0
      001DEF 85*2A 83         [24] 6429 	mov	dph,(_currAddr0 + 1)
      001DF2 12r0Dr49         [24] 6430 	lcall	_RAMread
      001DF5 85 82*20         [24] 6431 	mov	_data,dpl
                                   6432 ;	ecen4330lab7.c:2001: if(data == byte1){			// If data = search value
      001DF8 AE*20            [24] 6433 	mov	r6,_data
      001DFA 7F 00            [12] 6434 	mov	r7,#0x00
      001DFC EE               [12] 6435 	mov	a,r6
      001DFD B5*2F 1F         [24] 6436 	cjne	a,_byte1,00109$
      001E00 EF               [12] 6437 	mov	a,r7
      001E01 B5*30 1B         [24] 6438 	cjne	a,(_byte1 + 1),00109$
                                   6439 ;	ecen4330lab7.c:2002: count--;				// Decrement page address display counter
      001E04 15*32            [12] 6440 	dec	_count
      001E06 74 FF            [12] 6441 	mov	a,#0xff
      001E08 B5*32 02         [24] 6442 	cjne	a,_count,00246$
      001E0B 15*33            [12] 6443 	dec	(_count + 1)
      001E0D                       6444 00246$:
                                   6445 ;	ecen4330lab7.c:2003: LCD_string_write("\n");	// Next line
      001E0D 90r07rF2         [24] 6446 	mov	dptr,#___str_33
      001E10 75 F0 80         [24] 6447 	mov	b,#0x80
      001E13 12r09rC8         [24] 6448 	lcall	_LCD_string_write
                                   6449 ;	ecen4330lab7.c:2004: HEXtoASCII_16write(currAddr0);	// Display found address
      001E16 85*29 82         [24] 6450 	mov	dpl,_currAddr0
      001E19 85*2A 83         [24] 6451 	mov	dph,(_currAddr0 + 1)
      001E1C 12r0Cr75         [24] 6452 	lcall	_HEXtoASCII_16write
      001E1F                       6453 00109$:
                                   6454 ;	ecen4330lab7.c:2006: }while(currAddr0 < addr1 && count > 0);
      001E1F C3               [12] 6455 	clr	c
      001E20 E5*29            [12] 6456 	mov	a,_currAddr0
      001E22 95*23            [12] 6457 	subb	a,_addr1
      001E24 E5*2A            [12] 6458 	mov	a,(_currAddr0 + 1)
      001E26 95*24            [12] 6459 	subb	a,(_addr1 + 1)
      001E28 50 06            [24] 6460 	jnc	00112$
      001E2A E5*32            [12] 6461 	mov	a,_count
      001E2C 45*33            [12] 6462 	orl	a,(_count + 1)
      001E2E 70 B4            [24] 6463 	jnz	00108$
      001E30                       6464 00112$:
                                   6465 ;	ecen4330lab7.c:2013: setCursor(0, 250);
      001E30 75*00 FA         [24] 6466 	mov	_setCursor_PARM_2,#0xfa
      001E33 75*01 00         [24] 6467 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E36 90 00 00         [24] 6468 	mov	dptr,#0x0000
      001E39 12r02rCC         [24] 6469 	lcall	_setCursor
                                   6470 ;	ecen4330lab7.c:2014: setTextSize(2);
      001E3C 75 82 02         [24] 6471 	mov	dpl,#0x02
      001E3F 12r02rE6         [24] 6472 	lcall	_setTextSize
                                   6473 ;	ecen4330lab7.c:2015: setTextColor(WHITE, BLACK);
      001E42 E4               [12] 6474 	clr	a
      001E43 F5*00            [12] 6475 	mov	_setTextColor_PARM_2,a
      001E45 F5*01            [12] 6476 	mov	(_setTextColor_PARM_2 + 1),a
      001E47 90 FF FF         [24] 6477 	mov	dptr,#0xffff
      001E4A 12r02rD9         [24] 6478 	lcall	_setTextColor
                                   6479 ;	ecen4330lab7.c:2016: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001E4D 90r07rF4         [24] 6480 	mov	dptr,#___str_34
      001E50 75 F0 80         [24] 6481 	mov	b,#0x80
      001E53 12r09rC8         [24] 6482 	lcall	_LCD_string_write
                                   6483 ;	ecen4330lab7.c:2017: HEXtoASCII_16write(currAddr1);
      001E56 85*2B 82         [24] 6484 	mov	dpl,_currAddr1
      001E59 85*2C 83         [24] 6485 	mov	dph,(_currAddr1 + 1)
      001E5C 12r0Cr75         [24] 6486 	lcall	_HEXtoASCII_16write
                                   6487 ;	ecen4330lab7.c:2023: key = keyDetect();
      001E5F 12r0Ar07         [24] 6488 	lcall	_keyDetect
      001E62 85 82*16         [24] 6489 	mov	_key,dpl
                                   6490 ;	ecen4330lab7.c:2024: switch (key)
      001E65 74 30            [12] 6491 	mov	a,#0x30
      001E67 B5*16 02         [24] 6492 	cjne	a,_key,00249$
      001E6A 80 13            [24] 6493 	sjmp	00113$
      001E6C                       6494 00249$:
      001E6C 74 31            [12] 6495 	mov	a,#0x31
      001E6E B5*16 03         [24] 6496 	cjne	a,_key,00250$
      001E71 02r1Fr20         [24] 6497 	ljmp	00126$
      001E74                       6498 00250$:
      001E74 74 45            [12] 6499 	mov	a,#0x45
      001E76 B5*16 03         [24] 6500 	cjne	a,_key,00251$
      001E79 02r1FrA0         [24] 6501 	ljmp	00135$
      001E7C                       6502 00251$:
      001E7C 02r1FrB4         [24] 6503 	ljmp	00136$
                                   6504 ;	ecen4330lab7.c:2030: case '0':
      001E7F                       6505 00113$:
                                   6506 ;	ecen4330lab7.c:2035: if(currAddr0 >= addr1){
      001E7F C3               [12] 6507 	clr	c
      001E80 E5*29            [12] 6508 	mov	a,_currAddr0
      001E82 95*23            [12] 6509 	subb	a,_addr1
      001E84 E5*2A            [12] 6510 	mov	a,(_currAddr0 + 1)
      001E86 95*24            [12] 6511 	subb	a,(_addr1 + 1)
      001E88 40 1E            [24] 6512 	jc	00117$
                                   6513 ;	ecen4330lab7.c:2036: resetLCD();
      001E8A 12r0Dr5C         [24] 6514 	lcall	_resetLCD
                                   6515 ;	ecen4330lab7.c:2037: LCD_string_write("End of Data.");
      001E8D 90r09r2E         [24] 6516 	mov	dptr,#___str_46
      001E90 75 F0 80         [24] 6517 	mov	b,#0x80
      001E93 12r09rC8         [24] 6518 	lcall	_LCD_string_write
                                   6519 ;	ecen4330lab7.c:2038: delay(200);
      001E96 90 00 C8         [24] 6520 	mov	dptr,#0x00c8
      001E99 12r00r28         [24] 6521 	lcall	_delay
                                   6522 ;	ecen4330lab7.c:2039: currAddr1--;	// Reset page count to last displayed page 
      001E9C 15*2B            [12] 6523 	dec	_currAddr1
      001E9E 74 FF            [12] 6524 	mov	a,#0xff
      001EA0 B5*2B 02         [24] 6525 	cjne	a,_currAddr1,00253$
      001EA3 15*2C            [12] 6526 	dec	(_currAddr1 + 1)
      001EA5                       6527 00253$:
      001EA5 02r1FrC0         [24] 6528 	ljmp	00139$
                                   6529 ;	ecen4330lab7.c:2052: do{
      001EA8                       6530 00117$:
                                   6531 ;	ecen4330lab7.c:2053: currAddr0++;			// Next RAM address
      001EA8 05*29            [12] 6532 	inc	_currAddr0
      001EAA E4               [12] 6533 	clr	a
      001EAB B5*29 02         [24] 6534 	cjne	a,_currAddr0,00254$
      001EAE 05*2A            [12] 6535 	inc	(_currAddr0 + 1)
      001EB0                       6536 00254$:
                                   6537 ;	ecen4330lab7.c:2054: data = RAMread(currAddr0);	// Read data
      001EB0 85*29 82         [24] 6538 	mov	dpl,_currAddr0
      001EB3 85*2A 83         [24] 6539 	mov	dph,(_currAddr0 + 1)
      001EB6 12r0Dr49         [24] 6540 	lcall	_RAMread
      001EB9 85 82*20         [24] 6541 	mov	_data,dpl
                                   6542 ;	ecen4330lab7.c:2055: if(data == byte1){			// If data matches search value
      001EBC AE*20            [24] 6543 	mov	r6,_data
      001EBE 7F 00            [12] 6544 	mov	r7,#0x00
      001EC0 EE               [12] 6545 	mov	a,r6
      001EC1 B5*2F 0A         [24] 6546 	cjne	a,_byte1,00118$
      001EC4 EF               [12] 6547 	mov	a,r7
      001EC5 B5*30 06         [24] 6548 	cjne	a,(_byte1 + 1),00118$
                                   6549 ;	ecen4330lab7.c:2056: addr2 = currAddr0;		// Set first address of display page
      001EC8 85*29*25         [24] 6550 	mov	_addr2,_currAddr0
      001ECB 85*2A*26         [24] 6551 	mov	(_addr2 + 1),(_currAddr0 + 1)
      001ECE                       6552 00118$:
                                   6553 ;	ecen4330lab7.c:2058: }while(currAddr0 < addr1 && data != byte1);
      001ECE C3               [12] 6554 	clr	c
      001ECF E5*29            [12] 6555 	mov	a,_currAddr0
      001ED1 95*23            [12] 6556 	subb	a,_addr1
      001ED3 E5*2A            [12] 6557 	mov	a,(_currAddr0 + 1)
      001ED5 95*24            [12] 6558 	subb	a,(_addr1 + 1)
      001ED7 50 0C            [24] 6559 	jnc	00119$
      001ED9 AE*20            [24] 6560 	mov	r6,_data
      001EDB 7F 00            [12] 6561 	mov	r7,#0x00
      001EDD EE               [12] 6562 	mov	a,r6
      001EDE B5*2F C7         [24] 6563 	cjne	a,_byte1,00117$
      001EE1 EF               [12] 6564 	mov	a,r7
      001EE2 B5*30 C3         [24] 6565 	cjne	a,(_byte1 + 1),00117$
      001EE5                       6566 00119$:
                                   6567 ;	ecen4330lab7.c:2064: if(currAddr0 >= addr1 && data != byte1){
      001EE5 C3               [12] 6568 	clr	c
      001EE6 E5*29            [12] 6569 	mov	a,_currAddr0
      001EE8 95*23            [12] 6570 	subb	a,_addr1
      001EEA E5*2A            [12] 6571 	mov	a,(_currAddr0 + 1)
      001EEC 95*24            [12] 6572 	subb	a,(_addr1 + 1)
      001EEE 50 03            [24] 6573 	jnc	00260$
      001EF0 02r1FrC0         [24] 6574 	ljmp	00139$
      001EF3                       6575 00260$:
      001EF3 AE*20            [24] 6576 	mov	r6,_data
      001EF5 7F 00            [12] 6577 	mov	r7,#0x00
      001EF7 EE               [12] 6578 	mov	a,r6
      001EF8 B5*2F 07         [24] 6579 	cjne	a,_byte1,00261$
      001EFB EF               [12] 6580 	mov	a,r7
      001EFC B5*30 03         [24] 6581 	cjne	a,(_byte1 + 1),00261$
      001EFF 02r1FrC0         [24] 6582 	ljmp	00139$
      001F02                       6583 00261$:
                                   6584 ;	ecen4330lab7.c:2065: resetLCD();
      001F02 12r0Dr5C         [24] 6585 	lcall	_resetLCD
                                   6586 ;	ecen4330lab7.c:2066: LCD_string_write("End of Data.");
      001F05 90r09r2E         [24] 6587 	mov	dptr,#___str_46
      001F08 75 F0 80         [24] 6588 	mov	b,#0x80
      001F0B 12r09rC8         [24] 6589 	lcall	_LCD_string_write
                                   6590 ;	ecen4330lab7.c:2067: delay(200);
      001F0E 90 00 C8         [24] 6591 	mov	dptr,#0x00c8
      001F11 12r00r28         [24] 6592 	lcall	_delay
                                   6593 ;	ecen4330lab7.c:2068: currAddr1--;	// Reset page count to last displayed page
      001F14 15*2B            [12] 6594 	dec	_currAddr1
      001F16 74 FF            [12] 6595 	mov	a,#0xff
      001F18 B5*2B 02         [24] 6596 	cjne	a,_currAddr1,00262$
      001F1B 15*2C            [12] 6597 	dec	(_currAddr1 + 1)
      001F1D                       6598 00262$:
                                   6599 ;	ecen4330lab7.c:2073: break;
      001F1D 02r1FrC0         [24] 6600 	ljmp	00139$
                                   6601 ;	ecen4330lab7.c:2080: case '1':
      001F20                       6602 00126$:
                                   6603 ;	ecen4330lab7.c:2084: if(currAddr1 == 1){
      001F20 74 01            [12] 6604 	mov	a,#0x01
      001F22 B5*2B 06         [24] 6605 	cjne	a,_currAddr1,00263$
      001F25 14               [12] 6606 	dec	a
      001F26 B5*2C 02         [24] 6607 	cjne	a,(_currAddr1 + 1),00263$
      001F29 80 02            [24] 6608 	sjmp	00264$
      001F2B                       6609 00263$:
      001F2B 80 1E            [24] 6610 	sjmp	00133$
      001F2D                       6611 00264$:
                                   6612 ;	ecen4330lab7.c:2085: resetLCD();
      001F2D 12r0Dr5C         [24] 6613 	lcall	_resetLCD
                                   6614 ;	ecen4330lab7.c:2086: LCD_string_write("End of Data.");
      001F30 90r09r2E         [24] 6615 	mov	dptr,#___str_46
      001F33 75 F0 80         [24] 6616 	mov	b,#0x80
      001F36 12r09rC8         [24] 6617 	lcall	_LCD_string_write
                                   6618 ;	ecen4330lab7.c:2087: delay(200);
      001F39 90 00 C8         [24] 6619 	mov	dptr,#0x00c8
      001F3C 12r00r28         [24] 6620 	lcall	_delay
                                   6621 ;	ecen4330lab7.c:2088: currAddr1--;	// Reset page count to last displayed page
      001F3F 15*2B            [12] 6622 	dec	_currAddr1
      001F41 74 FF            [12] 6623 	mov	a,#0xff
      001F43 B5*2B 02         [24] 6624 	cjne	a,_currAddr1,00265$
      001F46 15*2C            [12] 6625 	dec	(_currAddr1 + 1)
      001F48                       6626 00265$:
      001F48 02r1FrC0         [24] 6627 	ljmp	00139$
      001F4B                       6628 00133$:
                                   6629 ;	ecen4330lab7.c:2096: currAddr0 = addr2;
      001F4B 85*25*29         [24] 6630 	mov	_currAddr0,_addr2
      001F4E 85*26*2A         [24] 6631 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6632 ;	ecen4330lab7.c:2097: count = 0;
      001F51 E4               [12] 6633 	clr	a
      001F52 F5*32            [12] 6634 	mov	_count,a
      001F54 F5*33            [12] 6635 	mov	(_count + 1),a
                                   6636 ;	ecen4330lab7.c:2098: while(count < 8){
      001F56                       6637 00129$:
      001F56 C3               [12] 6638 	clr	c
      001F57 E5*32            [12] 6639 	mov	a,_count
      001F59 94 08            [12] 6640 	subb	a,#0x08
      001F5B E5*33            [12] 6641 	mov	a,(_count + 1)
      001F5D 94 00            [12] 6642 	subb	a,#0x00
      001F5F 50 2B            [24] 6643 	jnc	00131$
                                   6644 ;	ecen4330lab7.c:2099: currAddr0--;
      001F61 15*29            [12] 6645 	dec	_currAddr0
      001F63 74 FF            [12] 6646 	mov	a,#0xff
      001F65 B5*29 02         [24] 6647 	cjne	a,_currAddr0,00267$
      001F68 15*2A            [12] 6648 	dec	(_currAddr0 + 1)
      001F6A                       6649 00267$:
                                   6650 ;	ecen4330lab7.c:2100: data = RAMread(currAddr0);
      001F6A 85*29 82         [24] 6651 	mov	dpl,_currAddr0
      001F6D 85*2A 83         [24] 6652 	mov	dph,(_currAddr0 + 1)
      001F70 12r0Dr49         [24] 6653 	lcall	_RAMread
      001F73 85 82*20         [24] 6654 	mov	_data,dpl
                                   6655 ;	ecen4330lab7.c:2101: if(data == byte1){
      001F76 AE*20            [24] 6656 	mov	r6,_data
      001F78 7F 00            [12] 6657 	mov	r7,#0x00
      001F7A EE               [12] 6658 	mov	a,r6
      001F7B B5*2F D8         [24] 6659 	cjne	a,_byte1,00129$
      001F7E EF               [12] 6660 	mov	a,r7
      001F7F B5*30 D4         [24] 6661 	cjne	a,(_byte1 + 1),00129$
                                   6662 ;	ecen4330lab7.c:2102: count++;
      001F82 05*32            [12] 6663 	inc	_count
      001F84 E4               [12] 6664 	clr	a
      001F85 B5*32 CE         [24] 6665 	cjne	a,_count,00129$
      001F88 05*33            [12] 6666 	inc	(_count + 1)
      001F8A 80 CA            [24] 6667 	sjmp	00129$
      001F8C                       6668 00131$:
                                   6669 ;	ecen4330lab7.c:2105: addr2 = currAddr0;
      001F8C 85*29*25         [24] 6670 	mov	_addr2,_currAddr0
      001F8F 85*2A*26         [24] 6671 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6672 ;	ecen4330lab7.c:2106: currAddr1 -= 2;
      001F92 E5*2B            [12] 6673 	mov	a,_currAddr1
      001F94 24 FE            [12] 6674 	add	a,#0xfe
      001F96 F5*2B            [12] 6675 	mov	_currAddr1,a
      001F98 E5*2C            [12] 6676 	mov	a,(_currAddr1 + 1)
      001F9A 34 FF            [12] 6677 	addc	a,#0xff
      001F9C F5*2C            [12] 6678 	mov	(_currAddr1 + 1),a
                                   6679 ;	ecen4330lab7.c:2108: break;
                                   6680 ;	ecen4330lab7.c:2114: case 'E':
      001F9E 80 20            [24] 6681 	sjmp	00139$
      001FA0                       6682 00135$:
                                   6683 ;	ecen4330lab7.c:2115: resetLCD();
      001FA0 12r0Dr5C         [24] 6684 	lcall	_resetLCD
                                   6685 ;	ecen4330lab7.c:2116: LCD_string_write("Returning to\nmain menu.");
      001FA3 90r06r1F         [24] 6686 	mov	dptr,#___str_15
      001FA6 75 F0 80         [24] 6687 	mov	b,#0x80
      001FA9 12r09rC8         [24] 6688 	lcall	_LCD_string_write
                                   6689 ;	ecen4330lab7.c:2117: delay(200);
      001FAC 90 00 C8         [24] 6690 	mov	dptr,#0x00c8
      001FAF 12r00r28         [24] 6691 	lcall	_delay
                                   6692 ;	ecen4330lab7.c:2118: break;
                                   6693 ;	ecen4330lab7.c:2124: default:
      001FB2 80 0C            [24] 6694 	sjmp	00139$
      001FB4                       6695 00136$:
                                   6696 ;	ecen4330lab7.c:2125: invalidInput();
      001FB4 12r0Dr84         [24] 6697 	lcall	_invalidInput
                                   6698 ;	ecen4330lab7.c:2126: currAddr1--;
      001FB7 15*2B            [12] 6699 	dec	_currAddr1
      001FB9 74 FF            [12] 6700 	mov	a,#0xff
      001FBB B5*2B 02         [24] 6701 	cjne	a,_currAddr1,00271$
      001FBE 15*2C            [12] 6702 	dec	(_currAddr1 + 1)
      001FC0                       6703 00271$:
                                   6704 ;	ecen4330lab7.c:2129: }
      001FC0                       6705 00139$:
                                   6706 ;	ecen4330lab7.c:2130: }while(key != 'E');
      001FC0 74 45            [12] 6707 	mov	a,#0x45
      001FC2 B5*16 01         [24] 6708 	cjne	a,_key,00272$
      001FC5 22               [24] 6709 	ret
      001FC6                       6710 00272$:
      001FC6 02r1DrBA         [24] 6711 	ljmp	00138$
                                   6712 ;	ecen4330lab7.c:2132: }
      001FC9 22               [24] 6713 	ret
                                   6714 ;------------------------------------------------------------
                                   6715 ;Allocation info for local variables in function 'FIND'
                                   6716 ;------------------------------------------------------------
                                   6717 ;	ecen4330lab7.c:2140: void FIND(){
                                   6718 ;	-----------------------------------------
                                   6719 ;	 function FIND
                                   6720 ;	-----------------------------------------
      001FCA                       6721 _FIND:
                                   6722 ;	ecen4330lab7.c:2141: endAddrCalc = 0;
      001FCA E4               [12] 6723 	clr	a
      001FCB F5*34            [12] 6724 	mov	_endAddrCalc,a
      001FCD F5*35            [12] 6725 	mov	(_endAddrCalc + 1),a
      001FCF F5*36            [12] 6726 	mov	(_endAddrCalc + 2),a
      001FD1 F5*37            [12] 6727 	mov	(_endAddrCalc + 3),a
                                   6728 ;	ecen4330lab7.c:2142: addr0 = 0;                      // Starting Address
      001FD3 F5*21            [12] 6729 	mov	_addr0,a
      001FD5 F5*22            [12] 6730 	mov	(_addr0 + 1),a
                                   6731 ;	ecen4330lab7.c:2143: addr1 = 0;                      // End Address
      001FD7 F5*23            [12] 6732 	mov	_addr1,a
      001FD9 F5*24            [12] 6733 	mov	(_addr1 + 1),a
                                   6734 ;	ecen4330lab7.c:2144: dataType = 0;                   // Data Type
                                   6735 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001FDB F5*1A            [12] 6736 	mov	_dataType,a
                                   6737 ;	ecen4330lab7.c:2145: dataSize = 0;                   // Data Size
      001FDD F5*1B            [12] 6738 	mov	_dataSize,a
      001FDF F5*1C            [12] 6739 	mov	(_dataSize + 1),a
                                   6740 ;	ecen4330lab7.c:2146: byte1 = 0;                       // Find Value
      001FE1 F5*2F            [12] 6741 	mov	_byte1,a
      001FE3 F5*30            [12] 6742 	mov	(_byte1 + 1),a
                                   6743 ;	ecen4330lab7.c:2149: resetLCD();
      001FE5 12r0Dr5C         [24] 6744 	lcall	_resetLCD
                                   6745 ;	ecen4330lab7.c:2150: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n   0x____");
      001FE8 90r09r3B         [24] 6746 	mov	dptr,#___str_47
      001FEB 75 F0 80         [24] 6747 	mov	b,#0x80
      001FEE 12r09rC8         [24] 6748 	lcall	_LCD_string_write
                                   6749 ;	ecen4330lab7.c:2151: cursor_x -= 4 * textsize * 6;
      001FF1 E5*0C            [12] 6750 	mov	a,_textsize
      001FF3 75 F0 18         [24] 6751 	mov	b,#0x18
      001FF6 A4               [48] 6752 	mul	ab
      001FF7 FE               [12] 6753 	mov	r6,a
      001FF8 AF F0            [24] 6754 	mov	r7,b
      001FFA E5*08            [12] 6755 	mov	a,_cursor_x
      001FFC C3               [12] 6756 	clr	c
      001FFD 9E               [12] 6757 	subb	a,r6
      001FFE F5*08            [12] 6758 	mov	_cursor_x,a
      002000 E5*09            [12] 6759 	mov	a,(_cursor_x + 1)
      002002 9F               [12] 6760 	subb	a,r7
      002003 F5*09            [12] 6761 	mov	(_cursor_x + 1),a
                                   6762 ;	ecen4330lab7.c:2152: inputRead16();                  // Read input
      002005 12r0DrAD         [24] 6763 	lcall	_inputRead16
                                   6764 ;	ecen4330lab7.c:2153: addr0 = input16;                // Start address
      002008 85*17*21         [24] 6765 	mov	_addr0,_input16
      00200B 85*18*22         [24] 6766 	mov	(_addr0 + 1),(_input16 + 1)
                                   6767 ;	ecen4330lab7.c:2159: resetLCD();
      00200E 12r0Dr5C         [24] 6768 	lcall	_resetLCD
                                   6769 ;	ecen4330lab7.c:2160: inputDataSize();                // Prompt & read input
      002011 12r0Fr79         [24] 6770 	lcall	_inputDataSize
                                   6771 ;	ecen4330lab7.c:2163: resetLCD();
      002014 12r0Dr5C         [24] 6772 	lcall	_resetLCD
                                   6773 ;	ecen4330lab7.c:2164: LCD_string_write("\nEnter search\nvalue:\n\n   0x__");
      002017 90r09r63         [24] 6774 	mov	dptr,#___str_48
      00201A 75 F0 80         [24] 6775 	mov	b,#0x80
      00201D 12r09rC8         [24] 6776 	lcall	_LCD_string_write
                                   6777 ;	ecen4330lab7.c:2165: cursor_x -= 2 * textsize * 6;
      002020 E5*0C            [12] 6778 	mov	a,_textsize
      002022 75 F0 0C         [24] 6779 	mov	b,#0x0c
      002025 A4               [48] 6780 	mul	ab
      002026 FE               [12] 6781 	mov	r6,a
      002027 AF F0            [24] 6782 	mov	r7,b
      002029 E5*08            [12] 6783 	mov	a,_cursor_x
      00202B C3               [12] 6784 	clr	c
      00202C 9E               [12] 6785 	subb	a,r6
      00202D F5*08            [12] 6786 	mov	_cursor_x,a
      00202F E5*09            [12] 6787 	mov	a,(_cursor_x + 1)
      002031 9F               [12] 6788 	subb	a,r7
      002032 F5*09            [12] 6789 	mov	(_cursor_x + 1),a
                                   6790 ;	ecen4330lab7.c:2166: inputRead8();                  // Read input
      002034 12r0Er68         [24] 6791 	lcall	_inputRead8
                                   6792 ;	ecen4330lab7.c:2167: byte1 = input8;                 // Find value
      002037 85*19*2F         [24] 6793 	mov	_byte1,_input8
      00203A 75*30 00         [24] 6794 	mov	(_byte1 + 1),#0x00
                                   6795 ;	ecen4330lab7.c:2170: endAddrCalc = addr0 + dataSize;
      00203D E5*1B            [12] 6796 	mov	a,_dataSize
      00203F 25*21            [12] 6797 	add	a,_addr0
      002041 FE               [12] 6798 	mov	r6,a
      002042 E5*1C            [12] 6799 	mov	a,(_dataSize + 1)
      002044 35*22            [12] 6800 	addc	a,(_addr0 + 1)
      002046 FF               [12] 6801 	mov	r7,a
      002047 8E*34            [24] 6802 	mov	_endAddrCalc,r6
      002049 8F*35            [24] 6803 	mov	(_endAddrCalc + 1),r7
      00204B 75*36 00         [24] 6804 	mov	(_endAddrCalc + 2),#0x00
      00204E 75*37 00         [24] 6805 	mov	(_endAddrCalc + 3),#0x00
                                   6806 ;	ecen4330lab7.c:2171: if(endAddrCalc < addr0){ // RAM overflow
      002051 AC*21            [24] 6807 	mov	r4,_addr0
      002053 AD*22            [24] 6808 	mov	r5,(_addr0 + 1)
      002055 7E 00            [12] 6809 	mov	r6,#0x00
      002057 7F 00            [12] 6810 	mov	r7,#0x00
      002059 C3               [12] 6811 	clr	c
      00205A E5*34            [12] 6812 	mov	a,_endAddrCalc
      00205C 9C               [12] 6813 	subb	a,r4
      00205D E5*35            [12] 6814 	mov	a,(_endAddrCalc + 1)
      00205F 9D               [12] 6815 	subb	a,r5
      002060 E5*36            [12] 6816 	mov	a,(_endAddrCalc + 2)
      002062 9E               [12] 6817 	subb	a,r6
      002063 E5*37            [12] 6818 	mov	a,(_endAddrCalc + 3)
      002065 9F               [12] 6819 	subb	a,r7
      002066 50 14            [24] 6820 	jnc	00102$
                                   6821 ;	ecen4330lab7.c:2172: addr1 = 0xFFFF;             // Set end address
      002068 75*23 FF         [24] 6822 	mov	_addr1,#0xff
                                   6823 ;	ecen4330lab7.c:2173: dataSize = addr1 - addr0;   // Recalculate data size
      00206B 74 FF            [12] 6824 	mov	a,#0xff
      00206D F5*24            [12] 6825 	mov	(_addr1 + 1),a
      00206F C3               [12] 6826 	clr	c
      002070 95*21            [12] 6827 	subb	a,_addr0
      002072 F5*1B            [12] 6828 	mov	_dataSize,a
      002074 74 FF            [12] 6829 	mov	a,#0xff
      002076 95*22            [12] 6830 	subb	a,(_addr0 + 1)
      002078 F5*1C            [12] 6831 	mov	(_dataSize + 1),a
      00207A 80 0C            [24] 6832 	sjmp	00103$
      00207C                       6833 00102$:
                                   6834 ;	ecen4330lab7.c:2176: addr1 = addr0 + dataSize;
      00207C E5*1B            [12] 6835 	mov	a,_dataSize
      00207E 25*21            [12] 6836 	add	a,_addr0
      002080 F5*23            [12] 6837 	mov	_addr1,a
      002082 E5*1C            [12] 6838 	mov	a,(_dataSize + 1)
      002084 35*22            [12] 6839 	addc	a,(_addr0 + 1)
      002086 F5*24            [12] 6840 	mov	(_addr1 + 1),a
      002088                       6841 00103$:
                                   6842 ;	ecen4330lab7.c:2196: FIND_display();                 // Display dump data
                                   6843 ;	ecen4330lab7.c:2197: }
      002088 02r1CrD5         [24] 6844 	ljmp	_FIND_display
                                   6845 ;------------------------------------------------------------
                                   6846 ;Allocation info for local variables in function 'resetLCD1'
                                   6847 ;------------------------------------------------------------
                                   6848 ;	ecen4330lab7.c:2199: void resetLCD1(){
                                   6849 ;	-----------------------------------------
                                   6850 ;	 function resetLCD1
                                   6851 ;	-----------------------------------------
      00208B                       6852 _resetLCD1:
                                   6853 ;	ecen4330lab7.c:2200: setRotation(4);
      00208B 75 82 04         [24] 6854 	mov	dpl,#0x04
      00208E 12r02rFE         [24] 6855 	lcall	_setRotation
                                   6856 ;	ecen4330lab7.c:2201: setTextColor(GRAY, BLACK);
      002091 E4               [12] 6857 	clr	a
      002092 F5*00            [12] 6858 	mov	_setTextColor_PARM_2,a
      002094 F5*01            [12] 6859 	mov	(_setTextColor_PARM_2 + 1),a
      002096 90 D6 BA         [24] 6860 	mov	dptr,#0xd6ba
      002099 12r02rD9         [24] 6861 	lcall	_setTextColor
                                   6862 ;	ecen4330lab7.c:2202: setTextSize(3);
      00209C 75 82 03         [24] 6863 	mov	dpl,#0x03
      00209F 12r02rE6         [24] 6864 	lcall	_setTextSize
                                   6865 ;	ecen4330lab7.c:2203: fillScreen(BLACK);
      0020A2 90 00 00         [24] 6866 	mov	dptr,#0x0000
      0020A5 12r06r71         [24] 6867 	lcall	_fillScreen
                                   6868 ;	ecen4330lab7.c:2204: setCursor(0, 0);
      0020A8 E4               [12] 6869 	clr	a
      0020A9 F5*00            [12] 6870 	mov	_setCursor_PARM_2,a
      0020AB F5*01            [12] 6871 	mov	(_setCursor_PARM_2 + 1),a
      0020AD 90 00 00         [24] 6872 	mov	dptr,#0x0000
                                   6873 ;	ecen4330lab7.c:2205: }
      0020B0 02r02rCC         [24] 6874 	ljmp	_setCursor
                                   6875 ;------------------------------------------------------------
                                   6876 ;Allocation info for local variables in function 'UART_dataRate'
                                   6877 ;------------------------------------------------------------
                                   6878 ;	ecen4330lab7.c:2224: void UART_dataRate() {
                                   6879 ;	-----------------------------------------
                                   6880 ;	 function UART_dataRate
                                   6881 ;	-----------------------------------------
      0020B3                       6882 _UART_dataRate:
                                   6883 ;	ecen4330lab7.c:2225: resetLCD();
      0020B3 12r0Dr5C         [24] 6884 	lcall	_resetLCD
                                   6885 ;	ecen4330lab7.c:2226: do {
      0020B6                       6886 00119$:
                                   6887 ;	ecen4330lab7.c:2227: LCD_string_write("\n(1) 1200\n");
      0020B6 90r09r81         [24] 6888 	mov	dptr,#___str_49
      0020B9 75 F0 80         [24] 6889 	mov	b,#0x80
      0020BC 12r09rC8         [24] 6890 	lcall	_LCD_string_write
                                   6891 ;	ecen4330lab7.c:2228: LCD_string_write("(2) 2400\n");
      0020BF 90r09r8C         [24] 6892 	mov	dptr,#___str_50
      0020C2 75 F0 80         [24] 6893 	mov	b,#0x80
      0020C5 12r09rC8         [24] 6894 	lcall	_LCD_string_write
                                   6895 ;	ecen4330lab7.c:2229: LCD_string_write("(3) 4800\n");
      0020C8 90r09r96         [24] 6896 	mov	dptr,#___str_51
      0020CB 75 F0 80         [24] 6897 	mov	b,#0x80
      0020CE 12r09rC8         [24] 6898 	lcall	_LCD_string_write
                                   6899 ;	ecen4330lab7.c:2230: LCD_string_write("(4) 9600\n");
      0020D1 90r09rA0         [24] 6900 	mov	dptr,#___str_52
      0020D4 75 F0 80         [24] 6901 	mov	b,#0x80
      0020D7 12r09rC8         [24] 6902 	lcall	_LCD_string_write
                                   6903 ;	ecen4330lab7.c:2231: LCD_string_write("(5) 19200\n\n");
      0020DA 90r09rAA         [24] 6904 	mov	dptr,#___str_53
      0020DD 75 F0 80         [24] 6905 	mov	b,#0x80
      0020E0 12r09rC8         [24] 6906 	lcall	_LCD_string_write
                                   6907 ;	ecen4330lab7.c:2232: LCD_string_write("Current:\n");
      0020E3 90r09rB6         [24] 6908 	mov	dptr,#___str_54
      0020E6 75 F0 80         [24] 6909 	mov	b,#0x80
      0020E9 12r09rC8         [24] 6910 	lcall	_LCD_string_write
                                   6911 ;	ecen4330lab7.c:2233: if(PCON == 0x80){
      0020EC 74 80            [12] 6912 	mov	a,#0x80
      0020EE B5 87 1B         [24] 6913 	cjne	a,_PCON,00110$
                                   6914 ;	ecen4330lab7.c:2234: if (TH1 == 0xFD){
      0020F1 74 FD            [12] 6915 	mov	a,#0xfd
      0020F3 B5 8D 0B         [24] 6916 	cjne	a,_TH1,00102$
                                   6917 ;	ecen4330lab7.c:2235: LCD_string_write("19200\n");
      0020F6 90r09rC0         [24] 6918 	mov	dptr,#___str_55
      0020F9 75 F0 80         [24] 6919 	mov	b,#0x80
      0020FC 12r09rC8         [24] 6920 	lcall	_LCD_string_write
      0020FF 80 4B            [24] 6921 	sjmp	00111$
      002101                       6922 00102$:
                                   6923 ;	ecen4330lab7.c:2238: LCD_string_write("Invalid\n");
      002101 90r09rC7         [24] 6924 	mov	dptr,#___str_56
      002104 75 F0 80         [24] 6925 	mov	b,#0x80
      002107 12r09rC8         [24] 6926 	lcall	_LCD_string_write
      00210A 80 40            [24] 6927 	sjmp	00111$
      00210C                       6928 00110$:
                                   6929 ;	ecen4330lab7.c:2242: switch(TH1) {
      00210C AF 8D            [24] 6930 	mov	r7,_TH1
      00210E BF E8 02         [24] 6931 	cjne	r7,#0xe8,00180$
      002111 80 0F            [24] 6932 	sjmp	00104$
      002113                       6933 00180$:
      002113 BF F4 02         [24] 6934 	cjne	r7,#0xf4,00181$
      002116 80 15            [24] 6935 	sjmp	00105$
      002118                       6936 00181$:
      002118 BF FA 02         [24] 6937 	cjne	r7,#0xfa,00182$
      00211B 80 1B            [24] 6938 	sjmp	00106$
      00211D                       6939 00182$:
                                   6940 ;	ecen4330lab7.c:2243: case 0xE8:
      00211D BF FD 2C         [24] 6941 	cjne	r7,#0xfd,00111$
      002120 80 21            [24] 6942 	sjmp	00107$
      002122                       6943 00104$:
                                   6944 ;	ecen4330lab7.c:2244: LCD_string_write("1200\n");
      002122 90r09rD0         [24] 6945 	mov	dptr,#___str_57
      002125 75 F0 80         [24] 6946 	mov	b,#0x80
      002128 12r09rC8         [24] 6947 	lcall	_LCD_string_write
                                   6948 ;	ecen4330lab7.c:2245: break;
                                   6949 ;	ecen4330lab7.c:2246: case 0xF4:
      00212B 80 1F            [24] 6950 	sjmp	00111$
      00212D                       6951 00105$:
                                   6952 ;	ecen4330lab7.c:2247: LCD_string_write("2400\n");
      00212D 90r09rD6         [24] 6953 	mov	dptr,#___str_58
      002130 75 F0 80         [24] 6954 	mov	b,#0x80
      002133 12r09rC8         [24] 6955 	lcall	_LCD_string_write
                                   6956 ;	ecen4330lab7.c:2248: break;
                                   6957 ;	ecen4330lab7.c:2249: case 0xFA:
      002136 80 14            [24] 6958 	sjmp	00111$
      002138                       6959 00106$:
                                   6960 ;	ecen4330lab7.c:2250: LCD_string_write("4800\n");
      002138 90r09rDC         [24] 6961 	mov	dptr,#___str_59
      00213B 75 F0 80         [24] 6962 	mov	b,#0x80
      00213E 12r09rC8         [24] 6963 	lcall	_LCD_string_write
                                   6964 ;	ecen4330lab7.c:2251: break;
                                   6965 ;	ecen4330lab7.c:2252: case 0xFD:
      002141 80 09            [24] 6966 	sjmp	00111$
      002143                       6967 00107$:
                                   6968 ;	ecen4330lab7.c:2253: LCD_string_write("9600\n");
      002143 90r09rE2         [24] 6969 	mov	dptr,#___str_60
      002146 75 F0 80         [24] 6970 	mov	b,#0x80
      002149 12r09rC8         [24] 6971 	lcall	_LCD_string_write
                                   6972 ;	ecen4330lab7.c:2255: }
      00214C                       6973 00111$:
                                   6974 ;	ecen4330lab7.c:2257: LCD_string_write("\n   _");
      00214C 90r09rE8         [24] 6975 	mov	dptr,#___str_61
      00214F 75 F0 80         [24] 6976 	mov	b,#0x80
      002152 12r09rC8         [24] 6977 	lcall	_LCD_string_write
                                   6978 ;	ecen4330lab7.c:2258: cursor_x -= 1 * textsize * 6;
      002155 E5*0C            [12] 6979 	mov	a,_textsize
      002157 75 F0 06         [24] 6980 	mov	b,#0x06
      00215A A4               [48] 6981 	mul	ab
      00215B FE               [12] 6982 	mov	r6,a
      00215C AF F0            [24] 6983 	mov	r7,b
      00215E E5*08            [12] 6984 	mov	a,_cursor_x
      002160 C3               [12] 6985 	clr	c
      002161 9E               [12] 6986 	subb	a,r6
      002162 F5*08            [12] 6987 	mov	_cursor_x,a
      002164 E5*09            [12] 6988 	mov	a,(_cursor_x + 1)
      002166 9F               [12] 6989 	subb	a,r7
      002167 F5*09            [12] 6990 	mov	(_cursor_x + 1),a
                                   6991 ;	ecen4330lab7.c:2259: key = keyDetect();
      002169 12r0Ar07         [24] 6992 	lcall	_keyDetect
      00216C 85 82*16         [24] 6993 	mov	_key,dpl
                                   6994 ;	ecen4330lab7.c:2260: switch (key){
      00216F 74 31            [12] 6995 	mov	a,#0x31
      002171 B5*16 02         [24] 6996 	cjne	a,_key,00184$
      002174 80 1F            [24] 6997 	sjmp	00112$
      002176                       6998 00184$:
      002176 74 32            [12] 6999 	mov	a,#0x32
      002178 B5*16 02         [24] 7000 	cjne	a,_key,00185$
      00217B 80 30            [24] 7001 	sjmp	00113$
      00217D                       7002 00185$:
      00217D 74 33            [12] 7003 	mov	a,#0x33
      00217F B5*16 02         [24] 7004 	cjne	a,_key,00186$
      002182 80 40            [24] 7005 	sjmp	00114$
      002184                       7006 00186$:
      002184 74 34            [12] 7007 	mov	a,#0x34
      002186 B5*16 02         [24] 7008 	cjne	a,_key,00187$
      002189 80 50            [24] 7009 	sjmp	00115$
      00218B                       7010 00187$:
      00218B 74 35            [12] 7011 	mov	a,#0x35
      00218D B5*16 02         [24] 7012 	cjne	a,_key,00188$
      002190 80 60            [24] 7013 	sjmp	00116$
      002192                       7014 00188$:
      002192 02r22r09         [24] 7015 	ljmp	00117$
                                   7016 ;	ecen4330lab7.c:2262: case '1':
      002195                       7017 00112$:
                                   7018 ;	ecen4330lab7.c:2263: validInput = 1;
      002195 75*1D 01         [24] 7019 	mov	_validInput,#0x01
                                   7020 ;	ecen4330lab7.c:2264: TH1 = 0xE8;
      002198 75 8D E8         [24] 7021 	mov	_TH1,#0xe8
                                   7022 ;	ecen4330lab7.c:2265: PCON = 0x00;
      00219B 75 87 00         [24] 7023 	mov	_PCON,#0x00
                                   7024 ;	ecen4330lab7.c:2266: dataEnd = 1;
      00219E 75*1E 01         [24] 7025 	mov	_dataEnd,#0x01
                                   7026 ;	ecen4330lab7.c:2267: LCD_string_write("1\n");
      0021A1 90r09rEE         [24] 7027 	mov	dptr,#___str_62
      0021A4 75 F0 80         [24] 7028 	mov	b,#0x80
      0021A7 12r09rC8         [24] 7029 	lcall	_LCD_string_write
                                   7030 ;	ecen4330lab7.c:2268: break;
      0021AA 02r22r1B         [24] 7031 	ljmp	00120$
                                   7032 ;	ecen4330lab7.c:2269: case '2':
      0021AD                       7033 00113$:
                                   7034 ;	ecen4330lab7.c:2270: validInput = 1;
      0021AD 75*1D 01         [24] 7035 	mov	_validInput,#0x01
                                   7036 ;	ecen4330lab7.c:2271: TH1 = 0xF4;
      0021B0 75 8D F4         [24] 7037 	mov	_TH1,#0xf4
                                   7038 ;	ecen4330lab7.c:2272: PCON = 0x00;
      0021B3 75 87 00         [24] 7039 	mov	_PCON,#0x00
                                   7040 ;	ecen4330lab7.c:2273: dataEnd = 1;
      0021B6 75*1E 01         [24] 7041 	mov	_dataEnd,#0x01
                                   7042 ;	ecen4330lab7.c:2274: LCD_string_write("2\n");
      0021B9 90r09rF1         [24] 7043 	mov	dptr,#___str_63
      0021BC 75 F0 80         [24] 7044 	mov	b,#0x80
      0021BF 12r09rC8         [24] 7045 	lcall	_LCD_string_write
                                   7046 ;	ecen4330lab7.c:2275: break;
                                   7047 ;	ecen4330lab7.c:2276: case '3':
      0021C2 80 57            [24] 7048 	sjmp	00120$
      0021C4                       7049 00114$:
                                   7050 ;	ecen4330lab7.c:2277: validInput = 1;
      0021C4 75*1D 01         [24] 7051 	mov	_validInput,#0x01
                                   7052 ;	ecen4330lab7.c:2278: TH1 = 0xFA;
      0021C7 75 8D FA         [24] 7053 	mov	_TH1,#0xfa
                                   7054 ;	ecen4330lab7.c:2279: PCON = 0x00;
      0021CA 75 87 00         [24] 7055 	mov	_PCON,#0x00
                                   7056 ;	ecen4330lab7.c:2280: dataEnd = 1;
      0021CD 75*1E 01         [24] 7057 	mov	_dataEnd,#0x01
                                   7058 ;	ecen4330lab7.c:2281: LCD_string_write("3\n");
      0021D0 90r09rF4         [24] 7059 	mov	dptr,#___str_64
      0021D3 75 F0 80         [24] 7060 	mov	b,#0x80
      0021D6 12r09rC8         [24] 7061 	lcall	_LCD_string_write
                                   7062 ;	ecen4330lab7.c:2282: break;
                                   7063 ;	ecen4330lab7.c:2283: case '4':
      0021D9 80 40            [24] 7064 	sjmp	00120$
      0021DB                       7065 00115$:
                                   7066 ;	ecen4330lab7.c:2284: validInput = 1;
      0021DB 75*1D 01         [24] 7067 	mov	_validInput,#0x01
                                   7068 ;	ecen4330lab7.c:2285: TH1 = 0xFD;
      0021DE 75 8D FD         [24] 7069 	mov	_TH1,#0xfd
                                   7070 ;	ecen4330lab7.c:2286: PCON = 0x00;
      0021E1 75 87 00         [24] 7071 	mov	_PCON,#0x00
                                   7072 ;	ecen4330lab7.c:2287: dataEnd = 1;
      0021E4 75*1E 01         [24] 7073 	mov	_dataEnd,#0x01
                                   7074 ;	ecen4330lab7.c:2288: LCD_string_write("4\n");
      0021E7 90r09rF7         [24] 7075 	mov	dptr,#___str_65
      0021EA 75 F0 80         [24] 7076 	mov	b,#0x80
      0021ED 12r09rC8         [24] 7077 	lcall	_LCD_string_write
                                   7078 ;	ecen4330lab7.c:2289: break;
                                   7079 ;	ecen4330lab7.c:2290: case '5':
      0021F0 80 29            [24] 7080 	sjmp	00120$
      0021F2                       7081 00116$:
                                   7082 ;	ecen4330lab7.c:2291: validInput = 1;
      0021F2 75*1D 01         [24] 7083 	mov	_validInput,#0x01
                                   7084 ;	ecen4330lab7.c:2292: TH1 = 0xFD;
      0021F5 75 8D FD         [24] 7085 	mov	_TH1,#0xfd
                                   7086 ;	ecen4330lab7.c:2293: PCON = 0x80;
      0021F8 75 87 80         [24] 7087 	mov	_PCON,#0x80
                                   7088 ;	ecen4330lab7.c:2294: dataEnd = 1;
      0021FB 75*1E 01         [24] 7089 	mov	_dataEnd,#0x01
                                   7090 ;	ecen4330lab7.c:2295: LCD_string_write("5\n");
      0021FE 90r09rFA         [24] 7091 	mov	dptr,#___str_66
      002201 75 F0 80         [24] 7092 	mov	b,#0x80
      002204 12r09rC8         [24] 7093 	lcall	_LCD_string_write
                                   7094 ;	ecen4330lab7.c:2296: break;
                                   7095 ;	ecen4330lab7.c:2297: default:
      002207 80 12            [24] 7096 	sjmp	00120$
      002209                       7097 00117$:
                                   7098 ;	ecen4330lab7.c:2298: validInput = 0;
      002209 75*1D 00         [24] 7099 	mov	_validInput,#0x00
                                   7100 ;	ecen4330lab7.c:2299: LCD_string_write("X\n");
      00220C 90r09rFD         [24] 7101 	mov	dptr,#___str_67
      00220F 75 F0 80         [24] 7102 	mov	b,#0x80
      002212 12r09rC8         [24] 7103 	lcall	_LCD_string_write
                                   7104 ;	ecen4330lab7.c:2300: invalidInput();
      002215 12r0Dr84         [24] 7105 	lcall	_invalidInput
                                   7106 ;	ecen4330lab7.c:2301: dataEnd = 0;
      002218 75*1E 00         [24] 7107 	mov	_dataEnd,#0x00
                                   7108 ;	ecen4330lab7.c:2303: }
      00221B                       7109 00120$:
                                   7110 ;	ecen4330lab7.c:2304: } while(!dataEnd);
      00221B E5*1E            [12] 7111 	mov	a,_dataEnd
      00221D 70 03            [24] 7112 	jnz	00189$
      00221F 02r20rB6         [24] 7113 	ljmp	00119$
      002222                       7114 00189$:
                                   7115 ;	ecen4330lab7.c:2305: delay(200);
      002222 90 00 C8         [24] 7116 	mov	dptr,#0x00c8
      002225 12r00r28         [24] 7117 	lcall	_delay
                                   7118 ;	ecen4330lab7.c:2306: resetLCD1();
      002228 12r20r8B         [24] 7119 	lcall	_resetLCD1
                                   7120 ;	ecen4330lab7.c:2307: setTextColor(WHITE, BLACK);
      00222B E4               [12] 7121 	clr	a
      00222C F5*00            [12] 7122 	mov	_setTextColor_PARM_2,a
      00222E F5*01            [12] 7123 	mov	(_setTextColor_PARM_2 + 1),a
      002230 90 FF FF         [24] 7124 	mov	dptr,#0xffff
      002233 12r02rD9         [24] 7125 	lcall	_setTextColor
                                   7126 ;	ecen4330lab7.c:2308: LCD_string_write("\nReturning to\nlast menu.");
      002236 90r0Ar00         [24] 7127 	mov	dptr,#___str_68
      002239 75 F0 80         [24] 7128 	mov	b,#0x80
      00223C 12r09rC8         [24] 7129 	lcall	_LCD_string_write
                                   7130 ;	ecen4330lab7.c:2309: delay(200);
      00223F 90 00 C8         [24] 7131 	mov	dptr,#0x00c8
                                   7132 ;	ecen4330lab7.c:2310: }
      002242 02r00r28         [24] 7133 	ljmp	_delay
                                   7134 ;------------------------------------------------------------
                                   7135 ;Allocation info for local variables in function 'UART_dataBits'
                                   7136 ;------------------------------------------------------------
                                   7137 ;	ecen4330lab7.c:2312: void UART_dataBits() {
                                   7138 ;	-----------------------------------------
                                   7139 ;	 function UART_dataBits
                                   7140 ;	-----------------------------------------
      002245                       7141 _UART_dataBits:
                                   7142 ;	ecen4330lab7.c:2313: resetLCD();
      002245 12r0Dr5C         [24] 7143 	lcall	_resetLCD
                                   7144 ;	ecen4330lab7.c:2314: do {
      002248                       7145 00108$:
                                   7146 ;	ecen4330lab7.c:2315: LCD_string_write("\nData Bits\n\n");
      002248 90r0Ar19         [24] 7147 	mov	dptr,#___str_69
      00224B 75 F0 80         [24] 7148 	mov	b,#0x80
      00224E 12r09rC8         [24] 7149 	lcall	_LCD_string_write
                                   7150 ;	ecen4330lab7.c:2316: LCD_string_write("(1) 8\n");
      002251 90r0Ar26         [24] 7151 	mov	dptr,#___str_70
      002254 75 F0 80         [24] 7152 	mov	b,#0x80
      002257 12r09rC8         [24] 7153 	lcall	_LCD_string_write
                                   7154 ;	ecen4330lab7.c:2317: LCD_string_write("(2) 9\n");
      00225A 90r0Ar2D         [24] 7155 	mov	dptr,#___str_71
      00225D 75 F0 80         [24] 7156 	mov	b,#0x80
      002260 12r09rC8         [24] 7157 	lcall	_LCD_string_write
                                   7158 ;	ecen4330lab7.c:2318: LCD_string_write("\nCurrent: ");
      002263 90r0Ar34         [24] 7159 	mov	dptr,#___str_72
      002266 75 F0 80         [24] 7160 	mov	b,#0x80
      002269 12r09rC8         [24] 7161 	lcall	_LCD_string_write
                                   7162 ;	ecen4330lab7.c:2319: switch(dataBits) {
      00226C E4               [12] 7163 	clr	a
      00226D B5*3F 02         [24] 7164 	cjne	a,_dataBits,00137$
      002270 80 07            [24] 7165 	sjmp	00101$
      002272                       7166 00137$:
      002272 74 01            [12] 7167 	mov	a,#0x01
                                   7168 ;	ecen4330lab7.c:2320: case 0:
      002274 B5*3F 16         [24] 7169 	cjne	a,_dataBits,00103$
      002277 80 0B            [24] 7170 	sjmp	00102$
      002279                       7171 00101$:
                                   7172 ;	ecen4330lab7.c:2321: LCD_string_write("8\n");
      002279 90r0Ar3F         [24] 7173 	mov	dptr,#___str_73
      00227C 75 F0 80         [24] 7174 	mov	b,#0x80
      00227F 12r09rC8         [24] 7175 	lcall	_LCD_string_write
                                   7176 ;	ecen4330lab7.c:2322: break;
                                   7177 ;	ecen4330lab7.c:2323: case 1:
      002282 80 09            [24] 7178 	sjmp	00103$
      002284                       7179 00102$:
                                   7180 ;	ecen4330lab7.c:2324: LCD_string_write("9\n");
      002284 90r0Ar42         [24] 7181 	mov	dptr,#___str_74
      002287 75 F0 80         [24] 7182 	mov	b,#0x80
      00228A 12r09rC8         [24] 7183 	lcall	_LCD_string_write
                                   7184 ;	ecen4330lab7.c:2326: }
      00228D                       7185 00103$:
                                   7186 ;	ecen4330lab7.c:2327: LCD_string_write("\n   _");
      00228D 90r09rE8         [24] 7187 	mov	dptr,#___str_61
      002290 75 F0 80         [24] 7188 	mov	b,#0x80
      002293 12r09rC8         [24] 7189 	lcall	_LCD_string_write
                                   7190 ;	ecen4330lab7.c:2328: cursor_x -= 1 * textsize * 6;
      002296 E5*0C            [12] 7191 	mov	a,_textsize
      002298 75 F0 06         [24] 7192 	mov	b,#0x06
      00229B A4               [48] 7193 	mul	ab
      00229C FE               [12] 7194 	mov	r6,a
      00229D AF F0            [24] 7195 	mov	r7,b
      00229F E5*08            [12] 7196 	mov	a,_cursor_x
      0022A1 C3               [12] 7197 	clr	c
      0022A2 9E               [12] 7198 	subb	a,r6
      0022A3 F5*08            [12] 7199 	mov	_cursor_x,a
      0022A5 E5*09            [12] 7200 	mov	a,(_cursor_x + 1)
      0022A7 9F               [12] 7201 	subb	a,r7
      0022A8 F5*09            [12] 7202 	mov	(_cursor_x + 1),a
                                   7203 ;	ecen4330lab7.c:2329: key = keyDetect();
      0022AA 12r0Ar07         [24] 7204 	lcall	_keyDetect
      0022AD 85 82*16         [24] 7205 	mov	_key,dpl
                                   7206 ;	ecen4330lab7.c:2330: switch (key){
      0022B0 74 31            [12] 7207 	mov	a,#0x31
      0022B2 B5*16 02         [24] 7208 	cjne	a,_key,00139$
      0022B5 80 07            [24] 7209 	sjmp	00104$
      0022B7                       7210 00139$:
      0022B7 74 32            [12] 7211 	mov	a,#0x32
                                   7212 ;	ecen4330lab7.c:2332: case '1':
      0022B9 B5*16 2A         [24] 7213 	cjne	a,_key,00106$
      0022BC 80 14            [24] 7214 	sjmp	00105$
      0022BE                       7215 00104$:
                                   7216 ;	ecen4330lab7.c:2333: validInput = 1;
      0022BE 75*1D 01         [24] 7217 	mov	_validInput,#0x01
                                   7218 ;	ecen4330lab7.c:2334: dataBits = 0;
      0022C1 75*3F 00         [24] 7219 	mov	_dataBits,#0x00
                                   7220 ;	ecen4330lab7.c:2335: dataEnd = 1;
      0022C4 75*1E 01         [24] 7221 	mov	_dataEnd,#0x01
                                   7222 ;	ecen4330lab7.c:2336: LCD_string_write("1\n");
      0022C7 90r09rEE         [24] 7223 	mov	dptr,#___str_62
      0022CA 75 F0 80         [24] 7224 	mov	b,#0x80
      0022CD 12r09rC8         [24] 7225 	lcall	_LCD_string_write
                                   7226 ;	ecen4330lab7.c:2337: break;
                                   7227 ;	ecen4330lab7.c:2338: case '2':
      0022D0 80 26            [24] 7228 	sjmp	00109$
      0022D2                       7229 00105$:
                                   7230 ;	ecen4330lab7.c:2339: validInput = 1;
      0022D2 75*1D 01         [24] 7231 	mov	_validInput,#0x01
                                   7232 ;	ecen4330lab7.c:2340: dataBits = 1;
      0022D5 75*3F 01         [24] 7233 	mov	_dataBits,#0x01
                                   7234 ;	ecen4330lab7.c:2341: dataEnd = 1;
      0022D8 75*1E 01         [24] 7235 	mov	_dataEnd,#0x01
                                   7236 ;	ecen4330lab7.c:2342: LCD_string_write("2\n");
      0022DB 90r09rF1         [24] 7237 	mov	dptr,#___str_63
      0022DE 75 F0 80         [24] 7238 	mov	b,#0x80
      0022E1 12r09rC8         [24] 7239 	lcall	_LCD_string_write
                                   7240 ;	ecen4330lab7.c:2343: break;
                                   7241 ;	ecen4330lab7.c:2344: default:
      0022E4 80 12            [24] 7242 	sjmp	00109$
      0022E6                       7243 00106$:
                                   7244 ;	ecen4330lab7.c:2345: validInput = 0;
      0022E6 75*1D 00         [24] 7245 	mov	_validInput,#0x00
                                   7246 ;	ecen4330lab7.c:2346: LCD_string_write("X\n");
      0022E9 90r09rFD         [24] 7247 	mov	dptr,#___str_67
      0022EC 75 F0 80         [24] 7248 	mov	b,#0x80
      0022EF 12r09rC8         [24] 7249 	lcall	_LCD_string_write
                                   7250 ;	ecen4330lab7.c:2347: invalidInput();
      0022F2 12r0Dr84         [24] 7251 	lcall	_invalidInput
                                   7252 ;	ecen4330lab7.c:2348: dataEnd = 0;
      0022F5 75*1E 00         [24] 7253 	mov	_dataEnd,#0x00
                                   7254 ;	ecen4330lab7.c:2350: }
      0022F8                       7255 00109$:
                                   7256 ;	ecen4330lab7.c:2351: } while(!dataEnd);
      0022F8 E5*1E            [12] 7257 	mov	a,_dataEnd
      0022FA 70 03            [24] 7258 	jnz	00141$
      0022FC 02r22r48         [24] 7259 	ljmp	00108$
      0022FF                       7260 00141$:
                                   7261 ;	ecen4330lab7.c:2352: delay(200);
      0022FF 90 00 C8         [24] 7262 	mov	dptr,#0x00c8
      002302 12r00r28         [24] 7263 	lcall	_delay
                                   7264 ;	ecen4330lab7.c:2353: resetLCD1();
      002305 12r20r8B         [24] 7265 	lcall	_resetLCD1
                                   7266 ;	ecen4330lab7.c:2354: setTextColor(WHITE, BLACK);
      002308 E4               [12] 7267 	clr	a
      002309 F5*00            [12] 7268 	mov	_setTextColor_PARM_2,a
      00230B F5*01            [12] 7269 	mov	(_setTextColor_PARM_2 + 1),a
      00230D 90 FF FF         [24] 7270 	mov	dptr,#0xffff
      002310 12r02rD9         [24] 7271 	lcall	_setTextColor
                                   7272 ;	ecen4330lab7.c:2355: LCD_string_write("\nReturning to\nlast menu.");
      002313 90r0Ar00         [24] 7273 	mov	dptr,#___str_68
      002316 75 F0 80         [24] 7274 	mov	b,#0x80
      002319 12r09rC8         [24] 7275 	lcall	_LCD_string_write
                                   7276 ;	ecen4330lab7.c:2356: delay(200);
      00231C 90 00 C8         [24] 7277 	mov	dptr,#0x00c8
                                   7278 ;	ecen4330lab7.c:2357: }
      00231F 02r00r28         [24] 7279 	ljmp	_delay
                                   7280 ;------------------------------------------------------------
                                   7281 ;Allocation info for local variables in function 'UART_parity'
                                   7282 ;------------------------------------------------------------
                                   7283 ;	ecen4330lab7.c:2360: void UART_parity() {
                                   7284 ;	-----------------------------------------
                                   7285 ;	 function UART_parity
                                   7286 ;	-----------------------------------------
      002322                       7287 _UART_parity:
                                   7288 ;	ecen4330lab7.c:2361: resetLCD();
      002322 12r0Dr5C         [24] 7289 	lcall	_resetLCD
                                   7290 ;	ecen4330lab7.c:2362: do {
      002325                       7291 00110$:
                                   7292 ;	ecen4330lab7.c:2363: LCD_string_write("\nParity\n\n");
      002325 90r0Ar45         [24] 7293 	mov	dptr,#___str_75
      002328 75 F0 80         [24] 7294 	mov	b,#0x80
      00232B 12r09rC8         [24] 7295 	lcall	_LCD_string_write
                                   7296 ;	ecen4330lab7.c:2364: LCD_string_write("(1) Even\n");
      00232E 90r0Ar4F         [24] 7297 	mov	dptr,#___str_76
      002331 75 F0 80         [24] 7298 	mov	b,#0x80
      002334 12r09rC8         [24] 7299 	lcall	_LCD_string_write
                                   7300 ;	ecen4330lab7.c:2365: LCD_string_write("(2) Odd\n");
      002337 90r0Ar59         [24] 7301 	mov	dptr,#___str_77
      00233A 75 F0 80         [24] 7302 	mov	b,#0x80
      00233D 12r09rC8         [24] 7303 	lcall	_LCD_string_write
                                   7304 ;	ecen4330lab7.c:2366: LCD_string_write("(3) None\n");
      002340 90r0Ar62         [24] 7305 	mov	dptr,#___str_78
      002343 75 F0 80         [24] 7306 	mov	b,#0x80
      002346 12r09rC8         [24] 7307 	lcall	_LCD_string_write
                                   7308 ;	ecen4330lab7.c:2367: LCD_string_write("\nCurrent: ");
      002349 90r0Ar34         [24] 7309 	mov	dptr,#___str_72
      00234C 75 F0 80         [24] 7310 	mov	b,#0x80
      00234F 12r09rC8         [24] 7311 	lcall	_LCD_string_write
                                   7312 ;	ecen4330lab7.c:2368: switch(parity) {
      002352 E4               [12] 7313 	clr	a
      002353 B5*40 02         [24] 7314 	cjne	a,_parity,00147$
      002356 80 0E            [24] 7315 	sjmp	00101$
      002358                       7316 00147$:
      002358 74 01            [12] 7317 	mov	a,#0x01
      00235A B5*40 02         [24] 7318 	cjne	a,_parity,00148$
      00235D 80 12            [24] 7319 	sjmp	00102$
      00235F                       7320 00148$:
      00235F 74 02            [12] 7321 	mov	a,#0x02
                                   7322 ;	ecen4330lab7.c:2369: case 0:
      002361 B5*40 21         [24] 7323 	cjne	a,_parity,00104$
      002364 80 16            [24] 7324 	sjmp	00103$
      002366                       7325 00101$:
                                   7326 ;	ecen4330lab7.c:2370: LCD_string_write("Even\n");
      002366 90r0Ar6C         [24] 7327 	mov	dptr,#___str_79
      002369 75 F0 80         [24] 7328 	mov	b,#0x80
      00236C 12r09rC8         [24] 7329 	lcall	_LCD_string_write
                                   7330 ;	ecen4330lab7.c:2371: break;
                                   7331 ;	ecen4330lab7.c:2372: case 1:
      00236F 80 14            [24] 7332 	sjmp	00104$
      002371                       7333 00102$:
                                   7334 ;	ecen4330lab7.c:2373: LCD_string_write("Odd\n");
      002371 90r0Ar72         [24] 7335 	mov	dptr,#___str_80
      002374 75 F0 80         [24] 7336 	mov	b,#0x80
      002377 12r09rC8         [24] 7337 	lcall	_LCD_string_write
                                   7338 ;	ecen4330lab7.c:2374: break;
                                   7339 ;	ecen4330lab7.c:2375: case 2:
      00237A 80 09            [24] 7340 	sjmp	00104$
      00237C                       7341 00103$:
                                   7342 ;	ecen4330lab7.c:2376: LCD_string_write("None\n");
      00237C 90r0Ar77         [24] 7343 	mov	dptr,#___str_81
      00237F 75 F0 80         [24] 7344 	mov	b,#0x80
      002382 12r09rC8         [24] 7345 	lcall	_LCD_string_write
                                   7346 ;	ecen4330lab7.c:2378: }
      002385                       7347 00104$:
                                   7348 ;	ecen4330lab7.c:2379: LCD_string_write("\n   _");
      002385 90r09rE8         [24] 7349 	mov	dptr,#___str_61
      002388 75 F0 80         [24] 7350 	mov	b,#0x80
      00238B 12r09rC8         [24] 7351 	lcall	_LCD_string_write
                                   7352 ;	ecen4330lab7.c:2380: cursor_x -= 1 * textsize * 6;
      00238E E5*0C            [12] 7353 	mov	a,_textsize
      002390 75 F0 06         [24] 7354 	mov	b,#0x06
      002393 A4               [48] 7355 	mul	ab
      002394 FE               [12] 7356 	mov	r6,a
      002395 AF F0            [24] 7357 	mov	r7,b
      002397 E5*08            [12] 7358 	mov	a,_cursor_x
      002399 C3               [12] 7359 	clr	c
      00239A 9E               [12] 7360 	subb	a,r6
      00239B F5*08            [12] 7361 	mov	_cursor_x,a
      00239D E5*09            [12] 7362 	mov	a,(_cursor_x + 1)
      00239F 9F               [12] 7363 	subb	a,r7
      0023A0 F5*09            [12] 7364 	mov	(_cursor_x + 1),a
                                   7365 ;	ecen4330lab7.c:2381: key = keyDetect();
      0023A2 12r0Ar07         [24] 7366 	lcall	_keyDetect
      0023A5 85 82*16         [24] 7367 	mov	_key,dpl
                                   7368 ;	ecen4330lab7.c:2382: switch (key){
      0023A8 74 31            [12] 7369 	mov	a,#0x31
      0023AA B5*16 02         [24] 7370 	cjne	a,_key,00150$
      0023AD 80 0E            [24] 7371 	sjmp	00105$
      0023AF                       7372 00150$:
      0023AF 74 32            [12] 7373 	mov	a,#0x32
      0023B1 B5*16 02         [24] 7374 	cjne	a,_key,00151$
      0023B4 80 1B            [24] 7375 	sjmp	00106$
      0023B6                       7376 00151$:
      0023B6 74 33            [12] 7377 	mov	a,#0x33
                                   7378 ;	ecen4330lab7.c:2384: case '1':
      0023B8 B5*16 3E         [24] 7379 	cjne	a,_key,00108$
      0023BB 80 28            [24] 7380 	sjmp	00107$
      0023BD                       7381 00105$:
                                   7382 ;	ecen4330lab7.c:2385: validInput = 1;
      0023BD 75*1D 01         [24] 7383 	mov	_validInput,#0x01
                                   7384 ;	ecen4330lab7.c:2386: parity = 0;
      0023C0 75*40 00         [24] 7385 	mov	_parity,#0x00
                                   7386 ;	ecen4330lab7.c:2387: dataEnd = 1;
      0023C3 75*1E 01         [24] 7387 	mov	_dataEnd,#0x01
                                   7388 ;	ecen4330lab7.c:2388: LCD_string_write("1\n");
      0023C6 90r09rEE         [24] 7389 	mov	dptr,#___str_62
      0023C9 75 F0 80         [24] 7390 	mov	b,#0x80
      0023CC 12r09rC8         [24] 7391 	lcall	_LCD_string_write
                                   7392 ;	ecen4330lab7.c:2389: break;
                                   7393 ;	ecen4330lab7.c:2390: case '2':
      0023CF 80 3A            [24] 7394 	sjmp	00111$
      0023D1                       7395 00106$:
                                   7396 ;	ecen4330lab7.c:2391: validInput = 1;
      0023D1 75*1D 01         [24] 7397 	mov	_validInput,#0x01
                                   7398 ;	ecen4330lab7.c:2392: parity = 1;
      0023D4 75*40 01         [24] 7399 	mov	_parity,#0x01
                                   7400 ;	ecen4330lab7.c:2393: dataEnd = 1;
      0023D7 75*1E 01         [24] 7401 	mov	_dataEnd,#0x01
                                   7402 ;	ecen4330lab7.c:2394: LCD_string_write("2\n");
      0023DA 90r09rF1         [24] 7403 	mov	dptr,#___str_63
      0023DD 75 F0 80         [24] 7404 	mov	b,#0x80
      0023E0 12r09rC8         [24] 7405 	lcall	_LCD_string_write
                                   7406 ;	ecen4330lab7.c:2395: break;
                                   7407 ;	ecen4330lab7.c:2396: case '3':
      0023E3 80 26            [24] 7408 	sjmp	00111$
      0023E5                       7409 00107$:
                                   7410 ;	ecen4330lab7.c:2397: validInput = 1;
      0023E5 75*1D 01         [24] 7411 	mov	_validInput,#0x01
                                   7412 ;	ecen4330lab7.c:2398: parity = 2;
      0023E8 75*40 02         [24] 7413 	mov	_parity,#0x02
                                   7414 ;	ecen4330lab7.c:2399: dataEnd = 1;
      0023EB 75*1E 01         [24] 7415 	mov	_dataEnd,#0x01
                                   7416 ;	ecen4330lab7.c:2400: LCD_string_write("3\n");
      0023EE 90r09rF4         [24] 7417 	mov	dptr,#___str_64
      0023F1 75 F0 80         [24] 7418 	mov	b,#0x80
      0023F4 12r09rC8         [24] 7419 	lcall	_LCD_string_write
                                   7420 ;	ecen4330lab7.c:2401: break;
                                   7421 ;	ecen4330lab7.c:2402: default:
      0023F7 80 12            [24] 7422 	sjmp	00111$
      0023F9                       7423 00108$:
                                   7424 ;	ecen4330lab7.c:2403: validInput = 0;
      0023F9 75*1D 00         [24] 7425 	mov	_validInput,#0x00
                                   7426 ;	ecen4330lab7.c:2404: LCD_string_write("X\n");
      0023FC 90r09rFD         [24] 7427 	mov	dptr,#___str_67
      0023FF 75 F0 80         [24] 7428 	mov	b,#0x80
      002402 12r09rC8         [24] 7429 	lcall	_LCD_string_write
                                   7430 ;	ecen4330lab7.c:2405: invalidInput();
      002405 12r0Dr84         [24] 7431 	lcall	_invalidInput
                                   7432 ;	ecen4330lab7.c:2406: dataEnd = 0;
      002408 75*1E 00         [24] 7433 	mov	_dataEnd,#0x00
                                   7434 ;	ecen4330lab7.c:2408: }
      00240B                       7435 00111$:
                                   7436 ;	ecen4330lab7.c:2409: } while(!dataEnd);
      00240B E5*1E            [12] 7437 	mov	a,_dataEnd
      00240D 70 03            [24] 7438 	jnz	00153$
      00240F 02r23r25         [24] 7439 	ljmp	00110$
      002412                       7440 00153$:
                                   7441 ;	ecen4330lab7.c:2410: delay(200);
      002412 90 00 C8         [24] 7442 	mov	dptr,#0x00c8
      002415 12r00r28         [24] 7443 	lcall	_delay
                                   7444 ;	ecen4330lab7.c:2411: resetLCD1();
      002418 12r20r8B         [24] 7445 	lcall	_resetLCD1
                                   7446 ;	ecen4330lab7.c:2412: setTextColor(WHITE, BLACK);
      00241B E4               [12] 7447 	clr	a
      00241C F5*00            [12] 7448 	mov	_setTextColor_PARM_2,a
      00241E F5*01            [12] 7449 	mov	(_setTextColor_PARM_2 + 1),a
      002420 90 FF FF         [24] 7450 	mov	dptr,#0xffff
      002423 12r02rD9         [24] 7451 	lcall	_setTextColor
                                   7452 ;	ecen4330lab7.c:2413: LCD_string_write("\nReturning to\nlast menu.");
      002426 90r0Ar00         [24] 7453 	mov	dptr,#___str_68
      002429 75 F0 80         [24] 7454 	mov	b,#0x80
      00242C 12r09rC8         [24] 7455 	lcall	_LCD_string_write
                                   7456 ;	ecen4330lab7.c:2414: delay(200);
      00242F 90 00 C8         [24] 7457 	mov	dptr,#0x00c8
                                   7458 ;	ecen4330lab7.c:2415: }
      002432 02r00r28         [24] 7459 	ljmp	_delay
                                   7460 ;------------------------------------------------------------
                                   7461 ;Allocation info for local variables in function 'UART_send'
                                   7462 ;------------------------------------------------------------
                                   7463 ;	ecen4330lab7.c:2417: void UART_send() {
                                   7464 ;	-----------------------------------------
                                   7465 ;	 function UART_send
                                   7466 ;	-----------------------------------------
      002435                       7467 _UART_send:
                                   7468 ;	ecen4330lab7.c:2418: resetLCD();
      002435 12r0Dr5C         [24] 7469 	lcall	_resetLCD
                                   7470 ;	ecen4330lab7.c:2419: LCD_string_write("\nEnter\ncharacter\nto send:\n\n   _");
      002438 90r0Ar7D         [24] 7471 	mov	dptr,#___str_82
      00243B 75 F0 80         [24] 7472 	mov	b,#0x80
      00243E 12r09rC8         [24] 7473 	lcall	_LCD_string_write
                                   7474 ;	ecen4330lab7.c:2421: cursor_x -= 1 * textsize * 6;
      002441 E5*0C            [12] 7475 	mov	a,_textsize
      002443 75 F0 06         [24] 7476 	mov	b,#0x06
      002446 A4               [48] 7477 	mul	ab
      002447 FE               [12] 7478 	mov	r6,a
      002448 AF F0            [24] 7479 	mov	r7,b
      00244A E5*08            [12] 7480 	mov	a,_cursor_x
      00244C C3               [12] 7481 	clr	c
      00244D 9E               [12] 7482 	subb	a,r6
      00244E F5*08            [12] 7483 	mov	_cursor_x,a
      002450 E5*09            [12] 7484 	mov	a,(_cursor_x + 1)
      002452 9F               [12] 7485 	subb	a,r7
      002453 F5*09            [12] 7486 	mov	(_cursor_x + 1),a
                                   7487 ;	ecen4330lab7.c:2422: key = keyDetect();
      002455 12r0Ar07         [24] 7488 	lcall	_keyDetect
                                   7489 ;	ecen4330lab7.c:2423: write(key);
      002458 85 82*16         [24] 7490 	mov  _key,dpl
      00245B 12r09r62         [24] 7491 	lcall	_write
                                   7492 ;	ecen4330lab7.c:2424: delay(200);
      00245E 90 00 C8         [24] 7493 	mov	dptr,#0x00c8
      002461 12r00r28         [24] 7494 	lcall	_delay
                                   7495 ;	ecen4330lab7.c:2425: resetLCD();
                                   7496 ;	ecen4330lab7.c:2426: }
      002464 02r0Dr5C         [24] 7497 	ljmp	_resetLCD
                                   7498 ;------------------------------------------------------------
                                   7499 ;Allocation info for local variables in function 'UART'
                                   7500 ;------------------------------------------------------------
                                   7501 ;	ecen4330lab7.c:2434: void UART(){
                                   7502 ;	-----------------------------------------
                                   7503 ;	 function UART
                                   7504 ;	-----------------------------------------
      002467                       7505 _UART:
                                   7506 ;	ecen4330lab7.c:2435: do{
      002467                       7507 00108$:
                                   7508 ;	ecen4330lab7.c:2436: resetLCD();
      002467 12r0Dr5C         [24] 7509 	lcall	_resetLCD
                                   7510 ;	ecen4330lab7.c:2437: LCD_string_write("\n(1) Data Rate");
      00246A 90r0Ar9D         [24] 7511 	mov	dptr,#___str_83
      00246D 75 F0 80         [24] 7512 	mov	b,#0x80
      002470 12r09rC8         [24] 7513 	lcall	_LCD_string_write
                                   7514 ;	ecen4330lab7.c:2438: LCD_string_write("\n(2) # of Data\n    Bits");
      002473 90r0ArAC         [24] 7515 	mov	dptr,#___str_84
      002476 75 F0 80         [24] 7516 	mov	b,#0x80
      002479 12r09rC8         [24] 7517 	lcall	_LCD_string_write
                                   7518 ;	ecen4330lab7.c:2439: LCD_string_write("\n(3) Parity");
      00247C 90r0ArC4         [24] 7519 	mov	dptr,#___str_85
      00247F 75 F0 80         [24] 7520 	mov	b,#0x80
      002482 12r09rC8         [24] 7521 	lcall	_LCD_string_write
                                   7522 ;	ecen4330lab7.c:2440: LCD_string_write("\n(4) Send Data");
      002485 90r0ArD0         [24] 7523 	mov	dptr,#___str_86
      002488 75 F0 80         [24] 7524 	mov	b,#0x80
      00248B 12r09rC8         [24] 7525 	lcall	_LCD_string_write
                                   7526 ;	ecen4330lab7.c:2441: LCD_string_write("\n(E) End\n");
      00248E 90r0ArDF         [24] 7527 	mov	dptr,#___str_87
      002491 75 F0 80         [24] 7528 	mov	b,#0x80
      002494 12r09rC8         [24] 7529 	lcall	_LCD_string_write
                                   7530 ;	ecen4330lab7.c:2443: key = keyDetect();
      002497 12r0Ar07         [24] 7531 	lcall	_keyDetect
      00249A 85 82*16         [24] 7532 	mov	_key,dpl
                                   7533 ;	ecen4330lab7.c:2444: switch (key){
      00249D 74 31            [12] 7534 	mov	a,#0x31
      00249F B5*16 02         [24] 7535 	cjne	a,_key,00137$
      0024A2 80 1C            [24] 7536 	sjmp	00101$
      0024A4                       7537 00137$:
      0024A4 74 32            [12] 7538 	mov	a,#0x32
      0024A6 B5*16 02         [24] 7539 	cjne	a,_key,00138$
      0024A9 80 1D            [24] 7540 	sjmp	00102$
      0024AB                       7541 00138$:
      0024AB 74 33            [12] 7542 	mov	a,#0x33
      0024AD B5*16 02         [24] 7543 	cjne	a,_key,00139$
      0024B0 80 1E            [24] 7544 	sjmp	00103$
      0024B2                       7545 00139$:
      0024B2 74 34            [12] 7546 	mov	a,#0x34
      0024B4 B5*16 02         [24] 7547 	cjne	a,_key,00140$
      0024B7 80 1F            [24] 7548 	sjmp	00104$
      0024B9                       7549 00140$:
      0024B9 74 45            [12] 7550 	mov	a,#0x45
                                   7551 ;	ecen4330lab7.c:2446: case '1':
      0024BB B5*16 44         [24] 7552 	cjne	a,_key,00106$
      0024BE 80 20            [24] 7553 	sjmp	00105$
      0024C0                       7554 00101$:
                                   7555 ;	ecen4330lab7.c:2447: UART_dataRate();
      0024C0 12r20rB3         [24] 7556 	lcall	_UART_dataRate
                                   7557 ;	ecen4330lab7.c:2448: dataEnd = 0;
      0024C3 75*1E 00         [24] 7558 	mov	_dataEnd,#0x00
                                   7559 ;	ecen4330lab7.c:2449: break;
                                   7560 ;	ecen4330lab7.c:2450: case '2':
      0024C6 80 40            [24] 7561 	sjmp	00109$
      0024C8                       7562 00102$:
                                   7563 ;	ecen4330lab7.c:2451: UART_dataBits();
      0024C8 12r22r45         [24] 7564 	lcall	_UART_dataBits
                                   7565 ;	ecen4330lab7.c:2452: dataEnd = 0;
      0024CB 75*1E 00         [24] 7566 	mov	_dataEnd,#0x00
                                   7567 ;	ecen4330lab7.c:2453: break;
                                   7568 ;	ecen4330lab7.c:2454: case '3':
      0024CE 80 38            [24] 7569 	sjmp	00109$
      0024D0                       7570 00103$:
                                   7571 ;	ecen4330lab7.c:2455: UART_parity();
      0024D0 12r23r22         [24] 7572 	lcall	_UART_parity
                                   7573 ;	ecen4330lab7.c:2456: dataEnd = 0;
      0024D3 75*1E 00         [24] 7574 	mov	_dataEnd,#0x00
                                   7575 ;	ecen4330lab7.c:2457: break;
                                   7576 ;	ecen4330lab7.c:2458: case '4':
      0024D6 80 30            [24] 7577 	sjmp	00109$
      0024D8                       7578 00104$:
                                   7579 ;	ecen4330lab7.c:2459: UART_send();
      0024D8 12r24r35         [24] 7580 	lcall	_UART_send
                                   7581 ;	ecen4330lab7.c:2460: dataEnd = 0;
      0024DB 75*1E 00         [24] 7582 	mov	_dataEnd,#0x00
                                   7583 ;	ecen4330lab7.c:2461: break;
                                   7584 ;	ecen4330lab7.c:2462: case 'E':
      0024DE 80 28            [24] 7585 	sjmp	00109$
      0024E0                       7586 00105$:
                                   7587 ;	ecen4330lab7.c:2463: resetLCD1();
      0024E0 12r20r8B         [24] 7588 	lcall	_resetLCD1
                                   7589 ;	ecen4330lab7.c:2464: setTextColor(WHITE, BLACK);
      0024E3 E4               [12] 7590 	clr	a
      0024E4 F5*00            [12] 7591 	mov	_setTextColor_PARM_2,a
      0024E6 F5*01            [12] 7592 	mov	(_setTextColor_PARM_2 + 1),a
      0024E8 90 FF FF         [24] 7593 	mov	dptr,#0xffff
      0024EB 12r02rD9         [24] 7594 	lcall	_setTextColor
                                   7595 ;	ecen4330lab7.c:2465: LCD_string_write("\nReturning to\nmain menu.");
      0024EE 90r08rD2         [24] 7596 	mov	dptr,#___str_43
      0024F1 75 F0 80         [24] 7597 	mov	b,#0x80
      0024F4 12r09rC8         [24] 7598 	lcall	_LCD_string_write
                                   7599 ;	ecen4330lab7.c:2466: delay(200);
      0024F7 90 00 C8         [24] 7600 	mov	dptr,#0x00c8
      0024FA 12r00r28         [24] 7601 	lcall	_delay
                                   7602 ;	ecen4330lab7.c:2467: dataEnd = 1;
      0024FD 75*1E 01         [24] 7603 	mov	_dataEnd,#0x01
                                   7604 ;	ecen4330lab7.c:2468: break;
                                   7605 ;	ecen4330lab7.c:2469: default:
      002500 80 06            [24] 7606 	sjmp	00109$
      002502                       7607 00106$:
                                   7608 ;	ecen4330lab7.c:2470: invalidInput();
      002502 12r0Dr84         [24] 7609 	lcall	_invalidInput
                                   7610 ;	ecen4330lab7.c:2471: dataEnd = 0;
      002505 75*1E 00         [24] 7611 	mov	_dataEnd,#0x00
                                   7612 ;	ecen4330lab7.c:2473: }
      002508                       7613 00109$:
                                   7614 ;	ecen4330lab7.c:2474: } while(dataEnd == 0);
      002508 E5*1E            [12] 7615 	mov	a,_dataEnd
      00250A 70 03            [24] 7616 	jnz	00142$
      00250C 02r24r67         [24] 7617 	ljmp	00108$
      00250F                       7618 00142$:
                                   7619 ;	ecen4330lab7.c:2475: }
      00250F 22               [24] 7620 	ret
                                   7621 ;------------------------------------------------------------
                                   7622 ;Allocation info for local variables in function 'LCD_mainMenu'
                                   7623 ;------------------------------------------------------------
                                   7624 ;__1310720043              Allocated to registers 
                                   7625 ;__1310720044              Allocated to registers 
                                   7626 ;map_address               Allocated to registers 
                                   7627 ;d                         Allocated to registers 
                                   7628 ;__1966080046              Allocated to registers 
                                   7629 ;__1966080047              Allocated to registers 
                                   7630 ;map_address               Allocated to registers 
                                   7631 ;d                         Allocated to registers 
                                   7632 ;__1966080049              Allocated to registers 
                                   7633 ;__1966080050              Allocated to registers 
                                   7634 ;map_address               Allocated to registers 
                                   7635 ;d                         Allocated to registers 
                                   7636 ;__1966080052              Allocated to registers 
                                   7637 ;__1966080053              Allocated to registers 
                                   7638 ;map_address               Allocated to registers 
                                   7639 ;d                         Allocated to registers 
                                   7640 ;__1966080055              Allocated to registers 
                                   7641 ;__1966080056              Allocated to registers 
                                   7642 ;map_address               Allocated to registers 
                                   7643 ;d                         Allocated to registers 
                                   7644 ;__1966080058              Allocated to registers 
                                   7645 ;__1966080059              Allocated to registers 
                                   7646 ;map_address               Allocated to registers 
                                   7647 ;d                         Allocated to registers 
                                   7648 ;__1966080061              Allocated to registers 
                                   7649 ;__1966080062              Allocated to registers 
                                   7650 ;map_address               Allocated to registers 
                                   7651 ;d                         Allocated to registers 
                                   7652 ;__1966080064              Allocated to registers 
                                   7653 ;__1966080065              Allocated to registers 
                                   7654 ;map_address               Allocated to registers 
                                   7655 ;d                         Allocated to registers 
                                   7656 ;__1966080067              Allocated to registers 
                                   7657 ;__1966080068              Allocated to registers 
                                   7658 ;map_address               Allocated to registers 
                                   7659 ;d                         Allocated to registers 
                                   7660 ;------------------------------------------------------------
                                   7661 ;	ecen4330lab7.c:2499: void LCD_mainMenu() {
                                   7662 ;	-----------------------------------------
                                   7663 ;	 function LCD_mainMenu
                                   7664 ;	-----------------------------------------
      002510                       7665 _LCD_mainMenu:
                                   7666 ;	ecen4330lab7.c:2501: key = 0;
      002510 75*16 00         [24] 7667 	mov	_key,#0x00
                                   7668 ;	ecen4330lab7.c:2502: iowrite8(seg7_address, 0xC0);
      002513 85*04 82         [24] 7669 	mov	dpl,_seg7_address
      002516 85*05 83         [24] 7670 	mov	dph,(_seg7_address + 1)
                                   7671 ;	ecen4330lab7.c:178: IOM = 1;
                                   7672 ;	assignBit
      002519 D2 B4            [12] 7673 	setb	_P3_4
                                   7674 ;	ecen4330lab7.c:179: *map_address = d;
      00251B 74 C0            [12] 7675 	mov	a,#0xc0
      00251D F0               [24] 7676 	movx	@dptr,a
                                   7677 ;	ecen4330lab7.c:180: IOM = 0;
                                   7678 ;	assignBit
      00251E C2 B4            [12] 7679 	clr	_P3_4
                                   7680 ;	ecen4330lab7.c:2505: resetLCD();
      002520 12r0Dr5C         [24] 7681 	lcall	_resetLCD
                                   7682 ;	ecen4330lab7.c:2506: setTextColor(GREEN, BLACK);
      002523 E4               [12] 7683 	clr	a
      002524 F5*00            [12] 7684 	mov	_setTextColor_PARM_2,a
      002526 F5*01            [12] 7685 	mov	(_setTextColor_PARM_2 + 1),a
      002528 90 07 E0         [24] 7686 	mov	dptr,#0x07e0
      00252B 12r02rD9         [24] 7687 	lcall	_setTextColor
                                   7688 ;	ecen4330lab7.c:2507: LCD_string_write("   Cameron\n   Biniamow\n");
      00252E 90r0ArE9         [24] 7689 	mov	dptr,#___str_88
      002531 75 F0 80         [24] 7690 	mov	b,#0x80
      002534 12r09rC8         [24] 7691 	lcall	_LCD_string_write
                                   7692 ;	ecen4330lab7.c:2508: LCD_string_write("  ECEN-4330\n\n");
      002537 90r0Br01         [24] 7693 	mov	dptr,#___str_89
      00253A 75 F0 80         [24] 7694 	mov	b,#0x80
      00253D 12r09rC8         [24] 7695 	lcall	_LCD_string_write
                                   7696 ;	ecen4330lab7.c:2511: setTextColor(WHITE, BLACK);
      002540 E4               [12] 7697 	clr	a
      002541 F5*00            [12] 7698 	mov	_setTextColor_PARM_2,a
      002543 F5*01            [12] 7699 	mov	(_setTextColor_PARM_2 + 1),a
      002545 90 FF FF         [24] 7700 	mov	dptr,#0xffff
      002548 12r02rD9         [24] 7701 	lcall	_setTextColor
                                   7702 ;	ecen4330lab7.c:2512: LCD_string_write("(A) RAM CHECK\n");
      00254B 90r0Br0F         [24] 7703 	mov	dptr,#___str_90
      00254E 75 F0 80         [24] 7704 	mov	b,#0x80
      002551 12r09rC8         [24] 7705 	lcall	_LCD_string_write
                                   7706 ;	ecen4330lab7.c:2513: LCD_string_write("(B) MOVE\n");
      002554 90r0Br1E         [24] 7707 	mov	dptr,#___str_91
      002557 75 F0 80         [24] 7708 	mov	b,#0x80
      00255A 12r09rC8         [24] 7709 	lcall	_LCD_string_write
                                   7710 ;	ecen4330lab7.c:2514: LCD_string_write("(C) COUNT\n");
      00255D 90r0Br28         [24] 7711 	mov	dptr,#___str_92
      002560 75 F0 80         [24] 7712 	mov	b,#0x80
      002563 12r09rC8         [24] 7713 	lcall	_LCD_string_write
                                   7714 ;	ecen4330lab7.c:2515: LCD_string_write("(D) DUMP\n");
      002566 90r0Br33         [24] 7715 	mov	dptr,#___str_93
      002569 75 F0 80         [24] 7716 	mov	b,#0x80
      00256C 12r09rC8         [24] 7717 	lcall	_LCD_string_write
                                   7718 ;	ecen4330lab7.c:2516: LCD_string_write("(E) EDIT\n");
      00256F 90r0Br3D         [24] 7719 	mov	dptr,#___str_94
      002572 75 F0 80         [24] 7720 	mov	b,#0x80
      002575 12r09rC8         [24] 7721 	lcall	_LCD_string_write
                                   7722 ;	ecen4330lab7.c:2517: LCD_string_write("(F) FIND\n");
      002578 90r0Br47         [24] 7723 	mov	dptr,#___str_95
      00257B 75 F0 80         [24] 7724 	mov	b,#0x80
      00257E 12r09rC8         [24] 7725 	lcall	_LCD_string_write
                                   7726 ;	ecen4330lab7.c:2519: LCD_string_write("(1) UART\n");
      002581 90r0Br51         [24] 7727 	mov	dptr,#___str_96
      002584 75 F0 80         [24] 7728 	mov	b,#0x80
      002587 12r09rC8         [24] 7729 	lcall	_LCD_string_write
                                   7730 ;	ecen4330lab7.c:2520: setTextColor(WHITE, BLACK);
      00258A E4               [12] 7731 	clr	a
      00258B F5*00            [12] 7732 	mov	_setTextColor_PARM_2,a
      00258D F5*01            [12] 7733 	mov	(_setTextColor_PARM_2 + 1),a
      00258F 90 FF FF         [24] 7734 	mov	dptr,#0xffff
      002592 12r02rD9         [24] 7735 	lcall	_setTextColor
                                   7736 ;	ecen4330lab7.c:2521: setTextSize(1);
      002595 75 82 01         [24] 7737 	mov	dpl,#0x01
      002598 12r02rE6         [24] 7738 	lcall	_setTextSize
                                   7739 ;	ecen4330lab7.c:2522: setCursor(3, 304);
      00259B 75*00 30         [24] 7740 	mov	_setCursor_PARM_2,#0x30
      00259E 75*01 01         [24] 7741 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025A1 90 00 03         [24] 7742 	mov	dptr,#0x0003
      0025A4 12r02rCC         [24] 7743 	lcall	_setCursor
                                   7744 ;	ecen4330lab7.c:2523: LCD_string_write("Spring 2021");
      0025A7 90r0Br5B         [24] 7745 	mov	dptr,#___str_97
      0025AA 75 F0 80         [24] 7746 	mov	b,#0x80
      0025AD 12r09rC8         [24] 7747 	lcall	_LCD_string_write
                                   7748 ;	ecen4330lab7.c:2524: rtcPrint();
      0025B0 12r01r70         [24] 7749 	lcall	_rtcPrint
                                   7750 ;	ecen4330lab7.c:2527: key = keyDetect();
      0025B3 12r0Ar07         [24] 7751 	lcall	_keyDetect
      0025B6 85 82*16         [24] 7752 	mov	_key,dpl
                                   7753 ;	ecen4330lab7.c:2528: switch (key)
      0025B9 74 31            [12] 7754 	mov	a,#0x31
      0025BB B5*16 03         [24] 7755 	cjne	a,_key,00149$
      0025BE 02r26r4E         [24] 7756 	ljmp	00107$
      0025C1                       7757 00149$:
      0025C1 74 41            [12] 7758 	mov	a,#0x41
      0025C3 B5*16 02         [24] 7759 	cjne	a,_key,00150$
      0025C6 80 26            [24] 7760 	sjmp	00101$
      0025C8                       7761 00150$:
      0025C8 74 42            [12] 7762 	mov	a,#0x42
      0025CA B5*16 02         [24] 7763 	cjne	a,_key,00151$
      0025CD 80 2F            [24] 7764 	sjmp	00102$
      0025CF                       7765 00151$:
      0025CF 74 43            [12] 7766 	mov	a,#0x43
      0025D1 B5*16 02         [24] 7767 	cjne	a,_key,00152$
      0025D4 80 38            [24] 7768 	sjmp	00103$
      0025D6                       7769 00152$:
      0025D6 74 44            [12] 7770 	mov	a,#0x44
      0025D8 B5*16 02         [24] 7771 	cjne	a,_key,00153$
      0025DB 80 41            [24] 7772 	sjmp	00104$
      0025DD                       7773 00153$:
      0025DD 74 45            [12] 7774 	mov	a,#0x45
      0025DF B5*16 02         [24] 7775 	cjne	a,_key,00154$
      0025E2 80 4A            [24] 7776 	sjmp	00105$
      0025E4                       7777 00154$:
      0025E4 74 46            [12] 7778 	mov	a,#0x46
      0025E6 B5*16 02         [24] 7779 	cjne	a,_key,00155$
      0025E9 80 53            [24] 7780 	sjmp	00106$
      0025EB                       7781 00155$:
      0025EB 02r26r5E         [24] 7782 	ljmp	00108$
                                   7783 ;	ecen4330lab7.c:2530: case 'A':
      0025EE                       7784 00101$:
                                   7785 ;	ecen4330lab7.c:2531: iowrite8(seg7_address, 0x88);
      0025EE 85*04 82         [24] 7786 	mov	dpl,_seg7_address
      0025F1 85*05 83         [24] 7787 	mov	dph,(_seg7_address + 1)
                                   7788 ;	ecen4330lab7.c:178: IOM = 1;
                                   7789 ;	assignBit
      0025F4 D2 B4            [12] 7790 	setb	_P3_4
                                   7791 ;	ecen4330lab7.c:179: *map_address = d;
      0025F6 74 88            [12] 7792 	mov	a,#0x88
      0025F8 F0               [24] 7793 	movx	@dptr,a
                                   7794 ;	ecen4330lab7.c:180: IOM = 0;
                                   7795 ;	assignBit
      0025F9 C2 B4            [12] 7796 	clr	_P3_4
                                   7797 ;	ecen4330lab7.c:2532: RAM_CHECK();
                                   7798 ;	ecen4330lab7.c:2533: break;
      0025FB 02r10rB0         [24] 7799 	ljmp	_RAM_CHECK
                                   7800 ;	ecen4330lab7.c:2534: case 'B':
      0025FE                       7801 00102$:
                                   7802 ;	ecen4330lab7.c:2535: iowrite8(seg7_address, 0x83);
      0025FE 85*04 82         [24] 7803 	mov	dpl,_seg7_address
      002601 85*05 83         [24] 7804 	mov	dph,(_seg7_address + 1)
                                   7805 ;	ecen4330lab7.c:178: IOM = 1;
                                   7806 ;	assignBit
      002604 D2 B4            [12] 7807 	setb	_P3_4
                                   7808 ;	ecen4330lab7.c:179: *map_address = d;
      002606 74 83            [12] 7809 	mov	a,#0x83
      002608 F0               [24] 7810 	movx	@dptr,a
                                   7811 ;	ecen4330lab7.c:180: IOM = 0;
                                   7812 ;	assignBit
      002609 C2 B4            [12] 7813 	clr	_P3_4
                                   7814 ;	ecen4330lab7.c:2536: MOVE();
                                   7815 ;	ecen4330lab7.c:2537: break;
                                   7816 ;	ecen4330lab7.c:2538: case 'C':
      00260B 02r12rE9         [24] 7817 	ljmp	_MOVE
      00260E                       7818 00103$:
                                   7819 ;	ecen4330lab7.c:2539: iowrite8(seg7_address, 0xC6);
      00260E 85*04 82         [24] 7820 	mov	dpl,_seg7_address
      002611 85*05 83         [24] 7821 	mov	dph,(_seg7_address + 1)
                                   7822 ;	ecen4330lab7.c:178: IOM = 1;
                                   7823 ;	assignBit
      002614 D2 B4            [12] 7824 	setb	_P3_4
                                   7825 ;	ecen4330lab7.c:179: *map_address = d;
      002616 74 C6            [12] 7826 	mov	a,#0xc6
      002618 F0               [24] 7827 	movx	@dptr,a
                                   7828 ;	ecen4330lab7.c:180: IOM = 0;
                                   7829 ;	assignBit
      002619 C2 B4            [12] 7830 	clr	_P3_4
                                   7831 ;	ecen4330lab7.c:2540: COUNT();
                                   7832 ;	ecen4330lab7.c:2541: break;
                                   7833 ;	ecen4330lab7.c:2542: case 'D':
      00261B 02r15r05         [24] 7834 	ljmp	_COUNT
      00261E                       7835 00104$:
                                   7836 ;	ecen4330lab7.c:2543: iowrite8(seg7_address, 0xA1);
      00261E 85*04 82         [24] 7837 	mov	dpl,_seg7_address
      002621 85*05 83         [24] 7838 	mov	dph,(_seg7_address + 1)
                                   7839 ;	ecen4330lab7.c:178: IOM = 1;
                                   7840 ;	assignBit
      002624 D2 B4            [12] 7841 	setb	_P3_4
                                   7842 ;	ecen4330lab7.c:179: *map_address = d;
      002626 74 A1            [12] 7843 	mov	a,#0xa1
      002628 F0               [24] 7844 	movx	@dptr,a
                                   7845 ;	ecen4330lab7.c:180: IOM = 0;
                                   7846 ;	assignBit
      002629 C2 B4            [12] 7847 	clr	_P3_4
                                   7848 ;	ecen4330lab7.c:2544: DUMP();
                                   7849 ;	ecen4330lab7.c:2545: break;
                                   7850 ;	ecen4330lab7.c:2546: case 'E':
      00262B 02r1ArB3         [24] 7851 	ljmp	_DUMP
      00262E                       7852 00105$:
                                   7853 ;	ecen4330lab7.c:2547: iowrite8(seg7_address, 0x86);
      00262E 85*04 82         [24] 7854 	mov	dpl,_seg7_address
      002631 85*05 83         [24] 7855 	mov	dph,(_seg7_address + 1)
                                   7856 ;	ecen4330lab7.c:178: IOM = 1;
                                   7857 ;	assignBit
      002634 D2 B4            [12] 7858 	setb	_P3_4
                                   7859 ;	ecen4330lab7.c:179: *map_address = d;
      002636 74 86            [12] 7860 	mov	a,#0x86
      002638 F0               [24] 7861 	movx	@dptr,a
                                   7862 ;	ecen4330lab7.c:180: IOM = 0;
                                   7863 ;	assignBit
      002639 C2 B4            [12] 7864 	clr	_P3_4
                                   7865 ;	ecen4330lab7.c:2548: EDIT();
                                   7866 ;	ecen4330lab7.c:2549: break;
                                   7867 ;	ecen4330lab7.c:2550: case 'F':
      00263B 02r1Cr1D         [24] 7868 	ljmp	_EDIT
      00263E                       7869 00106$:
                                   7870 ;	ecen4330lab7.c:2551: iowrite8(seg7_address, 0x8E);
      00263E 85*04 82         [24] 7871 	mov	dpl,_seg7_address
      002641 85*05 83         [24] 7872 	mov	dph,(_seg7_address + 1)
                                   7873 ;	ecen4330lab7.c:178: IOM = 1;
                                   7874 ;	assignBit
      002644 D2 B4            [12] 7875 	setb	_P3_4
                                   7876 ;	ecen4330lab7.c:179: *map_address = d;
      002646 74 8E            [12] 7877 	mov	a,#0x8e
      002648 F0               [24] 7878 	movx	@dptr,a
                                   7879 ;	ecen4330lab7.c:180: IOM = 0;
                                   7880 ;	assignBit
      002649 C2 B4            [12] 7881 	clr	_P3_4
                                   7882 ;	ecen4330lab7.c:2552: FIND();
                                   7883 ;	ecen4330lab7.c:2553: break;
                                   7884 ;	ecen4330lab7.c:2554: case '1':
      00264B 02r1FrCA         [24] 7885 	ljmp	_FIND
      00264E                       7886 00107$:
                                   7887 ;	ecen4330lab7.c:2555: iowrite8(seg7_address, 0xF9);
      00264E 85*04 82         [24] 7888 	mov	dpl,_seg7_address
      002651 85*05 83         [24] 7889 	mov	dph,(_seg7_address + 1)
                                   7890 ;	ecen4330lab7.c:178: IOM = 1;
                                   7891 ;	assignBit
      002654 D2 B4            [12] 7892 	setb	_P3_4
                                   7893 ;	ecen4330lab7.c:179: *map_address = d;
      002656 74 F9            [12] 7894 	mov	a,#0xf9
      002658 F0               [24] 7895 	movx	@dptr,a
                                   7896 ;	ecen4330lab7.c:180: IOM = 0;
                                   7897 ;	assignBit
      002659 C2 B4            [12] 7898 	clr	_P3_4
                                   7899 ;	ecen4330lab7.c:2556: UART();
                                   7900 ;	ecen4330lab7.c:2557: break;
                                   7901 ;	ecen4330lab7.c:2563: default:
      00265B 02r24r67         [24] 7902 	ljmp	_UART
      00265E                       7903 00108$:
                                   7904 ;	ecen4330lab7.c:2564: iowrite8(seg7_address, 0xFF);
      00265E 85*04 82         [24] 7905 	mov	dpl,_seg7_address
      002661 85*05 83         [24] 7906 	mov	dph,(_seg7_address + 1)
                                   7907 ;	ecen4330lab7.c:178: IOM = 1;
                                   7908 ;	assignBit
      002664 D2 B4            [12] 7909 	setb	_P3_4
                                   7910 ;	ecen4330lab7.c:179: *map_address = d;
      002666 74 FF            [12] 7911 	mov	a,#0xff
      002668 F0               [24] 7912 	movx	@dptr,a
                                   7913 ;	ecen4330lab7.c:180: IOM = 0;
                                   7914 ;	assignBit
      002669 C2 B4            [12] 7915 	clr	_P3_4
                                   7916 ;	ecen4330lab7.c:2565: invalidInput();
                                   7917 ;	ecen4330lab7.c:2567: }
                                   7918 ;	ecen4330lab7.c:2568: }
      00266B 02r0Dr84         [24] 7919 	ljmp	_invalidInput
                                   7920 ;------------------------------------------------------------
                                   7921 ;Allocation info for local variables in function 'main'
                                   7922 ;------------------------------------------------------------
                                   7923 ;__1310720070              Allocated to registers 
                                   7924 ;__1310720071              Allocated to registers 
                                   7925 ;map_address               Allocated to registers 
                                   7926 ;d                         Allocated to registers 
                                   7927 ;__1310720073              Allocated to registers 
                                   7928 ;__1310720074              Allocated to registers 
                                   7929 ;map_address               Allocated to registers 
                                   7930 ;d                         Allocated to registers 
                                   7931 ;__1310720076              Allocated to registers 
                                   7932 ;__1310720077              Allocated to registers 
                                   7933 ;map_address               Allocated to registers 
                                   7934 ;d                         Allocated to registers 
                                   7935 ;__1310720079              Allocated to registers 
                                   7936 ;__1310720080              Allocated to registers 
                                   7937 ;map_address               Allocated to registers 
                                   7938 ;d                         Allocated to registers 
                                   7939 ;__1310720082              Allocated to registers 
                                   7940 ;__1310720083              Allocated to registers 
                                   7941 ;map_address               Allocated to registers 
                                   7942 ;d                         Allocated to registers 
                                   7943 ;__1310720085              Allocated to registers 
                                   7944 ;__1310720086              Allocated to registers 
                                   7945 ;map_address               Allocated to registers 
                                   7946 ;d                         Allocated to registers 
                                   7947 ;__1310720088              Allocated to registers 
                                   7948 ;__1310720089              Allocated to registers 
                                   7949 ;map_address               Allocated to registers 
                                   7950 ;d                         Allocated to registers 
                                   7951 ;------------------------------------------------------------
                                   7952 ;	ecen4330lab7.c:2577: void main (void) {
                                   7953 ;	-----------------------------------------
                                   7954 ;	 function main
                                   7955 ;	-----------------------------------------
      00266E                       7956 _main:
                                   7957 ;	ecen4330lab7.c:2578: CD = 0;
                                   7958 ;	assignBit
      00266E C2 B5            [12] 7959 	clr	_P3_5
                                   7960 ;	ecen4330lab7.c:2579: IOM = 0;
                                   7961 ;	assignBit
      002670 C2 B4            [12] 7962 	clr	_P3_4
                                   7963 ;	ecen4330lab7.c:2581: UART_Init();
      002672 12r00r0C         [24] 7964 	lcall	_UART_Init
                                   7965 ;	ecen4330lab7.c:2582: rtcInit();
      002675 12r00rB9         [24] 7966 	lcall	_rtcInit
                                   7967 ;	ecen4330lab7.c:2584: iowrite8(seg7_address, 0xFE);//a
      002678 85*04 82         [24] 7968 	mov	dpl,_seg7_address
      00267B 85*05 83         [24] 7969 	mov	dph,(_seg7_address + 1)
                                   7970 ;	ecen4330lab7.c:178: IOM = 1;
                                   7971 ;	assignBit
      00267E D2 B4            [12] 7972 	setb	_P3_4
                                   7973 ;	ecen4330lab7.c:179: *map_address = d;
      002680 74 FE            [12] 7974 	mov	a,#0xfe
      002682 F0               [24] 7975 	movx	@dptr,a
                                   7976 ;	ecen4330lab7.c:180: IOM = 0;
                                   7977 ;	assignBit
      002683 C2 B4            [12] 7978 	clr	_P3_4
                                   7979 ;	ecen4330lab7.c:2585: delay(100);
      002685 90 00 64         [24] 7980 	mov	dptr,#0x0064
      002688 12r00r28         [24] 7981 	lcall	_delay
                                   7982 ;	ecen4330lab7.c:2586: iowrite8(seg7_address, 0xFC);//a & b
      00268B 85*04 82         [24] 7983 	mov	dpl,_seg7_address
      00268E 85*05 83         [24] 7984 	mov	dph,(_seg7_address + 1)
                                   7985 ;	ecen4330lab7.c:178: IOM = 1;
                                   7986 ;	assignBit
      002691 D2 B4            [12] 7987 	setb	_P3_4
                                   7988 ;	ecen4330lab7.c:179: *map_address = d;
      002693 74 FC            [12] 7989 	mov	a,#0xfc
      002695 F0               [24] 7990 	movx	@dptr,a
                                   7991 ;	ecen4330lab7.c:180: IOM = 0;
                                   7992 ;	assignBit
      002696 C2 B4            [12] 7993 	clr	_P3_4
                                   7994 ;	ecen4330lab7.c:2587: delay(100);
      002698 90 00 64         [24] 7995 	mov	dptr,#0x0064
      00269B 12r00r28         [24] 7996 	lcall	_delay
                                   7997 ;	ecen4330lab7.c:2588: iowrite8(seg7_address, 0xF8);//a & b & c
      00269E 85*04 82         [24] 7998 	mov	dpl,_seg7_address
      0026A1 85*05 83         [24] 7999 	mov	dph,(_seg7_address + 1)
                                   8000 ;	ecen4330lab7.c:178: IOM = 1;
                                   8001 ;	assignBit
      0026A4 D2 B4            [12] 8002 	setb	_P3_4
                                   8003 ;	ecen4330lab7.c:179: *map_address = d;
      0026A6 74 F8            [12] 8004 	mov	a,#0xf8
      0026A8 F0               [24] 8005 	movx	@dptr,a
                                   8006 ;	ecen4330lab7.c:180: IOM = 0;
                                   8007 ;	assignBit
      0026A9 C2 B4            [12] 8008 	clr	_P3_4
                                   8009 ;	ecen4330lab7.c:2589: delay(100);
      0026AB 90 00 64         [24] 8010 	mov	dptr,#0x0064
      0026AE 12r00r28         [24] 8011 	lcall	_delay
                                   8012 ;	ecen4330lab7.c:2590: iowrite8(seg7_address, 0xF0);//a & b & c & d
      0026B1 85*04 82         [24] 8013 	mov	dpl,_seg7_address
      0026B4 85*05 83         [24] 8014 	mov	dph,(_seg7_address + 1)
                                   8015 ;	ecen4330lab7.c:178: IOM = 1;
                                   8016 ;	assignBit
      0026B7 D2 B4            [12] 8017 	setb	_P3_4
                                   8018 ;	ecen4330lab7.c:179: *map_address = d;
      0026B9 74 F0            [12] 8019 	mov	a,#0xf0
      0026BB F0               [24] 8020 	movx	@dptr,a
                                   8021 ;	ecen4330lab7.c:180: IOM = 0;
                                   8022 ;	assignBit
      0026BC C2 B4            [12] 8023 	clr	_P3_4
                                   8024 ;	ecen4330lab7.c:2591: delay(100);
      0026BE 90 00 64         [24] 8025 	mov	dptr,#0x0064
      0026C1 12r00r28         [24] 8026 	lcall	_delay
                                   8027 ;	ecen4330lab7.c:2592: iowrite8(seg7_address, 0xE0);//a & b & c & d & e
      0026C4 85*04 82         [24] 8028 	mov	dpl,_seg7_address
      0026C7 85*05 83         [24] 8029 	mov	dph,(_seg7_address + 1)
                                   8030 ;	ecen4330lab7.c:178: IOM = 1;
                                   8031 ;	assignBit
      0026CA D2 B4            [12] 8032 	setb	_P3_4
                                   8033 ;	ecen4330lab7.c:179: *map_address = d;
      0026CC 74 E0            [12] 8034 	mov	a,#0xe0
      0026CE F0               [24] 8035 	movx	@dptr,a
                                   8036 ;	ecen4330lab7.c:180: IOM = 0;
                                   8037 ;	assignBit
      0026CF C2 B4            [12] 8038 	clr	_P3_4
                                   8039 ;	ecen4330lab7.c:2593: delay(100);
      0026D1 90 00 64         [24] 8040 	mov	dptr,#0x0064
      0026D4 12r00r28         [24] 8041 	lcall	_delay
                                   8042 ;	ecen4330lab7.c:2594: iowrite8(seg7_address, 0xC0);//a & b & c & d & e & f
      0026D7 85*04 82         [24] 8043 	mov	dpl,_seg7_address
      0026DA 85*05 83         [24] 8044 	mov	dph,(_seg7_address + 1)
                                   8045 ;	ecen4330lab7.c:178: IOM = 1;
                                   8046 ;	assignBit
      0026DD D2 B4            [12] 8047 	setb	_P3_4
                                   8048 ;	ecen4330lab7.c:179: *map_address = d;
      0026DF 74 C0            [12] 8049 	mov	a,#0xc0
      0026E1 F0               [24] 8050 	movx	@dptr,a
                                   8051 ;	ecen4330lab7.c:180: IOM = 0;
                                   8052 ;	assignBit
      0026E2 C2 B4            [12] 8053 	clr	_P3_4
                                   8054 ;	ecen4330lab7.c:2595: delay(100);
      0026E4 90 00 64         [24] 8055 	mov	dptr,#0x0064
      0026E7 12r00r28         [24] 8056 	lcall	_delay
                                   8057 ;	ecen4330lab7.c:2596: IOM = 0;
                                   8058 ;	assignBit
      0026EA C2 B4            [12] 8059 	clr	_P3_4
                                   8060 ;	ecen4330lab7.c:2597: CD = 1;
                                   8061 ;	assignBit
      0026EC D2 B5            [12] 8062 	setb	_P3_5
                                   8063 ;	ecen4330lab7.c:2599: TFT_LCD_INIT();
      0026EE 12r04r04         [24] 8064 	lcall	_TFT_LCD_INIT
                                   8065 ;	ecen4330lab7.c:2600: iowrite8(seg7_address, 0xF9);
      0026F1 85*04 82         [24] 8066 	mov	dpl,_seg7_address
      0026F4 85*05 83         [24] 8067 	mov	dph,(_seg7_address + 1)
                                   8068 ;	ecen4330lab7.c:178: IOM = 1;
                                   8069 ;	assignBit
      0026F7 D2 B4            [12] 8070 	setb	_P3_4
                                   8071 ;	ecen4330lab7.c:179: *map_address = d;
      0026F9 74 F9            [12] 8072 	mov	a,#0xf9
      0026FB F0               [24] 8073 	movx	@dptr,a
                                   8074 ;	ecen4330lab7.c:180: IOM = 0;
                                   8075 ;	assignBit
      0026FC C2 B4            [12] 8076 	clr	_P3_4
                                   8077 ;	ecen4330lab7.c:2601: resetLCD();
      0026FE 12r0Dr5C         [24] 8078 	lcall	_resetLCD
                                   8079 ;	ecen4330lab7.c:2603: while(1) {
      002701                       8080 00102$:
                                   8081 ;	ecen4330lab7.c:2604: LCD_mainMenu();
      002701 12r25r10         [24] 8082 	lcall	_LCD_mainMenu
                                   8083 ;	ecen4330lab7.c:2606: }
      002704 80 FB            [24] 8084 	sjmp	00102$
                                   8085 	.area CSEG    (CODE)
                                   8086 	.area CONST   (CODE)
      000000                       8087 _font:
      000000 00                    8088 	.db #0x00	; 0
      000001 00                    8089 	.db #0x00	; 0
      000002 00                    8090 	.db #0x00	; 0
      000003 00                    8091 	.db #0x00	; 0
      000004 00                    8092 	.db #0x00	; 0
      000005 3E                    8093 	.db #0x3e	; 62
      000006 5B                    8094 	.db #0x5b	; 91
      000007 4F                    8095 	.db #0x4f	; 79	'O'
      000008 5B                    8096 	.db #0x5b	; 91
      000009 3E                    8097 	.db #0x3e	; 62
      00000A 3E                    8098 	.db #0x3e	; 62
      00000B 6B                    8099 	.db #0x6b	; 107	'k'
      00000C 4F                    8100 	.db #0x4f	; 79	'O'
      00000D 6B                    8101 	.db #0x6b	; 107	'k'
      00000E 3E                    8102 	.db #0x3e	; 62
      00000F 1C                    8103 	.db #0x1c	; 28
      000010 3E                    8104 	.db #0x3e	; 62
      000011 7C                    8105 	.db #0x7c	; 124
      000012 3E                    8106 	.db #0x3e	; 62
      000013 1C                    8107 	.db #0x1c	; 28
      000014 18                    8108 	.db #0x18	; 24
      000015 3C                    8109 	.db #0x3c	; 60
      000016 7E                    8110 	.db #0x7e	; 126
      000017 3C                    8111 	.db #0x3c	; 60
      000018 18                    8112 	.db #0x18	; 24
      000019 1C                    8113 	.db #0x1c	; 28
      00001A 57                    8114 	.db #0x57	; 87	'W'
      00001B 7D                    8115 	.db #0x7d	; 125
      00001C 57                    8116 	.db #0x57	; 87	'W'
      00001D 1C                    8117 	.db #0x1c	; 28
      00001E 1C                    8118 	.db #0x1c	; 28
      00001F 5E                    8119 	.db #0x5e	; 94
      000020 7F                    8120 	.db #0x7f	; 127
      000021 5E                    8121 	.db #0x5e	; 94
      000022 1C                    8122 	.db #0x1c	; 28
      000023 00                    8123 	.db #0x00	; 0
      000024 18                    8124 	.db #0x18	; 24
      000025 3C                    8125 	.db #0x3c	; 60
      000026 18                    8126 	.db #0x18	; 24
      000027 00                    8127 	.db #0x00	; 0
      000028 FF                    8128 	.db #0xff	; 255
      000029 E7                    8129 	.db #0xe7	; 231
      00002A C3                    8130 	.db #0xc3	; 195
      00002B E7                    8131 	.db #0xe7	; 231
      00002C FF                    8132 	.db #0xff	; 255
      00002D 00                    8133 	.db #0x00	; 0
      00002E 18                    8134 	.db #0x18	; 24
      00002F 24                    8135 	.db #0x24	; 36
      000030 18                    8136 	.db #0x18	; 24
      000031 00                    8137 	.db #0x00	; 0
      000032 FF                    8138 	.db #0xff	; 255
      000033 E7                    8139 	.db #0xe7	; 231
      000034 DB                    8140 	.db #0xdb	; 219
      000035 E7                    8141 	.db #0xe7	; 231
      000036 FF                    8142 	.db #0xff	; 255
      000037 30                    8143 	.db #0x30	; 48	'0'
      000038 48                    8144 	.db #0x48	; 72	'H'
      000039 3A                    8145 	.db #0x3a	; 58
      00003A 06                    8146 	.db #0x06	; 6
      00003B 0E                    8147 	.db #0x0e	; 14
      00003C 26                    8148 	.db #0x26	; 38
      00003D 29                    8149 	.db #0x29	; 41
      00003E 79                    8150 	.db #0x79	; 121	'y'
      00003F 29                    8151 	.db #0x29	; 41
      000040 26                    8152 	.db #0x26	; 38
      000041 40                    8153 	.db #0x40	; 64
      000042 7F                    8154 	.db #0x7f	; 127
      000043 05                    8155 	.db #0x05	; 5
      000044 05                    8156 	.db #0x05	; 5
      000045 07                    8157 	.db #0x07	; 7
      000046 40                    8158 	.db #0x40	; 64
      000047 7F                    8159 	.db #0x7f	; 127
      000048 05                    8160 	.db #0x05	; 5
      000049 25                    8161 	.db #0x25	; 37
      00004A 3F                    8162 	.db #0x3f	; 63
      00004B 5A                    8163 	.db #0x5a	; 90	'Z'
      00004C 3C                    8164 	.db #0x3c	; 60
      00004D E7                    8165 	.db #0xe7	; 231
      00004E 3C                    8166 	.db #0x3c	; 60
      00004F 5A                    8167 	.db #0x5a	; 90	'Z'
      000050 7F                    8168 	.db #0x7f	; 127
      000051 3E                    8169 	.db #0x3e	; 62
      000052 1C                    8170 	.db #0x1c	; 28
      000053 1C                    8171 	.db #0x1c	; 28
      000054 08                    8172 	.db #0x08	; 8
      000055 08                    8173 	.db #0x08	; 8
      000056 1C                    8174 	.db #0x1c	; 28
      000057 1C                    8175 	.db #0x1c	; 28
      000058 3E                    8176 	.db #0x3e	; 62
      000059 7F                    8177 	.db #0x7f	; 127
      00005A 14                    8178 	.db #0x14	; 20
      00005B 22                    8179 	.db #0x22	; 34
      00005C 7F                    8180 	.db #0x7f	; 127
      00005D 22                    8181 	.db #0x22	; 34
      00005E 14                    8182 	.db #0x14	; 20
      00005F 5F                    8183 	.db #0x5f	; 95
      000060 5F                    8184 	.db #0x5f	; 95
      000061 00                    8185 	.db #0x00	; 0
      000062 5F                    8186 	.db #0x5f	; 95
      000063 5F                    8187 	.db #0x5f	; 95
      000064 06                    8188 	.db #0x06	; 6
      000065 09                    8189 	.db #0x09	; 9
      000066 7F                    8190 	.db #0x7f	; 127
      000067 01                    8191 	.db #0x01	; 1
      000068 7F                    8192 	.db #0x7f	; 127
      000069 00                    8193 	.db #0x00	; 0
      00006A 66                    8194 	.db #0x66	; 102	'f'
      00006B 89                    8195 	.db #0x89	; 137
      00006C 95                    8196 	.db #0x95	; 149
      00006D 6A                    8197 	.db #0x6a	; 106	'j'
      00006E 60                    8198 	.db #0x60	; 96
      00006F 60                    8199 	.db #0x60	; 96
      000070 60                    8200 	.db #0x60	; 96
      000071 60                    8201 	.db #0x60	; 96
      000072 60                    8202 	.db #0x60	; 96
      000073 94                    8203 	.db #0x94	; 148
      000074 A2                    8204 	.db #0xa2	; 162
      000075 FF                    8205 	.db #0xff	; 255
      000076 A2                    8206 	.db #0xa2	; 162
      000077 94                    8207 	.db #0x94	; 148
      000078 08                    8208 	.db #0x08	; 8
      000079 04                    8209 	.db #0x04	; 4
      00007A 7E                    8210 	.db #0x7e	; 126
      00007B 04                    8211 	.db #0x04	; 4
      00007C 08                    8212 	.db #0x08	; 8
      00007D 10                    8213 	.db #0x10	; 16
      00007E 20                    8214 	.db #0x20	; 32
      00007F 7E                    8215 	.db #0x7e	; 126
      000080 20                    8216 	.db #0x20	; 32
      000081 10                    8217 	.db #0x10	; 16
      000082 08                    8218 	.db #0x08	; 8
      000083 08                    8219 	.db #0x08	; 8
      000084 2A                    8220 	.db #0x2a	; 42
      000085 1C                    8221 	.db #0x1c	; 28
      000086 08                    8222 	.db #0x08	; 8
      000087 08                    8223 	.db #0x08	; 8
      000088 1C                    8224 	.db #0x1c	; 28
      000089 2A                    8225 	.db #0x2a	; 42
      00008A 08                    8226 	.db #0x08	; 8
      00008B 08                    8227 	.db #0x08	; 8
      00008C 1E                    8228 	.db #0x1e	; 30
      00008D 10                    8229 	.db #0x10	; 16
      00008E 10                    8230 	.db #0x10	; 16
      00008F 10                    8231 	.db #0x10	; 16
      000090 10                    8232 	.db #0x10	; 16
      000091 0C                    8233 	.db #0x0c	; 12
      000092 1E                    8234 	.db #0x1e	; 30
      000093 0C                    8235 	.db #0x0c	; 12
      000094 1E                    8236 	.db #0x1e	; 30
      000095 0C                    8237 	.db #0x0c	; 12
      000096 30                    8238 	.db #0x30	; 48	'0'
      000097 38                    8239 	.db #0x38	; 56	'8'
      000098 3E                    8240 	.db #0x3e	; 62
      000099 38                    8241 	.db #0x38	; 56	'8'
      00009A 30                    8242 	.db #0x30	; 48	'0'
      00009B 06                    8243 	.db #0x06	; 6
      00009C 0E                    8244 	.db #0x0e	; 14
      00009D 3E                    8245 	.db #0x3e	; 62
      00009E 0E                    8246 	.db #0x0e	; 14
      00009F 06                    8247 	.db #0x06	; 6
      0000A0 00                    8248 	.db #0x00	; 0
      0000A1 00                    8249 	.db #0x00	; 0
      0000A2 00                    8250 	.db #0x00	; 0
      0000A3 00                    8251 	.db #0x00	; 0
      0000A4 00                    8252 	.db #0x00	; 0
      0000A5 00                    8253 	.db #0x00	; 0
      0000A6 00                    8254 	.db #0x00	; 0
      0000A7 5F                    8255 	.db #0x5f	; 95
      0000A8 00                    8256 	.db #0x00	; 0
      0000A9 00                    8257 	.db #0x00	; 0
      0000AA 00                    8258 	.db #0x00	; 0
      0000AB 07                    8259 	.db #0x07	; 7
      0000AC 00                    8260 	.db #0x00	; 0
      0000AD 07                    8261 	.db #0x07	; 7
      0000AE 00                    8262 	.db #0x00	; 0
      0000AF 14                    8263 	.db #0x14	; 20
      0000B0 7F                    8264 	.db #0x7f	; 127
      0000B1 14                    8265 	.db #0x14	; 20
      0000B2 7F                    8266 	.db #0x7f	; 127
      0000B3 14                    8267 	.db #0x14	; 20
      0000B4 24                    8268 	.db #0x24	; 36
      0000B5 2A                    8269 	.db #0x2a	; 42
      0000B6 7F                    8270 	.db #0x7f	; 127
      0000B7 2A                    8271 	.db #0x2a	; 42
      0000B8 12                    8272 	.db #0x12	; 18
      0000B9 23                    8273 	.db #0x23	; 35
      0000BA 13                    8274 	.db #0x13	; 19
      0000BB 08                    8275 	.db #0x08	; 8
      0000BC 64                    8276 	.db #0x64	; 100	'd'
      0000BD 62                    8277 	.db #0x62	; 98	'b'
      0000BE 36                    8278 	.db #0x36	; 54	'6'
      0000BF 49                    8279 	.db #0x49	; 73	'I'
      0000C0 56                    8280 	.db #0x56	; 86	'V'
      0000C1 20                    8281 	.db #0x20	; 32
      0000C2 50                    8282 	.db #0x50	; 80	'P'
      0000C3 00                    8283 	.db #0x00	; 0
      0000C4 08                    8284 	.db #0x08	; 8
      0000C5 07                    8285 	.db #0x07	; 7
      0000C6 03                    8286 	.db #0x03	; 3
      0000C7 00                    8287 	.db #0x00	; 0
      0000C8 00                    8288 	.db #0x00	; 0
      0000C9 1C                    8289 	.db #0x1c	; 28
      0000CA 22                    8290 	.db #0x22	; 34
      0000CB 41                    8291 	.db #0x41	; 65	'A'
      0000CC 00                    8292 	.db #0x00	; 0
      0000CD 00                    8293 	.db #0x00	; 0
      0000CE 41                    8294 	.db #0x41	; 65	'A'
      0000CF 22                    8295 	.db #0x22	; 34
      0000D0 1C                    8296 	.db #0x1c	; 28
      0000D1 00                    8297 	.db #0x00	; 0
      0000D2 2A                    8298 	.db #0x2a	; 42
      0000D3 1C                    8299 	.db #0x1c	; 28
      0000D4 7F                    8300 	.db #0x7f	; 127
      0000D5 1C                    8301 	.db #0x1c	; 28
      0000D6 2A                    8302 	.db #0x2a	; 42
      0000D7 08                    8303 	.db #0x08	; 8
      0000D8 08                    8304 	.db #0x08	; 8
      0000D9 3E                    8305 	.db #0x3e	; 62
      0000DA 08                    8306 	.db #0x08	; 8
      0000DB 08                    8307 	.db #0x08	; 8
      0000DC 00                    8308 	.db #0x00	; 0
      0000DD 80                    8309 	.db #0x80	; 128
      0000DE 70                    8310 	.db #0x70	; 112	'p'
      0000DF 30                    8311 	.db #0x30	; 48	'0'
      0000E0 00                    8312 	.db #0x00	; 0
      0000E1 08                    8313 	.db #0x08	; 8
      0000E2 08                    8314 	.db #0x08	; 8
      0000E3 08                    8315 	.db #0x08	; 8
      0000E4 08                    8316 	.db #0x08	; 8
      0000E5 08                    8317 	.db #0x08	; 8
      0000E6 00                    8318 	.db #0x00	; 0
      0000E7 00                    8319 	.db #0x00	; 0
      0000E8 60                    8320 	.db #0x60	; 96
      0000E9 60                    8321 	.db #0x60	; 96
      0000EA 00                    8322 	.db #0x00	; 0
      0000EB 20                    8323 	.db #0x20	; 32
      0000EC 10                    8324 	.db #0x10	; 16
      0000ED 08                    8325 	.db #0x08	; 8
      0000EE 04                    8326 	.db #0x04	; 4
      0000EF 02                    8327 	.db #0x02	; 2
      0000F0 3E                    8328 	.db #0x3e	; 62
      0000F1 51                    8329 	.db #0x51	; 81	'Q'
      0000F2 49                    8330 	.db #0x49	; 73	'I'
      0000F3 45                    8331 	.db #0x45	; 69	'E'
      0000F4 3E                    8332 	.db #0x3e	; 62
      0000F5 00                    8333 	.db #0x00	; 0
      0000F6 42                    8334 	.db #0x42	; 66	'B'
      0000F7 7F                    8335 	.db #0x7f	; 127
      0000F8 40                    8336 	.db #0x40	; 64
      0000F9 00                    8337 	.db #0x00	; 0
      0000FA 72                    8338 	.db #0x72	; 114	'r'
      0000FB 49                    8339 	.db #0x49	; 73	'I'
      0000FC 49                    8340 	.db #0x49	; 73	'I'
      0000FD 49                    8341 	.db #0x49	; 73	'I'
      0000FE 46                    8342 	.db #0x46	; 70	'F'
      0000FF 21                    8343 	.db #0x21	; 33
      000100 41                    8344 	.db #0x41	; 65	'A'
      000101 49                    8345 	.db #0x49	; 73	'I'
      000102 4D                    8346 	.db #0x4d	; 77	'M'
      000103 33                    8347 	.db #0x33	; 51	'3'
      000104 18                    8348 	.db #0x18	; 24
      000105 14                    8349 	.db #0x14	; 20
      000106 12                    8350 	.db #0x12	; 18
      000107 7F                    8351 	.db #0x7f	; 127
      000108 10                    8352 	.db #0x10	; 16
      000109 27                    8353 	.db #0x27	; 39
      00010A 45                    8354 	.db #0x45	; 69	'E'
      00010B 45                    8355 	.db #0x45	; 69	'E'
      00010C 45                    8356 	.db #0x45	; 69	'E'
      00010D 39                    8357 	.db #0x39	; 57	'9'
      00010E 3C                    8358 	.db #0x3c	; 60
      00010F 4A                    8359 	.db #0x4a	; 74	'J'
      000110 49                    8360 	.db #0x49	; 73	'I'
      000111 49                    8361 	.db #0x49	; 73	'I'
      000112 31                    8362 	.db #0x31	; 49	'1'
      000113 41                    8363 	.db #0x41	; 65	'A'
      000114 21                    8364 	.db #0x21	; 33
      000115 11                    8365 	.db #0x11	; 17
      000116 09                    8366 	.db #0x09	; 9
      000117 07                    8367 	.db #0x07	; 7
      000118 36                    8368 	.db #0x36	; 54	'6'
      000119 49                    8369 	.db #0x49	; 73	'I'
      00011A 49                    8370 	.db #0x49	; 73	'I'
      00011B 49                    8371 	.db #0x49	; 73	'I'
      00011C 36                    8372 	.db #0x36	; 54	'6'
      00011D 46                    8373 	.db #0x46	; 70	'F'
      00011E 49                    8374 	.db #0x49	; 73	'I'
      00011F 49                    8375 	.db #0x49	; 73	'I'
      000120 29                    8376 	.db #0x29	; 41
      000121 1E                    8377 	.db #0x1e	; 30
      000122 00                    8378 	.db #0x00	; 0
      000123 00                    8379 	.db #0x00	; 0
      000124 14                    8380 	.db #0x14	; 20
      000125 00                    8381 	.db #0x00	; 0
      000126 00                    8382 	.db #0x00	; 0
      000127 00                    8383 	.db #0x00	; 0
      000128 40                    8384 	.db #0x40	; 64
      000129 34                    8385 	.db #0x34	; 52	'4'
      00012A 00                    8386 	.db #0x00	; 0
      00012B 00                    8387 	.db #0x00	; 0
      00012C 00                    8388 	.db #0x00	; 0
      00012D 08                    8389 	.db #0x08	; 8
      00012E 14                    8390 	.db #0x14	; 20
      00012F 22                    8391 	.db #0x22	; 34
      000130 41                    8392 	.db #0x41	; 65	'A'
      000131 14                    8393 	.db #0x14	; 20
      000132 14                    8394 	.db #0x14	; 20
      000133 14                    8395 	.db #0x14	; 20
      000134 14                    8396 	.db #0x14	; 20
      000135 14                    8397 	.db #0x14	; 20
      000136 00                    8398 	.db #0x00	; 0
      000137 41                    8399 	.db #0x41	; 65	'A'
      000138 22                    8400 	.db #0x22	; 34
      000139 14                    8401 	.db #0x14	; 20
      00013A 08                    8402 	.db #0x08	; 8
      00013B 02                    8403 	.db #0x02	; 2
      00013C 01                    8404 	.db #0x01	; 1
      00013D 59                    8405 	.db #0x59	; 89	'Y'
      00013E 09                    8406 	.db #0x09	; 9
      00013F 06                    8407 	.db #0x06	; 6
      000140 3E                    8408 	.db #0x3e	; 62
      000141 41                    8409 	.db #0x41	; 65	'A'
      000142 5D                    8410 	.db #0x5d	; 93
      000143 59                    8411 	.db #0x59	; 89	'Y'
      000144 4E                    8412 	.db #0x4e	; 78	'N'
      000145 7C                    8413 	.db #0x7c	; 124
      000146 12                    8414 	.db #0x12	; 18
      000147 11                    8415 	.db #0x11	; 17
      000148 12                    8416 	.db #0x12	; 18
      000149 7C                    8417 	.db #0x7c	; 124
      00014A 7F                    8418 	.db #0x7f	; 127
      00014B 49                    8419 	.db #0x49	; 73	'I'
      00014C 49                    8420 	.db #0x49	; 73	'I'
      00014D 49                    8421 	.db #0x49	; 73	'I'
      00014E 36                    8422 	.db #0x36	; 54	'6'
      00014F 3E                    8423 	.db #0x3e	; 62
      000150 41                    8424 	.db #0x41	; 65	'A'
      000151 41                    8425 	.db #0x41	; 65	'A'
      000152 41                    8426 	.db #0x41	; 65	'A'
      000153 22                    8427 	.db #0x22	; 34
      000154 7F                    8428 	.db #0x7f	; 127
      000155 41                    8429 	.db #0x41	; 65	'A'
      000156 41                    8430 	.db #0x41	; 65	'A'
      000157 41                    8431 	.db #0x41	; 65	'A'
      000158 3E                    8432 	.db #0x3e	; 62
      000159 7F                    8433 	.db #0x7f	; 127
      00015A 49                    8434 	.db #0x49	; 73	'I'
      00015B 49                    8435 	.db #0x49	; 73	'I'
      00015C 49                    8436 	.db #0x49	; 73	'I'
      00015D 41                    8437 	.db #0x41	; 65	'A'
      00015E 7F                    8438 	.db #0x7f	; 127
      00015F 09                    8439 	.db #0x09	; 9
      000160 09                    8440 	.db #0x09	; 9
      000161 09                    8441 	.db #0x09	; 9
      000162 01                    8442 	.db #0x01	; 1
      000163 3E                    8443 	.db #0x3e	; 62
      000164 41                    8444 	.db #0x41	; 65	'A'
      000165 41                    8445 	.db #0x41	; 65	'A'
      000166 51                    8446 	.db #0x51	; 81	'Q'
      000167 73                    8447 	.db #0x73	; 115	's'
      000168 7F                    8448 	.db #0x7f	; 127
      000169 08                    8449 	.db #0x08	; 8
      00016A 08                    8450 	.db #0x08	; 8
      00016B 08                    8451 	.db #0x08	; 8
      00016C 7F                    8452 	.db #0x7f	; 127
      00016D 00                    8453 	.db #0x00	; 0
      00016E 41                    8454 	.db #0x41	; 65	'A'
      00016F 7F                    8455 	.db #0x7f	; 127
      000170 41                    8456 	.db #0x41	; 65	'A'
      000171 00                    8457 	.db #0x00	; 0
      000172 20                    8458 	.db #0x20	; 32
      000173 40                    8459 	.db #0x40	; 64
      000174 41                    8460 	.db #0x41	; 65	'A'
      000175 3F                    8461 	.db #0x3f	; 63
      000176 01                    8462 	.db #0x01	; 1
      000177 7F                    8463 	.db #0x7f	; 127
      000178 08                    8464 	.db #0x08	; 8
      000179 14                    8465 	.db #0x14	; 20
      00017A 22                    8466 	.db #0x22	; 34
      00017B 41                    8467 	.db #0x41	; 65	'A'
      00017C 7F                    8468 	.db #0x7f	; 127
      00017D 40                    8469 	.db #0x40	; 64
      00017E 40                    8470 	.db #0x40	; 64
      00017F 40                    8471 	.db #0x40	; 64
      000180 40                    8472 	.db #0x40	; 64
      000181 7F                    8473 	.db #0x7f	; 127
      000182 02                    8474 	.db #0x02	; 2
      000183 1C                    8475 	.db #0x1c	; 28
      000184 02                    8476 	.db #0x02	; 2
      000185 7F                    8477 	.db #0x7f	; 127
      000186 7F                    8478 	.db #0x7f	; 127
      000187 04                    8479 	.db #0x04	; 4
      000188 08                    8480 	.db #0x08	; 8
      000189 10                    8481 	.db #0x10	; 16
      00018A 7F                    8482 	.db #0x7f	; 127
      00018B 3E                    8483 	.db #0x3e	; 62
      00018C 41                    8484 	.db #0x41	; 65	'A'
      00018D 41                    8485 	.db #0x41	; 65	'A'
      00018E 41                    8486 	.db #0x41	; 65	'A'
      00018F 3E                    8487 	.db #0x3e	; 62
      000190 7F                    8488 	.db #0x7f	; 127
      000191 09                    8489 	.db #0x09	; 9
      000192 09                    8490 	.db #0x09	; 9
      000193 09                    8491 	.db #0x09	; 9
      000194 06                    8492 	.db #0x06	; 6
      000195 3E                    8493 	.db #0x3e	; 62
      000196 41                    8494 	.db #0x41	; 65	'A'
      000197 51                    8495 	.db #0x51	; 81	'Q'
      000198 21                    8496 	.db #0x21	; 33
      000199 5E                    8497 	.db #0x5e	; 94
      00019A 7F                    8498 	.db #0x7f	; 127
      00019B 09                    8499 	.db #0x09	; 9
      00019C 19                    8500 	.db #0x19	; 25
      00019D 29                    8501 	.db #0x29	; 41
      00019E 46                    8502 	.db #0x46	; 70	'F'
      00019F 26                    8503 	.db #0x26	; 38
      0001A0 49                    8504 	.db #0x49	; 73	'I'
      0001A1 49                    8505 	.db #0x49	; 73	'I'
      0001A2 49                    8506 	.db #0x49	; 73	'I'
      0001A3 32                    8507 	.db #0x32	; 50	'2'
      0001A4 03                    8508 	.db #0x03	; 3
      0001A5 01                    8509 	.db #0x01	; 1
      0001A6 7F                    8510 	.db #0x7f	; 127
      0001A7 01                    8511 	.db #0x01	; 1
      0001A8 03                    8512 	.db #0x03	; 3
      0001A9 3F                    8513 	.db #0x3f	; 63
      0001AA 40                    8514 	.db #0x40	; 64
      0001AB 40                    8515 	.db #0x40	; 64
      0001AC 40                    8516 	.db #0x40	; 64
      0001AD 3F                    8517 	.db #0x3f	; 63
      0001AE 1F                    8518 	.db #0x1f	; 31
      0001AF 20                    8519 	.db #0x20	; 32
      0001B0 40                    8520 	.db #0x40	; 64
      0001B1 20                    8521 	.db #0x20	; 32
      0001B2 1F                    8522 	.db #0x1f	; 31
      0001B3 3F                    8523 	.db #0x3f	; 63
      0001B4 40                    8524 	.db #0x40	; 64
      0001B5 38                    8525 	.db #0x38	; 56	'8'
      0001B6 40                    8526 	.db #0x40	; 64
      0001B7 3F                    8527 	.db #0x3f	; 63
      0001B8 63                    8528 	.db #0x63	; 99	'c'
      0001B9 14                    8529 	.db #0x14	; 20
      0001BA 08                    8530 	.db #0x08	; 8
      0001BB 14                    8531 	.db #0x14	; 20
      0001BC 63                    8532 	.db #0x63	; 99	'c'
      0001BD 03                    8533 	.db #0x03	; 3
      0001BE 04                    8534 	.db #0x04	; 4
      0001BF 78                    8535 	.db #0x78	; 120	'x'
      0001C0 04                    8536 	.db #0x04	; 4
      0001C1 03                    8537 	.db #0x03	; 3
      0001C2 61                    8538 	.db #0x61	; 97	'a'
      0001C3 59                    8539 	.db #0x59	; 89	'Y'
      0001C4 49                    8540 	.db #0x49	; 73	'I'
      0001C5 4D                    8541 	.db #0x4d	; 77	'M'
      0001C6 43                    8542 	.db #0x43	; 67	'C'
      0001C7 00                    8543 	.db #0x00	; 0
      0001C8 7F                    8544 	.db #0x7f	; 127
      0001C9 41                    8545 	.db #0x41	; 65	'A'
      0001CA 41                    8546 	.db #0x41	; 65	'A'
      0001CB 41                    8547 	.db #0x41	; 65	'A'
      0001CC 02                    8548 	.db #0x02	; 2
      0001CD 04                    8549 	.db #0x04	; 4
      0001CE 08                    8550 	.db #0x08	; 8
      0001CF 10                    8551 	.db #0x10	; 16
      0001D0 20                    8552 	.db #0x20	; 32
      0001D1 00                    8553 	.db #0x00	; 0
      0001D2 41                    8554 	.db #0x41	; 65	'A'
      0001D3 41                    8555 	.db #0x41	; 65	'A'
      0001D4 41                    8556 	.db #0x41	; 65	'A'
      0001D5 7F                    8557 	.db #0x7f	; 127
      0001D6 04                    8558 	.db #0x04	; 4
      0001D7 02                    8559 	.db #0x02	; 2
      0001D8 01                    8560 	.db #0x01	; 1
      0001D9 02                    8561 	.db #0x02	; 2
      0001DA 04                    8562 	.db #0x04	; 4
      0001DB 40                    8563 	.db #0x40	; 64
      0001DC 40                    8564 	.db #0x40	; 64
      0001DD 40                    8565 	.db #0x40	; 64
      0001DE 40                    8566 	.db #0x40	; 64
      0001DF 40                    8567 	.db #0x40	; 64
      0001E0 00                    8568 	.db #0x00	; 0
      0001E1 03                    8569 	.db #0x03	; 3
      0001E2 07                    8570 	.db #0x07	; 7
      0001E3 08                    8571 	.db #0x08	; 8
      0001E4 00                    8572 	.db #0x00	; 0
      0001E5 20                    8573 	.db #0x20	; 32
      0001E6 54                    8574 	.db #0x54	; 84	'T'
      0001E7 54                    8575 	.db #0x54	; 84	'T'
      0001E8 78                    8576 	.db #0x78	; 120	'x'
      0001E9 40                    8577 	.db #0x40	; 64
      0001EA 7F                    8578 	.db #0x7f	; 127
      0001EB 28                    8579 	.db #0x28	; 40
      0001EC 44                    8580 	.db #0x44	; 68	'D'
      0001ED 44                    8581 	.db #0x44	; 68	'D'
      0001EE 38                    8582 	.db #0x38	; 56	'8'
      0001EF 38                    8583 	.db #0x38	; 56	'8'
      0001F0 44                    8584 	.db #0x44	; 68	'D'
      0001F1 44                    8585 	.db #0x44	; 68	'D'
      0001F2 44                    8586 	.db #0x44	; 68	'D'
      0001F3 28                    8587 	.db #0x28	; 40
      0001F4 38                    8588 	.db #0x38	; 56	'8'
      0001F5 44                    8589 	.db #0x44	; 68	'D'
      0001F6 44                    8590 	.db #0x44	; 68	'D'
      0001F7 28                    8591 	.db #0x28	; 40
      0001F8 7F                    8592 	.db #0x7f	; 127
      0001F9 38                    8593 	.db #0x38	; 56	'8'
      0001FA 54                    8594 	.db #0x54	; 84	'T'
      0001FB 54                    8595 	.db #0x54	; 84	'T'
      0001FC 54                    8596 	.db #0x54	; 84	'T'
      0001FD 18                    8597 	.db #0x18	; 24
      0001FE 00                    8598 	.db #0x00	; 0
      0001FF 08                    8599 	.db #0x08	; 8
      000200 7E                    8600 	.db #0x7e	; 126
      000201 09                    8601 	.db #0x09	; 9
      000202 02                    8602 	.db #0x02	; 2
      000203 18                    8603 	.db #0x18	; 24
      000204 A4                    8604 	.db #0xa4	; 164
      000205 A4                    8605 	.db #0xa4	; 164
      000206 9C                    8606 	.db #0x9c	; 156
      000207 78                    8607 	.db #0x78	; 120	'x'
      000208 7F                    8608 	.db #0x7f	; 127
      000209 08                    8609 	.db #0x08	; 8
      00020A 04                    8610 	.db #0x04	; 4
      00020B 04                    8611 	.db #0x04	; 4
      00020C 78                    8612 	.db #0x78	; 120	'x'
      00020D 00                    8613 	.db #0x00	; 0
      00020E 44                    8614 	.db #0x44	; 68	'D'
      00020F 7D                    8615 	.db #0x7d	; 125
      000210 40                    8616 	.db #0x40	; 64
      000211 00                    8617 	.db #0x00	; 0
      000212 20                    8618 	.db #0x20	; 32
      000213 40                    8619 	.db #0x40	; 64
      000214 40                    8620 	.db #0x40	; 64
      000215 3D                    8621 	.db #0x3d	; 61
      000216 00                    8622 	.db #0x00	; 0
      000217 7F                    8623 	.db #0x7f	; 127
      000218 10                    8624 	.db #0x10	; 16
      000219 28                    8625 	.db #0x28	; 40
      00021A 44                    8626 	.db #0x44	; 68	'D'
      00021B 00                    8627 	.db #0x00	; 0
      00021C 00                    8628 	.db #0x00	; 0
      00021D 41                    8629 	.db #0x41	; 65	'A'
      00021E 7F                    8630 	.db #0x7f	; 127
      00021F 40                    8631 	.db #0x40	; 64
      000220 00                    8632 	.db #0x00	; 0
      000221 7C                    8633 	.db #0x7c	; 124
      000222 04                    8634 	.db #0x04	; 4
      000223 78                    8635 	.db #0x78	; 120	'x'
      000224 04                    8636 	.db #0x04	; 4
      000225 78                    8637 	.db #0x78	; 120	'x'
      000226 7C                    8638 	.db #0x7c	; 124
      000227 08                    8639 	.db #0x08	; 8
      000228 04                    8640 	.db #0x04	; 4
      000229 04                    8641 	.db #0x04	; 4
      00022A 78                    8642 	.db #0x78	; 120	'x'
      00022B 38                    8643 	.db #0x38	; 56	'8'
      00022C 44                    8644 	.db #0x44	; 68	'D'
      00022D 44                    8645 	.db #0x44	; 68	'D'
      00022E 44                    8646 	.db #0x44	; 68	'D'
      00022F 38                    8647 	.db #0x38	; 56	'8'
      000230 FC                    8648 	.db #0xfc	; 252
      000231 18                    8649 	.db #0x18	; 24
      000232 24                    8650 	.db #0x24	; 36
      000233 24                    8651 	.db #0x24	; 36
      000234 18                    8652 	.db #0x18	; 24
      000235 18                    8653 	.db #0x18	; 24
      000236 24                    8654 	.db #0x24	; 36
      000237 24                    8655 	.db #0x24	; 36
      000238 18                    8656 	.db #0x18	; 24
      000239 FC                    8657 	.db #0xfc	; 252
      00023A 7C                    8658 	.db #0x7c	; 124
      00023B 08                    8659 	.db #0x08	; 8
      00023C 04                    8660 	.db #0x04	; 4
      00023D 04                    8661 	.db #0x04	; 4
      00023E 08                    8662 	.db #0x08	; 8
      00023F 48                    8663 	.db #0x48	; 72	'H'
      000240 54                    8664 	.db #0x54	; 84	'T'
      000241 54                    8665 	.db #0x54	; 84	'T'
      000242 54                    8666 	.db #0x54	; 84	'T'
      000243 24                    8667 	.db #0x24	; 36
      000244 04                    8668 	.db #0x04	; 4
      000245 04                    8669 	.db #0x04	; 4
      000246 3F                    8670 	.db #0x3f	; 63
      000247 44                    8671 	.db #0x44	; 68	'D'
      000248 24                    8672 	.db #0x24	; 36
      000249 3C                    8673 	.db #0x3c	; 60
      00024A 40                    8674 	.db #0x40	; 64
      00024B 40                    8675 	.db #0x40	; 64
      00024C 20                    8676 	.db #0x20	; 32
      00024D 7C                    8677 	.db #0x7c	; 124
      00024E 1C                    8678 	.db #0x1c	; 28
      00024F 20                    8679 	.db #0x20	; 32
      000250 40                    8680 	.db #0x40	; 64
      000251 20                    8681 	.db #0x20	; 32
      000252 1C                    8682 	.db #0x1c	; 28
      000253 3C                    8683 	.db #0x3c	; 60
      000254 40                    8684 	.db #0x40	; 64
      000255 30                    8685 	.db #0x30	; 48	'0'
      000256 40                    8686 	.db #0x40	; 64
      000257 3C                    8687 	.db #0x3c	; 60
      000258 44                    8688 	.db #0x44	; 68	'D'
      000259 28                    8689 	.db #0x28	; 40
      00025A 10                    8690 	.db #0x10	; 16
      00025B 28                    8691 	.db #0x28	; 40
      00025C 44                    8692 	.db #0x44	; 68	'D'
      00025D 4C                    8693 	.db #0x4c	; 76	'L'
      00025E 90                    8694 	.db #0x90	; 144
      00025F 90                    8695 	.db #0x90	; 144
      000260 90                    8696 	.db #0x90	; 144
      000261 7C                    8697 	.db #0x7c	; 124
      000262 44                    8698 	.db #0x44	; 68	'D'
      000263 64                    8699 	.db #0x64	; 100	'd'
      000264 54                    8700 	.db #0x54	; 84	'T'
      000265 4C                    8701 	.db #0x4c	; 76	'L'
      000266 44                    8702 	.db #0x44	; 68	'D'
      000267 00                    8703 	.db #0x00	; 0
      000268 08                    8704 	.db #0x08	; 8
      000269 36                    8705 	.db #0x36	; 54	'6'
      00026A 41                    8706 	.db #0x41	; 65	'A'
      00026B 00                    8707 	.db #0x00	; 0
      00026C 00                    8708 	.db #0x00	; 0
      00026D 00                    8709 	.db #0x00	; 0
      00026E 77                    8710 	.db #0x77	; 119	'w'
      00026F 00                    8711 	.db #0x00	; 0
      000270 00                    8712 	.db #0x00	; 0
      000271 00                    8713 	.db #0x00	; 0
      000272 41                    8714 	.db #0x41	; 65	'A'
      000273 36                    8715 	.db #0x36	; 54	'6'
      000274 08                    8716 	.db #0x08	; 8
      000275 00                    8717 	.db #0x00	; 0
      000276 02                    8718 	.db #0x02	; 2
      000277 01                    8719 	.db #0x01	; 1
      000278 02                    8720 	.db #0x02	; 2
      000279 04                    8721 	.db #0x04	; 4
      00027A 02                    8722 	.db #0x02	; 2
      00027B 3C                    8723 	.db #0x3c	; 60
      00027C 26                    8724 	.db #0x26	; 38
      00027D 23                    8725 	.db #0x23	; 35
      00027E 26                    8726 	.db #0x26	; 38
      00027F 3C                    8727 	.db #0x3c	; 60
      000280 1E                    8728 	.db #0x1e	; 30
      000281 A1                    8729 	.db #0xa1	; 161
      000282 A1                    8730 	.db #0xa1	; 161
      000283 61                    8731 	.db #0x61	; 97	'a'
      000284 12                    8732 	.db #0x12	; 18
      000285 3A                    8733 	.db #0x3a	; 58
      000286 40                    8734 	.db #0x40	; 64
      000287 40                    8735 	.db #0x40	; 64
      000288 20                    8736 	.db #0x20	; 32
      000289 7A                    8737 	.db #0x7a	; 122	'z'
      00028A 38                    8738 	.db #0x38	; 56	'8'
      00028B 54                    8739 	.db #0x54	; 84	'T'
      00028C 54                    8740 	.db #0x54	; 84	'T'
      00028D 55                    8741 	.db #0x55	; 85	'U'
      00028E 59                    8742 	.db #0x59	; 89	'Y'
      00028F 21                    8743 	.db #0x21	; 33
      000290 55                    8744 	.db #0x55	; 85	'U'
      000291 55                    8745 	.db #0x55	; 85	'U'
      000292 79                    8746 	.db #0x79	; 121	'y'
      000293 41                    8747 	.db #0x41	; 65	'A'
      000294 22                    8748 	.db #0x22	; 34
      000295 54                    8749 	.db #0x54	; 84	'T'
      000296 54                    8750 	.db #0x54	; 84	'T'
      000297 78                    8751 	.db #0x78	; 120	'x'
      000298 42                    8752 	.db #0x42	; 66	'B'
      000299 21                    8753 	.db #0x21	; 33
      00029A 55                    8754 	.db #0x55	; 85	'U'
      00029B 54                    8755 	.db #0x54	; 84	'T'
      00029C 78                    8756 	.db #0x78	; 120	'x'
      00029D 40                    8757 	.db #0x40	; 64
      00029E 20                    8758 	.db #0x20	; 32
      00029F 54                    8759 	.db #0x54	; 84	'T'
      0002A0 55                    8760 	.db #0x55	; 85	'U'
      0002A1 79                    8761 	.db #0x79	; 121	'y'
      0002A2 40                    8762 	.db #0x40	; 64
      0002A3 0C                    8763 	.db #0x0c	; 12
      0002A4 1E                    8764 	.db #0x1e	; 30
      0002A5 52                    8765 	.db #0x52	; 82	'R'
      0002A6 72                    8766 	.db #0x72	; 114	'r'
      0002A7 12                    8767 	.db #0x12	; 18
      0002A8 39                    8768 	.db #0x39	; 57	'9'
      0002A9 55                    8769 	.db #0x55	; 85	'U'
      0002AA 55                    8770 	.db #0x55	; 85	'U'
      0002AB 55                    8771 	.db #0x55	; 85	'U'
      0002AC 59                    8772 	.db #0x59	; 89	'Y'
      0002AD 39                    8773 	.db #0x39	; 57	'9'
      0002AE 54                    8774 	.db #0x54	; 84	'T'
      0002AF 54                    8775 	.db #0x54	; 84	'T'
      0002B0 54                    8776 	.db #0x54	; 84	'T'
      0002B1 59                    8777 	.db #0x59	; 89	'Y'
      0002B2 39                    8778 	.db #0x39	; 57	'9'
      0002B3 55                    8779 	.db #0x55	; 85	'U'
      0002B4 54                    8780 	.db #0x54	; 84	'T'
      0002B5 54                    8781 	.db #0x54	; 84	'T'
      0002B6 58                    8782 	.db #0x58	; 88	'X'
      0002B7 00                    8783 	.db #0x00	; 0
      0002B8 00                    8784 	.db #0x00	; 0
      0002B9 45                    8785 	.db #0x45	; 69	'E'
      0002BA 7C                    8786 	.db #0x7c	; 124
      0002BB 41                    8787 	.db #0x41	; 65	'A'
      0002BC 00                    8788 	.db #0x00	; 0
      0002BD 02                    8789 	.db #0x02	; 2
      0002BE 45                    8790 	.db #0x45	; 69	'E'
      0002BF 7D                    8791 	.db #0x7d	; 125
      0002C0 42                    8792 	.db #0x42	; 66	'B'
      0002C1 00                    8793 	.db #0x00	; 0
      0002C2 01                    8794 	.db #0x01	; 1
      0002C3 45                    8795 	.db #0x45	; 69	'E'
      0002C4 7C                    8796 	.db #0x7c	; 124
      0002C5 40                    8797 	.db #0x40	; 64
      0002C6 7D                    8798 	.db #0x7d	; 125
      0002C7 12                    8799 	.db #0x12	; 18
      0002C8 11                    8800 	.db #0x11	; 17
      0002C9 12                    8801 	.db #0x12	; 18
      0002CA 7D                    8802 	.db #0x7d	; 125
      0002CB F0                    8803 	.db #0xf0	; 240
      0002CC 28                    8804 	.db #0x28	; 40
      0002CD 25                    8805 	.db #0x25	; 37
      0002CE 28                    8806 	.db #0x28	; 40
      0002CF F0                    8807 	.db #0xf0	; 240
      0002D0 7C                    8808 	.db #0x7c	; 124
      0002D1 54                    8809 	.db #0x54	; 84	'T'
      0002D2 55                    8810 	.db #0x55	; 85	'U'
      0002D3 45                    8811 	.db #0x45	; 69	'E'
      0002D4 00                    8812 	.db #0x00	; 0
      0002D5 20                    8813 	.db #0x20	; 32
      0002D6 54                    8814 	.db #0x54	; 84	'T'
      0002D7 54                    8815 	.db #0x54	; 84	'T'
      0002D8 7C                    8816 	.db #0x7c	; 124
      0002D9 54                    8817 	.db #0x54	; 84	'T'
      0002DA 7C                    8818 	.db #0x7c	; 124
      0002DB 0A                    8819 	.db #0x0a	; 10
      0002DC 09                    8820 	.db #0x09	; 9
      0002DD 7F                    8821 	.db #0x7f	; 127
      0002DE 49                    8822 	.db #0x49	; 73	'I'
      0002DF 32                    8823 	.db #0x32	; 50	'2'
      0002E0 49                    8824 	.db #0x49	; 73	'I'
      0002E1 49                    8825 	.db #0x49	; 73	'I'
      0002E2 49                    8826 	.db #0x49	; 73	'I'
      0002E3 32                    8827 	.db #0x32	; 50	'2'
      0002E4 3A                    8828 	.db #0x3a	; 58
      0002E5 44                    8829 	.db #0x44	; 68	'D'
      0002E6 44                    8830 	.db #0x44	; 68	'D'
      0002E7 44                    8831 	.db #0x44	; 68	'D'
      0002E8 3A                    8832 	.db #0x3a	; 58
      0002E9 32                    8833 	.db #0x32	; 50	'2'
      0002EA 4A                    8834 	.db #0x4a	; 74	'J'
      0002EB 48                    8835 	.db #0x48	; 72	'H'
      0002EC 48                    8836 	.db #0x48	; 72	'H'
      0002ED 30                    8837 	.db #0x30	; 48	'0'
      0002EE 3A                    8838 	.db #0x3a	; 58
      0002EF 41                    8839 	.db #0x41	; 65	'A'
      0002F0 41                    8840 	.db #0x41	; 65	'A'
      0002F1 21                    8841 	.db #0x21	; 33
      0002F2 7A                    8842 	.db #0x7a	; 122	'z'
      0002F3 3A                    8843 	.db #0x3a	; 58
      0002F4 42                    8844 	.db #0x42	; 66	'B'
      0002F5 40                    8845 	.db #0x40	; 64
      0002F6 20                    8846 	.db #0x20	; 32
      0002F7 78                    8847 	.db #0x78	; 120	'x'
      0002F8 00                    8848 	.db #0x00	; 0
      0002F9 9D                    8849 	.db #0x9d	; 157
      0002FA A0                    8850 	.db #0xa0	; 160
      0002FB A0                    8851 	.db #0xa0	; 160
      0002FC 7D                    8852 	.db #0x7d	; 125
      0002FD 3D                    8853 	.db #0x3d	; 61
      0002FE 42                    8854 	.db #0x42	; 66	'B'
      0002FF 42                    8855 	.db #0x42	; 66	'B'
      000300 42                    8856 	.db #0x42	; 66	'B'
      000301 3D                    8857 	.db #0x3d	; 61
      000302 3D                    8858 	.db #0x3d	; 61
      000303 40                    8859 	.db #0x40	; 64
      000304 40                    8860 	.db #0x40	; 64
      000305 40                    8861 	.db #0x40	; 64
      000306 3D                    8862 	.db #0x3d	; 61
      000307 3C                    8863 	.db #0x3c	; 60
      000308 24                    8864 	.db #0x24	; 36
      000309 FF                    8865 	.db #0xff	; 255
      00030A 24                    8866 	.db #0x24	; 36
      00030B 24                    8867 	.db #0x24	; 36
      00030C 48                    8868 	.db #0x48	; 72	'H'
      00030D 7E                    8869 	.db #0x7e	; 126
      00030E 49                    8870 	.db #0x49	; 73	'I'
      00030F 43                    8871 	.db #0x43	; 67	'C'
      000310 66                    8872 	.db #0x66	; 102	'f'
      000311 2B                    8873 	.db #0x2b	; 43
      000312 2F                    8874 	.db #0x2f	; 47
      000313 FC                    8875 	.db #0xfc	; 252
      000314 2F                    8876 	.db #0x2f	; 47
      000315 2B                    8877 	.db #0x2b	; 43
      000316 FF                    8878 	.db #0xff	; 255
      000317 09                    8879 	.db #0x09	; 9
      000318 29                    8880 	.db #0x29	; 41
      000319 F6                    8881 	.db #0xf6	; 246
      00031A 20                    8882 	.db #0x20	; 32
      00031B C0                    8883 	.db #0xc0	; 192
      00031C 88                    8884 	.db #0x88	; 136
      00031D 7E                    8885 	.db #0x7e	; 126
      00031E 09                    8886 	.db #0x09	; 9
      00031F 03                    8887 	.db #0x03	; 3
      000320 20                    8888 	.db #0x20	; 32
      000321 54                    8889 	.db #0x54	; 84	'T'
      000322 54                    8890 	.db #0x54	; 84	'T'
      000323 79                    8891 	.db #0x79	; 121	'y'
      000324 41                    8892 	.db #0x41	; 65	'A'
      000325 00                    8893 	.db #0x00	; 0
      000326 00                    8894 	.db #0x00	; 0
      000327 44                    8895 	.db #0x44	; 68	'D'
      000328 7D                    8896 	.db #0x7d	; 125
      000329 41                    8897 	.db #0x41	; 65	'A'
      00032A 30                    8898 	.db #0x30	; 48	'0'
      00032B 48                    8899 	.db #0x48	; 72	'H'
      00032C 48                    8900 	.db #0x48	; 72	'H'
      00032D 4A                    8901 	.db #0x4a	; 74	'J'
      00032E 32                    8902 	.db #0x32	; 50	'2'
      00032F 38                    8903 	.db #0x38	; 56	'8'
      000330 40                    8904 	.db #0x40	; 64
      000331 40                    8905 	.db #0x40	; 64
      000332 22                    8906 	.db #0x22	; 34
      000333 7A                    8907 	.db #0x7a	; 122	'z'
      000334 00                    8908 	.db #0x00	; 0
      000335 7A                    8909 	.db #0x7a	; 122	'z'
      000336 0A                    8910 	.db #0x0a	; 10
      000337 0A                    8911 	.db #0x0a	; 10
      000338 72                    8912 	.db #0x72	; 114	'r'
      000339 7D                    8913 	.db #0x7d	; 125
      00033A 0D                    8914 	.db #0x0d	; 13
      00033B 19                    8915 	.db #0x19	; 25
      00033C 31                    8916 	.db #0x31	; 49	'1'
      00033D 7D                    8917 	.db #0x7d	; 125
      00033E 26                    8918 	.db #0x26	; 38
      00033F 29                    8919 	.db #0x29	; 41
      000340 29                    8920 	.db #0x29	; 41
      000341 2F                    8921 	.db #0x2f	; 47
      000342 28                    8922 	.db #0x28	; 40
      000343 26                    8923 	.db #0x26	; 38
      000344 29                    8924 	.db #0x29	; 41
      000345 29                    8925 	.db #0x29	; 41
      000346 29                    8926 	.db #0x29	; 41
      000347 26                    8927 	.db #0x26	; 38
      000348 30                    8928 	.db #0x30	; 48	'0'
      000349 48                    8929 	.db #0x48	; 72	'H'
      00034A 4D                    8930 	.db #0x4d	; 77	'M'
      00034B 40                    8931 	.db #0x40	; 64
      00034C 20                    8932 	.db #0x20	; 32
      00034D 38                    8933 	.db #0x38	; 56	'8'
      00034E 08                    8934 	.db #0x08	; 8
      00034F 08                    8935 	.db #0x08	; 8
      000350 08                    8936 	.db #0x08	; 8
      000351 08                    8937 	.db #0x08	; 8
      000352 08                    8938 	.db #0x08	; 8
      000353 08                    8939 	.db #0x08	; 8
      000354 08                    8940 	.db #0x08	; 8
      000355 08                    8941 	.db #0x08	; 8
      000356 38                    8942 	.db #0x38	; 56	'8'
      000357 2F                    8943 	.db #0x2f	; 47
      000358 10                    8944 	.db #0x10	; 16
      000359 C8                    8945 	.db #0xc8	; 200
      00035A AC                    8946 	.db #0xac	; 172
      00035B BA                    8947 	.db #0xba	; 186
      00035C 2F                    8948 	.db #0x2f	; 47
      00035D 10                    8949 	.db #0x10	; 16
      00035E 28                    8950 	.db #0x28	; 40
      00035F 34                    8951 	.db #0x34	; 52	'4'
      000360 FA                    8952 	.db #0xfa	; 250
      000361 00                    8953 	.db #0x00	; 0
      000362 00                    8954 	.db #0x00	; 0
      000363 7B                    8955 	.db #0x7b	; 123
      000364 00                    8956 	.db #0x00	; 0
      000365 00                    8957 	.db #0x00	; 0
      000366 08                    8958 	.db #0x08	; 8
      000367 14                    8959 	.db #0x14	; 20
      000368 2A                    8960 	.db #0x2a	; 42
      000369 14                    8961 	.db #0x14	; 20
      00036A 22                    8962 	.db #0x22	; 34
      00036B 22                    8963 	.db #0x22	; 34
      00036C 14                    8964 	.db #0x14	; 20
      00036D 2A                    8965 	.db #0x2a	; 42
      00036E 14                    8966 	.db #0x14	; 20
      00036F 08                    8967 	.db #0x08	; 8
      000370 AA                    8968 	.db #0xaa	; 170
      000371 00                    8969 	.db #0x00	; 0
      000372 55                    8970 	.db #0x55	; 85	'U'
      000373 00                    8971 	.db #0x00	; 0
      000374 AA                    8972 	.db #0xaa	; 170
      000375 AA                    8973 	.db #0xaa	; 170
      000376 55                    8974 	.db #0x55	; 85	'U'
      000377 AA                    8975 	.db #0xaa	; 170
      000378 55                    8976 	.db #0x55	; 85	'U'
      000379 AA                    8977 	.db #0xaa	; 170
      00037A 00                    8978 	.db #0x00	; 0
      00037B 00                    8979 	.db #0x00	; 0
      00037C 00                    8980 	.db #0x00	; 0
      00037D FF                    8981 	.db #0xff	; 255
      00037E 00                    8982 	.db #0x00	; 0
      00037F 10                    8983 	.db #0x10	; 16
      000380 10                    8984 	.db #0x10	; 16
      000381 10                    8985 	.db #0x10	; 16
      000382 FF                    8986 	.db #0xff	; 255
      000383 00                    8987 	.db #0x00	; 0
      000384 14                    8988 	.db #0x14	; 20
      000385 14                    8989 	.db #0x14	; 20
      000386 14                    8990 	.db #0x14	; 20
      000387 FF                    8991 	.db #0xff	; 255
      000388 00                    8992 	.db #0x00	; 0
      000389 10                    8993 	.db #0x10	; 16
      00038A 10                    8994 	.db #0x10	; 16
      00038B FF                    8995 	.db #0xff	; 255
      00038C 00                    8996 	.db #0x00	; 0
      00038D FF                    8997 	.db #0xff	; 255
      00038E 10                    8998 	.db #0x10	; 16
      00038F 10                    8999 	.db #0x10	; 16
      000390 F0                    9000 	.db #0xf0	; 240
      000391 10                    9001 	.db #0x10	; 16
      000392 F0                    9002 	.db #0xf0	; 240
      000393 14                    9003 	.db #0x14	; 20
      000394 14                    9004 	.db #0x14	; 20
      000395 14                    9005 	.db #0x14	; 20
      000396 FC                    9006 	.db #0xfc	; 252
      000397 00                    9007 	.db #0x00	; 0
      000398 14                    9008 	.db #0x14	; 20
      000399 14                    9009 	.db #0x14	; 20
      00039A F7                    9010 	.db #0xf7	; 247
      00039B 00                    9011 	.db #0x00	; 0
      00039C FF                    9012 	.db #0xff	; 255
      00039D 00                    9013 	.db #0x00	; 0
      00039E 00                    9014 	.db #0x00	; 0
      00039F FF                    9015 	.db #0xff	; 255
      0003A0 00                    9016 	.db #0x00	; 0
      0003A1 FF                    9017 	.db #0xff	; 255
      0003A2 14                    9018 	.db #0x14	; 20
      0003A3 14                    9019 	.db #0x14	; 20
      0003A4 F4                    9020 	.db #0xf4	; 244
      0003A5 04                    9021 	.db #0x04	; 4
      0003A6 FC                    9022 	.db #0xfc	; 252
      0003A7 14                    9023 	.db #0x14	; 20
      0003A8 14                    9024 	.db #0x14	; 20
      0003A9 17                    9025 	.db #0x17	; 23
      0003AA 10                    9026 	.db #0x10	; 16
      0003AB 1F                    9027 	.db #0x1f	; 31
      0003AC 10                    9028 	.db #0x10	; 16
      0003AD 10                    9029 	.db #0x10	; 16
      0003AE 1F                    9030 	.db #0x1f	; 31
      0003AF 10                    9031 	.db #0x10	; 16
      0003B0 1F                    9032 	.db #0x1f	; 31
      0003B1 14                    9033 	.db #0x14	; 20
      0003B2 14                    9034 	.db #0x14	; 20
      0003B3 14                    9035 	.db #0x14	; 20
      0003B4 1F                    9036 	.db #0x1f	; 31
      0003B5 00                    9037 	.db #0x00	; 0
      0003B6 10                    9038 	.db #0x10	; 16
      0003B7 10                    9039 	.db #0x10	; 16
      0003B8 10                    9040 	.db #0x10	; 16
      0003B9 F0                    9041 	.db #0xf0	; 240
      0003BA 00                    9042 	.db #0x00	; 0
      0003BB 00                    9043 	.db #0x00	; 0
      0003BC 00                    9044 	.db #0x00	; 0
      0003BD 00                    9045 	.db #0x00	; 0
      0003BE 1F                    9046 	.db #0x1f	; 31
      0003BF 10                    9047 	.db #0x10	; 16
      0003C0 10                    9048 	.db #0x10	; 16
      0003C1 10                    9049 	.db #0x10	; 16
      0003C2 10                    9050 	.db #0x10	; 16
      0003C3 1F                    9051 	.db #0x1f	; 31
      0003C4 10                    9052 	.db #0x10	; 16
      0003C5 10                    9053 	.db #0x10	; 16
      0003C6 10                    9054 	.db #0x10	; 16
      0003C7 10                    9055 	.db #0x10	; 16
      0003C8 F0                    9056 	.db #0xf0	; 240
      0003C9 10                    9057 	.db #0x10	; 16
      0003CA 00                    9058 	.db #0x00	; 0
      0003CB 00                    9059 	.db #0x00	; 0
      0003CC 00                    9060 	.db #0x00	; 0
      0003CD FF                    9061 	.db #0xff	; 255
      0003CE 10                    9062 	.db #0x10	; 16
      0003CF 10                    9063 	.db #0x10	; 16
      0003D0 10                    9064 	.db #0x10	; 16
      0003D1 10                    9065 	.db #0x10	; 16
      0003D2 10                    9066 	.db #0x10	; 16
      0003D3 10                    9067 	.db #0x10	; 16
      0003D4 10                    9068 	.db #0x10	; 16
      0003D5 10                    9069 	.db #0x10	; 16
      0003D6 10                    9070 	.db #0x10	; 16
      0003D7 FF                    9071 	.db #0xff	; 255
      0003D8 10                    9072 	.db #0x10	; 16
      0003D9 00                    9073 	.db #0x00	; 0
      0003DA 00                    9074 	.db #0x00	; 0
      0003DB 00                    9075 	.db #0x00	; 0
      0003DC FF                    9076 	.db #0xff	; 255
      0003DD 14                    9077 	.db #0x14	; 20
      0003DE 00                    9078 	.db #0x00	; 0
      0003DF 00                    9079 	.db #0x00	; 0
      0003E0 FF                    9080 	.db #0xff	; 255
      0003E1 00                    9081 	.db #0x00	; 0
      0003E2 FF                    9082 	.db #0xff	; 255
      0003E3 00                    9083 	.db #0x00	; 0
      0003E4 00                    9084 	.db #0x00	; 0
      0003E5 1F                    9085 	.db #0x1f	; 31
      0003E6 10                    9086 	.db #0x10	; 16
      0003E7 17                    9087 	.db #0x17	; 23
      0003E8 00                    9088 	.db #0x00	; 0
      0003E9 00                    9089 	.db #0x00	; 0
      0003EA FC                    9090 	.db #0xfc	; 252
      0003EB 04                    9091 	.db #0x04	; 4
      0003EC F4                    9092 	.db #0xf4	; 244
      0003ED 14                    9093 	.db #0x14	; 20
      0003EE 14                    9094 	.db #0x14	; 20
      0003EF 17                    9095 	.db #0x17	; 23
      0003F0 10                    9096 	.db #0x10	; 16
      0003F1 17                    9097 	.db #0x17	; 23
      0003F2 14                    9098 	.db #0x14	; 20
      0003F3 14                    9099 	.db #0x14	; 20
      0003F4 F4                    9100 	.db #0xf4	; 244
      0003F5 04                    9101 	.db #0x04	; 4
      0003F6 F4                    9102 	.db #0xf4	; 244
      0003F7 00                    9103 	.db #0x00	; 0
      0003F8 00                    9104 	.db #0x00	; 0
      0003F9 FF                    9105 	.db #0xff	; 255
      0003FA 00                    9106 	.db #0x00	; 0
      0003FB F7                    9107 	.db #0xf7	; 247
      0003FC 14                    9108 	.db #0x14	; 20
      0003FD 14                    9109 	.db #0x14	; 20
      0003FE 14                    9110 	.db #0x14	; 20
      0003FF 14                    9111 	.db #0x14	; 20
      000400 14                    9112 	.db #0x14	; 20
      000401 14                    9113 	.db #0x14	; 20
      000402 14                    9114 	.db #0x14	; 20
      000403 F7                    9115 	.db #0xf7	; 247
      000404 00                    9116 	.db #0x00	; 0
      000405 F7                    9117 	.db #0xf7	; 247
      000406 14                    9118 	.db #0x14	; 20
      000407 14                    9119 	.db #0x14	; 20
      000408 14                    9120 	.db #0x14	; 20
      000409 17                    9121 	.db #0x17	; 23
      00040A 14                    9122 	.db #0x14	; 20
      00040B 10                    9123 	.db #0x10	; 16
      00040C 10                    9124 	.db #0x10	; 16
      00040D 1F                    9125 	.db #0x1f	; 31
      00040E 10                    9126 	.db #0x10	; 16
      00040F 1F                    9127 	.db #0x1f	; 31
      000410 14                    9128 	.db #0x14	; 20
      000411 14                    9129 	.db #0x14	; 20
      000412 14                    9130 	.db #0x14	; 20
      000413 F4                    9131 	.db #0xf4	; 244
      000414 14                    9132 	.db #0x14	; 20
      000415 10                    9133 	.db #0x10	; 16
      000416 10                    9134 	.db #0x10	; 16
      000417 F0                    9135 	.db #0xf0	; 240
      000418 10                    9136 	.db #0x10	; 16
      000419 F0                    9137 	.db #0xf0	; 240
      00041A 00                    9138 	.db #0x00	; 0
      00041B 00                    9139 	.db #0x00	; 0
      00041C 1F                    9140 	.db #0x1f	; 31
      00041D 10                    9141 	.db #0x10	; 16
      00041E 1F                    9142 	.db #0x1f	; 31
      00041F 00                    9143 	.db #0x00	; 0
      000420 00                    9144 	.db #0x00	; 0
      000421 00                    9145 	.db #0x00	; 0
      000422 1F                    9146 	.db #0x1f	; 31
      000423 14                    9147 	.db #0x14	; 20
      000424 00                    9148 	.db #0x00	; 0
      000425 00                    9149 	.db #0x00	; 0
      000426 00                    9150 	.db #0x00	; 0
      000427 FC                    9151 	.db #0xfc	; 252
      000428 14                    9152 	.db #0x14	; 20
      000429 00                    9153 	.db #0x00	; 0
      00042A 00                    9154 	.db #0x00	; 0
      00042B F0                    9155 	.db #0xf0	; 240
      00042C 10                    9156 	.db #0x10	; 16
      00042D F0                    9157 	.db #0xf0	; 240
      00042E 10                    9158 	.db #0x10	; 16
      00042F 10                    9159 	.db #0x10	; 16
      000430 FF                    9160 	.db #0xff	; 255
      000431 10                    9161 	.db #0x10	; 16
      000432 FF                    9162 	.db #0xff	; 255
      000433 14                    9163 	.db #0x14	; 20
      000434 14                    9164 	.db #0x14	; 20
      000435 14                    9165 	.db #0x14	; 20
      000436 FF                    9166 	.db #0xff	; 255
      000437 14                    9167 	.db #0x14	; 20
      000438 10                    9168 	.db #0x10	; 16
      000439 10                    9169 	.db #0x10	; 16
      00043A 10                    9170 	.db #0x10	; 16
      00043B 1F                    9171 	.db #0x1f	; 31
      00043C 00                    9172 	.db #0x00	; 0
      00043D 00                    9173 	.db #0x00	; 0
      00043E 00                    9174 	.db #0x00	; 0
      00043F 00                    9175 	.db #0x00	; 0
      000440 F0                    9176 	.db #0xf0	; 240
      000441 10                    9177 	.db #0x10	; 16
      000442 FF                    9178 	.db #0xff	; 255
      000443 FF                    9179 	.db #0xff	; 255
      000444 FF                    9180 	.db #0xff	; 255
      000445 FF                    9181 	.db #0xff	; 255
      000446 FF                    9182 	.db #0xff	; 255
      000447 F0                    9183 	.db #0xf0	; 240
      000448 F0                    9184 	.db #0xf0	; 240
      000449 F0                    9185 	.db #0xf0	; 240
      00044A F0                    9186 	.db #0xf0	; 240
      00044B F0                    9187 	.db #0xf0	; 240
      00044C FF                    9188 	.db #0xff	; 255
      00044D FF                    9189 	.db #0xff	; 255
      00044E FF                    9190 	.db #0xff	; 255
      00044F 00                    9191 	.db #0x00	; 0
      000450 00                    9192 	.db #0x00	; 0
      000451 00                    9193 	.db #0x00	; 0
      000452 00                    9194 	.db #0x00	; 0
      000453 00                    9195 	.db #0x00	; 0
      000454 FF                    9196 	.db #0xff	; 255
      000455 FF                    9197 	.db #0xff	; 255
      000456 0F                    9198 	.db #0x0f	; 15
      000457 0F                    9199 	.db #0x0f	; 15
      000458 0F                    9200 	.db #0x0f	; 15
      000459 0F                    9201 	.db #0x0f	; 15
      00045A 0F                    9202 	.db #0x0f	; 15
      00045B 38                    9203 	.db #0x38	; 56	'8'
      00045C 44                    9204 	.db #0x44	; 68	'D'
      00045D 44                    9205 	.db #0x44	; 68	'D'
      00045E 38                    9206 	.db #0x38	; 56	'8'
      00045F 44                    9207 	.db #0x44	; 68	'D'
      000460 FC                    9208 	.db #0xfc	; 252
      000461 4A                    9209 	.db #0x4a	; 74	'J'
      000462 4A                    9210 	.db #0x4a	; 74	'J'
      000463 4A                    9211 	.db #0x4a	; 74	'J'
      000464 34                    9212 	.db #0x34	; 52	'4'
      000465 7E                    9213 	.db #0x7e	; 126
      000466 02                    9214 	.db #0x02	; 2
      000467 02                    9215 	.db #0x02	; 2
      000468 06                    9216 	.db #0x06	; 6
      000469 06                    9217 	.db #0x06	; 6
      00046A 02                    9218 	.db #0x02	; 2
      00046B 7E                    9219 	.db #0x7e	; 126
      00046C 02                    9220 	.db #0x02	; 2
      00046D 7E                    9221 	.db #0x7e	; 126
      00046E 02                    9222 	.db #0x02	; 2
      00046F 63                    9223 	.db #0x63	; 99	'c'
      000470 55                    9224 	.db #0x55	; 85	'U'
      000471 49                    9225 	.db #0x49	; 73	'I'
      000472 41                    9226 	.db #0x41	; 65	'A'
      000473 63                    9227 	.db #0x63	; 99	'c'
      000474 38                    9228 	.db #0x38	; 56	'8'
      000475 44                    9229 	.db #0x44	; 68	'D'
      000476 44                    9230 	.db #0x44	; 68	'D'
      000477 3C                    9231 	.db #0x3c	; 60
      000478 04                    9232 	.db #0x04	; 4
      000479 40                    9233 	.db #0x40	; 64
      00047A 7E                    9234 	.db #0x7e	; 126
      00047B 20                    9235 	.db #0x20	; 32
      00047C 1E                    9236 	.db #0x1e	; 30
      00047D 20                    9237 	.db #0x20	; 32
      00047E 06                    9238 	.db #0x06	; 6
      00047F 02                    9239 	.db #0x02	; 2
      000480 7E                    9240 	.db #0x7e	; 126
      000481 02                    9241 	.db #0x02	; 2
      000482 02                    9242 	.db #0x02	; 2
      000483 99                    9243 	.db #0x99	; 153
      000484 A5                    9244 	.db #0xa5	; 165
      000485 E7                    9245 	.db #0xe7	; 231
      000486 A5                    9246 	.db #0xa5	; 165
      000487 99                    9247 	.db #0x99	; 153
      000488 1C                    9248 	.db #0x1c	; 28
      000489 2A                    9249 	.db #0x2a	; 42
      00048A 49                    9250 	.db #0x49	; 73	'I'
      00048B 2A                    9251 	.db #0x2a	; 42
      00048C 1C                    9252 	.db #0x1c	; 28
      00048D 4C                    9253 	.db #0x4c	; 76	'L'
      00048E 72                    9254 	.db #0x72	; 114	'r'
      00048F 01                    9255 	.db #0x01	; 1
      000490 72                    9256 	.db #0x72	; 114	'r'
      000491 4C                    9257 	.db #0x4c	; 76	'L'
      000492 30                    9258 	.db #0x30	; 48	'0'
      000493 4A                    9259 	.db #0x4a	; 74	'J'
      000494 4D                    9260 	.db #0x4d	; 77	'M'
      000495 4D                    9261 	.db #0x4d	; 77	'M'
      000496 30                    9262 	.db #0x30	; 48	'0'
      000497 30                    9263 	.db #0x30	; 48	'0'
      000498 48                    9264 	.db #0x48	; 72	'H'
      000499 78                    9265 	.db #0x78	; 120	'x'
      00049A 48                    9266 	.db #0x48	; 72	'H'
      00049B 30                    9267 	.db #0x30	; 48	'0'
      00049C BC                    9268 	.db #0xbc	; 188
      00049D 62                    9269 	.db #0x62	; 98	'b'
      00049E 5A                    9270 	.db #0x5a	; 90	'Z'
      00049F 46                    9271 	.db #0x46	; 70	'F'
      0004A0 3D                    9272 	.db #0x3d	; 61
      0004A1 3E                    9273 	.db #0x3e	; 62
      0004A2 49                    9274 	.db #0x49	; 73	'I'
      0004A3 49                    9275 	.db #0x49	; 73	'I'
      0004A4 49                    9276 	.db #0x49	; 73	'I'
      0004A5 00                    9277 	.db #0x00	; 0
      0004A6 7E                    9278 	.db #0x7e	; 126
      0004A7 01                    9279 	.db #0x01	; 1
      0004A8 01                    9280 	.db #0x01	; 1
      0004A9 01                    9281 	.db #0x01	; 1
      0004AA 7E                    9282 	.db #0x7e	; 126
      0004AB 2A                    9283 	.db #0x2a	; 42
      0004AC 2A                    9284 	.db #0x2a	; 42
      0004AD 2A                    9285 	.db #0x2a	; 42
      0004AE 2A                    9286 	.db #0x2a	; 42
      0004AF 2A                    9287 	.db #0x2a	; 42
      0004B0 44                    9288 	.db #0x44	; 68	'D'
      0004B1 44                    9289 	.db #0x44	; 68	'D'
      0004B2 5F                    9290 	.db #0x5f	; 95
      0004B3 44                    9291 	.db #0x44	; 68	'D'
      0004B4 44                    9292 	.db #0x44	; 68	'D'
      0004B5 40                    9293 	.db #0x40	; 64
      0004B6 51                    9294 	.db #0x51	; 81	'Q'
      0004B7 4A                    9295 	.db #0x4a	; 74	'J'
      0004B8 44                    9296 	.db #0x44	; 68	'D'
      0004B9 40                    9297 	.db #0x40	; 64
      0004BA 40                    9298 	.db #0x40	; 64
      0004BB 44                    9299 	.db #0x44	; 68	'D'
      0004BC 4A                    9300 	.db #0x4a	; 74	'J'
      0004BD 51                    9301 	.db #0x51	; 81	'Q'
      0004BE 40                    9302 	.db #0x40	; 64
      0004BF 00                    9303 	.db #0x00	; 0
      0004C0 00                    9304 	.db #0x00	; 0
      0004C1 FF                    9305 	.db #0xff	; 255
      0004C2 01                    9306 	.db #0x01	; 1
      0004C3 03                    9307 	.db #0x03	; 3
      0004C4 E0                    9308 	.db #0xe0	; 224
      0004C5 80                    9309 	.db #0x80	; 128
      0004C6 FF                    9310 	.db #0xff	; 255
      0004C7 00                    9311 	.db #0x00	; 0
      0004C8 00                    9312 	.db #0x00	; 0
      0004C9 08                    9313 	.db #0x08	; 8
      0004CA 08                    9314 	.db #0x08	; 8
      0004CB 6B                    9315 	.db #0x6b	; 107	'k'
      0004CC 6B                    9316 	.db #0x6b	; 107	'k'
      0004CD 08                    9317 	.db #0x08	; 8
      0004CE 36                    9318 	.db #0x36	; 54	'6'
      0004CF 12                    9319 	.db #0x12	; 18
      0004D0 36                    9320 	.db #0x36	; 54	'6'
      0004D1 24                    9321 	.db #0x24	; 36
      0004D2 36                    9322 	.db #0x36	; 54	'6'
      0004D3 06                    9323 	.db #0x06	; 6
      0004D4 0F                    9324 	.db #0x0f	; 15
      0004D5 09                    9325 	.db #0x09	; 9
      0004D6 0F                    9326 	.db #0x0f	; 15
      0004D7 06                    9327 	.db #0x06	; 6
      0004D8 00                    9328 	.db #0x00	; 0
      0004D9 00                    9329 	.db #0x00	; 0
      0004DA 18                    9330 	.db #0x18	; 24
      0004DB 18                    9331 	.db #0x18	; 24
      0004DC 00                    9332 	.db #0x00	; 0
      0004DD 00                    9333 	.db #0x00	; 0
      0004DE 00                    9334 	.db #0x00	; 0
      0004DF 10                    9335 	.db #0x10	; 16
      0004E0 10                    9336 	.db #0x10	; 16
      0004E1 00                    9337 	.db #0x00	; 0
      0004E2 30                    9338 	.db #0x30	; 48	'0'
      0004E3 40                    9339 	.db #0x40	; 64
      0004E4 FF                    9340 	.db #0xff	; 255
      0004E5 01                    9341 	.db #0x01	; 1
      0004E6 01                    9342 	.db #0x01	; 1
      0004E7 00                    9343 	.db #0x00	; 0
      0004E8 1F                    9344 	.db #0x1f	; 31
      0004E9 01                    9345 	.db #0x01	; 1
      0004EA 01                    9346 	.db #0x01	; 1
      0004EB 1E                    9347 	.db #0x1e	; 30
      0004EC 00                    9348 	.db #0x00	; 0
      0004ED 19                    9349 	.db #0x19	; 25
      0004EE 1D                    9350 	.db #0x1d	; 29
      0004EF 17                    9351 	.db #0x17	; 23
      0004F0 12                    9352 	.db #0x12	; 18
      0004F1 00                    9353 	.db #0x00	; 0
      0004F2 3C                    9354 	.db #0x3c	; 60
      0004F3 3C                    9355 	.db #0x3c	; 60
      0004F4 3C                    9356 	.db #0x3c	; 60
      0004F5 3C                    9357 	.db #0x3c	; 60
      0004F6 00                    9358 	.db #0x00	; 0
      0004F7 00                    9359 	.db #0x00	; 0
      0004F8 00                    9360 	.db #0x00	; 0
      0004F9 00                    9361 	.db #0x00	; 0
      0004FA 00                    9362 	.db #0x00	; 0
      0004FB                       9363 _keypad:
      0004FB 31                    9364 	.db #0x31	; 49	'1'
      0004FC 34                    9365 	.db #0x34	; 52	'4'
      0004FD 37                    9366 	.db #0x37	; 55	'7'
      0004FE 45                    9367 	.db #0x45	; 69	'E'
      0004FF 32                    9368 	.db #0x32	; 50	'2'
      000500 35                    9369 	.db #0x35	; 53	'5'
      000501 38                    9370 	.db #0x38	; 56	'8'
      000502 30                    9371 	.db #0x30	; 48	'0'
      000503 33                    9372 	.db #0x33	; 51	'3'
      000504 36                    9373 	.db #0x36	; 54	'6'
      000505 39                    9374 	.db #0x39	; 57	'9'
      000506 46                    9375 	.db #0x46	; 70	'F'
      000507 41                    9376 	.db #0x41	; 65	'A'
      000508 42                    9377 	.db #0x42	; 66	'B'
      000509 43                    9378 	.db #0x43	; 67	'C'
      00050A 44                    9379 	.db #0x44	; 68	'D'
                                   9380 	.area CONST   (CODE)
      00050B                       9381 ___str_0:
      00050B 3A                    9382 	.ascii ":"
      00050C 00                    9383 	.db 0x00
                                   9384 	.area CSEG    (CODE)
                                   9385 	.area CONST   (CODE)
      00050D                       9386 ___str_1:
      00050D 30 78                 9387 	.ascii "0x"
      00050F 00                    9388 	.db 0x00
                                   9389 	.area CSEG    (CODE)
                                   9390 	.area CONST   (CODE)
      000510                       9391 ___str_2:
      000510 0A                    9392 	.db 0x0a
      000511 20 20 20 49 6E 76 61  9393 	.ascii "   Invalid"
             6C 69 64
      00051B 0A                    9394 	.db 0x0a
      00051C 0A                    9395 	.db 0x0a
      00051D 00                    9396 	.db 0x00
                                   9397 	.area CSEG    (CODE)
                                   9398 	.area CONST   (CODE)
      00051E                       9399 ___str_3:
      00051E 20 20 20 20 49 6E 70  9400 	.ascii "    Input"
             75 74
      000527 00                    9401 	.db 0x00
                                   9402 	.area CSEG    (CODE)
                                   9403 	.area CONST   (CODE)
      000528                       9404 ___str_4:
      000528 0A                    9405 	.db 0x0a
      000529 53 65 6C 65 63 74 20  9406 	.ascii "Select Data"
             44 61 74 61
      000534 0A                    9407 	.db 0x0a
      000535 54 79 70 65 3A        9408 	.ascii "Type:"
      00053A 0A                    9409 	.db 0x0a
      00053B 0A                    9410 	.db 0x0a
      00053C 00                    9411 	.db 0x00
                                   9412 	.area CSEG    (CODE)
                                   9413 	.area CONST   (CODE)
      00053D                       9414 ___str_5:
      00053D 28 31 29 20 42 79 74  9415 	.ascii "(1) Byte"
             65
      000545 0A                    9416 	.db 0x0a
      000546 00                    9417 	.db 0x00
                                   9418 	.area CSEG    (CODE)
                                   9419 	.area CONST   (CODE)
      000547                       9420 ___str_6:
      000547 28 32 29 20 57 6F 72  9421 	.ascii "(2) Word"
             64
      00054F 0A                    9422 	.db 0x0a
      000550 00                    9423 	.db 0x00
                                   9424 	.area CSEG    (CODE)
                                   9425 	.area CONST   (CODE)
      000551                       9426 ___str_7:
      000551 28 33 29 20 44 6F 75  9427 	.ascii "(3) Double"
             62 6C 65
      00055B 0A                    9428 	.db 0x0a
      00055C 20 20 20 20 57 6F 72  9429 	.ascii "    Word"
             64
      000564 0A                    9430 	.db 0x0a
      000565 0A                    9431 	.db 0x0a
      000566 20 20 5F              9432 	.ascii "  _"
      000569 00                    9433 	.db 0x00
                                   9434 	.area CSEG    (CODE)
                                   9435 	.area CONST   (CODE)
      00056A                       9436 ___str_8:
      00056A 0A                    9437 	.db 0x0a
      00056B 45 6E 74 65 72 20 44  9438 	.ascii "Enter Data"
             61 74 61
      000575 0A                    9439 	.db 0x0a
      000576 53 69 7A 65 3A        9440 	.ascii "Size:"
      00057B 0A                    9441 	.db 0x0a
      00057C 0A                    9442 	.db 0x0a
      00057D 20 20 30 78 5F 5F 5F  9443 	.ascii "  0x____"
             5F
      000585 00                    9444 	.db 0x00
                                   9445 	.area CSEG    (CODE)
                                   9446 	.area CONST   (CODE)
      000586                       9447 ___str_9:
      000586 0A                    9448 	.db 0x0a
      000587 57 72 69 74 69 6E 67  9449 	.ascii "Writing 0x55"
             20 30 78 35 35
      000593 0A                    9450 	.db 0x0a
      000594 74 6F 20 61 6C 6C     9451 	.ascii "to all"
      00059A 0A                    9452 	.db 0x0a
      00059B 65 78 74 65 72 6E 61  9453 	.ascii "external RAM"
             6C 20 52 41 4D
      0005A7 0A                    9454 	.db 0x0a
      0005A8 6C 6F 63 61 74 69 6F  9455 	.ascii "locations."
             6E 73 2E
      0005B2 0A                    9456 	.db 0x0a
      0005B3 0A                    9457 	.db 0x0a
      0005B4 00                    9458 	.db 0x00
                                   9459 	.area CSEG    (CODE)
                                   9460 	.area CONST   (CODE)
      0005B5                       9461 ___str_10:
      0005B5 57 72 69 74 65        9462 	.ascii "Write"
      0005BA 0A                    9463 	.db 0x0a
      0005BB 63 6F 6D 70 6C 65 74  9464 	.ascii "complete."
             65 2E
      0005C4 0A                    9465 	.db 0x0a
      0005C5 00                    9466 	.db 0x00
                                   9467 	.area CSEG    (CODE)
                                   9468 	.area CONST   (CODE)
      0005C6                       9469 ___str_11:
      0005C6 0A                    9470 	.db 0x0a
      0005C7 56 65 72 69 66 79 69  9471 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0005D4 0A                    9472 	.db 0x0a
      0005D5 52 41 4D 20 6C 6F 63  9473 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0005E2 0A                    9474 	.db 0x0a
      0005E3 65 71 75 61 6C 20 30  9475 	.ascii "equal 0x55."
             78 35 35 2E
      0005EE 0A                    9476 	.db 0x0a
      0005EF 0A                    9477 	.db 0x0a
      0005F0 00                    9478 	.db 0x00
                                   9479 	.area CSEG    (CODE)
                                   9480 	.area CONST   (CODE)
      0005F1                       9481 ___str_12:
      0005F1 31 73 74 20 52 41 4D  9482 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      0005FE 0A                    9483 	.db 0x0a
      0005FF 75 6E 73 75 63 63 65  9484 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      00060C 0A                    9485 	.db 0x0a
      00060D 0A                    9486 	.db 0x0a
      00060E 00                    9487 	.db 0x00
                                   9488 	.area CSEG    (CODE)
                                   9489 	.area CONST   (CODE)
      00060F                       9490 ___str_13:
      00060F 45 72 72 6F 72 20 61  9491 	.ascii "Error at:"
             74 3A
      000618 0A                    9492 	.db 0x0a
      000619 00                    9493 	.db 0x00
                                   9494 	.area CSEG    (CODE)
                                   9495 	.area CONST   (CODE)
      00061A                       9496 ___str_14:
      00061A 3A 20 30 78           9497 	.ascii ": 0x"
      00061E 00                    9498 	.db 0x00
                                   9499 	.area CSEG    (CODE)
                                   9500 	.area CONST   (CODE)
      00061F                       9501 ___str_15:
      00061F 52 65 74 75 72 6E 69  9502 	.ascii "Returning to"
             6E 67 20 74 6F
      00062B 0A                    9503 	.db 0x0a
      00062C 6D 61 69 6E 20 6D 65  9504 	.ascii "main menu."
             6E 75 2E
      000636 00                    9505 	.db 0x00
                                   9506 	.area CSEG    (CODE)
                                   9507 	.area CONST   (CODE)
      000637                       9508 ___str_16:
      000637 31 73 74 20 52 41 4D  9509 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      000644 0A                    9510 	.db 0x0a
      000645 73 75 63 63 65 73 73  9511 	.ascii "successful."
             66 75 6C 2E
      000650 0A                    9512 	.db 0x0a
      000651 0A                    9513 	.db 0x0a
      000652 00                    9514 	.db 0x00
                                   9515 	.area CSEG    (CODE)
                                   9516 	.area CONST   (CODE)
      000653                       9517 ___str_17:
      000653 0A                    9518 	.db 0x0a
      000654 57 72 69 74 69 6E 67  9519 	.ascii "Writing 0xAA"
             20 30 78 41 41
      000660 0A                    9520 	.db 0x0a
      000661 74 6F 20 61 6C 6C     9521 	.ascii "to all"
      000667 0A                    9522 	.db 0x0a
      000668 65 78 74 65 72 6E 61  9523 	.ascii "external RAM"
             6C 20 52 41 4D
      000674 0A                    9524 	.db 0x0a
      000675 6C 6F 63 61 74 69 6F  9525 	.ascii "locations."
             6E 73 2E
      00067F 0A                    9526 	.db 0x0a
      000680 0A                    9527 	.db 0x0a
      000681 00                    9528 	.db 0x00
                                   9529 	.area CSEG    (CODE)
                                   9530 	.area CONST   (CODE)
      000682                       9531 ___str_18:
      000682 0A                    9532 	.db 0x0a
      000683 56 65 72 69 66 79 69  9533 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      000690 0A                    9534 	.db 0x0a
      000691 52 41 4D 20 6C 6F 63  9535 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      00069E 0A                    9536 	.db 0x0a
      00069F 65 71 75 61 6C 20 30  9537 	.ascii "equal 0xAA."
             78 41 41 2E
      0006AA 0A                    9538 	.db 0x0a
      0006AB 0A                    9539 	.db 0x0a
      0006AC 00                    9540 	.db 0x00
                                   9541 	.area CSEG    (CODE)
                                   9542 	.area CONST   (CODE)
      0006AD                       9543 ___str_19:
      0006AD 32 6E 64 20 52 41 4D  9544 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006BA 0A                    9545 	.db 0x0a
      0006BB 75 6E 73 75 63 63 65  9546 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      0006C8 0A                    9547 	.db 0x0a
      0006C9 0A                    9548 	.db 0x0a
      0006CA 00                    9549 	.db 0x00
                                   9550 	.area CSEG    (CODE)
                                   9551 	.area CONST   (CODE)
      0006CB                       9552 ___str_20:
      0006CB 32 6E 64 20 52 41 4D  9553 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006D8 0A                    9554 	.db 0x0a
      0006D9 73 75 63 63 65 73 73  9555 	.ascii "successful."
             66 75 6C 2E
      0006E4 0A                    9556 	.db 0x0a
      0006E5 0A                    9557 	.db 0x0a
      0006E6 00                    9558 	.db 0x00
                                   9559 	.area CSEG    (CODE)
                                   9560 	.area CONST   (CODE)
      0006E7                       9561 ___str_21:
      0006E7 52 41 4D 20 63 68 65  9562 	.ascii "RAM check"
             63 6B
      0006F0 0A                    9563 	.db 0x0a
      0006F1 63 6F 6D 70 6C 65 74  9564 	.ascii "complete."
             65 2E
      0006FA 0A                    9565 	.db 0x0a
      0006FB 0A                    9566 	.db 0x0a
      0006FC 00                    9567 	.db 0x00
                                   9568 	.area CSEG    (CODE)
                                   9569 	.area CONST   (CODE)
      0006FD                       9570 ___str_22:
      0006FD 0A                    9571 	.db 0x0a
      0006FE 45 6E 74 65 72 20 73  9572 	.ascii "Enter source"
             6F 75 72 63 65
      00070A 0A                    9573 	.db 0x0a
      00070B 73 74 61 72 74 69 6E  9574 	.ascii "starting RAM"
             67 20 52 41 4D
      000717 0A                    9575 	.db 0x0a
      000718 61 64 64 72 65 73 73  9576 	.ascii "address:"
             3A
      000720 0A                    9577 	.db 0x0a
      000721 0A                    9578 	.db 0x0a
      000722 0A                    9579 	.db 0x0a
      000723 20 20 30 78 5F 5F 5F  9580 	.ascii "  0x____"
             5F
      00072B 00                    9581 	.db 0x00
                                   9582 	.area CSEG    (CODE)
                                   9583 	.area CONST   (CODE)
      00072C                       9584 ___str_23:
      00072C 0A                    9585 	.db 0x0a
      00072D 45 6E 74 65 72        9586 	.ascii "Enter"
      000732 0A                    9587 	.db 0x0a
      000733 64 65 73 74 69 6E 61  9588 	.ascii "destination"
             74 69 6F 6E
      00073E 0A                    9589 	.db 0x0a
      00073F 73 74 61 72 74 69 6E  9590 	.ascii "starting RAM"
             67 20 52 41 4D
      00074B 0A                    9591 	.db 0x0a
      00074C 61 64 64 72 65 73 73  9592 	.ascii "address:"
             3A
      000754 0A                    9593 	.db 0x0a
      000755 0A                    9594 	.db 0x0a
      000756 0A                    9595 	.db 0x0a
      000757 20 20 30 78 5F 5F 5F  9596 	.ascii "  0x____"
             5F
      00075F 00                    9597 	.db 0x00
                                   9598 	.area CSEG    (CODE)
                                   9599 	.area CONST   (CODE)
      000760                       9600 ___str_24:
      000760 0A                    9601 	.db 0x0a
      000761 4D 6F 76 65 20 63 6F  9602 	.ascii "Move complete."
             6D 70 6C 65 74 65 2E
      00076F 0A                    9603 	.db 0x0a
      000770 0A                    9604 	.db 0x0a
      000771 00                    9605 	.db 0x00
                                   9606 	.area CSEG    (CODE)
                                   9607 	.area CONST   (CODE)
      000772                       9608 ___str_25:
      000772 0A                    9609 	.db 0x0a
      000773 45 6E 74 65 72        9610 	.ascii "Enter"
      000778 0A                    9611 	.db 0x0a
      000779 73 74 61 72 74 69 6E  9612 	.ascii "starting RAM"
             67 20 52 41 4D
      000785 0A                    9613 	.db 0x0a
      000786 61 64 64 72 65 73 73  9614 	.ascii "address:"
             3A
      00078E 0A                    9615 	.db 0x0a
      00078F 0A                    9616 	.db 0x0a
      000790 20 20 30 78 5F 5F 5F  9617 	.ascii "  0x____"
             5F
      000798 00                    9618 	.db 0x00
                                   9619 	.area CSEG    (CODE)
                                   9620 	.area CONST   (CODE)
      000799                       9621 ___str_26:
      000799 0A                    9622 	.db 0x0a
      00079A 45 6E 74 65 72 20 73  9623 	.ascii "Enter search"
             65 61 72 63 68
      0007A6 0A                    9624 	.db 0x0a
      0007A7 76 61 6C 75 65 3A     9625 	.ascii "value:"
      0007AD 0A                    9626 	.db 0x0a
      0007AE 0A                    9627 	.db 0x0a
      0007AF 20 20 30 78 5F 5F     9628 	.ascii "  0x__"
      0007B5 00                    9629 	.db 0x00
                                   9630 	.area CSEG    (CODE)
                                   9631 	.area CONST   (CODE)
      0007B6                       9632 ___str_27:
      0007B6 0A                    9633 	.db 0x0a
      0007B7 30 78                 9634 	.ascii "0x"
      0007B9 00                    9635 	.db 0x00
                                   9636 	.area CSEG    (CODE)
                                   9637 	.area CONST   (CODE)
      0007BA                       9638 ___str_28:
      0007BA 20 66 6F 75 6E 64     9639 	.ascii " found"
      0007C0 0A                    9640 	.db 0x0a
      0007C1 00                    9641 	.db 0x00
                                   9642 	.area CSEG    (CODE)
                                   9643 	.area CONST   (CODE)
      0007C2                       9644 ___str_29:
      0007C2 30 78 31 30 30 30 30  9645 	.ascii "0x10000"
      0007C9 00                    9646 	.db 0x00
                                   9647 	.area CSEG    (CODE)
                                   9648 	.area CONST   (CODE)
      0007CA                       9649 ___str_30:
      0007CA 0A                    9650 	.db 0x0a
      0007CB 74 69 6D 65 73 2E     9651 	.ascii "times."
      0007D1 00                    9652 	.db 0x00
                                   9653 	.area CSEG    (CODE)
                                   9654 	.area CONST   (CODE)
      0007D2                       9655 ___str_31:
      0007D2 20 6E 6F 74           9656 	.ascii " not"
      0007D6 0A                    9657 	.db 0x0a
      0007D7 66 6F 75 6E 64 20 69  9658 	.ascii "found in"
             6E
      0007DF 0A                    9659 	.db 0x0a
      0007E0 65 78 74 65 72 6E 61  9660 	.ascii "external RAM"
             6C 20 52 41 4D
      0007EC 0A                    9661 	.db 0x0a
      0007ED 00                    9662 	.db 0x00
                                   9663 	.area CSEG    (CODE)
                                   9664 	.area CONST   (CODE)
      0007EE                       9665 ___str_32:
      0007EE 20 2D                 9666 	.ascii " -"
      0007F0 0A                    9667 	.db 0x0a
      0007F1 00                    9668 	.db 0x00
                                   9669 	.area CSEG    (CODE)
                                   9670 	.area CONST   (CODE)
      0007F2                       9671 ___str_33:
      0007F2 0A                    9672 	.db 0x0a
      0007F3 00                    9673 	.db 0x00
                                   9674 	.area CSEG    (CODE)
                                   9675 	.area CONST   (CODE)
      0007F4                       9676 ___str_34:
      0007F4 20 20 28 30 29 20 2D  9677 	.ascii "  (0) - Next Page"
             20 4E 65 78 74 20 50
             61 67 65
      000805 0A                    9678 	.db 0x0a
      000806 20 20 28 31 29 20 2D  9679 	.ascii "  (1) - Prev Page"
             20 50 72 65 76 20 50
             61 67 65
      000817 0A                    9680 	.db 0x0a
      000818 20 20 28 45 29 20 2D  9681 	.ascii "  (E) - END"
             20 45 4E 44
      000823 0A                    9682 	.db 0x0a
      000824 00                    9683 	.db 0x00
                                   9684 	.area CSEG    (CODE)
                                   9685 	.area CONST   (CODE)
      000825                       9686 ___str_35:
      000825 0A                    9687 	.db 0x0a
      000826 45 6E 64 20 6F 66 20  9688 	.ascii "End of Data."
             44 61 74 61 2E
      000832 00                    9689 	.db 0x00
                                   9690 	.area CSEG    (CODE)
                                   9691 	.area CONST   (CODE)
      000833                       9692 ___str_36:
      000833 45 6E 64 20 6F 66 20  9693 	.ascii "End of Data"
             44 61 74 61
      00083E 00                    9694 	.db 0x00
                                   9695 	.area CSEG    (CODE)
                                   9696 	.area CONST   (CODE)
      00083F                       9697 ___str_37:
      00083F 0A                    9698 	.db 0x0a
      000840 52 65 74 75 72 6E 69  9699 	.ascii "Returning to"
             6E 67 20 74 6F
      00084C 0A                    9700 	.db 0x0a
      00084D 4D 61 69 6E 20 4D 65  9701 	.ascii "Main Menu."
             6E 75 2E
      000857 00                    9702 	.db 0x00
                                   9703 	.area CSEG    (CODE)
                                   9704 	.area CONST   (CODE)
      000858                       9705 ___str_38:
      000858 0A                    9706 	.db 0x0a
      000859 45 6E 74 65 72 20 73  9707 	.ascii "Enter source"
             6F 75 72 63 65
      000865 0A                    9708 	.db 0x0a
      000866 73 74 61 72 74 69 6E  9709 	.ascii "starting RAM"
             67 20 52 41 4D
      000872 0A                    9710 	.db 0x0a
      000873 61 64 64 72 65 73 73  9711 	.ascii "address:"
             3A
      00087B 0A                    9712 	.db 0x0a
      00087C 0A                    9713 	.db 0x0a
      00087D 20 20 30 78 5F 5F 5F  9714 	.ascii "  0x____"
             5F
      000885 00                    9715 	.db 0x00
                                   9716 	.area CSEG    (CODE)
                                   9717 	.area CONST   (CODE)
      000886                       9718 ___str_39:
      000886 0A                    9719 	.db 0x0a
      000887 0A                    9720 	.db 0x0a
      000888 4E 65 77 20 76 61 6C  9721 	.ascii "New value:"
             75 65 3A
      000892 0A                    9722 	.db 0x0a
      000893 20 20 30 78 5F 5F     9723 	.ascii "  0x__"
      000899 00                    9724 	.db 0x00
                                   9725 	.area CSEG    (CODE)
                                   9726 	.area CONST   (CODE)
      00089A                       9727 ___str_40:
      00089A 0A                    9728 	.db 0x0a
      00089B 0A                    9729 	.db 0x0a
      00089C 0A                    9730 	.db 0x0a
      00089D 0A                    9731 	.db 0x0a
      00089E 28 31 29 20 45 64 69  9732 	.ascii "(1) Edit next"
             74 20 6E 65 78 74
      0008AB 0A                    9733 	.db 0x0a
      0008AC 52 41 4D 20 6C 6F 63  9734 	.ascii "RAM location"
             61 74 69 6F 6E
      0008B8 0A                    9735 	.db 0x0a
      0008B9 0A                    9736 	.db 0x0a
      0008BA 00                    9737 	.db 0x00
                                   9738 	.area CSEG    (CODE)
                                   9739 	.area CONST   (CODE)
      0008BB                       9740 ___str_41:
      0008BB 28 45 29 20 45 6E 64  9741 	.ascii "(E) End"
      0008C2 00                    9742 	.db 0x00
                                   9743 	.area CSEG    (CODE)
                                   9744 	.area CONST   (CODE)
      0008C3                       9745 ___str_42:
      0008C3 0A                    9746 	.db 0x0a
      0008C4 45 6E 64 20 6F 66 20  9747 	.ascii "End of data."
             64 61 74 61 2E
      0008D0 0A                    9748 	.db 0x0a
      0008D1 00                    9749 	.db 0x00
                                   9750 	.area CSEG    (CODE)
                                   9751 	.area CONST   (CODE)
      0008D2                       9752 ___str_43:
      0008D2 0A                    9753 	.db 0x0a
      0008D3 52 65 74 75 72 6E 69  9754 	.ascii "Returning to"
             6E 67 20 74 6F
      0008DF 0A                    9755 	.db 0x0a
      0008E0 6D 61 69 6E 20 6D 65  9756 	.ascii "main menu."
             6E 75 2E
      0008EA 00                    9757 	.db 0x00
                                   9758 	.area CSEG    (CODE)
                                   9759 	.area CONST   (CODE)
      0008EB                       9760 ___str_44:
      0008EB 20 6E 6F 74           9761 	.ascii " not"
      0008EF 0A                    9762 	.db 0x0a
      0008F0 66 6F 75 6E 64 20 69  9763 	.ascii "found in"
             6E
      0008F8 0A                    9764 	.db 0x0a
      0008F9 61 64 64 72 65 73 73  9765 	.ascii "address range"
             20 72 61 6E 67 65
      000906 0A                    9766 	.db 0x0a
      000907 0A                    9767 	.db 0x0a
      000908 00                    9768 	.db 0x00
                                   9769 	.area CSEG    (CODE)
                                   9770 	.area CONST   (CODE)
      000909                       9771 ___str_45:
      000909 20 66 6F 75 6E 64 20  9772 	.ascii " found at"
             61 74
      000912 0A                    9773 	.db 0x0a
      000913 74 68 65 20 66 6F 6C  9774 	.ascii "the following"
             6C 6F 77 69 6E 67
      000920 0A                    9775 	.db 0x0a
      000921 61 64 64 72 65 73 73  9776 	.ascii "addresses:"
             65 73 3A
      00092B 0A                    9777 	.db 0x0a
      00092C 0A                    9778 	.db 0x0a
      00092D 00                    9779 	.db 0x00
                                   9780 	.area CSEG    (CODE)
                                   9781 	.area CONST   (CODE)
      00092E                       9782 ___str_46:
      00092E 45 6E 64 20 6F 66 20  9783 	.ascii "End of Data."
             44 61 74 61 2E
      00093A 00                    9784 	.db 0x00
                                   9785 	.area CSEG    (CODE)
                                   9786 	.area CONST   (CODE)
      00093B                       9787 ___str_47:
      00093B 0A                    9788 	.db 0x0a
      00093C 45 6E 74 65 72        9789 	.ascii "Enter"
      000941 0A                    9790 	.db 0x0a
      000942 73 74 61 72 74 69 6E  9791 	.ascii "starting RAM"
             67 20 52 41 4D
      00094E 0A                    9792 	.db 0x0a
      00094F 61 64 64 72 65 73 73  9793 	.ascii "address:"
             3A
      000957 0A                    9794 	.db 0x0a
      000958 0A                    9795 	.db 0x0a
      000959 20 20 20 30 78 5F 5F  9796 	.ascii "   0x____"
             5F 5F
      000962 00                    9797 	.db 0x00
                                   9798 	.area CSEG    (CODE)
                                   9799 	.area CONST   (CODE)
      000963                       9800 ___str_48:
      000963 0A                    9801 	.db 0x0a
      000964 45 6E 74 65 72 20 73  9802 	.ascii "Enter search"
             65 61 72 63 68
      000970 0A                    9803 	.db 0x0a
      000971 76 61 6C 75 65 3A     9804 	.ascii "value:"
      000977 0A                    9805 	.db 0x0a
      000978 0A                    9806 	.db 0x0a
      000979 20 20 20 30 78 5F 5F  9807 	.ascii "   0x__"
      000980 00                    9808 	.db 0x00
                                   9809 	.area CSEG    (CODE)
                                   9810 	.area CONST   (CODE)
      000981                       9811 ___str_49:
      000981 0A                    9812 	.db 0x0a
      000982 28 31 29 20 31 32 30  9813 	.ascii "(1) 1200"
             30
      00098A 0A                    9814 	.db 0x0a
      00098B 00                    9815 	.db 0x00
                                   9816 	.area CSEG    (CODE)
                                   9817 	.area CONST   (CODE)
      00098C                       9818 ___str_50:
      00098C 28 32 29 20 32 34 30  9819 	.ascii "(2) 2400"
             30
      000994 0A                    9820 	.db 0x0a
      000995 00                    9821 	.db 0x00
                                   9822 	.area CSEG    (CODE)
                                   9823 	.area CONST   (CODE)
      000996                       9824 ___str_51:
      000996 28 33 29 20 34 38 30  9825 	.ascii "(3) 4800"
             30
      00099E 0A                    9826 	.db 0x0a
      00099F 00                    9827 	.db 0x00
                                   9828 	.area CSEG    (CODE)
                                   9829 	.area CONST   (CODE)
      0009A0                       9830 ___str_52:
      0009A0 28 34 29 20 39 36 30  9831 	.ascii "(4) 9600"
             30
      0009A8 0A                    9832 	.db 0x0a
      0009A9 00                    9833 	.db 0x00
                                   9834 	.area CSEG    (CODE)
                                   9835 	.area CONST   (CODE)
      0009AA                       9836 ___str_53:
      0009AA 28 35 29 20 31 39 32  9837 	.ascii "(5) 19200"
             30 30
      0009B3 0A                    9838 	.db 0x0a
      0009B4 0A                    9839 	.db 0x0a
      0009B5 00                    9840 	.db 0x00
                                   9841 	.area CSEG    (CODE)
                                   9842 	.area CONST   (CODE)
      0009B6                       9843 ___str_54:
      0009B6 43 75 72 72 65 6E 74  9844 	.ascii "Current:"
             3A
      0009BE 0A                    9845 	.db 0x0a
      0009BF 00                    9846 	.db 0x00
                                   9847 	.area CSEG    (CODE)
                                   9848 	.area CONST   (CODE)
      0009C0                       9849 ___str_55:
      0009C0 31 39 32 30 30        9850 	.ascii "19200"
      0009C5 0A                    9851 	.db 0x0a
      0009C6 00                    9852 	.db 0x00
                                   9853 	.area CSEG    (CODE)
                                   9854 	.area CONST   (CODE)
      0009C7                       9855 ___str_56:
      0009C7 49 6E 76 61 6C 69 64  9856 	.ascii "Invalid"
      0009CE 0A                    9857 	.db 0x0a
      0009CF 00                    9858 	.db 0x00
                                   9859 	.area CSEG    (CODE)
                                   9860 	.area CONST   (CODE)
      0009D0                       9861 ___str_57:
      0009D0 31 32 30 30           9862 	.ascii "1200"
      0009D4 0A                    9863 	.db 0x0a
      0009D5 00                    9864 	.db 0x00
                                   9865 	.area CSEG    (CODE)
                                   9866 	.area CONST   (CODE)
      0009D6                       9867 ___str_58:
      0009D6 32 34 30 30           9868 	.ascii "2400"
      0009DA 0A                    9869 	.db 0x0a
      0009DB 00                    9870 	.db 0x00
                                   9871 	.area CSEG    (CODE)
                                   9872 	.area CONST   (CODE)
      0009DC                       9873 ___str_59:
      0009DC 34 38 30 30           9874 	.ascii "4800"
      0009E0 0A                    9875 	.db 0x0a
      0009E1 00                    9876 	.db 0x00
                                   9877 	.area CSEG    (CODE)
                                   9878 	.area CONST   (CODE)
      0009E2                       9879 ___str_60:
      0009E2 39 36 30 30           9880 	.ascii "9600"
      0009E6 0A                    9881 	.db 0x0a
      0009E7 00                    9882 	.db 0x00
                                   9883 	.area CSEG    (CODE)
                                   9884 	.area CONST   (CODE)
      0009E8                       9885 ___str_61:
      0009E8 0A                    9886 	.db 0x0a
      0009E9 20 20 20 5F           9887 	.ascii "   _"
      0009ED 00                    9888 	.db 0x00
                                   9889 	.area CSEG    (CODE)
                                   9890 	.area CONST   (CODE)
      0009EE                       9891 ___str_62:
      0009EE 31                    9892 	.ascii "1"
      0009EF 0A                    9893 	.db 0x0a
      0009F0 00                    9894 	.db 0x00
                                   9895 	.area CSEG    (CODE)
                                   9896 	.area CONST   (CODE)
      0009F1                       9897 ___str_63:
      0009F1 32                    9898 	.ascii "2"
      0009F2 0A                    9899 	.db 0x0a
      0009F3 00                    9900 	.db 0x00
                                   9901 	.area CSEG    (CODE)
                                   9902 	.area CONST   (CODE)
      0009F4                       9903 ___str_64:
      0009F4 33                    9904 	.ascii "3"
      0009F5 0A                    9905 	.db 0x0a
      0009F6 00                    9906 	.db 0x00
                                   9907 	.area CSEG    (CODE)
                                   9908 	.area CONST   (CODE)
      0009F7                       9909 ___str_65:
      0009F7 34                    9910 	.ascii "4"
      0009F8 0A                    9911 	.db 0x0a
      0009F9 00                    9912 	.db 0x00
                                   9913 	.area CSEG    (CODE)
                                   9914 	.area CONST   (CODE)
      0009FA                       9915 ___str_66:
      0009FA 35                    9916 	.ascii "5"
      0009FB 0A                    9917 	.db 0x0a
      0009FC 00                    9918 	.db 0x00
                                   9919 	.area CSEG    (CODE)
                                   9920 	.area CONST   (CODE)
      0009FD                       9921 ___str_67:
      0009FD 58                    9922 	.ascii "X"
      0009FE 0A                    9923 	.db 0x0a
      0009FF 00                    9924 	.db 0x00
                                   9925 	.area CSEG    (CODE)
                                   9926 	.area CONST   (CODE)
      000A00                       9927 ___str_68:
      000A00 0A                    9928 	.db 0x0a
      000A01 52 65 74 75 72 6E 69  9929 	.ascii "Returning to"
             6E 67 20 74 6F
      000A0D 0A                    9930 	.db 0x0a
      000A0E 6C 61 73 74 20 6D 65  9931 	.ascii "last menu."
             6E 75 2E
      000A18 00                    9932 	.db 0x00
                                   9933 	.area CSEG    (CODE)
                                   9934 	.area CONST   (CODE)
      000A19                       9935 ___str_69:
      000A19 0A                    9936 	.db 0x0a
      000A1A 44 61 74 61 20 42 69  9937 	.ascii "Data Bits"
             74 73
      000A23 0A                    9938 	.db 0x0a
      000A24 0A                    9939 	.db 0x0a
      000A25 00                    9940 	.db 0x00
                                   9941 	.area CSEG    (CODE)
                                   9942 	.area CONST   (CODE)
      000A26                       9943 ___str_70:
      000A26 28 31 29 20 38        9944 	.ascii "(1) 8"
      000A2B 0A                    9945 	.db 0x0a
      000A2C 00                    9946 	.db 0x00
                                   9947 	.area CSEG    (CODE)
                                   9948 	.area CONST   (CODE)
      000A2D                       9949 ___str_71:
      000A2D 28 32 29 20 39        9950 	.ascii "(2) 9"
      000A32 0A                    9951 	.db 0x0a
      000A33 00                    9952 	.db 0x00
                                   9953 	.area CSEG    (CODE)
                                   9954 	.area CONST   (CODE)
      000A34                       9955 ___str_72:
      000A34 0A                    9956 	.db 0x0a
      000A35 43 75 72 72 65 6E 74  9957 	.ascii "Current: "
             3A 20
      000A3E 00                    9958 	.db 0x00
                                   9959 	.area CSEG    (CODE)
                                   9960 	.area CONST   (CODE)
      000A3F                       9961 ___str_73:
      000A3F 38                    9962 	.ascii "8"
      000A40 0A                    9963 	.db 0x0a
      000A41 00                    9964 	.db 0x00
                                   9965 	.area CSEG    (CODE)
                                   9966 	.area CONST   (CODE)
      000A42                       9967 ___str_74:
      000A42 39                    9968 	.ascii "9"
      000A43 0A                    9969 	.db 0x0a
      000A44 00                    9970 	.db 0x00
                                   9971 	.area CSEG    (CODE)
                                   9972 	.area CONST   (CODE)
      000A45                       9973 ___str_75:
      000A45 0A                    9974 	.db 0x0a
      000A46 50 61 72 69 74 79     9975 	.ascii "Parity"
      000A4C 0A                    9976 	.db 0x0a
      000A4D 0A                    9977 	.db 0x0a
      000A4E 00                    9978 	.db 0x00
                                   9979 	.area CSEG    (CODE)
                                   9980 	.area CONST   (CODE)
      000A4F                       9981 ___str_76:
      000A4F 28 31 29 20 45 76 65  9982 	.ascii "(1) Even"
             6E
      000A57 0A                    9983 	.db 0x0a
      000A58 00                    9984 	.db 0x00
                                   9985 	.area CSEG    (CODE)
                                   9986 	.area CONST   (CODE)
      000A59                       9987 ___str_77:
      000A59 28 32 29 20 4F 64 64  9988 	.ascii "(2) Odd"
      000A60 0A                    9989 	.db 0x0a
      000A61 00                    9990 	.db 0x00
                                   9991 	.area CSEG    (CODE)
                                   9992 	.area CONST   (CODE)
      000A62                       9993 ___str_78:
      000A62 28 33 29 20 4E 6F 6E  9994 	.ascii "(3) None"
             65
      000A6A 0A                    9995 	.db 0x0a
      000A6B 00                    9996 	.db 0x00
                                   9997 	.area CSEG    (CODE)
                                   9998 	.area CONST   (CODE)
      000A6C                       9999 ___str_79:
      000A6C 45 76 65 6E          10000 	.ascii "Even"
      000A70 0A                   10001 	.db 0x0a
      000A71 00                   10002 	.db 0x00
                                  10003 	.area CSEG    (CODE)
                                  10004 	.area CONST   (CODE)
      000A72                      10005 ___str_80:
      000A72 4F 64 64             10006 	.ascii "Odd"
      000A75 0A                   10007 	.db 0x0a
      000A76 00                   10008 	.db 0x00
                                  10009 	.area CSEG    (CODE)
                                  10010 	.area CONST   (CODE)
      000A77                      10011 ___str_81:
      000A77 4E 6F 6E 65          10012 	.ascii "None"
      000A7B 0A                   10013 	.db 0x0a
      000A7C 00                   10014 	.db 0x00
                                  10015 	.area CSEG    (CODE)
                                  10016 	.area CONST   (CODE)
      000A7D                      10017 ___str_82:
      000A7D 0A                   10018 	.db 0x0a
      000A7E 45 6E 74 65 72       10019 	.ascii "Enter"
      000A83 0A                   10020 	.db 0x0a
      000A84 63 68 61 72 61 63 74 10021 	.ascii "character"
             65 72
      000A8D 0A                   10022 	.db 0x0a
      000A8E 74 6F 20 73 65 6E 64 10023 	.ascii "to send:"
             3A
      000A96 0A                   10024 	.db 0x0a
      000A97 0A                   10025 	.db 0x0a
      000A98 20 20 20 5F          10026 	.ascii "   _"
      000A9C 00                   10027 	.db 0x00
                                  10028 	.area CSEG    (CODE)
                                  10029 	.area CONST   (CODE)
      000A9D                      10030 ___str_83:
      000A9D 0A                   10031 	.db 0x0a
      000A9E 28 31 29 20 44 61 74 10032 	.ascii "(1) Data Rate"
             61 20 52 61 74 65
      000AAB 00                   10033 	.db 0x00
                                  10034 	.area CSEG    (CODE)
                                  10035 	.area CONST   (CODE)
      000AAC                      10036 ___str_84:
      000AAC 0A                   10037 	.db 0x0a
      000AAD 28 32 29 20 23 20 6F 10038 	.ascii "(2) # of Data"
             66 20 44 61 74 61
      000ABA 0A                   10039 	.db 0x0a
      000ABB 20 20 20 20 42 69 74 10040 	.ascii "    Bits"
             73
      000AC3 00                   10041 	.db 0x00
                                  10042 	.area CSEG    (CODE)
                                  10043 	.area CONST   (CODE)
      000AC4                      10044 ___str_85:
      000AC4 0A                   10045 	.db 0x0a
      000AC5 28 33 29 20 50 61 72 10046 	.ascii "(3) Parity"
             69 74 79
      000ACF 00                   10047 	.db 0x00
                                  10048 	.area CSEG    (CODE)
                                  10049 	.area CONST   (CODE)
      000AD0                      10050 ___str_86:
      000AD0 0A                   10051 	.db 0x0a
      000AD1 28 34 29 20 53 65 6E 10052 	.ascii "(4) Send Data"
             64 20 44 61 74 61
      000ADE 00                   10053 	.db 0x00
                                  10054 	.area CSEG    (CODE)
                                  10055 	.area CONST   (CODE)
      000ADF                      10056 ___str_87:
      000ADF 0A                   10057 	.db 0x0a
      000AE0 28 45 29 20 45 6E 64 10058 	.ascii "(E) End"
      000AE7 0A                   10059 	.db 0x0a
      000AE8 00                   10060 	.db 0x00
                                  10061 	.area CSEG    (CODE)
                                  10062 	.area CONST   (CODE)
      000AE9                      10063 ___str_88:
      000AE9 20 20 20 43 61 6D 65 10064 	.ascii "   Cameron"
             72 6F 6E
      000AF3 0A                   10065 	.db 0x0a
      000AF4 20 20 20 42 69 6E 69 10066 	.ascii "   Biniamow"
             61 6D 6F 77
      000AFF 0A                   10067 	.db 0x0a
      000B00 00                   10068 	.db 0x00
                                  10069 	.area CSEG    (CODE)
                                  10070 	.area CONST   (CODE)
      000B01                      10071 ___str_89:
      000B01 20 20 45 43 45 4E 2D 10072 	.ascii "  ECEN-4330"
             34 33 33 30
      000B0C 0A                   10073 	.db 0x0a
      000B0D 0A                   10074 	.db 0x0a
      000B0E 00                   10075 	.db 0x00
                                  10076 	.area CSEG    (CODE)
                                  10077 	.area CONST   (CODE)
      000B0F                      10078 ___str_90:
      000B0F 28 41 29 20 52 41 4D 10079 	.ascii "(A) RAM CHECK"
             20 43 48 45 43 4B
      000B1C 0A                   10080 	.db 0x0a
      000B1D 00                   10081 	.db 0x00
                                  10082 	.area CSEG    (CODE)
                                  10083 	.area CONST   (CODE)
      000B1E                      10084 ___str_91:
      000B1E 28 42 29 20 4D 4F 56 10085 	.ascii "(B) MOVE"
             45
      000B26 0A                   10086 	.db 0x0a
      000B27 00                   10087 	.db 0x00
                                  10088 	.area CSEG    (CODE)
                                  10089 	.area CONST   (CODE)
      000B28                      10090 ___str_92:
      000B28 28 43 29 20 43 4F 55 10091 	.ascii "(C) COUNT"
             4E 54
      000B31 0A                   10092 	.db 0x0a
      000B32 00                   10093 	.db 0x00
                                  10094 	.area CSEG    (CODE)
                                  10095 	.area CONST   (CODE)
      000B33                      10096 ___str_93:
      000B33 28 44 29 20 44 55 4D 10097 	.ascii "(D) DUMP"
             50
      000B3B 0A                   10098 	.db 0x0a
      000B3C 00                   10099 	.db 0x00
                                  10100 	.area CSEG    (CODE)
                                  10101 	.area CONST   (CODE)
      000B3D                      10102 ___str_94:
      000B3D 28 45 29 20 45 44 49 10103 	.ascii "(E) EDIT"
             54
      000B45 0A                   10104 	.db 0x0a
      000B46 00                   10105 	.db 0x00
                                  10106 	.area CSEG    (CODE)
                                  10107 	.area CONST   (CODE)
      000B47                      10108 ___str_95:
      000B47 28 46 29 20 46 49 4E 10109 	.ascii "(F) FIND"
             44
      000B4F 0A                   10110 	.db 0x0a
      000B50 00                   10111 	.db 0x00
                                  10112 	.area CSEG    (CODE)
                                  10113 	.area CONST   (CODE)
      000B51                      10114 ___str_96:
      000B51 28 31 29 20 55 41 52 10115 	.ascii "(1) UART"
             54
      000B59 0A                   10116 	.db 0x0a
      000B5A 00                   10117 	.db 0x00
                                  10118 	.area CSEG    (CODE)
                                  10119 	.area CONST   (CODE)
      000B5B                      10120 ___str_97:
      000B5B 53 70 72 69 6E 67 20 10121 	.ascii "Spring 2021"
             32 30 32 31
      000B66 00                   10122 	.db 0x00
                                  10123 	.area CSEG    (CODE)
                                  10124 	.area XINIT   (CODE)
                                  10125 	.area CABS    (ABS,CODE)
