                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.9 #12669 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4330lab7
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _RAMwrite_PARM_2
                                     12 	.globl _setAddress_PARM_4
                                     13 	.globl _setAddress_PARM_3
                                     14 	.globl _setAddress_PARM_2
                                     15 	.globl _setTextColor_PARM_2
                                     16 	.globl _setCursor_PARM_2
                                     17 	.globl _rtcCmd_PARM_2
                                     18 	.globl _writeRegister16_PARM_2
                                     19 	.globl _writeRegister8_PARM_2
                                     20 	.globl _keypad
                                     21 	.globl _main
                                     22 	.globl _UART
                                     23 	.globl _UART_send
                                     24 	.globl _UART_dataBits
                                     25 	.globl _UART_dataRate
                                     26 	.globl _resetLCD1
                                     27 	.globl _FIND
                                     28 	.globl _EDIT
                                     29 	.globl _EDIT_display
                                     30 	.globl _DUMP
                                     31 	.globl _DUMP_display
                                     32 	.globl _COUNT
                                     33 	.globl _MOVE
                                     34 	.globl _RAM_CHECK
                                     35 	.globl _inputDataSize
                                     36 	.globl _inputDataType
                                     37 	.globl _inputRead8
                                     38 	.globl _inputRead16
                                     39 	.globl _invalidInput
                                     40 	.globl _RAMread
                                     41 	.globl _RAMwrite
                                     42 	.globl _HEXtoASCII_16write
                                     43 	.globl _HEXtoASCII
                                     44 	.globl _ASCIItoHEX
                                     45 	.globl _drawChar
                                     46 	.globl _setRotation
                                     47 	.globl _UART_transmit
                                     48 	.globl _UART_Init
                                     49 	.globl _ISR_receive
                                     50 	.globl _CY
                                     51 	.globl _AC
                                     52 	.globl _F0
                                     53 	.globl _RS1
                                     54 	.globl _RS0
                                     55 	.globl _OV
                                     56 	.globl _FL
                                     57 	.globl _P
                                     58 	.globl _TF2
                                     59 	.globl _EXF2
                                     60 	.globl _RCLK
                                     61 	.globl _TCLK
                                     62 	.globl _EXEN2
                                     63 	.globl _TR2
                                     64 	.globl _C_T2
                                     65 	.globl _CP_RL2
                                     66 	.globl _T2CON_7
                                     67 	.globl _T2CON_6
                                     68 	.globl _T2CON_5
                                     69 	.globl _T2CON_4
                                     70 	.globl _T2CON_3
                                     71 	.globl _T2CON_2
                                     72 	.globl _T2CON_1
                                     73 	.globl _T2CON_0
                                     74 	.globl _PT2
                                     75 	.globl _PS
                                     76 	.globl _PT1
                                     77 	.globl _PX1
                                     78 	.globl _PT0
                                     79 	.globl _PX0
                                     80 	.globl _RD
                                     81 	.globl _WR
                                     82 	.globl _T1
                                     83 	.globl _T0
                                     84 	.globl _INT1
                                     85 	.globl _INT0
                                     86 	.globl _TXD
                                     87 	.globl _RXD
                                     88 	.globl _P3_7
                                     89 	.globl _P3_6
                                     90 	.globl _P3_5
                                     91 	.globl _P3_4
                                     92 	.globl _P3_3
                                     93 	.globl _P3_2
                                     94 	.globl _P3_1
                                     95 	.globl _P3_0
                                     96 	.globl _EA
                                     97 	.globl _ET2
                                     98 	.globl _ES
                                     99 	.globl _ET1
                                    100 	.globl _EX1
                                    101 	.globl _ET0
                                    102 	.globl _EX0
                                    103 	.globl _P2_7
                                    104 	.globl _P2_6
                                    105 	.globl _P2_5
                                    106 	.globl _P2_4
                                    107 	.globl _P2_3
                                    108 	.globl _P2_2
                                    109 	.globl _P2_1
                                    110 	.globl _P2_0
                                    111 	.globl _SM0
                                    112 	.globl _SM1
                                    113 	.globl _SM2
                                    114 	.globl _REN
                                    115 	.globl _TB8
                                    116 	.globl _RB8
                                    117 	.globl _TI
                                    118 	.globl _RI
                                    119 	.globl _T2EX
                                    120 	.globl _T2
                                    121 	.globl _P1_7
                                    122 	.globl _P1_6
                                    123 	.globl _P1_5
                                    124 	.globl _P1_4
                                    125 	.globl _P1_3
                                    126 	.globl _P1_2
                                    127 	.globl _P1_1
                                    128 	.globl _P1_0
                                    129 	.globl _TF1
                                    130 	.globl _TR1
                                    131 	.globl _TF0
                                    132 	.globl _TR0
                                    133 	.globl _IE1
                                    134 	.globl _IT1
                                    135 	.globl _IE0
                                    136 	.globl _IT0
                                    137 	.globl _P0_7
                                    138 	.globl _P0_6
                                    139 	.globl _P0_5
                                    140 	.globl _P0_4
                                    141 	.globl _P0_3
                                    142 	.globl _P0_2
                                    143 	.globl _P0_1
                                    144 	.globl _P0_0
                                    145 	.globl _B
                                    146 	.globl _A
                                    147 	.globl _ACC
                                    148 	.globl _PSW
                                    149 	.globl _TH2
                                    150 	.globl _TL2
                                    151 	.globl _RCAP2H
                                    152 	.globl _RCAP2L
                                    153 	.globl _T2MOD
                                    154 	.globl _T2CON
                                    155 	.globl _IP
                                    156 	.globl _P3
                                    157 	.globl _IE
                                    158 	.globl _P2
                                    159 	.globl _SBUF
                                    160 	.globl _SCON
                                    161 	.globl _P1
                                    162 	.globl _TH1
                                    163 	.globl _TH0
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TMOD
                                    167 	.globl _TCON
                                    168 	.globl _PCON
                                    169 	.globl _DPH
                                    170 	.globl _DPL
                                    171 	.globl _SP
                                    172 	.globl _P0
                                    173 	.globl _drawChar_PARM_6
                                    174 	.globl _drawChar_PARM_5
                                    175 	.globl _drawChar_PARM_4
                                    176 	.globl _drawChar_PARM_3
                                    177 	.globl _drawChar_PARM_2
                                    178 	.globl _fillRect_PARM_5
                                    179 	.globl _fillRect_PARM_4
                                    180 	.globl _fillRect_PARM_3
                                    181 	.globl _fillRect_PARM_2
                                    182 	.globl _drawPixel_PARM_3
                                    183 	.globl _drawPixel_PARM_2
                                    184 	.globl _rtcWrite_PARM_2
                                    185 	.globl _received_flag
                                    186 	.globl _received_byte
                                    187 	.globl _bitNine
                                    188 	.globl _parity
                                    189 	.globl _dataBits
                                    190 	.globl _dataRate
                                    191 	.globl _ts
                                    192 	.globl _y
                                    193 	.globl _x
                                    194 	.globl _textSizeHold
                                    195 	.globl _yCursorHold
                                    196 	.globl _xCursorHold
                                    197 	.globl _endAddrCalc
                                    198 	.globl _count
                                    199 	.globl _ASCII
                                    200 	.globl _byte1
                                    201 	.globl _byte
                                    202 	.globl _currAddr1
                                    203 	.globl _currAddr0
                                    204 	.globl _addr3
                                    205 	.globl _addr2
                                    206 	.globl _addr1
                                    207 	.globl _addr0
                                    208 	.globl _data
                                    209 	.globl _scrollEnd
                                    210 	.globl _dataEnd
                                    211 	.globl _validInput
                                    212 	.globl _dataSize
                                    213 	.globl _dataType
                                    214 	.globl _input8
                                    215 	.globl _input16
                                    216 	.globl _key
                                    217 	.globl __height
                                    218 	.globl __width
                                    219 	.globl _textbgcolor
                                    220 	.globl _textcolor
                                    221 	.globl _rotation
                                    222 	.globl _textsize
                                    223 	.globl _cursor_y
                                    224 	.globl _cursor_x
                                    225 	.globl _read_ram_address
                                    226 	.globl _seg7_address
                                    227 	.globl _lcd_address
                                    228 	.globl _rowloc
                                    229 	.globl _colloc
                                    230 	.globl _delay
                                    231 	.globl _writeRegister8
                                    232 	.globl _writeRegister16
                                    233 	.globl _rtcInit
                                    234 	.globl _rtcBusy
                                    235 	.globl _rtcCmd
                                    236 	.globl _rtcWrite
                                    237 	.globl _rtcRead
                                    238 	.globl _rtcPrint
                                    239 	.globl _setCursor
                                    240 	.globl _setTextColor
                                    241 	.globl _setTextSize
                                    242 	.globl _setAddress
                                    243 	.globl _TFT_LCD_INIT
                                    244 	.globl _drawPixel
                                    245 	.globl _fillRect
                                    246 	.globl _fillScreen
                                    247 	.globl _write
                                    248 	.globl _LCD_string_write
                                    249 	.globl _keyDetect
                                    250 	.globl _HEXtoASCII_8write
                                    251 	.globl _testRAM
                                    252 	.globl _resetLCD
                                    253 	.globl _FIND_display
                                    254 	.globl _UART_parity
                                    255 	.globl _UART_parity_count
                                    256 	.globl _LCD_mainMenu
                                    257 ;--------------------------------------------------------
                                    258 ; special function registers
                                    259 ;--------------------------------------------------------
                                    260 	.area RSEG    (ABS,DATA)
      000000                        261 	.org 0x0000
                           000080   262 _P0	=	0x0080
                           000081   263 _SP	=	0x0081
                           000082   264 _DPL	=	0x0082
                           000083   265 _DPH	=	0x0083
                           000087   266 _PCON	=	0x0087
                           000088   267 _TCON	=	0x0088
                           000089   268 _TMOD	=	0x0089
                           00008A   269 _TL0	=	0x008a
                           00008B   270 _TL1	=	0x008b
                           00008C   271 _TH0	=	0x008c
                           00008D   272 _TH1	=	0x008d
                           000090   273 _P1	=	0x0090
                           000098   274 _SCON	=	0x0098
                           000099   275 _SBUF	=	0x0099
                           0000A0   276 _P2	=	0x00a0
                           0000A8   277 _IE	=	0x00a8
                           0000B0   278 _P3	=	0x00b0
                           0000B8   279 _IP	=	0x00b8
                           0000C8   280 _T2CON	=	0x00c8
                           0000C9   281 _T2MOD	=	0x00c9
                           0000CA   282 _RCAP2L	=	0x00ca
                           0000CB   283 _RCAP2H	=	0x00cb
                           0000CC   284 _TL2	=	0x00cc
                           0000CD   285 _TH2	=	0x00cd
                           0000D0   286 _PSW	=	0x00d0
                           0000E0   287 _ACC	=	0x00e0
                           0000E0   288 _A	=	0x00e0
                           0000F0   289 _B	=	0x00f0
                                    290 ;--------------------------------------------------------
                                    291 ; special function bits
                                    292 ;--------------------------------------------------------
                                    293 	.area RSEG    (ABS,DATA)
      000000                        294 	.org 0x0000
                           000080   295 _P0_0	=	0x0080
                           000081   296 _P0_1	=	0x0081
                           000082   297 _P0_2	=	0x0082
                           000083   298 _P0_3	=	0x0083
                           000084   299 _P0_4	=	0x0084
                           000085   300 _P0_5	=	0x0085
                           000086   301 _P0_6	=	0x0086
                           000087   302 _P0_7	=	0x0087
                           000088   303 _IT0	=	0x0088
                           000089   304 _IE0	=	0x0089
                           00008A   305 _IT1	=	0x008a
                           00008B   306 _IE1	=	0x008b
                           00008C   307 _TR0	=	0x008c
                           00008D   308 _TF0	=	0x008d
                           00008E   309 _TR1	=	0x008e
                           00008F   310 _TF1	=	0x008f
                           000090   311 _P1_0	=	0x0090
                           000091   312 _P1_1	=	0x0091
                           000092   313 _P1_2	=	0x0092
                           000093   314 _P1_3	=	0x0093
                           000094   315 _P1_4	=	0x0094
                           000095   316 _P1_5	=	0x0095
                           000096   317 _P1_6	=	0x0096
                           000097   318 _P1_7	=	0x0097
                           000090   319 _T2	=	0x0090
                           000091   320 _T2EX	=	0x0091
                           000098   321 _RI	=	0x0098
                           000099   322 _TI	=	0x0099
                           00009A   323 _RB8	=	0x009a
                           00009B   324 _TB8	=	0x009b
                           00009C   325 _REN	=	0x009c
                           00009D   326 _SM2	=	0x009d
                           00009E   327 _SM1	=	0x009e
                           00009F   328 _SM0	=	0x009f
                           0000A0   329 _P2_0	=	0x00a0
                           0000A1   330 _P2_1	=	0x00a1
                           0000A2   331 _P2_2	=	0x00a2
                           0000A3   332 _P2_3	=	0x00a3
                           0000A4   333 _P2_4	=	0x00a4
                           0000A5   334 _P2_5	=	0x00a5
                           0000A6   335 _P2_6	=	0x00a6
                           0000A7   336 _P2_7	=	0x00a7
                           0000A8   337 _EX0	=	0x00a8
                           0000A9   338 _ET0	=	0x00a9
                           0000AA   339 _EX1	=	0x00aa
                           0000AB   340 _ET1	=	0x00ab
                           0000AC   341 _ES	=	0x00ac
                           0000AD   342 _ET2	=	0x00ad
                           0000AF   343 _EA	=	0x00af
                           0000B0   344 _P3_0	=	0x00b0
                           0000B1   345 _P3_1	=	0x00b1
                           0000B2   346 _P3_2	=	0x00b2
                           0000B3   347 _P3_3	=	0x00b3
                           0000B4   348 _P3_4	=	0x00b4
                           0000B5   349 _P3_5	=	0x00b5
                           0000B6   350 _P3_6	=	0x00b6
                           0000B7   351 _P3_7	=	0x00b7
                           0000B0   352 _RXD	=	0x00b0
                           0000B1   353 _TXD	=	0x00b1
                           0000B2   354 _INT0	=	0x00b2
                           0000B3   355 _INT1	=	0x00b3
                           0000B4   356 _T0	=	0x00b4
                           0000B5   357 _T1	=	0x00b5
                           0000B6   358 _WR	=	0x00b6
                           0000B7   359 _RD	=	0x00b7
                           0000B8   360 _PX0	=	0x00b8
                           0000B9   361 _PT0	=	0x00b9
                           0000BA   362 _PX1	=	0x00ba
                           0000BB   363 _PT1	=	0x00bb
                           0000BC   364 _PS	=	0x00bc
                           0000BD   365 _PT2	=	0x00bd
                           0000C8   366 _T2CON_0	=	0x00c8
                           0000C9   367 _T2CON_1	=	0x00c9
                           0000CA   368 _T2CON_2	=	0x00ca
                           0000CB   369 _T2CON_3	=	0x00cb
                           0000CC   370 _T2CON_4	=	0x00cc
                           0000CD   371 _T2CON_5	=	0x00cd
                           0000CE   372 _T2CON_6	=	0x00ce
                           0000CF   373 _T2CON_7	=	0x00cf
                           0000C8   374 _CP_RL2	=	0x00c8
                           0000C9   375 _C_T2	=	0x00c9
                           0000CA   376 _TR2	=	0x00ca
                           0000CB   377 _EXEN2	=	0x00cb
                           0000CC   378 _TCLK	=	0x00cc
                           0000CD   379 _RCLK	=	0x00cd
                           0000CE   380 _EXF2	=	0x00ce
                           0000CF   381 _TF2	=	0x00cf
                           0000D0   382 _P	=	0x00d0
                           0000D1   383 _FL	=	0x00d1
                           0000D2   384 _OV	=	0x00d2
                           0000D3   385 _RS0	=	0x00d3
                           0000D4   386 _RS1	=	0x00d4
                           0000D5   387 _F0	=	0x00d5
                           0000D6   388 _AC	=	0x00d6
                           0000D7   389 _CY	=	0x00d7
                                    390 ;--------------------------------------------------------
                                    391 ; overlayable register banks
                                    392 ;--------------------------------------------------------
                                    393 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        394 	.ds 8
                                    395 ;--------------------------------------------------------
                                    396 ; overlayable bit register bank
                                    397 ;--------------------------------------------------------
                                    398 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        399 bits:
      000000                        400 	.ds 1
                           008000   401 	b0 = bits[0]
                           008100   402 	b1 = bits[1]
                           008200   403 	b2 = bits[2]
                           008300   404 	b3 = bits[3]
                           008400   405 	b4 = bits[4]
                           008500   406 	b5 = bits[5]
                           008600   407 	b6 = bits[6]
                           008700   408 	b7 = bits[7]
                                    409 ;--------------------------------------------------------
                                    410 ; internal ram data
                                    411 ;--------------------------------------------------------
                                    412 	.area DSEG    (DATA)
      000000                        413 _colloc::
      000000                        414 	.ds 1
      000001                        415 _rowloc::
      000001                        416 	.ds 1
      000002                        417 _lcd_address::
      000002                        418 	.ds 2
      000004                        419 _seg7_address::
      000004                        420 	.ds 2
      000006                        421 _read_ram_address::
      000006                        422 	.ds 2
      000008                        423 _cursor_x::
      000008                        424 	.ds 2
      00000A                        425 _cursor_y::
      00000A                        426 	.ds 2
      00000C                        427 _textsize::
      00000C                        428 	.ds 1
      00000D                        429 _rotation::
      00000D                        430 	.ds 1
      00000E                        431 _textcolor::
      00000E                        432 	.ds 2
      000010                        433 _textbgcolor::
      000010                        434 	.ds 2
      000012                        435 __width::
      000012                        436 	.ds 2
      000014                        437 __height::
      000014                        438 	.ds 2
      000016                        439 _key::
      000016                        440 	.ds 1
      000017                        441 _input16::
      000017                        442 	.ds 2
      000019                        443 _input8::
      000019                        444 	.ds 1
      00001A                        445 _dataType::
      00001A                        446 	.ds 1
      00001B                        447 _dataSize::
      00001B                        448 	.ds 2
      00001D                        449 _validInput::
      00001D                        450 	.ds 1
      00001E                        451 _dataEnd::
      00001E                        452 	.ds 1
      00001F                        453 _scrollEnd::
      00001F                        454 	.ds 1
      000020                        455 _data::
      000020                        456 	.ds 1
      000021                        457 _addr0::
      000021                        458 	.ds 2
      000023                        459 _addr1::
      000023                        460 	.ds 2
      000025                        461 _addr2::
      000025                        462 	.ds 2
      000027                        463 _addr3::
      000027                        464 	.ds 2
      000029                        465 _currAddr0::
      000029                        466 	.ds 2
      00002B                        467 _currAddr1::
      00002B                        468 	.ds 2
      00002D                        469 _byte::
      00002D                        470 	.ds 2
      00002F                        471 _byte1::
      00002F                        472 	.ds 2
      000031                        473 _ASCII::
      000031                        474 	.ds 1
      000032                        475 _count::
      000032                        476 	.ds 2
      000034                        477 _endAddrCalc::
      000034                        478 	.ds 4
      000038                        479 _xCursorHold::
      000038                        480 	.ds 1
      000039                        481 _yCursorHold::
      000039                        482 	.ds 1
      00003A                        483 _textSizeHold::
      00003A                        484 	.ds 1
      00003B                        485 _x::
      00003B                        486 	.ds 1
      00003C                        487 _y::
      00003C                        488 	.ds 1
      00003D                        489 _ts::
      00003D                        490 	.ds 1
      00003E                        491 _dataRate::
      00003E                        492 	.ds 1
      00003F                        493 _dataBits::
      00003F                        494 	.ds 1
      000040                        495 _parity::
      000040                        496 	.ds 1
      000041                        497 _bitNine::
      000041                        498 	.ds 1
      000042                        499 _received_byte::
      000042                        500 	.ds 1
      000043                        501 _received_flag::
      000043                        502 	.ds 1
      000044                        503 _rtcWrite_PARM_2:
      000044                        504 	.ds 1
      000045                        505 _drawPixel_PARM_2:
      000045                        506 	.ds 2
      000047                        507 _drawPixel_PARM_3:
      000047                        508 	.ds 2
      000049                        509 _fillRect_PARM_2:
      000049                        510 	.ds 2
      00004B                        511 _fillRect_PARM_3:
      00004B                        512 	.ds 2
      00004D                        513 _fillRect_PARM_4:
      00004D                        514 	.ds 2
      00004F                        515 _fillRect_PARM_5:
      00004F                        516 	.ds 2
      000051                        517 _drawChar_PARM_2:
      000051                        518 	.ds 2
      000053                        519 _drawChar_PARM_3:
      000053                        520 	.ds 1
      000054                        521 _drawChar_PARM_4:
      000054                        522 	.ds 2
      000056                        523 _drawChar_PARM_5:
      000056                        524 	.ds 2
      000058                        525 _drawChar_PARM_6:
      000058                        526 	.ds 1
      000059                        527 _drawChar_x_65536_325:
      000059                        528 	.ds 2
      00005B                        529 _drawChar_line_196608_329:
      00005B                        530 	.ds 1
      00005C                        531 _drawChar_sloc1_1_0:
      00005C                        532 	.ds 2
                                    533 ;--------------------------------------------------------
                                    534 ; overlayable items in internal ram 
                                    535 ;--------------------------------------------------------
                                    536 	.area	OSEG    (OVR,DATA)
                                    537 	.area	OSEG    (OVR,DATA)
      000000                        538 _writeRegister8_PARM_2:
      000000                        539 	.ds 1
                                    540 	.area	OSEG    (OVR,DATA)
      000000                        541 _writeRegister16_PARM_2:
      000000                        542 	.ds 2
                                    543 	.area	OSEG    (OVR,DATA)
                                    544 	.area	OSEG    (OVR,DATA)
      000000                        545 _rtcCmd_PARM_2:
      000000                        546 	.ds 1
                                    547 	.area	OSEG    (OVR,DATA)
      000000                        548 _setCursor_PARM_2:
      000000                        549 	.ds 2
                                    550 	.area	OSEG    (OVR,DATA)
      000000                        551 _setTextColor_PARM_2:
      000000                        552 	.ds 2
                                    553 	.area	OSEG    (OVR,DATA)
                                    554 	.area	OSEG    (OVR,DATA)
      000000                        555 _setAddress_PARM_2:
      000000                        556 	.ds 2
      000002                        557 _setAddress_PARM_3:
      000002                        558 	.ds 2
      000004                        559 _setAddress_PARM_4:
      000004                        560 	.ds 2
                                    561 	.area	OSEG    (OVR,DATA)
                                    562 	.area	OSEG    (OVR,DATA)
                                    563 	.area	OSEG    (OVR,DATA)
      000000                        564 _RAMwrite_PARM_2:
      000000                        565 	.ds 1
                                    566 	.area	OSEG    (OVR,DATA)
                                    567 	.area	OSEG    (OVR,DATA)
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 ;--------------------------------------------------------
                                    570 ; Stack segment in internal ram 
                                    571 ;--------------------------------------------------------
                                    572 	.area	SSEG
      000000                        573 __start__stack:
      000000                        574 	.ds	1
                                    575 
                                    576 ;--------------------------------------------------------
                                    577 ; indirectly addressable internal ram data
                                    578 ;--------------------------------------------------------
                                    579 	.area ISEG    (DATA)
                                    580 ;--------------------------------------------------------
                                    581 ; absolute internal ram data
                                    582 ;--------------------------------------------------------
                                    583 	.area IABS    (ABS,DATA)
                                    584 	.area IABS    (ABS,DATA)
                                    585 ;--------------------------------------------------------
                                    586 ; bit data
                                    587 ;--------------------------------------------------------
                                    588 	.area BSEG    (BIT)
      000000                        589 _drawChar_sloc0_1_0:
      000000                        590 	.ds 1
                                    591 ;--------------------------------------------------------
                                    592 ; paged external ram data
                                    593 ;--------------------------------------------------------
                                    594 	.area PSEG    (PAG,XDATA)
                                    595 ;--------------------------------------------------------
                                    596 ; external ram data
                                    597 ;--------------------------------------------------------
                                    598 	.area XSEG    (XDATA)
                                    599 ;--------------------------------------------------------
                                    600 ; absolute external ram data
                                    601 ;--------------------------------------------------------
                                    602 	.area XABS    (ABS,XDATA)
                                    603 ;--------------------------------------------------------
                                    604 ; external initialized ram data
                                    605 ;--------------------------------------------------------
                                    606 	.area XISEG   (XDATA)
                                    607 	.area HOME    (CODE)
                                    608 	.area GSINIT0 (CODE)
                                    609 	.area GSINIT1 (CODE)
                                    610 	.area GSINIT2 (CODE)
                                    611 	.area GSINIT3 (CODE)
                                    612 	.area GSINIT4 (CODE)
                                    613 	.area GSINIT5 (CODE)
                                    614 	.area GSINIT  (CODE)
                                    615 	.area GSFINAL (CODE)
                                    616 	.area CSEG    (CODE)
                                    617 ;--------------------------------------------------------
                                    618 ; interrupt vector 
                                    619 ;--------------------------------------------------------
                                    620 	.area HOME    (CODE)
      000000                        621 __interrupt_vect:
      000000 02r00r00         [24]  622 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  623 	reti
      000004                        624 	.ds	7
      00000B 32               [24]  625 	reti
      00000C                        626 	.ds	7
      000013 32               [24]  627 	reti
      000014                        628 	.ds	7
      00001B 32               [24]  629 	reti
      00001C                        630 	.ds	7
      000023 02r00r00         [24]  631 	ljmp	_ISR_receive
                                    632 ;--------------------------------------------------------
                                    633 ; global & static initialisations
                                    634 ;--------------------------------------------------------
                                    635 	.area HOME    (CODE)
                                    636 	.area GSINIT  (CODE)
                                    637 	.area GSFINAL (CODE)
                                    638 	.area GSINIT  (CODE)
                                    639 	.globl __sdcc_gsinit_startup
                                    640 	.globl __sdcc_program_startup
                                    641 	.globl __start__stack
                                    642 	.globl __mcs51_genXINIT
                                    643 	.globl __mcs51_genXRAMCLEAR
                                    644 	.globl __mcs51_genRAMCLEAR
                                    645 ;	ecen4330lab7.c:39: __xdata unsigned char* lcd_address = (unsigned char __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  646 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  647 	mov	(_lcd_address + 1),#0x40
                                    648 ;	ecen4330lab7.c:40: __xdata unsigned char* seg7_address = (unsigned char __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  649 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  650 	mov	(_seg7_address + 1),#0x80
                                    651 ;	ecen4330lab7.c:95: unsigned int count = 0;
      00000C E4               [12]  652 	clr	a
      00000D F5*32            [12]  653 	mov	_count,a
      00000F F5*33            [12]  654 	mov	(_count + 1),a
                                    655 ;	ecen4330lab7.c:99: unsigned char dataRate = 0;
                                    656 ;	1-genFromRTrack replaced	mov	_dataRate,#0x00
      000011 F5*3E            [12]  657 	mov	_dataRate,a
                                    658 ;	ecen4330lab7.c:100: unsigned char dataBits = 0;
                                    659 ;	1-genFromRTrack replaced	mov	_dataBits,#0x00
      000013 F5*3F            [12]  660 	mov	_dataBits,a
                                    661 ;	ecen4330lab7.c:101: unsigned char parity = 2;
      000015 75*40 02         [24]  662 	mov	_parity,#0x02
                                    663 ;	ecen4330lab7.c:104: volatile unsigned char received_byte = 0;
                                    664 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000018 F5*42            [12]  665 	mov	_received_byte,a
                                    666 ;	ecen4330lab7.c:105: volatile unsigned char received_flag = 0;
                                    667 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      00001A F5*43            [12]  668 	mov	_received_flag,a
                                    669 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  670 	ljmp	__sdcc_program_startup
                                    671 ;--------------------------------------------------------
                                    672 ; Home
                                    673 ;--------------------------------------------------------
                                    674 	.area HOME    (CODE)
                                    675 	.area HOME    (CODE)
      000026                        676 __sdcc_program_startup:
      000026 02r29r2F         [24]  677 	ljmp	_main
                                    678 ;	return from main will return to caller
                                    679 ;--------------------------------------------------------
                                    680 ; code
                                    681 ;--------------------------------------------------------
                                    682 	.area CSEG    (CODE)
                                    683 ;------------------------------------------------------------
                                    684 ;Allocation info for local variables in function 'ISR_receive'
                                    685 ;------------------------------------------------------------
                                    686 ;	ecen4330lab7.c:132: void ISR_receive() __interrupt (4) {
                                    687 ;	-----------------------------------------
                                    688 ;	 function ISR_receive
                                    689 ;	-----------------------------------------
      000000                        690 _ISR_receive:
                           000007   691 	ar7 = 0x07
                           000006   692 	ar6 = 0x06
                           000005   693 	ar5 = 0x05
                           000004   694 	ar4 = 0x04
                           000003   695 	ar3 = 0x03
                           000002   696 	ar2 = 0x02
                           000001   697 	ar1 = 0x01
                           000000   698 	ar0 = 0x00
      000000 C0*00            [24]  699 	push	bits
      000002 C0 E0            [24]  700 	push	acc
      000004 C0 F0            [24]  701 	push	b
      000006 C0 82            [24]  702 	push	dpl
      000008 C0 83            [24]  703 	push	dph
      00000A C0 07            [24]  704 	push	(0+7)
      00000C C0 06            [24]  705 	push	(0+6)
      00000E C0 05            [24]  706 	push	(0+5)
      000010 C0 04            [24]  707 	push	(0+4)
      000012 C0 03            [24]  708 	push	(0+3)
      000014 C0 02            [24]  709 	push	(0+2)
      000016 C0 01            [24]  710 	push	(0+1)
      000018 C0 00            [24]  711 	push	(0+0)
      00001A C0 D0            [24]  712 	push	psw
      00001C 75 D0 00         [24]  713 	mov	psw,#0x00
                                    714 ;	ecen4330lab7.c:133: if (RI == 1){
      00001F 20 98 03         [24]  715 	jb	_RI,00187$
      000022 02r01r67         [24]  716 	ljmp	00127$
      000025                        717 00187$:
                                    718 ;	ecen4330lab7.c:134: received_byte = SBUF;
      000025 85 99*42         [24]  719 	mov	_received_byte,_SBUF
                                    720 ;	ecen4330lab7.c:135: RI = 0;
                                    721 ;	assignBit
      000028 C2 98            [12]  722 	clr	_RI
                                    723 ;	ecen4330lab7.c:136: received_flag = 1;
      00002A 75*43 01         [24]  724 	mov	_received_flag,#0x01
                                    725 ;	ecen4330lab7.c:137: resetLCD();
      00002D 12r0ErD3         [24]  726 	lcall	_resetLCD
                                    727 ;	ecen4330lab7.c:142: data = UART_parity_count(received_byte);
      000030 85*42 82         [24]  728 	mov	dpl,_received_byte
      000033 12r25r62         [24]  729 	lcall	_UART_parity_count
      000036 85 82*20         [24]  730 	mov	_data,dpl
                                    731 ;	ecen4330lab7.c:143: dataBits = SCON & 0xC0;
      000039 E5 98            [12]  732 	mov	a,_SCON
      00003B 54 C0            [12]  733 	anl	a,#0xc0
      00003D F5*3F            [12]  734 	mov	_dataBits,a
                                    735 ;	ecen4330lab7.c:153: switch(dataBits) {
      00003F 74 40            [12]  736 	mov	a,#0x40
      000041 B5*3F 02         [24]  737 	cjne	a,_dataBits,00188$
      000044 80 0B            [24]  738 	sjmp	00101$
      000046                        739 00188$:
      000046 74 C0            [12]  740 	mov	a,#0xc0
      000048 B5*3F 03         [24]  741 	cjne	a,_dataBits,00189$
      00004B 02r00rDB         [24]  742 	ljmp	00112$
      00004E                        743 00189$:
      00004E 02r01r62         [24]  744 	ljmp	00125$
                                    745 ;	ecen4330lab7.c:155: case 0x40:
      000051                        746 00101$:
                                    747 ;	ecen4330lab7.c:156: switch(parity) {
      000051 E4               [12]  748 	clr	a
      000052 B5*40 02         [24]  749 	cjne	a,_parity,00190$
      000055 80 11            [24]  750 	sjmp	00102$
      000057                        751 00190$:
      000057 74 01            [12]  752 	mov	a,#0x01
      000059 B5*40 02         [24]  753 	cjne	a,_parity,00191$
      00005C 80 36            [24]  754 	sjmp	00106$
      00005E                        755 00191$:
      00005E 74 02            [12]  756 	mov	a,#0x02
      000060 B5*40 02         [24]  757 	cjne	a,_parity,00192$
      000063 80 5B            [24]  758 	sjmp	00110$
      000065                        759 00192$:
      000065 02r01r62         [24]  760 	ljmp	00125$
                                    761 ;	ecen4330lab7.c:158: case 0:
      000068                        762 00102$:
                                    763 ;	ecen4330lab7.c:160: if(data % 2 != 0) {
      000068 E5*20            [12]  764 	mov	a,_data
      00006A 30 E0 0C         [24]  765 	jnb	acc.0,00104$
                                    766 ;	ecen4330lab7.c:161: LCD_string_write("Parity\nError.");
      00006D 90r05r0B         [24]  767 	mov	dptr,#___str_0
      000070 75 F0 80         [24]  768 	mov	b,#0x80
      000073 12r0Br3F         [24]  769 	lcall	_LCD_string_write
      000076 02r01r62         [24]  770 	ljmp	00125$
      000079                        771 00104$:
                                    772 ;	ecen4330lab7.c:164: received_byte &= 0x7F;  // Clear parity bit
      000079 53*42 7F         [24]  773 	anl	_received_byte,#0x7f
                                    774 ;	ecen4330lab7.c:165: LCD_string_write("UART data\nreceived.\n\n >> ");
      00007C 90r05r19         [24]  775 	mov	dptr,#___str_1
      00007F 75 F0 80         [24]  776 	mov	b,#0x80
      000082 12r0Br3F         [24]  777 	lcall	_LCD_string_write
                                    778 ;	ecen4330lab7.c:166: write(received_byte);
      000085 85*42 82         [24]  779 	mov	dpl,_received_byte
      000088 12r0ArD9         [24]  780 	lcall	_write
                                    781 ;	ecen4330lab7.c:167: delay(500);
      00008B 90 01 F4         [24]  782 	mov	dptr,#0x01f4
      00008E 12r01r9F         [24]  783 	lcall	_delay
                                    784 ;	ecen4330lab7.c:169: break;
      000091 02r01r62         [24]  785 	ljmp	00125$
                                    786 ;	ecen4330lab7.c:171: case 1:
      000094                        787 00106$:
                                    788 ;	ecen4330lab7.c:173: if(data % 2 == 0) {
      000094 E5*20            [12]  789 	mov	a,_data
      000096 20 E0 0C         [24]  790 	jb	acc.0,00108$
                                    791 ;	ecen4330lab7.c:174: LCD_string_write("Parity\nError.");
      000099 90r05r0B         [24]  792 	mov	dptr,#___str_0
      00009C 75 F0 80         [24]  793 	mov	b,#0x80
      00009F 12r0Br3F         [24]  794 	lcall	_LCD_string_write
      0000A2 02r01r62         [24]  795 	ljmp	00125$
      0000A5                        796 00108$:
                                    797 ;	ecen4330lab7.c:177: received_byte &= 0x7F;  // Clear parity bit
      0000A5 53*42 7F         [24]  798 	anl	_received_byte,#0x7f
                                    799 ;	ecen4330lab7.c:178: LCD_string_write("UART data\nreceived.\n\n >> ");
      0000A8 90r05r19         [24]  800 	mov	dptr,#___str_1
      0000AB 75 F0 80         [24]  801 	mov	b,#0x80
      0000AE 12r0Br3F         [24]  802 	lcall	_LCD_string_write
                                    803 ;	ecen4330lab7.c:179: write(received_byte);
      0000B1 85*42 82         [24]  804 	mov	dpl,_received_byte
      0000B4 12r0ArD9         [24]  805 	lcall	_write
                                    806 ;	ecen4330lab7.c:180: delay(500);
      0000B7 90 01 F4         [24]  807 	mov	dptr,#0x01f4
      0000BA 12r01r9F         [24]  808 	lcall	_delay
                                    809 ;	ecen4330lab7.c:182: break;
      0000BD 02r01r62         [24]  810 	ljmp	00125$
                                    811 ;	ecen4330lab7.c:184: case 2:
      0000C0                        812 00110$:
                                    813 ;	ecen4330lab7.c:185: received_byte &= 0x7F;  // Clear parity bit
      0000C0 53*42 7F         [24]  814 	anl	_received_byte,#0x7f
                                    815 ;	ecen4330lab7.c:186: LCD_string_write("UART data\nreceived.\n\n >> ");
      0000C3 90r05r19         [24]  816 	mov	dptr,#___str_1
      0000C6 75 F0 80         [24]  817 	mov	b,#0x80
      0000C9 12r0Br3F         [24]  818 	lcall	_LCD_string_write
                                    819 ;	ecen4330lab7.c:187: write(received_byte);
      0000CC 85*42 82         [24]  820 	mov	dpl,_received_byte
      0000CF 12r0ArD9         [24]  821 	lcall	_write
                                    822 ;	ecen4330lab7.c:188: delay(500);
      0000D2 90 01 F4         [24]  823 	mov	dptr,#0x01f4
      0000D5 12r01r9F         [24]  824 	lcall	_delay
                                    825 ;	ecen4330lab7.c:191: break;
      0000D8 02r01r62         [24]  826 	ljmp	00125$
                                    827 ;	ecen4330lab7.c:193: case 0xC0:
      0000DB                        828 00112$:
                                    829 ;	ecen4330lab7.c:194: bitNine = SCON & 0x04;
      0000DB E5 98            [12]  830 	mov	a,_SCON
      0000DD 54 04            [12]  831 	anl	a,#0x04
      0000DF F5*41            [12]  832 	mov	_bitNine,a
                                    833 ;	ecen4330lab7.c:197: if(bitNine == 0x04) {
      0000E1 74 04            [12]  834 	mov	a,#0x04
      0000E3 B5*41 02         [24]  835 	cjne	a,_bitNine,00114$
                                    836 ;	ecen4330lab7.c:198: data++;
      0000E6 05*20            [12]  837 	inc	_data
      0000E8                        838 00114$:
                                    839 ;	ecen4330lab7.c:202: switch(parity) {
      0000E8 E4               [12]  840 	clr	a
      0000E9 B5*40 02         [24]  841 	cjne	a,_parity,00197$
      0000EC 80 11            [24]  842 	sjmp	00115$
      0000EE                        843 00197$:
      0000EE 74 01            [12]  844 	mov	a,#0x01
      0000F0 B5*40 02         [24]  845 	cjne	a,_parity,00198$
      0000F3 80 31            [24]  846 	sjmp	00119$
      0000F5                        847 00198$:
      0000F5 74 02            [12]  848 	mov	a,#0x02
      0000F7 B5*40 02         [24]  849 	cjne	a,_parity,00199$
      0000FA 80 51            [24]  850 	sjmp	00123$
      0000FC                        851 00199$:
      0000FC 02r01r62         [24]  852 	ljmp	00125$
                                    853 ;	ecen4330lab7.c:204: case 0:
      0000FF                        854 00115$:
                                    855 ;	ecen4330lab7.c:206: if(data % 2 != 0) {
      0000FF E5*20            [12]  856 	mov	a,_data
      000101 30 E0 0B         [24]  857 	jnb	acc.0,00117$
                                    858 ;	ecen4330lab7.c:207: LCD_string_write("Parity\nError.");
      000104 90r05r0B         [24]  859 	mov	dptr,#___str_0
      000107 75 F0 80         [24]  860 	mov	b,#0x80
      00010A 12r0Br3F         [24]  861 	lcall	_LCD_string_write
      00010D 80 53            [24]  862 	sjmp	00125$
      00010F                        863 00117$:
                                    864 ;	ecen4330lab7.c:211: LCD_string_write("UART data\nreceived.\n\n >> ");
      00010F 90r05r19         [24]  865 	mov	dptr,#___str_1
      000112 75 F0 80         [24]  866 	mov	b,#0x80
      000115 12r0Br3F         [24]  867 	lcall	_LCD_string_write
                                    868 ;	ecen4330lab7.c:212: write(received_byte);
      000118 85*42 82         [24]  869 	mov	dpl,_received_byte
      00011B 12r0ArD9         [24]  870 	lcall	_write
                                    871 ;	ecen4330lab7.c:213: delay(500);
      00011E 90 01 F4         [24]  872 	mov	dptr,#0x01f4
      000121 12r01r9F         [24]  873 	lcall	_delay
                                    874 ;	ecen4330lab7.c:215: break;
                                    875 ;	ecen4330lab7.c:217: case 1:
      000124 80 3C            [24]  876 	sjmp	00125$
      000126                        877 00119$:
                                    878 ;	ecen4330lab7.c:219: if(data % 2 == 0) {
      000126 E5*20            [12]  879 	mov	a,_data
      000128 20 E0 0B         [24]  880 	jb	acc.0,00121$
                                    881 ;	ecen4330lab7.c:220: LCD_string_write("Parity\nError.");
      00012B 90r05r0B         [24]  882 	mov	dptr,#___str_0
      00012E 75 F0 80         [24]  883 	mov	b,#0x80
      000131 12r0Br3F         [24]  884 	lcall	_LCD_string_write
      000134 80 2C            [24]  885 	sjmp	00125$
      000136                        886 00121$:
                                    887 ;	ecen4330lab7.c:224: LCD_string_write("UART data\nreceived.\n\n >> ");
      000136 90r05r19         [24]  888 	mov	dptr,#___str_1
      000139 75 F0 80         [24]  889 	mov	b,#0x80
      00013C 12r0Br3F         [24]  890 	lcall	_LCD_string_write
                                    891 ;	ecen4330lab7.c:225: write(received_byte);
      00013F 85*42 82         [24]  892 	mov	dpl,_received_byte
      000142 12r0ArD9         [24]  893 	lcall	_write
                                    894 ;	ecen4330lab7.c:226: delay(500);
      000145 90 01 F4         [24]  895 	mov	dptr,#0x01f4
      000148 12r01r9F         [24]  896 	lcall	_delay
                                    897 ;	ecen4330lab7.c:228: break;
                                    898 ;	ecen4330lab7.c:230: case 2:
      00014B 80 15            [24]  899 	sjmp	00125$
      00014D                        900 00123$:
                                    901 ;	ecen4330lab7.c:232: LCD_string_write("UART data\nreceived.\n\n >> ");
      00014D 90r05r19         [24]  902 	mov	dptr,#___str_1
      000150 75 F0 80         [24]  903 	mov	b,#0x80
      000153 12r0Br3F         [24]  904 	lcall	_LCD_string_write
                                    905 ;	ecen4330lab7.c:233: write(received_byte);
      000156 85*42 82         [24]  906 	mov	dpl,_received_byte
      000159 12r0ArD9         [24]  907 	lcall	_write
                                    908 ;	ecen4330lab7.c:234: delay(500);
      00015C 90 01 F4         [24]  909 	mov	dptr,#0x01f4
      00015F 12r01r9F         [24]  910 	lcall	_delay
                                    911 ;	ecen4330lab7.c:238: }
      000162                        912 00125$:
                                    913 ;	ecen4330lab7.c:239: SCON &= 0xF3;
      000162 53 98 F3         [24]  914 	anl	_SCON,#0xf3
      000165 80 02            [24]  915 	sjmp	00129$
      000167                        916 00127$:
                                    917 ;	ecen4330lab7.c:242: TI = 0;
                                    918 ;	assignBit
      000167 C2 99            [12]  919 	clr	_TI
      000169                        920 00129$:
                                    921 ;	ecen4330lab7.c:244: }
      000169 D0 D0            [24]  922 	pop	psw
      00016B D0 00            [24]  923 	pop	(0+0)
      00016D D0 01            [24]  924 	pop	(0+1)
      00016F D0 02            [24]  925 	pop	(0+2)
      000171 D0 03            [24]  926 	pop	(0+3)
      000173 D0 04            [24]  927 	pop	(0+4)
      000175 D0 05            [24]  928 	pop	(0+5)
      000177 D0 06            [24]  929 	pop	(0+6)
      000179 D0 07            [24]  930 	pop	(0+7)
      00017B D0 83            [24]  931 	pop	dph
      00017D D0 82            [24]  932 	pop	dpl
      00017F D0 F0            [24]  933 	pop	b
      000181 D0 E0            [24]  934 	pop	acc
      000183 D0*00            [24]  935 	pop	bits
      000185 32               [24]  936 	reti
                                    937 ;------------------------------------------------------------
                                    938 ;Allocation info for local variables in function 'UART_Init'
                                    939 ;------------------------------------------------------------
                                    940 ;	ecen4330lab7.c:252: void UART_Init(){
                                    941 ;	-----------------------------------------
                                    942 ;	 function UART_Init
                                    943 ;	-----------------------------------------
      000186                        944 _UART_Init:
                                    945 ;	ecen4330lab7.c:253: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      000186 75 98 50         [24]  946 	mov	_SCON,#0x50
                                    947 ;	ecen4330lab7.c:254: PCON &= 0x7F; // 
      000189 53 87 7F         [24]  948 	anl	_PCON,#0x7f
                                    949 ;	ecen4330lab7.c:255: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      00018C 75 89 20         [24]  950 	mov	_TMOD,#0x20
                                    951 ;	ecen4330lab7.c:256: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      00018F 75 8D FD         [24]  952 	mov	_TH1,#0xfd
                                    953 ;	ecen4330lab7.c:257: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    954 ;	assignBit
      000192 D2 8E            [12]  955 	setb	_TR1
                                    956 ;	ecen4330lab7.c:258: ES  = 1;      // Enable Serial Interrupt
                                    957 ;	assignBit
      000194 D2 AC            [12]  958 	setb	_ES
                                    959 ;	ecen4330lab7.c:259: EA  = 1;      // Enable Global Interrupt bit
                                    960 ;	assignBit
      000196 D2 AF            [12]  961 	setb	_EA
                                    962 ;	ecen4330lab7.c:260: }
      000198 22               [24]  963 	ret
                                    964 ;------------------------------------------------------------
                                    965 ;Allocation info for local variables in function 'UART_transmit'
                                    966 ;------------------------------------------------------------
                                    967 ;	ecen4330lab7.c:268: void UART_transmit(){
                                    968 ;	-----------------------------------------
                                    969 ;	 function UART_transmit
                                    970 ;	-----------------------------------------
      000199                        971 _UART_transmit:
                                    972 ;	ecen4330lab7.c:271: while(TI == 1);
      000199                        973 00101$:
      000199 20 99 FD         [24]  974 	jb	_TI,00101$
                                    975 ;	ecen4330lab7.c:273: TI = 0;
                                    976 ;	assignBit
      00019C C2 99            [12]  977 	clr	_TI
                                    978 ;	ecen4330lab7.c:274: }
      00019E 22               [24]  979 	ret
                                    980 ;------------------------------------------------------------
                                    981 ;Allocation info for local variables in function 'delay'
                                    982 ;------------------------------------------------------------
                                    983 ;d                         Allocated to registers r6 r7 
                                    984 ;i                         Allocated to registers r4 r5 
                                    985 ;j                         Allocated to registers r2 r3 
                                    986 ;------------------------------------------------------------
                                    987 ;	ecen4330lab7.c:308: void delay (int d) /// x 1ms
                                    988 ;	-----------------------------------------
                                    989 ;	 function delay
                                    990 ;	-----------------------------------------
      00019F                        991 _delay:
      00019F AE 82            [24]  992 	mov	r6,dpl
      0001A1 AF 83            [24]  993 	mov	r7,dph
                                    994 ;	ecen4330lab7.c:311: for (i=0;i<d;i++)
      0001A3 7C 00            [12]  995 	mov	r4,#0x00
      0001A5 7D 00            [12]  996 	mov	r5,#0x00
      0001A7                        997 00107$:
      0001A7 C3               [12]  998 	clr	c
      0001A8 EC               [12]  999 	mov	a,r4
      0001A9 9E               [12] 1000 	subb	a,r6
      0001AA ED               [12] 1001 	mov	a,r5
      0001AB 64 80            [12] 1002 	xrl	a,#0x80
      0001AD 8F F0            [24] 1003 	mov	b,r7
      0001AF 63 F0 80         [24] 1004 	xrl	b,#0x80
      0001B2 95 F0            [12] 1005 	subb	a,b
      0001B4 50 14            [24] 1006 	jnc	00109$
                                   1007 ;	ecen4330lab7.c:313: for (j=0;j<1000;j++);
      0001B6 7A E8            [12] 1008 	mov	r2,#0xe8
      0001B8 7B 03            [12] 1009 	mov	r3,#0x03
      0001BA                       1010 00105$:
      0001BA 1A               [12] 1011 	dec	r2
      0001BB BA FF 01         [24] 1012 	cjne	r2,#0xff,00130$
      0001BE 1B               [12] 1013 	dec	r3
      0001BF                       1014 00130$:
      0001BF EA               [12] 1015 	mov	a,r2
      0001C0 4B               [12] 1016 	orl	a,r3
      0001C1 70 F7            [24] 1017 	jnz	00105$
                                   1018 ;	ecen4330lab7.c:311: for (i=0;i<d;i++)
      0001C3 0C               [12] 1019 	inc	r4
      0001C4 BC 00 E0         [24] 1020 	cjne	r4,#0x00,00107$
      0001C7 0D               [12] 1021 	inc	r5
      0001C8 80 DD            [24] 1022 	sjmp	00107$
      0001CA                       1023 00109$:
                                   1024 ;	ecen4330lab7.c:315: }
      0001CA 22               [24] 1025 	ret
                                   1026 ;------------------------------------------------------------
                                   1027 ;Allocation info for local variables in function 'writeRegister8'
                                   1028 ;------------------------------------------------------------
                                   1029 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                   1030 ;a                         Allocated to registers r7 
                                   1031 ;------------------------------------------------------------
                                   1032 ;	ecen4330lab7.c:323: void writeRegister8(u8 a, u8 d) {
                                   1033 ;	-----------------------------------------
                                   1034 ;	 function writeRegister8
                                   1035 ;	-----------------------------------------
      0001CB                       1036 _writeRegister8:
      0001CB AF 82            [24] 1037 	mov	r7,dpl
                                   1038 ;	ecen4330lab7.c:324: CD = __CMD__;
                                   1039 ;	assignBit
      0001CD C2 B5            [12] 1040 	clr	_P3_5
                                   1041 ;	ecen4330lab7.c:325: write8(a);
                                   1042 ;	assignBit
      0001CF D2 B4            [12] 1043 	setb	_P3_4
      0001D1 85*02 82         [24] 1044 	mov	dpl,_lcd_address
      0001D4 85*03 83         [24] 1045 	mov	dph,(_lcd_address + 1)
      0001D7 EF               [12] 1046 	mov	a,r7
      0001D8 F0               [24] 1047 	movx	@dptr,a
                                   1048 ;	assignBit
      0001D9 C2 B4            [12] 1049 	clr	_P3_4
                                   1050 ;	ecen4330lab7.c:326: CD = __DATA__;
                                   1051 ;	assignBit
      0001DB D2 B5            [12] 1052 	setb	_P3_5
                                   1053 ;	ecen4330lab7.c:327: write8(d);
                                   1054 ;	assignBit
      0001DD D2 B4            [12] 1055 	setb	_P3_4
      0001DF 85*02 82         [24] 1056 	mov	dpl,_lcd_address
      0001E2 85*03 83         [24] 1057 	mov	dph,(_lcd_address + 1)
      0001E5 E5*00            [12] 1058 	mov	a,_writeRegister8_PARM_2
      0001E7 F0               [24] 1059 	movx	@dptr,a
                                   1060 ;	assignBit
      0001E8 C2 B4            [12] 1061 	clr	_P3_4
                                   1062 ;	ecen4330lab7.c:328: }
      0001EA 22               [24] 1063 	ret
                                   1064 ;------------------------------------------------------------
                                   1065 ;Allocation info for local variables in function 'writeRegister16'
                                   1066 ;------------------------------------------------------------
                                   1067 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                   1068 ;a                         Allocated to registers r6 r7 
                                   1069 ;hi                        Allocated to registers r6 r7 
                                   1070 ;lo                        Allocated to registers r4 r5 
                                   1071 ;------------------------------------------------------------
                                   1072 ;	ecen4330lab7.c:336: void writeRegister16(u16 a, u16 d){
                                   1073 ;	-----------------------------------------
                                   1074 ;	 function writeRegister16
                                   1075 ;	-----------------------------------------
      0001EB                       1076 _writeRegister16:
      0001EB AE 82            [24] 1077 	mov	r6,dpl
      0001ED AF 83            [24] 1078 	mov	r7,dph
                                   1079 ;	ecen4330lab7.c:338: hi = (a) >> 8;
      0001EF 8F 04            [24] 1080 	mov	ar4,r7
                                   1081 ;	ecen4330lab7.c:339: lo = (a);
                                   1082 ;	ecen4330lab7.c:340: write8Reg(hi);
                                   1083 ;	assignBit
      0001F1 C2 B5            [12] 1084 	clr	_P3_5
                                   1085 ;	assignBit
      0001F3 D2 B4            [12] 1086 	setb	_P3_4
      0001F5 85*02 82         [24] 1087 	mov	dpl,_lcd_address
      0001F8 85*03 83         [24] 1088 	mov	dph,(_lcd_address + 1)
      0001FB EC               [12] 1089 	mov	a,r4
      0001FC F0               [24] 1090 	movx	@dptr,a
                                   1091 ;	assignBit
      0001FD C2 B4            [12] 1092 	clr	_P3_4
                                   1093 ;	ecen4330lab7.c:341: write8Reg(lo);
                                   1094 ;	assignBit
      0001FF C2 B5            [12] 1095 	clr	_P3_5
                                   1096 ;	assignBit
      000201 D2 B4            [12] 1097 	setb	_P3_4
      000203 85*02 82         [24] 1098 	mov	dpl,_lcd_address
      000206 85*03 83         [24] 1099 	mov	dph,(_lcd_address + 1)
      000209 EE               [12] 1100 	mov	a,r6
      00020A F0               [24] 1101 	movx	@dptr,a
                                   1102 ;	assignBit
      00020B C2 B4            [12] 1103 	clr	_P3_4
                                   1104 ;	ecen4330lab7.c:342: hi = (d) >> 8;
      00020D AE*01            [24] 1105 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1106 ;	ecen4330lab7.c:343: lo = (d);
      00020F AC*00            [24] 1107 	mov	r4,_writeRegister16_PARM_2
                                   1108 ;	ecen4330lab7.c:344: CD = 1 ;
                                   1109 ;	assignBit
      000211 D2 B5            [12] 1110 	setb	_P3_5
                                   1111 ;	ecen4330lab7.c:345: write8Data(hi);
                                   1112 ;	assignBit
      000213 D2 B5            [12] 1113 	setb	_P3_5
                                   1114 ;	assignBit
      000215 D2 B4            [12] 1115 	setb	_P3_4
      000217 85*02 82         [24] 1116 	mov	dpl,_lcd_address
      00021A 85*03 83         [24] 1117 	mov	dph,(_lcd_address + 1)
      00021D EE               [12] 1118 	mov	a,r6
      00021E F0               [24] 1119 	movx	@dptr,a
                                   1120 ;	assignBit
      00021F C2 B4            [12] 1121 	clr	_P3_4
                                   1122 ;	ecen4330lab7.c:346: write8Data(lo);
                                   1123 ;	assignBit
      000221 D2 B5            [12] 1124 	setb	_P3_5
                                   1125 ;	assignBit
      000223 D2 B4            [12] 1126 	setb	_P3_4
      000225 85*02 82         [24] 1127 	mov	dpl,_lcd_address
      000228 85*03 83         [24] 1128 	mov	dph,(_lcd_address + 1)
      00022B EC               [12] 1129 	mov	a,r4
      00022C F0               [24] 1130 	movx	@dptr,a
                                   1131 ;	assignBit
      00022D C2 B4            [12] 1132 	clr	_P3_4
                                   1133 ;	ecen4330lab7.c:347: }
      00022F 22               [24] 1134 	ret
                                   1135 ;------------------------------------------------------------
                                   1136 ;Allocation info for local variables in function 'rtcInit'
                                   1137 ;------------------------------------------------------------
                                   1138 ;i                         Allocated with name '_rtcInit_i_65536_77'
                                   1139 ;------------------------------------------------------------
                                   1140 ;	ecen4330lab7.c:369: void rtcInit(void) {
                                   1141 ;	-----------------------------------------
                                   1142 ;	 function rtcInit
                                   1143 ;	-----------------------------------------
      000230                       1144 _rtcInit:
                                   1145 ;	ecen4330lab7.c:372: rtcCmd(__REG_F__, __HR_24__|__STOP__|__RESET__);  // stop and reset
      000230 75*00 07         [24] 1146 	mov	_rtcCmd_PARM_2,#0x07
      000233 90 00 0F         [24] 1147 	mov	dptr,#0x000f
      000236 12r02r76         [24] 1148 	lcall	_rtcCmd
                                   1149 ;	ecen4330lab7.c:375: for (i = __S1_REG__; i < __REG_D__;i++) {
      000239 7E 00            [12] 1150 	mov	r6,#0x00
      00023B 7F 00            [12] 1151 	mov	r7,#0x00
      00023D                       1152 00102$:
                                   1153 ;	ecen4330lab7.c:376: rtcWrite(i, 0x00);
      00023D 75*44 00         [24] 1154 	mov	_rtcWrite_PARM_2,#0x00
      000240 8E 82            [24] 1155 	mov	dpl,r6
      000242 8F 83            [24] 1156 	mov	dph,r7
      000244 C0 07            [24] 1157 	push	ar7
      000246 C0 06            [24] 1158 	push	ar6
      000248 12r02r7F         [24] 1159 	lcall	_rtcWrite
      00024B D0 06            [24] 1160 	pop	ar6
      00024D D0 07            [24] 1161 	pop	ar7
                                   1162 ;	ecen4330lab7.c:375: for (i = __S1_REG__; i < __REG_D__;i++) {
      00024F 0E               [12] 1163 	inc	r6
      000250 BE 00 01         [24] 1164 	cjne	r6,#0x00,00115$
      000253 0F               [12] 1165 	inc	r7
      000254                       1166 00115$:
      000254 C3               [12] 1167 	clr	c
      000255 EE               [12] 1168 	mov	a,r6
      000256 94 0D            [12] 1169 	subb	a,#0x0d
      000258 EF               [12] 1170 	mov	a,r7
      000259 94 00            [12] 1171 	subb	a,#0x00
      00025B 40 E0            [24] 1172 	jc	00102$
                                   1173 ;	ecen4330lab7.c:379: rtcCmd(__REG_F__, __HR_24__);
      00025D 75*00 04         [24] 1174 	mov	_rtcCmd_PARM_2,#0x04
      000260 90 00 0F         [24] 1175 	mov	dptr,#0x000f
                                   1176 ;	ecen4330lab7.c:380: }
      000263 02r02r76         [24] 1177 	ljmp	_rtcCmd
                                   1178 ;------------------------------------------------------------
                                   1179 ;Allocation info for local variables in function 'rtcBusy'
                                   1180 ;------------------------------------------------------------
                                   1181 ;__1310720001              Allocated to registers 
                                   1182 ;map_address               Allocated to registers 
                                   1183 ;__1310720002              Allocated to registers 
                                   1184 ;map_address               Allocated to registers 
                                   1185 ;------------------------------------------------------------
                                   1186 ;	ecen4330lab7.c:388: void rtcBusy(void) {
                                   1187 ;	-----------------------------------------
                                   1188 ;	 function rtcBusy
                                   1189 ;	-----------------------------------------
      000266                       1190 _rtcBusy:
                                   1191 ;	ecen4330lab7.c:390: while((ioread8(map_address) & 0x02));
      000266                       1192 00101$:
                                   1193 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1194 ;	assignBit
      000266 D2 B4            [12] 1195 	setb	_P3_4
                                   1196 ;	ecen4330lab7.c:297: data = *map_address;
      000268 90 00 0D         [24] 1197 	mov	dptr,#0x000d
      00026B E0               [24] 1198 	movx	a,@dptr
      00026C F5*20            [12] 1199 	mov	_data,a
                                   1200 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1201 ;	assignBit
      00026E C2 B4            [12] 1202 	clr	_P3_4
                                   1203 ;	ecen4330lab7.c:299: return data;   
      000270 E5*20            [12] 1204 	mov	a,_data
                                   1205 ;	ecen4330lab7.c:390: while((ioread8(map_address) & 0x02));
      000272 20 E1 F1         [24] 1206 	jb	acc.1,00101$
                                   1207 ;	ecen4330lab7.c:391: }
      000275 22               [24] 1208 	ret
                                   1209 ;------------------------------------------------------------
                                   1210 ;Allocation info for local variables in function 'rtcCmd'
                                   1211 ;------------------------------------------------------------
                                   1212 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1213 ;addr                      Allocated to registers r6 r7 
                                   1214 ;map_address               Allocated to registers 
                                   1215 ;__1310720004              Allocated to registers 
                                   1216 ;__1310720005              Allocated to registers r7 
                                   1217 ;map_address               Allocated to registers 
                                   1218 ;d                         Allocated to registers 
                                   1219 ;------------------------------------------------------------
                                   1220 ;	ecen4330lab7.c:399: inline void rtcCmd(unsigned int addr, unsigned char d) {
                                   1221 ;	-----------------------------------------
                                   1222 ;	 function rtcCmd
                                   1223 ;	-----------------------------------------
      000276                       1224 _rtcCmd:
                                   1225 ;	ecen4330lab7.c:400: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1226 ;	ecen4330lab7.c:401: iowrite8(map_address, d);
      000276 AF*00            [24] 1227 	mov	r7,_rtcCmd_PARM_2
                                   1228 ;	ecen4330lab7.c:283: IOM = 1;
                                   1229 ;	assignBit
      000278 D2 B4            [12] 1230 	setb	_P3_4
                                   1231 ;	ecen4330lab7.c:284: *map_address = d;
      00027A EF               [12] 1232 	mov	a,r7
      00027B F0               [24] 1233 	movx	@dptr,a
                                   1234 ;	ecen4330lab7.c:285: IOM = 0;
                                   1235 ;	assignBit
      00027C C2 B4            [12] 1236 	clr	_P3_4
                                   1237 ;	ecen4330lab7.c:401: iowrite8(map_address, d);
                                   1238 ;	ecen4330lab7.c:402: }
      00027E 22               [24] 1239 	ret
                                   1240 ;------------------------------------------------------------
                                   1241 ;Allocation info for local variables in function 'rtcWrite'
                                   1242 ;------------------------------------------------------------
                                   1243 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1244 ;addr                      Allocated to registers r6 r7 
                                   1245 ;map_address               Allocated to registers r6 r7 
                                   1246 ;__1310720007              Allocated to registers 
                                   1247 ;__1310720008              Allocated to registers 
                                   1248 ;addr                      Allocated to registers 
                                   1249 ;d                         Allocated to registers 
                                   1250 ;map_address               Allocated to registers 
                                   1251 ;__1310720004              Allocated to registers 
                                   1252 ;__1310720005              Allocated to registers 
                                   1253 ;map_address               Allocated to registers 
                                   1254 ;d                         Allocated to registers 
                                   1255 ;__1310720010              Allocated to registers 
                                   1256 ;__1310720011              Allocated to registers 
                                   1257 ;map_address               Allocated to registers 
                                   1258 ;d                         Allocated to registers 
                                   1259 ;__1310720013              Allocated to registers 
                                   1260 ;__1310720014              Allocated to registers r7 
                                   1261 ;addr                      Allocated to registers 
                                   1262 ;d                         Allocated to registers 
                                   1263 ;map_address               Allocated to registers 
                                   1264 ;__1310720004              Allocated to registers 
                                   1265 ;__1310720005              Allocated to registers 
                                   1266 ;map_address               Allocated to registers 
                                   1267 ;d                         Allocated to registers 
                                   1268 ;------------------------------------------------------------
                                   1269 ;	ecen4330lab7.c:410: inline void rtcWrite(unsigned int addr, unsigned char d) {
                                   1270 ;	-----------------------------------------
                                   1271 ;	 function rtcWrite
                                   1272 ;	-----------------------------------------
      00027F                       1273 _rtcWrite:
      00027F AE 82            [24] 1274 	mov	r6,dpl
      000281 AF 83            [24] 1275 	mov	r7,dph
                                   1276 ;	ecen4330lab7.c:411: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1277 ;	ecen4330lab7.c:283: IOM = 1;
                                   1278 ;	assignBit
      000283 D2 B4            [12] 1279 	setb	_P3_4
                                   1280 ;	ecen4330lab7.c:284: *map_address = d;
      000285 90 00 0D         [24] 1281 	mov	dptr,#0x000d
      000288 74 01            [12] 1282 	mov	a,#0x01
      00028A F0               [24] 1283 	movx	@dptr,a
                                   1284 ;	ecen4330lab7.c:285: IOM = 0;
                                   1285 ;	assignBit
      00028B C2 B4            [12] 1286 	clr	_P3_4
                                   1287 ;	ecen4330lab7.c:413: rtcBusy();
      00028D C0 07            [24] 1288 	push	ar7
      00028F C0 06            [24] 1289 	push	ar6
      000291 12r02r66         [24] 1290 	lcall	_rtcBusy
      000294 D0 06            [24] 1291 	pop	ar6
      000296 D0 07            [24] 1292 	pop	ar7
                                   1293 ;	ecen4330lab7.c:283: IOM = 1;
                                   1294 ;	assignBit
      000298 D2 B4            [12] 1295 	setb	_P3_4
                                   1296 ;	ecen4330lab7.c:284: *map_address = d;
      00029A 8E 82            [24] 1297 	mov	dpl,r6
      00029C 8F 83            [24] 1298 	mov	dph,r7
      00029E E4               [12] 1299 	clr	a
      00029F F0               [24] 1300 	movx	@dptr,a
                                   1301 ;	ecen4330lab7.c:285: IOM = 0;
                                   1302 ;	assignBit
      0002A0 C2 B4            [12] 1303 	clr	_P3_4
                                   1304 ;	ecen4330lab7.c:415: rtcCmd(__REG_D__, d);
      0002A2 AF*44            [24] 1305 	mov	r7,_rtcWrite_PARM_2
                                   1306 ;	ecen4330lab7.c:283: IOM = 1;
                                   1307 ;	assignBit
      0002A4 D2 B4            [12] 1308 	setb	_P3_4
                                   1309 ;	ecen4330lab7.c:284: *map_address = d;
      0002A6 90 00 0D         [24] 1310 	mov	dptr,#0x000d
      0002A9 EF               [12] 1311 	mov	a,r7
      0002AA F0               [24] 1312 	movx	@dptr,a
                                   1313 ;	ecen4330lab7.c:285: IOM = 0;
                                   1314 ;	assignBit
      0002AB C2 B4            [12] 1315 	clr	_P3_4
                                   1316 ;	ecen4330lab7.c:415: rtcCmd(__REG_D__, d);
                                   1317 ;	ecen4330lab7.c:416: }
      0002AD 22               [24] 1318 	ret
                                   1319 ;------------------------------------------------------------
                                   1320 ;Allocation info for local variables in function 'rtcRead'
                                   1321 ;------------------------------------------------------------
                                   1322 ;addr                      Allocated to registers r6 r7 
                                   1323 ;__1310720019              Allocated to registers 
                                   1324 ;map_address               Allocated to registers r6 r7 
                                   1325 ;__1310720016              Allocated to registers 
                                   1326 ;__1310720017              Allocated to registers 
                                   1327 ;addr                      Allocated to registers 
                                   1328 ;d                         Allocated to registers 
                                   1329 ;map_address               Allocated to registers 
                                   1330 ;__1310720004              Allocated to registers 
                                   1331 ;__1310720005              Allocated to registers 
                                   1332 ;map_address               Allocated to registers 
                                   1333 ;d                         Allocated to registers 
                                   1334 ;__1310720020              Allocated to registers 
                                   1335 ;map_address               Allocated to registers 
                                   1336 ;__1310720022              Allocated to registers 
                                   1337 ;__1310720023              Allocated to registers 
                                   1338 ;addr                      Allocated to registers 
                                   1339 ;d                         Allocated to registers 
                                   1340 ;map_address               Allocated to registers 
                                   1341 ;__1310720004              Allocated to registers 
                                   1342 ;__1310720005              Allocated to registers 
                                   1343 ;map_address               Allocated to registers 
                                   1344 ;d                         Allocated to registers 
                                   1345 ;------------------------------------------------------------
                                   1346 ;	ecen4330lab7.c:425: inline unsigned char rtcRead(unsigned int addr) {
                                   1347 ;	-----------------------------------------
                                   1348 ;	 function rtcRead
                                   1349 ;	-----------------------------------------
      0002AE                       1350 _rtcRead:
      0002AE AE 82            [24] 1351 	mov	r6,dpl
      0002B0 AF 83            [24] 1352 	mov	r7,dph
                                   1353 ;	ecen4330lab7.c:426: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1354 ;	ecen4330lab7.c:283: IOM = 1;
                                   1355 ;	assignBit
      0002B2 D2 B4            [12] 1356 	setb	_P3_4
                                   1357 ;	ecen4330lab7.c:284: *map_address = d;
      0002B4 90 00 0D         [24] 1358 	mov	dptr,#0x000d
      0002B7 74 01            [12] 1359 	mov	a,#0x01
      0002B9 F0               [24] 1360 	movx	@dptr,a
                                   1361 ;	ecen4330lab7.c:285: IOM = 0;
                                   1362 ;	assignBit
      0002BA C2 B4            [12] 1363 	clr	_P3_4
                                   1364 ;	ecen4330lab7.c:428: rtcBusy();
      0002BC C0 07            [24] 1365 	push	ar7
      0002BE C0 06            [24] 1366 	push	ar6
      0002C0 12r02r66         [24] 1367 	lcall	_rtcBusy
      0002C3 D0 06            [24] 1368 	pop	ar6
      0002C5 D0 07            [24] 1369 	pop	ar7
                                   1370 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1371 ;	assignBit
      0002C7 D2 B4            [12] 1372 	setb	_P3_4
                                   1373 ;	ecen4330lab7.c:297: data = *map_address;
      0002C9 8E 82            [24] 1374 	mov	dpl,r6
      0002CB 8F 83            [24] 1375 	mov	dph,r7
      0002CD E0               [24] 1376 	movx	a,@dptr
      0002CE F5*20            [12] 1377 	mov	_data,a
                                   1378 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1379 ;	assignBit
      0002D0 C2 B4            [12] 1380 	clr	_P3_4
                                   1381 ;	ecen4330lab7.c:299: return data;   
                                   1382 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002D2 E5*20            [12] 1383 	mov	a,_data
      0002D4 54 0F            [12] 1384 	anl	a,#0x0f
      0002D6 44 30            [12] 1385 	orl	a,#0x30
      0002D8 F5*20            [12] 1386 	mov	_data,a
                                   1387 ;	ecen4330lab7.c:283: IOM = 1;
                                   1388 ;	assignBit
      0002DA D2 B4            [12] 1389 	setb	_P3_4
                                   1390 ;	ecen4330lab7.c:284: *map_address = d;
      0002DC 90 00 0D         [24] 1391 	mov	dptr,#0x000d
      0002DF E4               [12] 1392 	clr	a
      0002E0 F0               [24] 1393 	movx	@dptr,a
                                   1394 ;	ecen4330lab7.c:285: IOM = 0;
                                   1395 ;	assignBit
      0002E1 C2 B4            [12] 1396 	clr	_P3_4
                                   1397 ;	ecen4330lab7.c:433: return data;
      0002E3 85*20 82         [24] 1398 	mov	dpl,_data
                                   1399 ;	ecen4330lab7.c:434: }
      0002E6 22               [24] 1400 	ret
                                   1401 ;------------------------------------------------------------
                                   1402 ;Allocation info for local variables in function 'rtcPrint'
                                   1403 ;------------------------------------------------------------
                                   1404 ;__1310720040              Allocated to registers 
                                   1405 ;__1310720037              Allocated to registers 
                                   1406 ;__1310720034              Allocated to registers 
                                   1407 ;__1310720031              Allocated to registers 
                                   1408 ;__1310720028              Allocated to registers 
                                   1409 ;__1310720025              Allocated to registers 
                                   1410 ;t                         Allocated to registers 
                                   1411 ;__1310720026              Allocated to registers 
                                   1412 ;addr                      Allocated to registers 
                                   1413 ;__1310720019              Allocated to registers 
                                   1414 ;map_address               Allocated to registers 
                                   1415 ;__1310720016              Allocated to registers 
                                   1416 ;__1310720017              Allocated to registers 
                                   1417 ;addr                      Allocated to registers 
                                   1418 ;d                         Allocated to registers 
                                   1419 ;map_address               Allocated to registers 
                                   1420 ;__1310720004              Allocated to registers 
                                   1421 ;__1310720005              Allocated to registers 
                                   1422 ;map_address               Allocated to registers 
                                   1423 ;d                         Allocated to registers 
                                   1424 ;__1310720020              Allocated to registers 
                                   1425 ;map_address               Allocated to registers 
                                   1426 ;__1310720022              Allocated to registers 
                                   1427 ;__1310720023              Allocated to registers 
                                   1428 ;addr                      Allocated to registers 
                                   1429 ;d                         Allocated to registers 
                                   1430 ;map_address               Allocated to registers 
                                   1431 ;__1310720004              Allocated to registers 
                                   1432 ;__1310720005              Allocated to registers 
                                   1433 ;map_address               Allocated to registers 
                                   1434 ;d                         Allocated to registers 
                                   1435 ;__1310720029              Allocated to registers 
                                   1436 ;addr                      Allocated to registers 
                                   1437 ;__1310720019              Allocated to registers 
                                   1438 ;map_address               Allocated to registers 
                                   1439 ;__1310720016              Allocated to registers 
                                   1440 ;__1310720017              Allocated to registers 
                                   1441 ;addr                      Allocated to registers 
                                   1442 ;d                         Allocated to registers 
                                   1443 ;map_address               Allocated to registers 
                                   1444 ;__1310720004              Allocated to registers 
                                   1445 ;__1310720005              Allocated to registers 
                                   1446 ;map_address               Allocated to registers 
                                   1447 ;d                         Allocated to registers 
                                   1448 ;__1310720020              Allocated to registers 
                                   1449 ;map_address               Allocated to registers 
                                   1450 ;__1310720022              Allocated to registers 
                                   1451 ;__1310720023              Allocated to registers 
                                   1452 ;addr                      Allocated to registers 
                                   1453 ;d                         Allocated to registers 
                                   1454 ;map_address               Allocated to registers 
                                   1455 ;__1310720004              Allocated to registers 
                                   1456 ;__1310720005              Allocated to registers 
                                   1457 ;map_address               Allocated to registers 
                                   1458 ;d                         Allocated to registers 
                                   1459 ;__1310720032              Allocated to registers 
                                   1460 ;addr                      Allocated to registers 
                                   1461 ;__1310720019              Allocated to registers 
                                   1462 ;map_address               Allocated to registers 
                                   1463 ;__1310720016              Allocated to registers 
                                   1464 ;__1310720017              Allocated to registers 
                                   1465 ;addr                      Allocated to registers 
                                   1466 ;d                         Allocated to registers 
                                   1467 ;map_address               Allocated to registers 
                                   1468 ;__1310720004              Allocated to registers 
                                   1469 ;__1310720005              Allocated to registers 
                                   1470 ;map_address               Allocated to registers 
                                   1471 ;d                         Allocated to registers 
                                   1472 ;__1310720020              Allocated to registers 
                                   1473 ;map_address               Allocated to registers 
                                   1474 ;__1310720022              Allocated to registers 
                                   1475 ;__1310720023              Allocated to registers 
                                   1476 ;addr                      Allocated to registers 
                                   1477 ;d                         Allocated to registers 
                                   1478 ;map_address               Allocated to registers 
                                   1479 ;__1310720004              Allocated to registers 
                                   1480 ;__1310720005              Allocated to registers 
                                   1481 ;map_address               Allocated to registers 
                                   1482 ;d                         Allocated to registers 
                                   1483 ;__1310720035              Allocated to registers 
                                   1484 ;addr                      Allocated to registers 
                                   1485 ;__1310720019              Allocated to registers 
                                   1486 ;map_address               Allocated to registers 
                                   1487 ;__1310720016              Allocated to registers 
                                   1488 ;__1310720017              Allocated to registers 
                                   1489 ;addr                      Allocated to registers 
                                   1490 ;d                         Allocated to registers 
                                   1491 ;map_address               Allocated to registers 
                                   1492 ;__1310720004              Allocated to registers 
                                   1493 ;__1310720005              Allocated to registers 
                                   1494 ;map_address               Allocated to registers 
                                   1495 ;d                         Allocated to registers 
                                   1496 ;__1310720020              Allocated to registers 
                                   1497 ;map_address               Allocated to registers 
                                   1498 ;__1310720022              Allocated to registers 
                                   1499 ;__1310720023              Allocated to registers 
                                   1500 ;addr                      Allocated to registers 
                                   1501 ;d                         Allocated to registers 
                                   1502 ;map_address               Allocated to registers 
                                   1503 ;__1310720004              Allocated to registers 
                                   1504 ;__1310720005              Allocated to registers 
                                   1505 ;map_address               Allocated to registers 
                                   1506 ;d                         Allocated to registers 
                                   1507 ;__1310720038              Allocated to registers 
                                   1508 ;addr                      Allocated to registers 
                                   1509 ;__1310720019              Allocated to registers 
                                   1510 ;map_address               Allocated to registers 
                                   1511 ;__1310720016              Allocated to registers 
                                   1512 ;__1310720017              Allocated to registers 
                                   1513 ;addr                      Allocated to registers 
                                   1514 ;d                         Allocated to registers 
                                   1515 ;map_address               Allocated to registers 
                                   1516 ;__1310720004              Allocated to registers 
                                   1517 ;__1310720005              Allocated to registers 
                                   1518 ;map_address               Allocated to registers 
                                   1519 ;d                         Allocated to registers 
                                   1520 ;__1310720020              Allocated to registers 
                                   1521 ;map_address               Allocated to registers 
                                   1522 ;__1310720022              Allocated to registers 
                                   1523 ;__1310720023              Allocated to registers 
                                   1524 ;addr                      Allocated to registers 
                                   1525 ;d                         Allocated to registers 
                                   1526 ;map_address               Allocated to registers 
                                   1527 ;__1310720004              Allocated to registers 
                                   1528 ;__1310720005              Allocated to registers 
                                   1529 ;map_address               Allocated to registers 
                                   1530 ;d                         Allocated to registers 
                                   1531 ;__1310720041              Allocated to registers 
                                   1532 ;addr                      Allocated to registers 
                                   1533 ;__1310720019              Allocated to registers 
                                   1534 ;map_address               Allocated to registers 
                                   1535 ;__1310720016              Allocated to registers 
                                   1536 ;__1310720017              Allocated to registers 
                                   1537 ;addr                      Allocated to registers 
                                   1538 ;d                         Allocated to registers 
                                   1539 ;map_address               Allocated to registers 
                                   1540 ;__1310720004              Allocated to registers 
                                   1541 ;__1310720005              Allocated to registers 
                                   1542 ;map_address               Allocated to registers 
                                   1543 ;d                         Allocated to registers 
                                   1544 ;__1310720020              Allocated to registers 
                                   1545 ;map_address               Allocated to registers 
                                   1546 ;__1310720022              Allocated to registers 
                                   1547 ;__1310720023              Allocated to registers 
                                   1548 ;addr                      Allocated to registers 
                                   1549 ;d                         Allocated to registers 
                                   1550 ;map_address               Allocated to registers 
                                   1551 ;__1310720004              Allocated to registers 
                                   1552 ;__1310720005              Allocated to registers 
                                   1553 ;map_address               Allocated to registers 
                                   1554 ;d                         Allocated to registers 
                                   1555 ;------------------------------------------------------------
                                   1556 ;	ecen4330lab7.c:443: void rtcPrint(void) {
                                   1557 ;	-----------------------------------------
                                   1558 ;	 function rtcPrint
                                   1559 ;	-----------------------------------------
      0002E7                       1560 _rtcPrint:
                                   1561 ;	ecen4330lab7.c:446: xCursorHold = cursor_x;
      0002E7 85*08*38         [24] 1562 	mov	_xCursorHold,_cursor_x
                                   1563 ;	ecen4330lab7.c:447: yCursorHold = cursor_y;
      0002EA 85*0A*39         [24] 1564 	mov	_yCursorHold,_cursor_y
                                   1565 ;	ecen4330lab7.c:448: textSizeHold = textsize;
      0002ED 85*0C*3A         [24] 1566 	mov	_textSizeHold,_textsize
                                   1567 ;	ecen4330lab7.c:450: setTextColor(GRAY, BLACK);
      0002F0 E4               [12] 1568 	clr	a
      0002F1 F5*00            [12] 1569 	mov	_setTextColor_PARM_2,a
      0002F3 F5*01            [12] 1570 	mov	(_setTextColor_PARM_2 + 1),a
      0002F5 90 D6 BA         [24] 1571 	mov	dptr,#0xd6ba
      0002F8 12r04r50         [24] 1572 	lcall	_setTextColor
                                   1573 ;	ecen4330lab7.c:451: setTextSize(2);
      0002FB 75 82 02         [24] 1574 	mov	dpl,#0x02
      0002FE 12r04r5D         [24] 1575 	lcall	_setTextSize
                                   1576 ;	ecen4330lab7.c:452: setCursor(132, 304);
      000301 75*00 30         [24] 1577 	mov	_setCursor_PARM_2,#0x30
      000304 75*01 01         [24] 1578 	mov	(_setCursor_PARM_2 + 1),#0x01
      000307 90 00 84         [24] 1579 	mov	dptr,#0x0084
      00030A 12r04r43         [24] 1580 	lcall	_setCursor
                                   1581 ;	ecen4330lab7.c:283: IOM = 1;
                                   1582 ;	assignBit
      00030D D2 B4            [12] 1583 	setb	_P3_4
                                   1584 ;	ecen4330lab7.c:284: *map_address = d;
      00030F 90 00 0D         [24] 1585 	mov	dptr,#0x000d
      000312 74 01            [12] 1586 	mov	a,#0x01
      000314 F0               [24] 1587 	movx	@dptr,a
                                   1588 ;	ecen4330lab7.c:285: IOM = 0;
                                   1589 ;	assignBit
      000315 C2 B4            [12] 1590 	clr	_P3_4
                                   1591 ;	ecen4330lab7.c:428: rtcBusy();
      000317 12r02r66         [24] 1592 	lcall	_rtcBusy
                                   1593 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1594 ;	assignBit
      00031A D2 B4            [12] 1595 	setb	_P3_4
                                   1596 ;	ecen4330lab7.c:297: data = *map_address;
      00031C 90 00 05         [24] 1597 	mov	dptr,#0x0005
      00031F E0               [24] 1598 	movx	a,@dptr
      000320 F5*20            [12] 1599 	mov	_data,a
                                   1600 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1601 ;	assignBit
      000322 C2 B4            [12] 1602 	clr	_P3_4
                                   1603 ;	ecen4330lab7.c:299: return data;   
                                   1604 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      000324 E5*20            [12] 1605 	mov	a,_data
      000326 54 0F            [12] 1606 	anl	a,#0x0f
      000328 44 30            [12] 1607 	orl	a,#0x30
      00032A F5*20            [12] 1608 	mov	_data,a
                                   1609 ;	ecen4330lab7.c:283: IOM = 1;
                                   1610 ;	assignBit
      00032C D2 B4            [12] 1611 	setb	_P3_4
                                   1612 ;	ecen4330lab7.c:284: *map_address = d;
      00032E 90 00 0D         [24] 1613 	mov	dptr,#0x000d
      000331 E4               [12] 1614 	clr	a
      000332 F0               [24] 1615 	movx	@dptr,a
                                   1616 ;	ecen4330lab7.c:285: IOM = 0;
                                   1617 ;	assignBit
      000333 C2 B4            [12] 1618 	clr	_P3_4
                                   1619 ;	ecen4330lab7.c:433: return data;
      000335 85*20 82         [24] 1620 	mov	dpl,_data
                                   1621 ;	ecen4330lab7.c:455: write(t);
      000338 12r0ArD9         [24] 1622 	lcall	_write
                                   1623 ;	ecen4330lab7.c:283: IOM = 1;
                                   1624 ;	assignBit
      00033B D2 B4            [12] 1625 	setb	_P3_4
                                   1626 ;	ecen4330lab7.c:284: *map_address = d;
      00033D 90 00 0D         [24] 1627 	mov	dptr,#0x000d
      000340 74 01            [12] 1628 	mov	a,#0x01
      000342 F0               [24] 1629 	movx	@dptr,a
                                   1630 ;	ecen4330lab7.c:285: IOM = 0;
                                   1631 ;	assignBit
      000343 C2 B4            [12] 1632 	clr	_P3_4
                                   1633 ;	ecen4330lab7.c:428: rtcBusy();
      000345 12r02r66         [24] 1634 	lcall	_rtcBusy
                                   1635 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1636 ;	assignBit
      000348 D2 B4            [12] 1637 	setb	_P3_4
                                   1638 ;	ecen4330lab7.c:297: data = *map_address;
      00034A 90 00 04         [24] 1639 	mov	dptr,#0x0004
      00034D E0               [24] 1640 	movx	a,@dptr
      00034E F5*20            [12] 1641 	mov	_data,a
                                   1642 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1643 ;	assignBit
      000350 C2 B4            [12] 1644 	clr	_P3_4
                                   1645 ;	ecen4330lab7.c:299: return data;   
                                   1646 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      000352 E5*20            [12] 1647 	mov	a,_data
      000354 54 0F            [12] 1648 	anl	a,#0x0f
      000356 44 30            [12] 1649 	orl	a,#0x30
      000358 F5*20            [12] 1650 	mov	_data,a
                                   1651 ;	ecen4330lab7.c:283: IOM = 1;
                                   1652 ;	assignBit
      00035A D2 B4            [12] 1653 	setb	_P3_4
                                   1654 ;	ecen4330lab7.c:284: *map_address = d;
      00035C 90 00 0D         [24] 1655 	mov	dptr,#0x000d
      00035F E4               [12] 1656 	clr	a
      000360 F0               [24] 1657 	movx	@dptr,a
                                   1658 ;	ecen4330lab7.c:285: IOM = 0;
                                   1659 ;	assignBit
      000361 C2 B4            [12] 1660 	clr	_P3_4
                                   1661 ;	ecen4330lab7.c:433: return data;
      000363 85*20 82         [24] 1662 	mov	dpl,_data
                                   1663 ;	ecen4330lab7.c:457: write(t);
      000366 12r0ArD9         [24] 1664 	lcall	_write
                                   1665 ;	ecen4330lab7.c:458: LCD_string_write(":");
      000369 90r05r33         [24] 1666 	mov	dptr,#___str_2
      00036C 75 F0 80         [24] 1667 	mov	b,#0x80
      00036F 12r0Br3F         [24] 1668 	lcall	_LCD_string_write
                                   1669 ;	ecen4330lab7.c:283: IOM = 1;
                                   1670 ;	assignBit
      000372 D2 B4            [12] 1671 	setb	_P3_4
                                   1672 ;	ecen4330lab7.c:284: *map_address = d;
      000374 90 00 0D         [24] 1673 	mov	dptr,#0x000d
      000377 74 01            [12] 1674 	mov	a,#0x01
      000379 F0               [24] 1675 	movx	@dptr,a
                                   1676 ;	ecen4330lab7.c:285: IOM = 0;
                                   1677 ;	assignBit
      00037A C2 B4            [12] 1678 	clr	_P3_4
                                   1679 ;	ecen4330lab7.c:428: rtcBusy();
      00037C 12r02r66         [24] 1680 	lcall	_rtcBusy
                                   1681 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1682 ;	assignBit
      00037F D2 B4            [12] 1683 	setb	_P3_4
                                   1684 ;	ecen4330lab7.c:297: data = *map_address;
      000381 90 00 03         [24] 1685 	mov	dptr,#0x0003
      000384 E0               [24] 1686 	movx	a,@dptr
      000385 F5*20            [12] 1687 	mov	_data,a
                                   1688 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1689 ;	assignBit
      000387 C2 B4            [12] 1690 	clr	_P3_4
                                   1691 ;	ecen4330lab7.c:299: return data;   
                                   1692 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      000389 E5*20            [12] 1693 	mov	a,_data
      00038B 54 0F            [12] 1694 	anl	a,#0x0f
      00038D 44 30            [12] 1695 	orl	a,#0x30
      00038F F5*20            [12] 1696 	mov	_data,a
                                   1697 ;	ecen4330lab7.c:283: IOM = 1;
                                   1698 ;	assignBit
      000391 D2 B4            [12] 1699 	setb	_P3_4
                                   1700 ;	ecen4330lab7.c:284: *map_address = d;
      000393 90 00 0D         [24] 1701 	mov	dptr,#0x000d
      000396 E4               [12] 1702 	clr	a
      000397 F0               [24] 1703 	movx	@dptr,a
                                   1704 ;	ecen4330lab7.c:285: IOM = 0;
                                   1705 ;	assignBit
      000398 C2 B4            [12] 1706 	clr	_P3_4
                                   1707 ;	ecen4330lab7.c:433: return data;
      00039A 85*20 82         [24] 1708 	mov	dpl,_data
                                   1709 ;	ecen4330lab7.c:460: write(t);
      00039D 12r0ArD9         [24] 1710 	lcall	_write
                                   1711 ;	ecen4330lab7.c:283: IOM = 1;
                                   1712 ;	assignBit
      0003A0 D2 B4            [12] 1713 	setb	_P3_4
                                   1714 ;	ecen4330lab7.c:284: *map_address = d;
      0003A2 90 00 0D         [24] 1715 	mov	dptr,#0x000d
      0003A5 74 01            [12] 1716 	mov	a,#0x01
      0003A7 F0               [24] 1717 	movx	@dptr,a
                                   1718 ;	ecen4330lab7.c:285: IOM = 0;
                                   1719 ;	assignBit
      0003A8 C2 B4            [12] 1720 	clr	_P3_4
                                   1721 ;	ecen4330lab7.c:428: rtcBusy();
      0003AA 12r02r66         [24] 1722 	lcall	_rtcBusy
                                   1723 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1724 ;	assignBit
      0003AD D2 B4            [12] 1725 	setb	_P3_4
                                   1726 ;	ecen4330lab7.c:297: data = *map_address;
      0003AF 90 00 02         [24] 1727 	mov	dptr,#0x0002
      0003B2 E0               [24] 1728 	movx	a,@dptr
      0003B3 F5*20            [12] 1729 	mov	_data,a
                                   1730 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1731 ;	assignBit
      0003B5 C2 B4            [12] 1732 	clr	_P3_4
                                   1733 ;	ecen4330lab7.c:299: return data;   
                                   1734 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      0003B7 E5*20            [12] 1735 	mov	a,_data
      0003B9 54 0F            [12] 1736 	anl	a,#0x0f
      0003BB 44 30            [12] 1737 	orl	a,#0x30
      0003BD F5*20            [12] 1738 	mov	_data,a
                                   1739 ;	ecen4330lab7.c:283: IOM = 1;
                                   1740 ;	assignBit
      0003BF D2 B4            [12] 1741 	setb	_P3_4
                                   1742 ;	ecen4330lab7.c:284: *map_address = d;
      0003C1 90 00 0D         [24] 1743 	mov	dptr,#0x000d
      0003C4 E4               [12] 1744 	clr	a
      0003C5 F0               [24] 1745 	movx	@dptr,a
                                   1746 ;	ecen4330lab7.c:285: IOM = 0;
                                   1747 ;	assignBit
      0003C6 C2 B4            [12] 1748 	clr	_P3_4
                                   1749 ;	ecen4330lab7.c:433: return data;
      0003C8 85*20 82         [24] 1750 	mov	dpl,_data
                                   1751 ;	ecen4330lab7.c:462: write(t);
      0003CB 12r0ArD9         [24] 1752 	lcall	_write
                                   1753 ;	ecen4330lab7.c:463: LCD_string_write(":");
      0003CE 90r05r33         [24] 1754 	mov	dptr,#___str_2
      0003D1 75 F0 80         [24] 1755 	mov	b,#0x80
      0003D4 12r0Br3F         [24] 1756 	lcall	_LCD_string_write
                                   1757 ;	ecen4330lab7.c:283: IOM = 1;
                                   1758 ;	assignBit
      0003D7 D2 B4            [12] 1759 	setb	_P3_4
                                   1760 ;	ecen4330lab7.c:284: *map_address = d;
      0003D9 90 00 0D         [24] 1761 	mov	dptr,#0x000d
      0003DC 74 01            [12] 1762 	mov	a,#0x01
      0003DE F0               [24] 1763 	movx	@dptr,a
                                   1764 ;	ecen4330lab7.c:285: IOM = 0;
                                   1765 ;	assignBit
      0003DF C2 B4            [12] 1766 	clr	_P3_4
                                   1767 ;	ecen4330lab7.c:428: rtcBusy();
      0003E1 12r02r66         [24] 1768 	lcall	_rtcBusy
                                   1769 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1770 ;	assignBit
      0003E4 D2 B4            [12] 1771 	setb	_P3_4
                                   1772 ;	ecen4330lab7.c:297: data = *map_address;
      0003E6 90 00 01         [24] 1773 	mov	dptr,#0x0001
      0003E9 E0               [24] 1774 	movx	a,@dptr
      0003EA F5*20            [12] 1775 	mov	_data,a
                                   1776 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1777 ;	assignBit
      0003EC C2 B4            [12] 1778 	clr	_P3_4
                                   1779 ;	ecen4330lab7.c:299: return data;   
                                   1780 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      0003EE E5*20            [12] 1781 	mov	a,_data
      0003F0 54 0F            [12] 1782 	anl	a,#0x0f
      0003F2 44 30            [12] 1783 	orl	a,#0x30
      0003F4 F5*20            [12] 1784 	mov	_data,a
                                   1785 ;	ecen4330lab7.c:283: IOM = 1;
                                   1786 ;	assignBit
      0003F6 D2 B4            [12] 1787 	setb	_P3_4
                                   1788 ;	ecen4330lab7.c:284: *map_address = d;
      0003F8 90 00 0D         [24] 1789 	mov	dptr,#0x000d
      0003FB E4               [12] 1790 	clr	a
      0003FC F0               [24] 1791 	movx	@dptr,a
                                   1792 ;	ecen4330lab7.c:285: IOM = 0;
                                   1793 ;	assignBit
      0003FD C2 B4            [12] 1794 	clr	_P3_4
                                   1795 ;	ecen4330lab7.c:433: return data;
      0003FF 85*20 82         [24] 1796 	mov	dpl,_data
                                   1797 ;	ecen4330lab7.c:465: write(t);
      000402 12r0ArD9         [24] 1798 	lcall	_write
                                   1799 ;	ecen4330lab7.c:283: IOM = 1;
                                   1800 ;	assignBit
      000405 D2 B4            [12] 1801 	setb	_P3_4
                                   1802 ;	ecen4330lab7.c:284: *map_address = d;
      000407 90 00 0D         [24] 1803 	mov	dptr,#0x000d
      00040A 74 01            [12] 1804 	mov	a,#0x01
      00040C F0               [24] 1805 	movx	@dptr,a
                                   1806 ;	ecen4330lab7.c:285: IOM = 0;
                                   1807 ;	assignBit
      00040D C2 B4            [12] 1808 	clr	_P3_4
                                   1809 ;	ecen4330lab7.c:428: rtcBusy();
      00040F 12r02r66         [24] 1810 	lcall	_rtcBusy
                                   1811 ;	ecen4330lab7.c:296: IOM = 1;                            
                                   1812 ;	assignBit
      000412 D2 B4            [12] 1813 	setb	_P3_4
                                   1814 ;	ecen4330lab7.c:297: data = *map_address;
      000414 90 00 00         [24] 1815 	mov	dptr,#0x0000
      000417 E0               [24] 1816 	movx	a,@dptr
      000418 F5*20            [12] 1817 	mov	_data,a
                                   1818 ;	ecen4330lab7.c:298: IOM = 0;    
                                   1819 ;	assignBit
      00041A C2 B4            [12] 1820 	clr	_P3_4
                                   1821 ;	ecen4330lab7.c:299: return data;   
                                   1822 ;	ecen4330lab7.c:431: data = (data & 0x0F) | 0x30; // ascii the lower word
      00041C E5*20            [12] 1823 	mov	a,_data
      00041E 54 0F            [12] 1824 	anl	a,#0x0f
      000420 44 30            [12] 1825 	orl	a,#0x30
      000422 F5*20            [12] 1826 	mov	_data,a
                                   1827 ;	ecen4330lab7.c:283: IOM = 1;
                                   1828 ;	assignBit
      000424 D2 B4            [12] 1829 	setb	_P3_4
                                   1830 ;	ecen4330lab7.c:284: *map_address = d;
      000426 90 00 0D         [24] 1831 	mov	dptr,#0x000d
      000429 E4               [12] 1832 	clr	a
      00042A F0               [24] 1833 	movx	@dptr,a
                                   1834 ;	ecen4330lab7.c:285: IOM = 0;
                                   1835 ;	assignBit
      00042B C2 B4            [12] 1836 	clr	_P3_4
                                   1837 ;	ecen4330lab7.c:433: return data;
      00042D 85*20 82         [24] 1838 	mov	dpl,_data
                                   1839 ;	ecen4330lab7.c:467: write(t);
      000430 12r0ArD9         [24] 1840 	lcall	_write
                                   1841 ;	ecen4330lab7.c:469: cursor_x = xCursorHold;
      000433 85*38*08         [24] 1842 	mov	_cursor_x,_xCursorHold
      000436 75*09 00         [24] 1843 	mov	(_cursor_x + 1),#0x00
                                   1844 ;	ecen4330lab7.c:470: cursor_y = yCursorHold;
      000439 85*39*0A         [24] 1845 	mov	_cursor_y,_yCursorHold
      00043C 75*0B 00         [24] 1846 	mov	(_cursor_y + 1),#0x00
                                   1847 ;	ecen4330lab7.c:471: textsize = textSizeHold;
      00043F 85*3A*0C         [24] 1848 	mov	_textsize,_textSizeHold
                                   1849 ;	ecen4330lab7.c:472: }
      000442 22               [24] 1850 	ret
                                   1851 ;------------------------------------------------------------
                                   1852 ;Allocation info for local variables in function 'setCursor'
                                   1853 ;------------------------------------------------------------
                                   1854 ;y                         Allocated with name '_setCursor_PARM_2'
                                   1855 ;x                         Allocated to registers 
                                   1856 ;------------------------------------------------------------
                                   1857 ;	ecen4330lab7.c:492: void setCursor(u16 x, u16 y){
                                   1858 ;	-----------------------------------------
                                   1859 ;	 function setCursor
                                   1860 ;	-----------------------------------------
      000443                       1861 _setCursor:
      000443 85 82*08         [24] 1862 	mov	_cursor_x,dpl
      000446 85 83*09         [24] 1863 	mov	(_cursor_x + 1),dph
                                   1864 ;	ecen4330lab7.c:494: cursor_y = y;
      000449 85*00*0A         [24] 1865 	mov	_cursor_y,_setCursor_PARM_2
      00044C 85*01*0B         [24] 1866 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   1867 ;	ecen4330lab7.c:495: }
      00044F 22               [24] 1868 	ret
                                   1869 ;------------------------------------------------------------
                                   1870 ;Allocation info for local variables in function 'setTextColor'
                                   1871 ;------------------------------------------------------------
                                   1872 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   1873 ;x                         Allocated to registers 
                                   1874 ;------------------------------------------------------------
                                   1875 ;	ecen4330lab7.c:503: void setTextColor(u16 x, u16 y){
                                   1876 ;	-----------------------------------------
                                   1877 ;	 function setTextColor
                                   1878 ;	-----------------------------------------
      000450                       1879 _setTextColor:
      000450 85 82*0E         [24] 1880 	mov	_textcolor,dpl
      000453 85 83*0F         [24] 1881 	mov	(_textcolor + 1),dph
                                   1882 ;	ecen4330lab7.c:505: textbgcolor = y;
      000456 85*00*10         [24] 1883 	mov	_textbgcolor,_setTextColor_PARM_2
      000459 85*01*11         [24] 1884 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   1885 ;	ecen4330lab7.c:506: }
      00045C 22               [24] 1886 	ret
                                   1887 ;------------------------------------------------------------
                                   1888 ;Allocation info for local variables in function 'setTextSize'
                                   1889 ;------------------------------------------------------------
                                   1890 ;s                         Allocated to registers r7 
                                   1891 ;------------------------------------------------------------
                                   1892 ;	ecen4330lab7.c:514: void setTextSize(u8 s){
                                   1893 ;	-----------------------------------------
                                   1894 ;	 function setTextSize
                                   1895 ;	-----------------------------------------
      00045D                       1896 _setTextSize:
                                   1897 ;	ecen4330lab7.c:515: if (s > 8) return;
      00045D E5 82            [12] 1898 	mov	a,dpl
      00045F FF               [12] 1899 	mov	r7,a
      000460 24 F7            [12] 1900 	add	a,#0xff - 0x08
      000462 50 01            [24] 1901 	jnc	00102$
      000464 22               [24] 1902 	ret
      000465                       1903 00102$:
                                   1904 ;	ecen4330lab7.c:516: textsize = (s>0) ? s : 1 ;
      000465 EF               [12] 1905 	mov	a,r7
      000466 60 06            [24] 1906 	jz	00105$
      000468 8F 06            [24] 1907 	mov	ar6,r7
      00046A 7F 00            [12] 1908 	mov	r7,#0x00
      00046C 80 04            [24] 1909 	sjmp	00106$
      00046E                       1910 00105$:
      00046E 7E 01            [12] 1911 	mov	r6,#0x01
      000470 7F 00            [12] 1912 	mov	r7,#0x00
      000472                       1913 00106$:
      000472 8E*0C            [24] 1914 	mov	_textsize,r6
                                   1915 ;	ecen4330lab7.c:517: }
      000474 22               [24] 1916 	ret
                                   1917 ;------------------------------------------------------------
                                   1918 ;Allocation info for local variables in function 'setRotation'
                                   1919 ;------------------------------------------------------------
                                   1920 ;flag                      Allocated to registers r7 
                                   1921 ;------------------------------------------------------------
                                   1922 ;	ecen4330lab7.c:525: void setRotation(u8 flag){
                                   1923 ;	-----------------------------------------
                                   1924 ;	 function setRotation
                                   1925 ;	-----------------------------------------
      000475                       1926 _setRotation:
                                   1927 ;	ecen4330lab7.c:526: switch(flag) {
      000475 E5 82            [12] 1928 	mov	a,dpl
      000477 FF               [12] 1929 	mov	r7,a
      000478 24 FC            [12] 1930 	add	a,#0xff - 0x03
      00047A 40 4E            [24] 1931 	jc	00105$
      00047C EF               [12] 1932 	mov	a,r7
      00047D 2F               [12] 1933 	add	a,r7
                                   1934 ;	ecen4330lab7.c:527: case 0:
      00047E 90r04r82         [24] 1935 	mov	dptr,#00115$
      000481 73               [24] 1936 	jmp	@a+dptr
      000482                       1937 00115$:
      000482 80 06            [24] 1938 	sjmp	00101$
      000484 80 14            [24] 1939 	sjmp	00102$
      000486 80 22            [24] 1940 	sjmp	00103$
      000488 80 30            [24] 1941 	sjmp	00104$
      00048A                       1942 00101$:
                                   1943 ;	ecen4330lab7.c:528: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      00048A 7F 48            [12] 1944 	mov	r7,#0x48
                                   1945 ;	ecen4330lab7.c:529: _width = TFTWIDTH;
      00048C 75*12 F0         [24] 1946 	mov	__width,#0xf0
      00048F 75*13 00         [24] 1947 	mov	(__width + 1),#0x00
                                   1948 ;	ecen4330lab7.c:530: _height = TFTHEIGHT;
      000492 75*14 40         [24] 1949 	mov	__height,#0x40
      000495 75*15 01         [24] 1950 	mov	(__height + 1),#0x01
                                   1951 ;	ecen4330lab7.c:531: break;
                                   1952 ;	ecen4330lab7.c:532: case 1:
      000498 80 3E            [24] 1953 	sjmp	00106$
      00049A                       1954 00102$:
                                   1955 ;	ecen4330lab7.c:533: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      00049A 7F 28            [12] 1956 	mov	r7,#0x28
                                   1957 ;	ecen4330lab7.c:534: _width = TFTHEIGHT;
      00049C 75*12 40         [24] 1958 	mov	__width,#0x40
      00049F 75*13 01         [24] 1959 	mov	(__width + 1),#0x01
                                   1960 ;	ecen4330lab7.c:535: _height = TFTWIDTH;
      0004A2 75*14 F0         [24] 1961 	mov	__height,#0xf0
      0004A5 75*15 00         [24] 1962 	mov	(__height + 1),#0x00
                                   1963 ;	ecen4330lab7.c:536: break;
                                   1964 ;	ecen4330lab7.c:537: case 2:
      0004A8 80 2E            [24] 1965 	sjmp	00106$
      0004AA                       1966 00103$:
                                   1967 ;	ecen4330lab7.c:538: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0004AA 7F 88            [12] 1968 	mov	r7,#0x88
                                   1969 ;	ecen4330lab7.c:539: _width = TFTWIDTH;
      0004AC 75*12 F0         [24] 1970 	mov	__width,#0xf0
      0004AF 75*13 00         [24] 1971 	mov	(__width + 1),#0x00
                                   1972 ;	ecen4330lab7.c:540: _height = TFTHEIGHT;
      0004B2 75*14 40         [24] 1973 	mov	__height,#0x40
      0004B5 75*15 01         [24] 1974 	mov	(__height + 1),#0x01
                                   1975 ;	ecen4330lab7.c:541: break;
                                   1976 ;	ecen4330lab7.c:542: case 3:
      0004B8 80 1E            [24] 1977 	sjmp	00106$
      0004BA                       1978 00104$:
                                   1979 ;	ecen4330lab7.c:543: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      0004BA 7F E8            [12] 1980 	mov	r7,#0xe8
                                   1981 ;	ecen4330lab7.c:544: _width = TFTHEIGHT;
      0004BC 75*12 40         [24] 1982 	mov	__width,#0x40
      0004BF 75*13 01         [24] 1983 	mov	(__width + 1),#0x01
                                   1984 ;	ecen4330lab7.c:545: _height = TFTWIDTH;
      0004C2 75*14 F0         [24] 1985 	mov	__height,#0xf0
      0004C5 75*15 00         [24] 1986 	mov	(__height + 1),#0x00
                                   1987 ;	ecen4330lab7.c:546: break;
                                   1988 ;	ecen4330lab7.c:547: default:
      0004C8 80 0E            [24] 1989 	sjmp	00106$
      0004CA                       1990 00105$:
                                   1991 ;	ecen4330lab7.c:548: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0004CA 7F 48            [12] 1992 	mov	r7,#0x48
                                   1993 ;	ecen4330lab7.c:549: _width = TFTWIDTH;
      0004CC 75*12 F0         [24] 1994 	mov	__width,#0xf0
      0004CF 75*13 00         [24] 1995 	mov	(__width + 1),#0x00
                                   1996 ;	ecen4330lab7.c:550: _height = TFTHEIGHT;
      0004D2 75*14 40         [24] 1997 	mov	__height,#0x40
      0004D5 75*15 01         [24] 1998 	mov	(__height + 1),#0x01
                                   1999 ;	ecen4330lab7.c:552: }
      0004D8                       2000 00106$:
                                   2001 ;	ecen4330lab7.c:553: writeRegister8(ILI9341_MEMCONTROL, flag);
      0004D8 8F*00            [24] 2002 	mov	_writeRegister8_PARM_2,r7
      0004DA 75 82 36         [24] 2003 	mov	dpl,#0x36
                                   2004 ;	ecen4330lab7.c:554: }
      0004DD 02r01rCB         [24] 2005 	ljmp	_writeRegister8
                                   2006 ;------------------------------------------------------------
                                   2007 ;Allocation info for local variables in function 'setAddress'
                                   2008 ;------------------------------------------------------------
                                   2009 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   2010 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   2011 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   2012 ;x1                        Allocated to registers r6 r7 
                                   2013 ;------------------------------------------------------------
                                   2014 ;	ecen4330lab7.c:563: void setAddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2){
                                   2015 ;	-----------------------------------------
                                   2016 ;	 function setAddress
                                   2017 ;	-----------------------------------------
      0004E0                       2018 _setAddress:
      0004E0 AE 82            [24] 2019 	mov	r6,dpl
      0004E2 AF 83            [24] 2020 	mov	r7,dph
                                   2021 ;	ecen4330lab7.c:564: write8Reg(0x2A);
                                   2022 ;	assignBit
      0004E4 C2 B5            [12] 2023 	clr	_P3_5
                                   2024 ;	assignBit
      0004E6 D2 B4            [12] 2025 	setb	_P3_4
      0004E8 85*02 82         [24] 2026 	mov	dpl,_lcd_address
      0004EB 85*03 83         [24] 2027 	mov	dph,(_lcd_address + 1)
      0004EE 74 2A            [12] 2028 	mov	a,#0x2a
      0004F0 F0               [24] 2029 	movx	@dptr,a
                                   2030 ;	assignBit
      0004F1 C2 B4            [12] 2031 	clr	_P3_4
                                   2032 ;	ecen4330lab7.c:565: write8Data(x1 >> 8);
                                   2033 ;	assignBit
      0004F3 D2 B5            [12] 2034 	setb	_P3_5
                                   2035 ;	assignBit
      0004F5 D2 B4            [12] 2036 	setb	_P3_4
      0004F7 85*02 82         [24] 2037 	mov	dpl,_lcd_address
      0004FA 85*03 83         [24] 2038 	mov	dph,(_lcd_address + 1)
      0004FD 8F 05            [24] 2039 	mov	ar5,r7
      0004FF ED               [12] 2040 	mov	a,r5
      000500 F0               [24] 2041 	movx	@dptr,a
                                   2042 ;	assignBit
      000501 C2 B4            [12] 2043 	clr	_P3_4
                                   2044 ;	ecen4330lab7.c:566: write8Data(x1);
                                   2045 ;	assignBit
      000503 D2 B5            [12] 2046 	setb	_P3_5
                                   2047 ;	assignBit
      000505 D2 B4            [12] 2048 	setb	_P3_4
      000507 85*02 82         [24] 2049 	mov	dpl,_lcd_address
      00050A 85*03 83         [24] 2050 	mov	dph,(_lcd_address + 1)
      00050D EE               [12] 2051 	mov	a,r6
      00050E F0               [24] 2052 	movx	@dptr,a
                                   2053 ;	assignBit
      00050F C2 B4            [12] 2054 	clr	_P3_4
                                   2055 ;	ecen4330lab7.c:567: write8Data(x2 >> 8);
                                   2056 ;	assignBit
      000511 D2 B5            [12] 2057 	setb	_P3_5
                                   2058 ;	assignBit
      000513 D2 B4            [12] 2059 	setb	_P3_4
      000515 85*02 82         [24] 2060 	mov	dpl,_lcd_address
      000518 85*03 83         [24] 2061 	mov	dph,(_lcd_address + 1)
      00051B E5*03            [12] 2062 	mov	a,(_setAddress_PARM_3 + 1)
      00051D F0               [24] 2063 	movx	@dptr,a
                                   2064 ;	assignBit
      00051E C2 B4            [12] 2065 	clr	_P3_4
                                   2066 ;	ecen4330lab7.c:568: write8Data(x2);
                                   2067 ;	assignBit
      000520 D2 B5            [12] 2068 	setb	_P3_5
                                   2069 ;	assignBit
      000522 D2 B4            [12] 2070 	setb	_P3_4
      000524 85*02 82         [24] 2071 	mov	dpl,_lcd_address
      000527 85*03 83         [24] 2072 	mov	dph,(_lcd_address + 1)
      00052A E5*02            [12] 2073 	mov	a,_setAddress_PARM_3
      00052C F0               [24] 2074 	movx	@dptr,a
                                   2075 ;	assignBit
      00052D C2 B4            [12] 2076 	clr	_P3_4
                                   2077 ;	ecen4330lab7.c:569: write8Reg(0x2B);
                                   2078 ;	assignBit
      00052F C2 B5            [12] 2079 	clr	_P3_5
                                   2080 ;	assignBit
      000531 D2 B4            [12] 2081 	setb	_P3_4
      000533 85*02 82         [24] 2082 	mov	dpl,_lcd_address
      000536 85*03 83         [24] 2083 	mov	dph,(_lcd_address + 1)
      000539 74 2B            [12] 2084 	mov	a,#0x2b
      00053B F0               [24] 2085 	movx	@dptr,a
                                   2086 ;	assignBit
      00053C C2 B4            [12] 2087 	clr	_P3_4
                                   2088 ;	ecen4330lab7.c:570: write8Data(y1 >> 8);
                                   2089 ;	assignBit
      00053E D2 B5            [12] 2090 	setb	_P3_5
                                   2091 ;	assignBit
      000540 D2 B4            [12] 2092 	setb	_P3_4
      000542 85*02 82         [24] 2093 	mov	dpl,_lcd_address
      000545 85*03 83         [24] 2094 	mov	dph,(_lcd_address + 1)
      000548 E5*01            [12] 2095 	mov	a,(_setAddress_PARM_2 + 1)
      00054A F0               [24] 2096 	movx	@dptr,a
                                   2097 ;	assignBit
      00054B C2 B4            [12] 2098 	clr	_P3_4
                                   2099 ;	ecen4330lab7.c:571: write8Data(y1);
                                   2100 ;	assignBit
      00054D D2 B5            [12] 2101 	setb	_P3_5
                                   2102 ;	assignBit
      00054F D2 B4            [12] 2103 	setb	_P3_4
      000551 85*02 82         [24] 2104 	mov	dpl,_lcd_address
      000554 85*03 83         [24] 2105 	mov	dph,(_lcd_address + 1)
      000557 E5*00            [12] 2106 	mov	a,_setAddress_PARM_2
      000559 F0               [24] 2107 	movx	@dptr,a
                                   2108 ;	assignBit
      00055A C2 B4            [12] 2109 	clr	_P3_4
                                   2110 ;	ecen4330lab7.c:572: write8Data(y2 >> 8);
                                   2111 ;	assignBit
      00055C D2 B5            [12] 2112 	setb	_P3_5
                                   2113 ;	assignBit
      00055E D2 B4            [12] 2114 	setb	_P3_4
      000560 85*02 82         [24] 2115 	mov	dpl,_lcd_address
      000563 85*03 83         [24] 2116 	mov	dph,(_lcd_address + 1)
      000566 E5*05            [12] 2117 	mov	a,(_setAddress_PARM_4 + 1)
      000568 F0               [24] 2118 	movx	@dptr,a
                                   2119 ;	assignBit
      000569 C2 B4            [12] 2120 	clr	_P3_4
                                   2121 ;	ecen4330lab7.c:573: write8Data(y2);
                                   2122 ;	assignBit
      00056B D2 B5            [12] 2123 	setb	_P3_5
                                   2124 ;	assignBit
      00056D D2 B4            [12] 2125 	setb	_P3_4
      00056F 85*02 82         [24] 2126 	mov	dpl,_lcd_address
      000572 85*03 83         [24] 2127 	mov	dph,(_lcd_address + 1)
      000575 E5*04            [12] 2128 	mov	a,_setAddress_PARM_4
      000577 F0               [24] 2129 	movx	@dptr,a
                                   2130 ;	assignBit
      000578 C2 B4            [12] 2131 	clr	_P3_4
                                   2132 ;	ecen4330lab7.c:574: }
      00057A 22               [24] 2133 	ret
                                   2134 ;------------------------------------------------------------
                                   2135 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2136 ;------------------------------------------------------------
                                   2137 ;	ecen4330lab7.c:582: void TFT_LCD_INIT(void){
                                   2138 ;	-----------------------------------------
                                   2139 ;	 function TFT_LCD_INIT
                                   2140 ;	-----------------------------------------
      00057B                       2141 _TFT_LCD_INIT:
                                   2142 ;	ecen4330lab7.c:583: _width = TFTWIDTH;
      00057B 75*12 F0         [24] 2143 	mov	__width,#0xf0
      00057E 75*13 00         [24] 2144 	mov	(__width + 1),#0x00
                                   2145 ;	ecen4330lab7.c:584: _height = TFTHEIGHT;
      000581 75*14 40         [24] 2146 	mov	__height,#0x40
      000584 75*15 01         [24] 2147 	mov	(__height + 1),#0x01
                                   2148 ;	ecen4330lab7.c:586: IOM = 0;
                                   2149 ;	assignBit
      000587 C2 B4            [12] 2150 	clr	_P3_4
                                   2151 ;	ecen4330lab7.c:587: CD = 1;
                                   2152 ;	assignBit
      000589 D2 B5            [12] 2153 	setb	_P3_5
                                   2154 ;	ecen4330lab7.c:589: write8Reg(0x00);
                                   2155 ;	assignBit
      00058B C2 B5            [12] 2156 	clr	_P3_5
                                   2157 ;	assignBit
      00058D D2 B4            [12] 2158 	setb	_P3_4
      00058F 85*02 82         [24] 2159 	mov	dpl,_lcd_address
      000592 85*03 83         [24] 2160 	mov	dph,(_lcd_address + 1)
      000595 E4               [12] 2161 	clr	a
      000596 F0               [24] 2162 	movx	@dptr,a
                                   2163 ;	assignBit
      000597 C2 B4            [12] 2164 	clr	_P3_4
                                   2165 ;	ecen4330lab7.c:590: write8Data(0x00);
                                   2166 ;	assignBit
      000599 D2 B5            [12] 2167 	setb	_P3_5
                                   2168 ;	assignBit
      00059B D2 B4            [12] 2169 	setb	_P3_4
      00059D 85*02 82         [24] 2170 	mov	dpl,_lcd_address
      0005A0 85*03 83         [24] 2171 	mov	dph,(_lcd_address + 1)
      0005A3 E4               [12] 2172 	clr	a
      0005A4 F0               [24] 2173 	movx	@dptr,a
                                   2174 ;	assignBit
      0005A5 C2 B4            [12] 2175 	clr	_P3_4
                                   2176 ;	ecen4330lab7.c:591: write8Data(0x00);
                                   2177 ;	assignBit
      0005A7 D2 B5            [12] 2178 	setb	_P3_5
                                   2179 ;	assignBit
      0005A9 D2 B4            [12] 2180 	setb	_P3_4
      0005AB 85*02 82         [24] 2181 	mov	dpl,_lcd_address
      0005AE 85*03 83         [24] 2182 	mov	dph,(_lcd_address + 1)
      0005B1 E4               [12] 2183 	clr	a
      0005B2 F0               [24] 2184 	movx	@dptr,a
                                   2185 ;	assignBit
      0005B3 C2 B4            [12] 2186 	clr	_P3_4
                                   2187 ;	ecen4330lab7.c:592: write8Data(0x00);
                                   2188 ;	assignBit
      0005B5 D2 B5            [12] 2189 	setb	_P3_5
                                   2190 ;	assignBit
      0005B7 D2 B4            [12] 2191 	setb	_P3_4
      0005B9 85*02 82         [24] 2192 	mov	dpl,_lcd_address
      0005BC 85*03 83         [24] 2193 	mov	dph,(_lcd_address + 1)
      0005BF E4               [12] 2194 	clr	a
      0005C0 F0               [24] 2195 	movx	@dptr,a
                                   2196 ;	assignBit
      0005C1 C2 B4            [12] 2197 	clr	_P3_4
                                   2198 ;	ecen4330lab7.c:593: delay(200);
      0005C3 90 00 C8         [24] 2199 	mov	dptr,#0x00c8
      0005C6 12r01r9F         [24] 2200 	lcall	_delay
                                   2201 ;	ecen4330lab7.c:595: writeRegister8(ILI9341_SOFTRESET, 0);
      0005C9 75*00 00         [24] 2202 	mov	_writeRegister8_PARM_2,#0x00
      0005CC 75 82 01         [24] 2203 	mov	dpl,#0x01
      0005CF 12r01rCB         [24] 2204 	lcall	_writeRegister8
                                   2205 ;	ecen4330lab7.c:596: delay(50);
      0005D2 90 00 32         [24] 2206 	mov	dptr,#0x0032
      0005D5 12r01r9F         [24] 2207 	lcall	_delay
                                   2208 ;	ecen4330lab7.c:598: writeRegister8(ILI9341_DISPLAYOFF, 0);
      0005D8 75*00 00         [24] 2209 	mov	_writeRegister8_PARM_2,#0x00
      0005DB 75 82 28         [24] 2210 	mov	dpl,#0x28
      0005DE 12r01rCB         [24] 2211 	lcall	_writeRegister8
                                   2212 ;	ecen4330lab7.c:599: delay(10);
      0005E1 90 00 0A         [24] 2213 	mov	dptr,#0x000a
      0005E4 12r01r9F         [24] 2214 	lcall	_delay
                                   2215 ;	ecen4330lab7.c:601: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      0005E7 75*00 23         [24] 2216 	mov	_writeRegister8_PARM_2,#0x23
      0005EA 75 82 C0         [24] 2217 	mov	dpl,#0xc0
      0005ED 12r01rCB         [24] 2218 	lcall	_writeRegister8
                                   2219 ;	ecen4330lab7.c:602: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      0005F0 75*00 11         [24] 2220 	mov	_writeRegister8_PARM_2,#0x11
      0005F3 75 82 C1         [24] 2221 	mov	dpl,#0xc1
      0005F6 12r01rCB         [24] 2222 	lcall	_writeRegister8
                                   2223 ;	ecen4330lab7.c:603: write8Reg(ILI9341_VCOMCONTROL1);
                                   2224 ;	assignBit
      0005F9 C2 B5            [12] 2225 	clr	_P3_5
                                   2226 ;	assignBit
      0005FB D2 B4            [12] 2227 	setb	_P3_4
      0005FD 85*02 82         [24] 2228 	mov	dpl,_lcd_address
      000600 85*03 83         [24] 2229 	mov	dph,(_lcd_address + 1)
      000603 74 C5            [12] 2230 	mov	a,#0xc5
      000605 F0               [24] 2231 	movx	@dptr,a
                                   2232 ;	assignBit
      000606 C2 B4            [12] 2233 	clr	_P3_4
                                   2234 ;	ecen4330lab7.c:604: write8Data(0x3d);
                                   2235 ;	assignBit
      000608 D2 B5            [12] 2236 	setb	_P3_5
                                   2237 ;	assignBit
      00060A D2 B4            [12] 2238 	setb	_P3_4
      00060C 85*02 82         [24] 2239 	mov	dpl,_lcd_address
      00060F 85*03 83         [24] 2240 	mov	dph,(_lcd_address + 1)
      000612 74 3D            [12] 2241 	mov	a,#0x3d
      000614 F0               [24] 2242 	movx	@dptr,a
                                   2243 ;	assignBit
      000615 C2 B4            [12] 2244 	clr	_P3_4
                                   2245 ;	ecen4330lab7.c:605: write8Data(0x30);
                                   2246 ;	assignBit
      000617 D2 B5            [12] 2247 	setb	_P3_5
                                   2248 ;	assignBit
      000619 D2 B4            [12] 2249 	setb	_P3_4
      00061B 85*02 82         [24] 2250 	mov	dpl,_lcd_address
      00061E 85*03 83         [24] 2251 	mov	dph,(_lcd_address + 1)
      000621 74 30            [12] 2252 	mov	a,#0x30
      000623 F0               [24] 2253 	movx	@dptr,a
                                   2254 ;	assignBit
      000624 C2 B4            [12] 2255 	clr	_P3_4
                                   2256 ;	ecen4330lab7.c:606: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000626 75*00 AA         [24] 2257 	mov	_writeRegister8_PARM_2,#0xaa
      000629 75 82 C7         [24] 2258 	mov	dpl,#0xc7
      00062C 12r01rCB         [24] 2259 	lcall	_writeRegister8
                                   2260 ;	ecen4330lab7.c:607: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      00062F 75*00 88         [24] 2261 	mov	_writeRegister8_PARM_2,#0x88
      000632 75 82 36         [24] 2262 	mov	dpl,#0x36
      000635 12r01rCB         [24] 2263 	lcall	_writeRegister8
                                   2264 ;	ecen4330lab7.c:608: write8Reg(ILI9341_PIXELFORMAT);
                                   2265 ;	assignBit
      000638 C2 B5            [12] 2266 	clr	_P3_5
                                   2267 ;	assignBit
      00063A D2 B4            [12] 2268 	setb	_P3_4
      00063C 85*02 82         [24] 2269 	mov	dpl,_lcd_address
      00063F 85*03 83         [24] 2270 	mov	dph,(_lcd_address + 1)
      000642 74 3A            [12] 2271 	mov	a,#0x3a
      000644 F0               [24] 2272 	movx	@dptr,a
                                   2273 ;	assignBit
      000645 C2 B4            [12] 2274 	clr	_P3_4
                                   2275 ;	ecen4330lab7.c:609: write8Data(0x55);
                                   2276 ;	assignBit
      000647 D2 B5            [12] 2277 	setb	_P3_5
                                   2278 ;	assignBit
      000649 D2 B4            [12] 2279 	setb	_P3_4
      00064B 85*02 82         [24] 2280 	mov	dpl,_lcd_address
      00064E 85*03 83         [24] 2281 	mov	dph,(_lcd_address + 1)
      000651 74 55            [12] 2282 	mov	a,#0x55
      000653 F0               [24] 2283 	movx	@dptr,a
                                   2284 ;	assignBit
      000654 C2 B4            [12] 2285 	clr	_P3_4
                                   2286 ;	ecen4330lab7.c:610: write8Data(0x00);
                                   2287 ;	assignBit
      000656 D2 B5            [12] 2288 	setb	_P3_5
                                   2289 ;	assignBit
      000658 D2 B4            [12] 2290 	setb	_P3_4
      00065A 85*02 82         [24] 2291 	mov	dpl,_lcd_address
      00065D 85*03 83         [24] 2292 	mov	dph,(_lcd_address + 1)
      000660 E4               [12] 2293 	clr	a
      000661 F0               [24] 2294 	movx	@dptr,a
                                   2295 ;	assignBit
      000662 C2 B4            [12] 2296 	clr	_P3_4
                                   2297 ;	ecen4330lab7.c:611: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      000664 75*00 1B         [24] 2298 	mov	_writeRegister16_PARM_2,#0x1b
      000667 75*01 00         [24] 2299 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      00066A 90 00 B1         [24] 2300 	mov	dptr,#0x00b1
      00066D 12r01rEB         [24] 2301 	lcall	_writeRegister16
                                   2302 ;	ecen4330lab7.c:612: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      000670 75*00 07         [24] 2303 	mov	_writeRegister8_PARM_2,#0x07
      000673 75 82 B7         [24] 2304 	mov	dpl,#0xb7
      000676 12r01rCB         [24] 2305 	lcall	_writeRegister8
                                   2306 ;	ecen4330lab7.c:613: writeRegister8(ILI9341_SLEEPOUT, 0);
      000679 75*00 00         [24] 2307 	mov	_writeRegister8_PARM_2,#0x00
      00067C 75 82 11         [24] 2308 	mov	dpl,#0x11
      00067F 12r01rCB         [24] 2309 	lcall	_writeRegister8
                                   2310 ;	ecen4330lab7.c:614: delay(150);
      000682 90 00 96         [24] 2311 	mov	dptr,#0x0096
      000685 12r01r9F         [24] 2312 	lcall	_delay
                                   2313 ;	ecen4330lab7.c:616: writeRegister8(ILI9341_DISPLAYON, 0);
      000688 75*00 00         [24] 2314 	mov	_writeRegister8_PARM_2,#0x00
      00068B 75 82 29         [24] 2315 	mov	dpl,#0x29
      00068E 12r01rCB         [24] 2316 	lcall	_writeRegister8
                                   2317 ;	ecen4330lab7.c:617: delay(500);
      000691 90 01 F4         [24] 2318 	mov	dptr,#0x01f4
      000694 12r01r9F         [24] 2319 	lcall	_delay
                                   2320 ;	ecen4330lab7.c:619: setAddress(0,0,_width-1,_height-1);
      000697 E5*12            [12] 2321 	mov	a,__width
      000699 24 FF            [12] 2322 	add	a,#0xff
      00069B F5*02            [12] 2323 	mov	_setAddress_PARM_3,a
      00069D E5*13            [12] 2324 	mov	a,(__width + 1)
      00069F 34 FF            [12] 2325 	addc	a,#0xff
      0006A1 F5*03            [12] 2326 	mov	(_setAddress_PARM_3 + 1),a
      0006A3 E5*14            [12] 2327 	mov	a,__height
      0006A5 24 FF            [12] 2328 	add	a,#0xff
      0006A7 F5*04            [12] 2329 	mov	_setAddress_PARM_4,a
      0006A9 E5*15            [12] 2330 	mov	a,(__height + 1)
      0006AB 34 FF            [12] 2331 	addc	a,#0xff
      0006AD F5*05            [12] 2332 	mov	(_setAddress_PARM_4 + 1),a
      0006AF E4               [12] 2333 	clr	a
      0006B0 F5*00            [12] 2334 	mov	_setAddress_PARM_2,a
      0006B2 F5*01            [12] 2335 	mov	(_setAddress_PARM_2 + 1),a
      0006B4 90 00 00         [24] 2336 	mov	dptr,#0x0000
                                   2337 ;	ecen4330lab7.c:620: }
      0006B7 02r04rE0         [24] 2338 	ljmp	_setAddress
                                   2339 ;------------------------------------------------------------
                                   2340 ;Allocation info for local variables in function 'drawPixel'
                                   2341 ;------------------------------------------------------------
                                   2342 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2343 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2344 ;x3                        Allocated to registers r6 r7 
                                   2345 ;------------------------------------------------------------
                                   2346 ;	ecen4330lab7.c:628: void drawPixel(u16 x3,u16 y3,u16 color1)
                                   2347 ;	-----------------------------------------
                                   2348 ;	 function drawPixel
                                   2349 ;	-----------------------------------------
      0006BA                       2350 _drawPixel:
      0006BA AE 82            [24] 2351 	mov	r6,dpl
      0006BC AF 83            [24] 2352 	mov	r7,dph
                                   2353 ;	ecen4330lab7.c:630: setAddress(x3,y3,x3+1,y3+1);
      0006BE 74 01            [12] 2354 	mov	a,#0x01
      0006C0 2E               [12] 2355 	add	a,r6
      0006C1 F5*02            [12] 2356 	mov	_setAddress_PARM_3,a
      0006C3 E4               [12] 2357 	clr	a
      0006C4 3F               [12] 2358 	addc	a,r7
      0006C5 F5*03            [12] 2359 	mov	(_setAddress_PARM_3 + 1),a
      0006C7 74 01            [12] 2360 	mov	a,#0x01
      0006C9 25*45            [12] 2361 	add	a,_drawPixel_PARM_2
      0006CB F5*04            [12] 2362 	mov	_setAddress_PARM_4,a
      0006CD E4               [12] 2363 	clr	a
      0006CE 35*46            [12] 2364 	addc	a,(_drawPixel_PARM_2 + 1)
      0006D0 F5*05            [12] 2365 	mov	(_setAddress_PARM_4 + 1),a
      0006D2 85*45*00         [24] 2366 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      0006D5 85*46*01         [24] 2367 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      0006D8 8E 82            [24] 2368 	mov	dpl,r6
      0006DA 8F 83            [24] 2369 	mov	dph,r7
      0006DC 12r04rE0         [24] 2370 	lcall	_setAddress
                                   2371 ;	ecen4330lab7.c:631: CD=0; 
                                   2372 ;	assignBit
      0006DF C2 B5            [12] 2373 	clr	_P3_5
                                   2374 ;	ecen4330lab7.c:632: write8(0x2C);
                                   2375 ;	assignBit
      0006E1 D2 B4            [12] 2376 	setb	_P3_4
      0006E3 85*02 82         [24] 2377 	mov	dpl,_lcd_address
      0006E6 85*03 83         [24] 2378 	mov	dph,(_lcd_address + 1)
      0006E9 74 2C            [12] 2379 	mov	a,#0x2c
      0006EB F0               [24] 2380 	movx	@dptr,a
                                   2381 ;	assignBit
      0006EC C2 B4            [12] 2382 	clr	_P3_4
                                   2383 ;	ecen4330lab7.c:633: CD = 1;
                                   2384 ;	assignBit
      0006EE D2 B5            [12] 2385 	setb	_P3_5
                                   2386 ;	ecen4330lab7.c:634: write8(color1>>8);
                                   2387 ;	assignBit
      0006F0 D2 B4            [12] 2388 	setb	_P3_4
      0006F2 85*02 82         [24] 2389 	mov	dpl,_lcd_address
      0006F5 85*03 83         [24] 2390 	mov	dph,(_lcd_address + 1)
      0006F8 E5*48            [12] 2391 	mov	a,(_drawPixel_PARM_3 + 1)
      0006FA F0               [24] 2392 	movx	@dptr,a
                                   2393 ;	assignBit
      0006FB C2 B4            [12] 2394 	clr	_P3_4
                                   2395 ;	ecen4330lab7.c:635: write8(color1);
                                   2396 ;	assignBit
      0006FD D2 B4            [12] 2397 	setb	_P3_4
      0006FF 85*02 82         [24] 2398 	mov	dpl,_lcd_address
      000702 85*03 83         [24] 2399 	mov	dph,(_lcd_address + 1)
      000705 E5*47            [12] 2400 	mov	a,_drawPixel_PARM_3
      000707 F0               [24] 2401 	movx	@dptr,a
                                   2402 ;	assignBit
      000708 C2 B4            [12] 2403 	clr	_P3_4
                                   2404 ;	ecen4330lab7.c:636: }
      00070A 22               [24] 2405 	ret
                                   2406 ;------------------------------------------------------------
                                   2407 ;Allocation info for local variables in function 'fillRect'
                                   2408 ;------------------------------------------------------------
                                   2409 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2410 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2411 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2412 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2413 ;x                         Allocated to registers 
                                   2414 ;------------------------------------------------------------
                                   2415 ;	ecen4330lab7.c:644: void fillRect(u16 x,u16 y,u16 w,u16 h,u16 color){
                                   2416 ;	-----------------------------------------
                                   2417 ;	 function fillRect
                                   2418 ;	-----------------------------------------
      00070B                       2419 _fillRect:
      00070B AE 82            [24] 2420 	mov	r6,dpl
      00070D AF 83            [24] 2421 	mov	r7,dph
                                   2422 ;	ecen4330lab7.c:645: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      00070F C3               [12] 2423 	clr	c
      000710 EE               [12] 2424 	mov	a,r6
      000711 94 F0            [12] 2425 	subb	a,#0xf0
      000713 EF               [12] 2426 	mov	a,r7
      000714 94 00            [12] 2427 	subb	a,#0x00
      000716 50 0B            [24] 2428 	jnc	00101$
      000718 C3               [12] 2429 	clr	c
      000719 E5*49            [12] 2430 	mov	a,_fillRect_PARM_2
      00071B 94 40            [12] 2431 	subb	a,#0x40
      00071D E5*4A            [12] 2432 	mov	a,(_fillRect_PARM_2 + 1)
      00071F 94 01            [12] 2433 	subb	a,#0x01
      000721 40 01            [24] 2434 	jc	00102$
      000723                       2435 00101$:
                                   2436 ;	ecen4330lab7.c:647: return;
      000723 22               [24] 2437 	ret
      000724                       2438 00102$:
                                   2439 ;	ecen4330lab7.c:650: if ((x+w-1) >= TFTWIDTH)
      000724 E5*4B            [12] 2440 	mov	a,_fillRect_PARM_3
      000726 2E               [12] 2441 	add	a,r6
      000727 FC               [12] 2442 	mov	r4,a
      000728 E5*4C            [12] 2443 	mov	a,(_fillRect_PARM_3 + 1)
      00072A 3F               [12] 2444 	addc	a,r7
      00072B FD               [12] 2445 	mov	r5,a
      00072C 1C               [12] 2446 	dec	r4
      00072D BC FF 01         [24] 2447 	cjne	r4,#0xff,00161$
      000730 1D               [12] 2448 	dec	r5
      000731                       2449 00161$:
      000731 C3               [12] 2450 	clr	c
      000732 EC               [12] 2451 	mov	a,r4
      000733 94 F0            [12] 2452 	subb	a,#0xf0
      000735 ED               [12] 2453 	mov	a,r5
      000736 94 00            [12] 2454 	subb	a,#0x00
      000738 40 0A            [24] 2455 	jc	00105$
                                   2456 ;	ecen4330lab7.c:652: w = TFTWIDTH-x;
      00073A 74 F0            [12] 2457 	mov	a,#0xf0
      00073C C3               [12] 2458 	clr	c
      00073D 9E               [12] 2459 	subb	a,r6
      00073E F5*4B            [12] 2460 	mov	_fillRect_PARM_3,a
      000740 E4               [12] 2461 	clr	a
      000741 9F               [12] 2462 	subb	a,r7
      000742 F5*4C            [12] 2463 	mov	(_fillRect_PARM_3 + 1),a
      000744                       2464 00105$:
                                   2465 ;	ecen4330lab7.c:655: if ((y+h-1) >= TFTHEIGHT)
      000744 E5*4D            [12] 2466 	mov	a,_fillRect_PARM_4
      000746 25*49            [12] 2467 	add	a,_fillRect_PARM_2
      000748 FC               [12] 2468 	mov	r4,a
      000749 E5*4E            [12] 2469 	mov	a,(_fillRect_PARM_4 + 1)
      00074B 35*4A            [12] 2470 	addc	a,(_fillRect_PARM_2 + 1)
      00074D FD               [12] 2471 	mov	r5,a
      00074E 1C               [12] 2472 	dec	r4
      00074F BC FF 01         [24] 2473 	cjne	r4,#0xff,00163$
      000752 1D               [12] 2474 	dec	r5
      000753                       2475 00163$:
      000753 C3               [12] 2476 	clr	c
      000754 EC               [12] 2477 	mov	a,r4
      000755 94 40            [12] 2478 	subb	a,#0x40
      000757 ED               [12] 2479 	mov	a,r5
      000758 94 01            [12] 2480 	subb	a,#0x01
      00075A 40 0D            [24] 2481 	jc	00107$
                                   2482 ;	ecen4330lab7.c:657: h = TFTHEIGHT-y;
      00075C 74 40            [12] 2483 	mov	a,#0x40
      00075E C3               [12] 2484 	clr	c
      00075F 95*49            [12] 2485 	subb	a,_fillRect_PARM_2
      000761 F5*4D            [12] 2486 	mov	_fillRect_PARM_4,a
      000763 74 01            [12] 2487 	mov	a,#0x01
      000765 95*4A            [12] 2488 	subb	a,(_fillRect_PARM_2 + 1)
      000767 F5*4E            [12] 2489 	mov	(_fillRect_PARM_4 + 1),a
      000769                       2490 00107$:
                                   2491 ;	ecen4330lab7.c:660: setAddress(x, y, x+w-1, y+h-1);
      000769 E5*4B            [12] 2492 	mov	a,_fillRect_PARM_3
      00076B 2E               [12] 2493 	add	a,r6
      00076C FC               [12] 2494 	mov	r4,a
      00076D E5*4C            [12] 2495 	mov	a,(_fillRect_PARM_3 + 1)
      00076F 3F               [12] 2496 	addc	a,r7
      000770 FD               [12] 2497 	mov	r5,a
      000771 EC               [12] 2498 	mov	a,r4
      000772 24 FF            [12] 2499 	add	a,#0xff
      000774 F5*02            [12] 2500 	mov	_setAddress_PARM_3,a
      000776 ED               [12] 2501 	mov	a,r5
      000777 34 FF            [12] 2502 	addc	a,#0xff
      000779 F5*03            [12] 2503 	mov	(_setAddress_PARM_3 + 1),a
      00077B E5*4D            [12] 2504 	mov	a,_fillRect_PARM_4
      00077D 25*49            [12] 2505 	add	a,_fillRect_PARM_2
      00077F FC               [12] 2506 	mov	r4,a
      000780 E5*4E            [12] 2507 	mov	a,(_fillRect_PARM_4 + 1)
      000782 35*4A            [12] 2508 	addc	a,(_fillRect_PARM_2 + 1)
      000784 FD               [12] 2509 	mov	r5,a
      000785 EC               [12] 2510 	mov	a,r4
      000786 24 FF            [12] 2511 	add	a,#0xff
      000788 F5*04            [12] 2512 	mov	_setAddress_PARM_4,a
      00078A ED               [12] 2513 	mov	a,r5
      00078B 34 FF            [12] 2514 	addc	a,#0xff
      00078D F5*05            [12] 2515 	mov	(_setAddress_PARM_4 + 1),a
      00078F 85*49*00         [24] 2516 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      000792 85*4A*01         [24] 2517 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000795 8E 82            [24] 2518 	mov	dpl,r6
      000797 8F 83            [24] 2519 	mov	dph,r7
      000799 12r04rE0         [24] 2520 	lcall	_setAddress
                                   2521 ;	ecen4330lab7.c:661: write8Reg(0x2C);
                                   2522 ;	assignBit
      00079C C2 B5            [12] 2523 	clr	_P3_5
                                   2524 ;	assignBit
      00079E D2 B4            [12] 2525 	setb	_P3_4
      0007A0 85*02 82         [24] 2526 	mov	dpl,_lcd_address
      0007A3 85*03 83         [24] 2527 	mov	dph,(_lcd_address + 1)
      0007A6 74 2C            [12] 2528 	mov	a,#0x2c
      0007A8 F0               [24] 2529 	movx	@dptr,a
                                   2530 ;	assignBit
      0007A9 C2 B4            [12] 2531 	clr	_P3_4
                                   2532 ;	ecen4330lab7.c:662: CD = 1;
                                   2533 ;	assignBit
      0007AB D2 B5            [12] 2534 	setb	_P3_5
                                   2535 ;	ecen4330lab7.c:663: for(y=h; y>0; y--)
      0007AD AF*50            [24] 2536 	mov	r7,(_fillRect_PARM_5 + 1)
      0007AF AD*4D            [24] 2537 	mov	r5,_fillRect_PARM_4
      0007B1 AE*4E            [24] 2538 	mov	r6,(_fillRect_PARM_4 + 1)
      0007B3                       2539 00114$:
      0007B3 ED               [12] 2540 	mov	a,r5
      0007B4 4E               [12] 2541 	orl	a,r6
      0007B5 60 30            [24] 2542 	jz	00116$
                                   2543 ;	ecen4330lab7.c:665: for(x=w; x>0; x--)
      0007B7 AB*4B            [24] 2544 	mov	r3,_fillRect_PARM_3
      0007B9 AC*4C            [24] 2545 	mov	r4,(_fillRect_PARM_3 + 1)
      0007BB                       2546 00111$:
      0007BB EB               [12] 2547 	mov	a,r3
      0007BC 4C               [12] 2548 	orl	a,r4
      0007BD 60 21            [24] 2549 	jz	00115$
                                   2550 ;	ecen4330lab7.c:667: write8(color>>8); 
                                   2551 ;	assignBit
      0007BF D2 B4            [12] 2552 	setb	_P3_4
      0007C1 85*02 82         [24] 2553 	mov	dpl,_lcd_address
      0007C4 85*03 83         [24] 2554 	mov	dph,(_lcd_address + 1)
      0007C7 EF               [12] 2555 	mov	a,r7
      0007C8 F0               [24] 2556 	movx	@dptr,a
                                   2557 ;	assignBit
      0007C9 C2 B4            [12] 2558 	clr	_P3_4
                                   2559 ;	ecen4330lab7.c:668: write8(color);
                                   2560 ;	assignBit
      0007CB D2 B4            [12] 2561 	setb	_P3_4
      0007CD 85*02 82         [24] 2562 	mov	dpl,_lcd_address
      0007D0 85*03 83         [24] 2563 	mov	dph,(_lcd_address + 1)
      0007D3 E5*4F            [12] 2564 	mov	a,_fillRect_PARM_5
      0007D5 FA               [12] 2565 	mov	r2,a
      0007D6 F0               [24] 2566 	movx	@dptr,a
                                   2567 ;	assignBit
      0007D7 C2 B4            [12] 2568 	clr	_P3_4
                                   2569 ;	ecen4330lab7.c:665: for(x=w; x>0; x--)
      0007D9 1B               [12] 2570 	dec	r3
      0007DA BB FF 01         [24] 2571 	cjne	r3,#0xff,00167$
      0007DD 1C               [12] 2572 	dec	r4
      0007DE                       2573 00167$:
      0007DE 80 DB            [24] 2574 	sjmp	00111$
      0007E0                       2575 00115$:
                                   2576 ;	ecen4330lab7.c:663: for(y=h; y>0; y--)
      0007E0 1D               [12] 2577 	dec	r5
      0007E1 BD FF 01         [24] 2578 	cjne	r5,#0xff,00168$
      0007E4 1E               [12] 2579 	dec	r6
      0007E5                       2580 00168$:
      0007E5 80 CC            [24] 2581 	sjmp	00114$
      0007E7                       2582 00116$:
                                   2583 ;	ecen4330lab7.c:671: }
      0007E7 22               [24] 2584 	ret
                                   2585 ;------------------------------------------------------------
                                   2586 ;Allocation info for local variables in function 'fillScreen'
                                   2587 ;------------------------------------------------------------
                                   2588 ;Color                     Allocated to registers r6 r7 
                                   2589 ;len                       Allocated to registers 
                                   2590 ;blocks                    Allocated to registers r4 r7 
                                   2591 ;i                         Allocated to registers r3 
                                   2592 ;hi                        Allocated to registers r5 
                                   2593 ;lo                        Allocated to registers r6 
                                   2594 ;------------------------------------------------------------
                                   2595 ;	ecen4330lab7.c:679: void fillScreen(unsigned int Color){
                                   2596 ;	-----------------------------------------
                                   2597 ;	 function fillScreen
                                   2598 ;	-----------------------------------------
      0007E8                       2599 _fillScreen:
      0007E8 AE 82            [24] 2600 	mov	r6,dpl
      0007EA AF 83            [24] 2601 	mov	r7,dph
                                   2602 ;	ecen4330lab7.c:682: unsigned char  i, hi = Color >> 8, lo = Color;
      0007EC 8F 05            [24] 2603 	mov	ar5,r7
                                   2604 ;	ecen4330lab7.c:685: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0007EE E4               [12] 2605 	clr	a
      0007EF F5*00            [12] 2606 	mov	_setAddress_PARM_2,a
      0007F1 F5*01            [12] 2607 	mov	(_setAddress_PARM_2 + 1),a
      0007F3 75*02 EF         [24] 2608 	mov	_setAddress_PARM_3,#0xef
                                   2609 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0007F6 F5*03            [12] 2610 	mov	(_setAddress_PARM_3 + 1),a
      0007F8 75*04 3F         [24] 2611 	mov	_setAddress_PARM_4,#0x3f
      0007FB 75*05 01         [24] 2612 	mov	(_setAddress_PARM_4 + 1),#0x01
      0007FE 90 00 00         [24] 2613 	mov	dptr,#0x0000
      000801 C0 06            [24] 2614 	push	ar6
      000803 C0 05            [24] 2615 	push	ar5
      000805 12r04rE0         [24] 2616 	lcall	_setAddress
      000808 D0 05            [24] 2617 	pop	ar5
      00080A D0 06            [24] 2618 	pop	ar6
                                   2619 ;	ecen4330lab7.c:686: write8Reg(0x2C);
                                   2620 ;	assignBit
      00080C C2 B5            [12] 2621 	clr	_P3_5
                                   2622 ;	assignBit
      00080E D2 B4            [12] 2623 	setb	_P3_4
      000810 85*02 82         [24] 2624 	mov	dpl,_lcd_address
      000813 85*03 83         [24] 2625 	mov	dph,(_lcd_address + 1)
      000816 74 2C            [12] 2626 	mov	a,#0x2c
      000818 F0               [24] 2627 	movx	@dptr,a
                                   2628 ;	assignBit
      000819 C2 B4            [12] 2629 	clr	_P3_4
                                   2630 ;	ecen4330lab7.c:687: CD = 1;
                                   2631 ;	assignBit
      00081B D2 B5            [12] 2632 	setb	_P3_5
                                   2633 ;	ecen4330lab7.c:688: write8(hi); 
                                   2634 ;	assignBit
      00081D D2 B4            [12] 2635 	setb	_P3_4
      00081F 85*02 82         [24] 2636 	mov	dpl,_lcd_address
      000822 85*03 83         [24] 2637 	mov	dph,(_lcd_address + 1)
      000825 ED               [12] 2638 	mov	a,r5
      000826 F0               [24] 2639 	movx	@dptr,a
                                   2640 ;	assignBit
      000827 C2 B4            [12] 2641 	clr	_P3_4
                                   2642 ;	ecen4330lab7.c:689: write8(lo);
                                   2643 ;	assignBit
      000829 D2 B4            [12] 2644 	setb	_P3_4
      00082B 85*02 82         [24] 2645 	mov	dpl,_lcd_address
      00082E 85*03 83         [24] 2646 	mov	dph,(_lcd_address + 1)
      000831 EE               [12] 2647 	mov	a,r6
      000832 F0               [24] 2648 	movx	@dptr,a
                                   2649 ;	assignBit
      000833 C2 B4            [12] 2650 	clr	_P3_4
                                   2651 ;	ecen4330lab7.c:691: while(blocks--) {
      000835 7C B0            [12] 2652 	mov	r4,#0xb0
      000837 7F 04            [12] 2653 	mov	r7,#0x04
      000839                       2654 00104$:
      000839 8C 02            [24] 2655 	mov	ar2,r4
      00083B 8F 03            [24] 2656 	mov	ar3,r7
      00083D 1C               [12] 2657 	dec	r4
      00083E BC FF 01         [24] 2658 	cjne	r4,#0xff,00140$
      000841 1F               [12] 2659 	dec	r7
      000842                       2660 00140$:
      000842 EA               [12] 2661 	mov	a,r2
      000843 4B               [12] 2662 	orl	a,r3
      000844 60 66            [24] 2663 	jz	00106$
                                   2664 ;	ecen4330lab7.c:693: do {
      000846 7B 10            [12] 2665 	mov	r3,#0x10
      000848                       2666 00101$:
                                   2667 ;	ecen4330lab7.c:694: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2668 ;	assignBit
      000848 D2 B4            [12] 2669 	setb	_P3_4
      00084A 85*02 82         [24] 2670 	mov	dpl,_lcd_address
      00084D 85*03 83         [24] 2671 	mov	dph,(_lcd_address + 1)
      000850 ED               [12] 2672 	mov	a,r5
      000851 F0               [24] 2673 	movx	@dptr,a
                                   2674 ;	assignBit
      000852 C2 B4            [12] 2675 	clr	_P3_4
                                   2676 ;	assignBit
      000854 D2 B4            [12] 2677 	setb	_P3_4
      000856 85*02 82         [24] 2678 	mov	dpl,_lcd_address
      000859 85*03 83         [24] 2679 	mov	dph,(_lcd_address + 1)
      00085C EE               [12] 2680 	mov	a,r6
      00085D F0               [24] 2681 	movx	@dptr,a
                                   2682 ;	assignBit
      00085E C2 B4            [12] 2683 	clr	_P3_4
                                   2684 ;	assignBit
      000860 D2 B4            [12] 2685 	setb	_P3_4
      000862 85*02 82         [24] 2686 	mov	dpl,_lcd_address
      000865 85*03 83         [24] 2687 	mov	dph,(_lcd_address + 1)
      000868 ED               [12] 2688 	mov	a,r5
      000869 F0               [24] 2689 	movx	@dptr,a
                                   2690 ;	assignBit
      00086A C2 B4            [12] 2691 	clr	_P3_4
                                   2692 ;	assignBit
      00086C D2 B4            [12] 2693 	setb	_P3_4
      00086E 85*02 82         [24] 2694 	mov	dpl,_lcd_address
      000871 85*03 83         [24] 2695 	mov	dph,(_lcd_address + 1)
      000874 EE               [12] 2696 	mov	a,r6
      000875 F0               [24] 2697 	movx	@dptr,a
                                   2698 ;	assignBit
      000876 C2 B4            [12] 2699 	clr	_P3_4
                                   2700 ;	ecen4330lab7.c:695: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2701 ;	assignBit
      000878 D2 B4            [12] 2702 	setb	_P3_4
      00087A 85*02 82         [24] 2703 	mov	dpl,_lcd_address
      00087D 85*03 83         [24] 2704 	mov	dph,(_lcd_address + 1)
      000880 ED               [12] 2705 	mov	a,r5
      000881 F0               [24] 2706 	movx	@dptr,a
                                   2707 ;	assignBit
      000882 C2 B4            [12] 2708 	clr	_P3_4
                                   2709 ;	assignBit
      000884 D2 B4            [12] 2710 	setb	_P3_4
      000886 85*02 82         [24] 2711 	mov	dpl,_lcd_address
      000889 85*03 83         [24] 2712 	mov	dph,(_lcd_address + 1)
      00088C EE               [12] 2713 	mov	a,r6
      00088D F0               [24] 2714 	movx	@dptr,a
                                   2715 ;	assignBit
      00088E C2 B4            [12] 2716 	clr	_P3_4
                                   2717 ;	assignBit
      000890 D2 B4            [12] 2718 	setb	_P3_4
      000892 85*02 82         [24] 2719 	mov	dpl,_lcd_address
      000895 85*03 83         [24] 2720 	mov	dph,(_lcd_address + 1)
      000898 ED               [12] 2721 	mov	a,r5
      000899 F0               [24] 2722 	movx	@dptr,a
                                   2723 ;	assignBit
      00089A C2 B4            [12] 2724 	clr	_P3_4
                                   2725 ;	assignBit
      00089C D2 B4            [12] 2726 	setb	_P3_4
      00089E 85*02 82         [24] 2727 	mov	dpl,_lcd_address
      0008A1 85*03 83         [24] 2728 	mov	dph,(_lcd_address + 1)
      0008A4 EE               [12] 2729 	mov	a,r6
      0008A5 F0               [24] 2730 	movx	@dptr,a
                                   2731 ;	assignBit
      0008A6 C2 B4            [12] 2732 	clr	_P3_4
                                   2733 ;	ecen4330lab7.c:696: } while(--i);
      0008A8 DB 9E            [24] 2734 	djnz	r3,00101$
      0008AA 80 8D            [24] 2735 	sjmp	00104$
      0008AC                       2736 00106$:
                                   2737 ;	ecen4330lab7.c:698: for(i = (char)len & 63; i--; ) {
      0008AC 7F 3F            [12] 2738 	mov	r7,#0x3f
      0008AE                       2739 00109$:
      0008AE 8F 04            [24] 2740 	mov	ar4,r7
      0008B0 1F               [12] 2741 	dec	r7
      0008B1 EC               [12] 2742 	mov	a,r4
      0008B2 60 1A            [24] 2743 	jz	00111$
                                   2744 ;	ecen4330lab7.c:699: write8(hi); 
                                   2745 ;	assignBit
      0008B4 D2 B4            [12] 2746 	setb	_P3_4
      0008B6 85*02 82         [24] 2747 	mov	dpl,_lcd_address
      0008B9 85*03 83         [24] 2748 	mov	dph,(_lcd_address + 1)
      0008BC ED               [12] 2749 	mov	a,r5
      0008BD F0               [24] 2750 	movx	@dptr,a
                                   2751 ;	assignBit
      0008BE C2 B4            [12] 2752 	clr	_P3_4
                                   2753 ;	ecen4330lab7.c:700: write8(lo);
                                   2754 ;	assignBit
      0008C0 D2 B4            [12] 2755 	setb	_P3_4
      0008C2 85*02 82         [24] 2756 	mov	dpl,_lcd_address
      0008C5 85*03 83         [24] 2757 	mov	dph,(_lcd_address + 1)
      0008C8 EE               [12] 2758 	mov	a,r6
      0008C9 F0               [24] 2759 	movx	@dptr,a
                                   2760 ;	assignBit
      0008CA C2 B4            [12] 2761 	clr	_P3_4
      0008CC 80 E0            [24] 2762 	sjmp	00109$
      0008CE                       2763 00111$:
                                   2764 ;	ecen4330lab7.c:702: }
      0008CE 22               [24] 2765 	ret
                                   2766 ;------------------------------------------------------------
                                   2767 ;Allocation info for local variables in function 'drawChar'
                                   2768 ;------------------------------------------------------------
                                   2769 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2770 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2771 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2772 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2773 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2774 ;x                         Allocated with name '_drawChar_x_65536_325'
                                   2775 ;i                         Allocated to registers r3 
                                   2776 ;line                      Allocated with name '_drawChar_line_196608_329'
                                   2777 ;j                         Allocated to registers r2 
                                   2778 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2779 ;------------------------------------------------------------
                                   2780 ;	ecen4330lab7.c:710: void drawChar(int x, int y, unsigned char c,u16 color, u16 bg, u8 size){
                                   2781 ;	-----------------------------------------
                                   2782 ;	 function drawChar
                                   2783 ;	-----------------------------------------
      0008CF                       2784 _drawChar:
      0008CF 85 82*59         [24] 2785 	mov	_drawChar_x_65536_325,dpl
      0008D2 85 83*5A         [24] 2786 	mov	(_drawChar_x_65536_325 + 1),dph
                                   2787 ;	ecen4330lab7.c:711: if ((x >=TFTWIDTH) || // Clip right
      0008D5 C3               [12] 2788 	clr	c
      0008D6 E5*59            [12] 2789 	mov	a,_drawChar_x_65536_325
      0008D8 94 F0            [12] 2790 	subb	a,#0xf0
      0008DA E5*5A            [12] 2791 	mov	a,(_drawChar_x_65536_325 + 1)
      0008DC 64 80            [12] 2792 	xrl	a,#0x80
      0008DE 94 80            [12] 2793 	subb	a,#0x80
      0008E0 50 59            [24] 2794 	jnc	00101$
                                   2795 ;	ecen4330lab7.c:712: (y >=TFTHEIGHT)           || // Clip bottom
      0008E2 C3               [12] 2796 	clr	c
      0008E3 E5*51            [12] 2797 	mov	a,_drawChar_PARM_2
      0008E5 94 40            [12] 2798 	subb	a,#0x40
      0008E7 E5*52            [12] 2799 	mov	a,(_drawChar_PARM_2 + 1)
      0008E9 64 80            [12] 2800 	xrl	a,#0x80
      0008EB 94 81            [12] 2801 	subb	a,#0x81
      0008ED 50 4C            [24] 2802 	jnc	00101$
                                   2803 ;	ecen4330lab7.c:713: ((x + 6 * size - 1) < 0) || // Clip left
      0008EF AC*58            [24] 2804 	mov	r4,_drawChar_PARM_6
      0008F1 7D 00            [12] 2805 	mov	r5,#0x00
      0008F3 8C*00            [24] 2806 	mov	__mulint_PARM_2,r4
      0008F5 8D*01            [24] 2807 	mov	(__mulint_PARM_2 + 1),r5
      0008F7 90 00 06         [24] 2808 	mov	dptr,#0x0006
      0008FA C0 05            [24] 2809 	push	ar5
      0008FC C0 04            [24] 2810 	push	ar4
      0008FE 12r00r00         [24] 2811 	lcall	__mulint
      000901 AA 82            [24] 2812 	mov	r2,dpl
      000903 AB 83            [24] 2813 	mov	r3,dph
      000905 D0 04            [24] 2814 	pop	ar4
      000907 D0 05            [24] 2815 	pop	ar5
      000909 EA               [12] 2816 	mov	a,r2
      00090A 25*59            [12] 2817 	add	a,_drawChar_x_65536_325
      00090C FA               [12] 2818 	mov	r2,a
      00090D EB               [12] 2819 	mov	a,r3
      00090E 35*5A            [12] 2820 	addc	a,(_drawChar_x_65536_325 + 1)
      000910 FB               [12] 2821 	mov	r3,a
      000911 1A               [12] 2822 	dec	r2
      000912 BA FF 01         [24] 2823 	cjne	r2,#0xff,00182$
      000915 1B               [12] 2824 	dec	r3
      000916                       2825 00182$:
      000916 EB               [12] 2826 	mov	a,r3
      000917 20 E7 21         [24] 2827 	jb	acc.7,00101$
                                   2828 ;	ecen4330lab7.c:714: ((y + 8 * size - 1) < 0))   // Clip top
      00091A ED               [12] 2829 	mov	a,r5
      00091B C4               [12] 2830 	swap	a
      00091C 03               [12] 2831 	rr	a
      00091D 54 F8            [12] 2832 	anl	a,#0xf8
      00091F CC               [12] 2833 	xch	a,r4
      000920 C4               [12] 2834 	swap	a
      000921 03               [12] 2835 	rr	a
      000922 CC               [12] 2836 	xch	a,r4
      000923 6C               [12] 2837 	xrl	a,r4
      000924 CC               [12] 2838 	xch	a,r4
      000925 54 F8            [12] 2839 	anl	a,#0xf8
      000927 CC               [12] 2840 	xch	a,r4
      000928 6C               [12] 2841 	xrl	a,r4
      000929 FD               [12] 2842 	mov	r5,a
      00092A EC               [12] 2843 	mov	a,r4
      00092B 25*51            [12] 2844 	add	a,_drawChar_PARM_2
      00092D FC               [12] 2845 	mov	r4,a
      00092E ED               [12] 2846 	mov	a,r5
      00092F 35*52            [12] 2847 	addc	a,(_drawChar_PARM_2 + 1)
      000931 FD               [12] 2848 	mov	r5,a
      000932 1C               [12] 2849 	dec	r4
      000933 BC FF 01         [24] 2850 	cjne	r4,#0xff,00184$
      000936 1D               [12] 2851 	dec	r5
      000937                       2852 00184$:
      000937 ED               [12] 2853 	mov	a,r5
      000938 30 E7 01         [24] 2854 	jnb	acc.7,00141$
      00093B                       2855 00101$:
                                   2856 ;	ecen4330lab7.c:716: return;
      00093B 22               [24] 2857 	ret
                                   2858 ;	ecen4330lab7.c:719: for (char i=0; i<6; i++ )
      00093C                       2859 00141$:
      00093C 74 01            [12] 2860 	mov	a,#0x01
      00093E B5*58 04         [24] 2861 	cjne	a,_drawChar_PARM_6,00186$
      000941 74 01            [12] 2862 	mov	a,#0x01
      000943 80 01            [24] 2863 	sjmp	00187$
      000945                       2864 00186$:
      000945 E4               [12] 2865 	clr	a
      000946                       2866 00187$:
      000946 FD               [12] 2867 	mov	r5,a
      000947 FC               [12] 2868 	mov	r4,a
      000948 E5*54            [12] 2869 	mov	a,_drawChar_PARM_4
      00094A B5*56 08         [24] 2870 	cjne	a,_drawChar_PARM_5,00188$
      00094D E5*55            [12] 2871 	mov	a,(_drawChar_PARM_4 + 1)
      00094F B5*57 03         [24] 2872 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      000952 D3               [12] 2873 	setb	c
      000953 80 01            [24] 2874 	sjmp	00189$
      000955                       2875 00188$:
      000955 C3               [12] 2876 	clr	c
      000956                       2877 00189$:
      000956 92*00            [24] 2878 	mov	_drawChar_sloc0_1_0,c
      000958 7B 00            [12] 2879 	mov	r3,#0x00
      00095A                       2880 00126$:
      00095A BB 06 00         [24] 2881 	cjne	r3,#0x06,00190$
      00095D                       2882 00190$:
      00095D 40 01            [24] 2883 	jc	00191$
      00095F 22               [24] 2884 	ret
      000960                       2885 00191$:
                                   2886 ;	ecen4330lab7.c:723: if (i == 5)
      000960 BB 05 05         [24] 2887 	cjne	r3,#0x05,00107$
                                   2888 ;	ecen4330lab7.c:725: line = 0x0;
      000963 75*5B 00         [24] 2889 	mov	_drawChar_line_196608_329,#0x00
      000966 80 30            [24] 2890 	sjmp	00140$
      000968                       2891 00107$:
                                   2892 ;	ecen4330lab7.c:729: line = pgm_read_byte(font+(c*5)+i);
      000968 85*53*00         [24] 2893 	mov	__mulint_PARM_2,_drawChar_PARM_3
      00096B 75*01 00         [24] 2894 	mov	(__mulint_PARM_2 + 1),#0x00
      00096E 90 00 05         [24] 2895 	mov	dptr,#0x0005
      000971 C0 05            [24] 2896 	push	ar5
      000973 C0 04            [24] 2897 	push	ar4
      000975 C0 03            [24] 2898 	push	ar3
      000977 12r00r00         [24] 2899 	lcall	__mulint
      00097A A8 82            [24] 2900 	mov	r0,dpl
      00097C A9 83            [24] 2901 	mov	r1,dph
      00097E D0 03            [24] 2902 	pop	ar3
      000980 D0 04            [24] 2903 	pop	ar4
      000982 D0 05            [24] 2904 	pop	ar5
      000984 E8               [12] 2905 	mov	a,r0
      000985 24r00            [12] 2906 	add	a,#_font
      000987 F8               [12] 2907 	mov	r0,a
      000988 E9               [12] 2908 	mov	a,r1
      000989 34s00            [12] 2909 	addc	a,#(_font >> 8)
      00098B F9               [12] 2910 	mov	r1,a
      00098C EB               [12] 2911 	mov	a,r3
      00098D 28               [12] 2912 	add	a,r0
      00098E F5 82            [12] 2913 	mov	dpl,a
      000990 E4               [12] 2914 	clr	a
      000991 39               [12] 2915 	addc	a,r1
      000992 F5 83            [12] 2916 	mov	dph,a
      000994 E4               [12] 2917 	clr	a
      000995 93               [24] 2918 	movc	a,@a+dptr
      000996 F5*5B            [12] 2919 	mov	_drawChar_line_196608_329,a
                                   2920 ;	ecen4330lab7.c:732: for (char j = 0; j<8; j++)
      000998                       2921 00140$:
      000998 8B F0            [24] 2922 	mov	b,r3
      00099A E5*58            [12] 2923 	mov	a,_drawChar_PARM_6
      00099C A4               [48] 2924 	mul	ab
      00099D 25*59            [12] 2925 	add	a,_drawChar_x_65536_325
      00099F F8               [12] 2926 	mov	r0,a
      0009A0 E5*5A            [12] 2927 	mov	a,(_drawChar_x_65536_325 + 1)
      0009A2 35 F0            [12] 2928 	addc	a,b
      0009A4 F9               [12] 2929 	mov	r1,a
      0009A5 88*5C            [24] 2930 	mov	_drawChar_sloc1_1_0,r0
      0009A7 89*5D            [24] 2931 	mov	(_drawChar_sloc1_1_0 + 1),r1
      0009A9 7A 00            [12] 2932 	mov	r2,#0x00
      0009AB                       2933 00123$:
      0009AB BA 08 00         [24] 2934 	cjne	r2,#0x08,00194$
      0009AE                       2935 00194$:
      0009AE 40 03            [24] 2936 	jc	00195$
      0009B0 02r0ArD5         [24] 2937 	ljmp	00127$
      0009B3                       2938 00195$:
                                   2939 ;	ecen4330lab7.c:734: if (line & 0x1)
      0009B3 E5*5B            [12] 2940 	mov	a,_drawChar_line_196608_329
      0009B5 20 E0 03         [24] 2941 	jb	acc.0,00196$
      0009B8 02r0Ar43         [24] 2942 	ljmp	00118$
      0009BB                       2943 00196$:
                                   2944 ;	ecen4330lab7.c:736: if (size == 1) // default size
      0009BB ED               [12] 2945 	mov	a,r5
      0009BC 60 40            [24] 2946 	jz	00110$
                                   2947 ;	ecen4330lab7.c:738: drawPixel(x+i, y+j, color);
      0009BE 8B 06            [24] 2948 	mov	ar6,r3
      0009C0 7F 00            [12] 2949 	mov	r7,#0x00
      0009C2 EE               [12] 2950 	mov	a,r6
      0009C3 25*59            [12] 2951 	add	a,_drawChar_x_65536_325
      0009C5 F5 82            [12] 2952 	mov	dpl,a
      0009C7 EF               [12] 2953 	mov	a,r7
      0009C8 35*5A            [12] 2954 	addc	a,(_drawChar_x_65536_325 + 1)
      0009CA F5 83            [12] 2955 	mov	dph,a
      0009CC 8A 06            [24] 2956 	mov	ar6,r2
      0009CE 7F 00            [12] 2957 	mov	r7,#0x00
      0009D0 EE               [12] 2958 	mov	a,r6
      0009D1 25*51            [12] 2959 	add	a,_drawChar_PARM_2
      0009D3 F5*45            [12] 2960 	mov	_drawPixel_PARM_2,a
      0009D5 EF               [12] 2961 	mov	a,r7
      0009D6 35*52            [12] 2962 	addc	a,(_drawChar_PARM_2 + 1)
      0009D8 F5*46            [12] 2963 	mov	(_drawPixel_PARM_2 + 1),a
      0009DA 85*54*47         [24] 2964 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0009DD 85*55*48         [24] 2965 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0009E0 C0 05            [24] 2966 	push	ar5
      0009E2 C0 04            [24] 2967 	push	ar4
      0009E4 C0 03            [24] 2968 	push	ar3
      0009E6 C0 02            [24] 2969 	push	ar2
      0009E8 C0 01            [24] 2970 	push	ar1
      0009EA C0 00            [24] 2971 	push	ar0
      0009EC 12r06rBA         [24] 2972 	lcall	_drawPixel
      0009EF D0 00            [24] 2973 	pop	ar0
      0009F1 D0 01            [24] 2974 	pop	ar1
      0009F3 D0 02            [24] 2975 	pop	ar2
      0009F5 D0 03            [24] 2976 	pop	ar3
      0009F7 D0 04            [24] 2977 	pop	ar4
      0009F9 D0 05            [24] 2978 	pop	ar5
      0009FB 02r0ArCB         [24] 2979 	ljmp	00119$
      0009FE                       2980 00110$:
                                   2981 ;	ecen4330lab7.c:741: fillRect(x+(i*size), y+(j*size), size, size, color);
      0009FE 8A F0            [24] 2982 	mov	b,r2
      000A00 E5*58            [12] 2983 	mov	a,_drawChar_PARM_6
      000A02 A4               [48] 2984 	mul	ab
      000A03 25*51            [12] 2985 	add	a,_drawChar_PARM_2
      000A05 F5*49            [12] 2986 	mov	_fillRect_PARM_2,a
      000A07 E5*52            [12] 2987 	mov	a,(_drawChar_PARM_2 + 1)
      000A09 35 F0            [12] 2988 	addc	a,b
      000A0B F5*4A            [12] 2989 	mov	(_fillRect_PARM_2 + 1),a
      000A0D AE*58            [24] 2990 	mov	r6,_drawChar_PARM_6
      000A0F 7F 00            [12] 2991 	mov	r7,#0x00
      000A11 8E*4B            [24] 2992 	mov	_fillRect_PARM_3,r6
      000A13 8F*4C            [24] 2993 	mov	(_fillRect_PARM_3 + 1),r7
      000A15 8E*4D            [24] 2994 	mov	_fillRect_PARM_4,r6
      000A17 8F*4E            [24] 2995 	mov	(_fillRect_PARM_4 + 1),r7
      000A19 85*54*4F         [24] 2996 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000A1C 85*55*50         [24] 2997 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      000A1F 85*5C 82         [24] 2998 	mov	dpl,_drawChar_sloc1_1_0
      000A22 85*5D 83         [24] 2999 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      000A25 C0 05            [24] 3000 	push	ar5
      000A27 C0 04            [24] 3001 	push	ar4
      000A29 C0 03            [24] 3002 	push	ar3
      000A2B C0 02            [24] 3003 	push	ar2
      000A2D C0 01            [24] 3004 	push	ar1
      000A2F C0 00            [24] 3005 	push	ar0
      000A31 12r07r0B         [24] 3006 	lcall	_fillRect
      000A34 D0 00            [24] 3007 	pop	ar0
      000A36 D0 01            [24] 3008 	pop	ar1
      000A38 D0 02            [24] 3009 	pop	ar2
      000A3A D0 03            [24] 3010 	pop	ar3
      000A3C D0 04            [24] 3011 	pop	ar4
      000A3E D0 05            [24] 3012 	pop	ar5
      000A40 02r0ArCB         [24] 3013 	ljmp	00119$
      000A43                       3014 00118$:
                                   3015 ;	ecen4330lab7.c:743: } else if (bg != color)
      000A43 30*00 03         [24] 3016 	jnb	_drawChar_sloc0_1_0,00198$
      000A46 02r0ArCB         [24] 3017 	ljmp	00119$
      000A49                       3018 00198$:
                                   3019 ;	ecen4330lab7.c:745: if (size == 1) // default size
      000A49 EC               [12] 3020 	mov	a,r4
      000A4A 60 3F            [24] 3021 	jz	00113$
                                   3022 ;	ecen4330lab7.c:747: drawPixel(x+i, y+j, bg);
      000A4C 8B 06            [24] 3023 	mov	ar6,r3
      000A4E 7F 00            [12] 3024 	mov	r7,#0x00
      000A50 EE               [12] 3025 	mov	a,r6
      000A51 25*59            [12] 3026 	add	a,_drawChar_x_65536_325
      000A53 F5 82            [12] 3027 	mov	dpl,a
      000A55 EF               [12] 3028 	mov	a,r7
      000A56 35*5A            [12] 3029 	addc	a,(_drawChar_x_65536_325 + 1)
      000A58 F5 83            [12] 3030 	mov	dph,a
      000A5A 8A 06            [24] 3031 	mov	ar6,r2
      000A5C 7F 00            [12] 3032 	mov	r7,#0x00
      000A5E EE               [12] 3033 	mov	a,r6
      000A5F 25*51            [12] 3034 	add	a,_drawChar_PARM_2
      000A61 F5*45            [12] 3035 	mov	_drawPixel_PARM_2,a
      000A63 EF               [12] 3036 	mov	a,r7
      000A64 35*52            [12] 3037 	addc	a,(_drawChar_PARM_2 + 1)
      000A66 F5*46            [12] 3038 	mov	(_drawPixel_PARM_2 + 1),a
      000A68 85*56*47         [24] 3039 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000A6B 85*57*48         [24] 3040 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000A6E C0 05            [24] 3041 	push	ar5
      000A70 C0 04            [24] 3042 	push	ar4
      000A72 C0 03            [24] 3043 	push	ar3
      000A74 C0 02            [24] 3044 	push	ar2
      000A76 C0 01            [24] 3045 	push	ar1
      000A78 C0 00            [24] 3046 	push	ar0
      000A7A 12r06rBA         [24] 3047 	lcall	_drawPixel
      000A7D D0 00            [24] 3048 	pop	ar0
      000A7F D0 01            [24] 3049 	pop	ar1
      000A81 D0 02            [24] 3050 	pop	ar2
      000A83 D0 03            [24] 3051 	pop	ar3
      000A85 D0 04            [24] 3052 	pop	ar4
      000A87 D0 05            [24] 3053 	pop	ar5
      000A89 80 40            [24] 3054 	sjmp	00119$
      000A8B                       3055 00113$:
                                   3056 ;	ecen4330lab7.c:751: fillRect(x+i*size, y+j*size, size, size, bg);
      000A8B 8A F0            [24] 3057 	mov	b,r2
      000A8D E5*58            [12] 3058 	mov	a,_drawChar_PARM_6
      000A8F A4               [48] 3059 	mul	ab
      000A90 25*51            [12] 3060 	add	a,_drawChar_PARM_2
      000A92 F5*49            [12] 3061 	mov	_fillRect_PARM_2,a
      000A94 E5*52            [12] 3062 	mov	a,(_drawChar_PARM_2 + 1)
      000A96 35 F0            [12] 3063 	addc	a,b
      000A98 F5*4A            [12] 3064 	mov	(_fillRect_PARM_2 + 1),a
      000A9A AE*58            [24] 3065 	mov	r6,_drawChar_PARM_6
      000A9C 7F 00            [12] 3066 	mov	r7,#0x00
      000A9E 8E*4B            [24] 3067 	mov	_fillRect_PARM_3,r6
      000AA0 8F*4C            [24] 3068 	mov	(_fillRect_PARM_3 + 1),r7
      000AA2 8E*4D            [24] 3069 	mov	_fillRect_PARM_4,r6
      000AA4 8F*4E            [24] 3070 	mov	(_fillRect_PARM_4 + 1),r7
      000AA6 85*56*4F         [24] 3071 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000AA9 85*57*50         [24] 3072 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000AAC 88 82            [24] 3073 	mov	dpl,r0
      000AAE 89 83            [24] 3074 	mov	dph,r1
      000AB0 C0 05            [24] 3075 	push	ar5
      000AB2 C0 04            [24] 3076 	push	ar4
      000AB4 C0 03            [24] 3077 	push	ar3
      000AB6 C0 02            [24] 3078 	push	ar2
      000AB8 C0 01            [24] 3079 	push	ar1
      000ABA C0 00            [24] 3080 	push	ar0
      000ABC 12r07r0B         [24] 3081 	lcall	_fillRect
      000ABF D0 00            [24] 3082 	pop	ar0
      000AC1 D0 01            [24] 3083 	pop	ar1
      000AC3 D0 02            [24] 3084 	pop	ar2
      000AC5 D0 03            [24] 3085 	pop	ar3
      000AC7 D0 04            [24] 3086 	pop	ar4
      000AC9 D0 05            [24] 3087 	pop	ar5
      000ACB                       3088 00119$:
                                   3089 ;	ecen4330lab7.c:755: line >>= 1;
      000ACB E5*5B            [12] 3090 	mov	a,_drawChar_line_196608_329
      000ACD C3               [12] 3091 	clr	c
      000ACE 13               [12] 3092 	rrc	a
      000ACF F5*5B            [12] 3093 	mov	_drawChar_line_196608_329,a
                                   3094 ;	ecen4330lab7.c:732: for (char j = 0; j<8; j++)
      000AD1 0A               [12] 3095 	inc	r2
      000AD2 02r09rAB         [24] 3096 	ljmp	00123$
      000AD5                       3097 00127$:
                                   3098 ;	ecen4330lab7.c:719: for (char i=0; i<6; i++ )
      000AD5 0B               [12] 3099 	inc	r3
                                   3100 ;	ecen4330lab7.c:759: }
      000AD6 02r09r5A         [24] 3101 	ljmp	00126$
                                   3102 ;------------------------------------------------------------
                                   3103 ;Allocation info for local variables in function 'write'
                                   3104 ;------------------------------------------------------------
                                   3105 ;c                         Allocated to registers r7 
                                   3106 ;------------------------------------------------------------
                                   3107 ;	ecen4330lab7.c:767: void write(u8 c)
                                   3108 ;	-----------------------------------------
                                   3109 ;	 function write
                                   3110 ;	-----------------------------------------
      000AD9                       3111 _write:
      000AD9 AF 82            [24] 3112 	mov	r7,dpl
                                   3113 ;	ecen4330lab7.c:769: if (c == '\n')
      000ADB BF 0A 22         [24] 3114 	cjne	r7,#0x0a,00105$
                                   3115 ;	ecen4330lab7.c:771: cursor_y += textsize*8;
      000ADE AD*0C            [24] 3116 	mov	r5,_textsize
      000AE0 E4               [12] 3117 	clr	a
      000AE1 C4               [12] 3118 	swap	a
      000AE2 03               [12] 3119 	rr	a
      000AE3 54 F8            [12] 3120 	anl	a,#0xf8
      000AE5 CD               [12] 3121 	xch	a,r5
      000AE6 C4               [12] 3122 	swap	a
      000AE7 03               [12] 3123 	rr	a
      000AE8 CD               [12] 3124 	xch	a,r5
      000AE9 6D               [12] 3125 	xrl	a,r5
      000AEA CD               [12] 3126 	xch	a,r5
      000AEB 54 F8            [12] 3127 	anl	a,#0xf8
      000AED CD               [12] 3128 	xch	a,r5
      000AEE 6D               [12] 3129 	xrl	a,r5
      000AEF FE               [12] 3130 	mov	r6,a
      000AF0 ED               [12] 3131 	mov	a,r5
      000AF1 25*0A            [12] 3132 	add	a,_cursor_y
      000AF3 F5*0A            [12] 3133 	mov	_cursor_y,a
      000AF5 EE               [12] 3134 	mov	a,r6
      000AF6 35*0B            [12] 3135 	addc	a,(_cursor_y + 1)
      000AF8 F5*0B            [12] 3136 	mov	(_cursor_y + 1),a
                                   3137 ;	ecen4330lab7.c:772: cursor_x  = 0;
      000AFA E4               [12] 3138 	clr	a
      000AFB F5*08            [12] 3139 	mov	_cursor_x,a
      000AFD F5*09            [12] 3140 	mov	(_cursor_x + 1),a
      000AFF 22               [24] 3141 	ret
      000B00                       3142 00105$:
                                   3143 ;	ecen4330lab7.c:774: else if (c == '\r')
      000B00 BF 0D 01         [24] 3144 	cjne	r7,#0x0d,00119$
      000B03 22               [24] 3145 	ret
      000B04                       3146 00119$:
                                   3147 ;	ecen4330lab7.c:780: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000B04 85*0A*51         [24] 3148 	mov	_drawChar_PARM_2,_cursor_y
      000B07 85*0B*52         [24] 3149 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000B0A 8F*53            [24] 3150 	mov	_drawChar_PARM_3,r7
      000B0C 85*0E*54         [24] 3151 	mov	_drawChar_PARM_4,_textcolor
      000B0F 85*0F*55         [24] 3152 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000B12 85*10*56         [24] 3153 	mov	_drawChar_PARM_5,_textbgcolor
      000B15 85*11*57         [24] 3154 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000B18 85*0C*58         [24] 3155 	mov	_drawChar_PARM_6,_textsize
      000B1B 85*08 82         [24] 3156 	mov	dpl,_cursor_x
      000B1E 85*09 83         [24] 3157 	mov	dph,(_cursor_x + 1)
      000B21 12r08rCF         [24] 3158 	lcall	_drawChar
                                   3159 ;	ecen4330lab7.c:781: cursor_x += textsize*6;
      000B24 85*0C*00         [24] 3160 	mov	__mulint_PARM_2,_textsize
      000B27 75*01 00         [24] 3161 	mov	(__mulint_PARM_2 + 1),#0x00
      000B2A 90 00 06         [24] 3162 	mov	dptr,#0x0006
      000B2D 12r00r00         [24] 3163 	lcall	__mulint
      000B30 AE 82            [24] 3164 	mov	r6,dpl
      000B32 AF 83            [24] 3165 	mov	r7,dph
      000B34 EE               [12] 3166 	mov	a,r6
      000B35 25*08            [12] 3167 	add	a,_cursor_x
      000B37 F5*08            [12] 3168 	mov	_cursor_x,a
      000B39 EF               [12] 3169 	mov	a,r7
      000B3A 35*09            [12] 3170 	addc	a,(_cursor_x + 1)
      000B3C F5*09            [12] 3171 	mov	(_cursor_x + 1),a
                                   3172 ;	ecen4330lab7.c:783: }
      000B3E 22               [24] 3173 	ret
                                   3174 ;------------------------------------------------------------
                                   3175 ;Allocation info for local variables in function 'LCD_string_write'
                                   3176 ;------------------------------------------------------------
                                   3177 ;str                       Allocated to registers r5 r6 r7 
                                   3178 ;i                         Allocated to registers r3 r4 
                                   3179 ;------------------------------------------------------------
                                   3180 ;	ecen4330lab7.c:791: void LCD_string_write(char *str)
                                   3181 ;	-----------------------------------------
                                   3182 ;	 function LCD_string_write
                                   3183 ;	-----------------------------------------
      000B3F                       3184 _LCD_string_write:
      000B3F AD 82            [24] 3185 	mov	r5,dpl
      000B41 AE 83            [24] 3186 	mov	r6,dph
      000B43 AF F0            [24] 3187 	mov	r7,b
                                   3188 ;	ecen4330lab7.c:794: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      000B45 7B 00            [12] 3189 	mov	r3,#0x00
      000B47 7C 00            [12] 3190 	mov	r4,#0x00
      000B49                       3191 00103$:
      000B49 EB               [12] 3192 	mov	a,r3
      000B4A 2D               [12] 3193 	add	a,r5
      000B4B F8               [12] 3194 	mov	r0,a
      000B4C EC               [12] 3195 	mov	a,r4
      000B4D 3E               [12] 3196 	addc	a,r6
      000B4E F9               [12] 3197 	mov	r1,a
      000B4F 8F 02            [24] 3198 	mov	ar2,r7
      000B51 88 82            [24] 3199 	mov	dpl,r0
      000B53 89 83            [24] 3200 	mov	dph,r1
      000B55 8A F0            [24] 3201 	mov	b,r2
      000B57 12r00r00         [24] 3202 	lcall	__gptrget
      000B5A FA               [12] 3203 	mov	r2,a
      000B5B 60 20            [24] 3204 	jz	00105$
                                   3205 ;	ecen4330lab7.c:796: write(str[i]);  /* Call transmit data function */
      000B5D 8A 82            [24] 3206 	mov	dpl,r2
      000B5F C0 07            [24] 3207 	push	ar7
      000B61 C0 06            [24] 3208 	push	ar6
      000B63 C0 05            [24] 3209 	push	ar5
      000B65 C0 04            [24] 3210 	push	ar4
      000B67 C0 03            [24] 3211 	push	ar3
      000B69 12r0ArD9         [24] 3212 	lcall	_write
      000B6C D0 03            [24] 3213 	pop	ar3
      000B6E D0 04            [24] 3214 	pop	ar4
      000B70 D0 05            [24] 3215 	pop	ar5
      000B72 D0 06            [24] 3216 	pop	ar6
      000B74 D0 07            [24] 3217 	pop	ar7
                                   3218 ;	ecen4330lab7.c:794: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      000B76 0B               [12] 3219 	inc	r3
      000B77 BB 00 CF         [24] 3220 	cjne	r3,#0x00,00103$
      000B7A 0C               [12] 3221 	inc	r4
      000B7B 80 CC            [24] 3222 	sjmp	00103$
      000B7D                       3223 00105$:
                                   3224 ;	ecen4330lab7.c:798: }
      000B7D 22               [24] 3225 	ret
                                   3226 ;------------------------------------------------------------
                                   3227 ;Allocation info for local variables in function 'keyDetect'
                                   3228 ;------------------------------------------------------------
                                   3229 ;	ecen4330lab7.c:818: unsigned char keyDetect(){
                                   3230 ;	-----------------------------------------
                                   3231 ;	 function keyDetect
                                   3232 ;	-----------------------------------------
      000B7E                       3233 _keyDetect:
                                   3234 ;	ecen4330lab7.c:819: __KEYPAD_PORT__=0xF0;           /*set port direction as input-output*/
      000B7E 75 90 F0         [24] 3235 	mov	_P1,#0xf0
                                   3236 ;	ecen4330lab7.c:820: received_flag = 0;
      000B81 75*43 00         [24] 3237 	mov	_received_flag,#0x00
                                   3238 ;	ecen4330lab7.c:821: do
      000B84                       3239 00102$:
                                   3240 ;	ecen4330lab7.c:823: __KEYPAD_PORT__ = 0xF0;
      000B84 75 90 F0         [24] 3241 	mov	_P1,#0xf0
                                   3242 ;	ecen4330lab7.c:824: colloc = __KEYPAD_PORT__;
      000B87 85 90*00         [24] 3243 	mov	_colloc,_P1
                                   3244 ;	ecen4330lab7.c:825: colloc&= 0xF0;  /* mask port for column read only */
      000B8A 53*00 F0         [24] 3245 	anl	_colloc,#0xf0
                                   3246 ;	ecen4330lab7.c:826: }while(colloc != 0xF0 && received_flag == 0);     /* read status of column */
      000B8D 74 F0            [12] 3247 	mov	a,#0xf0
      000B8F B5*00 02         [24] 3248 	cjne	a,_colloc,00190$
      000B92 80 04            [24] 3249 	sjmp	00106$
      000B94                       3250 00190$:
      000B94 E5*43            [12] 3251 	mov	a,_received_flag
      000B96 60 EC            [24] 3252 	jz	00102$
                                   3253 ;	ecen4330lab7.c:830: do
      000B98                       3254 00106$:
                                   3255 ;	ecen4330lab7.c:833: rtcPrint();
      000B98 12r02rE7         [24] 3256 	lcall	_rtcPrint
                                   3257 ;	ecen4330lab7.c:834: delay(10);  /* 20ms key debounce time */
      000B9B 90 00 0A         [24] 3258 	mov	dptr,#0x000a
      000B9E 12r01r9F         [24] 3259 	lcall	_delay
                                   3260 ;	ecen4330lab7.c:835: colloc = (__KEYPAD_PORT__ & 0xF0);  /* read status of column */
      000BA1 E5 90            [12] 3261 	mov	a,_P1
      000BA3 54 F0            [12] 3262 	anl	a,#0xf0
      000BA5 F5*00            [12] 3263 	mov	_colloc,a
                                   3264 ;	ecen4330lab7.c:836: }while(colloc == 0xF0 && received_flag == 0); /* check for any key press */
      000BA7 74 F0            [12] 3265 	mov	a,#0xf0
      000BA9 B5*00 04         [24] 3266 	cjne	a,_colloc,00108$
      000BAC E5*43            [12] 3267 	mov	a,_received_flag
      000BAE 60 E8            [24] 3268 	jz	00106$
      000BB0                       3269 00108$:
                                   3270 ;	ecen4330lab7.c:838: delay(1);
      000BB0 90 00 01         [24] 3271 	mov	dptr,#0x0001
      000BB3 12r01r9F         [24] 3272 	lcall	_delay
                                   3273 ;	ecen4330lab7.c:839: colloc = (__KEYPAD_PORT__ & 0xF0);
      000BB6 E5 90            [12] 3274 	mov	a,_P1
      000BB8 54 F0            [12] 3275 	anl	a,#0xf0
      000BBA F5*00            [12] 3276 	mov	_colloc,a
                                   3277 ;	ecen4330lab7.c:840: }while(colloc == 0xF0 && received_flag == 0);
      000BBC 74 F0            [12] 3278 	mov	a,#0xf0
      000BBE B5*00 04         [24] 3279 	cjne	a,_colloc,00112$
      000BC1 E5*43            [12] 3280 	mov	a,_received_flag
      000BC3 60 D3            [24] 3281 	jz	00106$
      000BC5                       3282 00112$:
                                   3283 ;	ecen4330lab7.c:842: if(received_flag == 0){
      000BC5 E5*43            [12] 3284 	mov	a,_received_flag
      000BC7 60 03            [24] 3285 	jz	00198$
      000BC9 02r0Cr8D         [24] 3286 	ljmp	00134$
      000BCC                       3287 00198$:
                                   3288 ;	ecen4330lab7.c:843: while(1)
      000BCC                       3289 00122$:
                                   3290 ;	ecen4330lab7.c:847: __KEYPAD_PORT__= 0xFE;                                          /* check for pressed key in 1st row */
      000BCC 75 90 FE         [24] 3291 	mov	_P1,#0xfe
                                   3292 ;	ecen4330lab7.c:848: colloc = (__KEYPAD_PORT__ & 0xF0);
      000BCF E5 90            [12] 3293 	mov	a,_P1
      000BD1 54 F0            [12] 3294 	anl	a,#0xf0
      000BD3 F5*00            [12] 3295 	mov	_colloc,a
                                   3296 ;	ecen4330lab7.c:849: if(colloc != 0xF0)
      000BD5 74 F0            [12] 3297 	mov	a,#0xf0
      000BD7 B5*00 02         [24] 3298 	cjne	a,_colloc,00199$
      000BDA 80 05            [24] 3299 	sjmp	00114$
      000BDC                       3300 00199$:
                                   3301 ;	ecen4330lab7.c:851: rowloc = 0;
      000BDC 75*01 00         [24] 3302 	mov	_rowloc,#0x00
                                   3303 ;	ecen4330lab7.c:852: break;
      000BDF 80 3D            [24] 3304 	sjmp	00123$
      000BE1                       3305 00114$:
                                   3306 ;	ecen4330lab7.c:855: __KEYPAD_PORT__ = 0xFD;                                 /* check for pressed key in 2nd row */
      000BE1 75 90 FD         [24] 3307 	mov	_P1,#0xfd
                                   3308 ;	ecen4330lab7.c:856: colloc = (__KEYPAD_PORT__ & 0xF0);
      000BE4 E5 90            [12] 3309 	mov	a,_P1
      000BE6 54 F0            [12] 3310 	anl	a,#0xf0
      000BE8 F5*00            [12] 3311 	mov	_colloc,a
                                   3312 ;	ecen4330lab7.c:857: if(colloc != 0xF0)
      000BEA 74 F0            [12] 3313 	mov	a,#0xf0
      000BEC B5*00 02         [24] 3314 	cjne	a,_colloc,00200$
      000BEF 80 05            [24] 3315 	sjmp	00116$
      000BF1                       3316 00200$:
                                   3317 ;	ecen4330lab7.c:859: rowloc = 1;
      000BF1 75*01 01         [24] 3318 	mov	_rowloc,#0x01
                                   3319 ;	ecen4330lab7.c:860: break;
      000BF4 80 28            [24] 3320 	sjmp	00123$
      000BF6                       3321 00116$:
                                   3322 ;	ecen4330lab7.c:863: __KEYPAD_PORT__ = 0xFB;         /* check for pressed key in 3rd row */
      000BF6 75 90 FB         [24] 3323 	mov	_P1,#0xfb
                                   3324 ;	ecen4330lab7.c:864: colloc = (__KEYPAD_PORT__ & 0xF0);
      000BF9 E5 90            [12] 3325 	mov	a,_P1
      000BFB 54 F0            [12] 3326 	anl	a,#0xf0
      000BFD F5*00            [12] 3327 	mov	_colloc,a
                                   3328 ;	ecen4330lab7.c:865: if(colloc != 0xF0)
      000BFF 74 F0            [12] 3329 	mov	a,#0xf0
      000C01 B5*00 02         [24] 3330 	cjne	a,_colloc,00201$
      000C04 80 05            [24] 3331 	sjmp	00118$
      000C06                       3332 00201$:
                                   3333 ;	ecen4330lab7.c:867: rowloc = 2;
      000C06 75*01 02         [24] 3334 	mov	_rowloc,#0x02
                                   3335 ;	ecen4330lab7.c:868: break;
      000C09 80 13            [24] 3336 	sjmp	00123$
      000C0B                       3337 00118$:
                                   3338 ;	ecen4330lab7.c:871: __KEYPAD_PORT__ = 0xF7;         /* check for pressed key in 4th row */
      000C0B 75 90 F7         [24] 3339 	mov	_P1,#0xf7
                                   3340 ;	ecen4330lab7.c:872: colloc = (__KEYPAD_PORT__ & 0xF0);
      000C0E E5 90            [12] 3341 	mov	a,_P1
      000C10 54 F0            [12] 3342 	anl	a,#0xf0
      000C12 F5*00            [12] 3343 	mov	_colloc,a
                                   3344 ;	ecen4330lab7.c:873: if(colloc != 0xF0)
      000C14 74 F0            [12] 3345 	mov	a,#0xf0
      000C16 B5*00 02         [24] 3346 	cjne	a,_colloc,00202$
      000C19 80 B1            [24] 3347 	sjmp	00122$
      000C1B                       3348 00202$:
                                   3349 ;	ecen4330lab7.c:875: rowloc = 3;
      000C1B 75*01 03         [24] 3350 	mov	_rowloc,#0x03
                                   3351 ;	ecen4330lab7.c:876: break;
      000C1E                       3352 00123$:
                                   3353 ;	ecen4330lab7.c:880: if(colloc == 0xE0)
      000C1E 74 E0            [12] 3354 	mov	a,#0xe0
      000C20 B5*00 15         [24] 3355 	cjne	a,_colloc,00131$
                                   3356 ;	ecen4330lab7.c:882: return(keypad[rowloc][0]);
      000C23 E5*01            [12] 3357 	mov	a,_rowloc
      000C25 75 F0 04         [24] 3358 	mov	b,#0x04
      000C28 A4               [48] 3359 	mul	ab
      000C29 24rFB            [12] 3360 	add	a,#_keypad
      000C2B F5 82            [12] 3361 	mov	dpl,a
      000C2D 74s04            [12] 3362 	mov	a,#(_keypad >> 8)
      000C2F 35 F0            [12] 3363 	addc	a,b
      000C31 F5 83            [12] 3364 	mov	dph,a
      000C33 E4               [12] 3365 	clr	a
      000C34 93               [24] 3366 	movc	a,@a+dptr
      000C35 F5 82            [12] 3367 	mov	dpl,a
      000C37 22               [24] 3368 	ret
      000C38                       3369 00131$:
                                   3370 ;	ecen4330lab7.c:884: else if(colloc == 0xD0)
      000C38 74 D0            [12] 3371 	mov	a,#0xd0
      000C3A B5*00 18         [24] 3372 	cjne	a,_colloc,00128$
                                   3373 ;	ecen4330lab7.c:886: return(keypad[rowloc][1]);
      000C3D E5*01            [12] 3374 	mov	a,_rowloc
      000C3F 75 F0 04         [24] 3375 	mov	b,#0x04
      000C42 A4               [48] 3376 	mul	ab
      000C43 24rFB            [12] 3377 	add	a,#_keypad
      000C45 FE               [12] 3378 	mov	r6,a
      000C46 74s04            [12] 3379 	mov	a,#(_keypad >> 8)
      000C48 35 F0            [12] 3380 	addc	a,b
      000C4A FF               [12] 3381 	mov	r7,a
      000C4B 8E 82            [24] 3382 	mov	dpl,r6
      000C4D 8F 83            [24] 3383 	mov	dph,r7
      000C4F A3               [24] 3384 	inc	dptr
      000C50 E4               [12] 3385 	clr	a
      000C51 93               [24] 3386 	movc	a,@a+dptr
      000C52 F5 82            [12] 3387 	mov	dpl,a
      000C54 22               [24] 3388 	ret
      000C55                       3389 00128$:
                                   3390 ;	ecen4330lab7.c:888: else if(colloc == 0xB0)
      000C55 74 B0            [12] 3391 	mov	a,#0xb0
      000C57 B5*00 19         [24] 3392 	cjne	a,_colloc,00125$
                                   3393 ;	ecen4330lab7.c:890: return(keypad[rowloc][2]);
      000C5A E5*01            [12] 3394 	mov	a,_rowloc
      000C5C 75 F0 04         [24] 3395 	mov	b,#0x04
      000C5F A4               [48] 3396 	mul	ab
      000C60 24rFB            [12] 3397 	add	a,#_keypad
      000C62 FE               [12] 3398 	mov	r6,a
      000C63 74s04            [12] 3399 	mov	a,#(_keypad >> 8)
      000C65 35 F0            [12] 3400 	addc	a,b
      000C67 FF               [12] 3401 	mov	r7,a
      000C68 8E 82            [24] 3402 	mov	dpl,r6
      000C6A 8F 83            [24] 3403 	mov	dph,r7
      000C6C A3               [24] 3404 	inc	dptr
      000C6D A3               [24] 3405 	inc	dptr
      000C6E E4               [12] 3406 	clr	a
      000C6F 93               [24] 3407 	movc	a,@a+dptr
      000C70 F5 82            [12] 3408 	mov	dpl,a
      000C72 22               [24] 3409 	ret
      000C73                       3410 00125$:
                                   3411 ;	ecen4330lab7.c:894: return(keypad[rowloc][3]);
      000C73 E5*01            [12] 3412 	mov	a,_rowloc
      000C75 75 F0 04         [24] 3413 	mov	b,#0x04
      000C78 A4               [48] 3414 	mul	ab
      000C79 24rFB            [12] 3415 	add	a,#_keypad
      000C7B FE               [12] 3416 	mov	r6,a
      000C7C 74s04            [12] 3417 	mov	a,#(_keypad >> 8)
      000C7E 35 F0            [12] 3418 	addc	a,b
      000C80 FF               [12] 3419 	mov	r7,a
      000C81 8E 82            [24] 3420 	mov	dpl,r6
      000C83 8F 83            [24] 3421 	mov	dph,r7
      000C85 A3               [24] 3422 	inc	dptr
      000C86 A3               [24] 3423 	inc	dptr
      000C87 A3               [24] 3424 	inc	dptr
      000C88 E4               [12] 3425 	clr	a
      000C89 93               [24] 3426 	movc	a,@a+dptr
      000C8A F5 82            [12] 3427 	mov	dpl,a
      000C8C 22               [24] 3428 	ret
      000C8D                       3429 00134$:
                                   3430 ;	ecen4330lab7.c:898: received_flag = 0;
      000C8D 75*43 00         [24] 3431 	mov	_received_flag,#0x00
                                   3432 ;	ecen4330lab7.c:899: return received_byte - 0x40;
      000C90 E5*42            [12] 3433 	mov	a,_received_byte
      000C92 24 C0            [12] 3434 	add	a,#0xc0
      000C94 F5 82            [12] 3435 	mov	dpl,a
                                   3436 ;	ecen4330lab7.c:901: }
      000C96 22               [24] 3437 	ret
                                   3438 ;------------------------------------------------------------
                                   3439 ;Allocation info for local variables in function 'ASCIItoHEX'
                                   3440 ;------------------------------------------------------------
                                   3441 ;a                         Allocated to registers r7 
                                   3442 ;h                         Allocated to registers r7 
                                   3443 ;------------------------------------------------------------
                                   3444 ;	ecen4330lab7.c:909: unsigned char ASCIItoHEX(unsigned char a){
                                   3445 ;	-----------------------------------------
                                   3446 ;	 function ASCIItoHEX
                                   3447 ;	-----------------------------------------
      000C97                       3448 _ASCIItoHEX:
      000C97 AF 82            [24] 3449 	mov	r7,dpl
                                   3450 ;	ecen4330lab7.c:912: switch (a)
      000C99 BF 30 00         [24] 3451 	cjne	r7,#0x30,00129$
      000C9C                       3452 00129$:
      000C9C 50 03            [24] 3453 	jnc	00130$
      000C9E 02r0Dr28         [24] 3454 	ljmp	00117$
      000CA1                       3455 00130$:
      000CA1 EF               [12] 3456 	mov	a,r7
      000CA2 24 B9            [12] 3457 	add	a,#0xff - 0x46
      000CA4 50 03            [24] 3458 	jnc	00131$
      000CA6 02r0Dr28         [24] 3459 	ljmp	00117$
      000CA9                       3460 00131$:
      000CA9 EF               [12] 3461 	mov	a,r7
      000CAA 24 D0            [12] 3462 	add	a,#0xd0
      000CAC FF               [12] 3463 	mov	r7,a
      000CAD 24 0A            [12] 3464 	add	a,#(00132$-3-.)
      000CAF 83               [24] 3465 	movc	a,@a+pc
      000CB0 F5 82            [12] 3466 	mov	dpl,a
      000CB2 EF               [12] 3467 	mov	a,r7
      000CB3 24 1B            [12] 3468 	add	a,#(00133$-3-.)
      000CB5 83               [24] 3469 	movc	a,@a+pc
      000CB6 F5 83            [12] 3470 	mov	dph,a
      000CB8 E4               [12] 3471 	clr	a
      000CB9 73               [24] 3472 	jmp	@a+dptr
      000CBA                       3473 00132$:
      000CBArE8                    3474 	.db	00101$
      000CBBrEC                    3475 	.db	00102$
      000CBCrF0                    3476 	.db	00103$
      000CBDrF4                    3477 	.db	00104$
      000CBErF8                    3478 	.db	00105$
      000CBFrFC                    3479 	.db	00106$
      000CC0r00                    3480 	.db	00107$
      000CC1r04                    3481 	.db	00108$
      000CC2r08                    3482 	.db	00109$
      000CC3r0C                    3483 	.db	00110$
      000CC4r28                    3484 	.db	00117$
      000CC5r28                    3485 	.db	00117$
      000CC6r28                    3486 	.db	00117$
      000CC7r28                    3487 	.db	00117$
      000CC8r28                    3488 	.db	00117$
      000CC9r28                    3489 	.db	00117$
      000CCAr28                    3490 	.db	00117$
      000CCBr10                    3491 	.db	00111$
      000CCCr14                    3492 	.db	00112$
      000CCDr18                    3493 	.db	00113$
      000CCEr1C                    3494 	.db	00114$
      000CCFr20                    3495 	.db	00115$
      000CD0r24                    3496 	.db	00116$
      000CD1                       3497 00133$:
      000CD1s0C                    3498 	.db	00101$>>8
      000CD2s0C                    3499 	.db	00102$>>8
      000CD3s0C                    3500 	.db	00103$>>8
      000CD4s0C                    3501 	.db	00104$>>8
      000CD5s0C                    3502 	.db	00105$>>8
      000CD6s0C                    3503 	.db	00106$>>8
      000CD7s0D                    3504 	.db	00107$>>8
      000CD8s0D                    3505 	.db	00108$>>8
      000CD9s0D                    3506 	.db	00109$>>8
      000CDAs0D                    3507 	.db	00110$>>8
      000CDBs0D                    3508 	.db	00117$>>8
      000CDCs0D                    3509 	.db	00117$>>8
      000CDDs0D                    3510 	.db	00117$>>8
      000CDEs0D                    3511 	.db	00117$>>8
      000CDFs0D                    3512 	.db	00117$>>8
      000CE0s0D                    3513 	.db	00117$>>8
      000CE1s0D                    3514 	.db	00117$>>8
      000CE2s0D                    3515 	.db	00111$>>8
      000CE3s0D                    3516 	.db	00112$>>8
      000CE4s0D                    3517 	.db	00113$>>8
      000CE5s0D                    3518 	.db	00114$>>8
      000CE6s0D                    3519 	.db	00115$>>8
      000CE7s0D                    3520 	.db	00116$>>8
                                   3521 ;	ecen4330lab7.c:914: case '0':
      000CE8                       3522 00101$:
                                   3523 ;	ecen4330lab7.c:915: h = 0x00;
      000CE8 7F 00            [12] 3524 	mov	r7,#0x00
                                   3525 ;	ecen4330lab7.c:916: break;
                                   3526 ;	ecen4330lab7.c:917: case '1':
      000CEA 80 3E            [24] 3527 	sjmp	00118$
      000CEC                       3528 00102$:
                                   3529 ;	ecen4330lab7.c:918: h = 0x01;
      000CEC 7F 01            [12] 3530 	mov	r7,#0x01
                                   3531 ;	ecen4330lab7.c:919: break;
                                   3532 ;	ecen4330lab7.c:920: case '2':
      000CEE 80 3A            [24] 3533 	sjmp	00118$
      000CF0                       3534 00103$:
                                   3535 ;	ecen4330lab7.c:921: h = 0x02;
      000CF0 7F 02            [12] 3536 	mov	r7,#0x02
                                   3537 ;	ecen4330lab7.c:922: break;
                                   3538 ;	ecen4330lab7.c:923: case '3':
      000CF2 80 36            [24] 3539 	sjmp	00118$
      000CF4                       3540 00104$:
                                   3541 ;	ecen4330lab7.c:924: h = 0x03;
      000CF4 7F 03            [12] 3542 	mov	r7,#0x03
                                   3543 ;	ecen4330lab7.c:925: break;
                                   3544 ;	ecen4330lab7.c:926: case '4':
      000CF6 80 32            [24] 3545 	sjmp	00118$
      000CF8                       3546 00105$:
                                   3547 ;	ecen4330lab7.c:927: h = 0x04;
      000CF8 7F 04            [12] 3548 	mov	r7,#0x04
                                   3549 ;	ecen4330lab7.c:928: break;
                                   3550 ;	ecen4330lab7.c:929: case '5':
      000CFA 80 2E            [24] 3551 	sjmp	00118$
      000CFC                       3552 00106$:
                                   3553 ;	ecen4330lab7.c:930: h = 0x05;
      000CFC 7F 05            [12] 3554 	mov	r7,#0x05
                                   3555 ;	ecen4330lab7.c:931: break;
                                   3556 ;	ecen4330lab7.c:932: case '6':
      000CFE 80 2A            [24] 3557 	sjmp	00118$
      000D00                       3558 00107$:
                                   3559 ;	ecen4330lab7.c:933: h = 0x06;
      000D00 7F 06            [12] 3560 	mov	r7,#0x06
                                   3561 ;	ecen4330lab7.c:934: break;
                                   3562 ;	ecen4330lab7.c:935: case '7':
      000D02 80 26            [24] 3563 	sjmp	00118$
      000D04                       3564 00108$:
                                   3565 ;	ecen4330lab7.c:936: h = 0x07;
      000D04 7F 07            [12] 3566 	mov	r7,#0x07
                                   3567 ;	ecen4330lab7.c:937: break;
                                   3568 ;	ecen4330lab7.c:938: case '8':
      000D06 80 22            [24] 3569 	sjmp	00118$
      000D08                       3570 00109$:
                                   3571 ;	ecen4330lab7.c:939: h = 0x08;
      000D08 7F 08            [12] 3572 	mov	r7,#0x08
                                   3573 ;	ecen4330lab7.c:940: break;
                                   3574 ;	ecen4330lab7.c:941: case '9':
      000D0A 80 1E            [24] 3575 	sjmp	00118$
      000D0C                       3576 00110$:
                                   3577 ;	ecen4330lab7.c:942: h = 0x09;
      000D0C 7F 09            [12] 3578 	mov	r7,#0x09
                                   3579 ;	ecen4330lab7.c:943: break;
                                   3580 ;	ecen4330lab7.c:944: case 'A':
      000D0E 80 1A            [24] 3581 	sjmp	00118$
      000D10                       3582 00111$:
                                   3583 ;	ecen4330lab7.c:945: h = 0x0A;
      000D10 7F 0A            [12] 3584 	mov	r7,#0x0a
                                   3585 ;	ecen4330lab7.c:946: break;
                                   3586 ;	ecen4330lab7.c:947: case 'B':
      000D12 80 16            [24] 3587 	sjmp	00118$
      000D14                       3588 00112$:
                                   3589 ;	ecen4330lab7.c:948: h = 0x0B;
      000D14 7F 0B            [12] 3590 	mov	r7,#0x0b
                                   3591 ;	ecen4330lab7.c:949: break;
                                   3592 ;	ecen4330lab7.c:950: case 'C':
      000D16 80 12            [24] 3593 	sjmp	00118$
      000D18                       3594 00113$:
                                   3595 ;	ecen4330lab7.c:951: h = 0x0C;
      000D18 7F 0C            [12] 3596 	mov	r7,#0x0c
                                   3597 ;	ecen4330lab7.c:952: break;
                                   3598 ;	ecen4330lab7.c:953: case 'D':
      000D1A 80 0E            [24] 3599 	sjmp	00118$
      000D1C                       3600 00114$:
                                   3601 ;	ecen4330lab7.c:954: h = 0x0D;
      000D1C 7F 0D            [12] 3602 	mov	r7,#0x0d
                                   3603 ;	ecen4330lab7.c:955: break;
                                   3604 ;	ecen4330lab7.c:956: case 'E':
      000D1E 80 0A            [24] 3605 	sjmp	00118$
      000D20                       3606 00115$:
                                   3607 ;	ecen4330lab7.c:957: h = 0x0E;
      000D20 7F 0E            [12] 3608 	mov	r7,#0x0e
                                   3609 ;	ecen4330lab7.c:958: break;
                                   3610 ;	ecen4330lab7.c:959: case 'F':
      000D22 80 06            [24] 3611 	sjmp	00118$
      000D24                       3612 00116$:
                                   3613 ;	ecen4330lab7.c:960: h = 0x0F;
      000D24 7F 0F            [12] 3614 	mov	r7,#0x0f
                                   3615 ;	ecen4330lab7.c:961: break;
                                   3616 ;	ecen4330lab7.c:962: default:
      000D26 80 02            [24] 3617 	sjmp	00118$
      000D28                       3618 00117$:
                                   3619 ;	ecen4330lab7.c:963: h = 0x00;
      000D28 7F 00            [12] 3620 	mov	r7,#0x00
                                   3621 ;	ecen4330lab7.c:965: }
      000D2A                       3622 00118$:
                                   3623 ;	ecen4330lab7.c:966: return h;
      000D2A 8F 82            [24] 3624 	mov	dpl,r7
                                   3625 ;	ecen4330lab7.c:967: }
      000D2C 22               [24] 3626 	ret
                                   3627 ;------------------------------------------------------------
                                   3628 ;Allocation info for local variables in function 'HEXtoASCII'
                                   3629 ;------------------------------------------------------------
                                   3630 ;h                         Allocated to registers r6 r7 
                                   3631 ;a                         Allocated to registers r7 
                                   3632 ;------------------------------------------------------------
                                   3633 ;	ecen4330lab7.c:974: unsigned char HEXtoASCII(unsigned int h){
                                   3634 ;	-----------------------------------------
                                   3635 ;	 function HEXtoASCII
                                   3636 ;	-----------------------------------------
      000D2D                       3637 _HEXtoASCII:
      000D2D AE 82            [24] 3638 	mov	r6,dpl
      000D2F AF 83            [24] 3639 	mov	r7,dph
                                   3640 ;	ecen4330lab7.c:977: switch (h)
      000D31 C3               [12] 3641 	clr	c
      000D32 74 0F            [12] 3642 	mov	a,#0x0f
      000D34 9E               [12] 3643 	subb	a,r6
      000D35 E4               [12] 3644 	clr	a
      000D36 9F               [12] 3645 	subb	a,r7
      000D37 50 03            [24] 3646 	jnc	00125$
      000D39 02r0DrAA         [24] 3647 	ljmp	00117$
      000D3C                       3648 00125$:
      000D3C EE               [12] 3649 	mov	a,r6
      000D3D 24 0A            [12] 3650 	add	a,#(00126$-3-.)
      000D3F 83               [24] 3651 	movc	a,@a+pc
      000D40 F5 82            [12] 3652 	mov	dpl,a
      000D42 EE               [12] 3653 	mov	a,r6
      000D43 24 14            [12] 3654 	add	a,#(00127$-3-.)
      000D45 83               [24] 3655 	movc	a,@a+pc
      000D46 F5 83            [12] 3656 	mov	dph,a
      000D48 E4               [12] 3657 	clr	a
      000D49 73               [24] 3658 	jmp	@a+dptr
      000D4A                       3659 00126$:
      000D4Ar6A                    3660 	.db	00101$
      000D4Br6E                    3661 	.db	00102$
      000D4Cr72                    3662 	.db	00103$
      000D4Dr76                    3663 	.db	00104$
      000D4Er7A                    3664 	.db	00105$
      000D4Fr7E                    3665 	.db	00106$
      000D50r82                    3666 	.db	00107$
      000D51r86                    3667 	.db	00108$
      000D52r8A                    3668 	.db	00109$
      000D53r8E                    3669 	.db	00110$
      000D54r92                    3670 	.db	00111$
      000D55r96                    3671 	.db	00112$
      000D56r9A                    3672 	.db	00113$
      000D57r9E                    3673 	.db	00114$
      000D58rA2                    3674 	.db	00115$
      000D59rA6                    3675 	.db	00116$
      000D5A                       3676 00127$:
      000D5As0D                    3677 	.db	00101$>>8
      000D5Bs0D                    3678 	.db	00102$>>8
      000D5Cs0D                    3679 	.db	00103$>>8
      000D5Ds0D                    3680 	.db	00104$>>8
      000D5Es0D                    3681 	.db	00105$>>8
      000D5Fs0D                    3682 	.db	00106$>>8
      000D60s0D                    3683 	.db	00107$>>8
      000D61s0D                    3684 	.db	00108$>>8
      000D62s0D                    3685 	.db	00109$>>8
      000D63s0D                    3686 	.db	00110$>>8
      000D64s0D                    3687 	.db	00111$>>8
      000D65s0D                    3688 	.db	00112$>>8
      000D66s0D                    3689 	.db	00113$>>8
      000D67s0D                    3690 	.db	00114$>>8
      000D68s0D                    3691 	.db	00115$>>8
      000D69s0D                    3692 	.db	00116$>>8
                                   3693 ;	ecen4330lab7.c:979: case 0x0000:
      000D6A                       3694 00101$:
                                   3695 ;	ecen4330lab7.c:980: a = '0';
      000D6A 7F 30            [12] 3696 	mov	r7,#0x30
                                   3697 ;	ecen4330lab7.c:981: break;
                                   3698 ;	ecen4330lab7.c:982: case 0x0001:
      000D6C 80 3E            [24] 3699 	sjmp	00118$
      000D6E                       3700 00102$:
                                   3701 ;	ecen4330lab7.c:983: a = '1';
      000D6E 7F 31            [12] 3702 	mov	r7,#0x31
                                   3703 ;	ecen4330lab7.c:984: break;
                                   3704 ;	ecen4330lab7.c:985: case 0x0002:
      000D70 80 3A            [24] 3705 	sjmp	00118$
      000D72                       3706 00103$:
                                   3707 ;	ecen4330lab7.c:986: a = '2';
      000D72 7F 32            [12] 3708 	mov	r7,#0x32
                                   3709 ;	ecen4330lab7.c:987: break;
                                   3710 ;	ecen4330lab7.c:988: case 0x0003:
      000D74 80 36            [24] 3711 	sjmp	00118$
      000D76                       3712 00104$:
                                   3713 ;	ecen4330lab7.c:989: a = '3';
      000D76 7F 33            [12] 3714 	mov	r7,#0x33
                                   3715 ;	ecen4330lab7.c:990: break;
                                   3716 ;	ecen4330lab7.c:991: case 0x0004:
      000D78 80 32            [24] 3717 	sjmp	00118$
      000D7A                       3718 00105$:
                                   3719 ;	ecen4330lab7.c:992: a = '4';
      000D7A 7F 34            [12] 3720 	mov	r7,#0x34
                                   3721 ;	ecen4330lab7.c:993: break;
                                   3722 ;	ecen4330lab7.c:994: case 0x0005:
      000D7C 80 2E            [24] 3723 	sjmp	00118$
      000D7E                       3724 00106$:
                                   3725 ;	ecen4330lab7.c:995: a = '5';
      000D7E 7F 35            [12] 3726 	mov	r7,#0x35
                                   3727 ;	ecen4330lab7.c:996: break;
                                   3728 ;	ecen4330lab7.c:997: case 0x0006:
      000D80 80 2A            [24] 3729 	sjmp	00118$
      000D82                       3730 00107$:
                                   3731 ;	ecen4330lab7.c:998: a = '6';
      000D82 7F 36            [12] 3732 	mov	r7,#0x36
                                   3733 ;	ecen4330lab7.c:999: break;
                                   3734 ;	ecen4330lab7.c:1000: case 0x0007:
      000D84 80 26            [24] 3735 	sjmp	00118$
      000D86                       3736 00108$:
                                   3737 ;	ecen4330lab7.c:1001: a = '7';
      000D86 7F 37            [12] 3738 	mov	r7,#0x37
                                   3739 ;	ecen4330lab7.c:1002: break;
                                   3740 ;	ecen4330lab7.c:1003: case 0x0008:
      000D88 80 22            [24] 3741 	sjmp	00118$
      000D8A                       3742 00109$:
                                   3743 ;	ecen4330lab7.c:1004: a = '8';
      000D8A 7F 38            [12] 3744 	mov	r7,#0x38
                                   3745 ;	ecen4330lab7.c:1005: break;
                                   3746 ;	ecen4330lab7.c:1006: case 0x0009:
      000D8C 80 1E            [24] 3747 	sjmp	00118$
      000D8E                       3748 00110$:
                                   3749 ;	ecen4330lab7.c:1007: a = '9';
      000D8E 7F 39            [12] 3750 	mov	r7,#0x39
                                   3751 ;	ecen4330lab7.c:1008: break;
                                   3752 ;	ecen4330lab7.c:1009: case 0x000A:
      000D90 80 1A            [24] 3753 	sjmp	00118$
      000D92                       3754 00111$:
                                   3755 ;	ecen4330lab7.c:1010: a = 'A';
      000D92 7F 41            [12] 3756 	mov	r7,#0x41
                                   3757 ;	ecen4330lab7.c:1011: break;
                                   3758 ;	ecen4330lab7.c:1012: case 0x000B:
      000D94 80 16            [24] 3759 	sjmp	00118$
      000D96                       3760 00112$:
                                   3761 ;	ecen4330lab7.c:1013: a = 'B';
      000D96 7F 42            [12] 3762 	mov	r7,#0x42
                                   3763 ;	ecen4330lab7.c:1014: break;
                                   3764 ;	ecen4330lab7.c:1015: case 0x000C:
      000D98 80 12            [24] 3765 	sjmp	00118$
      000D9A                       3766 00113$:
                                   3767 ;	ecen4330lab7.c:1016: a = 'C';
      000D9A 7F 43            [12] 3768 	mov	r7,#0x43
                                   3769 ;	ecen4330lab7.c:1017: break;
                                   3770 ;	ecen4330lab7.c:1018: case 0x000D:
      000D9C 80 0E            [24] 3771 	sjmp	00118$
      000D9E                       3772 00114$:
                                   3773 ;	ecen4330lab7.c:1019: a = 'D';
      000D9E 7F 44            [12] 3774 	mov	r7,#0x44
                                   3775 ;	ecen4330lab7.c:1020: break;
                                   3776 ;	ecen4330lab7.c:1021: case 0x000E:
      000DA0 80 0A            [24] 3777 	sjmp	00118$
      000DA2                       3778 00115$:
                                   3779 ;	ecen4330lab7.c:1022: a = 'E';
      000DA2 7F 45            [12] 3780 	mov	r7,#0x45
                                   3781 ;	ecen4330lab7.c:1023: break;
                                   3782 ;	ecen4330lab7.c:1024: case 0x000F:
      000DA4 80 06            [24] 3783 	sjmp	00118$
      000DA6                       3784 00116$:
                                   3785 ;	ecen4330lab7.c:1025: a = 'F';
      000DA6 7F 46            [12] 3786 	mov	r7,#0x46
                                   3787 ;	ecen4330lab7.c:1026: break;
                                   3788 ;	ecen4330lab7.c:1027: default:
      000DA8 80 02            [24] 3789 	sjmp	00118$
      000DAA                       3790 00117$:
                                   3791 ;	ecen4330lab7.c:1028: a = '0';
      000DAA 7F 30            [12] 3792 	mov	r7,#0x30
                                   3793 ;	ecen4330lab7.c:1030: }
      000DAC                       3794 00118$:
                                   3795 ;	ecen4330lab7.c:1031: return a;
      000DAC 8F 82            [24] 3796 	mov	dpl,r7
                                   3797 ;	ecen4330lab7.c:1032: }
      000DAE 22               [24] 3798 	ret
                                   3799 ;------------------------------------------------------------
                                   3800 ;Allocation info for local variables in function 'HEXtoASCII_8write'
                                   3801 ;------------------------------------------------------------
                                   3802 ;h                         Allocated to registers r7 
                                   3803 ;------------------------------------------------------------
                                   3804 ;	ecen4330lab7.c:1040: void HEXtoASCII_8write(unsigned char h){
                                   3805 ;	-----------------------------------------
                                   3806 ;	 function HEXtoASCII_8write
                                   3807 ;	-----------------------------------------
      000DAF                       3808 _HEXtoASCII_8write:
                                   3809 ;	ecen4330lab7.c:1043: byte = (h >> 4);
      000DAF E5 82            [12] 3810 	mov	a,dpl
      000DB1 FF               [12] 3811 	mov	r7,a
      000DB2 C4               [12] 3812 	swap	a
      000DB3 54 0F            [12] 3813 	anl	a,#0x0f
      000DB5 FE               [12] 3814 	mov	r6,a
      000DB6 8E*2D            [24] 3815 	mov	_byte,r6
      000DB8 75*2E 00         [24] 3816 	mov	(_byte + 1),#0x00
                                   3817 ;	ecen4330lab7.c:1044: byte &= 0x0F;
      000DBB 53*2D 0F         [24] 3818 	anl	_byte,#0x0f
      000DBE 75*2E 00         [24] 3819 	mov	(_byte + 1),#0x00
                                   3820 ;	ecen4330lab7.c:1045: ASCII = HEXtoASCII(byte);
      000DC1 85*2D 82         [24] 3821 	mov	dpl,_byte
      000DC4 85*2E 83         [24] 3822 	mov	dph,(_byte + 1)
      000DC7 C0 07            [24] 3823 	push	ar7
      000DC9 12r0Dr2D         [24] 3824 	lcall	_HEXtoASCII
                                   3825 ;	ecen4330lab7.c:1046: write(ASCII);
      000DCC 85 82*31         [24] 3826 	mov  _ASCII,dpl
      000DCF 12r0ArD9         [24] 3827 	lcall	_write
      000DD2 D0 07            [24] 3828 	pop	ar7
                                   3829 ;	ecen4330lab7.c:1049: byte = (h & 0x0F);
      000DD4 7E 00            [12] 3830 	mov	r6,#0x00
      000DD6 74 0F            [12] 3831 	mov	a,#0x0f
      000DD8 5F               [12] 3832 	anl	a,r7
      000DD9 F5*2D            [12] 3833 	mov	_byte,a
                                   3834 ;	1-genFromRTrack replaced	mov	(_byte + 1),#0x00
      000DDB 8E*2E            [24] 3835 	mov	(_byte + 1),r6
                                   3836 ;	ecen4330lab7.c:1050: ASCII = HEXtoASCII(byte);
      000DDD 85*2D 82         [24] 3837 	mov	dpl,_byte
      000DE0 85*2E 83         [24] 3838 	mov	dph,(_byte + 1)
      000DE3 12r0Dr2D         [24] 3839 	lcall	_HEXtoASCII
                                   3840 ;	ecen4330lab7.c:1051: write(ASCII);
      000DE6 85 82*31         [24] 3841 	mov  _ASCII,dpl
                                   3842 ;	ecen4330lab7.c:1052: }
      000DE9 02r0ArD9         [24] 3843 	ljmp	_write
                                   3844 ;------------------------------------------------------------
                                   3845 ;Allocation info for local variables in function 'HEXtoASCII_16write'
                                   3846 ;------------------------------------------------------------
                                   3847 ;h                         Allocated to registers r6 r7 
                                   3848 ;------------------------------------------------------------
                                   3849 ;	ecen4330lab7.c:1060: void HEXtoASCII_16write(unsigned int h){
                                   3850 ;	-----------------------------------------
                                   3851 ;	 function HEXtoASCII_16write
                                   3852 ;	-----------------------------------------
      000DEC                       3853 _HEXtoASCII_16write:
      000DEC AE 82            [24] 3854 	mov	r6,dpl
                                   3855 ;	ecen4330lab7.c:1063: byte = (h >> 12);
      000DEE E5 83            [12] 3856 	mov	a,dph
      000DF0 FF               [12] 3857 	mov	r7,a
      000DF1 C4               [12] 3858 	swap	a
      000DF2 54 0F            [12] 3859 	anl	a,#0x0f
      000DF4 F5*2D            [12] 3860 	mov	_byte,a
      000DF6 75*2E 00         [24] 3861 	mov	(_byte + 1),#0x00
                                   3862 ;	ecen4330lab7.c:1064: byte &= 0x000F;
      000DF9 53*2D 0F         [24] 3863 	anl	_byte,#0x0f
      000DFC 75*2E 00         [24] 3864 	mov	(_byte + 1),#0x00
                                   3865 ;	ecen4330lab7.c:1065: ASCII = HEXtoASCII(byte);
      000DFF 85*2D 82         [24] 3866 	mov	dpl,_byte
      000E02 85*2E 83         [24] 3867 	mov	dph,(_byte + 1)
      000E05 C0 07            [24] 3868 	push	ar7
      000E07 C0 06            [24] 3869 	push	ar6
      000E09 12r0Dr2D         [24] 3870 	lcall	_HEXtoASCII
      000E0C 85 82*31         [24] 3871 	mov	_ASCII,dpl
                                   3872 ;	ecen4330lab7.c:1066: LCD_string_write("0x");
      000E0F 90r05r35         [24] 3873 	mov	dptr,#___str_3
      000E12 75 F0 80         [24] 3874 	mov	b,#0x80
      000E15 12r0Br3F         [24] 3875 	lcall	_LCD_string_write
                                   3876 ;	ecen4330lab7.c:1067: write(ASCII);
      000E18 85*31 82         [24] 3877 	mov	dpl,_ASCII
      000E1B 12r0ArD9         [24] 3878 	lcall	_write
      000E1E D0 06            [24] 3879 	pop	ar6
      000E20 D0 07            [24] 3880 	pop	ar7
                                   3881 ;	ecen4330lab7.c:1070: byte = (h >> 8);
      000E22 8F*2D            [24] 3882 	mov	_byte,r7
      000E24 75*2E 00         [24] 3883 	mov	(_byte + 1),#0x00
                                   3884 ;	ecen4330lab7.c:1071: byte &= 0x000F;
      000E27 53*2D 0F         [24] 3885 	anl	_byte,#0x0f
      000E2A 75*2E 00         [24] 3886 	mov	(_byte + 1),#0x00
                                   3887 ;	ecen4330lab7.c:1072: ASCII = HEXtoASCII(byte);
      000E2D 85*2D 82         [24] 3888 	mov	dpl,_byte
      000E30 85*2E 83         [24] 3889 	mov	dph,(_byte + 1)
      000E33 C0 07            [24] 3890 	push	ar7
      000E35 C0 06            [24] 3891 	push	ar6
      000E37 12r0Dr2D         [24] 3892 	lcall	_HEXtoASCII
                                   3893 ;	ecen4330lab7.c:1073: write(ASCII);
      000E3A 85 82*31         [24] 3894 	mov  _ASCII,dpl
      000E3D 12r0ArD9         [24] 3895 	lcall	_write
      000E40 D0 06            [24] 3896 	pop	ar6
      000E42 D0 07            [24] 3897 	pop	ar7
                                   3898 ;	ecen4330lab7.c:1076: byte = (h >> 4);
      000E44 8E*2D            [24] 3899 	mov	_byte,r6
      000E46 EF               [12] 3900 	mov	a,r7
      000E47 C4               [12] 3901 	swap	a
      000E48 C5*2D            [12] 3902 	xch	a,_byte
      000E4A C4               [12] 3903 	swap	a
      000E4B 54 0F            [12] 3904 	anl	a,#0x0f
      000E4D 65*2D            [12] 3905 	xrl	a,_byte
      000E4F C5*2D            [12] 3906 	xch	a,_byte
      000E51 54 0F            [12] 3907 	anl	a,#0x0f
      000E53 C5*2D            [12] 3908 	xch	a,_byte
      000E55 65*2D            [12] 3909 	xrl	a,_byte
      000E57 C5*2D            [12] 3910 	xch	a,_byte
      000E59 F5*2E            [12] 3911 	mov	(_byte + 1),a
                                   3912 ;	ecen4330lab7.c:1077: byte &= 0x000F;
      000E5B 53*2D 0F         [24] 3913 	anl	_byte,#0x0f
      000E5E 75*2E 00         [24] 3914 	mov	(_byte + 1),#0x00
                                   3915 ;	ecen4330lab7.c:1078: ASCII = HEXtoASCII(byte);
      000E61 85*2D 82         [24] 3916 	mov	dpl,_byte
      000E64 85*2E 83         [24] 3917 	mov	dph,(_byte + 1)
      000E67 C0 07            [24] 3918 	push	ar7
      000E69 C0 06            [24] 3919 	push	ar6
      000E6B 12r0Dr2D         [24] 3920 	lcall	_HEXtoASCII
                                   3921 ;	ecen4330lab7.c:1079: write(ASCII);
      000E6E 85 82*31         [24] 3922 	mov  _ASCII,dpl
      000E71 12r0ArD9         [24] 3923 	lcall	_write
      000E74 D0 06            [24] 3924 	pop	ar6
      000E76 D0 07            [24] 3925 	pop	ar7
                                   3926 ;	ecen4330lab7.c:1082: byte = h;
      000E78 8E*2D            [24] 3927 	mov	_byte,r6
      000E7A 8F*2E            [24] 3928 	mov	(_byte + 1),r7
                                   3929 ;	ecen4330lab7.c:1083: byte &= 0x000F;
      000E7C 53*2D 0F         [24] 3930 	anl	_byte,#0x0f
      000E7F 75*2E 00         [24] 3931 	mov	(_byte + 1),#0x00
                                   3932 ;	ecen4330lab7.c:1084: ASCII = HEXtoASCII(byte);
      000E82 85*2D 82         [24] 3933 	mov	dpl,_byte
      000E85 85*2E 83         [24] 3934 	mov	dph,(_byte + 1)
      000E88 12r0Dr2D         [24] 3935 	lcall	_HEXtoASCII
                                   3936 ;	ecen4330lab7.c:1085: write(ASCII);
      000E8B 85 82*31         [24] 3937 	mov  _ASCII,dpl
                                   3938 ;	ecen4330lab7.c:1086: }
      000E8E 02r0ArD9         [24] 3939 	ljmp	_write
                                   3940 ;------------------------------------------------------------
                                   3941 ;Allocation info for local variables in function 'RAMwrite'
                                   3942 ;------------------------------------------------------------
                                   3943 ;d                         Allocated with name '_RAMwrite_PARM_2'
                                   3944 ;a                         Allocated to registers r6 r7 
                                   3945 ;ram_address               Allocated to registers 
                                   3946 ;------------------------------------------------------------
                                   3947 ;	ecen4330lab7.c:1094: void RAMwrite(unsigned int a, unsigned char d){
                                   3948 ;	-----------------------------------------
                                   3949 ;	 function RAMwrite
                                   3950 ;	-----------------------------------------
      000E91                       3951 _RAMwrite:
      000E91 AE 82            [24] 3952 	mov	r6,dpl
      000E93 AF 83            [24] 3953 	mov	r7,dph
                                   3954 ;	ecen4330lab7.c:1097: IOM = 0;
                                   3955 ;	assignBit
      000E95 C2 B4            [12] 3956 	clr	_P3_4
                                   3957 ;	ecen4330lab7.c:1100: ram_address = (unsigned char __xdata*)(a);
      000E97 8E 82            [24] 3958 	mov	dpl,r6
      000E99 8F 83            [24] 3959 	mov	dph,r7
                                   3960 ;	ecen4330lab7.c:1103: *ram_address = d;
      000E9B E5*00            [12] 3961 	mov	a,_RAMwrite_PARM_2
      000E9D F0               [24] 3962 	movx	@dptr,a
                                   3963 ;	ecen4330lab7.c:1104: IOM = 1;
                                   3964 ;	assignBit
      000E9E D2 B4            [12] 3965 	setb	_P3_4
                                   3966 ;	ecen4330lab7.c:1105: }
      000EA0 22               [24] 3967 	ret
                                   3968 ;------------------------------------------------------------
                                   3969 ;Allocation info for local variables in function 'testRAM'
                                   3970 ;------------------------------------------------------------
                                   3971 ;d                         Allocated to registers r7 
                                   3972 ;i                         Allocated to registers r5 r6 
                                   3973 ;ram_address               Allocated to registers 
                                   3974 ;------------------------------------------------------------
                                   3975 ;	ecen4330lab7.c:1108: void testRAM(unsigned char d){
                                   3976 ;	-----------------------------------------
                                   3977 ;	 function testRAM
                                   3978 ;	-----------------------------------------
      000EA1                       3979 _testRAM:
      000EA1 AF 82            [24] 3980 	mov	r7,dpl
                                   3981 ;	ecen4330lab7.c:1112: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000EA3 7D 00            [12] 3982 	mov	r5,#0x00
      000EA5 7E 00            [12] 3983 	mov	r6,#0x00
      000EA7                       3984 00102$:
                                   3985 ;	ecen4330lab7.c:1113: IOM = 0;
                                   3986 ;	assignBit
      000EA7 C2 B4            [12] 3987 	clr	_P3_4
                                   3988 ;	ecen4330lab7.c:1114: ram_address = (unsigned char __xdata*)(i);
      000EA9 8D 82            [24] 3989 	mov	dpl,r5
      000EAB 8E 83            [24] 3990 	mov	dph,r6
                                   3991 ;	ecen4330lab7.c:1115: *ram_address = d;
      000EAD EF               [12] 3992 	mov	a,r7
      000EAE F0               [24] 3993 	movx	@dptr,a
                                   3994 ;	ecen4330lab7.c:1116: IOM = 1;
                                   3995 ;	assignBit
      000EAF D2 B4            [12] 3996 	setb	_P3_4
                                   3997 ;	ecen4330lab7.c:1112: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000EB1 0D               [12] 3998 	inc	r5
      000EB2 BD 00 01         [24] 3999 	cjne	r5,#0x00,00111$
      000EB5 0E               [12] 4000 	inc	r6
      000EB6                       4001 00111$:
      000EB6 C3               [12] 4002 	clr	c
      000EB7 74 FE            [12] 4003 	mov	a,#0xfe
      000EB9 9D               [12] 4004 	subb	a,r5
      000EBA 74 FF            [12] 4005 	mov	a,#0xff
      000EBC 9E               [12] 4006 	subb	a,r6
      000EBD 50 E8            [24] 4007 	jnc	00102$
                                   4008 ;	ecen4330lab7.c:1119: }
      000EBF 22               [24] 4009 	ret
                                   4010 ;------------------------------------------------------------
                                   4011 ;Allocation info for local variables in function 'RAMread'
                                   4012 ;------------------------------------------------------------
                                   4013 ;a                         Allocated to registers r6 r7 
                                   4014 ;ram_address               Allocated to registers 
                                   4015 ;------------------------------------------------------------
                                   4016 ;	ecen4330lab7.c:1126: unsigned char RAMread(unsigned int a){
                                   4017 ;	-----------------------------------------
                                   4018 ;	 function RAMread
                                   4019 ;	-----------------------------------------
      000EC0                       4020 _RAMread:
      000EC0 AE 82            [24] 4021 	mov	r6,dpl
      000EC2 AF 83            [24] 4022 	mov	r7,dph
                                   4023 ;	ecen4330lab7.c:1129: IOM = 0;
                                   4024 ;	assignBit
      000EC4 C2 B4            [12] 4025 	clr	_P3_4
                                   4026 ;	ecen4330lab7.c:1132: ram_address = (unsigned char __xdata*)(a);
      000EC6 8E 82            [24] 4027 	mov	dpl,r6
      000EC8 8F 83            [24] 4028 	mov	dph,r7
                                   4029 ;	ecen4330lab7.c:1135: data = *ram_address;
      000ECA E0               [24] 4030 	movx	a,@dptr
      000ECB F5*20            [12] 4031 	mov	_data,a
                                   4032 ;	ecen4330lab7.c:1136: IOM = 1;
                                   4033 ;	assignBit
      000ECD D2 B4            [12] 4034 	setb	_P3_4
                                   4035 ;	ecen4330lab7.c:1137: return data;
      000ECF 85*20 82         [24] 4036 	mov	dpl,_data
                                   4037 ;	ecen4330lab7.c:1138: }
      000ED2 22               [24] 4038 	ret
                                   4039 ;------------------------------------------------------------
                                   4040 ;Allocation info for local variables in function 'resetLCD'
                                   4041 ;------------------------------------------------------------
                                   4042 ;	ecen4330lab7.c:1150: void resetLCD(){
                                   4043 ;	-----------------------------------------
                                   4044 ;	 function resetLCD
                                   4045 ;	-----------------------------------------
      000ED3                       4046 _resetLCD:
                                   4047 ;	ecen4330lab7.c:1151: setRotation(4);
      000ED3 75 82 04         [24] 4048 	mov	dpl,#0x04
      000ED6 12r04r75         [24] 4049 	lcall	_setRotation
                                   4050 ;	ecen4330lab7.c:1152: setTextColor(GRAY, BLACK);
      000ED9 E4               [12] 4051 	clr	a
      000EDA F5*00            [12] 4052 	mov	_setTextColor_PARM_2,a
      000EDC F5*01            [12] 4053 	mov	(_setTextColor_PARM_2 + 1),a
      000EDE 90 D6 BA         [24] 4054 	mov	dptr,#0xd6ba
      000EE1 12r04r50         [24] 4055 	lcall	_setTextColor
                                   4056 ;	ecen4330lab7.c:1153: setTextSize(3);
      000EE4 75 82 03         [24] 4057 	mov	dpl,#0x03
      000EE7 12r04r5D         [24] 4058 	lcall	_setTextSize
                                   4059 ;	ecen4330lab7.c:1154: fillScreen(BLACK);
      000EEA 90 00 00         [24] 4060 	mov	dptr,#0x0000
      000EED 12r07rE8         [24] 4061 	lcall	_fillScreen
                                   4062 ;	ecen4330lab7.c:1155: setCursor(0, 0);
      000EF0 E4               [12] 4063 	clr	a
      000EF1 F5*00            [12] 4064 	mov	_setCursor_PARM_2,a
      000EF3 F5*01            [12] 4065 	mov	(_setCursor_PARM_2 + 1),a
      000EF5 90 00 00         [24] 4066 	mov	dptr,#0x0000
                                   4067 ;	ecen4330lab7.c:1156: }
      000EF8 02r04r43         [24] 4068 	ljmp	_setCursor
                                   4069 ;------------------------------------------------------------
                                   4070 ;Allocation info for local variables in function 'invalidInput'
                                   4071 ;------------------------------------------------------------
                                   4072 ;	ecen4330lab7.c:1168: void invalidInput(){
                                   4073 ;	-----------------------------------------
                                   4074 ;	 function invalidInput
                                   4075 ;	-----------------------------------------
      000EFB                       4076 _invalidInput:
                                   4077 ;	ecen4330lab7.c:1169: resetLCD();
      000EFB 12r0ErD3         [24] 4078 	lcall	_resetLCD
                                   4079 ;	ecen4330lab7.c:1170: setTextColor(RED, BLACK);
      000EFE E4               [12] 4080 	clr	a
      000EFF F5*00            [12] 4081 	mov	_setTextColor_PARM_2,a
      000F01 F5*01            [12] 4082 	mov	(_setTextColor_PARM_2 + 1),a
      000F03 90 F8 00         [24] 4083 	mov	dptr,#0xf800
      000F06 12r04r50         [24] 4084 	lcall	_setTextColor
                                   4085 ;	ecen4330lab7.c:1173: LCD_string_write("\n   Invalid\n\n");
      000F09 90r05r38         [24] 4086 	mov	dptr,#___str_4
      000F0C 75 F0 80         [24] 4087 	mov	b,#0x80
      000F0F 12r0Br3F         [24] 4088 	lcall	_LCD_string_write
                                   4089 ;	ecen4330lab7.c:1174: LCD_string_write("    Input");
      000F12 90r05r46         [24] 4090 	mov	dptr,#___str_5
      000F15 75 F0 80         [24] 4091 	mov	b,#0x80
      000F18 12r0Br3F         [24] 4092 	lcall	_LCD_string_write
                                   4093 ;	ecen4330lab7.c:1177: delay(200);
      000F1B 90 00 C8         [24] 4094 	mov	dptr,#0x00c8
      000F1E 12r01r9F         [24] 4095 	lcall	_delay
                                   4096 ;	ecen4330lab7.c:1178: resetLCD();
                                   4097 ;	ecen4330lab7.c:1179: }
      000F21 02r0ErD3         [24] 4098 	ljmp	_resetLCD
                                   4099 ;------------------------------------------------------------
                                   4100 ;Allocation info for local variables in function 'inputRead16'
                                   4101 ;------------------------------------------------------------
                                   4102 ;	ecen4330lab7.c:1190: void inputRead16(){
                                   4103 ;	-----------------------------------------
                                   4104 ;	 function inputRead16
                                   4105 ;	-----------------------------------------
      000F24                       4106 _inputRead16:
                                   4107 ;	ecen4330lab7.c:1191: input16 = 0x0000;
      000F24 E4               [12] 4108 	clr	a
      000F25 F5*17            [12] 4109 	mov	_input16,a
      000F27 F5*18            [12] 4110 	mov	(_input16 + 1),a
                                   4111 ;	ecen4330lab7.c:1193: setTextColor(WHITE, BLACK);
      000F29 F5*00            [12] 4112 	mov	_setTextColor_PARM_2,a
      000F2B F5*01            [12] 4113 	mov	(_setTextColor_PARM_2 + 1),a
      000F2D 90 FF FF         [24] 4114 	mov	dptr,#0xffff
      000F30 12r04r50         [24] 4115 	lcall	_setTextColor
                                   4116 ;	ecen4330lab7.c:1196: key = keyDetect();
      000F33 12r0Br7E         [24] 4117 	lcall	_keyDetect
      000F36 85 82*16         [24] 4118 	mov	_key,dpl
                                   4119 ;	ecen4330lab7.c:1197: setTextColor(WHITE, BLACK);
      000F39 E4               [12] 4120 	clr	a
      000F3A F5*00            [12] 4121 	mov	_setTextColor_PARM_2,a
      000F3C F5*01            [12] 4122 	mov	(_setTextColor_PARM_2 + 1),a
      000F3E 90 FF FF         [24] 4123 	mov	dptr,#0xffff
      000F41 12r04r50         [24] 4124 	lcall	_setTextColor
                                   4125 ;	ecen4330lab7.c:1198: write(key);
      000F44 85*16 82         [24] 4126 	mov	dpl,_key
      000F47 12r0ArD9         [24] 4127 	lcall	_write
                                   4128 ;	ecen4330lab7.c:1199: input16 |= (ASCIItoHEX(key) << 12);
      000F4A 85*16 82         [24] 4129 	mov	dpl,_key
      000F4D 12r0Cr97         [24] 4130 	lcall	_ASCIItoHEX
      000F50 AF 82            [24] 4131 	mov	r7,dpl
      000F52 EF               [12] 4132 	mov	a,r7
      000F53 C4               [12] 4133 	swap	a
      000F54 54 F0            [12] 4134 	anl	a,#0xf0
      000F56 FE               [12] 4135 	mov	r6,a
      000F57 E4               [12] 4136 	clr	a
      000F58 42*17            [12] 4137 	orl	_input16,a
      000F5A EE               [12] 4138 	mov	a,r6
      000F5B 42*18            [12] 4139 	orl	(_input16 + 1),a
                                   4140 ;	ecen4330lab7.c:1201: key = keyDetect();
      000F5D 12r0Br7E         [24] 4141 	lcall	_keyDetect
      000F60 85 82*16         [24] 4142 	mov	_key,dpl
                                   4143 ;	ecen4330lab7.c:1202: setTextColor(WHITE, BLACK);
      000F63 E4               [12] 4144 	clr	a
      000F64 F5*00            [12] 4145 	mov	_setTextColor_PARM_2,a
      000F66 F5*01            [12] 4146 	mov	(_setTextColor_PARM_2 + 1),a
      000F68 90 FF FF         [24] 4147 	mov	dptr,#0xffff
      000F6B 12r04r50         [24] 4148 	lcall	_setTextColor
                                   4149 ;	ecen4330lab7.c:1203: write(key);
      000F6E 85*16 82         [24] 4150 	mov	dpl,_key
      000F71 12r0ArD9         [24] 4151 	lcall	_write
                                   4152 ;	ecen4330lab7.c:1204: input16 |= (ASCIItoHEX(key) << 8);
      000F74 85*16 82         [24] 4153 	mov	dpl,_key
      000F77 12r0Cr97         [24] 4154 	lcall	_ASCIItoHEX
      000F7A AF 82            [24] 4155 	mov	r7,dpl
      000F7C 8F 06            [24] 4156 	mov	ar6,r7
      000F7E E4               [12] 4157 	clr	a
      000F7F 42*17            [12] 4158 	orl	_input16,a
      000F81 EE               [12] 4159 	mov	a,r6
      000F82 42*18            [12] 4160 	orl	(_input16 + 1),a
                                   4161 ;	ecen4330lab7.c:1206: key = keyDetect();
      000F84 12r0Br7E         [24] 4162 	lcall	_keyDetect
      000F87 85 82*16         [24] 4163 	mov	_key,dpl
                                   4164 ;	ecen4330lab7.c:1207: setTextColor(WHITE, BLACK);
      000F8A E4               [12] 4165 	clr	a
      000F8B F5*00            [12] 4166 	mov	_setTextColor_PARM_2,a
      000F8D F5*01            [12] 4167 	mov	(_setTextColor_PARM_2 + 1),a
      000F8F 90 FF FF         [24] 4168 	mov	dptr,#0xffff
      000F92 12r04r50         [24] 4169 	lcall	_setTextColor
                                   4170 ;	ecen4330lab7.c:1208: write(key);
      000F95 85*16 82         [24] 4171 	mov	dpl,_key
      000F98 12r0ArD9         [24] 4172 	lcall	_write
                                   4173 ;	ecen4330lab7.c:1209: input16 |= (ASCIItoHEX(key) << 4);
      000F9B 85*16 82         [24] 4174 	mov	dpl,_key
      000F9E 12r0Cr97         [24] 4175 	lcall	_ASCIItoHEX
      000FA1 AF 82            [24] 4176 	mov	r7,dpl
      000FA3 E4               [12] 4177 	clr	a
      000FA4 C4               [12] 4178 	swap	a
      000FA5 54 F0            [12] 4179 	anl	a,#0xf0
      000FA7 CF               [12] 4180 	xch	a,r7
      000FA8 C4               [12] 4181 	swap	a
      000FA9 CF               [12] 4182 	xch	a,r7
      000FAA 6F               [12] 4183 	xrl	a,r7
      000FAB CF               [12] 4184 	xch	a,r7
      000FAC 54 F0            [12] 4185 	anl	a,#0xf0
      000FAE CF               [12] 4186 	xch	a,r7
      000FAF 6F               [12] 4187 	xrl	a,r7
      000FB0 FE               [12] 4188 	mov	r6,a
      000FB1 EF               [12] 4189 	mov	a,r7
      000FB2 42*17            [12] 4190 	orl	_input16,a
      000FB4 EE               [12] 4191 	mov	a,r6
      000FB5 42*18            [12] 4192 	orl	(_input16 + 1),a
                                   4193 ;	ecen4330lab7.c:1211: key = keyDetect();
      000FB7 12r0Br7E         [24] 4194 	lcall	_keyDetect
      000FBA 85 82*16         [24] 4195 	mov	_key,dpl
                                   4196 ;	ecen4330lab7.c:1212: setTextColor(WHITE, BLACK);
      000FBD E4               [12] 4197 	clr	a
      000FBE F5*00            [12] 4198 	mov	_setTextColor_PARM_2,a
      000FC0 F5*01            [12] 4199 	mov	(_setTextColor_PARM_2 + 1),a
      000FC2 90 FF FF         [24] 4200 	mov	dptr,#0xffff
      000FC5 12r04r50         [24] 4201 	lcall	_setTextColor
                                   4202 ;	ecen4330lab7.c:1213: write(key);
      000FC8 85*16 82         [24] 4203 	mov	dpl,_key
      000FCB 12r0ArD9         [24] 4204 	lcall	_write
                                   4205 ;	ecen4330lab7.c:1214: input16 |= ASCIItoHEX(key);
      000FCE 85*16 82         [24] 4206 	mov	dpl,_key
      000FD1 12r0Cr97         [24] 4207 	lcall	_ASCIItoHEX
      000FD4 AF 82            [24] 4208 	mov	r7,dpl
      000FD6 7E 00            [12] 4209 	mov	r6,#0x00
      000FD8 EF               [12] 4210 	mov	a,r7
      000FD9 42*17            [12] 4211 	orl	_input16,a
      000FDB EE               [12] 4212 	mov	a,r6
      000FDC 42*18            [12] 4213 	orl	(_input16 + 1),a
                                   4214 ;	ecen4330lab7.c:1215: }
      000FDE 22               [24] 4215 	ret
                                   4216 ;------------------------------------------------------------
                                   4217 ;Allocation info for local variables in function 'inputRead8'
                                   4218 ;------------------------------------------------------------
                                   4219 ;	ecen4330lab7.c:1225: void inputRead8(){
                                   4220 ;	-----------------------------------------
                                   4221 ;	 function inputRead8
                                   4222 ;	-----------------------------------------
      000FDF                       4223 _inputRead8:
                                   4224 ;	ecen4330lab7.c:1226: setTextColor(WHITE, BLACK);
      000FDF E4               [12] 4225 	clr	a
      000FE0 F5*00            [12] 4226 	mov	_setTextColor_PARM_2,a
      000FE2 F5*01            [12] 4227 	mov	(_setTextColor_PARM_2 + 1),a
      000FE4 90 FF FF         [24] 4228 	mov	dptr,#0xffff
      000FE7 12r04r50         [24] 4229 	lcall	_setTextColor
                                   4230 ;	ecen4330lab7.c:1228: input8 = 0x00;
      000FEA 75*19 00         [24] 4231 	mov	_input8,#0x00
                                   4232 ;	ecen4330lab7.c:1230: key = keyDetect();
      000FED 12r0Br7E         [24] 4233 	lcall	_keyDetect
      000FF0 85 82*16         [24] 4234 	mov	_key,dpl
                                   4235 ;	ecen4330lab7.c:1231: setTextColor(WHITE, BLACK);
      000FF3 E4               [12] 4236 	clr	a
      000FF4 F5*00            [12] 4237 	mov	_setTextColor_PARM_2,a
      000FF6 F5*01            [12] 4238 	mov	(_setTextColor_PARM_2 + 1),a
      000FF8 90 FF FF         [24] 4239 	mov	dptr,#0xffff
      000FFB 12r04r50         [24] 4240 	lcall	_setTextColor
                                   4241 ;	ecen4330lab7.c:1232: write(key);
      000FFE 85*16 82         [24] 4242 	mov	dpl,_key
      001001 12r0ArD9         [24] 4243 	lcall	_write
                                   4244 ;	ecen4330lab7.c:1233: input8 |= (ASCIItoHEX(key) << 4);
      001004 85*16 82         [24] 4245 	mov	dpl,_key
      001007 12r0Cr97         [24] 4246 	lcall	_ASCIItoHEX
      00100A E5 82            [12] 4247 	mov	a,dpl
      00100C C4               [12] 4248 	swap	a
      00100D 54 F0            [12] 4249 	anl	a,#0xf0
      00100F 42*19            [12] 4250 	orl	_input8,a
                                   4251 ;	ecen4330lab7.c:1235: key = keyDetect();
      001011 12r0Br7E         [24] 4252 	lcall	_keyDetect
      001014 85 82*16         [24] 4253 	mov	_key,dpl
                                   4254 ;	ecen4330lab7.c:1236: setTextColor(WHITE, BLACK);
      001017 E4               [12] 4255 	clr	a
      001018 F5*00            [12] 4256 	mov	_setTextColor_PARM_2,a
      00101A F5*01            [12] 4257 	mov	(_setTextColor_PARM_2 + 1),a
      00101C 90 FF FF         [24] 4258 	mov	dptr,#0xffff
      00101F 12r04r50         [24] 4259 	lcall	_setTextColor
                                   4260 ;	ecen4330lab7.c:1237: write(key);
      001022 85*16 82         [24] 4261 	mov	dpl,_key
      001025 12r0ArD9         [24] 4262 	lcall	_write
                                   4263 ;	ecen4330lab7.c:1238: input8 |= ASCIItoHEX(key);
      001028 85*16 82         [24] 4264 	mov	dpl,_key
      00102B 12r0Cr97         [24] 4265 	lcall	_ASCIItoHEX
      00102E E5 82            [12] 4266 	mov	a,dpl
      001030 42*19            [12] 4267 	orl	_input8,a
                                   4268 ;	ecen4330lab7.c:1239: }
      001032 22               [24] 4269 	ret
                                   4270 ;------------------------------------------------------------
                                   4271 ;Allocation info for local variables in function 'inputDataType'
                                   4272 ;------------------------------------------------------------
                                   4273 ;	ecen4330lab7.c:1258: void inputDataType(){
                                   4274 ;	-----------------------------------------
                                   4275 ;	 function inputDataType
                                   4276 ;	-----------------------------------------
      001033                       4277 _inputDataType:
                                   4278 ;	ecen4330lab7.c:1259: validInput = 0;
      001033 75*1D 00         [24] 4279 	mov	_validInput,#0x00
                                   4280 ;	ecen4330lab7.c:1260: dataType = 0;
      001036 75*1A 00         [24] 4281 	mov	_dataType,#0x00
                                   4282 ;	ecen4330lab7.c:1262: do
      001039                       4283 00106$:
                                   4284 ;	ecen4330lab7.c:1265: resetLCD();
      001039 12r0ErD3         [24] 4285 	lcall	_resetLCD
                                   4286 ;	ecen4330lab7.c:1266: setTextColor(WHITE, BLACK);
      00103C E4               [12] 4287 	clr	a
      00103D F5*00            [12] 4288 	mov	_setTextColor_PARM_2,a
      00103F F5*01            [12] 4289 	mov	(_setTextColor_PARM_2 + 1),a
      001041 90 FF FF         [24] 4290 	mov	dptr,#0xffff
      001044 12r04r50         [24] 4291 	lcall	_setTextColor
                                   4292 ;	ecen4330lab7.c:1267: LCD_string_write("\nSelect Data\nType:\n\n");
      001047 90r05r50         [24] 4293 	mov	dptr,#___str_6
      00104A 75 F0 80         [24] 4294 	mov	b,#0x80
      00104D 12r0Br3F         [24] 4295 	lcall	_LCD_string_write
                                   4296 ;	ecen4330lab7.c:1268: LCD_string_write("(1) Byte\n");
      001050 90r05r65         [24] 4297 	mov	dptr,#___str_7
      001053 75 F0 80         [24] 4298 	mov	b,#0x80
      001056 12r0Br3F         [24] 4299 	lcall	_LCD_string_write
                                   4300 ;	ecen4330lab7.c:1269: LCD_string_write("(2) Word\n");
      001059 90r05r6F         [24] 4301 	mov	dptr,#___str_8
      00105C 75 F0 80         [24] 4302 	mov	b,#0x80
      00105F 12r0Br3F         [24] 4303 	lcall	_LCD_string_write
                                   4304 ;	ecen4330lab7.c:1270: LCD_string_write("(3) Double\n    Word\n\n  _");
      001062 90r05r79         [24] 4305 	mov	dptr,#___str_9
      001065 75 F0 80         [24] 4306 	mov	b,#0x80
      001068 12r0Br3F         [24] 4307 	lcall	_LCD_string_write
                                   4308 ;	ecen4330lab7.c:1271: cursor_x -= textsize * 6;
      00106B 85*0C*00         [24] 4309 	mov	__mulint_PARM_2,_textsize
      00106E 75*01 00         [24] 4310 	mov	(__mulint_PARM_2 + 1),#0x00
      001071 90 00 06         [24] 4311 	mov	dptr,#0x0006
      001074 12r00r00         [24] 4312 	lcall	__mulint
      001077 AE 82            [24] 4313 	mov	r6,dpl
      001079 AF 83            [24] 4314 	mov	r7,dph
      00107B E5*08            [12] 4315 	mov	a,_cursor_x
      00107D C3               [12] 4316 	clr	c
      00107E 9E               [12] 4317 	subb	a,r6
      00107F F5*08            [12] 4318 	mov	_cursor_x,a
      001081 E5*09            [12] 4319 	mov	a,(_cursor_x + 1)
      001083 9F               [12] 4320 	subb	a,r7
      001084 F5*09            [12] 4321 	mov	(_cursor_x + 1),a
                                   4322 ;	ecen4330lab7.c:1272: x = cursor_x;
      001086 85*08*3B         [24] 4323 	mov	_x,_cursor_x
                                   4324 ;	ecen4330lab7.c:1273: y = cursor_y;
      001089 85*0A*3C         [24] 4325 	mov	_y,_cursor_y
                                   4326 ;	ecen4330lab7.c:1274: ts = textsize;
      00108C 85*0C*3D         [24] 4327 	mov	_ts,_textsize
                                   4328 ;	ecen4330lab7.c:1277: setTextColor(WHITE, BLACK);
      00108F E4               [12] 4329 	clr	a
      001090 F5*00            [12] 4330 	mov	_setTextColor_PARM_2,a
      001092 F5*01            [12] 4331 	mov	(_setTextColor_PARM_2 + 1),a
      001094 90 FF FF         [24] 4332 	mov	dptr,#0xffff
      001097 12r04r50         [24] 4333 	lcall	_setTextColor
                                   4334 ;	ecen4330lab7.c:1278: key = keyDetect();
      00109A 12r0Br7E         [24] 4335 	lcall	_keyDetect
      00109D 85 82*16         [24] 4336 	mov	_key,dpl
                                   4337 ;	ecen4330lab7.c:1279: cursor_x = x;
      0010A0 85*3B*08         [24] 4338 	mov	_cursor_x,_x
      0010A3 75*09 00         [24] 4339 	mov	(_cursor_x + 1),#0x00
                                   4340 ;	ecen4330lab7.c:1280: cursor_y = y;
      0010A6 85*3C*0A         [24] 4341 	mov	_cursor_y,_y
      0010A9 75*0B 00         [24] 4342 	mov	(_cursor_y + 1),#0x00
                                   4343 ;	ecen4330lab7.c:1281: textsize = ts;
      0010AC 85*3D*0C         [24] 4344 	mov	_textsize,_ts
                                   4345 ;	ecen4330lab7.c:1282: write(key);
      0010AF 85*16 82         [24] 4346 	mov	dpl,_key
      0010B2 12r0ArD9         [24] 4347 	lcall	_write
                                   4348 ;	ecen4330lab7.c:1284: switch (key)
      0010B5 74 31            [12] 4349 	mov	a,#0x31
      0010B7 B5*16 02         [24] 4350 	cjne	a,_key,00127$
      0010BA 80 0E            [24] 4351 	sjmp	00101$
      0010BC                       4352 00127$:
      0010BC 74 32            [12] 4353 	mov	a,#0x32
      0010BE B5*16 02         [24] 4354 	cjne	a,_key,00128$
      0010C1 80 0F            [24] 4355 	sjmp	00102$
      0010C3                       4356 00128$:
      0010C3 74 33            [12] 4357 	mov	a,#0x33
                                   4358 ;	ecen4330lab7.c:1287: case '1':
      0010C5 B5*16 1A         [24] 4359 	cjne	a,_key,00104$
      0010C8 80 10            [24] 4360 	sjmp	00103$
      0010CA                       4361 00101$:
                                   4362 ;	ecen4330lab7.c:1288: dataType = 1;
      0010CA 75*1A 01         [24] 4363 	mov	_dataType,#0x01
                                   4364 ;	ecen4330lab7.c:1289: validInput = 1;
      0010CD 75*1D 01         [24] 4365 	mov	_validInput,#0x01
                                   4366 ;	ecen4330lab7.c:1290: break;
                                   4367 ;	ecen4330lab7.c:1293: case '2':
      0010D0 80 16            [24] 4368 	sjmp	00107$
      0010D2                       4369 00102$:
                                   4370 ;	ecen4330lab7.c:1294: dataType = 2;
      0010D2 75*1A 02         [24] 4371 	mov	_dataType,#0x02
                                   4372 ;	ecen4330lab7.c:1295: validInput = 1;
      0010D5 75*1D 01         [24] 4373 	mov	_validInput,#0x01
                                   4374 ;	ecen4330lab7.c:1296: break;
                                   4375 ;	ecen4330lab7.c:1299: case '3':
      0010D8 80 0E            [24] 4376 	sjmp	00107$
      0010DA                       4377 00103$:
                                   4378 ;	ecen4330lab7.c:1300: dataType = 4;
      0010DA 75*1A 04         [24] 4379 	mov	_dataType,#0x04
                                   4380 ;	ecen4330lab7.c:1301: validInput = 1;
      0010DD 75*1D 01         [24] 4381 	mov	_validInput,#0x01
                                   4382 ;	ecen4330lab7.c:1302: break;
                                   4383 ;	ecen4330lab7.c:1305: default:
      0010E0 80 06            [24] 4384 	sjmp	00107$
      0010E2                       4385 00104$:
                                   4386 ;	ecen4330lab7.c:1306: invalidInput();
      0010E2 12r0ErFB         [24] 4387 	lcall	_invalidInput
                                   4388 ;	ecen4330lab7.c:1307: validInput = 0;
      0010E5 75*1D 00         [24] 4389 	mov	_validInput,#0x00
                                   4390 ;	ecen4330lab7.c:1309: }
      0010E8                       4391 00107$:
                                   4392 ;	ecen4330lab7.c:1310: } while (validInput == 0);
      0010E8 E5*1D            [12] 4393 	mov	a,_validInput
      0010EA 70 03            [24] 4394 	jnz	00130$
      0010EC 02r10r39         [24] 4395 	ljmp	00106$
      0010EF                       4396 00130$:
                                   4397 ;	ecen4330lab7.c:1311: }
      0010EF 22               [24] 4398 	ret
                                   4399 ;------------------------------------------------------------
                                   4400 ;Allocation info for local variables in function 'inputDataSize'
                                   4401 ;------------------------------------------------------------
                                   4402 ;	ecen4330lab7.c:1321: void inputDataSize(){
                                   4403 ;	-----------------------------------------
                                   4404 ;	 function inputDataSize
                                   4405 ;	-----------------------------------------
      0010F0                       4406 _inputDataSize:
                                   4407 ;	ecen4330lab7.c:1322: validInput = 0;
                                   4408 ;	ecen4330lab7.c:1323: dataSize = 0x0000;
      0010F0 E4               [12] 4409 	clr	a
      0010F1 F5*1D            [12] 4410 	mov	_validInput,a
      0010F3 F5*1B            [12] 4411 	mov	_dataSize,a
      0010F5 F5*1C            [12] 4412 	mov	(_dataSize + 1),a
                                   4413 ;	ecen4330lab7.c:1325: do
      0010F7                       4414 00104$:
                                   4415 ;	ecen4330lab7.c:1328: resetLCD();
      0010F7 12r0ErD3         [24] 4416 	lcall	_resetLCD
                                   4417 ;	ecen4330lab7.c:1329: LCD_string_write("\nEnter Data\nSize:\n\n  0x____");
      0010FA 90r05r92         [24] 4418 	mov	dptr,#___str_10
      0010FD 75 F0 80         [24] 4419 	mov	b,#0x80
      001100 12r0Br3F         [24] 4420 	lcall	_LCD_string_write
                                   4421 ;	ecen4330lab7.c:1330: cursor_x -= 4 * textsize * 6;
      001103 E5*0C            [12] 4422 	mov	a,_textsize
      001105 75 F0 18         [24] 4423 	mov	b,#0x18
      001108 A4               [48] 4424 	mul	ab
      001109 FE               [12] 4425 	mov	r6,a
      00110A AF F0            [24] 4426 	mov	r7,b
      00110C E5*08            [12] 4427 	mov	a,_cursor_x
      00110E C3               [12] 4428 	clr	c
      00110F 9E               [12] 4429 	subb	a,r6
      001110 F5*08            [12] 4430 	mov	_cursor_x,a
      001112 E5*09            [12] 4431 	mov	a,(_cursor_x + 1)
      001114 9F               [12] 4432 	subb	a,r7
      001115 F5*09            [12] 4433 	mov	(_cursor_x + 1),a
                                   4434 ;	ecen4330lab7.c:1331: x = cursor_x;
      001117 85*08*3B         [24] 4435 	mov	_x,_cursor_x
                                   4436 ;	ecen4330lab7.c:1332: y = cursor_y;
      00111A 85*0A*3C         [24] 4437 	mov	_y,_cursor_y
                                   4438 ;	ecen4330lab7.c:1333: ts = textsize;
      00111D 85*0C*3D         [24] 4439 	mov	_ts,_textsize
                                   4440 ;	ecen4330lab7.c:1335: input16 = 0x0000;
      001120 E4               [12] 4441 	clr	a
      001121 F5*17            [12] 4442 	mov	_input16,a
      001123 F5*18            [12] 4443 	mov	(_input16 + 1),a
                                   4444 ;	ecen4330lab7.c:1337: setTextColor(WHITE, BLACK);
      001125 F5*00            [12] 4445 	mov	_setTextColor_PARM_2,a
      001127 F5*01            [12] 4446 	mov	(_setTextColor_PARM_2 + 1),a
      001129 90 FF FF         [24] 4447 	mov	dptr,#0xffff
      00112C 12r04r50         [24] 4448 	lcall	_setTextColor
                                   4449 ;	ecen4330lab7.c:1340: key = keyDetect();
      00112F 12r0Br7E         [24] 4450 	lcall	_keyDetect
      001132 85 82*16         [24] 4451 	mov	_key,dpl
                                   4452 ;	ecen4330lab7.c:1341: cursor_x = x;
      001135 85*3B*08         [24] 4453 	mov	_cursor_x,_x
      001138 75*09 00         [24] 4454 	mov	(_cursor_x + 1),#0x00
                                   4455 ;	ecen4330lab7.c:1342: cursor_y = y;
      00113B 85*3C*0A         [24] 4456 	mov	_cursor_y,_y
      00113E 75*0B 00         [24] 4457 	mov	(_cursor_y + 1),#0x00
                                   4458 ;	ecen4330lab7.c:1343: textsize = ts;
      001141 85*3D*0C         [24] 4459 	mov	_textsize,_ts
                                   4460 ;	ecen4330lab7.c:1344: write(key);
      001144 85*16 82         [24] 4461 	mov	dpl,_key
      001147 12r0ArD9         [24] 4462 	lcall	_write
                                   4463 ;	ecen4330lab7.c:1345: x = cursor_x;
      00114A 85*08*3B         [24] 4464 	mov	_x,_cursor_x
                                   4465 ;	ecen4330lab7.c:1346: y = cursor_y;
      00114D 85*0A*3C         [24] 4466 	mov	_y,_cursor_y
                                   4467 ;	ecen4330lab7.c:1347: ts = textsize;
      001150 85*0C*3D         [24] 4468 	mov	_ts,_textsize
                                   4469 ;	ecen4330lab7.c:1348: input16 |= (ASCIItoHEX(key) << 12);
      001153 85*16 82         [24] 4470 	mov	dpl,_key
      001156 12r0Cr97         [24] 4471 	lcall	_ASCIItoHEX
      001159 AF 82            [24] 4472 	mov	r7,dpl
      00115B EF               [12] 4473 	mov	a,r7
      00115C C4               [12] 4474 	swap	a
      00115D 54 F0            [12] 4475 	anl	a,#0xf0
      00115F FE               [12] 4476 	mov	r6,a
      001160 E4               [12] 4477 	clr	a
      001161 42*17            [12] 4478 	orl	_input16,a
      001163 EE               [12] 4479 	mov	a,r6
      001164 42*18            [12] 4480 	orl	(_input16 + 1),a
                                   4481 ;	ecen4330lab7.c:1350: key = keyDetect();
      001166 12r0Br7E         [24] 4482 	lcall	_keyDetect
      001169 85 82*16         [24] 4483 	mov	_key,dpl
                                   4484 ;	ecen4330lab7.c:1351: cursor_x = x;
      00116C 85*3B*08         [24] 4485 	mov	_cursor_x,_x
      00116F 75*09 00         [24] 4486 	mov	(_cursor_x + 1),#0x00
                                   4487 ;	ecen4330lab7.c:1352: cursor_y = y;
      001172 85*3C*0A         [24] 4488 	mov	_cursor_y,_y
      001175 75*0B 00         [24] 4489 	mov	(_cursor_y + 1),#0x00
                                   4490 ;	ecen4330lab7.c:1353: textsize = ts;
      001178 85*3D*0C         [24] 4491 	mov	_textsize,_ts
                                   4492 ;	ecen4330lab7.c:1354: write(key);
      00117B 85*16 82         [24] 4493 	mov	dpl,_key
      00117E 12r0ArD9         [24] 4494 	lcall	_write
                                   4495 ;	ecen4330lab7.c:1355: x = cursor_x;
      001181 85*08*3B         [24] 4496 	mov	_x,_cursor_x
                                   4497 ;	ecen4330lab7.c:1356: y = cursor_y;
      001184 85*0A*3C         [24] 4498 	mov	_y,_cursor_y
                                   4499 ;	ecen4330lab7.c:1357: ts = textsize;
      001187 85*0C*3D         [24] 4500 	mov	_ts,_textsize
                                   4501 ;	ecen4330lab7.c:1358: input16 |= (ASCIItoHEX(key) << 8);
      00118A 85*16 82         [24] 4502 	mov	dpl,_key
      00118D 12r0Cr97         [24] 4503 	lcall	_ASCIItoHEX
      001190 AF 82            [24] 4504 	mov	r7,dpl
      001192 8F 06            [24] 4505 	mov	ar6,r7
      001194 E4               [12] 4506 	clr	a
      001195 42*17            [12] 4507 	orl	_input16,a
      001197 EE               [12] 4508 	mov	a,r6
      001198 42*18            [12] 4509 	orl	(_input16 + 1),a
                                   4510 ;	ecen4330lab7.c:1360: key = keyDetect();
      00119A 12r0Br7E         [24] 4511 	lcall	_keyDetect
      00119D 85 82*16         [24] 4512 	mov	_key,dpl
                                   4513 ;	ecen4330lab7.c:1361: cursor_x = x;
      0011A0 85*3B*08         [24] 4514 	mov	_cursor_x,_x
      0011A3 75*09 00         [24] 4515 	mov	(_cursor_x + 1),#0x00
                                   4516 ;	ecen4330lab7.c:1362: cursor_y = y;
      0011A6 85*3C*0A         [24] 4517 	mov	_cursor_y,_y
      0011A9 75*0B 00         [24] 4518 	mov	(_cursor_y + 1),#0x00
                                   4519 ;	ecen4330lab7.c:1363: textsize = ts;
      0011AC 85*3D*0C         [24] 4520 	mov	_textsize,_ts
                                   4521 ;	ecen4330lab7.c:1364: write(key);
      0011AF 85*16 82         [24] 4522 	mov	dpl,_key
      0011B2 12r0ArD9         [24] 4523 	lcall	_write
                                   4524 ;	ecen4330lab7.c:1365: x = cursor_x;
      0011B5 85*08*3B         [24] 4525 	mov	_x,_cursor_x
                                   4526 ;	ecen4330lab7.c:1366: y = cursor_y;
      0011B8 85*0A*3C         [24] 4527 	mov	_y,_cursor_y
                                   4528 ;	ecen4330lab7.c:1367: ts = textsize;
      0011BB 85*0C*3D         [24] 4529 	mov	_ts,_textsize
                                   4530 ;	ecen4330lab7.c:1368: input16 |= (ASCIItoHEX(key) << 4);
      0011BE 85*16 82         [24] 4531 	mov	dpl,_key
      0011C1 12r0Cr97         [24] 4532 	lcall	_ASCIItoHEX
      0011C4 AF 82            [24] 4533 	mov	r7,dpl
      0011C6 E4               [12] 4534 	clr	a
      0011C7 C4               [12] 4535 	swap	a
      0011C8 54 F0            [12] 4536 	anl	a,#0xf0
      0011CA CF               [12] 4537 	xch	a,r7
      0011CB C4               [12] 4538 	swap	a
      0011CC CF               [12] 4539 	xch	a,r7
      0011CD 6F               [12] 4540 	xrl	a,r7
      0011CE CF               [12] 4541 	xch	a,r7
      0011CF 54 F0            [12] 4542 	anl	a,#0xf0
      0011D1 CF               [12] 4543 	xch	a,r7
      0011D2 6F               [12] 4544 	xrl	a,r7
      0011D3 FE               [12] 4545 	mov	r6,a
      0011D4 EF               [12] 4546 	mov	a,r7
      0011D5 42*17            [12] 4547 	orl	_input16,a
      0011D7 EE               [12] 4548 	mov	a,r6
      0011D8 42*18            [12] 4549 	orl	(_input16 + 1),a
                                   4550 ;	ecen4330lab7.c:1370: key = keyDetect();
      0011DA 12r0Br7E         [24] 4551 	lcall	_keyDetect
      0011DD 85 82*16         [24] 4552 	mov	_key,dpl
                                   4553 ;	ecen4330lab7.c:1371: cursor_x = x;
      0011E0 85*3B*08         [24] 4554 	mov	_cursor_x,_x
      0011E3 75*09 00         [24] 4555 	mov	(_cursor_x + 1),#0x00
                                   4556 ;	ecen4330lab7.c:1372: cursor_y = y;
      0011E6 85*3C*0A         [24] 4557 	mov	_cursor_y,_y
      0011E9 75*0B 00         [24] 4558 	mov	(_cursor_y + 1),#0x00
                                   4559 ;	ecen4330lab7.c:1373: textsize = ts;
      0011EC 85*3D*0C         [24] 4560 	mov	_textsize,_ts
                                   4561 ;	ecen4330lab7.c:1374: write(key);
      0011EF 85*16 82         [24] 4562 	mov	dpl,_key
      0011F2 12r0ArD9         [24] 4563 	lcall	_write
                                   4564 ;	ecen4330lab7.c:1375: x = cursor_x;
      0011F5 85*08*3B         [24] 4565 	mov	_x,_cursor_x
                                   4566 ;	ecen4330lab7.c:1376: y = cursor_y;
      0011F8 85*0A*3C         [24] 4567 	mov	_y,_cursor_y
                                   4568 ;	ecen4330lab7.c:1377: ts = textsize;
      0011FB 85*0C*3D         [24] 4569 	mov	_ts,_textsize
                                   4570 ;	ecen4330lab7.c:1378: input16 |= ASCIItoHEX(key);
      0011FE 85*16 82         [24] 4571 	mov	dpl,_key
      001201 12r0Cr97         [24] 4572 	lcall	_ASCIItoHEX
      001204 AF 82            [24] 4573 	mov	r7,dpl
      001206 7E 00            [12] 4574 	mov	r6,#0x00
      001208 EF               [12] 4575 	mov	a,r7
      001209 42*17            [12] 4576 	orl	_input16,a
      00120B EE               [12] 4577 	mov	a,r6
      00120C 42*18            [12] 4578 	orl	(_input16 + 1),a
                                   4579 ;	ecen4330lab7.c:1379: dataSize = input16;
      00120E 85*17*1B         [24] 4580 	mov	_dataSize,_input16
      001211 85*18*1C         [24] 4581 	mov	(_dataSize + 1),(_input16 + 1)
                                   4582 ;	ecen4330lab7.c:1382: if(dataSize == 0x0000){
      001214 E5*1B            [12] 4583 	mov	a,_dataSize
      001216 45*1C            [12] 4584 	orl	a,(_dataSize + 1)
      001218 70 09            [24] 4585 	jnz	00102$
                                   4586 ;	ecen4330lab7.c:1383: invalidInput();
      00121A 12r0ErFB         [24] 4587 	lcall	_invalidInput
                                   4588 ;	ecen4330lab7.c:1384: validInput = 0;
      00121D 75*1D 00         [24] 4589 	mov	_validInput,#0x00
      001220 02r10rF7         [24] 4590 	ljmp	00104$
      001223                       4591 00102$:
                                   4592 ;	ecen4330lab7.c:1387: validInput = 1;
      001223 75*1D 01         [24] 4593 	mov	_validInput,#0x01
                                   4594 ;	ecen4330lab7.c:1389: } while (validInput == 0);
                                   4595 ;	ecen4330lab7.c:1390: }
      001226 22               [24] 4596 	ret
                                   4597 ;------------------------------------------------------------
                                   4598 ;Allocation info for local variables in function 'RAM_CHECK'
                                   4599 ;------------------------------------------------------------
                                   4600 ;i                         Allocated to registers r6 r7 
                                   4601 ;------------------------------------------------------------
                                   4602 ;	ecen4330lab7.c:1401: void RAM_CHECK(){
                                   4603 ;	-----------------------------------------
                                   4604 ;	 function RAM_CHECK
                                   4605 ;	-----------------------------------------
      001227                       4606 _RAM_CHECK:
                                   4607 ;	ecen4330lab7.c:1403: data = 0;
      001227 75*20 00         [24] 4608 	mov	_data,#0x00
                                   4609 ;	ecen4330lab7.c:1404: dataEnd = 0;
      00122A 75*1E 00         [24] 4610 	mov	_dataEnd,#0x00
                                   4611 ;	ecen4330lab7.c:1407: resetLCD();
      00122D 12r0ErD3         [24] 4612 	lcall	_resetLCD
                                   4613 ;	ecen4330lab7.c:1408: LCD_string_write("\nWriting 0x55\nto all\nexternal RAM\nlocations.\n\n");
      001230 90r05rAE         [24] 4614 	mov	dptr,#___str_11
      001233 75 F0 80         [24] 4615 	mov	b,#0x80
      001236 12r0Br3F         [24] 4616 	lcall	_LCD_string_write
                                   4617 ;	ecen4330lab7.c:1409: testRAM(RAMcheckVal1);
      001239 75 82 55         [24] 4618 	mov	dpl,#0x55
      00123C 12r0ErA1         [24] 4619 	lcall	_testRAM
                                   4620 ;	ecen4330lab7.c:1410: RAMwrite(0xFFFF, RAMcheckVal1);
      00123F 75*00 55         [24] 4621 	mov	_RAMwrite_PARM_2,#0x55
      001242 90 FF FF         [24] 4622 	mov	dptr,#0xffff
      001245 12r0Er91         [24] 4623 	lcall	_RAMwrite
                                   4624 ;	ecen4330lab7.c:1412: setTextColor(GREEN, BLACK);
      001248 E4               [12] 4625 	clr	a
      001249 F5*00            [12] 4626 	mov	_setTextColor_PARM_2,a
      00124B F5*01            [12] 4627 	mov	(_setTextColor_PARM_2 + 1),a
      00124D 90 07 E0         [24] 4628 	mov	dptr,#0x07e0
      001250 12r04r50         [24] 4629 	lcall	_setTextColor
                                   4630 ;	ecen4330lab7.c:1413: LCD_string_write("Write\ncomplete.\n");
      001253 90r05rDD         [24] 4631 	mov	dptr,#___str_12
      001256 75 F0 80         [24] 4632 	mov	b,#0x80
      001259 12r0Br3F         [24] 4633 	lcall	_LCD_string_write
                                   4634 ;	ecen4330lab7.c:1414: delay(200);
      00125C 90 00 C8         [24] 4635 	mov	dptr,#0x00c8
      00125F 12r01r9F         [24] 4636 	lcall	_delay
                                   4637 ;	ecen4330lab7.c:1417: resetLCD();
      001262 12r0ErD3         [24] 4638 	lcall	_resetLCD
                                   4639 ;	ecen4330lab7.c:1418: LCD_string_write("\nVerifying all\nRAM locations\nequal 0x55.\n\n");
      001265 90r05rEE         [24] 4640 	mov	dptr,#___str_13
      001268 75 F0 80         [24] 4641 	mov	b,#0x80
      00126B 12r0Br3F         [24] 4642 	lcall	_LCD_string_write
                                   4643 ;	ecen4330lab7.c:1420: do
      00126E 7E 00            [12] 4644 	mov	r6,#0x00
      001270 7F 00            [12] 4645 	mov	r7,#0x00
      001272                       4646 00102$:
                                   4647 ;	ecen4330lab7.c:1422: data = RAMread(i);
      001272 8E 82            [24] 4648 	mov	dpl,r6
      001274 8F 83            [24] 4649 	mov	dph,r7
      001276 C0 07            [24] 4650 	push	ar7
      001278 C0 06            [24] 4651 	push	ar6
      00127A 12r0ErC0         [24] 4652 	lcall	_RAMread
      00127D 85 82*20         [24] 4653 	mov	_data,dpl
      001280 D0 06            [24] 4654 	pop	ar6
      001282 D0 07            [24] 4655 	pop	ar7
                                   4656 ;	ecen4330lab7.c:1423: i++;
      001284 0E               [12] 4657 	inc	r6
      001285 BE 00 01         [24] 4658 	cjne	r6,#0x00,00163$
      001288 0F               [12] 4659 	inc	r7
      001289                       4660 00163$:
                                   4661 ;	ecen4330lab7.c:1424: } while (data == RAMcheckVal1 && i <= __END_RAM__);
      001289 74 55            [12] 4662 	mov	a,#0x55
      00128B B5*20 04         [24] 4663 	cjne	a,_data,00164$
      00128E 74 01            [12] 4664 	mov	a,#0x01
      001290 80 01            [24] 4665 	sjmp	00165$
      001292                       4666 00164$:
      001292 E4               [12] 4667 	clr	a
      001293                       4668 00165$:
      001293 FD               [12] 4669 	mov	r5,a
      001294 60 09            [24] 4670 	jz	00129$
      001296 C3               [12] 4671 	clr	c
      001297 74 FE            [12] 4672 	mov	a,#0xfe
      001299 9E               [12] 4673 	subb	a,r6
      00129A 74 FF            [12] 4674 	mov	a,#0xff
      00129C 9F               [12] 4675 	subb	a,r7
      00129D 50 D3            [24] 4676 	jnc	00102$
      00129F                       4677 00129$:
                                   4678 ;	ecen4330lab7.c:1425: if(data == RAMcheckVal1){
      00129F ED               [12] 4679 	mov	a,r5
      0012A0 60 11            [24] 4680 	jz	00106$
                                   4681 ;	ecen4330lab7.c:1426: data = RAMread(0xFFFF);
      0012A2 90 FF FF         [24] 4682 	mov	dptr,#0xffff
      0012A5 C0 07            [24] 4683 	push	ar7
      0012A7 C0 06            [24] 4684 	push	ar6
      0012A9 12r0ErC0         [24] 4685 	lcall	_RAMread
      0012AC 85 82*20         [24] 4686 	mov	_data,dpl
      0012AF D0 06            [24] 4687 	pop	ar6
      0012B1 D0 07            [24] 4688 	pop	ar7
      0012B3                       4689 00106$:
                                   4690 ;	ecen4330lab7.c:1430: if(data != RAMcheckVal1){
      0012B3 74 55            [12] 4691 	mov	a,#0x55
      0012B5 B5*20 02         [24] 4692 	cjne	a,_data,00169$
      0012B8 80 61            [24] 4693 	sjmp	00117$
      0012BA                       4694 00169$:
                                   4695 ;	ecen4330lab7.c:1431: setTextColor(RED, BLACK);
      0012BA E4               [12] 4696 	clr	a
      0012BB F5*00            [12] 4697 	mov	_setTextColor_PARM_2,a
      0012BD F5*01            [12] 4698 	mov	(_setTextColor_PARM_2 + 1),a
      0012BF 90 F8 00         [24] 4699 	mov	dptr,#0xf800
      0012C2 C0 07            [24] 4700 	push	ar7
      0012C4 C0 06            [24] 4701 	push	ar6
      0012C6 12r04r50         [24] 4702 	lcall	_setTextColor
                                   4703 ;	ecen4330lab7.c:1432: LCD_string_write("1st RAM check\nunsuccessful.\n\n");
      0012C9 90r06r19         [24] 4704 	mov	dptr,#___str_14
      0012CC 75 F0 80         [24] 4705 	mov	b,#0x80
      0012CF 12r0Br3F         [24] 4706 	lcall	_LCD_string_write
                                   4707 ;	ecen4330lab7.c:1433: delay(100);
      0012D2 90 00 64         [24] 4708 	mov	dptr,#0x0064
      0012D5 12r01r9F         [24] 4709 	lcall	_delay
                                   4710 ;	ecen4330lab7.c:1435: LCD_string_write("Error at:\n");
      0012D8 90r06r37         [24] 4711 	mov	dptr,#___str_15
      0012DB 75 F0 80         [24] 4712 	mov	b,#0x80
      0012DE 12r0Br3F         [24] 4713 	lcall	_LCD_string_write
      0012E1 D0 06            [24] 4714 	pop	ar6
      0012E3 D0 07            [24] 4715 	pop	ar7
                                   4716 ;	ecen4330lab7.c:1436: HEXtoASCII_16write(i - 1);
      0012E5 EE               [12] 4717 	mov	a,r6
      0012E6 24 FF            [12] 4718 	add	a,#0xff
      0012E8 F5 82            [12] 4719 	mov	dpl,a
      0012EA EF               [12] 4720 	mov	a,r7
      0012EB 34 FF            [12] 4721 	addc	a,#0xff
      0012ED F5 83            [12] 4722 	mov	dph,a
      0012EF 12r0DrEC         [24] 4723 	lcall	_HEXtoASCII_16write
                                   4724 ;	ecen4330lab7.c:1437: LCD_string_write(": 0x");
      0012F2 90r06r42         [24] 4725 	mov	dptr,#___str_16
      0012F5 75 F0 80         [24] 4726 	mov	b,#0x80
      0012F8 12r0Br3F         [24] 4727 	lcall	_LCD_string_write
                                   4728 ;	ecen4330lab7.c:1438: HEXtoASCII_8write(data);
      0012FB 85*20 82         [24] 4729 	mov	dpl,_data
      0012FE 12r0DrAF         [24] 4730 	lcall	_HEXtoASCII_8write
                                   4731 ;	ecen4330lab7.c:1440: setTextColor(WHITE, BLACK);
      001301 E4               [12] 4732 	clr	a
      001302 F5*00            [12] 4733 	mov	_setTextColor_PARM_2,a
      001304 F5*01            [12] 4734 	mov	(_setTextColor_PARM_2 + 1),a
      001306 90 FF FF         [24] 4735 	mov	dptr,#0xffff
      001309 12r04r50         [24] 4736 	lcall	_setTextColor
                                   4737 ;	ecen4330lab7.c:1441: LCD_string_write("Returning to\nmain menu.");
      00130C 90r06r47         [24] 4738 	mov	dptr,#___str_17
      00130F 75 F0 80         [24] 4739 	mov	b,#0x80
      001312 12r0Br3F         [24] 4740 	lcall	_LCD_string_write
                                   4741 ;	ecen4330lab7.c:1442: delay(200);
      001315 90 00 C8         [24] 4742 	mov	dptr,#0x00c8
      001318 02r01r9F         [24] 4743 	ljmp	_delay
      00131B                       4744 00117$:
                                   4745 ;	ecen4330lab7.c:1447: setTextColor(GREEN, BLACK);
      00131B E4               [12] 4746 	clr	a
      00131C F5*00            [12] 4747 	mov	_setTextColor_PARM_2,a
      00131E F5*01            [12] 4748 	mov	(_setTextColor_PARM_2 + 1),a
      001320 90 07 E0         [24] 4749 	mov	dptr,#0x07e0
      001323 12r04r50         [24] 4750 	lcall	_setTextColor
                                   4751 ;	ecen4330lab7.c:1448: LCD_string_write("1st RAM check\nsuccessful.\n\n");
      001326 90r06r5F         [24] 4752 	mov	dptr,#___str_18
      001329 75 F0 80         [24] 4753 	mov	b,#0x80
      00132C 12r0Br3F         [24] 4754 	lcall	_LCD_string_write
                                   4755 ;	ecen4330lab7.c:1449: delay(200);
      00132F 90 00 C8         [24] 4756 	mov	dptr,#0x00c8
      001332 12r01r9F         [24] 4757 	lcall	_delay
                                   4758 ;	ecen4330lab7.c:1451: resetLCD();
      001335 12r0ErD3         [24] 4759 	lcall	_resetLCD
                                   4760 ;	ecen4330lab7.c:1452: LCD_string_write("\nWriting 0xAA\nto all\nexternal RAM\nlocations.\n\n");
      001338 90r06r7B         [24] 4761 	mov	dptr,#___str_19
      00133B 75 F0 80         [24] 4762 	mov	b,#0x80
      00133E 12r0Br3F         [24] 4763 	lcall	_LCD_string_write
                                   4764 ;	ecen4330lab7.c:1453: testRAM(RAMcheckVal2);
      001341 75 82 AA         [24] 4765 	mov	dpl,#0xaa
      001344 12r0ErA1         [24] 4766 	lcall	_testRAM
                                   4767 ;	ecen4330lab7.c:1454: RAMwrite(0xFFFF, RAMcheckVal2);
      001347 75*00 AA         [24] 4768 	mov	_RAMwrite_PARM_2,#0xaa
      00134A 90 FF FF         [24] 4769 	mov	dptr,#0xffff
      00134D 12r0Er91         [24] 4770 	lcall	_RAMwrite
                                   4771 ;	ecen4330lab7.c:1455: setTextColor(GREEN, BLACK);
      001350 E4               [12] 4772 	clr	a
      001351 F5*00            [12] 4773 	mov	_setTextColor_PARM_2,a
      001353 F5*01            [12] 4774 	mov	(_setTextColor_PARM_2 + 1),a
      001355 90 07 E0         [24] 4775 	mov	dptr,#0x07e0
      001358 12r04r50         [24] 4776 	lcall	_setTextColor
                                   4777 ;	ecen4330lab7.c:1456: LCD_string_write("Write\ncomplete.\n");
      00135B 90r05rDD         [24] 4778 	mov	dptr,#___str_12
      00135E 75 F0 80         [24] 4779 	mov	b,#0x80
      001361 12r0Br3F         [24] 4780 	lcall	_LCD_string_write
                                   4781 ;	ecen4330lab7.c:1457: delay(200);
      001364 90 00 C8         [24] 4782 	mov	dptr,#0x00c8
      001367 12r01r9F         [24] 4783 	lcall	_delay
                                   4784 ;	ecen4330lab7.c:1460: resetLCD();
      00136A 12r0ErD3         [24] 4785 	lcall	_resetLCD
                                   4786 ;	ecen4330lab7.c:1461: LCD_string_write("\nVerifying all\nRAM locations\nequal 0xAA.\n\n");
      00136D 90r06rAA         [24] 4787 	mov	dptr,#___str_20
      001370 75 F0 80         [24] 4788 	mov	b,#0x80
      001373 12r0Br3F         [24] 4789 	lcall	_LCD_string_write
                                   4790 ;	ecen4330lab7.c:1463: do
      001376 7E 00            [12] 4791 	mov	r6,#0x00
      001378 7F 00            [12] 4792 	mov	r7,#0x00
      00137A                       4793 00108$:
                                   4794 ;	ecen4330lab7.c:1465: data = RAMread(i);
      00137A 8E 82            [24] 4795 	mov	dpl,r6
      00137C 8F 83            [24] 4796 	mov	dph,r7
      00137E C0 07            [24] 4797 	push	ar7
      001380 C0 06            [24] 4798 	push	ar6
      001382 12r0ErC0         [24] 4799 	lcall	_RAMread
      001385 85 82*20         [24] 4800 	mov	_data,dpl
      001388 D0 06            [24] 4801 	pop	ar6
      00138A D0 07            [24] 4802 	pop	ar7
                                   4803 ;	ecen4330lab7.c:1466: i++;
      00138C 0E               [12] 4804 	inc	r6
      00138D BE 00 01         [24] 4805 	cjne	r6,#0x00,00170$
      001390 0F               [12] 4806 	inc	r7
      001391                       4807 00170$:
                                   4808 ;	ecen4330lab7.c:1467: } while (data == RAMcheckVal2 && i <= __END_RAM__);
      001391 74 AA            [12] 4809 	mov	a,#0xaa
      001393 B5*20 04         [24] 4810 	cjne	a,_data,00171$
      001396 74 01            [12] 4811 	mov	a,#0x01
      001398 80 01            [24] 4812 	sjmp	00172$
      00139A                       4813 00171$:
      00139A E4               [12] 4814 	clr	a
      00139B                       4815 00172$:
      00139B FD               [12] 4816 	mov	r5,a
      00139C 60 09            [24] 4817 	jz	00130$
      00139E C3               [12] 4818 	clr	c
      00139F 74 FE            [12] 4819 	mov	a,#0xfe
      0013A1 9E               [12] 4820 	subb	a,r6
      0013A2 74 FF            [12] 4821 	mov	a,#0xff
      0013A4 9F               [12] 4822 	subb	a,r7
      0013A5 50 D3            [24] 4823 	jnc	00108$
      0013A7                       4824 00130$:
                                   4825 ;	ecen4330lab7.c:1468: if(data == RAMcheckVal2){
      0013A7 ED               [12] 4826 	mov	a,r5
      0013A8 60 11            [24] 4827 	jz	00112$
                                   4828 ;	ecen4330lab7.c:1469: data = RAMread(0xFFFF);
      0013AA 90 FF FF         [24] 4829 	mov	dptr,#0xffff
      0013AD C0 07            [24] 4830 	push	ar7
      0013AF C0 06            [24] 4831 	push	ar6
      0013B1 12r0ErC0         [24] 4832 	lcall	_RAMread
      0013B4 85 82*20         [24] 4833 	mov	_data,dpl
      0013B7 D0 06            [24] 4834 	pop	ar6
      0013B9 D0 07            [24] 4835 	pop	ar7
      0013BB                       4836 00112$:
                                   4837 ;	ecen4330lab7.c:1472: if(data != RAMcheckVal2){
      0013BB 74 AA            [12] 4838 	mov	a,#0xaa
      0013BD B5*20 02         [24] 4839 	cjne	a,_data,00176$
      0013C0 80 61            [24] 4840 	sjmp	00114$
      0013C2                       4841 00176$:
                                   4842 ;	ecen4330lab7.c:1473: setTextColor(RED, BLACK);
      0013C2 E4               [12] 4843 	clr	a
      0013C3 F5*00            [12] 4844 	mov	_setTextColor_PARM_2,a
      0013C5 F5*01            [12] 4845 	mov	(_setTextColor_PARM_2 + 1),a
      0013C7 90 F8 00         [24] 4846 	mov	dptr,#0xf800
      0013CA C0 07            [24] 4847 	push	ar7
      0013CC C0 06            [24] 4848 	push	ar6
      0013CE 12r04r50         [24] 4849 	lcall	_setTextColor
                                   4850 ;	ecen4330lab7.c:1474: LCD_string_write("2nd RAM check\nunsuccessful.\n\n");
      0013D1 90r06rD5         [24] 4851 	mov	dptr,#___str_21
      0013D4 75 F0 80         [24] 4852 	mov	b,#0x80
      0013D7 12r0Br3F         [24] 4853 	lcall	_LCD_string_write
                                   4854 ;	ecen4330lab7.c:1475: delay(100);
      0013DA 90 00 64         [24] 4855 	mov	dptr,#0x0064
      0013DD 12r01r9F         [24] 4856 	lcall	_delay
                                   4857 ;	ecen4330lab7.c:1477: LCD_string_write("Error at:\n");
      0013E0 90r06r37         [24] 4858 	mov	dptr,#___str_15
      0013E3 75 F0 80         [24] 4859 	mov	b,#0x80
      0013E6 12r0Br3F         [24] 4860 	lcall	_LCD_string_write
      0013E9 D0 06            [24] 4861 	pop	ar6
      0013EB D0 07            [24] 4862 	pop	ar7
                                   4863 ;	ecen4330lab7.c:1478: HEXtoASCII_16write(i - 1);
      0013ED EE               [12] 4864 	mov	a,r6
      0013EE 24 FF            [12] 4865 	add	a,#0xff
      0013F0 F5 82            [12] 4866 	mov	dpl,a
      0013F2 EF               [12] 4867 	mov	a,r7
      0013F3 34 FF            [12] 4868 	addc	a,#0xff
      0013F5 F5 83            [12] 4869 	mov	dph,a
      0013F7 12r0DrEC         [24] 4870 	lcall	_HEXtoASCII_16write
                                   4871 ;	ecen4330lab7.c:1479: LCD_string_write(": 0x");
      0013FA 90r06r42         [24] 4872 	mov	dptr,#___str_16
      0013FD 75 F0 80         [24] 4873 	mov	b,#0x80
      001400 12r0Br3F         [24] 4874 	lcall	_LCD_string_write
                                   4875 ;	ecen4330lab7.c:1480: HEXtoASCII_8write(data);
      001403 85*20 82         [24] 4876 	mov	dpl,_data
      001406 12r0DrAF         [24] 4877 	lcall	_HEXtoASCII_8write
                                   4878 ;	ecen4330lab7.c:1482: setTextColor(WHITE, BLACK);
      001409 E4               [12] 4879 	clr	a
      00140A F5*00            [12] 4880 	mov	_setTextColor_PARM_2,a
      00140C F5*01            [12] 4881 	mov	(_setTextColor_PARM_2 + 1),a
      00140E 90 FF FF         [24] 4882 	mov	dptr,#0xffff
      001411 12r04r50         [24] 4883 	lcall	_setTextColor
                                   4884 ;	ecen4330lab7.c:1483: LCD_string_write("Returning to\nmain menu.");
      001414 90r06r47         [24] 4885 	mov	dptr,#___str_17
      001417 75 F0 80         [24] 4886 	mov	b,#0x80
      00141A 12r0Br3F         [24] 4887 	lcall	_LCD_string_write
                                   4888 ;	ecen4330lab7.c:1484: delay(100);
      00141D 90 00 64         [24] 4889 	mov	dptr,#0x0064
      001420 02r01r9F         [24] 4890 	ljmp	_delay
      001423                       4891 00114$:
                                   4892 ;	ecen4330lab7.c:1489: setTextColor(GREEN, BLACK);
      001423 E4               [12] 4893 	clr	a
      001424 F5*00            [12] 4894 	mov	_setTextColor_PARM_2,a
      001426 F5*01            [12] 4895 	mov	(_setTextColor_PARM_2 + 1),a
      001428 90 07 E0         [24] 4896 	mov	dptr,#0x07e0
      00142B 12r04r50         [24] 4897 	lcall	_setTextColor
                                   4898 ;	ecen4330lab7.c:1490: LCD_string_write("2nd RAM check\nsuccessful.\n\n");
      00142E 90r06rF3         [24] 4899 	mov	dptr,#___str_22
      001431 75 F0 80         [24] 4900 	mov	b,#0x80
      001434 12r0Br3F         [24] 4901 	lcall	_LCD_string_write
                                   4902 ;	ecen4330lab7.c:1491: LCD_string_write("RAM check\ncomplete.\n\n");
      001437 90r07r0F         [24] 4903 	mov	dptr,#___str_23
      00143A 75 F0 80         [24] 4904 	mov	b,#0x80
      00143D 12r0Br3F         [24] 4905 	lcall	_LCD_string_write
                                   4906 ;	ecen4330lab7.c:1492: delay(100);
      001440 90 00 64         [24] 4907 	mov	dptr,#0x0064
      001443 12r01r9F         [24] 4908 	lcall	_delay
                                   4909 ;	ecen4330lab7.c:1493: setTextColor(WHITE, BLACK);
      001446 E4               [12] 4910 	clr	a
      001447 F5*00            [12] 4911 	mov	_setTextColor_PARM_2,a
      001449 F5*01            [12] 4912 	mov	(_setTextColor_PARM_2 + 1),a
      00144B 90 FF FF         [24] 4913 	mov	dptr,#0xffff
      00144E 12r04r50         [24] 4914 	lcall	_setTextColor
                                   4915 ;	ecen4330lab7.c:1494: LCD_string_write("Returning to\nmain menu.");
      001451 90r06r47         [24] 4916 	mov	dptr,#___str_17
      001454 75 F0 80         [24] 4917 	mov	b,#0x80
      001457 12r0Br3F         [24] 4918 	lcall	_LCD_string_write
                                   4919 ;	ecen4330lab7.c:1495: delay(100);
      00145A 90 00 64         [24] 4920 	mov	dptr,#0x0064
                                   4921 ;	ecen4330lab7.c:1498: }
      00145D 02r01r9F         [24] 4922 	ljmp	_delay
                                   4923 ;------------------------------------------------------------
                                   4924 ;Allocation info for local variables in function 'MOVE'
                                   4925 ;------------------------------------------------------------
                                   4926 ;	ecen4330lab7.c:1521: void MOVE(){
                                   4927 ;	-----------------------------------------
                                   4928 ;	 function MOVE
                                   4929 ;	-----------------------------------------
      001460                       4930 _MOVE:
                                   4931 ;	ecen4330lab7.c:1522: endAddrCalc = 0;
      001460 E4               [12] 4932 	clr	a
      001461 F5*34            [12] 4933 	mov	_endAddrCalc,a
      001463 F5*35            [12] 4934 	mov	(_endAddrCalc + 1),a
      001465 F5*36            [12] 4935 	mov	(_endAddrCalc + 2),a
      001467 F5*37            [12] 4936 	mov	(_endAddrCalc + 3),a
                                   4937 ;	ecen4330lab7.c:1523: addr0 = 0;                  // Source Address
      001469 F5*21            [12] 4938 	mov	_addr0,a
      00146B F5*22            [12] 4939 	mov	(_addr0 + 1),a
                                   4940 ;	ecen4330lab7.c:1524: addr1 = 0;                  // Source End Address
      00146D F5*23            [12] 4941 	mov	_addr1,a
      00146F F5*24            [12] 4942 	mov	(_addr1 + 1),a
                                   4943 ;	ecen4330lab7.c:1525: addr2 = 0;                  // Destination Address
      001471 F5*25            [12] 4944 	mov	_addr2,a
      001473 F5*26            [12] 4945 	mov	(_addr2 + 1),a
                                   4946 ;	ecen4330lab7.c:1526: addr3 = 0;                  // Destination End Address
      001475 F5*27            [12] 4947 	mov	_addr3,a
      001477 F5*28            [12] 4948 	mov	(_addr3 + 1),a
                                   4949 ;	ecen4330lab7.c:1527: currAddr0 = 0;              // Current Source Address
      001479 F5*29            [12] 4950 	mov	_currAddr0,a
      00147B F5*2A            [12] 4951 	mov	(_currAddr0 + 1),a
                                   4952 ;	ecen4330lab7.c:1528: currAddr1 = 0;              // Current Destination Address
      00147D F5*2B            [12] 4953 	mov	_currAddr1,a
      00147F F5*2C            [12] 4954 	mov	(_currAddr1 + 1),a
                                   4955 ;	ecen4330lab7.c:1531: resetLCD();
      001481 12r0ErD3         [24] 4956 	lcall	_resetLCD
                                   4957 ;	ecen4330lab7.c:1532: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n\n  0x____");
      001484 90r07r25         [24] 4958 	mov	dptr,#___str_24
      001487 75 F0 80         [24] 4959 	mov	b,#0x80
      00148A 12r0Br3F         [24] 4960 	lcall	_LCD_string_write
                                   4961 ;	ecen4330lab7.c:1533: cursor_x -= 4 * textsize * 6;
      00148D E5*0C            [12] 4962 	mov	a,_textsize
      00148F 75 F0 18         [24] 4963 	mov	b,#0x18
      001492 A4               [48] 4964 	mul	ab
      001493 FE               [12] 4965 	mov	r6,a
      001494 AF F0            [24] 4966 	mov	r7,b
      001496 E5*08            [12] 4967 	mov	a,_cursor_x
      001498 C3               [12] 4968 	clr	c
      001499 9E               [12] 4969 	subb	a,r6
      00149A F5*08            [12] 4970 	mov	_cursor_x,a
      00149C E5*09            [12] 4971 	mov	a,(_cursor_x + 1)
      00149E 9F               [12] 4972 	subb	a,r7
      00149F F5*09            [12] 4973 	mov	(_cursor_x + 1),a
                                   4974 ;	ecen4330lab7.c:1534: inputRead16();
      0014A1 12r0Fr24         [24] 4975 	lcall	_inputRead16
                                   4976 ;	ecen4330lab7.c:1535: addr0 = input16;
      0014A4 85*17*21         [24] 4977 	mov	_addr0,_input16
      0014A7 85*18*22         [24] 4978 	mov	(_addr0 + 1),(_input16 + 1)
                                   4979 ;	ecen4330lab7.c:1538: resetLCD();
      0014AA 12r0ErD3         [24] 4980 	lcall	_resetLCD
                                   4981 ;	ecen4330lab7.c:1539: LCD_string_write("\nEnter\ndestination\nstarting RAM\naddress:\n\n\n  0x____");
      0014AD 90r07r54         [24] 4982 	mov	dptr,#___str_25
      0014B0 75 F0 80         [24] 4983 	mov	b,#0x80
      0014B3 12r0Br3F         [24] 4984 	lcall	_LCD_string_write
                                   4985 ;	ecen4330lab7.c:1540: cursor_x -= 4 * textsize * 6;
      0014B6 E5*0C            [12] 4986 	mov	a,_textsize
      0014B8 75 F0 18         [24] 4987 	mov	b,#0x18
      0014BB A4               [48] 4988 	mul	ab
      0014BC FE               [12] 4989 	mov	r6,a
      0014BD AF F0            [24] 4990 	mov	r7,b
      0014BF E5*08            [12] 4991 	mov	a,_cursor_x
      0014C1 C3               [12] 4992 	clr	c
      0014C2 9E               [12] 4993 	subb	a,r6
      0014C3 F5*08            [12] 4994 	mov	_cursor_x,a
      0014C5 E5*09            [12] 4995 	mov	a,(_cursor_x + 1)
      0014C7 9F               [12] 4996 	subb	a,r7
      0014C8 F5*09            [12] 4997 	mov	(_cursor_x + 1),a
                                   4998 ;	ecen4330lab7.c:1541: inputRead16();
      0014CA 12r0Fr24         [24] 4999 	lcall	_inputRead16
                                   5000 ;	ecen4330lab7.c:1542: addr2 = input16;
      0014CD 85*17*25         [24] 5001 	mov	_addr2,_input16
      0014D0 85*18*26         [24] 5002 	mov	(_addr2 + 1),(_input16 + 1)
                                   5003 ;	ecen4330lab7.c:1545: inputDataType();
      0014D3 12r10r33         [24] 5004 	lcall	_inputDataType
                                   5005 ;	ecen4330lab7.c:1548: resetLCD();
      0014D6 12r0ErD3         [24] 5006 	lcall	_resetLCD
                                   5007 ;	ecen4330lab7.c:1549: inputDataSize();
      0014D9 12r10rF0         [24] 5008 	lcall	_inputDataSize
                                   5009 ;	ecen4330lab7.c:1552: if(addr2 > addr0){
      0014DC C3               [12] 5010 	clr	c
      0014DD E5*21            [12] 5011 	mov	a,_addr0
      0014DF 95*25            [12] 5012 	subb	a,_addr2
      0014E1 E5*22            [12] 5013 	mov	a,(_addr0 + 1)
      0014E3 95*26            [12] 5014 	subb	a,(_addr2 + 1)
      0014E5 50 63            [24] 5015 	jnc	00108$
                                   5016 ;	ecen4330lab7.c:1553: endAddrCalc = addr2 + (dataSize * dataType);
      0014E7 85*1A*00         [24] 5017 	mov	__mulint_PARM_2,_dataType
      0014EA 75*01 00         [24] 5018 	mov	(__mulint_PARM_2 + 1),#0x00
      0014ED 85*1B 82         [24] 5019 	mov	dpl,_dataSize
      0014F0 85*1C 83         [24] 5020 	mov	dph,(_dataSize + 1)
      0014F3 12r00r00         [24] 5021 	lcall	__mulint
      0014F6 AE 82            [24] 5022 	mov	r6,dpl
      0014F8 AF 83            [24] 5023 	mov	r7,dph
      0014FA EE               [12] 5024 	mov	a,r6
      0014FB 25*25            [12] 5025 	add	a,_addr2
      0014FD FC               [12] 5026 	mov	r4,a
      0014FE EF               [12] 5027 	mov	a,r7
      0014FF 35*26            [12] 5028 	addc	a,(_addr2 + 1)
      001501 FD               [12] 5029 	mov	r5,a
      001502 8C*34            [24] 5030 	mov	_endAddrCalc,r4
      001504 8D*35            [24] 5031 	mov	(_endAddrCalc + 1),r5
      001506 75*36 00         [24] 5032 	mov	(_endAddrCalc + 2),#0x00
      001509 75*37 00         [24] 5033 	mov	(_endAddrCalc + 3),#0x00
                                   5034 ;	ecen4330lab7.c:1554: if(endAddrCalc > 0xFFFF){
      00150C C3               [12] 5035 	clr	c
      00150D 74 FF            [12] 5036 	mov	a,#0xff
      00150F 95*34            [12] 5037 	subb	a,_endAddrCalc
      001511 74 FF            [12] 5038 	mov	a,#0xff
      001513 95*35            [12] 5039 	subb	a,(_endAddrCalc + 1)
      001515 E4               [12] 5040 	clr	a
      001516 95*36            [12] 5041 	subb	a,(_endAddrCalc + 2)
      001518 E4               [12] 5042 	clr	a
      001519 95*37            [12] 5043 	subb	a,(_endAddrCalc + 3)
      00151B 50 08            [24] 5044 	jnc	00102$
                                   5045 ;	ecen4330lab7.c:1555: addr3 = 0xFFFF;
      00151D 75*27 FF         [24] 5046 	mov	_addr3,#0xff
      001520 75*28 FF         [24] 5047 	mov	(_addr3 + 1),#0xff
      001523 80 0A            [24] 5048 	sjmp	00103$
      001525                       5049 00102$:
                                   5050 ;	ecen4330lab7.c:1558: addr3 = addr2 + (dataSize * dataType);
      001525 EE               [12] 5051 	mov	a,r6
      001526 25*25            [12] 5052 	add	a,_addr2
      001528 F5*27            [12] 5053 	mov	_addr3,a
      00152A EF               [12] 5054 	mov	a,r7
      00152B 35*26            [12] 5055 	addc	a,(_addr2 + 1)
      00152D F5*28            [12] 5056 	mov	(_addr3 + 1),a
      00152F                       5057 00103$:
                                   5058 ;	ecen4330lab7.c:1560: dataSize = addr3 - addr2;
      00152F E5*27            [12] 5059 	mov	a,_addr3
      001531 C3               [12] 5060 	clr	c
      001532 95*25            [12] 5061 	subb	a,_addr2
      001534 F5*1B            [12] 5062 	mov	_dataSize,a
      001536 E5*28            [12] 5063 	mov	a,(_addr3 + 1)
      001538 95*26            [12] 5064 	subb	a,(_addr2 + 1)
      00153A F5*1C            [12] 5065 	mov	(_dataSize + 1),a
                                   5066 ;	ecen4330lab7.c:1561: addr1 = addr0 + dataSize;
      00153C E5*1B            [12] 5067 	mov	a,_dataSize
      00153E 25*21            [12] 5068 	add	a,_addr0
      001540 F5*23            [12] 5069 	mov	_addr1,a
      001542 E5*1C            [12] 5070 	mov	a,(_dataSize + 1)
      001544 35*22            [12] 5071 	addc	a,(_addr0 + 1)
      001546 F5*24            [12] 5072 	mov	(_addr1 + 1),a
      001548 80 61            [24] 5073 	sjmp	00109$
      00154A                       5074 00108$:
                                   5075 ;	ecen4330lab7.c:1564: endAddrCalc = addr0 + (dataSize * dataType);
      00154A 85*1A*00         [24] 5076 	mov	__mulint_PARM_2,_dataType
      00154D 75*01 00         [24] 5077 	mov	(__mulint_PARM_2 + 1),#0x00
      001550 85*1B 82         [24] 5078 	mov	dpl,_dataSize
      001553 85*1C 83         [24] 5079 	mov	dph,(_dataSize + 1)
      001556 12r00r00         [24] 5080 	lcall	__mulint
      001559 AE 82            [24] 5081 	mov	r6,dpl
      00155B AF 83            [24] 5082 	mov	r7,dph
      00155D EE               [12] 5083 	mov	a,r6
      00155E 25*21            [12] 5084 	add	a,_addr0
      001560 FC               [12] 5085 	mov	r4,a
      001561 EF               [12] 5086 	mov	a,r7
      001562 35*22            [12] 5087 	addc	a,(_addr0 + 1)
      001564 FD               [12] 5088 	mov	r5,a
      001565 8C*34            [24] 5089 	mov	_endAddrCalc,r4
      001567 8D*35            [24] 5090 	mov	(_endAddrCalc + 1),r5
      001569 75*36 00         [24] 5091 	mov	(_endAddrCalc + 2),#0x00
      00156C 75*37 00         [24] 5092 	mov	(_endAddrCalc + 3),#0x00
                                   5093 ;	ecen4330lab7.c:1565: if(endAddrCalc > 0xFFFF){
      00156F C3               [12] 5094 	clr	c
      001570 74 FF            [12] 5095 	mov	a,#0xff
      001572 95*34            [12] 5096 	subb	a,_endAddrCalc
      001574 74 FF            [12] 5097 	mov	a,#0xff
      001576 95*35            [12] 5098 	subb	a,(_endAddrCalc + 1)
      001578 E4               [12] 5099 	clr	a
      001579 95*36            [12] 5100 	subb	a,(_endAddrCalc + 2)
      00157B E4               [12] 5101 	clr	a
      00157C 95*37            [12] 5102 	subb	a,(_endAddrCalc + 3)
      00157E 50 08            [24] 5103 	jnc	00105$
                                   5104 ;	ecen4330lab7.c:1566: addr1 = 0xFFFF;
      001580 75*23 FF         [24] 5105 	mov	_addr1,#0xff
      001583 75*24 FF         [24] 5106 	mov	(_addr1 + 1),#0xff
      001586 80 0A            [24] 5107 	sjmp	00106$
      001588                       5108 00105$:
                                   5109 ;	ecen4330lab7.c:1569: addr1 = addr0 + (dataSize * dataType);
      001588 EE               [12] 5110 	mov	a,r6
      001589 25*21            [12] 5111 	add	a,_addr0
      00158B F5*23            [12] 5112 	mov	_addr1,a
      00158D EF               [12] 5113 	mov	a,r7
      00158E 35*22            [12] 5114 	addc	a,(_addr0 + 1)
      001590 F5*24            [12] 5115 	mov	(_addr1 + 1),a
      001592                       5116 00106$:
                                   5117 ;	ecen4330lab7.c:1571: dataSize = addr1 - addr0;
      001592 E5*23            [12] 5118 	mov	a,_addr1
      001594 C3               [12] 5119 	clr	c
      001595 95*21            [12] 5120 	subb	a,_addr0
      001597 F5*1B            [12] 5121 	mov	_dataSize,a
      001599 E5*24            [12] 5122 	mov	a,(_addr1 + 1)
      00159B 95*22            [12] 5123 	subb	a,(_addr0 + 1)
      00159D F5*1C            [12] 5124 	mov	(_dataSize + 1),a
                                   5125 ;	ecen4330lab7.c:1572: addr3 = addr2 + dataSize;
      00159F E5*1B            [12] 5126 	mov	a,_dataSize
      0015A1 25*25            [12] 5127 	add	a,_addr2
      0015A3 F5*27            [12] 5128 	mov	_addr3,a
      0015A5 E5*1C            [12] 5129 	mov	a,(_dataSize + 1)
      0015A7 35*26            [12] 5130 	addc	a,(_addr2 + 1)
      0015A9 F5*28            [12] 5131 	mov	(_addr3 + 1),a
      0015AB                       5132 00109$:
                                   5133 ;	ecen4330lab7.c:1577: if(addr0 < addr2 && addr1 > addr2){
      0015AB C3               [12] 5134 	clr	c
      0015AC E5*21            [12] 5135 	mov	a,_addr0
      0015AE 95*25            [12] 5136 	subb	a,_addr2
      0015B0 E5*22            [12] 5137 	mov	a,(_addr0 + 1)
      0015B2 95*26            [12] 5138 	subb	a,(_addr2 + 1)
      0015B4 50 4E            [24] 5139 	jnc	00113$
      0015B6 C3               [12] 5140 	clr	c
      0015B7 E5*25            [12] 5141 	mov	a,_addr2
      0015B9 95*23            [12] 5142 	subb	a,_addr1
      0015BB E5*26            [12] 5143 	mov	a,(_addr2 + 1)
      0015BD 95*24            [12] 5144 	subb	a,(_addr1 + 1)
      0015BF 50 43            [24] 5145 	jnc	00113$
                                   5146 ;	ecen4330lab7.c:1578: currAddr0 = addr1;
      0015C1 85*23*29         [24] 5147 	mov	_currAddr0,_addr1
      0015C4 85*24*2A         [24] 5148 	mov	(_currAddr0 + 1),(_addr1 + 1)
                                   5149 ;	ecen4330lab7.c:1579: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      0015C7 85*27*2B         [24] 5150 	mov	_currAddr1,_addr3
      0015CA 85*28*2C         [24] 5151 	mov	(_currAddr1 + 1),(_addr3 + 1)
      0015CD                       5152 00117$:
      0015CD C3               [12] 5153 	clr	c
      0015CE E5*2B            [12] 5154 	mov	a,_currAddr1
      0015D0 95*25            [12] 5155 	subb	a,_addr2
      0015D2 E5*2C            [12] 5156 	mov	a,(_currAddr1 + 1)
      0015D4 95*26            [12] 5157 	subb	a,(_addr2 + 1)
      0015D6 40 6D            [24] 5158 	jc	00114$
                                   5159 ;	ecen4330lab7.c:1580: data = RAMread(currAddr0);
      0015D8 85*29 82         [24] 5160 	mov	dpl,_currAddr0
      0015DB 85*2A 83         [24] 5161 	mov	dph,(_currAddr0 + 1)
      0015DE 12r0ErC0         [24] 5162 	lcall	_RAMread
      0015E1 85 82*20         [24] 5163 	mov	_data,dpl
                                   5164 ;	ecen4330lab7.c:1581: RAMwrite(currAddr1, data);
      0015E4 85*20*00         [24] 5165 	mov	_RAMwrite_PARM_2,_data
      0015E7 85*2B 82         [24] 5166 	mov	dpl,_currAddr1
      0015EA 85*2C 83         [24] 5167 	mov	dph,(_currAddr1 + 1)
      0015ED 12r0Er91         [24] 5168 	lcall	_RAMwrite
                                   5169 ;	ecen4330lab7.c:1582: currAddr0--;
      0015F0 15*29            [12] 5170 	dec	_currAddr0
      0015F2 74 FF            [12] 5171 	mov	a,#0xff
      0015F4 B5*29 02         [24] 5172 	cjne	a,_currAddr0,00166$
      0015F7 15*2A            [12] 5173 	dec	(_currAddr0 + 1)
      0015F9                       5174 00166$:
                                   5175 ;	ecen4330lab7.c:1579: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      0015F9 15*2B            [12] 5176 	dec	_currAddr1
      0015FB 74 FF            [12] 5177 	mov	a,#0xff
      0015FD B5*2B 02         [24] 5178 	cjne	a,_currAddr1,00167$
      001600 15*2C            [12] 5179 	dec	(_currAddr1 + 1)
      001602                       5180 00167$:
      001602 80 C9            [24] 5181 	sjmp	00117$
      001604                       5182 00113$:
                                   5183 ;	ecen4330lab7.c:1589: currAddr0 = addr0;
      001604 85*21*29         [24] 5184 	mov	_currAddr0,_addr0
      001607 85*22*2A         [24] 5185 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5186 ;	ecen4330lab7.c:1590: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      00160A 85*25*2B         [24] 5187 	mov	_currAddr1,_addr2
      00160D 85*26*2C         [24] 5188 	mov	(_currAddr1 + 1),(_addr2 + 1)
      001610                       5189 00120$:
      001610 C3               [12] 5190 	clr	c
      001611 E5*27            [12] 5191 	mov	a,_addr3
      001613 95*2B            [12] 5192 	subb	a,_currAddr1
      001615 E5*28            [12] 5193 	mov	a,(_addr3 + 1)
      001617 95*2C            [12] 5194 	subb	a,(_currAddr1 + 1)
      001619 40 2A            [24] 5195 	jc	00114$
                                   5196 ;	ecen4330lab7.c:1591: data = RAMread(currAddr0);
      00161B 85*29 82         [24] 5197 	mov	dpl,_currAddr0
      00161E 85*2A 83         [24] 5198 	mov	dph,(_currAddr0 + 1)
      001621 12r0ErC0         [24] 5199 	lcall	_RAMread
      001624 85 82*20         [24] 5200 	mov	_data,dpl
                                   5201 ;	ecen4330lab7.c:1592: RAMwrite(currAddr1, data);
      001627 85*20*00         [24] 5202 	mov	_RAMwrite_PARM_2,_data
      00162A 85*2B 82         [24] 5203 	mov	dpl,_currAddr1
      00162D 85*2C 83         [24] 5204 	mov	dph,(_currAddr1 + 1)
      001630 12r0Er91         [24] 5205 	lcall	_RAMwrite
                                   5206 ;	ecen4330lab7.c:1593: currAddr0++;
      001633 05*29            [12] 5207 	inc	_currAddr0
      001635 E4               [12] 5208 	clr	a
      001636 B5*29 02         [24] 5209 	cjne	a,_currAddr0,00169$
      001639 05*2A            [12] 5210 	inc	(_currAddr0 + 1)
      00163B                       5211 00169$:
                                   5212 ;	ecen4330lab7.c:1590: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      00163B 05*2B            [12] 5213 	inc	_currAddr1
      00163D E4               [12] 5214 	clr	a
      00163E B5*2B CF         [24] 5215 	cjne	a,_currAddr1,00120$
      001641 05*2C            [12] 5216 	inc	(_currAddr1 + 1)
      001643 80 CB            [24] 5217 	sjmp	00120$
      001645                       5218 00114$:
                                   5219 ;	ecen4330lab7.c:1598: resetLCD();
      001645 12r0ErD3         [24] 5220 	lcall	_resetLCD
                                   5221 ;	ecen4330lab7.c:1599: setTextColor(GREEN, BLACK);
      001648 E4               [12] 5222 	clr	a
      001649 F5*00            [12] 5223 	mov	_setTextColor_PARM_2,a
      00164B F5*01            [12] 5224 	mov	(_setTextColor_PARM_2 + 1),a
      00164D 90 07 E0         [24] 5225 	mov	dptr,#0x07e0
      001650 12r04r50         [24] 5226 	lcall	_setTextColor
                                   5227 ;	ecen4330lab7.c:1600: LCD_string_write("\nMove complete.\n\n");
      001653 90r07r88         [24] 5228 	mov	dptr,#___str_26
      001656 75 F0 80         [24] 5229 	mov	b,#0x80
      001659 12r0Br3F         [24] 5230 	lcall	_LCD_string_write
                                   5231 ;	ecen4330lab7.c:1601: delay(100);
      00165C 90 00 64         [24] 5232 	mov	dptr,#0x0064
      00165F 12r01r9F         [24] 5233 	lcall	_delay
                                   5234 ;	ecen4330lab7.c:1602: setTextColor(WHITE, BLACK);
      001662 E4               [12] 5235 	clr	a
      001663 F5*00            [12] 5236 	mov	_setTextColor_PARM_2,a
      001665 F5*01            [12] 5237 	mov	(_setTextColor_PARM_2 + 1),a
      001667 90 FF FF         [24] 5238 	mov	dptr,#0xffff
      00166A 12r04r50         [24] 5239 	lcall	_setTextColor
                                   5240 ;	ecen4330lab7.c:1603: LCD_string_write("Returning to\nmain menu.");
      00166D 90r06r47         [24] 5241 	mov	dptr,#___str_17
      001670 75 F0 80         [24] 5242 	mov	b,#0x80
      001673 12r0Br3F         [24] 5243 	lcall	_LCD_string_write
                                   5244 ;	ecen4330lab7.c:1604: delay(100);
      001676 90 00 64         [24] 5245 	mov	dptr,#0x0064
                                   5246 ;	ecen4330lab7.c:1605: }
      001679 02r01r9F         [24] 5247 	ljmp	_delay
                                   5248 ;------------------------------------------------------------
                                   5249 ;Allocation info for local variables in function 'COUNT'
                                   5250 ;------------------------------------------------------------
                                   5251 ;i                         Allocated to registers 
                                   5252 ;------------------------------------------------------------
                                   5253 ;	ecen4330lab7.c:1612: void COUNT(){
                                   5254 ;	-----------------------------------------
                                   5255 ;	 function COUNT
                                   5256 ;	-----------------------------------------
      00167C                       5257 _COUNT:
                                   5258 ;	ecen4330lab7.c:1613: endAddrCalc = 0;
      00167C E4               [12] 5259 	clr	a
      00167D F5*34            [12] 5260 	mov	_endAddrCalc,a
      00167F F5*35            [12] 5261 	mov	(_endAddrCalc + 1),a
      001681 F5*36            [12] 5262 	mov	(_endAddrCalc + 2),a
      001683 F5*37            [12] 5263 	mov	(_endAddrCalc + 3),a
                                   5264 ;	ecen4330lab7.c:1614: addr0 = 0;                      // Starting Address
      001685 F5*21            [12] 5265 	mov	_addr0,a
      001687 F5*22            [12] 5266 	mov	(_addr0 + 1),a
                                   5267 ;	ecen4330lab7.c:1615: addr1 = 0;                      // End Address
      001689 F5*23            [12] 5268 	mov	_addr1,a
      00168B F5*24            [12] 5269 	mov	(_addr1 + 1),a
                                   5270 ;	ecen4330lab7.c:1616: dataSize = 0;                   // Data Size
      00168D F5*1B            [12] 5271 	mov	_dataSize,a
      00168F F5*1C            [12] 5272 	mov	(_dataSize + 1),a
                                   5273 ;	ecen4330lab7.c:1617: byte1 = 0;                       // Find Value
      001691 F5*2F            [12] 5274 	mov	_byte1,a
      001693 F5*30            [12] 5275 	mov	(_byte1 + 1),a
                                   5276 ;	ecen4330lab7.c:1618: count = 0;
      001695 F5*32            [12] 5277 	mov	_count,a
      001697 F5*33            [12] 5278 	mov	(_count + 1),a
                                   5279 ;	ecen4330lab7.c:1619: addr3 = 0;						// Count overflow
      001699 F5*27            [12] 5280 	mov	_addr3,a
      00169B F5*28            [12] 5281 	mov	(_addr3 + 1),a
                                   5282 ;	ecen4330lab7.c:1620: dataEnd = 0;
                                   5283 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      00169D F5*1E            [12] 5284 	mov	_dataEnd,a
                                   5285 ;	ecen4330lab7.c:1623: resetLCD();
      00169F 12r0ErD3         [24] 5286 	lcall	_resetLCD
                                   5287 ;	ecen4330lab7.c:1624: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      0016A2 90r07r9A         [24] 5288 	mov	dptr,#___str_27
      0016A5 75 F0 80         [24] 5289 	mov	b,#0x80
      0016A8 12r0Br3F         [24] 5290 	lcall	_LCD_string_write
                                   5291 ;	ecen4330lab7.c:1625: cursor_x -= 4 * textsize * 6;
      0016AB E5*0C            [12] 5292 	mov	a,_textsize
      0016AD 75 F0 18         [24] 5293 	mov	b,#0x18
      0016B0 A4               [48] 5294 	mul	ab
      0016B1 FE               [12] 5295 	mov	r6,a
      0016B2 AF F0            [24] 5296 	mov	r7,b
      0016B4 E5*08            [12] 5297 	mov	a,_cursor_x
      0016B6 C3               [12] 5298 	clr	c
      0016B7 9E               [12] 5299 	subb	a,r6
      0016B8 F5*08            [12] 5300 	mov	_cursor_x,a
      0016BA E5*09            [12] 5301 	mov	a,(_cursor_x + 1)
      0016BC 9F               [12] 5302 	subb	a,r7
      0016BD F5*09            [12] 5303 	mov	(_cursor_x + 1),a
                                   5304 ;	ecen4330lab7.c:1626: inputRead16();                  // Read input
      0016BF 12r0Fr24         [24] 5305 	lcall	_inputRead16
                                   5306 ;	ecen4330lab7.c:1627: addr0 = input16;                // Start address
      0016C2 85*17*21         [24] 5307 	mov	_addr0,_input16
      0016C5 85*18*22         [24] 5308 	mov	(_addr0 + 1),(_input16 + 1)
                                   5309 ;	ecen4330lab7.c:1630: resetLCD();
      0016C8 12r0ErD3         [24] 5310 	lcall	_resetLCD
                                   5311 ;	ecen4330lab7.c:1631: inputDataSize();                // Prompt & read input
      0016CB 12r10rF0         [24] 5312 	lcall	_inputDataSize
                                   5313 ;	ecen4330lab7.c:1634: resetLCD();
      0016CE 12r0ErD3         [24] 5314 	lcall	_resetLCD
                                   5315 ;	ecen4330lab7.c:1635: LCD_string_write("\nEnter search\nvalue:\n\n  0x__");
      0016D1 90r07rC1         [24] 5316 	mov	dptr,#___str_28
      0016D4 75 F0 80         [24] 5317 	mov	b,#0x80
      0016D7 12r0Br3F         [24] 5318 	lcall	_LCD_string_write
                                   5319 ;	ecen4330lab7.c:1636: cursor_x -= 2 * textsize * 6;
      0016DA E5*0C            [12] 5320 	mov	a,_textsize
      0016DC 75 F0 0C         [24] 5321 	mov	b,#0x0c
      0016DF A4               [48] 5322 	mul	ab
      0016E0 FE               [12] 5323 	mov	r6,a
      0016E1 AF F0            [24] 5324 	mov	r7,b
      0016E3 E5*08            [12] 5325 	mov	a,_cursor_x
      0016E5 C3               [12] 5326 	clr	c
      0016E6 9E               [12] 5327 	subb	a,r6
      0016E7 F5*08            [12] 5328 	mov	_cursor_x,a
      0016E9 E5*09            [12] 5329 	mov	a,(_cursor_x + 1)
      0016EB 9F               [12] 5330 	subb	a,r7
      0016EC F5*09            [12] 5331 	mov	(_cursor_x + 1),a
                                   5332 ;	ecen4330lab7.c:1637: inputRead8();                  // Read input
      0016EE 12r0FrDF         [24] 5333 	lcall	_inputRead8
                                   5334 ;	ecen4330lab7.c:1638: byte1 = input8;                 // Find value
      0016F1 85*19*2F         [24] 5335 	mov	_byte1,_input8
      0016F4 75*30 00         [24] 5336 	mov	(_byte1 + 1),#0x00
                                   5337 ;	ecen4330lab7.c:1641: endAddrCalc = addr0 + dataSize;
      0016F7 E5*1B            [12] 5338 	mov	a,_dataSize
      0016F9 25*21            [12] 5339 	add	a,_addr0
      0016FB FE               [12] 5340 	mov	r6,a
      0016FC E5*1C            [12] 5341 	mov	a,(_dataSize + 1)
      0016FE 35*22            [12] 5342 	addc	a,(_addr0 + 1)
      001700 FF               [12] 5343 	mov	r7,a
      001701 8E*34            [24] 5344 	mov	_endAddrCalc,r6
      001703 8F*35            [24] 5345 	mov	(_endAddrCalc + 1),r7
      001705 75*36 00         [24] 5346 	mov	(_endAddrCalc + 2),#0x00
      001708 75*37 00         [24] 5347 	mov	(_endAddrCalc + 3),#0x00
                                   5348 ;	ecen4330lab7.c:1642: if(endAddrCalc < addr0){ // RAM overflow
      00170B AC*21            [24] 5349 	mov	r4,_addr0
      00170D AD*22            [24] 5350 	mov	r5,(_addr0 + 1)
      00170F 7E 00            [12] 5351 	mov	r6,#0x00
      001711 7F 00            [12] 5352 	mov	r7,#0x00
      001713 C3               [12] 5353 	clr	c
      001714 E5*34            [12] 5354 	mov	a,_endAddrCalc
      001716 9C               [12] 5355 	subb	a,r4
      001717 E5*35            [12] 5356 	mov	a,(_endAddrCalc + 1)
      001719 9D               [12] 5357 	subb	a,r5
      00171A E5*36            [12] 5358 	mov	a,(_endAddrCalc + 2)
      00171C 9E               [12] 5359 	subb	a,r6
      00171D E5*37            [12] 5360 	mov	a,(_endAddrCalc + 3)
      00171F 9F               [12] 5361 	subb	a,r7
      001720 50 14            [24] 5362 	jnc	00102$
                                   5363 ;	ecen4330lab7.c:1643: addr1 = 0xFFFF;             // Set end address
      001722 75*23 FF         [24] 5364 	mov	_addr1,#0xff
                                   5365 ;	ecen4330lab7.c:1644: dataSize = addr1 - addr0;   // Recalculate data size
      001725 74 FF            [12] 5366 	mov	a,#0xff
      001727 F5*24            [12] 5367 	mov	(_addr1 + 1),a
      001729 C3               [12] 5368 	clr	c
      00172A 95*21            [12] 5369 	subb	a,_addr0
      00172C F5*1B            [12] 5370 	mov	_dataSize,a
      00172E 74 FF            [12] 5371 	mov	a,#0xff
      001730 95*22            [12] 5372 	subb	a,(_addr0 + 1)
      001732 F5*1C            [12] 5373 	mov	(_dataSize + 1),a
      001734 80 0C            [24] 5374 	sjmp	00103$
      001736                       5375 00102$:
                                   5376 ;	ecen4330lab7.c:1647: addr1 = addr0 + dataSize;
      001736 E5*1B            [12] 5377 	mov	a,_dataSize
      001738 25*21            [12] 5378 	add	a,_addr0
      00173A F5*23            [12] 5379 	mov	_addr1,a
      00173C E5*1C            [12] 5380 	mov	a,(_dataSize + 1)
      00173E 35*22            [12] 5381 	addc	a,(_addr0 + 1)
      001740 F5*24            [12] 5382 	mov	(_addr1 + 1),a
      001742                       5383 00103$:
                                   5384 ;	ecen4330lab7.c:1665: int i = addr0;
      001742 AE*21            [24] 5385 	mov	r6,_addr0
      001744 AF*22            [24] 5386 	mov	r7,(_addr0 + 1)
                                   5387 ;	ecen4330lab7.c:1666: while(i <= addr1 && dataEnd == 0){
      001746                       5388 00111$:
      001746 8E 04            [24] 5389 	mov	ar4,r6
      001748 8F 05            [24] 5390 	mov	ar5,r7
      00174A C3               [12] 5391 	clr	c
      00174B E5*23            [12] 5392 	mov	a,_addr1
      00174D 9C               [12] 5393 	subb	a,r4
      00174E E5*24            [12] 5394 	mov	a,(_addr1 + 1)
      001750 9D               [12] 5395 	subb	a,r5
      001751 40 4C            [24] 5396 	jc	00113$
      001753 E5*1E            [12] 5397 	mov	a,_dataEnd
      001755 70 48            [24] 5398 	jnz	00113$
                                   5399 ;	ecen4330lab7.c:1667: data = RAMread(i);
      001757 8E 82            [24] 5400 	mov	dpl,r6
      001759 8F 83            [24] 5401 	mov	dph,r7
      00175B C0 07            [24] 5402 	push	ar7
      00175D C0 06            [24] 5403 	push	ar6
      00175F 12r0ErC0         [24] 5404 	lcall	_RAMread
      001762 85 82*20         [24] 5405 	mov	_data,dpl
      001765 D0 06            [24] 5406 	pop	ar6
      001767 D0 07            [24] 5407 	pop	ar7
                                   5408 ;	ecen4330lab7.c:1668: if(data == byte1){
      001769 AC*20            [24] 5409 	mov	r4,_data
      00176B 7D 00            [12] 5410 	mov	r5,#0x00
      00176D EC               [12] 5411 	mov	a,r4
      00176E B5*2F 1A         [24] 5412 	cjne	a,_byte1,00107$
      001771 ED               [12] 5413 	mov	a,r5
      001772 B5*30 16         [24] 5414 	cjne	a,(_byte1 + 1),00107$
                                   5415 ;	ecen4330lab7.c:1669: if(count == 0xFFFF){
      001775 74 FF            [12] 5416 	mov	a,#0xff
      001777 B5*32 09         [24] 5417 	cjne	a,_count,00105$
      00177A B5*33 06         [24] 5418 	cjne	a,(_count + 1),00105$
                                   5419 ;	ecen4330lab7.c:1670: addr3 = 1;
      00177D 75*27 01         [24] 5420 	mov	_addr3,#0x01
      001780 75*28 00         [24] 5421 	mov	(_addr3 + 1),#0x00
      001783                       5422 00105$:
                                   5423 ;	ecen4330lab7.c:1672: count++;
      001783 05*32            [12] 5424 	inc	_count
      001785 E4               [12] 5425 	clr	a
      001786 B5*32 02         [24] 5426 	cjne	a,_count,00173$
      001789 05*33            [12] 5427 	inc	(_count + 1)
      00178B                       5428 00173$:
      00178B                       5429 00107$:
                                   5430 ;	ecen4330lab7.c:1674: if(i == 0xFFFF){
      00178B 8E 04            [24] 5431 	mov	ar4,r6
      00178D 8F 05            [24] 5432 	mov	ar5,r7
      00178F BC FF 06         [24] 5433 	cjne	r4,#0xff,00109$
      001792 BD FF 03         [24] 5434 	cjne	r5,#0xff,00109$
                                   5435 ;	ecen4330lab7.c:1675: dataEnd = 1;
      001795 75*1E 01         [24] 5436 	mov	_dataEnd,#0x01
      001798                       5437 00109$:
                                   5438 ;	ecen4330lab7.c:1677: i++;
      001798 0E               [12] 5439 	inc	r6
      001799 BE 00 AA         [24] 5440 	cjne	r6,#0x00,00111$
      00179C 0F               [12] 5441 	inc	r7
      00179D 80 A7            [24] 5442 	sjmp	00111$
      00179F                       5443 00113$:
                                   5444 ;	ecen4330lab7.c:1680: if(count > 0 || addr3 == 1){
      00179F E5*32            [12] 5445 	mov	a,_count
      0017A1 45*33            [12] 5446 	orl	a,(_count + 1)
      0017A3 70 0D            [24] 5447 	jnz	00119$
      0017A5 74 01            [12] 5448 	mov	a,#0x01
      0017A7 B5*27 06         [24] 5449 	cjne	a,_addr3,00178$
      0017AA 14               [12] 5450 	dec	a
      0017AB B5*28 02         [24] 5451 	cjne	a,(_addr3 + 1),00178$
      0017AE 80 02            [24] 5452 	sjmp	00179$
      0017B0                       5453 00178$:
      0017B0 80 5F            [24] 5454 	sjmp	00120$
      0017B2                       5455 00179$:
      0017B2                       5456 00119$:
                                   5457 ;	ecen4330lab7.c:1681: resetLCD();
      0017B2 12r0ErD3         [24] 5458 	lcall	_resetLCD
                                   5459 ;	ecen4330lab7.c:1682: setTextColor(GREEN, BLACK);
      0017B5 E4               [12] 5460 	clr	a
      0017B6 F5*00            [12] 5461 	mov	_setTextColor_PARM_2,a
      0017B8 F5*01            [12] 5462 	mov	(_setTextColor_PARM_2 + 1),a
      0017BA 90 07 E0         [24] 5463 	mov	dptr,#0x07e0
      0017BD 12r04r50         [24] 5464 	lcall	_setTextColor
                                   5465 ;	ecen4330lab7.c:1683: LCD_string_write("\n0x");
      0017C0 90r07rDE         [24] 5466 	mov	dptr,#___str_29
      0017C3 75 F0 80         [24] 5467 	mov	b,#0x80
      0017C6 12r0Br3F         [24] 5468 	lcall	_LCD_string_write
                                   5469 ;	ecen4330lab7.c:1684: HEXtoASCII_8write(byte1);
      0017C9 85*2F 82         [24] 5470 	mov	dpl,_byte1
      0017CC 12r0DrAF         [24] 5471 	lcall	_HEXtoASCII_8write
                                   5472 ;	ecen4330lab7.c:1685: LCD_string_write(" found\n");
      0017CF 90r07rE2         [24] 5473 	mov	dptr,#___str_30
      0017D2 75 F0 80         [24] 5474 	mov	b,#0x80
      0017D5 12r0Br3F         [24] 5475 	lcall	_LCD_string_write
                                   5476 ;	ecen4330lab7.c:1687: if(count > 0){
      0017D8 E5*32            [12] 5477 	mov	a,_count
      0017DA 45*33            [12] 5478 	orl	a,(_count + 1)
      0017DC 60 0B            [24] 5479 	jz	00117$
                                   5480 ;	ecen4330lab7.c:1688: HEXtoASCII_16write(count);
      0017DE 85*32 82         [24] 5481 	mov	dpl,_count
      0017E1 85*33 83         [24] 5482 	mov	dph,(_count + 1)
      0017E4 12r0DrEC         [24] 5483 	lcall	_HEXtoASCII_16write
      0017E7 80 16            [24] 5484 	sjmp	00118$
      0017E9                       5485 00117$:
                                   5486 ;	ecen4330lab7.c:1690: else if(addr3 == 1){
      0017E9 74 01            [12] 5487 	mov	a,#0x01
      0017EB B5*27 06         [24] 5488 	cjne	a,_addr3,00181$
      0017EE 14               [12] 5489 	dec	a
      0017EF B5*28 02         [24] 5490 	cjne	a,(_addr3 + 1),00181$
      0017F2 80 02            [24] 5491 	sjmp	00182$
      0017F4                       5492 00181$:
      0017F4 80 09            [24] 5493 	sjmp	00118$
      0017F6                       5494 00182$:
                                   5495 ;	ecen4330lab7.c:1691: LCD_string_write("0x10000");
      0017F6 90r07rEA         [24] 5496 	mov	dptr,#___str_31
      0017F9 75 F0 80         [24] 5497 	mov	b,#0x80
      0017FC 12r0Br3F         [24] 5498 	lcall	_LCD_string_write
      0017FF                       5499 00118$:
                                   5500 ;	ecen4330lab7.c:1693: LCD_string_write("\ntimes.");
      0017FF 90r07rF2         [24] 5501 	mov	dptr,#___str_32
      001802 75 F0 80         [24] 5502 	mov	b,#0x80
      001805 12r0Br3F         [24] 5503 	lcall	_LCD_string_write
                                   5504 ;	ecen4330lab7.c:1694: delay(300);
      001808 90 01 2C         [24] 5505 	mov	dptr,#0x012c
      00180B 12r01r9F         [24] 5506 	lcall	_delay
                                   5507 ;	ecen4330lab7.c:1695: FIND_display();                 // Display dump data
      00180E 02r1Er4C         [24] 5508 	ljmp	_FIND_display
      001811                       5509 00120$:
                                   5510 ;	ecen4330lab7.c:1698: resetLCD();
      001811 12r0ErD3         [24] 5511 	lcall	_resetLCD
                                   5512 ;	ecen4330lab7.c:1699: LCD_string_write("\n0x");
      001814 90r07rDE         [24] 5513 	mov	dptr,#___str_29
      001817 75 F0 80         [24] 5514 	mov	b,#0x80
      00181A 12r0Br3F         [24] 5515 	lcall	_LCD_string_write
                                   5516 ;	ecen4330lab7.c:1700: HEXtoASCII_8write(byte1);
      00181D 85*2F 82         [24] 5517 	mov	dpl,_byte1
      001820 12r0DrAF         [24] 5518 	lcall	_HEXtoASCII_8write
                                   5519 ;	ecen4330lab7.c:1701: LCD_string_write(" not\nfound in\nexternal RAM\n");
      001823 90r07rFA         [24] 5520 	mov	dptr,#___str_33
      001826 75 F0 80         [24] 5521 	mov	b,#0x80
      001829 12r0Br3F         [24] 5522 	lcall	_LCD_string_write
                                   5523 ;	ecen4330lab7.c:1702: HEXtoASCII_16write(addr0);
      00182C 85*21 82         [24] 5524 	mov	dpl,_addr0
      00182F 85*22 83         [24] 5525 	mov	dph,(_addr0 + 1)
      001832 12r0DrEC         [24] 5526 	lcall	_HEXtoASCII_16write
                                   5527 ;	ecen4330lab7.c:1703: LCD_string_write(" -\n");
      001835 90r08r16         [24] 5528 	mov	dptr,#___str_34
      001838 75 F0 80         [24] 5529 	mov	b,#0x80
      00183B 12r0Br3F         [24] 5530 	lcall	_LCD_string_write
                                   5531 ;	ecen4330lab7.c:1704: HEXtoASCII_16write(addr1);
      00183E 85*23 82         [24] 5532 	mov	dpl,_addr1
      001841 85*24 83         [24] 5533 	mov	dph,(_addr1 + 1)
      001844 12r0DrEC         [24] 5534 	lcall	_HEXtoASCII_16write
                                   5535 ;	ecen4330lab7.c:1705: delay(300);
      001847 90 01 2C         [24] 5536 	mov	dptr,#0x012c
      00184A 12r01r9F         [24] 5537 	lcall	_delay
                                   5538 ;	ecen4330lab7.c:1706: resetLCD();
      00184D 12r0ErD3         [24] 5539 	lcall	_resetLCD
                                   5540 ;	ecen4330lab7.c:1707: LCD_string_write("Returning to\nmain menu.");
      001850 90r06r47         [24] 5541 	mov	dptr,#___str_17
      001853 75 F0 80         [24] 5542 	mov	b,#0x80
      001856 12r0Br3F         [24] 5543 	lcall	_LCD_string_write
                                   5544 ;	ecen4330lab7.c:1708: delay(200);
      001859 90 00 C8         [24] 5545 	mov	dptr,#0x00c8
                                   5546 ;	ecen4330lab7.c:1710: }
      00185C 02r01r9F         [24] 5547 	ljmp	_delay
                                   5548 ;------------------------------------------------------------
                                   5549 ;Allocation info for local variables in function 'DUMP_display'
                                   5550 ;------------------------------------------------------------
                                   5551 ;i                         Allocated to registers r6 r7 
                                   5552 ;j                         Allocated to registers r4 r5 
                                   5553 ;------------------------------------------------------------
                                   5554 ;	ecen4330lab7.c:1719: void DUMP_display(){
                                   5555 ;	-----------------------------------------
                                   5556 ;	 function DUMP_display
                                   5557 ;	-----------------------------------------
      00185F                       5558 _DUMP_display:
                                   5559 ;	ecen4330lab7.c:1722: currAddr1 = 0;              // Page Count
      00185F E4               [12] 5560 	clr	a
      001860 F5*2B            [12] 5561 	mov	_currAddr1,a
      001862 F5*2C            [12] 5562 	mov	(_currAddr1 + 1),a
                                   5563 ;	ecen4330lab7.c:1723: dataEnd = 0;
                                   5564 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      001864 F5*1E            [12] 5565 	mov	_dataEnd,a
                                   5566 ;	ecen4330lab7.c:1724: addr2 = 0;					// Prev data count
      001866 F5*25            [12] 5567 	mov	_addr2,a
      001868 F5*26            [12] 5568 	mov	(_addr2 + 1),a
                                   5569 ;	ecen4330lab7.c:1726: currAddr0 = addr0;          // Set current address
      00186A 85*21*29         [24] 5570 	mov	_currAddr0,_addr0
      00186D 85*22*2A         [24] 5571 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5572 ;	ecen4330lab7.c:1728: do{
      001870                       5573 00134$:
                                   5574 ;	ecen4330lab7.c:1729: resetLCD();
      001870 12r0ErD3         [24] 5575 	lcall	_resetLCD
                                   5576 ;	ecen4330lab7.c:1730: setTextSize(2);
      001873 75 82 02         [24] 5577 	mov	dpl,#0x02
      001876 12r04r5D         [24] 5578 	lcall	_setTextSize
                                   5579 ;	ecen4330lab7.c:1731: LCD_string_write("\n");
      001879 90r08r1A         [24] 5580 	mov	dptr,#___str_35
      00187C 75 F0 80         [24] 5581 	mov	b,#0x80
      00187F 12r0Br3F         [24] 5582 	lcall	_LCD_string_write
                                   5583 ;	ecen4330lab7.c:1734: if(dataSize >= 10){
      001882 C3               [12] 5584 	clr	c
      001883 E5*1B            [12] 5585 	mov	a,_dataSize
      001885 94 0A            [12] 5586 	subb	a,#0x0a
      001887 E5*1C            [12] 5587 	mov	a,(_dataSize + 1)
      001889 94 00            [12] 5588 	subb	a,#0x00
      00188B 50 03            [24] 5589 	jnc	00258$
      00188D 02r19r2E         [24] 5590 	ljmp	00119$
      001890                       5591 00258$:
                                   5592 ;	ecen4330lab7.c:1735: addr2 = 10;
      001890 75*25 0A         [24] 5593 	mov	_addr2,#0x0a
      001893 75*26 00         [24] 5594 	mov	(_addr2 + 1),#0x00
                                   5595 ;	ecen4330lab7.c:1737: for(i = 0; i < 10; i++){
      001896 7E 00            [12] 5596 	mov	r6,#0x00
      001898 7F 00            [12] 5597 	mov	r7,#0x00
      00189A                       5598 00140$:
                                   5599 ;	ecen4330lab7.c:1738: HEXtoASCII_16write(currAddr0);
      00189A 85*29 82         [24] 5600 	mov	dpl,_currAddr0
      00189D 85*2A 83         [24] 5601 	mov	dph,(_currAddr0 + 1)
      0018A0 C0 07            [24] 5602 	push	ar7
      0018A2 C0 06            [24] 5603 	push	ar6
      0018A4 12r0DrEC         [24] 5604 	lcall	_HEXtoASCII_16write
                                   5605 ;	ecen4330lab7.c:1739: LCD_string_write(": 0x");
      0018A7 90r06r42         [24] 5606 	mov	dptr,#___str_16
      0018AA 75 F0 80         [24] 5607 	mov	b,#0x80
      0018AD 12r0Br3F         [24] 5608 	lcall	_LCD_string_write
      0018B0 D0 06            [24] 5609 	pop	ar6
      0018B2 D0 07            [24] 5610 	pop	ar7
                                   5611 ;	ecen4330lab7.c:1740: for(j = 0; j < dataType; j++){
      0018B4 7C 00            [12] 5612 	mov	r4,#0x00
      0018B6 7D 00            [12] 5613 	mov	r5,#0x00
      0018B8                       5614 00138$:
      0018B8 AA*1A            [24] 5615 	mov	r2,_dataType
      0018BA 7B 00            [12] 5616 	mov	r3,#0x00
      0018BC C3               [12] 5617 	clr	c
      0018BD EC               [12] 5618 	mov	a,r4
      0018BE 9A               [12] 5619 	subb	a,r2
      0018BF ED               [12] 5620 	mov	a,r5
      0018C0 64 80            [12] 5621 	xrl	a,#0x80
      0018C2 8B F0            [24] 5622 	mov	b,r3
      0018C4 63 F0 80         [24] 5623 	xrl	b,#0x80
      0018C7 95 F0            [12] 5624 	subb	a,b
      0018C9 50 2B            [24] 5625 	jnc	00101$
                                   5626 ;	ecen4330lab7.c:1741: HEXtoASCII_8write(RAMread(currAddr0));
      0018CB 85*29 82         [24] 5627 	mov	dpl,_currAddr0
      0018CE 85*2A 83         [24] 5628 	mov	dph,(_currAddr0 + 1)
      0018D1 C0 07            [24] 5629 	push	ar7
      0018D3 C0 06            [24] 5630 	push	ar6
      0018D5 C0 05            [24] 5631 	push	ar5
      0018D7 C0 04            [24] 5632 	push	ar4
      0018D9 12r0ErC0         [24] 5633 	lcall	_RAMread
      0018DC 12r0DrAF         [24] 5634 	lcall	_HEXtoASCII_8write
      0018DF D0 04            [24] 5635 	pop	ar4
      0018E1 D0 05            [24] 5636 	pop	ar5
      0018E3 D0 06            [24] 5637 	pop	ar6
      0018E5 D0 07            [24] 5638 	pop	ar7
                                   5639 ;	ecen4330lab7.c:1742: currAddr0++;
      0018E7 05*29            [12] 5640 	inc	_currAddr0
      0018E9 E4               [12] 5641 	clr	a
      0018EA B5*29 02         [24] 5642 	cjne	a,_currAddr0,00260$
      0018ED 05*2A            [12] 5643 	inc	(_currAddr0 + 1)
      0018EF                       5644 00260$:
                                   5645 ;	ecen4330lab7.c:1740: for(j = 0; j < dataType; j++){
      0018EF 0C               [12] 5646 	inc	r4
      0018F0 BC 00 C5         [24] 5647 	cjne	r4,#0x00,00138$
      0018F3 0D               [12] 5648 	inc	r5
      0018F4 80 C2            [24] 5649 	sjmp	00138$
      0018F6                       5650 00101$:
                                   5651 ;	ecen4330lab7.c:1744: LCD_string_write("\n");
      0018F6 90r08r1A         [24] 5652 	mov	dptr,#___str_35
      0018F9 75 F0 80         [24] 5653 	mov	b,#0x80
      0018FC C0 07            [24] 5654 	push	ar7
      0018FE C0 06            [24] 5655 	push	ar6
      001900 12r0Br3F         [24] 5656 	lcall	_LCD_string_write
      001903 D0 06            [24] 5657 	pop	ar6
      001905 D0 07            [24] 5658 	pop	ar7
                                   5659 ;	ecen4330lab7.c:1745: dataSize--;
      001907 15*1B            [12] 5660 	dec	_dataSize
      001909 74 FF            [12] 5661 	mov	a,#0xff
      00190B B5*1B 02         [24] 5662 	cjne	a,_dataSize,00262$
      00190E 15*1C            [12] 5663 	dec	(_dataSize + 1)
      001910                       5664 00262$:
                                   5665 ;	ecen4330lab7.c:1737: for(i = 0; i < 10; i++){
      001910 0E               [12] 5666 	inc	r6
      001911 BE 00 01         [24] 5667 	cjne	r6,#0x00,00263$
      001914 0F               [12] 5668 	inc	r7
      001915                       5669 00263$:
      001915 C3               [12] 5670 	clr	c
      001916 EE               [12] 5671 	mov	a,r6
      001917 94 0A            [12] 5672 	subb	a,#0x0a
      001919 EF               [12] 5673 	mov	a,r7
      00191A 64 80            [12] 5674 	xrl	a,#0x80
      00191C 94 80            [12] 5675 	subb	a,#0x80
      00191E 50 03            [24] 5676 	jnc	00264$
      001920 02r18r9A         [24] 5677 	ljmp	00140$
      001923                       5678 00264$:
                                   5679 ;	ecen4330lab7.c:1747: currAddr1++;        // Next page
      001923 05*2B            [12] 5680 	inc	_currAddr1
      001925 E4               [12] 5681 	clr	a
      001926 B5*2B 02         [24] 5682 	cjne	a,_currAddr1,00265$
      001929 05*2C            [12] 5683 	inc	(_currAddr1 + 1)
      00192B                       5684 00265$:
      00192B 02r1Ar93         [24] 5685 	ljmp	00120$
      00192E                       5686 00119$:
                                   5687 ;	ecen4330lab7.c:1751: else if(dataSize > 0 && dataSize < 10){
      00192E E5*1B            [12] 5688 	mov	a,_dataSize
      001930 45*1C            [12] 5689 	orl	a,(_dataSize + 1)
      001932 70 03            [24] 5690 	jnz	00266$
      001934 02r1Ar1D         [24] 5691 	ljmp	00115$
      001937                       5692 00266$:
      001937 C3               [12] 5693 	clr	c
      001938 E5*1B            [12] 5694 	mov	a,_dataSize
      00193A 94 0A            [12] 5695 	subb	a,#0x0a
      00193C E5*1C            [12] 5696 	mov	a,(_dataSize + 1)
      00193E 94 00            [12] 5697 	subb	a,#0x00
      001940 40 03            [24] 5698 	jc	00267$
      001942 02r1Ar1D         [24] 5699 	ljmp	00115$
      001945                       5700 00267$:
                                   5701 ;	ecen4330lab7.c:1752: addr2 = dataSize;
      001945 85*1B*25         [24] 5702 	mov	_addr2,_dataSize
      001948 85*1C*26         [24] 5703 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5704 ;	ecen4330lab7.c:1754: while(dataSize > 0){
      00194B                       5705 00104$:
      00194B E5*1B            [12] 5706 	mov	a,_dataSize
      00194D 45*1C            [12] 5707 	orl	a,(_dataSize + 1)
      00194F 60 60            [24] 5708 	jz	00106$
                                   5709 ;	ecen4330lab7.c:1755: HEXtoASCII_16write(currAddr0);
      001951 85*29 82         [24] 5710 	mov	dpl,_currAddr0
      001954 85*2A 83         [24] 5711 	mov	dph,(_currAddr0 + 1)
      001957 12r0DrEC         [24] 5712 	lcall	_HEXtoASCII_16write
                                   5713 ;	ecen4330lab7.c:1756: LCD_string_write(": 0x");
      00195A 90r06r42         [24] 5714 	mov	dptr,#___str_16
      00195D 75 F0 80         [24] 5715 	mov	b,#0x80
      001960 12r0Br3F         [24] 5716 	lcall	_LCD_string_write
                                   5717 ;	ecen4330lab7.c:1757: for(j = 0; j < dataType; j++){
      001963 7E 00            [12] 5718 	mov	r6,#0x00
      001965 7F 00            [12] 5719 	mov	r7,#0x00
      001967                       5720 00143$:
      001967 AC*1A            [24] 5721 	mov	r4,_dataType
      001969 7D 00            [12] 5722 	mov	r5,#0x00
      00196B C3               [12] 5723 	clr	c
      00196C EE               [12] 5724 	mov	a,r6
      00196D 9C               [12] 5725 	subb	a,r4
      00196E EF               [12] 5726 	mov	a,r7
      00196F 64 80            [12] 5727 	xrl	a,#0x80
      001971 8D F0            [24] 5728 	mov	b,r5
      001973 63 F0 80         [24] 5729 	xrl	b,#0x80
      001976 95 F0            [12] 5730 	subb	a,b
      001978 50 23            [24] 5731 	jnc	00103$
                                   5732 ;	ecen4330lab7.c:1758: HEXtoASCII_8write(RAMread(currAddr0));
      00197A 85*29 82         [24] 5733 	mov	dpl,_currAddr0
      00197D 85*2A 83         [24] 5734 	mov	dph,(_currAddr0 + 1)
      001980 C0 07            [24] 5735 	push	ar7
      001982 C0 06            [24] 5736 	push	ar6
      001984 12r0ErC0         [24] 5737 	lcall	_RAMread
      001987 12r0DrAF         [24] 5738 	lcall	_HEXtoASCII_8write
      00198A D0 06            [24] 5739 	pop	ar6
      00198C D0 07            [24] 5740 	pop	ar7
                                   5741 ;	ecen4330lab7.c:1759: currAddr0++;
      00198E 05*29            [12] 5742 	inc	_currAddr0
      001990 E4               [12] 5743 	clr	a
      001991 B5*29 02         [24] 5744 	cjne	a,_currAddr0,00270$
      001994 05*2A            [12] 5745 	inc	(_currAddr0 + 1)
      001996                       5746 00270$:
                                   5747 ;	ecen4330lab7.c:1757: for(j = 0; j < dataType; j++){
      001996 0E               [12] 5748 	inc	r6
      001997 BE 00 CD         [24] 5749 	cjne	r6,#0x00,00143$
      00199A 0F               [12] 5750 	inc	r7
      00199B 80 CA            [24] 5751 	sjmp	00143$
      00199D                       5752 00103$:
                                   5753 ;	ecen4330lab7.c:1761: LCD_string_write("\n");
      00199D 90r08r1A         [24] 5754 	mov	dptr,#___str_35
      0019A0 75 F0 80         [24] 5755 	mov	b,#0x80
      0019A3 12r0Br3F         [24] 5756 	lcall	_LCD_string_write
                                   5757 ;	ecen4330lab7.c:1762: dataSize--;
      0019A6 15*1B            [12] 5758 	dec	_dataSize
      0019A8 74 FF            [12] 5759 	mov	a,#0xff
      0019AA B5*1B 02         [24] 5760 	cjne	a,_dataSize,00272$
      0019AD 15*1C            [12] 5761 	dec	(_dataSize + 1)
      0019AF                       5762 00272$:
      0019AF 80 9A            [24] 5763 	sjmp	00104$
      0019B1                       5764 00106$:
                                   5765 ;	ecen4330lab7.c:1764: if(addr3 > 0){
      0019B1 E5*27            [12] 5766 	mov	a,_addr3
      0019B3 45*28            [12] 5767 	orl	a,(_addr3 + 1)
      0019B5 60 5C            [24] 5768 	jz	00109$
                                   5769 ;	ecen4330lab7.c:1765: HEXtoASCII_16write(currAddr0);
      0019B7 85*29 82         [24] 5770 	mov	dpl,_currAddr0
      0019BA 85*2A 83         [24] 5771 	mov	dph,(_currAddr0 + 1)
      0019BD 12r0DrEC         [24] 5772 	lcall	_HEXtoASCII_16write
                                   5773 ;	ecen4330lab7.c:1766: LCD_string_write(": 0x");
      0019C0 90r06r42         [24] 5774 	mov	dptr,#___str_16
      0019C3 75 F0 80         [24] 5775 	mov	b,#0x80
      0019C6 12r0Br3F         [24] 5776 	lcall	_LCD_string_write
                                   5777 ;	ecen4330lab7.c:1767: for(j = 0; j < addr3; j++){
      0019C9 7E 00            [12] 5778 	mov	r6,#0x00
      0019CB 7F 00            [12] 5779 	mov	r7,#0x00
      0019CD                       5780 00146$:
      0019CD 8E 04            [24] 5781 	mov	ar4,r6
      0019CF 8F 05            [24] 5782 	mov	ar5,r7
      0019D1 C3               [12] 5783 	clr	c
      0019D2 EC               [12] 5784 	mov	a,r4
      0019D3 95*27            [12] 5785 	subb	a,_addr3
      0019D5 ED               [12] 5786 	mov	a,r5
      0019D6 95*28            [12] 5787 	subb	a,(_addr3 + 1)
      0019D8 50 23            [24] 5788 	jnc	00107$
                                   5789 ;	ecen4330lab7.c:1768: HEXtoASCII_8write(RAMread(currAddr0));
      0019DA 85*29 82         [24] 5790 	mov	dpl,_currAddr0
      0019DD 85*2A 83         [24] 5791 	mov	dph,(_currAddr0 + 1)
      0019E0 C0 07            [24] 5792 	push	ar7
      0019E2 C0 06            [24] 5793 	push	ar6
      0019E4 12r0ErC0         [24] 5794 	lcall	_RAMread
      0019E7 12r0DrAF         [24] 5795 	lcall	_HEXtoASCII_8write
      0019EA D0 06            [24] 5796 	pop	ar6
      0019EC D0 07            [24] 5797 	pop	ar7
                                   5798 ;	ecen4330lab7.c:1769: currAddr0++;
      0019EE 05*29            [12] 5799 	inc	_currAddr0
      0019F0 E4               [12] 5800 	clr	a
      0019F1 B5*29 02         [24] 5801 	cjne	a,_currAddr0,00275$
      0019F4 05*2A            [12] 5802 	inc	(_currAddr0 + 1)
      0019F6                       5803 00275$:
                                   5804 ;	ecen4330lab7.c:1767: for(j = 0; j < addr3; j++){
      0019F6 0E               [12] 5805 	inc	r6
      0019F7 BE 00 D3         [24] 5806 	cjne	r6,#0x00,00146$
      0019FA 0F               [12] 5807 	inc	r7
      0019FB 80 D0            [24] 5808 	sjmp	00146$
      0019FD                       5809 00107$:
                                   5810 ;	ecen4330lab7.c:1771: currAddr0 -= addr3;
      0019FD E5*29            [12] 5811 	mov	a,_currAddr0
      0019FF C3               [12] 5812 	clr	c
      001A00 95*27            [12] 5813 	subb	a,_addr3
      001A02 F5*29            [12] 5814 	mov	_currAddr0,a
      001A04 E5*2A            [12] 5815 	mov	a,(_currAddr0 + 1)
      001A06 95*28            [12] 5816 	subb	a,(_addr3 + 1)
      001A08 F5*2A            [12] 5817 	mov	(_currAddr0 + 1),a
                                   5818 ;	ecen4330lab7.c:1772: LCD_string_write("\n");
      001A0A 90r08r1A         [24] 5819 	mov	dptr,#___str_35
      001A0D 75 F0 80         [24] 5820 	mov	b,#0x80
      001A10 12r0Br3F         [24] 5821 	lcall	_LCD_string_write
      001A13                       5822 00109$:
                                   5823 ;	ecen4330lab7.c:1774: currAddr1++; 
      001A13 05*2B            [12] 5824 	inc	_currAddr1
      001A15 E4               [12] 5825 	clr	a
      001A16 B5*2B 7A         [24] 5826 	cjne	a,_currAddr1,00120$
      001A19 05*2C            [12] 5827 	inc	(_currAddr1 + 1)
      001A1B 80 76            [24] 5828 	sjmp	00120$
      001A1D                       5829 00115$:
                                   5830 ;	ecen4330lab7.c:1777: else if(dataSize == 0 && addr3 > 0){
      001A1D E5*1B            [12] 5831 	mov	a,_dataSize
      001A1F 45*1C            [12] 5832 	orl	a,(_dataSize + 1)
      001A21 70 70            [24] 5833 	jnz	00120$
      001A23 E5*27            [12] 5834 	mov	a,_addr3
      001A25 45*28            [12] 5835 	orl	a,(_addr3 + 1)
      001A27 60 6A            [24] 5836 	jz	00120$
                                   5837 ;	ecen4330lab7.c:1778: addr2 = dataSize;
      001A29 85*1B*25         [24] 5838 	mov	_addr2,_dataSize
      001A2C 85*1C*26         [24] 5839 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5840 ;	ecen4330lab7.c:1779: HEXtoASCII_16write(currAddr0);
      001A2F 85*29 82         [24] 5841 	mov	dpl,_currAddr0
      001A32 85*2A 83         [24] 5842 	mov	dph,(_currAddr0 + 1)
      001A35 12r0DrEC         [24] 5843 	lcall	_HEXtoASCII_16write
                                   5844 ;	ecen4330lab7.c:1780: LCD_string_write(": 0x");
      001A38 90r06r42         [24] 5845 	mov	dptr,#___str_16
      001A3B 75 F0 80         [24] 5846 	mov	b,#0x80
      001A3E 12r0Br3F         [24] 5847 	lcall	_LCD_string_write
                                   5848 ;	ecen4330lab7.c:1781: for(j = 0; j < addr3; j++){
      001A41 7E 00            [12] 5849 	mov	r6,#0x00
      001A43 7F 00            [12] 5850 	mov	r7,#0x00
      001A45                       5851 00149$:
      001A45 8E 04            [24] 5852 	mov	ar4,r6
      001A47 8F 05            [24] 5853 	mov	ar5,r7
      001A49 C3               [12] 5854 	clr	c
      001A4A EC               [12] 5855 	mov	a,r4
      001A4B 95*27            [12] 5856 	subb	a,_addr3
      001A4D ED               [12] 5857 	mov	a,r5
      001A4E 95*28            [12] 5858 	subb	a,(_addr3 + 1)
      001A50 50 23            [24] 5859 	jnc	00110$
                                   5860 ;	ecen4330lab7.c:1782: HEXtoASCII_8write(RAMread(currAddr0));
      001A52 85*29 82         [24] 5861 	mov	dpl,_currAddr0
      001A55 85*2A 83         [24] 5862 	mov	dph,(_currAddr0 + 1)
      001A58 C0 07            [24] 5863 	push	ar7
      001A5A C0 06            [24] 5864 	push	ar6
      001A5C 12r0ErC0         [24] 5865 	lcall	_RAMread
      001A5F 12r0DrAF         [24] 5866 	lcall	_HEXtoASCII_8write
      001A62 D0 06            [24] 5867 	pop	ar6
      001A64 D0 07            [24] 5868 	pop	ar7
                                   5869 ;	ecen4330lab7.c:1783: currAddr0++;
      001A66 05*29            [12] 5870 	inc	_currAddr0
      001A68 E4               [12] 5871 	clr	a
      001A69 B5*29 02         [24] 5872 	cjne	a,_currAddr0,00281$
      001A6C 05*2A            [12] 5873 	inc	(_currAddr0 + 1)
      001A6E                       5874 00281$:
                                   5875 ;	ecen4330lab7.c:1781: for(j = 0; j < addr3; j++){
      001A6E 0E               [12] 5876 	inc	r6
      001A6F BE 00 D3         [24] 5877 	cjne	r6,#0x00,00149$
      001A72 0F               [12] 5878 	inc	r7
      001A73 80 D0            [24] 5879 	sjmp	00149$
      001A75                       5880 00110$:
                                   5881 ;	ecen4330lab7.c:1785: LCD_string_write("\n");
      001A75 90r08r1A         [24] 5882 	mov	dptr,#___str_35
      001A78 75 F0 80         [24] 5883 	mov	b,#0x80
      001A7B 12r0Br3F         [24] 5884 	lcall	_LCD_string_write
                                   5885 ;	ecen4330lab7.c:1786: currAddr1++; 
      001A7E 05*2B            [12] 5886 	inc	_currAddr1
      001A80 E4               [12] 5887 	clr	a
      001A81 B5*2B 02         [24] 5888 	cjne	a,_currAddr1,00283$
      001A84 05*2C            [12] 5889 	inc	(_currAddr1 + 1)
      001A86                       5890 00283$:
                                   5891 ;	ecen4330lab7.c:1787: currAddr0 -= addr3;
      001A86 E5*29            [12] 5892 	mov	a,_currAddr0
      001A88 C3               [12] 5893 	clr	c
      001A89 95*27            [12] 5894 	subb	a,_addr3
      001A8B F5*29            [12] 5895 	mov	_currAddr0,a
      001A8D E5*2A            [12] 5896 	mov	a,(_currAddr0 + 1)
      001A8F 95*28            [12] 5897 	subb	a,(_addr3 + 1)
      001A91 F5*2A            [12] 5898 	mov	(_currAddr0 + 1),a
      001A93                       5899 00120$:
                                   5900 ;	ecen4330lab7.c:1791: setCursor(0, 250);
      001A93 75*00 FA         [24] 5901 	mov	_setCursor_PARM_2,#0xfa
      001A96 75*01 00         [24] 5902 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A99 90 00 00         [24] 5903 	mov	dptr,#0x0000
      001A9C 12r04r43         [24] 5904 	lcall	_setCursor
                                   5905 ;	ecen4330lab7.c:1792: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001A9F 90r08r1C         [24] 5906 	mov	dptr,#___str_36
      001AA2 75 F0 80         [24] 5907 	mov	b,#0x80
      001AA5 12r0Br3F         [24] 5908 	lcall	_LCD_string_write
                                   5909 ;	ecen4330lab7.c:1793: HEXtoASCII_16write(currAddr1);
      001AA8 85*2B 82         [24] 5910 	mov	dpl,_currAddr1
      001AAB 85*2C 83         [24] 5911 	mov	dph,(_currAddr1 + 1)
      001AAE 12r0DrEC         [24] 5912 	lcall	_HEXtoASCII_16write
                                   5913 ;	ecen4330lab7.c:1794: key = keyDetect();
      001AB1 12r0Br7E         [24] 5914 	lcall	_keyDetect
      001AB4 85 82*16         [24] 5915 	mov	_key,dpl
                                   5916 ;	ecen4330lab7.c:1795: switch (key)
      001AB7 74 30            [12] 5917 	mov	a,#0x30
      001AB9 B5*16 02         [24] 5918 	cjne	a,_key,00284$
      001ABC 80 12            [24] 5919 	sjmp	00121$
      001ABE                       5920 00284$:
      001ABE 74 31            [12] 5921 	mov	a,#0x31
      001AC0 B5*16 02         [24] 5922 	cjne	a,_key,00285$
      001AC3 80 65            [24] 5923 	sjmp	00125$
      001AC5                       5924 00285$:
      001AC5 74 45            [12] 5925 	mov	a,#0x45
      001AC7 B5*16 03         [24] 5926 	cjne	a,_key,00286$
      001ACA 02r1BrC7         [24] 5927 	ljmp	00129$
      001ACD                       5928 00286$:
      001ACD 02r1BrDE         [24] 5929 	ljmp	00130$
                                   5930 ;	ecen4330lab7.c:1799: case '0':
      001AD0                       5931 00121$:
                                   5932 ;	ecen4330lab7.c:1800: validInput = 1;
      001AD0 75*1D 01         [24] 5933 	mov	_validInput,#0x01
                                   5934 ;	ecen4330lab7.c:1803: if(dataSize > 0){
      001AD3 E5*1B            [12] 5935 	mov	a,_dataSize
      001AD5 45*1C            [12] 5936 	orl	a,(_dataSize + 1)
      001AD7 60 06            [24] 5937 	jz	00123$
                                   5938 ;	ecen4330lab7.c:1804: dataEnd = 0;
      001AD9 75*1E 00         [24] 5939 	mov	_dataEnd,#0x00
      001ADC 02r1Cr22         [24] 5940 	ljmp	00135$
      001ADF                       5941 00123$:
                                   5942 ;	ecen4330lab7.c:1810: dataEnd = 0;
      001ADF 75*1E 00         [24] 5943 	mov	_dataEnd,#0x00
                                   5944 ;	ecen4330lab7.c:1811: currAddr0 -= (addr2 * dataType); // 1st address of previous page displayed
      001AE2 85*1A*00         [24] 5945 	mov	__mulint_PARM_2,_dataType
      001AE5 75*01 00         [24] 5946 	mov	(__mulint_PARM_2 + 1),#0x00
      001AE8 85*25 82         [24] 5947 	mov	dpl,_addr2
      001AEB 85*26 83         [24] 5948 	mov	dph,(_addr2 + 1)
      001AEE 12r00r00         [24] 5949 	lcall	__mulint
      001AF1 AE 82            [24] 5950 	mov	r6,dpl
      001AF3 AF 83            [24] 5951 	mov	r7,dph
      001AF5 E5*29            [12] 5952 	mov	a,_currAddr0
      001AF7 C3               [12] 5953 	clr	c
      001AF8 9E               [12] 5954 	subb	a,r6
      001AF9 F5*29            [12] 5955 	mov	_currAddr0,a
      001AFB E5*2A            [12] 5956 	mov	a,(_currAddr0 + 1)
      001AFD 9F               [12] 5957 	subb	a,r7
      001AFE F5*2A            [12] 5958 	mov	(_currAddr0 + 1),a
                                   5959 ;	ecen4330lab7.c:1812: dataSize += addr2;  // restore data size of previous page
      001B00 E5*25            [12] 5960 	mov	a,_addr2
      001B02 25*1B            [12] 5961 	add	a,_dataSize
      001B04 F5*1B            [12] 5962 	mov	_dataSize,a
      001B06 E5*26            [12] 5963 	mov	a,(_addr2 + 1)
      001B08 35*1C            [12] 5964 	addc	a,(_dataSize + 1)
      001B0A F5*1C            [12] 5965 	mov	(_dataSize + 1),a
                                   5966 ;	ecen4330lab7.c:1813: currAddr1--;
      001B0C 15*2B            [12] 5967 	dec	_currAddr1
      001B0E 74 FF            [12] 5968 	mov	a,#0xff
      001B10 B5*2B 02         [24] 5969 	cjne	a,_currAddr1,00288$
      001B13 15*2C            [12] 5970 	dec	(_currAddr1 + 1)
      001B15                       5971 00288$:
                                   5972 ;	ecen4330lab7.c:1814: resetLCD();
      001B15 12r0ErD3         [24] 5973 	lcall	_resetLCD
                                   5974 ;	ecen4330lab7.c:1815: LCD_string_write("\nEnd of Data.");
      001B18 90r08r4D         [24] 5975 	mov	dptr,#___str_37
      001B1B 75 F0 80         [24] 5976 	mov	b,#0x80
      001B1E 12r0Br3F         [24] 5977 	lcall	_LCD_string_write
                                   5978 ;	ecen4330lab7.c:1816: delay(200);
      001B21 90 00 C8         [24] 5979 	mov	dptr,#0x00c8
      001B24 12r01r9F         [24] 5980 	lcall	_delay
                                   5981 ;	ecen4330lab7.c:1818: break;
      001B27 02r1Cr22         [24] 5982 	ljmp	00135$
                                   5983 ;	ecen4330lab7.c:1821: case '1':
      001B2A                       5984 00125$:
                                   5985 ;	ecen4330lab7.c:1824: if(currAddr1 > 1){
      001B2A C3               [12] 5986 	clr	c
      001B2B 74 01            [12] 5987 	mov	a,#0x01
      001B2D 95*2B            [12] 5988 	subb	a,_currAddr1
      001B2F E4               [12] 5989 	clr	a
      001B30 95*2C            [12] 5990 	subb	a,(_currAddr1 + 1)
      001B32 50 49            [24] 5991 	jnc	00127$
                                   5992 ;	ecen4330lab7.c:1825: dataEnd = 0;
      001B34 75*1E 00         [24] 5993 	mov	_dataEnd,#0x00
                                   5994 ;	ecen4330lab7.c:1826: currAddr0 -= ((addr2 + 10) * dataType);
      001B37 74 0A            [12] 5995 	mov	a,#0x0a
      001B39 25*25            [12] 5996 	add	a,_addr2
      001B3B FE               [12] 5997 	mov	r6,a
      001B3C E4               [12] 5998 	clr	a
      001B3D 35*26            [12] 5999 	addc	a,(_addr2 + 1)
      001B3F FF               [12] 6000 	mov	r7,a
      001B40 85*1A*00         [24] 6001 	mov	__mulint_PARM_2,_dataType
      001B43 75*01 00         [24] 6002 	mov	(__mulint_PARM_2 + 1),#0x00
      001B46 8E 82            [24] 6003 	mov	dpl,r6
      001B48 8F 83            [24] 6004 	mov	dph,r7
      001B4A C0 07            [24] 6005 	push	ar7
      001B4C C0 06            [24] 6006 	push	ar6
      001B4E 12r00r00         [24] 6007 	lcall	__mulint
      001B51 AC 82            [24] 6008 	mov	r4,dpl
      001B53 AD 83            [24] 6009 	mov	r5,dph
      001B55 D0 06            [24] 6010 	pop	ar6
      001B57 D0 07            [24] 6011 	pop	ar7
      001B59 E5*29            [12] 6012 	mov	a,_currAddr0
      001B5B C3               [12] 6013 	clr	c
      001B5C 9C               [12] 6014 	subb	a,r4
      001B5D F5*29            [12] 6015 	mov	_currAddr0,a
      001B5F E5*2A            [12] 6016 	mov	a,(_currAddr0 + 1)
      001B61 9D               [12] 6017 	subb	a,r5
      001B62 F5*2A            [12] 6018 	mov	(_currAddr0 + 1),a
                                   6019 ;	ecen4330lab7.c:1827: currAddr1 -= 2;
      001B64 E5*2B            [12] 6020 	mov	a,_currAddr1
      001B66 24 FE            [12] 6021 	add	a,#0xfe
      001B68 F5*2B            [12] 6022 	mov	_currAddr1,a
      001B6A E5*2C            [12] 6023 	mov	a,(_currAddr1 + 1)
      001B6C 34 FF            [12] 6024 	addc	a,#0xff
      001B6E F5*2C            [12] 6025 	mov	(_currAddr1 + 1),a
                                   6026 ;	ecen4330lab7.c:1828: dataSize += (addr2 + 10);
      001B70 EE               [12] 6027 	mov	a,r6
      001B71 25*1B            [12] 6028 	add	a,_dataSize
      001B73 F5*1B            [12] 6029 	mov	_dataSize,a
      001B75 EF               [12] 6030 	mov	a,r7
      001B76 35*1C            [12] 6031 	addc	a,(_dataSize + 1)
      001B78 F5*1C            [12] 6032 	mov	(_dataSize + 1),a
      001B7A 02r1Cr22         [24] 6033 	ljmp	00135$
      001B7D                       6034 00127$:
                                   6035 ;	ecen4330lab7.c:1833: dataEnd = 0;
      001B7D 75*1E 00         [24] 6036 	mov	_dataEnd,#0x00
                                   6037 ;	ecen4330lab7.c:1834: resetLCD();
      001B80 12r0ErD3         [24] 6038 	lcall	_resetLCD
                                   6039 ;	ecen4330lab7.c:1835: LCD_string_write("End of Data");
      001B83 90r08r5B         [24] 6040 	mov	dptr,#___str_38
      001B86 75 F0 80         [24] 6041 	mov	b,#0x80
      001B89 12r0Br3F         [24] 6042 	lcall	_LCD_string_write
                                   6043 ;	ecen4330lab7.c:1836: delay(200);
      001B8C 90 00 C8         [24] 6044 	mov	dptr,#0x00c8
      001B8F 12r01r9F         [24] 6045 	lcall	_delay
                                   6046 ;	ecen4330lab7.c:1837: currAddr0 -= (addr2 * dataType);
      001B92 85*1A*00         [24] 6047 	mov	__mulint_PARM_2,_dataType
      001B95 75*01 00         [24] 6048 	mov	(__mulint_PARM_2 + 1),#0x00
      001B98 85*25 82         [24] 6049 	mov	dpl,_addr2
      001B9B 85*26 83         [24] 6050 	mov	dph,(_addr2 + 1)
      001B9E 12r00r00         [24] 6051 	lcall	__mulint
      001BA1 AE 82            [24] 6052 	mov	r6,dpl
      001BA3 AF 83            [24] 6053 	mov	r7,dph
      001BA5 E5*29            [12] 6054 	mov	a,_currAddr0
      001BA7 C3               [12] 6055 	clr	c
      001BA8 9E               [12] 6056 	subb	a,r6
      001BA9 F5*29            [12] 6057 	mov	_currAddr0,a
      001BAB E5*2A            [12] 6058 	mov	a,(_currAddr0 + 1)
      001BAD 9F               [12] 6059 	subb	a,r7
      001BAE F5*2A            [12] 6060 	mov	(_currAddr0 + 1),a
                                   6061 ;	ecen4330lab7.c:1838: currAddr1--;
      001BB0 15*2B            [12] 6062 	dec	_currAddr1
      001BB2 74 FF            [12] 6063 	mov	a,#0xff
      001BB4 B5*2B 02         [24] 6064 	cjne	a,_currAddr1,00290$
      001BB7 15*2C            [12] 6065 	dec	(_currAddr1 + 1)
      001BB9                       6066 00290$:
                                   6067 ;	ecen4330lab7.c:1839: dataSize += addr2;
      001BB9 E5*25            [12] 6068 	mov	a,_addr2
      001BBB 25*1B            [12] 6069 	add	a,_dataSize
      001BBD F5*1B            [12] 6070 	mov	_dataSize,a
      001BBF E5*26            [12] 6071 	mov	a,(_addr2 + 1)
      001BC1 35*1C            [12] 6072 	addc	a,(_dataSize + 1)
      001BC3 F5*1C            [12] 6073 	mov	(_dataSize + 1),a
                                   6074 ;	ecen4330lab7.c:1841: break;
                                   6075 ;	ecen4330lab7.c:1844: case 'E':
      001BC5 80 5B            [24] 6076 	sjmp	00135$
      001BC7                       6077 00129$:
                                   6078 ;	ecen4330lab7.c:1845: resetLCD();
      001BC7 12r0ErD3         [24] 6079 	lcall	_resetLCD
                                   6080 ;	ecen4330lab7.c:1846: LCD_string_write("\nReturning to\nMain Menu.");
      001BCA 90r08r67         [24] 6081 	mov	dptr,#___str_39
      001BCD 75 F0 80         [24] 6082 	mov	b,#0x80
      001BD0 12r0Br3F         [24] 6083 	lcall	_LCD_string_write
                                   6084 ;	ecen4330lab7.c:1847: delay(200);
      001BD3 90 00 C8         [24] 6085 	mov	dptr,#0x00c8
      001BD6 12r01r9F         [24] 6086 	lcall	_delay
                                   6087 ;	ecen4330lab7.c:1848: dataEnd = 1;
      001BD9 75*1E 01         [24] 6088 	mov	_dataEnd,#0x01
                                   6089 ;	ecen4330lab7.c:1849: break;
                                   6090 ;	ecen4330lab7.c:1852: default:
      001BDC 80 44            [24] 6091 	sjmp	00135$
      001BDE                       6092 00130$:
                                   6093 ;	ecen4330lab7.c:1853: dataEnd = 0;
      001BDE 75*1E 00         [24] 6094 	mov	_dataEnd,#0x00
                                   6095 ;	ecen4330lab7.c:1854: invalidInput();
      001BE1 12r0ErFB         [24] 6096 	lcall	_invalidInput
                                   6097 ;	ecen4330lab7.c:1855: if(addr2 > 0 ){
      001BE4 E5*25            [12] 6098 	mov	a,_addr2
      001BE6 45*26            [12] 6099 	orl	a,(_addr2 + 1)
      001BE8 60 38            [24] 6100 	jz	00135$
                                   6101 ;	ecen4330lab7.c:1856: currAddr0 -= (addr2 * dataType);
      001BEA 85*1A*00         [24] 6102 	mov	__mulint_PARM_2,_dataType
      001BED 75*01 00         [24] 6103 	mov	(__mulint_PARM_2 + 1),#0x00
      001BF0 85*25 82         [24] 6104 	mov	dpl,_addr2
      001BF3 85*26 83         [24] 6105 	mov	dph,(_addr2 + 1)
      001BF6 12r00r00         [24] 6106 	lcall	__mulint
      001BF9 AE 82            [24] 6107 	mov	r6,dpl
      001BFB AF 83            [24] 6108 	mov	r7,dph
      001BFD E5*29            [12] 6109 	mov	a,_currAddr0
      001BFF C3               [12] 6110 	clr	c
      001C00 9E               [12] 6111 	subb	a,r6
      001C01 F5*29            [12] 6112 	mov	_currAddr0,a
      001C03 E5*2A            [12] 6113 	mov	a,(_currAddr0 + 1)
      001C05 9F               [12] 6114 	subb	a,r7
      001C06 F5*2A            [12] 6115 	mov	(_currAddr0 + 1),a
                                   6116 ;	ecen4330lab7.c:1857: currAddr1 --;
      001C08 15*2B            [12] 6117 	dec	_currAddr1
      001C0A 74 FF            [12] 6118 	mov	a,#0xff
      001C0C B5*2B 02         [24] 6119 	cjne	a,_currAddr1,00292$
      001C0F 15*2C            [12] 6120 	dec	(_currAddr1 + 1)
      001C11                       6121 00292$:
                                   6122 ;	ecen4330lab7.c:1858: dataSize += addr2;
      001C11 E5*25            [12] 6123 	mov	a,_addr2
      001C13 25*1B            [12] 6124 	add	a,_dataSize
      001C15 F5*1B            [12] 6125 	mov	_dataSize,a
      001C17 E5*26            [12] 6126 	mov	a,(_addr2 + 1)
      001C19 35*1C            [12] 6127 	addc	a,(_dataSize + 1)
      001C1B F5*1C            [12] 6128 	mov	(_dataSize + 1),a
                                   6129 ;	ecen4330lab7.c:1859: addr2 = 0;
      001C1D E4               [12] 6130 	clr	a
      001C1E F5*25            [12] 6131 	mov	_addr2,a
      001C20 F5*26            [12] 6132 	mov	(_addr2 + 1),a
                                   6133 ;	ecen4330lab7.c:1862: }
      001C22                       6134 00135$:
                                   6135 ;	ecen4330lab7.c:1863: } while(dataEnd == 0);
      001C22 E5*1E            [12] 6136 	mov	a,_dataEnd
      001C24 70 03            [24] 6137 	jnz	00293$
      001C26 02r18r70         [24] 6138 	ljmp	00134$
      001C29                       6139 00293$:
                                   6140 ;	ecen4330lab7.c:1864: }
      001C29 22               [24] 6141 	ret
                                   6142 ;------------------------------------------------------------
                                   6143 ;Allocation info for local variables in function 'DUMP'
                                   6144 ;------------------------------------------------------------
                                   6145 ;	ecen4330lab7.c:1872: void DUMP(){
                                   6146 ;	-----------------------------------------
                                   6147 ;	 function DUMP
                                   6148 ;	-----------------------------------------
      001C2A                       6149 _DUMP:
                                   6150 ;	ecen4330lab7.c:1873: endAddrCalc = 0;
      001C2A E4               [12] 6151 	clr	a
      001C2B F5*34            [12] 6152 	mov	_endAddrCalc,a
      001C2D F5*35            [12] 6153 	mov	(_endAddrCalc + 1),a
      001C2F F5*36            [12] 6154 	mov	(_endAddrCalc + 2),a
      001C31 F5*37            [12] 6155 	mov	(_endAddrCalc + 3),a
                                   6156 ;	ecen4330lab7.c:1874: addr0 = 0;                      // Source Address
      001C33 F5*21            [12] 6157 	mov	_addr0,a
      001C35 F5*22            [12] 6158 	mov	(_addr0 + 1),a
                                   6159 ;	ecen4330lab7.c:1875: addr1 = 0;                      // Source End Address
      001C37 F5*23            [12] 6160 	mov	_addr1,a
      001C39 F5*24            [12] 6161 	mov	(_addr1 + 1),a
                                   6162 ;	ecen4330lab7.c:1876: dataType = 0;                   // Data Type
                                   6163 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001C3B F5*1A            [12] 6164 	mov	_dataType,a
                                   6165 ;	ecen4330lab7.c:1877: dataSize = 0;                   // Data Size
      001C3D F5*1B            [12] 6166 	mov	_dataSize,a
      001C3F F5*1C            [12] 6167 	mov	(_dataSize + 1),a
                                   6168 ;	ecen4330lab7.c:1878: addr3 = 0;						// Remainder
      001C41 F5*27            [12] 6169 	mov	_addr3,a
      001C43 F5*28            [12] 6170 	mov	(_addr3 + 1),a
                                   6171 ;	ecen4330lab7.c:1881: resetLCD();
      001C45 12r0ErD3         [24] 6172 	lcall	_resetLCD
                                   6173 ;	ecen4330lab7.c:1882: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n  0x____");
      001C48 90r08r80         [24] 6174 	mov	dptr,#___str_40
      001C4B 75 F0 80         [24] 6175 	mov	b,#0x80
      001C4E 12r0Br3F         [24] 6176 	lcall	_LCD_string_write
                                   6177 ;	ecen4330lab7.c:1883: cursor_x -= 4 * textsize * 6;
      001C51 E5*0C            [12] 6178 	mov	a,_textsize
      001C53 75 F0 18         [24] 6179 	mov	b,#0x18
      001C56 A4               [48] 6180 	mul	ab
      001C57 FE               [12] 6181 	mov	r6,a
      001C58 AF F0            [24] 6182 	mov	r7,b
      001C5A E5*08            [12] 6183 	mov	a,_cursor_x
      001C5C C3               [12] 6184 	clr	c
      001C5D 9E               [12] 6185 	subb	a,r6
      001C5E F5*08            [12] 6186 	mov	_cursor_x,a
      001C60 E5*09            [12] 6187 	mov	a,(_cursor_x + 1)
      001C62 9F               [12] 6188 	subb	a,r7
      001C63 F5*09            [12] 6189 	mov	(_cursor_x + 1),a
                                   6190 ;	ecen4330lab7.c:1884: inputRead16();                  // Read input
      001C65 12r0Fr24         [24] 6191 	lcall	_inputRead16
                                   6192 ;	ecen4330lab7.c:1885: addr0 = input16;                // Set starting address
      001C68 85*17*21         [24] 6193 	mov	_addr0,_input16
      001C6B 85*18*22         [24] 6194 	mov	(_addr0 + 1),(_input16 + 1)
                                   6195 ;	ecen4330lab7.c:1888: inputDataType();                // Prompt & read input
      001C6E 12r10r33         [24] 6196 	lcall	_inputDataType
                                   6197 ;	ecen4330lab7.c:1891: resetLCD();
      001C71 12r0ErD3         [24] 6198 	lcall	_resetLCD
                                   6199 ;	ecen4330lab7.c:1892: inputDataSize();                // Prompt & read input
      001C74 12r10rF0         [24] 6200 	lcall	_inputDataSize
                                   6201 ;	ecen4330lab7.c:1895: endAddrCalc = addr0 + (dataType * dataSize);
      001C77 AE*1A            [24] 6202 	mov	r6,_dataType
      001C79 7F 00            [12] 6203 	mov	r7,#0x00
      001C7B 85*1B*00         [24] 6204 	mov	__mulint_PARM_2,_dataSize
      001C7E 85*1C*01         [24] 6205 	mov	(__mulint_PARM_2 + 1),(_dataSize + 1)
      001C81 8E 82            [24] 6206 	mov	dpl,r6
      001C83 8F 83            [24] 6207 	mov	dph,r7
      001C85 C0 07            [24] 6208 	push	ar7
      001C87 C0 06            [24] 6209 	push	ar6
      001C89 12r00r00         [24] 6210 	lcall	__mulint
      001C8C AC 82            [24] 6211 	mov	r4,dpl
      001C8E AD 83            [24] 6212 	mov	r5,dph
      001C90 D0 06            [24] 6213 	pop	ar6
      001C92 D0 07            [24] 6214 	pop	ar7
      001C94 EC               [12] 6215 	mov	a,r4
      001C95 25*21            [12] 6216 	add	a,_addr0
      001C97 FA               [12] 6217 	mov	r2,a
      001C98 ED               [12] 6218 	mov	a,r5
      001C99 35*22            [12] 6219 	addc	a,(_addr0 + 1)
      001C9B FB               [12] 6220 	mov	r3,a
      001C9C 8A*34            [24] 6221 	mov	_endAddrCalc,r2
      001C9E 8B*35            [24] 6222 	mov	(_endAddrCalc + 1),r3
      001CA0 75*36 00         [24] 6223 	mov	(_endAddrCalc + 2),#0x00
      001CA3 75*37 00         [24] 6224 	mov	(_endAddrCalc + 3),#0x00
                                   6225 ;	ecen4330lab7.c:1896: if(endAddrCalc < addr0){ // RAM overflow
      001CA6 A8*21            [24] 6226 	mov	r0,_addr0
      001CA8 A9*22            [24] 6227 	mov	r1,(_addr0 + 1)
      001CAA 7A 00            [12] 6228 	mov	r2,#0x00
      001CAC 7B 00            [12] 6229 	mov	r3,#0x00
      001CAE C3               [12] 6230 	clr	c
      001CAF E5*34            [12] 6231 	mov	a,_endAddrCalc
      001CB1 98               [12] 6232 	subb	a,r0
      001CB2 E5*35            [12] 6233 	mov	a,(_endAddrCalc + 1)
      001CB4 99               [12] 6234 	subb	a,r1
      001CB5 E5*36            [12] 6235 	mov	a,(_endAddrCalc + 2)
      001CB7 9A               [12] 6236 	subb	a,r2
      001CB8 E5*37            [12] 6237 	mov	a,(_endAddrCalc + 3)
      001CBA 9B               [12] 6238 	subb	a,r3
      001CBB 50 08            [24] 6239 	jnc	00102$
                                   6240 ;	ecen4330lab7.c:1897: addr1 = 0xFFFF;             // Set end address
      001CBD 75*23 FF         [24] 6241 	mov	_addr1,#0xff
      001CC0 75*24 FF         [24] 6242 	mov	(_addr1 + 1),#0xff
      001CC3 80 12            [24] 6243 	sjmp	00103$
      001CC5                       6244 00102$:
                                   6245 ;	ecen4330lab7.c:1900: addr1 = addr0 + (dataType * dataSize) - 1;
      001CC5 EC               [12] 6246 	mov	a,r4
      001CC6 25*21            [12] 6247 	add	a,_addr0
      001CC8 FC               [12] 6248 	mov	r4,a
      001CC9 ED               [12] 6249 	mov	a,r5
      001CCA 35*22            [12] 6250 	addc	a,(_addr0 + 1)
      001CCC FD               [12] 6251 	mov	r5,a
      001CCD EC               [12] 6252 	mov	a,r4
      001CCE 24 FF            [12] 6253 	add	a,#0xff
      001CD0 F5*23            [12] 6254 	mov	_addr1,a
      001CD2 ED               [12] 6255 	mov	a,r5
      001CD3 34 FF            [12] 6256 	addc	a,#0xff
      001CD5 F5*24            [12] 6257 	mov	(_addr1 + 1),a
      001CD7                       6258 00103$:
                                   6259 ;	ecen4330lab7.c:1902: dataSize = ((addr1 - addr0) + 1) / dataType;   // Recalculate data size
      001CD7 E5*23            [12] 6260 	mov	a,_addr1
      001CD9 C3               [12] 6261 	clr	c
      001CDA 95*21            [12] 6262 	subb	a,_addr0
      001CDC FC               [12] 6263 	mov	r4,a
      001CDD E5*24            [12] 6264 	mov	a,(_addr1 + 1)
      001CDF 95*22            [12] 6265 	subb	a,(_addr0 + 1)
      001CE1 FD               [12] 6266 	mov	r5,a
      001CE2 0C               [12] 6267 	inc	r4
      001CE3 BC 00 01         [24] 6268 	cjne	r4,#0x00,00111$
      001CE6 0D               [12] 6269 	inc	r5
      001CE7                       6270 00111$:
      001CE7 8E*00            [24] 6271 	mov	__divuint_PARM_2,r6
      001CE9 8F*01            [24] 6272 	mov	(__divuint_PARM_2 + 1),r7
      001CEB 8C 82            [24] 6273 	mov	dpl,r4
      001CED 8D 83            [24] 6274 	mov	dph,r5
      001CEF C0 07            [24] 6275 	push	ar7
      001CF1 C0 06            [24] 6276 	push	ar6
      001CF3 C0 05            [24] 6277 	push	ar5
      001CF5 C0 04            [24] 6278 	push	ar4
      001CF7 12r00r00         [24] 6279 	lcall	__divuint
      001CFA 85 82*1B         [24] 6280 	mov	_dataSize,dpl
      001CFD 85 83*1C         [24] 6281 	mov	(_dataSize + 1),dph
      001D00 D0 04            [24] 6282 	pop	ar4
      001D02 D0 05            [24] 6283 	pop	ar5
      001D04 D0 06            [24] 6284 	pop	ar6
      001D06 D0 07            [24] 6285 	pop	ar7
                                   6286 ;	ecen4330lab7.c:1903: addr3 = ((addr1 - addr0) + 1) % dataType;
      001D08 8E*00            [24] 6287 	mov	__moduint_PARM_2,r6
      001D0A 8F*01            [24] 6288 	mov	(__moduint_PARM_2 + 1),r7
      001D0C 8C 82            [24] 6289 	mov	dpl,r4
      001D0E 8D 83            [24] 6290 	mov	dph,r5
      001D10 12r00r00         [24] 6291 	lcall	__moduint
      001D13 85 82*27         [24] 6292 	mov	_addr3,dpl
      001D16 85 83*28         [24] 6293 	mov	(_addr3 + 1),dph
                                   6294 ;	ecen4330lab7.c:1922: DUMP_display();                 // Display dump data
                                   6295 ;	ecen4330lab7.c:1923: }
      001D19 02r18r5F         [24] 6296 	ljmp	_DUMP_display
                                   6297 ;------------------------------------------------------------
                                   6298 ;Allocation info for local variables in function 'EDIT_display'
                                   6299 ;------------------------------------------------------------
                                   6300 ;addr                      Allocated to registers r6 r7 
                                   6301 ;------------------------------------------------------------
                                   6302 ;	ecen4330lab7.c:1933: void EDIT_display(unsigned int addr){
                                   6303 ;	-----------------------------------------
                                   6304 ;	 function EDIT_display
                                   6305 ;	-----------------------------------------
      001D1C                       6306 _EDIT_display:
                                   6307 ;	ecen4330lab7.c:1936: data = RAMread(addr);
      001D1C AE 82            [24] 6308 	mov	r6,dpl
      001D1E AF 83            [24] 6309 	mov  r7,dph
      001D20 C0 07            [24] 6310 	push	ar7
      001D22 C0 06            [24] 6311 	push	ar6
      001D24 12r0ErC0         [24] 6312 	lcall	_RAMread
      001D27 85 82*20         [24] 6313 	mov	_data,dpl
                                   6314 ;	ecen4330lab7.c:1939: resetLCD();
      001D2A 12r0ErD3         [24] 6315 	lcall	_resetLCD
                                   6316 ;	ecen4330lab7.c:1940: LCD_string_write("\n");
      001D2D 90r08r1A         [24] 6317 	mov	dptr,#___str_35
      001D30 75 F0 80         [24] 6318 	mov	b,#0x80
      001D33 12r0Br3F         [24] 6319 	lcall	_LCD_string_write
      001D36 D0 06            [24] 6320 	pop	ar6
      001D38 D0 07            [24] 6321 	pop	ar7
                                   6322 ;	ecen4330lab7.c:1941: HEXtoASCII_16write(addr);
      001D3A 8E 82            [24] 6323 	mov	dpl,r6
      001D3C 8F 83            [24] 6324 	mov	dph,r7
      001D3E C0 07            [24] 6325 	push	ar7
      001D40 C0 06            [24] 6326 	push	ar6
      001D42 12r0DrEC         [24] 6327 	lcall	_HEXtoASCII_16write
                                   6328 ;	ecen4330lab7.c:1942: LCD_string_write(": 0x");
      001D45 90r06r42         [24] 6329 	mov	dptr,#___str_16
      001D48 75 F0 80         [24] 6330 	mov	b,#0x80
      001D4B 12r0Br3F         [24] 6331 	lcall	_LCD_string_write
                                   6332 ;	ecen4330lab7.c:1943: HEXtoASCII_8write(data);
      001D4E 85*20 82         [24] 6333 	mov	dpl,_data
      001D51 12r0DrAF         [24] 6334 	lcall	_HEXtoASCII_8write
                                   6335 ;	ecen4330lab7.c:1946: LCD_string_write("\n\nNew value:\n  0x__");
      001D54 90r08rAE         [24] 6336 	mov	dptr,#___str_41
      001D57 75 F0 80         [24] 6337 	mov	b,#0x80
      001D5A 12r0Br3F         [24] 6338 	lcall	_LCD_string_write
                                   6339 ;	ecen4330lab7.c:1947: cursor_x -= 2 * textsize * 6;
      001D5D E5*0C            [12] 6340 	mov	a,_textsize
      001D5F 75 F0 0C         [24] 6341 	mov	b,#0x0c
      001D62 A4               [48] 6342 	mul	ab
      001D63 FC               [12] 6343 	mov	r4,a
      001D64 AD F0            [24] 6344 	mov	r5,b
      001D66 E5*08            [12] 6345 	mov	a,_cursor_x
      001D68 C3               [12] 6346 	clr	c
      001D69 9C               [12] 6347 	subb	a,r4
      001D6A F5*08            [12] 6348 	mov	_cursor_x,a
      001D6C E5*09            [12] 6349 	mov	a,(_cursor_x + 1)
      001D6E 9D               [12] 6350 	subb	a,r5
      001D6F F5*09            [12] 6351 	mov	(_cursor_x + 1),a
                                   6352 ;	ecen4330lab7.c:1948: inputRead8();
      001D71 12r0FrDF         [24] 6353 	lcall	_inputRead8
      001D74 D0 06            [24] 6354 	pop	ar6
      001D76 D0 07            [24] 6355 	pop	ar7
                                   6356 ;	ecen4330lab7.c:1949: RAMwrite(addr, input8);
      001D78 85*19*00         [24] 6357 	mov	_RAMwrite_PARM_2,_input8
      001D7B 8E 82            [24] 6358 	mov	dpl,r6
      001D7D 8F 83            [24] 6359 	mov	dph,r7
      001D7F 12r0Er91         [24] 6360 	lcall	_RAMwrite
                                   6361 ;	ecen4330lab7.c:1952: LCD_string_write("\n\n\n\n(1) Edit next\nRAM location\n\n");
      001D82 90r08rC2         [24] 6362 	mov	dptr,#___str_42
      001D85 75 F0 80         [24] 6363 	mov	b,#0x80
      001D88 12r0Br3F         [24] 6364 	lcall	_LCD_string_write
                                   6365 ;	ecen4330lab7.c:1953: LCD_string_write("(E) End");
      001D8B 90r08rE3         [24] 6366 	mov	dptr,#___str_43
      001D8E 75 F0 80         [24] 6367 	mov	b,#0x80
                                   6368 ;	ecen4330lab7.c:1954: }
      001D91 02r0Br3F         [24] 6369 	ljmp	_LCD_string_write
                                   6370 ;------------------------------------------------------------
                                   6371 ;Allocation info for local variables in function 'EDIT'
                                   6372 ;------------------------------------------------------------
                                   6373 ;	ecen4330lab7.c:1966: void EDIT(){
                                   6374 ;	-----------------------------------------
                                   6375 ;	 function EDIT
                                   6376 ;	-----------------------------------------
      001D94                       6377 _EDIT:
                                   6378 ;	ecen4330lab7.c:1967: dataEnd = 0;
      001D94 75*1E 00         [24] 6379 	mov	_dataEnd,#0x00
                                   6380 ;	ecen4330lab7.c:1968: scrollEnd = 0;
      001D97 75*1F 00         [24] 6381 	mov	_scrollEnd,#0x00
                                   6382 ;	ecen4330lab7.c:1969: validInput = 0;
      001D9A 75*1D 00         [24] 6383 	mov	_validInput,#0x00
                                   6384 ;	ecen4330lab7.c:1972: resetLCD();
      001D9D 12r0ErD3         [24] 6385 	lcall	_resetLCD
                                   6386 ;	ecen4330lab7.c:1973: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001DA0 90r07r9A         [24] 6387 	mov	dptr,#___str_27
      001DA3 75 F0 80         [24] 6388 	mov	b,#0x80
      001DA6 12r0Br3F         [24] 6389 	lcall	_LCD_string_write
                                   6390 ;	ecen4330lab7.c:1974: cursor_x -= 4 * textsize * 6;
      001DA9 E5*0C            [12] 6391 	mov	a,_textsize
      001DAB 75 F0 18         [24] 6392 	mov	b,#0x18
      001DAE A4               [48] 6393 	mul	ab
      001DAF FE               [12] 6394 	mov	r6,a
      001DB0 AF F0            [24] 6395 	mov	r7,b
      001DB2 E5*08            [12] 6396 	mov	a,_cursor_x
      001DB4 C3               [12] 6397 	clr	c
      001DB5 9E               [12] 6398 	subb	a,r6
      001DB6 F5*08            [12] 6399 	mov	_cursor_x,a
      001DB8 E5*09            [12] 6400 	mov	a,(_cursor_x + 1)
      001DBA 9F               [12] 6401 	subb	a,r7
      001DBB F5*09            [12] 6402 	mov	(_cursor_x + 1),a
                                   6403 ;	ecen4330lab7.c:1977: inputRead16();
      001DBD 12r0Fr24         [24] 6404 	lcall	_inputRead16
                                   6405 ;	ecen4330lab7.c:1980: while(scrollEnd == 0 && dataEnd == 0){
      001DC0                       6406 00112$:
      001DC0 E5*1F            [12] 6407 	mov	a,_scrollEnd
      001DC2 70 52            [24] 6408 	jnz	00114$
      001DC4 E5*1E            [12] 6409 	mov	a,_dataEnd
      001DC6 70 4E            [24] 6410 	jnz	00114$
                                   6411 ;	ecen4330lab7.c:1983: do
      001DC8                       6412 00108$:
                                   6413 ;	ecen4330lab7.c:1985: EDIT_display(input16);
      001DC8 85*17 82         [24] 6414 	mov	dpl,_input16
      001DCB 85*18 83         [24] 6415 	mov	dph,(_input16 + 1)
      001DCE 12r1Dr1C         [24] 6416 	lcall	_EDIT_display
                                   6417 ;	ecen4330lab7.c:1986: key = keyDetect();
      001DD1 12r0Br7E         [24] 6418 	lcall	_keyDetect
      001DD4 85 82*16         [24] 6419 	mov	_key,dpl
                                   6420 ;	ecen4330lab7.c:1988: switch (key)
      001DD7 74 31            [12] 6421 	mov	a,#0x31
      001DD9 B5*16 02         [24] 6422 	cjne	a,_key,00153$
      001DDC 80 07            [24] 6423 	sjmp	00101$
      001DDE                       6424 00153$:
      001DDE 74 45            [12] 6425 	mov	a,#0x45
                                   6426 ;	ecen4330lab7.c:1992: case '1':
      001DE0 B5*16 27         [24] 6427 	cjne	a,_key,00106$
      001DE3 80 1D            [24] 6428 	sjmp	00105$
      001DE5                       6429 00101$:
                                   6430 ;	ecen4330lab7.c:1993: validInput = 1;
      001DE5 75*1D 01         [24] 6431 	mov	_validInput,#0x01
                                   6432 ;	ecen4330lab7.c:1996: if(input16 == 0xFFFF){
      001DE8 74 FF            [12] 6433 	mov	a,#0xff
      001DEA B5*17 08         [24] 6434 	cjne	a,_input16,00103$
      001DED B5*18 05         [24] 6435 	cjne	a,(_input16 + 1),00103$
                                   6436 ;	ecen4330lab7.c:1997: scrollEnd = 1;
      001DF0 75*1F 01         [24] 6437 	mov	_scrollEnd,#0x01
      001DF3 80 1B            [24] 6438 	sjmp	00109$
      001DF5                       6439 00103$:
                                   6440 ;	ecen4330lab7.c:2002: input16++;
      001DF5 05*17            [12] 6441 	inc	_input16
      001DF7 E4               [12] 6442 	clr	a
      001DF8 B5*17 02         [24] 6443 	cjne	a,_input16,00157$
      001DFB 05*18            [12] 6444 	inc	(_input16 + 1)
      001DFD                       6445 00157$:
                                   6446 ;	ecen4330lab7.c:2003: scrollEnd = 0;
      001DFD 75*1F 00         [24] 6447 	mov	_scrollEnd,#0x00
                                   6448 ;	ecen4330lab7.c:2005: break;
                                   6449 ;	ecen4330lab7.c:2008: case 'E':
      001E00 80 0E            [24] 6450 	sjmp	00109$
      001E02                       6451 00105$:
                                   6452 ;	ecen4330lab7.c:2009: validInput = 1;
      001E02 75*1D 01         [24] 6453 	mov	_validInput,#0x01
                                   6454 ;	ecen4330lab7.c:2010: dataEnd = 1;
      001E05 75*1E 01         [24] 6455 	mov	_dataEnd,#0x01
                                   6456 ;	ecen4330lab7.c:2011: break;
                                   6457 ;	ecen4330lab7.c:2014: default:
      001E08 80 06            [24] 6458 	sjmp	00109$
      001E0A                       6459 00106$:
                                   6460 ;	ecen4330lab7.c:2015: validInput = 0;
      001E0A 75*1D 00         [24] 6461 	mov	_validInput,#0x00
                                   6462 ;	ecen4330lab7.c:2016: invalidInput();
      001E0D 12r0ErFB         [24] 6463 	lcall	_invalidInput
                                   6464 ;	ecen4330lab7.c:2018: }
      001E10                       6465 00109$:
                                   6466 ;	ecen4330lab7.c:2019: } while (validInput == 0);
      001E10 E5*1D            [12] 6467 	mov	a,_validInput
      001E12 60 B4            [24] 6468 	jz	00108$
      001E14 80 AA            [24] 6469 	sjmp	00112$
      001E16                       6470 00114$:
                                   6471 ;	ecen4330lab7.c:2023: resetLCD();
      001E16 12r0ErD3         [24] 6472 	lcall	_resetLCD
                                   6473 ;	ecen4330lab7.c:2024: if(scrollEnd == 1){
      001E19 74 01            [12] 6474 	mov	a,#0x01
      001E1B B5*1F 14         [24] 6475 	cjne	a,_scrollEnd,00116$
                                   6476 ;	ecen4330lab7.c:2025: setTextColor(RED, BLACK);
      001E1E E4               [12] 6477 	clr	a
      001E1F F5*00            [12] 6478 	mov	_setTextColor_PARM_2,a
      001E21 F5*01            [12] 6479 	mov	(_setTextColor_PARM_2 + 1),a
      001E23 90 F8 00         [24] 6480 	mov	dptr,#0xf800
      001E26 12r04r50         [24] 6481 	lcall	_setTextColor
                                   6482 ;	ecen4330lab7.c:2026: LCD_string_write("\nEnd of data.\n");
      001E29 90r08rEB         [24] 6483 	mov	dptr,#___str_44
      001E2C 75 F0 80         [24] 6484 	mov	b,#0x80
      001E2F 12r0Br3F         [24] 6485 	lcall	_LCD_string_write
      001E32                       6486 00116$:
                                   6487 ;	ecen4330lab7.c:2030: setTextColor(WHITE, BLACK);
      001E32 E4               [12] 6488 	clr	a
      001E33 F5*00            [12] 6489 	mov	_setTextColor_PARM_2,a
      001E35 F5*01            [12] 6490 	mov	(_setTextColor_PARM_2 + 1),a
      001E37 90 FF FF         [24] 6491 	mov	dptr,#0xffff
      001E3A 12r04r50         [24] 6492 	lcall	_setTextColor
                                   6493 ;	ecen4330lab7.c:2031: LCD_string_write("\nReturning to\nmain menu.");
      001E3D 90r08rFA         [24] 6494 	mov	dptr,#___str_45
      001E40 75 F0 80         [24] 6495 	mov	b,#0x80
      001E43 12r0Br3F         [24] 6496 	lcall	_LCD_string_write
                                   6497 ;	ecen4330lab7.c:2032: delay(200);
      001E46 90 00 C8         [24] 6498 	mov	dptr,#0x00c8
                                   6499 ;	ecen4330lab7.c:2033: }
      001E49 02r01r9F         [24] 6500 	ljmp	_delay
                                   6501 ;------------------------------------------------------------
                                   6502 ;Allocation info for local variables in function 'FIND_display'
                                   6503 ;------------------------------------------------------------
                                   6504 ;	ecen4330lab7.c:2047: void FIND_display(){
                                   6505 ;	-----------------------------------------
                                   6506 ;	 function FIND_display
                                   6507 ;	-----------------------------------------
      001E4C                       6508 _FIND_display:
                                   6509 ;	ecen4330lab7.c:2048: addr2 = 0;						// first addr of page
      001E4C E4               [12] 6510 	clr	a
      001E4D F5*25            [12] 6511 	mov	_addr2,a
      001E4F F5*26            [12] 6512 	mov	(_addr2 + 1),a
                                   6513 ;	ecen4330lab7.c:2049: currAddr1 = 0;					// page count
      001E51 F5*2B            [12] 6514 	mov	_currAddr1,a
      001E53 F5*2C            [12] 6515 	mov	(_currAddr1 + 1),a
                                   6516 ;	ecen4330lab7.c:2050: resetLCD();
      001E55 12r0ErD3         [24] 6517 	lcall	_resetLCD
                                   6518 ;	ecen4330lab7.c:2051: currAddr0 = addr0;				// Load starting address
      001E58 85*21*29         [24] 6519 	mov	_currAddr0,_addr0
      001E5B 85*22*2A         [24] 6520 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   6521 ;	ecen4330lab7.c:2052: data = RAMread(currAddr0);		// Read data from starting address
      001E5E 85*29 82         [24] 6522 	mov	dpl,_currAddr0
      001E61 85*2A 83         [24] 6523 	mov	dph,(_currAddr0 + 1)
      001E64 12r0ErC0         [24] 6524 	lcall	_RAMread
      001E67 85 82*20         [24] 6525 	mov	_data,dpl
                                   6526 ;	ecen4330lab7.c:2055: while(data != byte1 && currAddr0 < addr1){
      001E6A                       6527 00102$:
      001E6A AE*20            [24] 6528 	mov	r6,_data
      001E6C 7F 00            [12] 6529 	mov	r7,#0x00
      001E6E EE               [12] 6530 	mov	a,r6
      001E6F B5*2F 06         [24] 6531 	cjne	a,_byte1,00235$
      001E72 EF               [12] 6532 	mov	a,r7
      001E73 B5*30 02         [24] 6533 	cjne	a,(_byte1 + 1),00235$
      001E76 80 21            [24] 6534 	sjmp	00104$
      001E78                       6535 00235$:
      001E78 C3               [12] 6536 	clr	c
      001E79 E5*29            [12] 6537 	mov	a,_currAddr0
      001E7B 95*23            [12] 6538 	subb	a,_addr1
      001E7D E5*2A            [12] 6539 	mov	a,(_currAddr0 + 1)
      001E7F 95*24            [12] 6540 	subb	a,(_addr1 + 1)
      001E81 50 16            [24] 6541 	jnc	00104$
                                   6542 ;	ecen4330lab7.c:2056: currAddr0++;				// Next RAM address
      001E83 05*29            [12] 6543 	inc	_currAddr0
      001E85 E4               [12] 6544 	clr	a
      001E86 B5*29 02         [24] 6545 	cjne	a,_currAddr0,00237$
      001E89 05*2A            [12] 6546 	inc	(_currAddr0 + 1)
      001E8B                       6547 00237$:
                                   6548 ;	ecen4330lab7.c:2057: data = RAMread(currAddr0);	// Read data from RAM
      001E8B 85*29 82         [24] 6549 	mov	dpl,_currAddr0
      001E8E 85*2A 83         [24] 6550 	mov	dph,(_currAddr0 + 1)
      001E91 12r0ErC0         [24] 6551 	lcall	_RAMread
      001E94 85 82*20         [24] 6552 	mov	_data,dpl
      001E97 80 D1            [24] 6553 	sjmp	00102$
      001E99                       6554 00104$:
                                   6555 ;	ecen4330lab7.c:2061: if(data != byte1 && currAddr0 == addr1){
      001E99 AE*20            [24] 6556 	mov	r6,_data
      001E9B 7F 00            [12] 6557 	mov	r7,#0x00
      001E9D EE               [12] 6558 	mov	a,r6
      001E9E B5*2F 06         [24] 6559 	cjne	a,_byte1,00238$
      001EA1 EF               [12] 6560 	mov	a,r7
      001EA2 B5*30 02         [24] 6561 	cjne	a,(_byte1 + 1),00238$
      001EA5 80 58            [24] 6562 	sjmp	00142$
      001EA7                       6563 00238$:
      001EA7 E5*23            [12] 6564 	mov	a,_addr1
      001EA9 B5*29 53         [24] 6565 	cjne	a,_currAddr0,00142$
      001EAC E5*24            [12] 6566 	mov	a,(_addr1 + 1)
      001EAE B5*2A 4E         [24] 6567 	cjne	a,(_currAddr0 + 1),00142$
                                   6568 ;	ecen4330lab7.c:2062: resetLCD();
      001EB1 12r0ErD3         [24] 6569 	lcall	_resetLCD
                                   6570 ;	ecen4330lab7.c:2063: LCD_string_write("\n0x");
      001EB4 90r07rDE         [24] 6571 	mov	dptr,#___str_29
      001EB7 75 F0 80         [24] 6572 	mov	b,#0x80
      001EBA 12r0Br3F         [24] 6573 	lcall	_LCD_string_write
                                   6574 ;	ecen4330lab7.c:2064: HEXtoASCII_8write(byte1);
      001EBD 85*2F 82         [24] 6575 	mov	dpl,_byte1
      001EC0 12r0DrAF         [24] 6576 	lcall	_HEXtoASCII_8write
                                   6577 ;	ecen4330lab7.c:2065: LCD_string_write(" not\nfound in\naddress range\n\n");
      001EC3 90r09r13         [24] 6578 	mov	dptr,#___str_46
      001EC6 75 F0 80         [24] 6579 	mov	b,#0x80
      001EC9 12r0Br3F         [24] 6580 	lcall	_LCD_string_write
                                   6581 ;	ecen4330lab7.c:2066: HEXtoASCII_16write(addr0);
      001ECC 85*21 82         [24] 6582 	mov	dpl,_addr0
      001ECF 85*22 83         [24] 6583 	mov	dph,(_addr0 + 1)
      001ED2 12r0DrEC         [24] 6584 	lcall	_HEXtoASCII_16write
                                   6585 ;	ecen4330lab7.c:2067: LCD_string_write(" -\n");
      001ED5 90r08r16         [24] 6586 	mov	dptr,#___str_34
      001ED8 75 F0 80         [24] 6587 	mov	b,#0x80
      001EDB 12r0Br3F         [24] 6588 	lcall	_LCD_string_write
                                   6589 ;	ecen4330lab7.c:2068: HEXtoASCII_16write(addr1);
      001EDE 85*23 82         [24] 6590 	mov	dpl,_addr1
      001EE1 85*24 83         [24] 6591 	mov	dph,(_addr1 + 1)
      001EE4 12r0DrEC         [24] 6592 	lcall	_HEXtoASCII_16write
                                   6593 ;	ecen4330lab7.c:2069: delay(200);
      001EE7 90 00 C8         [24] 6594 	mov	dptr,#0x00c8
      001EEA 12r01r9F         [24] 6595 	lcall	_delay
                                   6596 ;	ecen4330lab7.c:2070: resetLCD();
      001EED 12r0ErD3         [24] 6597 	lcall	_resetLCD
                                   6598 ;	ecen4330lab7.c:2071: LCD_string_write("Returning to\nmain menu.");
      001EF0 90r06r47         [24] 6599 	mov	dptr,#___str_17
      001EF3 75 F0 80         [24] 6600 	mov	b,#0x80
      001EF6 12r0Br3F         [24] 6601 	lcall	_LCD_string_write
                                   6602 ;	ecen4330lab7.c:2072: delay(100);
      001EF9 90 00 64         [24] 6603 	mov	dptr,#0x0064
      001EFC 02r01r9F         [24] 6604 	ljmp	_delay
      001EFF                       6605 00142$:
                                   6606 ;	ecen4330lab7.c:2080: resetLCD();
      001EFF 12r0ErD3         [24] 6607 	lcall	_resetLCD
                                   6608 ;	ecen4330lab7.c:2081: setTextColor(GREEN, BLACK);
      001F02 E4               [12] 6609 	clr	a
      001F03 F5*00            [12] 6610 	mov	_setTextColor_PARM_2,a
      001F05 F5*01            [12] 6611 	mov	(_setTextColor_PARM_2 + 1),a
      001F07 90 07 E0         [24] 6612 	mov	dptr,#0x07e0
      001F0A 12r04r50         [24] 6613 	lcall	_setTextColor
                                   6614 ;	ecen4330lab7.c:2082: LCD_string_write("\n0x");
      001F0D 90r07rDE         [24] 6615 	mov	dptr,#___str_29
      001F10 75 F0 80         [24] 6616 	mov	b,#0x80
      001F13 12r0Br3F         [24] 6617 	lcall	_LCD_string_write
                                   6618 ;	ecen4330lab7.c:2083: HEXtoASCII_8write(byte1);
      001F16 85*2F 82         [24] 6619 	mov	dpl,_byte1
      001F19 12r0DrAF         [24] 6620 	lcall	_HEXtoASCII_8write
                                   6621 ;	ecen4330lab7.c:2084: LCD_string_write(" found at\nthe following\naddresses:\n\n");
      001F1C 90r09r31         [24] 6622 	mov	dptr,#___str_47
      001F1F 75 F0 80         [24] 6623 	mov	b,#0x80
      001F22 12r0Br3F         [24] 6624 	lcall	_LCD_string_write
                                   6625 ;	ecen4330lab7.c:2085: delay(200);
      001F25 90 00 C8         [24] 6626 	mov	dptr,#0x00c8
      001F28 12r01r9F         [24] 6627 	lcall	_delay
                                   6628 ;	ecen4330lab7.c:2086: addr2 = currAddr0;					// Load first found address of page
      001F2B 85*29*25         [24] 6629 	mov	_addr2,_currAddr0
      001F2E 85*2A*26         [24] 6630 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6631 ;	ecen4330lab7.c:2091: do{
      001F31                       6632 00138$:
                                   6633 ;	ecen4330lab7.c:2092: resetLCD();
      001F31 12r0ErD3         [24] 6634 	lcall	_resetLCD
                                   6635 ;	ecen4330lab7.c:2093: currAddr0 = addr2;				// Load current address	
      001F34 85*25*29         [24] 6636 	mov	_currAddr0,_addr2
      001F37 85*26*2A         [24] 6637 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6638 ;	ecen4330lab7.c:2094: HEXtoASCII_16write(currAddr0);	// Write found address to LCD
      001F3A 85*29 82         [24] 6639 	mov	dpl,_currAddr0
      001F3D 85*2A 83         [24] 6640 	mov	dph,(_currAddr0 + 1)
      001F40 12r0DrEC         [24] 6641 	lcall	_HEXtoASCII_16write
                                   6642 ;	ecen4330lab7.c:2095: count = 7;						// Set page address display counter
      001F43 75*32 07         [24] 6643 	mov	_count,#0x07
      001F46 75*33 00         [24] 6644 	mov	(_count + 1),#0x00
                                   6645 ;	ecen4330lab7.c:2096: currAddr1++;					// Increment page count
      001F49 05*2B            [12] 6646 	inc	_currAddr1
      001F4B E4               [12] 6647 	clr	a
      001F4C B5*2B 02         [24] 6648 	cjne	a,_currAddr1,00241$
      001F4F 05*2C            [12] 6649 	inc	(_currAddr1 + 1)
      001F51                       6650 00241$:
                                   6651 ;	ecen4330lab7.c:2102: if(currAddr0 != 0xFFFF){
      001F51 74 FF            [12] 6652 	mov	a,#0xff
      001F53 B5*29 05         [24] 6653 	cjne	a,_currAddr0,00242$
      001F56 B5*2A 02         [24] 6654 	cjne	a,(_currAddr0 + 1),00242$
      001F59 80 4C            [24] 6655 	sjmp	00112$
      001F5B                       6656 00242$:
                                   6657 ;	ecen4330lab7.c:2103: do{
      001F5B                       6658 00108$:
                                   6659 ;	ecen4330lab7.c:2104: currAddr0++;				// Next RAM address
      001F5B 05*29            [12] 6660 	inc	_currAddr0
      001F5D E4               [12] 6661 	clr	a
      001F5E B5*29 02         [24] 6662 	cjne	a,_currAddr0,00243$
      001F61 05*2A            [12] 6663 	inc	(_currAddr0 + 1)
      001F63                       6664 00243$:
                                   6665 ;	ecen4330lab7.c:2105: data = RAMread(currAddr0);	// Read data
      001F63 85*29 82         [24] 6666 	mov	dpl,_currAddr0
      001F66 85*2A 83         [24] 6667 	mov	dph,(_currAddr0 + 1)
      001F69 12r0ErC0         [24] 6668 	lcall	_RAMread
      001F6C 85 82*20         [24] 6669 	mov	_data,dpl
                                   6670 ;	ecen4330lab7.c:2106: if(data == byte1){			// If data = search value
      001F6F AE*20            [24] 6671 	mov	r6,_data
      001F71 7F 00            [12] 6672 	mov	r7,#0x00
      001F73 EE               [12] 6673 	mov	a,r6
      001F74 B5*2F 1F         [24] 6674 	cjne	a,_byte1,00109$
      001F77 EF               [12] 6675 	mov	a,r7
      001F78 B5*30 1B         [24] 6676 	cjne	a,(_byte1 + 1),00109$
                                   6677 ;	ecen4330lab7.c:2107: count--;				// Decrement page address display counter
      001F7B 15*32            [12] 6678 	dec	_count
      001F7D 74 FF            [12] 6679 	mov	a,#0xff
      001F7F B5*32 02         [24] 6680 	cjne	a,_count,00246$
      001F82 15*33            [12] 6681 	dec	(_count + 1)
      001F84                       6682 00246$:
                                   6683 ;	ecen4330lab7.c:2108: LCD_string_write("\n");	// Next line
      001F84 90r08r1A         [24] 6684 	mov	dptr,#___str_35
      001F87 75 F0 80         [24] 6685 	mov	b,#0x80
      001F8A 12r0Br3F         [24] 6686 	lcall	_LCD_string_write
                                   6687 ;	ecen4330lab7.c:2109: HEXtoASCII_16write(currAddr0);	// Display found address
      001F8D 85*29 82         [24] 6688 	mov	dpl,_currAddr0
      001F90 85*2A 83         [24] 6689 	mov	dph,(_currAddr0 + 1)
      001F93 12r0DrEC         [24] 6690 	lcall	_HEXtoASCII_16write
      001F96                       6691 00109$:
                                   6692 ;	ecen4330lab7.c:2111: }while(currAddr0 < addr1 && count > 0);
      001F96 C3               [12] 6693 	clr	c
      001F97 E5*29            [12] 6694 	mov	a,_currAddr0
      001F99 95*23            [12] 6695 	subb	a,_addr1
      001F9B E5*2A            [12] 6696 	mov	a,(_currAddr0 + 1)
      001F9D 95*24            [12] 6697 	subb	a,(_addr1 + 1)
      001F9F 50 06            [24] 6698 	jnc	00112$
      001FA1 E5*32            [12] 6699 	mov	a,_count
      001FA3 45*33            [12] 6700 	orl	a,(_count + 1)
      001FA5 70 B4            [24] 6701 	jnz	00108$
      001FA7                       6702 00112$:
                                   6703 ;	ecen4330lab7.c:2118: setCursor(0, 250);
      001FA7 75*00 FA         [24] 6704 	mov	_setCursor_PARM_2,#0xfa
      001FAA 75*01 00         [24] 6705 	mov	(_setCursor_PARM_2 + 1),#0x00
      001FAD 90 00 00         [24] 6706 	mov	dptr,#0x0000
      001FB0 12r04r43         [24] 6707 	lcall	_setCursor
                                   6708 ;	ecen4330lab7.c:2119: setTextSize(2);
      001FB3 75 82 02         [24] 6709 	mov	dpl,#0x02
      001FB6 12r04r5D         [24] 6710 	lcall	_setTextSize
                                   6711 ;	ecen4330lab7.c:2120: setTextColor(WHITE, BLACK);
      001FB9 E4               [12] 6712 	clr	a
      001FBA F5*00            [12] 6713 	mov	_setTextColor_PARM_2,a
      001FBC F5*01            [12] 6714 	mov	(_setTextColor_PARM_2 + 1),a
      001FBE 90 FF FF         [24] 6715 	mov	dptr,#0xffff
      001FC1 12r04r50         [24] 6716 	lcall	_setTextColor
                                   6717 ;	ecen4330lab7.c:2121: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001FC4 90r08r1C         [24] 6718 	mov	dptr,#___str_36
      001FC7 75 F0 80         [24] 6719 	mov	b,#0x80
      001FCA 12r0Br3F         [24] 6720 	lcall	_LCD_string_write
                                   6721 ;	ecen4330lab7.c:2122: HEXtoASCII_16write(currAddr1);
      001FCD 85*2B 82         [24] 6722 	mov	dpl,_currAddr1
      001FD0 85*2C 83         [24] 6723 	mov	dph,(_currAddr1 + 1)
      001FD3 12r0DrEC         [24] 6724 	lcall	_HEXtoASCII_16write
                                   6725 ;	ecen4330lab7.c:2128: key = keyDetect();
      001FD6 12r0Br7E         [24] 6726 	lcall	_keyDetect
      001FD9 85 82*16         [24] 6727 	mov	_key,dpl
                                   6728 ;	ecen4330lab7.c:2129: switch (key)
      001FDC 74 30            [12] 6729 	mov	a,#0x30
      001FDE B5*16 02         [24] 6730 	cjne	a,_key,00249$
      001FE1 80 13            [24] 6731 	sjmp	00113$
      001FE3                       6732 00249$:
      001FE3 74 31            [12] 6733 	mov	a,#0x31
      001FE5 B5*16 03         [24] 6734 	cjne	a,_key,00250$
      001FE8 02r20r97         [24] 6735 	ljmp	00126$
      001FEB                       6736 00250$:
      001FEB 74 45            [12] 6737 	mov	a,#0x45
      001FED B5*16 03         [24] 6738 	cjne	a,_key,00251$
      001FF0 02r21r17         [24] 6739 	ljmp	00135$
      001FF3                       6740 00251$:
      001FF3 02r21r2B         [24] 6741 	ljmp	00136$
                                   6742 ;	ecen4330lab7.c:2135: case '0':
      001FF6                       6743 00113$:
                                   6744 ;	ecen4330lab7.c:2140: if(currAddr0 >= addr1){
      001FF6 C3               [12] 6745 	clr	c
      001FF7 E5*29            [12] 6746 	mov	a,_currAddr0
      001FF9 95*23            [12] 6747 	subb	a,_addr1
      001FFB E5*2A            [12] 6748 	mov	a,(_currAddr0 + 1)
      001FFD 95*24            [12] 6749 	subb	a,(_addr1 + 1)
      001FFF 40 1E            [24] 6750 	jc	00117$
                                   6751 ;	ecen4330lab7.c:2141: resetLCD();
      002001 12r0ErD3         [24] 6752 	lcall	_resetLCD
                                   6753 ;	ecen4330lab7.c:2142: LCD_string_write("End of Data.");
      002004 90r09r56         [24] 6754 	mov	dptr,#___str_48
      002007 75 F0 80         [24] 6755 	mov	b,#0x80
      00200A 12r0Br3F         [24] 6756 	lcall	_LCD_string_write
                                   6757 ;	ecen4330lab7.c:2143: delay(200);
      00200D 90 00 C8         [24] 6758 	mov	dptr,#0x00c8
      002010 12r01r9F         [24] 6759 	lcall	_delay
                                   6760 ;	ecen4330lab7.c:2144: currAddr1--;	// Reset page count to last displayed page 
      002013 15*2B            [12] 6761 	dec	_currAddr1
      002015 74 FF            [12] 6762 	mov	a,#0xff
      002017 B5*2B 02         [24] 6763 	cjne	a,_currAddr1,00253$
      00201A 15*2C            [12] 6764 	dec	(_currAddr1 + 1)
      00201C                       6765 00253$:
      00201C 02r21r37         [24] 6766 	ljmp	00139$
                                   6767 ;	ecen4330lab7.c:2157: do{
      00201F                       6768 00117$:
                                   6769 ;	ecen4330lab7.c:2158: currAddr0++;			// Next RAM address
      00201F 05*29            [12] 6770 	inc	_currAddr0
      002021 E4               [12] 6771 	clr	a
      002022 B5*29 02         [24] 6772 	cjne	a,_currAddr0,00254$
      002025 05*2A            [12] 6773 	inc	(_currAddr0 + 1)
      002027                       6774 00254$:
                                   6775 ;	ecen4330lab7.c:2159: data = RAMread(currAddr0);	// Read data
      002027 85*29 82         [24] 6776 	mov	dpl,_currAddr0
      00202A 85*2A 83         [24] 6777 	mov	dph,(_currAddr0 + 1)
      00202D 12r0ErC0         [24] 6778 	lcall	_RAMread
      002030 85 82*20         [24] 6779 	mov	_data,dpl
                                   6780 ;	ecen4330lab7.c:2160: if(data == byte1){			// If data matches search value
      002033 AE*20            [24] 6781 	mov	r6,_data
      002035 7F 00            [12] 6782 	mov	r7,#0x00
      002037 EE               [12] 6783 	mov	a,r6
      002038 B5*2F 0A         [24] 6784 	cjne	a,_byte1,00118$
      00203B EF               [12] 6785 	mov	a,r7
      00203C B5*30 06         [24] 6786 	cjne	a,(_byte1 + 1),00118$
                                   6787 ;	ecen4330lab7.c:2161: addr2 = currAddr0;		// Set first address of display page
      00203F 85*29*25         [24] 6788 	mov	_addr2,_currAddr0
      002042 85*2A*26         [24] 6789 	mov	(_addr2 + 1),(_currAddr0 + 1)
      002045                       6790 00118$:
                                   6791 ;	ecen4330lab7.c:2163: }while(currAddr0 < addr1 && data != byte1);
      002045 C3               [12] 6792 	clr	c
      002046 E5*29            [12] 6793 	mov	a,_currAddr0
      002048 95*23            [12] 6794 	subb	a,_addr1
      00204A E5*2A            [12] 6795 	mov	a,(_currAddr0 + 1)
      00204C 95*24            [12] 6796 	subb	a,(_addr1 + 1)
      00204E 50 0C            [24] 6797 	jnc	00119$
      002050 AE*20            [24] 6798 	mov	r6,_data
      002052 7F 00            [12] 6799 	mov	r7,#0x00
      002054 EE               [12] 6800 	mov	a,r6
      002055 B5*2F C7         [24] 6801 	cjne	a,_byte1,00117$
      002058 EF               [12] 6802 	mov	a,r7
      002059 B5*30 C3         [24] 6803 	cjne	a,(_byte1 + 1),00117$
      00205C                       6804 00119$:
                                   6805 ;	ecen4330lab7.c:2169: if(currAddr0 >= addr1 && data != byte1){
      00205C C3               [12] 6806 	clr	c
      00205D E5*29            [12] 6807 	mov	a,_currAddr0
      00205F 95*23            [12] 6808 	subb	a,_addr1
      002061 E5*2A            [12] 6809 	mov	a,(_currAddr0 + 1)
      002063 95*24            [12] 6810 	subb	a,(_addr1 + 1)
      002065 50 03            [24] 6811 	jnc	00260$
      002067 02r21r37         [24] 6812 	ljmp	00139$
      00206A                       6813 00260$:
      00206A AE*20            [24] 6814 	mov	r6,_data
      00206C 7F 00            [12] 6815 	mov	r7,#0x00
      00206E EE               [12] 6816 	mov	a,r6
      00206F B5*2F 07         [24] 6817 	cjne	a,_byte1,00261$
      002072 EF               [12] 6818 	mov	a,r7
      002073 B5*30 03         [24] 6819 	cjne	a,(_byte1 + 1),00261$
      002076 02r21r37         [24] 6820 	ljmp	00139$
      002079                       6821 00261$:
                                   6822 ;	ecen4330lab7.c:2170: resetLCD();
      002079 12r0ErD3         [24] 6823 	lcall	_resetLCD
                                   6824 ;	ecen4330lab7.c:2171: LCD_string_write("End of Data.");
      00207C 90r09r56         [24] 6825 	mov	dptr,#___str_48
      00207F 75 F0 80         [24] 6826 	mov	b,#0x80
      002082 12r0Br3F         [24] 6827 	lcall	_LCD_string_write
                                   6828 ;	ecen4330lab7.c:2172: delay(200);
      002085 90 00 C8         [24] 6829 	mov	dptr,#0x00c8
      002088 12r01r9F         [24] 6830 	lcall	_delay
                                   6831 ;	ecen4330lab7.c:2173: currAddr1--;	// Reset page count to last displayed page
      00208B 15*2B            [12] 6832 	dec	_currAddr1
      00208D 74 FF            [12] 6833 	mov	a,#0xff
      00208F B5*2B 02         [24] 6834 	cjne	a,_currAddr1,00262$
      002092 15*2C            [12] 6835 	dec	(_currAddr1 + 1)
      002094                       6836 00262$:
                                   6837 ;	ecen4330lab7.c:2178: break;
      002094 02r21r37         [24] 6838 	ljmp	00139$
                                   6839 ;	ecen4330lab7.c:2185: case '1':
      002097                       6840 00126$:
                                   6841 ;	ecen4330lab7.c:2189: if(currAddr1 == 1){
      002097 74 01            [12] 6842 	mov	a,#0x01
      002099 B5*2B 06         [24] 6843 	cjne	a,_currAddr1,00263$
      00209C 14               [12] 6844 	dec	a
      00209D B5*2C 02         [24] 6845 	cjne	a,(_currAddr1 + 1),00263$
      0020A0 80 02            [24] 6846 	sjmp	00264$
      0020A2                       6847 00263$:
      0020A2 80 1E            [24] 6848 	sjmp	00133$
      0020A4                       6849 00264$:
                                   6850 ;	ecen4330lab7.c:2190: resetLCD();
      0020A4 12r0ErD3         [24] 6851 	lcall	_resetLCD
                                   6852 ;	ecen4330lab7.c:2191: LCD_string_write("End of Data.");
      0020A7 90r09r56         [24] 6853 	mov	dptr,#___str_48
      0020AA 75 F0 80         [24] 6854 	mov	b,#0x80
      0020AD 12r0Br3F         [24] 6855 	lcall	_LCD_string_write
                                   6856 ;	ecen4330lab7.c:2192: delay(200);
      0020B0 90 00 C8         [24] 6857 	mov	dptr,#0x00c8
      0020B3 12r01r9F         [24] 6858 	lcall	_delay
                                   6859 ;	ecen4330lab7.c:2193: currAddr1--;	// Reset page count to last displayed page
      0020B6 15*2B            [12] 6860 	dec	_currAddr1
      0020B8 74 FF            [12] 6861 	mov	a,#0xff
      0020BA B5*2B 02         [24] 6862 	cjne	a,_currAddr1,00265$
      0020BD 15*2C            [12] 6863 	dec	(_currAddr1 + 1)
      0020BF                       6864 00265$:
      0020BF 02r21r37         [24] 6865 	ljmp	00139$
      0020C2                       6866 00133$:
                                   6867 ;	ecen4330lab7.c:2201: currAddr0 = addr2;
      0020C2 85*25*29         [24] 6868 	mov	_currAddr0,_addr2
      0020C5 85*26*2A         [24] 6869 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6870 ;	ecen4330lab7.c:2202: count = 0;
      0020C8 E4               [12] 6871 	clr	a
      0020C9 F5*32            [12] 6872 	mov	_count,a
      0020CB F5*33            [12] 6873 	mov	(_count + 1),a
                                   6874 ;	ecen4330lab7.c:2203: while(count < 8){
      0020CD                       6875 00129$:
      0020CD C3               [12] 6876 	clr	c
      0020CE E5*32            [12] 6877 	mov	a,_count
      0020D0 94 08            [12] 6878 	subb	a,#0x08
      0020D2 E5*33            [12] 6879 	mov	a,(_count + 1)
      0020D4 94 00            [12] 6880 	subb	a,#0x00
      0020D6 50 2B            [24] 6881 	jnc	00131$
                                   6882 ;	ecen4330lab7.c:2204: currAddr0--;
      0020D8 15*29            [12] 6883 	dec	_currAddr0
      0020DA 74 FF            [12] 6884 	mov	a,#0xff
      0020DC B5*29 02         [24] 6885 	cjne	a,_currAddr0,00267$
      0020DF 15*2A            [12] 6886 	dec	(_currAddr0 + 1)
      0020E1                       6887 00267$:
                                   6888 ;	ecen4330lab7.c:2205: data = RAMread(currAddr0);
      0020E1 85*29 82         [24] 6889 	mov	dpl,_currAddr0
      0020E4 85*2A 83         [24] 6890 	mov	dph,(_currAddr0 + 1)
      0020E7 12r0ErC0         [24] 6891 	lcall	_RAMread
      0020EA 85 82*20         [24] 6892 	mov	_data,dpl
                                   6893 ;	ecen4330lab7.c:2206: if(data == byte1){
      0020ED AE*20            [24] 6894 	mov	r6,_data
      0020EF 7F 00            [12] 6895 	mov	r7,#0x00
      0020F1 EE               [12] 6896 	mov	a,r6
      0020F2 B5*2F D8         [24] 6897 	cjne	a,_byte1,00129$
      0020F5 EF               [12] 6898 	mov	a,r7
      0020F6 B5*30 D4         [24] 6899 	cjne	a,(_byte1 + 1),00129$
                                   6900 ;	ecen4330lab7.c:2207: count++;
      0020F9 05*32            [12] 6901 	inc	_count
      0020FB E4               [12] 6902 	clr	a
      0020FC B5*32 CE         [24] 6903 	cjne	a,_count,00129$
      0020FF 05*33            [12] 6904 	inc	(_count + 1)
      002101 80 CA            [24] 6905 	sjmp	00129$
      002103                       6906 00131$:
                                   6907 ;	ecen4330lab7.c:2210: addr2 = currAddr0;
      002103 85*29*25         [24] 6908 	mov	_addr2,_currAddr0
      002106 85*2A*26         [24] 6909 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6910 ;	ecen4330lab7.c:2211: currAddr1 -= 2;
      002109 E5*2B            [12] 6911 	mov	a,_currAddr1
      00210B 24 FE            [12] 6912 	add	a,#0xfe
      00210D F5*2B            [12] 6913 	mov	_currAddr1,a
      00210F E5*2C            [12] 6914 	mov	a,(_currAddr1 + 1)
      002111 34 FF            [12] 6915 	addc	a,#0xff
      002113 F5*2C            [12] 6916 	mov	(_currAddr1 + 1),a
                                   6917 ;	ecen4330lab7.c:2213: break;
                                   6918 ;	ecen4330lab7.c:2219: case 'E':
      002115 80 20            [24] 6919 	sjmp	00139$
      002117                       6920 00135$:
                                   6921 ;	ecen4330lab7.c:2220: resetLCD();
      002117 12r0ErD3         [24] 6922 	lcall	_resetLCD
                                   6923 ;	ecen4330lab7.c:2221: LCD_string_write("Returning to\nmain menu.");
      00211A 90r06r47         [24] 6924 	mov	dptr,#___str_17
      00211D 75 F0 80         [24] 6925 	mov	b,#0x80
      002120 12r0Br3F         [24] 6926 	lcall	_LCD_string_write
                                   6927 ;	ecen4330lab7.c:2222: delay(200);
      002123 90 00 C8         [24] 6928 	mov	dptr,#0x00c8
      002126 12r01r9F         [24] 6929 	lcall	_delay
                                   6930 ;	ecen4330lab7.c:2223: break;
                                   6931 ;	ecen4330lab7.c:2229: default:
      002129 80 0C            [24] 6932 	sjmp	00139$
      00212B                       6933 00136$:
                                   6934 ;	ecen4330lab7.c:2230: invalidInput();
      00212B 12r0ErFB         [24] 6935 	lcall	_invalidInput
                                   6936 ;	ecen4330lab7.c:2231: currAddr1--;
      00212E 15*2B            [12] 6937 	dec	_currAddr1
      002130 74 FF            [12] 6938 	mov	a,#0xff
      002132 B5*2B 02         [24] 6939 	cjne	a,_currAddr1,00271$
      002135 15*2C            [12] 6940 	dec	(_currAddr1 + 1)
      002137                       6941 00271$:
                                   6942 ;	ecen4330lab7.c:2234: }
      002137                       6943 00139$:
                                   6944 ;	ecen4330lab7.c:2235: }while(key != 'E');
      002137 74 45            [12] 6945 	mov	a,#0x45
      002139 B5*16 01         [24] 6946 	cjne	a,_key,00272$
      00213C 22               [24] 6947 	ret
      00213D                       6948 00272$:
      00213D 02r1Fr31         [24] 6949 	ljmp	00138$
                                   6950 ;	ecen4330lab7.c:2237: }
      002140 22               [24] 6951 	ret
                                   6952 ;------------------------------------------------------------
                                   6953 ;Allocation info for local variables in function 'FIND'
                                   6954 ;------------------------------------------------------------
                                   6955 ;	ecen4330lab7.c:2245: void FIND(){
                                   6956 ;	-----------------------------------------
                                   6957 ;	 function FIND
                                   6958 ;	-----------------------------------------
      002141                       6959 _FIND:
                                   6960 ;	ecen4330lab7.c:2246: endAddrCalc = 0;
      002141 E4               [12] 6961 	clr	a
      002142 F5*34            [12] 6962 	mov	_endAddrCalc,a
      002144 F5*35            [12] 6963 	mov	(_endAddrCalc + 1),a
      002146 F5*36            [12] 6964 	mov	(_endAddrCalc + 2),a
      002148 F5*37            [12] 6965 	mov	(_endAddrCalc + 3),a
                                   6966 ;	ecen4330lab7.c:2247: addr0 = 0;                      // Starting Address
      00214A F5*21            [12] 6967 	mov	_addr0,a
      00214C F5*22            [12] 6968 	mov	(_addr0 + 1),a
                                   6969 ;	ecen4330lab7.c:2248: addr1 = 0;                      // End Address
      00214E F5*23            [12] 6970 	mov	_addr1,a
      002150 F5*24            [12] 6971 	mov	(_addr1 + 1),a
                                   6972 ;	ecen4330lab7.c:2249: dataType = 0;                   // Data Type
                                   6973 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      002152 F5*1A            [12] 6974 	mov	_dataType,a
                                   6975 ;	ecen4330lab7.c:2250: dataSize = 0;                   // Data Size
      002154 F5*1B            [12] 6976 	mov	_dataSize,a
      002156 F5*1C            [12] 6977 	mov	(_dataSize + 1),a
                                   6978 ;	ecen4330lab7.c:2251: byte1 = 0;                       // Find Value
      002158 F5*2F            [12] 6979 	mov	_byte1,a
      00215A F5*30            [12] 6980 	mov	(_byte1 + 1),a
                                   6981 ;	ecen4330lab7.c:2254: resetLCD();
      00215C 12r0ErD3         [24] 6982 	lcall	_resetLCD
                                   6983 ;	ecen4330lab7.c:2255: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n   0x____");
      00215F 90r09r63         [24] 6984 	mov	dptr,#___str_49
      002162 75 F0 80         [24] 6985 	mov	b,#0x80
      002165 12r0Br3F         [24] 6986 	lcall	_LCD_string_write
                                   6987 ;	ecen4330lab7.c:2256: cursor_x -= 4 * textsize * 6;
      002168 E5*0C            [12] 6988 	mov	a,_textsize
      00216A 75 F0 18         [24] 6989 	mov	b,#0x18
      00216D A4               [48] 6990 	mul	ab
      00216E FE               [12] 6991 	mov	r6,a
      00216F AF F0            [24] 6992 	mov	r7,b
      002171 E5*08            [12] 6993 	mov	a,_cursor_x
      002173 C3               [12] 6994 	clr	c
      002174 9E               [12] 6995 	subb	a,r6
      002175 F5*08            [12] 6996 	mov	_cursor_x,a
      002177 E5*09            [12] 6997 	mov	a,(_cursor_x + 1)
      002179 9F               [12] 6998 	subb	a,r7
      00217A F5*09            [12] 6999 	mov	(_cursor_x + 1),a
                                   7000 ;	ecen4330lab7.c:2257: inputRead16();                  // Read input
      00217C 12r0Fr24         [24] 7001 	lcall	_inputRead16
                                   7002 ;	ecen4330lab7.c:2258: addr0 = input16;                // Start address
      00217F 85*17*21         [24] 7003 	mov	_addr0,_input16
      002182 85*18*22         [24] 7004 	mov	(_addr0 + 1),(_input16 + 1)
                                   7005 ;	ecen4330lab7.c:2264: resetLCD();
      002185 12r0ErD3         [24] 7006 	lcall	_resetLCD
                                   7007 ;	ecen4330lab7.c:2265: inputDataSize();                // Prompt & read input
      002188 12r10rF0         [24] 7008 	lcall	_inputDataSize
                                   7009 ;	ecen4330lab7.c:2268: resetLCD();
      00218B 12r0ErD3         [24] 7010 	lcall	_resetLCD
                                   7011 ;	ecen4330lab7.c:2269: LCD_string_write("\nEnter search\nvalue:\n\n   0x__");
      00218E 90r09r8B         [24] 7012 	mov	dptr,#___str_50
      002191 75 F0 80         [24] 7013 	mov	b,#0x80
      002194 12r0Br3F         [24] 7014 	lcall	_LCD_string_write
                                   7015 ;	ecen4330lab7.c:2270: cursor_x -= 2 * textsize * 6;
      002197 E5*0C            [12] 7016 	mov	a,_textsize
      002199 75 F0 0C         [24] 7017 	mov	b,#0x0c
      00219C A4               [48] 7018 	mul	ab
      00219D FE               [12] 7019 	mov	r6,a
      00219E AF F0            [24] 7020 	mov	r7,b
      0021A0 E5*08            [12] 7021 	mov	a,_cursor_x
      0021A2 C3               [12] 7022 	clr	c
      0021A3 9E               [12] 7023 	subb	a,r6
      0021A4 F5*08            [12] 7024 	mov	_cursor_x,a
      0021A6 E5*09            [12] 7025 	mov	a,(_cursor_x + 1)
      0021A8 9F               [12] 7026 	subb	a,r7
      0021A9 F5*09            [12] 7027 	mov	(_cursor_x + 1),a
                                   7028 ;	ecen4330lab7.c:2271: inputRead8();                  // Read input
      0021AB 12r0FrDF         [24] 7029 	lcall	_inputRead8
                                   7030 ;	ecen4330lab7.c:2272: byte1 = input8;                 // Find value
      0021AE 85*19*2F         [24] 7031 	mov	_byte1,_input8
      0021B1 75*30 00         [24] 7032 	mov	(_byte1 + 1),#0x00
                                   7033 ;	ecen4330lab7.c:2275: endAddrCalc = addr0 + dataSize;
      0021B4 E5*1B            [12] 7034 	mov	a,_dataSize
      0021B6 25*21            [12] 7035 	add	a,_addr0
      0021B8 FE               [12] 7036 	mov	r6,a
      0021B9 E5*1C            [12] 7037 	mov	a,(_dataSize + 1)
      0021BB 35*22            [12] 7038 	addc	a,(_addr0 + 1)
      0021BD FF               [12] 7039 	mov	r7,a
      0021BE 8E*34            [24] 7040 	mov	_endAddrCalc,r6
      0021C0 8F*35            [24] 7041 	mov	(_endAddrCalc + 1),r7
      0021C2 75*36 00         [24] 7042 	mov	(_endAddrCalc + 2),#0x00
      0021C5 75*37 00         [24] 7043 	mov	(_endAddrCalc + 3),#0x00
                                   7044 ;	ecen4330lab7.c:2276: if(endAddrCalc < addr0){ // RAM overflow
      0021C8 AC*21            [24] 7045 	mov	r4,_addr0
      0021CA AD*22            [24] 7046 	mov	r5,(_addr0 + 1)
      0021CC 7E 00            [12] 7047 	mov	r6,#0x00
      0021CE 7F 00            [12] 7048 	mov	r7,#0x00
      0021D0 C3               [12] 7049 	clr	c
      0021D1 E5*34            [12] 7050 	mov	a,_endAddrCalc
      0021D3 9C               [12] 7051 	subb	a,r4
      0021D4 E5*35            [12] 7052 	mov	a,(_endAddrCalc + 1)
      0021D6 9D               [12] 7053 	subb	a,r5
      0021D7 E5*36            [12] 7054 	mov	a,(_endAddrCalc + 2)
      0021D9 9E               [12] 7055 	subb	a,r6
      0021DA E5*37            [12] 7056 	mov	a,(_endAddrCalc + 3)
      0021DC 9F               [12] 7057 	subb	a,r7
      0021DD 50 14            [24] 7058 	jnc	00102$
                                   7059 ;	ecen4330lab7.c:2277: addr1 = 0xFFFF;             // Set end address
      0021DF 75*23 FF         [24] 7060 	mov	_addr1,#0xff
                                   7061 ;	ecen4330lab7.c:2278: dataSize = addr1 - addr0;   // Recalculate data size
      0021E2 74 FF            [12] 7062 	mov	a,#0xff
      0021E4 F5*24            [12] 7063 	mov	(_addr1 + 1),a
      0021E6 C3               [12] 7064 	clr	c
      0021E7 95*21            [12] 7065 	subb	a,_addr0
      0021E9 F5*1B            [12] 7066 	mov	_dataSize,a
      0021EB 74 FF            [12] 7067 	mov	a,#0xff
      0021ED 95*22            [12] 7068 	subb	a,(_addr0 + 1)
      0021EF F5*1C            [12] 7069 	mov	(_dataSize + 1),a
      0021F1 80 0C            [24] 7070 	sjmp	00103$
      0021F3                       7071 00102$:
                                   7072 ;	ecen4330lab7.c:2281: addr1 = addr0 + dataSize;
      0021F3 E5*1B            [12] 7073 	mov	a,_dataSize
      0021F5 25*21            [12] 7074 	add	a,_addr0
      0021F7 F5*23            [12] 7075 	mov	_addr1,a
      0021F9 E5*1C            [12] 7076 	mov	a,(_dataSize + 1)
      0021FB 35*22            [12] 7077 	addc	a,(_addr0 + 1)
      0021FD F5*24            [12] 7078 	mov	(_addr1 + 1),a
      0021FF                       7079 00103$:
                                   7080 ;	ecen4330lab7.c:2301: FIND_display();                 // Display dump data
                                   7081 ;	ecen4330lab7.c:2302: }
      0021FF 02r1Er4C         [24] 7082 	ljmp	_FIND_display
                                   7083 ;------------------------------------------------------------
                                   7084 ;Allocation info for local variables in function 'resetLCD1'
                                   7085 ;------------------------------------------------------------
                                   7086 ;	ecen4330lab7.c:2304: void resetLCD1(){
                                   7087 ;	-----------------------------------------
                                   7088 ;	 function resetLCD1
                                   7089 ;	-----------------------------------------
      002202                       7090 _resetLCD1:
                                   7091 ;	ecen4330lab7.c:2305: setRotation(4);
      002202 75 82 04         [24] 7092 	mov	dpl,#0x04
      002205 12r04r75         [24] 7093 	lcall	_setRotation
                                   7094 ;	ecen4330lab7.c:2306: setTextColor(GRAY, BLACK);
      002208 E4               [12] 7095 	clr	a
      002209 F5*00            [12] 7096 	mov	_setTextColor_PARM_2,a
      00220B F5*01            [12] 7097 	mov	(_setTextColor_PARM_2 + 1),a
      00220D 90 D6 BA         [24] 7098 	mov	dptr,#0xd6ba
      002210 12r04r50         [24] 7099 	lcall	_setTextColor
                                   7100 ;	ecen4330lab7.c:2307: setTextSize(3);
      002213 75 82 03         [24] 7101 	mov	dpl,#0x03
      002216 12r04r5D         [24] 7102 	lcall	_setTextSize
                                   7103 ;	ecen4330lab7.c:2308: fillScreen(BLACK);
      002219 90 00 00         [24] 7104 	mov	dptr,#0x0000
      00221C 12r07rE8         [24] 7105 	lcall	_fillScreen
                                   7106 ;	ecen4330lab7.c:2309: setCursor(0, 0);
      00221F E4               [12] 7107 	clr	a
      002220 F5*00            [12] 7108 	mov	_setCursor_PARM_2,a
      002222 F5*01            [12] 7109 	mov	(_setCursor_PARM_2 + 1),a
      002224 90 00 00         [24] 7110 	mov	dptr,#0x0000
                                   7111 ;	ecen4330lab7.c:2310: }
      002227 02r04r43         [24] 7112 	ljmp	_setCursor
                                   7113 ;------------------------------------------------------------
                                   7114 ;Allocation info for local variables in function 'UART_dataRate'
                                   7115 ;------------------------------------------------------------
                                   7116 ;	ecen4330lab7.c:2329: void UART_dataRate() {
                                   7117 ;	-----------------------------------------
                                   7118 ;	 function UART_dataRate
                                   7119 ;	-----------------------------------------
      00222A                       7120 _UART_dataRate:
                                   7121 ;	ecen4330lab7.c:2330: resetLCD();
      00222A 12r0ErD3         [24] 7122 	lcall	_resetLCD
                                   7123 ;	ecen4330lab7.c:2331: do {
      00222D                       7124 00119$:
                                   7125 ;	ecen4330lab7.c:2332: LCD_string_write("\n(1) 1200\n");
      00222D 90r09rA9         [24] 7126 	mov	dptr,#___str_51
      002230 75 F0 80         [24] 7127 	mov	b,#0x80
      002233 12r0Br3F         [24] 7128 	lcall	_LCD_string_write
                                   7129 ;	ecen4330lab7.c:2333: LCD_string_write("(2) 2400\n");
      002236 90r09rB4         [24] 7130 	mov	dptr,#___str_52
      002239 75 F0 80         [24] 7131 	mov	b,#0x80
      00223C 12r0Br3F         [24] 7132 	lcall	_LCD_string_write
                                   7133 ;	ecen4330lab7.c:2334: LCD_string_write("(3) 4800\n");
      00223F 90r09rBE         [24] 7134 	mov	dptr,#___str_53
      002242 75 F0 80         [24] 7135 	mov	b,#0x80
      002245 12r0Br3F         [24] 7136 	lcall	_LCD_string_write
                                   7137 ;	ecen4330lab7.c:2335: LCD_string_write("(4) 9600\n");
      002248 90r09rC8         [24] 7138 	mov	dptr,#___str_54
      00224B 75 F0 80         [24] 7139 	mov	b,#0x80
      00224E 12r0Br3F         [24] 7140 	lcall	_LCD_string_write
                                   7141 ;	ecen4330lab7.c:2336: LCD_string_write("(5) 19200\n\n");
      002251 90r09rD2         [24] 7142 	mov	dptr,#___str_55
      002254 75 F0 80         [24] 7143 	mov	b,#0x80
      002257 12r0Br3F         [24] 7144 	lcall	_LCD_string_write
                                   7145 ;	ecen4330lab7.c:2337: LCD_string_write("Current:\n");
      00225A 90r09rDE         [24] 7146 	mov	dptr,#___str_56
      00225D 75 F0 80         [24] 7147 	mov	b,#0x80
      002260 12r0Br3F         [24] 7148 	lcall	_LCD_string_write
                                   7149 ;	ecen4330lab7.c:2339: dataRate = PCON & 0x80;
      002263 E5 87            [12] 7150 	mov	a,_PCON
      002265 54 80            [12] 7151 	anl	a,#0x80
      002267 F5*3E            [12] 7152 	mov	_dataRate,a
                                   7153 ;	ecen4330lab7.c:2341: if(dataRate == 0x80){
      002269 74 80            [12] 7154 	mov	a,#0x80
      00226B B5*3E 1B         [24] 7155 	cjne	a,_dataRate,00110$
                                   7156 ;	ecen4330lab7.c:2342: if (TH1 == 0xFD){
      00226E 74 FD            [12] 7157 	mov	a,#0xfd
      002270 B5 8D 0B         [24] 7158 	cjne	a,_TH1,00102$
                                   7159 ;	ecen4330lab7.c:2343: LCD_string_write("19200\n");
      002273 90r09rE8         [24] 7160 	mov	dptr,#___str_57
      002276 75 F0 80         [24] 7161 	mov	b,#0x80
      002279 12r0Br3F         [24] 7162 	lcall	_LCD_string_write
      00227C 80 4B            [24] 7163 	sjmp	00111$
      00227E                       7164 00102$:
                                   7165 ;	ecen4330lab7.c:2346: LCD_string_write("Invalid\n");
      00227E 90r09rEF         [24] 7166 	mov	dptr,#___str_58
      002281 75 F0 80         [24] 7167 	mov	b,#0x80
      002284 12r0Br3F         [24] 7168 	lcall	_LCD_string_write
      002287 80 40            [24] 7169 	sjmp	00111$
      002289                       7170 00110$:
                                   7171 ;	ecen4330lab7.c:2350: switch(TH1) {
      002289 AF 8D            [24] 7172 	mov	r7,_TH1
      00228B BF E8 02         [24] 7173 	cjne	r7,#0xe8,00180$
      00228E 80 0F            [24] 7174 	sjmp	00104$
      002290                       7175 00180$:
      002290 BF F4 02         [24] 7176 	cjne	r7,#0xf4,00181$
      002293 80 15            [24] 7177 	sjmp	00105$
      002295                       7178 00181$:
      002295 BF FA 02         [24] 7179 	cjne	r7,#0xfa,00182$
      002298 80 1B            [24] 7180 	sjmp	00106$
      00229A                       7181 00182$:
                                   7182 ;	ecen4330lab7.c:2351: case 0xE8:
      00229A BF FD 2C         [24] 7183 	cjne	r7,#0xfd,00111$
      00229D 80 21            [24] 7184 	sjmp	00107$
      00229F                       7185 00104$:
                                   7186 ;	ecen4330lab7.c:2352: LCD_string_write("1200\n");
      00229F 90r09rF8         [24] 7187 	mov	dptr,#___str_59
      0022A2 75 F0 80         [24] 7188 	mov	b,#0x80
      0022A5 12r0Br3F         [24] 7189 	lcall	_LCD_string_write
                                   7190 ;	ecen4330lab7.c:2353: break;
                                   7191 ;	ecen4330lab7.c:2354: case 0xF4:
      0022A8 80 1F            [24] 7192 	sjmp	00111$
      0022AA                       7193 00105$:
                                   7194 ;	ecen4330lab7.c:2355: LCD_string_write("2400\n");
      0022AA 90r09rFE         [24] 7195 	mov	dptr,#___str_60
      0022AD 75 F0 80         [24] 7196 	mov	b,#0x80
      0022B0 12r0Br3F         [24] 7197 	lcall	_LCD_string_write
                                   7198 ;	ecen4330lab7.c:2356: break;
                                   7199 ;	ecen4330lab7.c:2357: case 0xFA:
      0022B3 80 14            [24] 7200 	sjmp	00111$
      0022B5                       7201 00106$:
                                   7202 ;	ecen4330lab7.c:2358: LCD_string_write("4800\n");
      0022B5 90r0Ar04         [24] 7203 	mov	dptr,#___str_61
      0022B8 75 F0 80         [24] 7204 	mov	b,#0x80
      0022BB 12r0Br3F         [24] 7205 	lcall	_LCD_string_write
                                   7206 ;	ecen4330lab7.c:2359: break;
                                   7207 ;	ecen4330lab7.c:2360: case 0xFD:
      0022BE 80 09            [24] 7208 	sjmp	00111$
      0022C0                       7209 00107$:
                                   7210 ;	ecen4330lab7.c:2361: LCD_string_write("9600\n");
      0022C0 90r0Ar0A         [24] 7211 	mov	dptr,#___str_62
      0022C3 75 F0 80         [24] 7212 	mov	b,#0x80
      0022C6 12r0Br3F         [24] 7213 	lcall	_LCD_string_write
                                   7214 ;	ecen4330lab7.c:2363: }
      0022C9                       7215 00111$:
                                   7216 ;	ecen4330lab7.c:2366: LCD_string_write("\n   _");
      0022C9 90r0Ar10         [24] 7217 	mov	dptr,#___str_63
      0022CC 75 F0 80         [24] 7218 	mov	b,#0x80
      0022CF 12r0Br3F         [24] 7219 	lcall	_LCD_string_write
                                   7220 ;	ecen4330lab7.c:2367: cursor_x -= 1 * textsize * 6;
      0022D2 E5*0C            [12] 7221 	mov	a,_textsize
      0022D4 75 F0 06         [24] 7222 	mov	b,#0x06
      0022D7 A4               [48] 7223 	mul	ab
      0022D8 FE               [12] 7224 	mov	r6,a
      0022D9 AF F0            [24] 7225 	mov	r7,b
      0022DB E5*08            [12] 7226 	mov	a,_cursor_x
      0022DD C3               [12] 7227 	clr	c
      0022DE 9E               [12] 7228 	subb	a,r6
      0022DF F5*08            [12] 7229 	mov	_cursor_x,a
      0022E1 E5*09            [12] 7230 	mov	a,(_cursor_x + 1)
      0022E3 9F               [12] 7231 	subb	a,r7
      0022E4 F5*09            [12] 7232 	mov	(_cursor_x + 1),a
                                   7233 ;	ecen4330lab7.c:2368: key = keyDetect();
      0022E6 12r0Br7E         [24] 7234 	lcall	_keyDetect
      0022E9 85 82*16         [24] 7235 	mov	_key,dpl
                                   7236 ;	ecen4330lab7.c:2369: switch (key){
      0022EC 74 31            [12] 7237 	mov	a,#0x31
      0022EE B5*16 02         [24] 7238 	cjne	a,_key,00184$
      0022F1 80 1F            [24] 7239 	sjmp	00112$
      0022F3                       7240 00184$:
      0022F3 74 32            [12] 7241 	mov	a,#0x32
      0022F5 B5*16 02         [24] 7242 	cjne	a,_key,00185$
      0022F8 80 30            [24] 7243 	sjmp	00113$
      0022FA                       7244 00185$:
      0022FA 74 33            [12] 7245 	mov	a,#0x33
      0022FC B5*16 02         [24] 7246 	cjne	a,_key,00186$
      0022FF 80 40            [24] 7247 	sjmp	00114$
      002301                       7248 00186$:
      002301 74 34            [12] 7249 	mov	a,#0x34
      002303 B5*16 02         [24] 7250 	cjne	a,_key,00187$
      002306 80 50            [24] 7251 	sjmp	00115$
      002308                       7252 00187$:
      002308 74 35            [12] 7253 	mov	a,#0x35
      00230A B5*16 02         [24] 7254 	cjne	a,_key,00188$
      00230D 80 60            [24] 7255 	sjmp	00116$
      00230F                       7256 00188$:
      00230F 02r23r86         [24] 7257 	ljmp	00117$
                                   7258 ;	ecen4330lab7.c:2371: case '1':
      002312                       7259 00112$:
                                   7260 ;	ecen4330lab7.c:2372: validInput = 1;
      002312 75*1D 01         [24] 7261 	mov	_validInput,#0x01
                                   7262 ;	ecen4330lab7.c:2373: TH1 = 0xE8;                 // 1200 baud
      002315 75 8D E8         [24] 7263 	mov	_TH1,#0xe8
                                   7264 ;	ecen4330lab7.c:2374: PCON &= 0x7F;               // SMOD = 0
      002318 53 87 7F         [24] 7265 	anl	_PCON,#0x7f
                                   7266 ;	ecen4330lab7.c:2375: dataEnd = 1;
      00231B 75*1E 01         [24] 7267 	mov	_dataEnd,#0x01
                                   7268 ;	ecen4330lab7.c:2376: LCD_string_write("1\n");
      00231E 90r0Ar16         [24] 7269 	mov	dptr,#___str_64
      002321 75 F0 80         [24] 7270 	mov	b,#0x80
      002324 12r0Br3F         [24] 7271 	lcall	_LCD_string_write
                                   7272 ;	ecen4330lab7.c:2377: break;
      002327 02r23r98         [24] 7273 	ljmp	00120$
                                   7274 ;	ecen4330lab7.c:2378: case '2':
      00232A                       7275 00113$:
                                   7276 ;	ecen4330lab7.c:2379: validInput = 1;
      00232A 75*1D 01         [24] 7277 	mov	_validInput,#0x01
                                   7278 ;	ecen4330lab7.c:2380: TH1 = 0xF4;
      00232D 75 8D F4         [24] 7279 	mov	_TH1,#0xf4
                                   7280 ;	ecen4330lab7.c:2381: PCON &= 0x7F;               // SMOD = 0
      002330 53 87 7F         [24] 7281 	anl	_PCON,#0x7f
                                   7282 ;	ecen4330lab7.c:2382: dataEnd = 1;
      002333 75*1E 01         [24] 7283 	mov	_dataEnd,#0x01
                                   7284 ;	ecen4330lab7.c:2383: LCD_string_write("2\n");
      002336 90r0Ar19         [24] 7285 	mov	dptr,#___str_65
      002339 75 F0 80         [24] 7286 	mov	b,#0x80
      00233C 12r0Br3F         [24] 7287 	lcall	_LCD_string_write
                                   7288 ;	ecen4330lab7.c:2384: break;
                                   7289 ;	ecen4330lab7.c:2385: case '3':
      00233F 80 57            [24] 7290 	sjmp	00120$
      002341                       7291 00114$:
                                   7292 ;	ecen4330lab7.c:2386: validInput = 1;
      002341 75*1D 01         [24] 7293 	mov	_validInput,#0x01
                                   7294 ;	ecen4330lab7.c:2387: TH1 = 0xFA;
      002344 75 8D FA         [24] 7295 	mov	_TH1,#0xfa
                                   7296 ;	ecen4330lab7.c:2388: PCON &= 0x7F;               // SMOD = 0
      002347 53 87 7F         [24] 7297 	anl	_PCON,#0x7f
                                   7298 ;	ecen4330lab7.c:2389: dataEnd = 1;
      00234A 75*1E 01         [24] 7299 	mov	_dataEnd,#0x01
                                   7300 ;	ecen4330lab7.c:2390: LCD_string_write("3\n");
      00234D 90r0Ar1C         [24] 7301 	mov	dptr,#___str_66
      002350 75 F0 80         [24] 7302 	mov	b,#0x80
      002353 12r0Br3F         [24] 7303 	lcall	_LCD_string_write
                                   7304 ;	ecen4330lab7.c:2391: break;
                                   7305 ;	ecen4330lab7.c:2392: case '4':
      002356 80 40            [24] 7306 	sjmp	00120$
      002358                       7307 00115$:
                                   7308 ;	ecen4330lab7.c:2393: validInput = 1;
      002358 75*1D 01         [24] 7309 	mov	_validInput,#0x01
                                   7310 ;	ecen4330lab7.c:2394: TH1 = 0xFD;
      00235B 75 8D FD         [24] 7311 	mov	_TH1,#0xfd
                                   7312 ;	ecen4330lab7.c:2395: PCON &= 0x7F;               // SMOD = 0
      00235E 53 87 7F         [24] 7313 	anl	_PCON,#0x7f
                                   7314 ;	ecen4330lab7.c:2396: dataEnd = 1;
      002361 75*1E 01         [24] 7315 	mov	_dataEnd,#0x01
                                   7316 ;	ecen4330lab7.c:2397: LCD_string_write("4\n");
      002364 90r0Ar1F         [24] 7317 	mov	dptr,#___str_67
      002367 75 F0 80         [24] 7318 	mov	b,#0x80
      00236A 12r0Br3F         [24] 7319 	lcall	_LCD_string_write
                                   7320 ;	ecen4330lab7.c:2398: break;
                                   7321 ;	ecen4330lab7.c:2399: case '5':
      00236D 80 29            [24] 7322 	sjmp	00120$
      00236F                       7323 00116$:
                                   7324 ;	ecen4330lab7.c:2400: validInput = 1;
      00236F 75*1D 01         [24] 7325 	mov	_validInput,#0x01
                                   7326 ;	ecen4330lab7.c:2401: TH1 = 0xFD;
      002372 75 8D FD         [24] 7327 	mov	_TH1,#0xfd
                                   7328 ;	ecen4330lab7.c:2402: PCON |= 0x80;               // SMOD = 1
      002375 43 87 80         [24] 7329 	orl	_PCON,#0x80
                                   7330 ;	ecen4330lab7.c:2403: dataEnd = 1;
      002378 75*1E 01         [24] 7331 	mov	_dataEnd,#0x01
                                   7332 ;	ecen4330lab7.c:2404: LCD_string_write("5\n");
      00237B 90r0Ar22         [24] 7333 	mov	dptr,#___str_68
      00237E 75 F0 80         [24] 7334 	mov	b,#0x80
      002381 12r0Br3F         [24] 7335 	lcall	_LCD_string_write
                                   7336 ;	ecen4330lab7.c:2405: break;
                                   7337 ;	ecen4330lab7.c:2406: default:
      002384 80 12            [24] 7338 	sjmp	00120$
      002386                       7339 00117$:
                                   7340 ;	ecen4330lab7.c:2407: validInput = 0;
      002386 75*1D 00         [24] 7341 	mov	_validInput,#0x00
                                   7342 ;	ecen4330lab7.c:2408: LCD_string_write("X\n");
      002389 90r0Ar25         [24] 7343 	mov	dptr,#___str_69
      00238C 75 F0 80         [24] 7344 	mov	b,#0x80
      00238F 12r0Br3F         [24] 7345 	lcall	_LCD_string_write
                                   7346 ;	ecen4330lab7.c:2409: invalidInput();
      002392 12r0ErFB         [24] 7347 	lcall	_invalidInput
                                   7348 ;	ecen4330lab7.c:2410: dataEnd = 0;
      002395 75*1E 00         [24] 7349 	mov	_dataEnd,#0x00
                                   7350 ;	ecen4330lab7.c:2412: }
      002398                       7351 00120$:
                                   7352 ;	ecen4330lab7.c:2413: } while(!dataEnd);
      002398 E5*1E            [12] 7353 	mov	a,_dataEnd
      00239A 70 03            [24] 7354 	jnz	00189$
      00239C 02r22r2D         [24] 7355 	ljmp	00119$
      00239F                       7356 00189$:
                                   7357 ;	ecen4330lab7.c:2414: delay(200);
      00239F 90 00 C8         [24] 7358 	mov	dptr,#0x00c8
                                   7359 ;	ecen4330lab7.c:2415: }
      0023A2 02r01r9F         [24] 7360 	ljmp	_delay
                                   7361 ;------------------------------------------------------------
                                   7362 ;Allocation info for local variables in function 'UART_dataBits'
                                   7363 ;------------------------------------------------------------
                                   7364 ;	ecen4330lab7.c:2417: void UART_dataBits() {
                                   7365 ;	-----------------------------------------
                                   7366 ;	 function UART_dataBits
                                   7367 ;	-----------------------------------------
      0023A5                       7368 _UART_dataBits:
                                   7369 ;	ecen4330lab7.c:2418: resetLCD();
      0023A5 12r0ErD3         [24] 7370 	lcall	_resetLCD
                                   7371 ;	ecen4330lab7.c:2419: do {
      0023A8                       7372 00108$:
                                   7373 ;	ecen4330lab7.c:2420: LCD_string_write("\nData Bits\n\n");
      0023A8 90r0Ar28         [24] 7374 	mov	dptr,#___str_70
      0023AB 75 F0 80         [24] 7375 	mov	b,#0x80
      0023AE 12r0Br3F         [24] 7376 	lcall	_LCD_string_write
                                   7377 ;	ecen4330lab7.c:2421: LCD_string_write("(1) 8\n");
      0023B1 90r0Ar35         [24] 7378 	mov	dptr,#___str_71
      0023B4 75 F0 80         [24] 7379 	mov	b,#0x80
      0023B7 12r0Br3F         [24] 7380 	lcall	_LCD_string_write
                                   7381 ;	ecen4330lab7.c:2422: LCD_string_write("(2) 9\n");
      0023BA 90r0Ar3C         [24] 7382 	mov	dptr,#___str_72
      0023BD 75 F0 80         [24] 7383 	mov	b,#0x80
      0023C0 12r0Br3F         [24] 7384 	lcall	_LCD_string_write
                                   7385 ;	ecen4330lab7.c:2423: LCD_string_write("\nCurrent: ");
      0023C3 90r0Ar43         [24] 7386 	mov	dptr,#___str_73
      0023C6 75 F0 80         [24] 7387 	mov	b,#0x80
      0023C9 12r0Br3F         [24] 7388 	lcall	_LCD_string_write
                                   7389 ;	ecen4330lab7.c:2424: dataBits = SCON & 0xC0;
      0023CC E5 98            [12] 7390 	mov	a,_SCON
      0023CE 54 C0            [12] 7391 	anl	a,#0xc0
      0023D0 F5*3F            [12] 7392 	mov	_dataBits,a
                                   7393 ;	ecen4330lab7.c:2425: switch(dataBits) {
      0023D2 74 40            [12] 7394 	mov	a,#0x40
      0023D4 B5*3F 02         [24] 7395 	cjne	a,_dataBits,00137$
      0023D7 80 07            [24] 7396 	sjmp	00101$
      0023D9                       7397 00137$:
      0023D9 74 C0            [12] 7398 	mov	a,#0xc0
                                   7399 ;	ecen4330lab7.c:2426: case 0x40:
      0023DB B5*3F 16         [24] 7400 	cjne	a,_dataBits,00103$
      0023DE 80 0B            [24] 7401 	sjmp	00102$
      0023E0                       7402 00101$:
                                   7403 ;	ecen4330lab7.c:2427: LCD_string_write("8\n");
      0023E0 90r0Ar4E         [24] 7404 	mov	dptr,#___str_74
      0023E3 75 F0 80         [24] 7405 	mov	b,#0x80
      0023E6 12r0Br3F         [24] 7406 	lcall	_LCD_string_write
                                   7407 ;	ecen4330lab7.c:2428: break;
                                   7408 ;	ecen4330lab7.c:2429: case 0xC0:
      0023E9 80 09            [24] 7409 	sjmp	00103$
      0023EB                       7410 00102$:
                                   7411 ;	ecen4330lab7.c:2430: LCD_string_write("9\n");
      0023EB 90r0Ar51         [24] 7412 	mov	dptr,#___str_75
      0023EE 75 F0 80         [24] 7413 	mov	b,#0x80
      0023F1 12r0Br3F         [24] 7414 	lcall	_LCD_string_write
                                   7415 ;	ecen4330lab7.c:2432: }
      0023F4                       7416 00103$:
                                   7417 ;	ecen4330lab7.c:2433: LCD_string_write("\n   _");
      0023F4 90r0Ar10         [24] 7418 	mov	dptr,#___str_63
      0023F7 75 F0 80         [24] 7419 	mov	b,#0x80
      0023FA 12r0Br3F         [24] 7420 	lcall	_LCD_string_write
                                   7421 ;	ecen4330lab7.c:2434: cursor_x -= 1 * textsize * 6;
      0023FD E5*0C            [12] 7422 	mov	a,_textsize
      0023FF 75 F0 06         [24] 7423 	mov	b,#0x06
      002402 A4               [48] 7424 	mul	ab
      002403 FE               [12] 7425 	mov	r6,a
      002404 AF F0            [24] 7426 	mov	r7,b
      002406 E5*08            [12] 7427 	mov	a,_cursor_x
      002408 C3               [12] 7428 	clr	c
      002409 9E               [12] 7429 	subb	a,r6
      00240A F5*08            [12] 7430 	mov	_cursor_x,a
      00240C E5*09            [12] 7431 	mov	a,(_cursor_x + 1)
      00240E 9F               [12] 7432 	subb	a,r7
      00240F F5*09            [12] 7433 	mov	(_cursor_x + 1),a
                                   7434 ;	ecen4330lab7.c:2435: key = keyDetect();
      002411 12r0Br7E         [24] 7435 	lcall	_keyDetect
      002414 85 82*16         [24] 7436 	mov	_key,dpl
                                   7437 ;	ecen4330lab7.c:2436: switch (key){
      002417 74 31            [12] 7438 	mov	a,#0x31
      002419 B5*16 02         [24] 7439 	cjne	a,_key,00139$
      00241C 80 07            [24] 7440 	sjmp	00104$
      00241E                       7441 00139$:
      00241E 74 32            [12] 7442 	mov	a,#0x32
                                   7443 ;	ecen4330lab7.c:2438: case '1':
      002420 B5*16 2A         [24] 7444 	cjne	a,_key,00106$
      002423 80 14            [24] 7445 	sjmp	00105$
      002425                       7446 00104$:
                                   7447 ;	ecen4330lab7.c:2439: validInput = 1;
      002425 75*1D 01         [24] 7448 	mov	_validInput,#0x01
                                   7449 ;	ecen4330lab7.c:2440: SCON = SCON & 0x7F;
      002428 53 98 7F         [24] 7450 	anl	_SCON,#0x7f
                                   7451 ;	ecen4330lab7.c:2441: dataEnd = 1;
      00242B 75*1E 01         [24] 7452 	mov	_dataEnd,#0x01
                                   7453 ;	ecen4330lab7.c:2442: LCD_string_write("1\n");
      00242E 90r0Ar16         [24] 7454 	mov	dptr,#___str_64
      002431 75 F0 80         [24] 7455 	mov	b,#0x80
      002434 12r0Br3F         [24] 7456 	lcall	_LCD_string_write
                                   7457 ;	ecen4330lab7.c:2443: break;
                                   7458 ;	ecen4330lab7.c:2444: case '2':
      002437 80 26            [24] 7459 	sjmp	00109$
      002439                       7460 00105$:
                                   7461 ;	ecen4330lab7.c:2445: validInput = 1;
      002439 75*1D 01         [24] 7462 	mov	_validInput,#0x01
                                   7463 ;	ecen4330lab7.c:2446: SCON = SCON | 0xC0;
      00243C 43 98 C0         [24] 7464 	orl	_SCON,#0xc0
                                   7465 ;	ecen4330lab7.c:2447: dataEnd = 1;
      00243F 75*1E 01         [24] 7466 	mov	_dataEnd,#0x01
                                   7467 ;	ecen4330lab7.c:2448: LCD_string_write("2\n");
      002442 90r0Ar19         [24] 7468 	mov	dptr,#___str_65
      002445 75 F0 80         [24] 7469 	mov	b,#0x80
      002448 12r0Br3F         [24] 7470 	lcall	_LCD_string_write
                                   7471 ;	ecen4330lab7.c:2451: break;
                                   7472 ;	ecen4330lab7.c:2452: default:
      00244B 80 12            [24] 7473 	sjmp	00109$
      00244D                       7474 00106$:
                                   7475 ;	ecen4330lab7.c:2453: validInput = 0;
      00244D 75*1D 00         [24] 7476 	mov	_validInput,#0x00
                                   7477 ;	ecen4330lab7.c:2454: LCD_string_write("X\n");
      002450 90r0Ar25         [24] 7478 	mov	dptr,#___str_69
      002453 75 F0 80         [24] 7479 	mov	b,#0x80
      002456 12r0Br3F         [24] 7480 	lcall	_LCD_string_write
                                   7481 ;	ecen4330lab7.c:2455: invalidInput();
      002459 12r0ErFB         [24] 7482 	lcall	_invalidInput
                                   7483 ;	ecen4330lab7.c:2456: dataEnd = 0;
      00245C 75*1E 00         [24] 7484 	mov	_dataEnd,#0x00
                                   7485 ;	ecen4330lab7.c:2458: }
      00245F                       7486 00109$:
                                   7487 ;	ecen4330lab7.c:2459: } while(!dataEnd);
      00245F E5*1E            [12] 7488 	mov	a,_dataEnd
      002461 70 03            [24] 7489 	jnz	00141$
      002463 02r23rA8         [24] 7490 	ljmp	00108$
      002466                       7491 00141$:
                                   7492 ;	ecen4330lab7.c:2460: delay(200);
      002466 90 00 C8         [24] 7493 	mov	dptr,#0x00c8
                                   7494 ;	ecen4330lab7.c:2461: }
      002469 02r01r9F         [24] 7495 	ljmp	_delay
                                   7496 ;------------------------------------------------------------
                                   7497 ;Allocation info for local variables in function 'UART_parity'
                                   7498 ;------------------------------------------------------------
                                   7499 ;	ecen4330lab7.c:2464: void UART_parity() {
                                   7500 ;	-----------------------------------------
                                   7501 ;	 function UART_parity
                                   7502 ;	-----------------------------------------
      00246C                       7503 _UART_parity:
                                   7504 ;	ecen4330lab7.c:2465: resetLCD();
      00246C 12r0ErD3         [24] 7505 	lcall	_resetLCD
                                   7506 ;	ecen4330lab7.c:2466: do {
      00246F                       7507 00110$:
                                   7508 ;	ecen4330lab7.c:2467: LCD_string_write("\nParity\n\n");
      00246F 90r0Ar54         [24] 7509 	mov	dptr,#___str_76
      002472 75 F0 80         [24] 7510 	mov	b,#0x80
      002475 12r0Br3F         [24] 7511 	lcall	_LCD_string_write
                                   7512 ;	ecen4330lab7.c:2468: LCD_string_write("(1) Even\n");
      002478 90r0Ar5E         [24] 7513 	mov	dptr,#___str_77
      00247B 75 F0 80         [24] 7514 	mov	b,#0x80
      00247E 12r0Br3F         [24] 7515 	lcall	_LCD_string_write
                                   7516 ;	ecen4330lab7.c:2469: LCD_string_write("(2) Odd\n");
      002481 90r0Ar68         [24] 7517 	mov	dptr,#___str_78
      002484 75 F0 80         [24] 7518 	mov	b,#0x80
      002487 12r0Br3F         [24] 7519 	lcall	_LCD_string_write
                                   7520 ;	ecen4330lab7.c:2470: LCD_string_write("(3) None\n");
      00248A 90r0Ar71         [24] 7521 	mov	dptr,#___str_79
      00248D 75 F0 80         [24] 7522 	mov	b,#0x80
      002490 12r0Br3F         [24] 7523 	lcall	_LCD_string_write
                                   7524 ;	ecen4330lab7.c:2471: LCD_string_write("\nCurrent: ");
      002493 90r0Ar43         [24] 7525 	mov	dptr,#___str_73
      002496 75 F0 80         [24] 7526 	mov	b,#0x80
      002499 12r0Br3F         [24] 7527 	lcall	_LCD_string_write
                                   7528 ;	ecen4330lab7.c:2472: switch(parity) {
      00249C E4               [12] 7529 	clr	a
      00249D B5*40 02         [24] 7530 	cjne	a,_parity,00147$
      0024A0 80 0E            [24] 7531 	sjmp	00101$
      0024A2                       7532 00147$:
      0024A2 74 01            [12] 7533 	mov	a,#0x01
      0024A4 B5*40 02         [24] 7534 	cjne	a,_parity,00148$
      0024A7 80 12            [24] 7535 	sjmp	00102$
      0024A9                       7536 00148$:
      0024A9 74 02            [12] 7537 	mov	a,#0x02
                                   7538 ;	ecen4330lab7.c:2473: case 0:
      0024AB B5*40 21         [24] 7539 	cjne	a,_parity,00104$
      0024AE 80 16            [24] 7540 	sjmp	00103$
      0024B0                       7541 00101$:
                                   7542 ;	ecen4330lab7.c:2474: LCD_string_write("Even\n");
      0024B0 90r0Ar7B         [24] 7543 	mov	dptr,#___str_80
      0024B3 75 F0 80         [24] 7544 	mov	b,#0x80
      0024B6 12r0Br3F         [24] 7545 	lcall	_LCD_string_write
                                   7546 ;	ecen4330lab7.c:2475: break;
                                   7547 ;	ecen4330lab7.c:2476: case 1:
      0024B9 80 14            [24] 7548 	sjmp	00104$
      0024BB                       7549 00102$:
                                   7550 ;	ecen4330lab7.c:2477: LCD_string_write("Odd\n");
      0024BB 90r0Ar81         [24] 7551 	mov	dptr,#___str_81
      0024BE 75 F0 80         [24] 7552 	mov	b,#0x80
      0024C1 12r0Br3F         [24] 7553 	lcall	_LCD_string_write
                                   7554 ;	ecen4330lab7.c:2478: break;
                                   7555 ;	ecen4330lab7.c:2479: case 2:
      0024C4 80 09            [24] 7556 	sjmp	00104$
      0024C6                       7557 00103$:
                                   7558 ;	ecen4330lab7.c:2480: LCD_string_write("None\n");
      0024C6 90r0Ar86         [24] 7559 	mov	dptr,#___str_82
      0024C9 75 F0 80         [24] 7560 	mov	b,#0x80
      0024CC 12r0Br3F         [24] 7561 	lcall	_LCD_string_write
                                   7562 ;	ecen4330lab7.c:2482: }
      0024CF                       7563 00104$:
                                   7564 ;	ecen4330lab7.c:2483: LCD_string_write("\n   _");
      0024CF 90r0Ar10         [24] 7565 	mov	dptr,#___str_63
      0024D2 75 F0 80         [24] 7566 	mov	b,#0x80
      0024D5 12r0Br3F         [24] 7567 	lcall	_LCD_string_write
                                   7568 ;	ecen4330lab7.c:2484: cursor_x -= 1 * textsize * 6;
      0024D8 E5*0C            [12] 7569 	mov	a,_textsize
      0024DA 75 F0 06         [24] 7570 	mov	b,#0x06
      0024DD A4               [48] 7571 	mul	ab
      0024DE FE               [12] 7572 	mov	r6,a
      0024DF AF F0            [24] 7573 	mov	r7,b
      0024E1 E5*08            [12] 7574 	mov	a,_cursor_x
      0024E3 C3               [12] 7575 	clr	c
      0024E4 9E               [12] 7576 	subb	a,r6
      0024E5 F5*08            [12] 7577 	mov	_cursor_x,a
      0024E7 E5*09            [12] 7578 	mov	a,(_cursor_x + 1)
      0024E9 9F               [12] 7579 	subb	a,r7
      0024EA F5*09            [12] 7580 	mov	(_cursor_x + 1),a
                                   7581 ;	ecen4330lab7.c:2485: key = keyDetect();
      0024EC 12r0Br7E         [24] 7582 	lcall	_keyDetect
      0024EF 85 82*16         [24] 7583 	mov	_key,dpl
                                   7584 ;	ecen4330lab7.c:2486: switch (key){
      0024F2 74 31            [12] 7585 	mov	a,#0x31
      0024F4 B5*16 02         [24] 7586 	cjne	a,_key,00150$
      0024F7 80 0E            [24] 7587 	sjmp	00105$
      0024F9                       7588 00150$:
      0024F9 74 32            [12] 7589 	mov	a,#0x32
      0024FB B5*16 02         [24] 7590 	cjne	a,_key,00151$
      0024FE 80 1B            [24] 7591 	sjmp	00106$
      002500                       7592 00151$:
      002500 74 33            [12] 7593 	mov	a,#0x33
                                   7594 ;	ecen4330lab7.c:2488: case '1':
      002502 B5*16 3E         [24] 7595 	cjne	a,_key,00108$
      002505 80 28            [24] 7596 	sjmp	00107$
      002507                       7597 00105$:
                                   7598 ;	ecen4330lab7.c:2489: validInput = 1;
      002507 75*1D 01         [24] 7599 	mov	_validInput,#0x01
                                   7600 ;	ecen4330lab7.c:2490: parity = 0;
      00250A 75*40 00         [24] 7601 	mov	_parity,#0x00
                                   7602 ;	ecen4330lab7.c:2491: dataEnd = 1;
      00250D 75*1E 01         [24] 7603 	mov	_dataEnd,#0x01
                                   7604 ;	ecen4330lab7.c:2492: LCD_string_write("1\n");
      002510 90r0Ar16         [24] 7605 	mov	dptr,#___str_64
      002513 75 F0 80         [24] 7606 	mov	b,#0x80
      002516 12r0Br3F         [24] 7607 	lcall	_LCD_string_write
                                   7608 ;	ecen4330lab7.c:2493: break;
                                   7609 ;	ecen4330lab7.c:2494: case '2':
      002519 80 3A            [24] 7610 	sjmp	00111$
      00251B                       7611 00106$:
                                   7612 ;	ecen4330lab7.c:2495: validInput = 1;
      00251B 75*1D 01         [24] 7613 	mov	_validInput,#0x01
                                   7614 ;	ecen4330lab7.c:2496: parity = 1;
      00251E 75*40 01         [24] 7615 	mov	_parity,#0x01
                                   7616 ;	ecen4330lab7.c:2497: dataEnd = 1;
      002521 75*1E 01         [24] 7617 	mov	_dataEnd,#0x01
                                   7618 ;	ecen4330lab7.c:2498: LCD_string_write("2\n");
      002524 90r0Ar19         [24] 7619 	mov	dptr,#___str_65
      002527 75 F0 80         [24] 7620 	mov	b,#0x80
      00252A 12r0Br3F         [24] 7621 	lcall	_LCD_string_write
                                   7622 ;	ecen4330lab7.c:2499: break;
                                   7623 ;	ecen4330lab7.c:2500: case '3':
      00252D 80 26            [24] 7624 	sjmp	00111$
      00252F                       7625 00107$:
                                   7626 ;	ecen4330lab7.c:2501: validInput = 1;
      00252F 75*1D 01         [24] 7627 	mov	_validInput,#0x01
                                   7628 ;	ecen4330lab7.c:2502: parity = 2;
      002532 75*40 02         [24] 7629 	mov	_parity,#0x02
                                   7630 ;	ecen4330lab7.c:2503: dataEnd = 1;
      002535 75*1E 01         [24] 7631 	mov	_dataEnd,#0x01
                                   7632 ;	ecen4330lab7.c:2504: LCD_string_write("3\n");
      002538 90r0Ar1C         [24] 7633 	mov	dptr,#___str_66
      00253B 75 F0 80         [24] 7634 	mov	b,#0x80
      00253E 12r0Br3F         [24] 7635 	lcall	_LCD_string_write
                                   7636 ;	ecen4330lab7.c:2505: break;
                                   7637 ;	ecen4330lab7.c:2506: default:
      002541 80 12            [24] 7638 	sjmp	00111$
      002543                       7639 00108$:
                                   7640 ;	ecen4330lab7.c:2507: validInput = 0;
      002543 75*1D 00         [24] 7641 	mov	_validInput,#0x00
                                   7642 ;	ecen4330lab7.c:2508: LCD_string_write("X\n");
      002546 90r0Ar25         [24] 7643 	mov	dptr,#___str_69
      002549 75 F0 80         [24] 7644 	mov	b,#0x80
      00254C 12r0Br3F         [24] 7645 	lcall	_LCD_string_write
                                   7646 ;	ecen4330lab7.c:2509: invalidInput();
      00254F 12r0ErFB         [24] 7647 	lcall	_invalidInput
                                   7648 ;	ecen4330lab7.c:2510: dataEnd = 0;
      002552 75*1E 00         [24] 7649 	mov	_dataEnd,#0x00
                                   7650 ;	ecen4330lab7.c:2512: }
      002555                       7651 00111$:
                                   7652 ;	ecen4330lab7.c:2513: } while(!dataEnd);
      002555 E5*1E            [12] 7653 	mov	a,_dataEnd
      002557 70 03            [24] 7654 	jnz	00153$
      002559 02r24r6F         [24] 7655 	ljmp	00110$
      00255C                       7656 00153$:
                                   7657 ;	ecen4330lab7.c:2514: delay(200);
      00255C 90 00 C8         [24] 7658 	mov	dptr,#0x00c8
                                   7659 ;	ecen4330lab7.c:2515: }
      00255F 02r01r9F         [24] 7660 	ljmp	_delay
                                   7661 ;------------------------------------------------------------
                                   7662 ;Allocation info for local variables in function 'UART_parity_count'
                                   7663 ;------------------------------------------------------------
                                   7664 ;count_byte                Allocated to registers r7 
                                   7665 ;count                     Allocated to registers r6 
                                   7666 ;i                         Allocated to registers r4 r5 
                                   7667 ;------------------------------------------------------------
                                   7668 ;	ecen4330lab7.c:2518: unsigned char UART_parity_count(unsigned char count_byte) {
                                   7669 ;	-----------------------------------------
                                   7670 ;	 function UART_parity_count
                                   7671 ;	-----------------------------------------
      002562                       7672 _UART_parity_count:
      002562 AF 82            [24] 7673 	mov	r7,dpl
                                   7674 ;	ecen4330lab7.c:2521: for(int i = 0; i < 8; i++) {
      002564 7E 00            [12] 7675 	mov	r6,#0x00
      002566 7C 00            [12] 7676 	mov	r4,#0x00
      002568 7D 00            [12] 7677 	mov	r5,#0x00
      00256A                       7678 00105$:
      00256A C3               [12] 7679 	clr	c
      00256B EC               [12] 7680 	mov	a,r4
      00256C 94 08            [12] 7681 	subb	a,#0x08
      00256E ED               [12] 7682 	mov	a,r5
      00256F 64 80            [12] 7683 	xrl	a,#0x80
      002571 94 80            [12] 7684 	subb	a,#0x80
      002573 50 17            [24] 7685 	jnc	00103$
                                   7686 ;	ecen4330lab7.c:2522: if((count_byte >> i) & 0x01 == 0x01) {
      002575 8C F0            [24] 7687 	mov	b,r4
      002577 05 F0            [12] 7688 	inc	b
      002579 EF               [12] 7689 	mov	a,r7
      00257A 80 02            [24] 7690 	sjmp	00124$
      00257C                       7691 00123$:
      00257C C3               [12] 7692 	clr	c
      00257D 13               [12] 7693 	rrc	a
      00257E                       7694 00124$:
      00257E D5 F0 FB         [24] 7695 	djnz	b,00123$
      002581 30 E0 01         [24] 7696 	jnb	acc.0,00106$
                                   7697 ;	ecen4330lab7.c:2523: count++;
      002584 0E               [12] 7698 	inc	r6
      002585                       7699 00106$:
                                   7700 ;	ecen4330lab7.c:2521: for(int i = 0; i < 8; i++) {
      002585 0C               [12] 7701 	inc	r4
      002586 BC 00 E1         [24] 7702 	cjne	r4,#0x00,00105$
      002589 0D               [12] 7703 	inc	r5
      00258A 80 DE            [24] 7704 	sjmp	00105$
      00258C                       7705 00103$:
                                   7706 ;	ecen4330lab7.c:2526: return count;
      00258C 8E 82            [24] 7707 	mov	dpl,r6
                                   7708 ;	ecen4330lab7.c:2527: }
      00258E 22               [24] 7709 	ret
                                   7710 ;------------------------------------------------------------
                                   7711 ;Allocation info for local variables in function 'UART_send'
                                   7712 ;------------------------------------------------------------
                                   7713 ;	ecen4330lab7.c:2535: void UART_send() {
                                   7714 ;	-----------------------------------------
                                   7715 ;	 function UART_send
                                   7716 ;	-----------------------------------------
      00258F                       7717 _UART_send:
                                   7718 ;	ecen4330lab7.c:2536: resetLCD();
      00258F 12r0ErD3         [24] 7719 	lcall	_resetLCD
                                   7720 ;	ecen4330lab7.c:2539: LCD_string_write("\nEnter\ncharacter\nto send:\n\n   _");
      002592 90r0Ar8C         [24] 7721 	mov	dptr,#___str_83
      002595 75 F0 80         [24] 7722 	mov	b,#0x80
      002598 12r0Br3F         [24] 7723 	lcall	_LCD_string_write
                                   7724 ;	ecen4330lab7.c:2542: cursor_x -= 1 * textsize * 6;
      00259B E5*0C            [12] 7725 	mov	a,_textsize
      00259D 75 F0 06         [24] 7726 	mov	b,#0x06
      0025A0 A4               [48] 7727 	mul	ab
      0025A1 FE               [12] 7728 	mov	r6,a
      0025A2 AF F0            [24] 7729 	mov	r7,b
      0025A4 E5*08            [12] 7730 	mov	a,_cursor_x
      0025A6 C3               [12] 7731 	clr	c
      0025A7 9E               [12] 7732 	subb	a,r6
      0025A8 F5*08            [12] 7733 	mov	_cursor_x,a
      0025AA E5*09            [12] 7734 	mov	a,(_cursor_x + 1)
      0025AC 9F               [12] 7735 	subb	a,r7
      0025AD F5*09            [12] 7736 	mov	(_cursor_x + 1),a
                                   7737 ;	ecen4330lab7.c:2545: key = keyDetect();
      0025AF 12r0Br7E         [24] 7738 	lcall	_keyDetect
                                   7739 ;	ecen4330lab7.c:2546: write(key);
      0025B2 85 82*16         [24] 7740 	mov  _key,dpl
      0025B5 12r0ArD9         [24] 7741 	lcall	_write
                                   7742 ;	ecen4330lab7.c:2548: data = UART_parity_count(key);
      0025B8 85*16 82         [24] 7743 	mov	dpl,_key
      0025BB 12r25r62         [24] 7744 	lcall	_UART_parity_count
      0025BE 85 82*20         [24] 7745 	mov	_data,dpl
                                   7746 ;	ecen4330lab7.c:2552: dataBits = SCON & 0xC0;
      0025C1 E5 98            [12] 7747 	mov	a,_SCON
      0025C3 54 C0            [12] 7748 	anl	a,#0xc0
      0025C5 F5*3F            [12] 7749 	mov	_dataBits,a
                                   7750 ;	ecen4330lab7.c:2553: switch(dataBits) {
      0025C7 74 40            [12] 7751 	mov	a,#0x40
      0025C9 B5*3F 02         [24] 7752 	cjne	a,_dataBits,00172$
      0025CC 80 07            [24] 7753 	sjmp	00101$
      0025CE                       7754 00172$:
      0025CE 74 C0            [12] 7755 	mov	a,#0xc0
                                   7756 ;	ecen4330lab7.c:2555: case 0x40:
      0025D0 B5*3F 64         [24] 7757 	cjne	a,_dataBits,00121$
      0025D3 80 2D            [24] 7758 	sjmp	00110$
      0025D5                       7759 00101$:
                                   7760 ;	ecen4330lab7.c:2556: switch(parity) {
      0025D5 E4               [12] 7761 	clr	a
      0025D6 B5*40 02         [24] 7762 	cjne	a,_parity,00174$
      0025D9 80 0E            [24] 7763 	sjmp	00102$
      0025DB                       7764 00174$:
      0025DB 74 01            [12] 7765 	mov	a,#0x01
      0025DD B5*40 02         [24] 7766 	cjne	a,_parity,00175$
      0025E0 80 11            [24] 7767 	sjmp	00105$
      0025E2                       7768 00175$:
      0025E2 74 02            [12] 7769 	mov	a,#0x02
                                   7770 ;	ecen4330lab7.c:2558: case 0:
      0025E4 B5*40 50         [24] 7771 	cjne	a,_parity,00121$
      0025E7 80 14            [24] 7772 	sjmp	00108$
      0025E9                       7773 00102$:
                                   7774 ;	ecen4330lab7.c:2560: if(data % 2 != 0) {
      0025E9 E5*20            [12] 7775 	mov	a,_data
      0025EB 30 E0 49         [24] 7776 	jnb	acc.0,00121$
                                   7777 ;	ecen4330lab7.c:2562: key |= 0x80;
      0025EE 43*16 80         [24] 7778 	orl	_key,#0x80
                                   7779 ;	ecen4330lab7.c:2564: break;
                                   7780 ;	ecen4330lab7.c:2566: case 1:
      0025F1 80 44            [24] 7781 	sjmp	00121$
      0025F3                       7782 00105$:
                                   7783 ;	ecen4330lab7.c:2568: if(data % 2 == 0) {
      0025F3 E5*20            [12] 7784 	mov	a,_data
      0025F5 20 E0 3F         [24] 7785 	jb	acc.0,00121$
                                   7786 ;	ecen4330lab7.c:2570: key |= 0x80;
      0025F8 43*16 80         [24] 7787 	orl	_key,#0x80
                                   7788 ;	ecen4330lab7.c:2572: break;
                                   7789 ;	ecen4330lab7.c:2574: case 2:
      0025FB 80 3A            [24] 7790 	sjmp	00121$
      0025FD                       7791 00108$:
                                   7792 ;	ecen4330lab7.c:2575: key &= 0x7F;
      0025FD 53*16 7F         [24] 7793 	anl	_key,#0x7f
                                   7794 ;	ecen4330lab7.c:2578: break;
                                   7795 ;	ecen4330lab7.c:2580: case 0xC0:
      002600 80 35            [24] 7796 	sjmp	00121$
      002602                       7797 00110$:
                                   7798 ;	ecen4330lab7.c:2581: switch(parity) {
      002602 E4               [12] 7799 	clr	a
      002603 B5*40 02         [24] 7800 	cjne	a,_parity,00179$
      002606 80 0E            [24] 7801 	sjmp	00111$
      002608                       7802 00179$:
      002608 74 01            [12] 7803 	mov	a,#0x01
      00260A B5*40 02         [24] 7804 	cjne	a,_parity,00180$
      00260D 80 16            [24] 7805 	sjmp	00115$
      00260F                       7806 00180$:
      00260F 74 02            [12] 7807 	mov	a,#0x02
                                   7808 ;	ecen4330lab7.c:2583: case 0:
      002611 B5*40 23         [24] 7809 	cjne	a,_parity,00121$
      002614 80 1E            [24] 7810 	sjmp	00119$
      002616                       7811 00111$:
                                   7812 ;	ecen4330lab7.c:2585: if(data % 2 != 0) {
      002616 E5*20            [12] 7813 	mov	a,_data
      002618 30 E0 05         [24] 7814 	jnb	acc.0,00113$
                                   7815 ;	ecen4330lab7.c:2587: SCON |= 0x08;
      00261B 43 98 08         [24] 7816 	orl	_SCON,#0x08
      00261E 80 17            [24] 7817 	sjmp	00121$
      002620                       7818 00113$:
                                   7819 ;	ecen4330lab7.c:2590: SCON &= 0xF7;
      002620 53 98 F7         [24] 7820 	anl	_SCON,#0xf7
                                   7821 ;	ecen4330lab7.c:2592: break;
                                   7822 ;	ecen4330lab7.c:2594: case 1:
      002623 80 12            [24] 7823 	sjmp	00121$
      002625                       7824 00115$:
                                   7825 ;	ecen4330lab7.c:2596: if(data % 2 == 0) {
      002625 E5*20            [12] 7826 	mov	a,_data
      002627 20 E0 05         [24] 7827 	jb	acc.0,00117$
                                   7828 ;	ecen4330lab7.c:2598: SCON |= 0x08;
      00262A 43 98 08         [24] 7829 	orl	_SCON,#0x08
      00262D 80 08            [24] 7830 	sjmp	00121$
      00262F                       7831 00117$:
                                   7832 ;	ecen4330lab7.c:2601: SCON &= 0xF7;
      00262F 53 98 F7         [24] 7833 	anl	_SCON,#0xf7
                                   7834 ;	ecen4330lab7.c:2603: break;
                                   7835 ;	ecen4330lab7.c:2605: case 2:
      002632 80 03            [24] 7836 	sjmp	00121$
      002634                       7837 00119$:
                                   7838 ;	ecen4330lab7.c:2606: SCON &= 0xF7;
      002634 53 98 F7         [24] 7839 	anl	_SCON,#0xf7
                                   7840 ;	ecen4330lab7.c:2610: }
      002637                       7841 00121$:
                                   7842 ;	ecen4330lab7.c:2620: SBUF = key;
      002637 85*16 99         [24] 7843 	mov	_SBUF,_key
                                   7844 ;	ecen4330lab7.c:2621: UART_transmit();
      00263A 12r01r99         [24] 7845 	lcall	_UART_transmit
                                   7846 ;	ecen4330lab7.c:2622: delay(200);
      00263D 90 00 C8         [24] 7847 	mov	dptr,#0x00c8
      002640 12r01r9F         [24] 7848 	lcall	_delay
                                   7849 ;	ecen4330lab7.c:2623: resetLCD();
                                   7850 ;	ecen4330lab7.c:2624: }
      002643 02r0ErD3         [24] 7851 	ljmp	_resetLCD
                                   7852 ;------------------------------------------------------------
                                   7853 ;Allocation info for local variables in function 'UART'
                                   7854 ;------------------------------------------------------------
                                   7855 ;	ecen4330lab7.c:2638: void UART(){
                                   7856 ;	-----------------------------------------
                                   7857 ;	 function UART
                                   7858 ;	-----------------------------------------
      002646                       7859 _UART:
                                   7860 ;	ecen4330lab7.c:2641: do{
      002646                       7861 00126$:
                                   7862 ;	ecen4330lab7.c:2642: resetLCD();
      002646 12r0ErD3         [24] 7863 	lcall	_resetLCD
                                   7864 ;	ecen4330lab7.c:2643: LCD_string_write("\n(1) Data Rate");
      002649 90r0ArAC         [24] 7865 	mov	dptr,#___str_84
      00264C 75 F0 80         [24] 7866 	mov	b,#0x80
      00264F 12r0Br3F         [24] 7867 	lcall	_LCD_string_write
                                   7868 ;	ecen4330lab7.c:2644: LCD_string_write("\n(2) # of Data\n    Bits");
      002652 90r0ArBB         [24] 7869 	mov	dptr,#___str_85
      002655 75 F0 80         [24] 7870 	mov	b,#0x80
      002658 12r0Br3F         [24] 7871 	lcall	_LCD_string_write
                                   7872 ;	ecen4330lab7.c:2645: LCD_string_write("\n(3) Parity");
      00265B 90r0ArD3         [24] 7873 	mov	dptr,#___str_86
      00265E 75 F0 80         [24] 7874 	mov	b,#0x80
      002661 12r0Br3F         [24] 7875 	lcall	_LCD_string_write
                                   7876 ;	ecen4330lab7.c:2646: LCD_string_write("\n(4) Send Data");
      002664 90r0ArDF         [24] 7877 	mov	dptr,#___str_87
      002667 75 F0 80         [24] 7878 	mov	b,#0x80
      00266A 12r0Br3F         [24] 7879 	lcall	_LCD_string_write
                                   7880 ;	ecen4330lab7.c:2647: LCD_string_write("\n(E) End\n");
      00266D 90r0ArEE         [24] 7881 	mov	dptr,#___str_88
      002670 75 F0 80         [24] 7882 	mov	b,#0x80
      002673 12r0Br3F         [24] 7883 	lcall	_LCD_string_write
                                   7884 ;	ecen4330lab7.c:2649: setTextSize(2);
      002676 75 82 02         [24] 7885 	mov	dpl,#0x02
      002679 12r04r5D         [24] 7886 	lcall	_setTextSize
                                   7887 ;	ecen4330lab7.c:2650: LCD_string_write("\n\n\nBaud:   ");
      00267C 90r0ArF8         [24] 7888 	mov	dptr,#___str_89
      00267F 75 F0 80         [24] 7889 	mov	b,#0x80
      002682 12r0Br3F         [24] 7890 	lcall	_LCD_string_write
                                   7891 ;	ecen4330lab7.c:2651: dataRate = PCON & 0x80;
      002685 E5 87            [12] 7892 	mov	a,_PCON
      002687 54 80            [12] 7893 	anl	a,#0x80
      002689 F5*3E            [12] 7894 	mov	_dataRate,a
                                   7895 ;	ecen4330lab7.c:2653: if(dataRate == 0x80){
      00268B 74 80            [12] 7896 	mov	a,#0x80
      00268D B5*3E 1B         [24] 7897 	cjne	a,_dataRate,00110$
                                   7898 ;	ecen4330lab7.c:2654: if (TH1 == 0xFD){
      002690 74 FD            [12] 7899 	mov	a,#0xfd
      002692 B5 8D 0B         [24] 7900 	cjne	a,_TH1,00102$
                                   7901 ;	ecen4330lab7.c:2655: LCD_string_write("19200");
      002695 90r0Br04         [24] 7902 	mov	dptr,#___str_90
      002698 75 F0 80         [24] 7903 	mov	b,#0x80
      00269B 12r0Br3F         [24] 7904 	lcall	_LCD_string_write
      00269E 80 4B            [24] 7905 	sjmp	00111$
      0026A0                       7906 00102$:
                                   7907 ;	ecen4330lab7.c:2658: LCD_string_write("Invalid");
      0026A0 90r0Br0A         [24] 7908 	mov	dptr,#___str_91
      0026A3 75 F0 80         [24] 7909 	mov	b,#0x80
      0026A6 12r0Br3F         [24] 7910 	lcall	_LCD_string_write
      0026A9 80 40            [24] 7911 	sjmp	00111$
      0026AB                       7912 00110$:
                                   7913 ;	ecen4330lab7.c:2662: switch(TH1) {
      0026AB AF 8D            [24] 7914 	mov	r7,_TH1
      0026AD BF E8 02         [24] 7915 	cjne	r7,#0xe8,00203$
      0026B0 80 0F            [24] 7916 	sjmp	00104$
      0026B2                       7917 00203$:
      0026B2 BF F4 02         [24] 7918 	cjne	r7,#0xf4,00204$
      0026B5 80 15            [24] 7919 	sjmp	00105$
      0026B7                       7920 00204$:
      0026B7 BF FA 02         [24] 7921 	cjne	r7,#0xfa,00205$
      0026BA 80 1B            [24] 7922 	sjmp	00106$
      0026BC                       7923 00205$:
                                   7924 ;	ecen4330lab7.c:2663: case 0xE8:
      0026BC BF FD 2C         [24] 7925 	cjne	r7,#0xfd,00111$
      0026BF 80 21            [24] 7926 	sjmp	00107$
      0026C1                       7927 00104$:
                                   7928 ;	ecen4330lab7.c:2664: LCD_string_write("1200");
      0026C1 90r0Br12         [24] 7929 	mov	dptr,#___str_92
      0026C4 75 F0 80         [24] 7930 	mov	b,#0x80
      0026C7 12r0Br3F         [24] 7931 	lcall	_LCD_string_write
                                   7932 ;	ecen4330lab7.c:2665: break;
                                   7933 ;	ecen4330lab7.c:2666: case 0xF4:
      0026CA 80 1F            [24] 7934 	sjmp	00111$
      0026CC                       7935 00105$:
                                   7936 ;	ecen4330lab7.c:2667: LCD_string_write("2400");
      0026CC 90r0Br17         [24] 7937 	mov	dptr,#___str_93
      0026CF 75 F0 80         [24] 7938 	mov	b,#0x80
      0026D2 12r0Br3F         [24] 7939 	lcall	_LCD_string_write
                                   7940 ;	ecen4330lab7.c:2668: break;
                                   7941 ;	ecen4330lab7.c:2669: case 0xFA:
      0026D5 80 14            [24] 7942 	sjmp	00111$
      0026D7                       7943 00106$:
                                   7944 ;	ecen4330lab7.c:2670: LCD_string_write("4800");
      0026D7 90r0Br1C         [24] 7945 	mov	dptr,#___str_94
      0026DA 75 F0 80         [24] 7946 	mov	b,#0x80
      0026DD 12r0Br3F         [24] 7947 	lcall	_LCD_string_write
                                   7948 ;	ecen4330lab7.c:2671: break;
                                   7949 ;	ecen4330lab7.c:2672: case 0xFD:
      0026E0 80 09            [24] 7950 	sjmp	00111$
      0026E2                       7951 00107$:
                                   7952 ;	ecen4330lab7.c:2673: LCD_string_write("9600");
      0026E2 90r0Br21         [24] 7953 	mov	dptr,#___str_95
      0026E5 75 F0 80         [24] 7954 	mov	b,#0x80
      0026E8 12r0Br3F         [24] 7955 	lcall	_LCD_string_write
                                   7956 ;	ecen4330lab7.c:2675: }
      0026EB                       7957 00111$:
                                   7958 ;	ecen4330lab7.c:2677: LCD_string_write("\nBits:   ");
      0026EB 90r0Br26         [24] 7959 	mov	dptr,#___str_96
      0026EE 75 F0 80         [24] 7960 	mov	b,#0x80
      0026F1 12r0Br3F         [24] 7961 	lcall	_LCD_string_write
                                   7962 ;	ecen4330lab7.c:2678: dataBits = SCON & 0xC0;
      0026F4 E5 98            [12] 7963 	mov	a,_SCON
      0026F6 54 C0            [12] 7964 	anl	a,#0xc0
      0026F8 F5*3F            [12] 7965 	mov	_dataBits,a
                                   7966 ;	ecen4330lab7.c:2679: switch(dataBits) {
      0026FA 74 40            [12] 7967 	mov	a,#0x40
      0026FC B5*3F 02         [24] 7968 	cjne	a,_dataBits,00207$
      0026FF 80 07            [24] 7969 	sjmp	00112$
      002701                       7970 00207$:
      002701 74 C0            [12] 7971 	mov	a,#0xc0
                                   7972 ;	ecen4330lab7.c:2680: case 0x40:
      002703 B5*3F 16         [24] 7973 	cjne	a,_dataBits,00114$
      002706 80 0B            [24] 7974 	sjmp	00113$
      002708                       7975 00112$:
                                   7976 ;	ecen4330lab7.c:2681: LCD_string_write("8");
      002708 90r0Br30         [24] 7977 	mov	dptr,#___str_97
      00270B 75 F0 80         [24] 7978 	mov	b,#0x80
      00270E 12r0Br3F         [24] 7979 	lcall	_LCD_string_write
                                   7980 ;	ecen4330lab7.c:2682: break;
                                   7981 ;	ecen4330lab7.c:2683: case 0xC0:
      002711 80 09            [24] 7982 	sjmp	00114$
      002713                       7983 00113$:
                                   7984 ;	ecen4330lab7.c:2684: LCD_string_write("9");
      002713 90r0Br32         [24] 7985 	mov	dptr,#___str_98
      002716 75 F0 80         [24] 7986 	mov	b,#0x80
      002719 12r0Br3F         [24] 7987 	lcall	_LCD_string_write
                                   7988 ;	ecen4330lab7.c:2686: }
      00271C                       7989 00114$:
                                   7990 ;	ecen4330lab7.c:2687: LCD_string_write("\nParity: ");
      00271C 90r0Br34         [24] 7991 	mov	dptr,#___str_99
      00271F 75 F0 80         [24] 7992 	mov	b,#0x80
      002722 12r0Br3F         [24] 7993 	lcall	_LCD_string_write
                                   7994 ;	ecen4330lab7.c:2688: switch(parity) {
      002725 E4               [12] 7995 	clr	a
      002726 B5*40 02         [24] 7996 	cjne	a,_parity,00209$
      002729 80 0E            [24] 7997 	sjmp	00115$
      00272B                       7998 00209$:
      00272B 74 01            [12] 7999 	mov	a,#0x01
      00272D B5*40 02         [24] 8000 	cjne	a,_parity,00210$
      002730 80 12            [24] 8001 	sjmp	00116$
      002732                       8002 00210$:
      002732 74 02            [12] 8003 	mov	a,#0x02
                                   8004 ;	ecen4330lab7.c:2689: case 0:
      002734 B5*40 21         [24] 8005 	cjne	a,_parity,00118$
      002737 80 16            [24] 8006 	sjmp	00117$
      002739                       8007 00115$:
                                   8008 ;	ecen4330lab7.c:2690: LCD_string_write("Even");
      002739 90r0Br3E         [24] 8009 	mov	dptr,#___str_100
      00273C 75 F0 80         [24] 8010 	mov	b,#0x80
      00273F 12r0Br3F         [24] 8011 	lcall	_LCD_string_write
                                   8012 ;	ecen4330lab7.c:2691: break;
                                   8013 ;	ecen4330lab7.c:2692: case 1:
      002742 80 14            [24] 8014 	sjmp	00118$
      002744                       8015 00116$:
                                   8016 ;	ecen4330lab7.c:2693: LCD_string_write("Odd");
      002744 90r0Br43         [24] 8017 	mov	dptr,#___str_101
      002747 75 F0 80         [24] 8018 	mov	b,#0x80
      00274A 12r0Br3F         [24] 8019 	lcall	_LCD_string_write
                                   8020 ;	ecen4330lab7.c:2694: break;
                                   8021 ;	ecen4330lab7.c:2695: case 2:
      00274D 80 09            [24] 8022 	sjmp	00118$
      00274F                       8023 00117$:
                                   8024 ;	ecen4330lab7.c:2696: LCD_string_write("None");
      00274F 90r0Br47         [24] 8025 	mov	dptr,#___str_102
      002752 75 F0 80         [24] 8026 	mov	b,#0x80
      002755 12r0Br3F         [24] 8027 	lcall	_LCD_string_write
                                   8028 ;	ecen4330lab7.c:2698: }
      002758                       8029 00118$:
                                   8030 ;	ecen4330lab7.c:2701: key = keyDetect();
      002758 12r0Br7E         [24] 8031 	lcall	_keyDetect
      00275B 85 82*16         [24] 8032 	mov	_key,dpl
                                   8033 ;	ecen4330lab7.c:2702: switch (key){
      00275E 74 31            [12] 8034 	mov	a,#0x31
      002760 B5*16 02         [24] 8035 	cjne	a,_key,00212$
      002763 80 1C            [24] 8036 	sjmp	00119$
      002765                       8037 00212$:
      002765 74 32            [12] 8038 	mov	a,#0x32
      002767 B5*16 02         [24] 8039 	cjne	a,_key,00213$
      00276A 80 1D            [24] 8040 	sjmp	00120$
      00276C                       8041 00213$:
      00276C 74 33            [12] 8042 	mov	a,#0x33
      00276E B5*16 02         [24] 8043 	cjne	a,_key,00214$
      002771 80 1E            [24] 8044 	sjmp	00121$
      002773                       8045 00214$:
      002773 74 34            [12] 8046 	mov	a,#0x34
      002775 B5*16 02         [24] 8047 	cjne	a,_key,00215$
      002778 80 1F            [24] 8048 	sjmp	00122$
      00277A                       8049 00215$:
      00277A 74 45            [12] 8050 	mov	a,#0x45
                                   8051 ;	ecen4330lab7.c:2705: case '1':
      00277C B5*16 44         [24] 8052 	cjne	a,_key,00124$
      00277F 80 20            [24] 8053 	sjmp	00123$
      002781                       8054 00119$:
                                   8055 ;	ecen4330lab7.c:2706: UART_dataRate();
      002781 12r22r2A         [24] 8056 	lcall	_UART_dataRate
                                   8057 ;	ecen4330lab7.c:2707: dataEnd = 0;
      002784 75*1E 00         [24] 8058 	mov	_dataEnd,#0x00
                                   8059 ;	ecen4330lab7.c:2708: break;
                                   8060 ;	ecen4330lab7.c:2711: case '2':
      002787 80 40            [24] 8061 	sjmp	00127$
      002789                       8062 00120$:
                                   8063 ;	ecen4330lab7.c:2712: UART_dataBits();
      002789 12r23rA5         [24] 8064 	lcall	_UART_dataBits
                                   8065 ;	ecen4330lab7.c:2713: dataEnd = 0;
      00278C 75*1E 00         [24] 8066 	mov	_dataEnd,#0x00
                                   8067 ;	ecen4330lab7.c:2714: break;
                                   8068 ;	ecen4330lab7.c:2717: case '3':
      00278F 80 38            [24] 8069 	sjmp	00127$
      002791                       8070 00121$:
                                   8071 ;	ecen4330lab7.c:2718: UART_parity();
      002791 12r24r6C         [24] 8072 	lcall	_UART_parity
                                   8073 ;	ecen4330lab7.c:2719: dataEnd = 0;
      002794 75*1E 00         [24] 8074 	mov	_dataEnd,#0x00
                                   8075 ;	ecen4330lab7.c:2720: break;
                                   8076 ;	ecen4330lab7.c:2723: case '4':
      002797 80 30            [24] 8077 	sjmp	00127$
      002799                       8078 00122$:
                                   8079 ;	ecen4330lab7.c:2724: UART_send();
      002799 12r25r8F         [24] 8080 	lcall	_UART_send
                                   8081 ;	ecen4330lab7.c:2725: dataEnd = 0;
      00279C 75*1E 00         [24] 8082 	mov	_dataEnd,#0x00
                                   8083 ;	ecen4330lab7.c:2726: break;
                                   8084 ;	ecen4330lab7.c:2729: case 'E':
      00279F 80 28            [24] 8085 	sjmp	00127$
      0027A1                       8086 00123$:
                                   8087 ;	ecen4330lab7.c:2730: resetLCD1();
      0027A1 12r22r02         [24] 8088 	lcall	_resetLCD1
                                   8089 ;	ecen4330lab7.c:2731: setTextColor(WHITE, BLACK);
      0027A4 E4               [12] 8090 	clr	a
      0027A5 F5*00            [12] 8091 	mov	_setTextColor_PARM_2,a
      0027A7 F5*01            [12] 8092 	mov	(_setTextColor_PARM_2 + 1),a
      0027A9 90 FF FF         [24] 8093 	mov	dptr,#0xffff
      0027AC 12r04r50         [24] 8094 	lcall	_setTextColor
                                   8095 ;	ecen4330lab7.c:2732: LCD_string_write("\nReturning to\nmain menu.");
      0027AF 90r08rFA         [24] 8096 	mov	dptr,#___str_45
      0027B2 75 F0 80         [24] 8097 	mov	b,#0x80
      0027B5 12r0Br3F         [24] 8098 	lcall	_LCD_string_write
                                   8099 ;	ecen4330lab7.c:2733: delay(200);
      0027B8 90 00 C8         [24] 8100 	mov	dptr,#0x00c8
      0027BB 12r01r9F         [24] 8101 	lcall	_delay
                                   8102 ;	ecen4330lab7.c:2734: dataEnd = 1;
      0027BE 75*1E 01         [24] 8103 	mov	_dataEnd,#0x01
                                   8104 ;	ecen4330lab7.c:2735: break;
                                   8105 ;	ecen4330lab7.c:2738: default:
      0027C1 80 06            [24] 8106 	sjmp	00127$
      0027C3                       8107 00124$:
                                   8108 ;	ecen4330lab7.c:2739: invalidInput();
      0027C3 12r0ErFB         [24] 8109 	lcall	_invalidInput
                                   8110 ;	ecen4330lab7.c:2740: dataEnd = 0;
      0027C6 75*1E 00         [24] 8111 	mov	_dataEnd,#0x00
                                   8112 ;	ecen4330lab7.c:2742: }
      0027C9                       8113 00127$:
                                   8114 ;	ecen4330lab7.c:2743: } while(dataEnd == 0);
      0027C9 E5*1E            [12] 8115 	mov	a,_dataEnd
      0027CB 70 03            [24] 8116 	jnz	00217$
      0027CD 02r26r46         [24] 8117 	ljmp	00126$
      0027D0                       8118 00217$:
                                   8119 ;	ecen4330lab7.c:2744: }
      0027D0 22               [24] 8120 	ret
                                   8121 ;------------------------------------------------------------
                                   8122 ;Allocation info for local variables in function 'LCD_mainMenu'
                                   8123 ;------------------------------------------------------------
                                   8124 ;__1310720043              Allocated to registers 
                                   8125 ;__1310720044              Allocated to registers 
                                   8126 ;map_address               Allocated to registers 
                                   8127 ;d                         Allocated to registers 
                                   8128 ;__1966080046              Allocated to registers 
                                   8129 ;__1966080047              Allocated to registers 
                                   8130 ;map_address               Allocated to registers 
                                   8131 ;d                         Allocated to registers 
                                   8132 ;__1966080049              Allocated to registers 
                                   8133 ;__1966080050              Allocated to registers 
                                   8134 ;map_address               Allocated to registers 
                                   8135 ;d                         Allocated to registers 
                                   8136 ;__1966080052              Allocated to registers 
                                   8137 ;__1966080053              Allocated to registers 
                                   8138 ;map_address               Allocated to registers 
                                   8139 ;d                         Allocated to registers 
                                   8140 ;__1966080055              Allocated to registers 
                                   8141 ;__1966080056              Allocated to registers 
                                   8142 ;map_address               Allocated to registers 
                                   8143 ;d                         Allocated to registers 
                                   8144 ;__1966080058              Allocated to registers 
                                   8145 ;__1966080059              Allocated to registers 
                                   8146 ;map_address               Allocated to registers 
                                   8147 ;d                         Allocated to registers 
                                   8148 ;__1966080061              Allocated to registers 
                                   8149 ;__1966080062              Allocated to registers 
                                   8150 ;map_address               Allocated to registers 
                                   8151 ;d                         Allocated to registers 
                                   8152 ;__1966080064              Allocated to registers 
                                   8153 ;__1966080065              Allocated to registers 
                                   8154 ;map_address               Allocated to registers 
                                   8155 ;d                         Allocated to registers 
                                   8156 ;__1966080067              Allocated to registers 
                                   8157 ;__1966080068              Allocated to registers 
                                   8158 ;map_address               Allocated to registers 
                                   8159 ;d                         Allocated to registers 
                                   8160 ;------------------------------------------------------------
                                   8161 ;	ecen4330lab7.c:2768: void LCD_mainMenu() {
                                   8162 ;	-----------------------------------------
                                   8163 ;	 function LCD_mainMenu
                                   8164 ;	-----------------------------------------
      0027D1                       8165 _LCD_mainMenu:
                                   8166 ;	ecen4330lab7.c:2770: key = 0;
      0027D1 75*16 00         [24] 8167 	mov	_key,#0x00
                                   8168 ;	ecen4330lab7.c:2771: iowrite8(seg7_address, 0xC0);
      0027D4 85*04 82         [24] 8169 	mov	dpl,_seg7_address
      0027D7 85*05 83         [24] 8170 	mov	dph,(_seg7_address + 1)
                                   8171 ;	ecen4330lab7.c:283: IOM = 1;
                                   8172 ;	assignBit
      0027DA D2 B4            [12] 8173 	setb	_P3_4
                                   8174 ;	ecen4330lab7.c:284: *map_address = d;
      0027DC 74 C0            [12] 8175 	mov	a,#0xc0
      0027DE F0               [24] 8176 	movx	@dptr,a
                                   8177 ;	ecen4330lab7.c:285: IOM = 0;
                                   8178 ;	assignBit
      0027DF C2 B4            [12] 8179 	clr	_P3_4
                                   8180 ;	ecen4330lab7.c:2774: resetLCD();
      0027E1 12r0ErD3         [24] 8181 	lcall	_resetLCD
                                   8182 ;	ecen4330lab7.c:2775: setTextColor(GREEN, BLACK);
      0027E4 E4               [12] 8183 	clr	a
      0027E5 F5*00            [12] 8184 	mov	_setTextColor_PARM_2,a
      0027E7 F5*01            [12] 8185 	mov	(_setTextColor_PARM_2 + 1),a
      0027E9 90 07 E0         [24] 8186 	mov	dptr,#0x07e0
      0027EC 12r04r50         [24] 8187 	lcall	_setTextColor
                                   8188 ;	ecen4330lab7.c:2776: LCD_string_write("   Cameron\n   Biniamow\n");
      0027EF 90r0Br4C         [24] 8189 	mov	dptr,#___str_103
      0027F2 75 F0 80         [24] 8190 	mov	b,#0x80
      0027F5 12r0Br3F         [24] 8191 	lcall	_LCD_string_write
                                   8192 ;	ecen4330lab7.c:2777: LCD_string_write("  ECEN-4330\n\n");
      0027F8 90r0Br64         [24] 8193 	mov	dptr,#___str_104
      0027FB 75 F0 80         [24] 8194 	mov	b,#0x80
      0027FE 12r0Br3F         [24] 8195 	lcall	_LCD_string_write
                                   8196 ;	ecen4330lab7.c:2780: setTextColor(WHITE, BLACK);
      002801 E4               [12] 8197 	clr	a
      002802 F5*00            [12] 8198 	mov	_setTextColor_PARM_2,a
      002804 F5*01            [12] 8199 	mov	(_setTextColor_PARM_2 + 1),a
      002806 90 FF FF         [24] 8200 	mov	dptr,#0xffff
      002809 12r04r50         [24] 8201 	lcall	_setTextColor
                                   8202 ;	ecen4330lab7.c:2781: LCD_string_write("(A) RAM CHECK\n");
      00280C 90r0Br72         [24] 8203 	mov	dptr,#___str_105
      00280F 75 F0 80         [24] 8204 	mov	b,#0x80
      002812 12r0Br3F         [24] 8205 	lcall	_LCD_string_write
                                   8206 ;	ecen4330lab7.c:2782: LCD_string_write("(B) MOVE\n");
      002815 90r0Br81         [24] 8207 	mov	dptr,#___str_106
      002818 75 F0 80         [24] 8208 	mov	b,#0x80
      00281B 12r0Br3F         [24] 8209 	lcall	_LCD_string_write
                                   8210 ;	ecen4330lab7.c:2783: LCD_string_write("(C) COUNT\n");
      00281E 90r0Br8B         [24] 8211 	mov	dptr,#___str_107
      002821 75 F0 80         [24] 8212 	mov	b,#0x80
      002824 12r0Br3F         [24] 8213 	lcall	_LCD_string_write
                                   8214 ;	ecen4330lab7.c:2784: LCD_string_write("(D) DUMP\n");
      002827 90r0Br96         [24] 8215 	mov	dptr,#___str_108
      00282A 75 F0 80         [24] 8216 	mov	b,#0x80
      00282D 12r0Br3F         [24] 8217 	lcall	_LCD_string_write
                                   8218 ;	ecen4330lab7.c:2785: LCD_string_write("(E) EDIT\n");
      002830 90r0BrA0         [24] 8219 	mov	dptr,#___str_109
      002833 75 F0 80         [24] 8220 	mov	b,#0x80
      002836 12r0Br3F         [24] 8221 	lcall	_LCD_string_write
                                   8222 ;	ecen4330lab7.c:2786: LCD_string_write("(F) FIND\n");
      002839 90r0BrAA         [24] 8223 	mov	dptr,#___str_110
      00283C 75 F0 80         [24] 8224 	mov	b,#0x80
      00283F 12r0Br3F         [24] 8225 	lcall	_LCD_string_write
                                   8226 ;	ecen4330lab7.c:2788: LCD_string_write("(1) UART\n");
      002842 90r0BrB4         [24] 8227 	mov	dptr,#___str_111
      002845 75 F0 80         [24] 8228 	mov	b,#0x80
      002848 12r0Br3F         [24] 8229 	lcall	_LCD_string_write
                                   8230 ;	ecen4330lab7.c:2789: setTextColor(WHITE, BLACK);
      00284B E4               [12] 8231 	clr	a
      00284C F5*00            [12] 8232 	mov	_setTextColor_PARM_2,a
      00284E F5*01            [12] 8233 	mov	(_setTextColor_PARM_2 + 1),a
      002850 90 FF FF         [24] 8234 	mov	dptr,#0xffff
      002853 12r04r50         [24] 8235 	lcall	_setTextColor
                                   8236 ;	ecen4330lab7.c:2790: setTextSize(1);
      002856 75 82 01         [24] 8237 	mov	dpl,#0x01
      002859 12r04r5D         [24] 8238 	lcall	_setTextSize
                                   8239 ;	ecen4330lab7.c:2791: setCursor(3, 304);
      00285C 75*00 30         [24] 8240 	mov	_setCursor_PARM_2,#0x30
      00285F 75*01 01         [24] 8241 	mov	(_setCursor_PARM_2 + 1),#0x01
      002862 90 00 03         [24] 8242 	mov	dptr,#0x0003
      002865 12r04r43         [24] 8243 	lcall	_setCursor
                                   8244 ;	ecen4330lab7.c:2792: LCD_string_write("Spring 2021");
      002868 90r0BrBE         [24] 8245 	mov	dptr,#___str_112
      00286B 75 F0 80         [24] 8246 	mov	b,#0x80
      00286E 12r0Br3F         [24] 8247 	lcall	_LCD_string_write
                                   8248 ;	ecen4330lab7.c:2793: rtcPrint();
      002871 12r02rE7         [24] 8249 	lcall	_rtcPrint
                                   8250 ;	ecen4330lab7.c:2796: key = keyDetect();
      002874 12r0Br7E         [24] 8251 	lcall	_keyDetect
      002877 85 82*16         [24] 8252 	mov	_key,dpl
                                   8253 ;	ecen4330lab7.c:2797: switch (key)
      00287A 74 31            [12] 8254 	mov	a,#0x31
      00287C B5*16 03         [24] 8255 	cjne	a,_key,00149$
      00287F 02r29r0F         [24] 8256 	ljmp	00107$
      002882                       8257 00149$:
      002882 74 41            [12] 8258 	mov	a,#0x41
      002884 B5*16 02         [24] 8259 	cjne	a,_key,00150$
      002887 80 26            [24] 8260 	sjmp	00101$
      002889                       8261 00150$:
      002889 74 42            [12] 8262 	mov	a,#0x42
      00288B B5*16 02         [24] 8263 	cjne	a,_key,00151$
      00288E 80 2F            [24] 8264 	sjmp	00102$
      002890                       8265 00151$:
      002890 74 43            [12] 8266 	mov	a,#0x43
      002892 B5*16 02         [24] 8267 	cjne	a,_key,00152$
      002895 80 38            [24] 8268 	sjmp	00103$
      002897                       8269 00152$:
      002897 74 44            [12] 8270 	mov	a,#0x44
      002899 B5*16 02         [24] 8271 	cjne	a,_key,00153$
      00289C 80 41            [24] 8272 	sjmp	00104$
      00289E                       8273 00153$:
      00289E 74 45            [12] 8274 	mov	a,#0x45
      0028A0 B5*16 02         [24] 8275 	cjne	a,_key,00154$
      0028A3 80 4A            [24] 8276 	sjmp	00105$
      0028A5                       8277 00154$:
      0028A5 74 46            [12] 8278 	mov	a,#0x46
      0028A7 B5*16 02         [24] 8279 	cjne	a,_key,00155$
      0028AA 80 53            [24] 8280 	sjmp	00106$
      0028AC                       8281 00155$:
      0028AC 02r29r1F         [24] 8282 	ljmp	00108$
                                   8283 ;	ecen4330lab7.c:2799: case 'A':
      0028AF                       8284 00101$:
                                   8285 ;	ecen4330lab7.c:2800: iowrite8(seg7_address, 0x88);
      0028AF 85*04 82         [24] 8286 	mov	dpl,_seg7_address
      0028B2 85*05 83         [24] 8287 	mov	dph,(_seg7_address + 1)
                                   8288 ;	ecen4330lab7.c:283: IOM = 1;
                                   8289 ;	assignBit
      0028B5 D2 B4            [12] 8290 	setb	_P3_4
                                   8291 ;	ecen4330lab7.c:284: *map_address = d;
      0028B7 74 88            [12] 8292 	mov	a,#0x88
      0028B9 F0               [24] 8293 	movx	@dptr,a
                                   8294 ;	ecen4330lab7.c:285: IOM = 0;
                                   8295 ;	assignBit
      0028BA C2 B4            [12] 8296 	clr	_P3_4
                                   8297 ;	ecen4330lab7.c:2801: RAM_CHECK();
                                   8298 ;	ecen4330lab7.c:2802: break;
      0028BC 02r12r27         [24] 8299 	ljmp	_RAM_CHECK
                                   8300 ;	ecen4330lab7.c:2803: case 'B':
      0028BF                       8301 00102$:
                                   8302 ;	ecen4330lab7.c:2804: iowrite8(seg7_address, 0x83);
      0028BF 85*04 82         [24] 8303 	mov	dpl,_seg7_address
      0028C2 85*05 83         [24] 8304 	mov	dph,(_seg7_address + 1)
                                   8305 ;	ecen4330lab7.c:283: IOM = 1;
                                   8306 ;	assignBit
      0028C5 D2 B4            [12] 8307 	setb	_P3_4
                                   8308 ;	ecen4330lab7.c:284: *map_address = d;
      0028C7 74 83            [12] 8309 	mov	a,#0x83
      0028C9 F0               [24] 8310 	movx	@dptr,a
                                   8311 ;	ecen4330lab7.c:285: IOM = 0;
                                   8312 ;	assignBit
      0028CA C2 B4            [12] 8313 	clr	_P3_4
                                   8314 ;	ecen4330lab7.c:2805: MOVE();
                                   8315 ;	ecen4330lab7.c:2806: break;
                                   8316 ;	ecen4330lab7.c:2807: case 'C':
      0028CC 02r14r60         [24] 8317 	ljmp	_MOVE
      0028CF                       8318 00103$:
                                   8319 ;	ecen4330lab7.c:2808: iowrite8(seg7_address, 0xC6);
      0028CF 85*04 82         [24] 8320 	mov	dpl,_seg7_address
      0028D2 85*05 83         [24] 8321 	mov	dph,(_seg7_address + 1)
                                   8322 ;	ecen4330lab7.c:283: IOM = 1;
                                   8323 ;	assignBit
      0028D5 D2 B4            [12] 8324 	setb	_P3_4
                                   8325 ;	ecen4330lab7.c:284: *map_address = d;
      0028D7 74 C6            [12] 8326 	mov	a,#0xc6
      0028D9 F0               [24] 8327 	movx	@dptr,a
                                   8328 ;	ecen4330lab7.c:285: IOM = 0;
                                   8329 ;	assignBit
      0028DA C2 B4            [12] 8330 	clr	_P3_4
                                   8331 ;	ecen4330lab7.c:2809: COUNT();
                                   8332 ;	ecen4330lab7.c:2810: break;
                                   8333 ;	ecen4330lab7.c:2811: case 'D':
      0028DC 02r16r7C         [24] 8334 	ljmp	_COUNT
      0028DF                       8335 00104$:
                                   8336 ;	ecen4330lab7.c:2812: iowrite8(seg7_address, 0xA1);
      0028DF 85*04 82         [24] 8337 	mov	dpl,_seg7_address
      0028E2 85*05 83         [24] 8338 	mov	dph,(_seg7_address + 1)
                                   8339 ;	ecen4330lab7.c:283: IOM = 1;
                                   8340 ;	assignBit
      0028E5 D2 B4            [12] 8341 	setb	_P3_4
                                   8342 ;	ecen4330lab7.c:284: *map_address = d;
      0028E7 74 A1            [12] 8343 	mov	a,#0xa1
      0028E9 F0               [24] 8344 	movx	@dptr,a
                                   8345 ;	ecen4330lab7.c:285: IOM = 0;
                                   8346 ;	assignBit
      0028EA C2 B4            [12] 8347 	clr	_P3_4
                                   8348 ;	ecen4330lab7.c:2813: DUMP();
                                   8349 ;	ecen4330lab7.c:2814: break;
                                   8350 ;	ecen4330lab7.c:2815: case 'E':
      0028EC 02r1Cr2A         [24] 8351 	ljmp	_DUMP
      0028EF                       8352 00105$:
                                   8353 ;	ecen4330lab7.c:2816: iowrite8(seg7_address, 0x86);
      0028EF 85*04 82         [24] 8354 	mov	dpl,_seg7_address
      0028F2 85*05 83         [24] 8355 	mov	dph,(_seg7_address + 1)
                                   8356 ;	ecen4330lab7.c:283: IOM = 1;
                                   8357 ;	assignBit
      0028F5 D2 B4            [12] 8358 	setb	_P3_4
                                   8359 ;	ecen4330lab7.c:284: *map_address = d;
      0028F7 74 86            [12] 8360 	mov	a,#0x86
      0028F9 F0               [24] 8361 	movx	@dptr,a
                                   8362 ;	ecen4330lab7.c:285: IOM = 0;
                                   8363 ;	assignBit
      0028FA C2 B4            [12] 8364 	clr	_P3_4
                                   8365 ;	ecen4330lab7.c:2817: EDIT();
                                   8366 ;	ecen4330lab7.c:2818: break;
                                   8367 ;	ecen4330lab7.c:2819: case 'F':
      0028FC 02r1Dr94         [24] 8368 	ljmp	_EDIT
      0028FF                       8369 00106$:
                                   8370 ;	ecen4330lab7.c:2820: iowrite8(seg7_address, 0x8E);
      0028FF 85*04 82         [24] 8371 	mov	dpl,_seg7_address
      002902 85*05 83         [24] 8372 	mov	dph,(_seg7_address + 1)
                                   8373 ;	ecen4330lab7.c:283: IOM = 1;
                                   8374 ;	assignBit
      002905 D2 B4            [12] 8375 	setb	_P3_4
                                   8376 ;	ecen4330lab7.c:284: *map_address = d;
      002907 74 8E            [12] 8377 	mov	a,#0x8e
      002909 F0               [24] 8378 	movx	@dptr,a
                                   8379 ;	ecen4330lab7.c:285: IOM = 0;
                                   8380 ;	assignBit
      00290A C2 B4            [12] 8381 	clr	_P3_4
                                   8382 ;	ecen4330lab7.c:2821: FIND();
                                   8383 ;	ecen4330lab7.c:2822: break;
                                   8384 ;	ecen4330lab7.c:2823: case '1':
      00290C 02r21r41         [24] 8385 	ljmp	_FIND
      00290F                       8386 00107$:
                                   8387 ;	ecen4330lab7.c:2824: iowrite8(seg7_address, 0xF9);
      00290F 85*04 82         [24] 8388 	mov	dpl,_seg7_address
      002912 85*05 83         [24] 8389 	mov	dph,(_seg7_address + 1)
                                   8390 ;	ecen4330lab7.c:283: IOM = 1;
                                   8391 ;	assignBit
      002915 D2 B4            [12] 8392 	setb	_P3_4
                                   8393 ;	ecen4330lab7.c:284: *map_address = d;
      002917 74 F9            [12] 8394 	mov	a,#0xf9
      002919 F0               [24] 8395 	movx	@dptr,a
                                   8396 ;	ecen4330lab7.c:285: IOM = 0;
                                   8397 ;	assignBit
      00291A C2 B4            [12] 8398 	clr	_P3_4
                                   8399 ;	ecen4330lab7.c:2825: UART();
                                   8400 ;	ecen4330lab7.c:2826: break;
                                   8401 ;	ecen4330lab7.c:2832: default:
      00291C 02r26r46         [24] 8402 	ljmp	_UART
      00291F                       8403 00108$:
                                   8404 ;	ecen4330lab7.c:2833: iowrite8(seg7_address, 0xFF);
      00291F 85*04 82         [24] 8405 	mov	dpl,_seg7_address
      002922 85*05 83         [24] 8406 	mov	dph,(_seg7_address + 1)
                                   8407 ;	ecen4330lab7.c:283: IOM = 1;
                                   8408 ;	assignBit
      002925 D2 B4            [12] 8409 	setb	_P3_4
                                   8410 ;	ecen4330lab7.c:284: *map_address = d;
      002927 74 FF            [12] 8411 	mov	a,#0xff
      002929 F0               [24] 8412 	movx	@dptr,a
                                   8413 ;	ecen4330lab7.c:285: IOM = 0;
                                   8414 ;	assignBit
      00292A C2 B4            [12] 8415 	clr	_P3_4
                                   8416 ;	ecen4330lab7.c:2834: invalidInput();
                                   8417 ;	ecen4330lab7.c:2836: }
                                   8418 ;	ecen4330lab7.c:2837: }
      00292C 02r0ErFB         [24] 8419 	ljmp	_invalidInput
                                   8420 ;------------------------------------------------------------
                                   8421 ;Allocation info for local variables in function 'main'
                                   8422 ;------------------------------------------------------------
                                   8423 ;__1310720070              Allocated to registers 
                                   8424 ;__1310720071              Allocated to registers 
                                   8425 ;map_address               Allocated to registers 
                                   8426 ;d                         Allocated to registers 
                                   8427 ;__1310720073              Allocated to registers 
                                   8428 ;__1310720074              Allocated to registers 
                                   8429 ;map_address               Allocated to registers 
                                   8430 ;d                         Allocated to registers 
                                   8431 ;__1310720076              Allocated to registers 
                                   8432 ;__1310720077              Allocated to registers 
                                   8433 ;map_address               Allocated to registers 
                                   8434 ;d                         Allocated to registers 
                                   8435 ;__1310720079              Allocated to registers 
                                   8436 ;__1310720080              Allocated to registers 
                                   8437 ;map_address               Allocated to registers 
                                   8438 ;d                         Allocated to registers 
                                   8439 ;__1310720082              Allocated to registers 
                                   8440 ;__1310720083              Allocated to registers 
                                   8441 ;map_address               Allocated to registers 
                                   8442 ;d                         Allocated to registers 
                                   8443 ;__1310720085              Allocated to registers 
                                   8444 ;__1310720086              Allocated to registers 
                                   8445 ;map_address               Allocated to registers 
                                   8446 ;d                         Allocated to registers 
                                   8447 ;__1310720088              Allocated to registers 
                                   8448 ;__1310720089              Allocated to registers 
                                   8449 ;map_address               Allocated to registers 
                                   8450 ;d                         Allocated to registers 
                                   8451 ;------------------------------------------------------------
                                   8452 ;	ecen4330lab7.c:2846: void main (void) {
                                   8453 ;	-----------------------------------------
                                   8454 ;	 function main
                                   8455 ;	-----------------------------------------
      00292F                       8456 _main:
                                   8457 ;	ecen4330lab7.c:2847: CD = 0;
                                   8458 ;	assignBit
      00292F C2 B5            [12] 8459 	clr	_P3_5
                                   8460 ;	ecen4330lab7.c:2848: IOM = 0;
                                   8461 ;	assignBit
      002931 C2 B4            [12] 8462 	clr	_P3_4
                                   8463 ;	ecen4330lab7.c:2850: UART_Init();
      002933 12r01r86         [24] 8464 	lcall	_UART_Init
                                   8465 ;	ecen4330lab7.c:2851: rtcInit();
      002936 12r02r30         [24] 8466 	lcall	_rtcInit
                                   8467 ;	ecen4330lab7.c:2853: iowrite8(seg7_address, 0xFE);//a
      002939 85*04 82         [24] 8468 	mov	dpl,_seg7_address
      00293C 85*05 83         [24] 8469 	mov	dph,(_seg7_address + 1)
                                   8470 ;	ecen4330lab7.c:283: IOM = 1;
                                   8471 ;	assignBit
      00293F D2 B4            [12] 8472 	setb	_P3_4
                                   8473 ;	ecen4330lab7.c:284: *map_address = d;
      002941 74 FE            [12] 8474 	mov	a,#0xfe
      002943 F0               [24] 8475 	movx	@dptr,a
                                   8476 ;	ecen4330lab7.c:285: IOM = 0;
                                   8477 ;	assignBit
      002944 C2 B4            [12] 8478 	clr	_P3_4
                                   8479 ;	ecen4330lab7.c:2854: delay(100);
      002946 90 00 64         [24] 8480 	mov	dptr,#0x0064
      002949 12r01r9F         [24] 8481 	lcall	_delay
                                   8482 ;	ecen4330lab7.c:2855: iowrite8(seg7_address, 0xFC);//a & b
      00294C 85*04 82         [24] 8483 	mov	dpl,_seg7_address
      00294F 85*05 83         [24] 8484 	mov	dph,(_seg7_address + 1)
                                   8485 ;	ecen4330lab7.c:283: IOM = 1;
                                   8486 ;	assignBit
      002952 D2 B4            [12] 8487 	setb	_P3_4
                                   8488 ;	ecen4330lab7.c:284: *map_address = d;
      002954 74 FC            [12] 8489 	mov	a,#0xfc
      002956 F0               [24] 8490 	movx	@dptr,a
                                   8491 ;	ecen4330lab7.c:285: IOM = 0;
                                   8492 ;	assignBit
      002957 C2 B4            [12] 8493 	clr	_P3_4
                                   8494 ;	ecen4330lab7.c:2856: delay(100);
      002959 90 00 64         [24] 8495 	mov	dptr,#0x0064
      00295C 12r01r9F         [24] 8496 	lcall	_delay
                                   8497 ;	ecen4330lab7.c:2857: iowrite8(seg7_address, 0xF8);//a & b & c
      00295F 85*04 82         [24] 8498 	mov	dpl,_seg7_address
      002962 85*05 83         [24] 8499 	mov	dph,(_seg7_address + 1)
                                   8500 ;	ecen4330lab7.c:283: IOM = 1;
                                   8501 ;	assignBit
      002965 D2 B4            [12] 8502 	setb	_P3_4
                                   8503 ;	ecen4330lab7.c:284: *map_address = d;
      002967 74 F8            [12] 8504 	mov	a,#0xf8
      002969 F0               [24] 8505 	movx	@dptr,a
                                   8506 ;	ecen4330lab7.c:285: IOM = 0;
                                   8507 ;	assignBit
      00296A C2 B4            [12] 8508 	clr	_P3_4
                                   8509 ;	ecen4330lab7.c:2858: delay(100);
      00296C 90 00 64         [24] 8510 	mov	dptr,#0x0064
      00296F 12r01r9F         [24] 8511 	lcall	_delay
                                   8512 ;	ecen4330lab7.c:2859: iowrite8(seg7_address, 0xF0);//a & b & c & d
      002972 85*04 82         [24] 8513 	mov	dpl,_seg7_address
      002975 85*05 83         [24] 8514 	mov	dph,(_seg7_address + 1)
                                   8515 ;	ecen4330lab7.c:283: IOM = 1;
                                   8516 ;	assignBit
      002978 D2 B4            [12] 8517 	setb	_P3_4
                                   8518 ;	ecen4330lab7.c:284: *map_address = d;
      00297A 74 F0            [12] 8519 	mov	a,#0xf0
      00297C F0               [24] 8520 	movx	@dptr,a
                                   8521 ;	ecen4330lab7.c:285: IOM = 0;
                                   8522 ;	assignBit
      00297D C2 B4            [12] 8523 	clr	_P3_4
                                   8524 ;	ecen4330lab7.c:2860: delay(100);
      00297F 90 00 64         [24] 8525 	mov	dptr,#0x0064
      002982 12r01r9F         [24] 8526 	lcall	_delay
                                   8527 ;	ecen4330lab7.c:2861: iowrite8(seg7_address, 0xE0);//a & b & c & d & e
      002985 85*04 82         [24] 8528 	mov	dpl,_seg7_address
      002988 85*05 83         [24] 8529 	mov	dph,(_seg7_address + 1)
                                   8530 ;	ecen4330lab7.c:283: IOM = 1;
                                   8531 ;	assignBit
      00298B D2 B4            [12] 8532 	setb	_P3_4
                                   8533 ;	ecen4330lab7.c:284: *map_address = d;
      00298D 74 E0            [12] 8534 	mov	a,#0xe0
      00298F F0               [24] 8535 	movx	@dptr,a
                                   8536 ;	ecen4330lab7.c:285: IOM = 0;
                                   8537 ;	assignBit
      002990 C2 B4            [12] 8538 	clr	_P3_4
                                   8539 ;	ecen4330lab7.c:2862: delay(100);
      002992 90 00 64         [24] 8540 	mov	dptr,#0x0064
      002995 12r01r9F         [24] 8541 	lcall	_delay
                                   8542 ;	ecen4330lab7.c:2863: iowrite8(seg7_address, 0xC0);//a & b & c & d & e & f
      002998 85*04 82         [24] 8543 	mov	dpl,_seg7_address
      00299B 85*05 83         [24] 8544 	mov	dph,(_seg7_address + 1)
                                   8545 ;	ecen4330lab7.c:283: IOM = 1;
                                   8546 ;	assignBit
      00299E D2 B4            [12] 8547 	setb	_P3_4
                                   8548 ;	ecen4330lab7.c:284: *map_address = d;
      0029A0 74 C0            [12] 8549 	mov	a,#0xc0
      0029A2 F0               [24] 8550 	movx	@dptr,a
                                   8551 ;	ecen4330lab7.c:285: IOM = 0;
                                   8552 ;	assignBit
      0029A3 C2 B4            [12] 8553 	clr	_P3_4
                                   8554 ;	ecen4330lab7.c:2864: delay(100);
      0029A5 90 00 64         [24] 8555 	mov	dptr,#0x0064
      0029A8 12r01r9F         [24] 8556 	lcall	_delay
                                   8557 ;	ecen4330lab7.c:2865: IOM = 0;
                                   8558 ;	assignBit
      0029AB C2 B4            [12] 8559 	clr	_P3_4
                                   8560 ;	ecen4330lab7.c:2866: CD = 1;
                                   8561 ;	assignBit
      0029AD D2 B5            [12] 8562 	setb	_P3_5
                                   8563 ;	ecen4330lab7.c:2868: TFT_LCD_INIT();
      0029AF 12r05r7B         [24] 8564 	lcall	_TFT_LCD_INIT
                                   8565 ;	ecen4330lab7.c:2869: iowrite8(seg7_address, 0xF9);
      0029B2 85*04 82         [24] 8566 	mov	dpl,_seg7_address
      0029B5 85*05 83         [24] 8567 	mov	dph,(_seg7_address + 1)
                                   8568 ;	ecen4330lab7.c:283: IOM = 1;
                                   8569 ;	assignBit
      0029B8 D2 B4            [12] 8570 	setb	_P3_4
                                   8571 ;	ecen4330lab7.c:284: *map_address = d;
      0029BA 74 F9            [12] 8572 	mov	a,#0xf9
      0029BC F0               [24] 8573 	movx	@dptr,a
                                   8574 ;	ecen4330lab7.c:285: IOM = 0;
                                   8575 ;	assignBit
      0029BD C2 B4            [12] 8576 	clr	_P3_4
                                   8577 ;	ecen4330lab7.c:2870: resetLCD();
      0029BF 12r0ErD3         [24] 8578 	lcall	_resetLCD
                                   8579 ;	ecen4330lab7.c:2872: while(1) {
      0029C2                       8580 00102$:
                                   8581 ;	ecen4330lab7.c:2873: LCD_mainMenu();
      0029C2 12r27rD1         [24] 8582 	lcall	_LCD_mainMenu
                                   8583 ;	ecen4330lab7.c:2875: }
      0029C5 80 FB            [24] 8584 	sjmp	00102$
                                   8585 	.area CSEG    (CODE)
                                   8586 	.area CONST   (CODE)
      000000                       8587 _font:
      000000 00                    8588 	.db #0x00	; 0
      000001 00                    8589 	.db #0x00	; 0
      000002 00                    8590 	.db #0x00	; 0
      000003 00                    8591 	.db #0x00	; 0
      000004 00                    8592 	.db #0x00	; 0
      000005 3E                    8593 	.db #0x3e	; 62
      000006 5B                    8594 	.db #0x5b	; 91
      000007 4F                    8595 	.db #0x4f	; 79	'O'
      000008 5B                    8596 	.db #0x5b	; 91
      000009 3E                    8597 	.db #0x3e	; 62
      00000A 3E                    8598 	.db #0x3e	; 62
      00000B 6B                    8599 	.db #0x6b	; 107	'k'
      00000C 4F                    8600 	.db #0x4f	; 79	'O'
      00000D 6B                    8601 	.db #0x6b	; 107	'k'
      00000E 3E                    8602 	.db #0x3e	; 62
      00000F 1C                    8603 	.db #0x1c	; 28
      000010 3E                    8604 	.db #0x3e	; 62
      000011 7C                    8605 	.db #0x7c	; 124
      000012 3E                    8606 	.db #0x3e	; 62
      000013 1C                    8607 	.db #0x1c	; 28
      000014 18                    8608 	.db #0x18	; 24
      000015 3C                    8609 	.db #0x3c	; 60
      000016 7E                    8610 	.db #0x7e	; 126
      000017 3C                    8611 	.db #0x3c	; 60
      000018 18                    8612 	.db #0x18	; 24
      000019 1C                    8613 	.db #0x1c	; 28
      00001A 57                    8614 	.db #0x57	; 87	'W'
      00001B 7D                    8615 	.db #0x7d	; 125
      00001C 57                    8616 	.db #0x57	; 87	'W'
      00001D 1C                    8617 	.db #0x1c	; 28
      00001E 1C                    8618 	.db #0x1c	; 28
      00001F 5E                    8619 	.db #0x5e	; 94
      000020 7F                    8620 	.db #0x7f	; 127
      000021 5E                    8621 	.db #0x5e	; 94
      000022 1C                    8622 	.db #0x1c	; 28
      000023 00                    8623 	.db #0x00	; 0
      000024 18                    8624 	.db #0x18	; 24
      000025 3C                    8625 	.db #0x3c	; 60
      000026 18                    8626 	.db #0x18	; 24
      000027 00                    8627 	.db #0x00	; 0
      000028 FF                    8628 	.db #0xff	; 255
      000029 E7                    8629 	.db #0xe7	; 231
      00002A C3                    8630 	.db #0xc3	; 195
      00002B E7                    8631 	.db #0xe7	; 231
      00002C FF                    8632 	.db #0xff	; 255
      00002D 00                    8633 	.db #0x00	; 0
      00002E 18                    8634 	.db #0x18	; 24
      00002F 24                    8635 	.db #0x24	; 36
      000030 18                    8636 	.db #0x18	; 24
      000031 00                    8637 	.db #0x00	; 0
      000032 FF                    8638 	.db #0xff	; 255
      000033 E7                    8639 	.db #0xe7	; 231
      000034 DB                    8640 	.db #0xdb	; 219
      000035 E7                    8641 	.db #0xe7	; 231
      000036 FF                    8642 	.db #0xff	; 255
      000037 30                    8643 	.db #0x30	; 48	'0'
      000038 48                    8644 	.db #0x48	; 72	'H'
      000039 3A                    8645 	.db #0x3a	; 58
      00003A 06                    8646 	.db #0x06	; 6
      00003B 0E                    8647 	.db #0x0e	; 14
      00003C 26                    8648 	.db #0x26	; 38
      00003D 29                    8649 	.db #0x29	; 41
      00003E 79                    8650 	.db #0x79	; 121	'y'
      00003F 29                    8651 	.db #0x29	; 41
      000040 26                    8652 	.db #0x26	; 38
      000041 40                    8653 	.db #0x40	; 64
      000042 7F                    8654 	.db #0x7f	; 127
      000043 05                    8655 	.db #0x05	; 5
      000044 05                    8656 	.db #0x05	; 5
      000045 07                    8657 	.db #0x07	; 7
      000046 40                    8658 	.db #0x40	; 64
      000047 7F                    8659 	.db #0x7f	; 127
      000048 05                    8660 	.db #0x05	; 5
      000049 25                    8661 	.db #0x25	; 37
      00004A 3F                    8662 	.db #0x3f	; 63
      00004B 5A                    8663 	.db #0x5a	; 90	'Z'
      00004C 3C                    8664 	.db #0x3c	; 60
      00004D E7                    8665 	.db #0xe7	; 231
      00004E 3C                    8666 	.db #0x3c	; 60
      00004F 5A                    8667 	.db #0x5a	; 90	'Z'
      000050 7F                    8668 	.db #0x7f	; 127
      000051 3E                    8669 	.db #0x3e	; 62
      000052 1C                    8670 	.db #0x1c	; 28
      000053 1C                    8671 	.db #0x1c	; 28
      000054 08                    8672 	.db #0x08	; 8
      000055 08                    8673 	.db #0x08	; 8
      000056 1C                    8674 	.db #0x1c	; 28
      000057 1C                    8675 	.db #0x1c	; 28
      000058 3E                    8676 	.db #0x3e	; 62
      000059 7F                    8677 	.db #0x7f	; 127
      00005A 14                    8678 	.db #0x14	; 20
      00005B 22                    8679 	.db #0x22	; 34
      00005C 7F                    8680 	.db #0x7f	; 127
      00005D 22                    8681 	.db #0x22	; 34
      00005E 14                    8682 	.db #0x14	; 20
      00005F 5F                    8683 	.db #0x5f	; 95
      000060 5F                    8684 	.db #0x5f	; 95
      000061 00                    8685 	.db #0x00	; 0
      000062 5F                    8686 	.db #0x5f	; 95
      000063 5F                    8687 	.db #0x5f	; 95
      000064 06                    8688 	.db #0x06	; 6
      000065 09                    8689 	.db #0x09	; 9
      000066 7F                    8690 	.db #0x7f	; 127
      000067 01                    8691 	.db #0x01	; 1
      000068 7F                    8692 	.db #0x7f	; 127
      000069 00                    8693 	.db #0x00	; 0
      00006A 66                    8694 	.db #0x66	; 102	'f'
      00006B 89                    8695 	.db #0x89	; 137
      00006C 95                    8696 	.db #0x95	; 149
      00006D 6A                    8697 	.db #0x6a	; 106	'j'
      00006E 60                    8698 	.db #0x60	; 96
      00006F 60                    8699 	.db #0x60	; 96
      000070 60                    8700 	.db #0x60	; 96
      000071 60                    8701 	.db #0x60	; 96
      000072 60                    8702 	.db #0x60	; 96
      000073 94                    8703 	.db #0x94	; 148
      000074 A2                    8704 	.db #0xa2	; 162
      000075 FF                    8705 	.db #0xff	; 255
      000076 A2                    8706 	.db #0xa2	; 162
      000077 94                    8707 	.db #0x94	; 148
      000078 08                    8708 	.db #0x08	; 8
      000079 04                    8709 	.db #0x04	; 4
      00007A 7E                    8710 	.db #0x7e	; 126
      00007B 04                    8711 	.db #0x04	; 4
      00007C 08                    8712 	.db #0x08	; 8
      00007D 10                    8713 	.db #0x10	; 16
      00007E 20                    8714 	.db #0x20	; 32
      00007F 7E                    8715 	.db #0x7e	; 126
      000080 20                    8716 	.db #0x20	; 32
      000081 10                    8717 	.db #0x10	; 16
      000082 08                    8718 	.db #0x08	; 8
      000083 08                    8719 	.db #0x08	; 8
      000084 2A                    8720 	.db #0x2a	; 42
      000085 1C                    8721 	.db #0x1c	; 28
      000086 08                    8722 	.db #0x08	; 8
      000087 08                    8723 	.db #0x08	; 8
      000088 1C                    8724 	.db #0x1c	; 28
      000089 2A                    8725 	.db #0x2a	; 42
      00008A 08                    8726 	.db #0x08	; 8
      00008B 08                    8727 	.db #0x08	; 8
      00008C 1E                    8728 	.db #0x1e	; 30
      00008D 10                    8729 	.db #0x10	; 16
      00008E 10                    8730 	.db #0x10	; 16
      00008F 10                    8731 	.db #0x10	; 16
      000090 10                    8732 	.db #0x10	; 16
      000091 0C                    8733 	.db #0x0c	; 12
      000092 1E                    8734 	.db #0x1e	; 30
      000093 0C                    8735 	.db #0x0c	; 12
      000094 1E                    8736 	.db #0x1e	; 30
      000095 0C                    8737 	.db #0x0c	; 12
      000096 30                    8738 	.db #0x30	; 48	'0'
      000097 38                    8739 	.db #0x38	; 56	'8'
      000098 3E                    8740 	.db #0x3e	; 62
      000099 38                    8741 	.db #0x38	; 56	'8'
      00009A 30                    8742 	.db #0x30	; 48	'0'
      00009B 06                    8743 	.db #0x06	; 6
      00009C 0E                    8744 	.db #0x0e	; 14
      00009D 3E                    8745 	.db #0x3e	; 62
      00009E 0E                    8746 	.db #0x0e	; 14
      00009F 06                    8747 	.db #0x06	; 6
      0000A0 00                    8748 	.db #0x00	; 0
      0000A1 00                    8749 	.db #0x00	; 0
      0000A2 00                    8750 	.db #0x00	; 0
      0000A3 00                    8751 	.db #0x00	; 0
      0000A4 00                    8752 	.db #0x00	; 0
      0000A5 00                    8753 	.db #0x00	; 0
      0000A6 00                    8754 	.db #0x00	; 0
      0000A7 5F                    8755 	.db #0x5f	; 95
      0000A8 00                    8756 	.db #0x00	; 0
      0000A9 00                    8757 	.db #0x00	; 0
      0000AA 00                    8758 	.db #0x00	; 0
      0000AB 07                    8759 	.db #0x07	; 7
      0000AC 00                    8760 	.db #0x00	; 0
      0000AD 07                    8761 	.db #0x07	; 7
      0000AE 00                    8762 	.db #0x00	; 0
      0000AF 14                    8763 	.db #0x14	; 20
      0000B0 7F                    8764 	.db #0x7f	; 127
      0000B1 14                    8765 	.db #0x14	; 20
      0000B2 7F                    8766 	.db #0x7f	; 127
      0000B3 14                    8767 	.db #0x14	; 20
      0000B4 24                    8768 	.db #0x24	; 36
      0000B5 2A                    8769 	.db #0x2a	; 42
      0000B6 7F                    8770 	.db #0x7f	; 127
      0000B7 2A                    8771 	.db #0x2a	; 42
      0000B8 12                    8772 	.db #0x12	; 18
      0000B9 23                    8773 	.db #0x23	; 35
      0000BA 13                    8774 	.db #0x13	; 19
      0000BB 08                    8775 	.db #0x08	; 8
      0000BC 64                    8776 	.db #0x64	; 100	'd'
      0000BD 62                    8777 	.db #0x62	; 98	'b'
      0000BE 36                    8778 	.db #0x36	; 54	'6'
      0000BF 49                    8779 	.db #0x49	; 73	'I'
      0000C0 56                    8780 	.db #0x56	; 86	'V'
      0000C1 20                    8781 	.db #0x20	; 32
      0000C2 50                    8782 	.db #0x50	; 80	'P'
      0000C3 00                    8783 	.db #0x00	; 0
      0000C4 08                    8784 	.db #0x08	; 8
      0000C5 07                    8785 	.db #0x07	; 7
      0000C6 03                    8786 	.db #0x03	; 3
      0000C7 00                    8787 	.db #0x00	; 0
      0000C8 00                    8788 	.db #0x00	; 0
      0000C9 1C                    8789 	.db #0x1c	; 28
      0000CA 22                    8790 	.db #0x22	; 34
      0000CB 41                    8791 	.db #0x41	; 65	'A'
      0000CC 00                    8792 	.db #0x00	; 0
      0000CD 00                    8793 	.db #0x00	; 0
      0000CE 41                    8794 	.db #0x41	; 65	'A'
      0000CF 22                    8795 	.db #0x22	; 34
      0000D0 1C                    8796 	.db #0x1c	; 28
      0000D1 00                    8797 	.db #0x00	; 0
      0000D2 2A                    8798 	.db #0x2a	; 42
      0000D3 1C                    8799 	.db #0x1c	; 28
      0000D4 7F                    8800 	.db #0x7f	; 127
      0000D5 1C                    8801 	.db #0x1c	; 28
      0000D6 2A                    8802 	.db #0x2a	; 42
      0000D7 08                    8803 	.db #0x08	; 8
      0000D8 08                    8804 	.db #0x08	; 8
      0000D9 3E                    8805 	.db #0x3e	; 62
      0000DA 08                    8806 	.db #0x08	; 8
      0000DB 08                    8807 	.db #0x08	; 8
      0000DC 00                    8808 	.db #0x00	; 0
      0000DD 80                    8809 	.db #0x80	; 128
      0000DE 70                    8810 	.db #0x70	; 112	'p'
      0000DF 30                    8811 	.db #0x30	; 48	'0'
      0000E0 00                    8812 	.db #0x00	; 0
      0000E1 08                    8813 	.db #0x08	; 8
      0000E2 08                    8814 	.db #0x08	; 8
      0000E3 08                    8815 	.db #0x08	; 8
      0000E4 08                    8816 	.db #0x08	; 8
      0000E5 08                    8817 	.db #0x08	; 8
      0000E6 00                    8818 	.db #0x00	; 0
      0000E7 00                    8819 	.db #0x00	; 0
      0000E8 60                    8820 	.db #0x60	; 96
      0000E9 60                    8821 	.db #0x60	; 96
      0000EA 00                    8822 	.db #0x00	; 0
      0000EB 20                    8823 	.db #0x20	; 32
      0000EC 10                    8824 	.db #0x10	; 16
      0000ED 08                    8825 	.db #0x08	; 8
      0000EE 04                    8826 	.db #0x04	; 4
      0000EF 02                    8827 	.db #0x02	; 2
      0000F0 3E                    8828 	.db #0x3e	; 62
      0000F1 51                    8829 	.db #0x51	; 81	'Q'
      0000F2 49                    8830 	.db #0x49	; 73	'I'
      0000F3 45                    8831 	.db #0x45	; 69	'E'
      0000F4 3E                    8832 	.db #0x3e	; 62
      0000F5 00                    8833 	.db #0x00	; 0
      0000F6 42                    8834 	.db #0x42	; 66	'B'
      0000F7 7F                    8835 	.db #0x7f	; 127
      0000F8 40                    8836 	.db #0x40	; 64
      0000F9 00                    8837 	.db #0x00	; 0
      0000FA 72                    8838 	.db #0x72	; 114	'r'
      0000FB 49                    8839 	.db #0x49	; 73	'I'
      0000FC 49                    8840 	.db #0x49	; 73	'I'
      0000FD 49                    8841 	.db #0x49	; 73	'I'
      0000FE 46                    8842 	.db #0x46	; 70	'F'
      0000FF 21                    8843 	.db #0x21	; 33
      000100 41                    8844 	.db #0x41	; 65	'A'
      000101 49                    8845 	.db #0x49	; 73	'I'
      000102 4D                    8846 	.db #0x4d	; 77	'M'
      000103 33                    8847 	.db #0x33	; 51	'3'
      000104 18                    8848 	.db #0x18	; 24
      000105 14                    8849 	.db #0x14	; 20
      000106 12                    8850 	.db #0x12	; 18
      000107 7F                    8851 	.db #0x7f	; 127
      000108 10                    8852 	.db #0x10	; 16
      000109 27                    8853 	.db #0x27	; 39
      00010A 45                    8854 	.db #0x45	; 69	'E'
      00010B 45                    8855 	.db #0x45	; 69	'E'
      00010C 45                    8856 	.db #0x45	; 69	'E'
      00010D 39                    8857 	.db #0x39	; 57	'9'
      00010E 3C                    8858 	.db #0x3c	; 60
      00010F 4A                    8859 	.db #0x4a	; 74	'J'
      000110 49                    8860 	.db #0x49	; 73	'I'
      000111 49                    8861 	.db #0x49	; 73	'I'
      000112 31                    8862 	.db #0x31	; 49	'1'
      000113 41                    8863 	.db #0x41	; 65	'A'
      000114 21                    8864 	.db #0x21	; 33
      000115 11                    8865 	.db #0x11	; 17
      000116 09                    8866 	.db #0x09	; 9
      000117 07                    8867 	.db #0x07	; 7
      000118 36                    8868 	.db #0x36	; 54	'6'
      000119 49                    8869 	.db #0x49	; 73	'I'
      00011A 49                    8870 	.db #0x49	; 73	'I'
      00011B 49                    8871 	.db #0x49	; 73	'I'
      00011C 36                    8872 	.db #0x36	; 54	'6'
      00011D 46                    8873 	.db #0x46	; 70	'F'
      00011E 49                    8874 	.db #0x49	; 73	'I'
      00011F 49                    8875 	.db #0x49	; 73	'I'
      000120 29                    8876 	.db #0x29	; 41
      000121 1E                    8877 	.db #0x1e	; 30
      000122 00                    8878 	.db #0x00	; 0
      000123 00                    8879 	.db #0x00	; 0
      000124 14                    8880 	.db #0x14	; 20
      000125 00                    8881 	.db #0x00	; 0
      000126 00                    8882 	.db #0x00	; 0
      000127 00                    8883 	.db #0x00	; 0
      000128 40                    8884 	.db #0x40	; 64
      000129 34                    8885 	.db #0x34	; 52	'4'
      00012A 00                    8886 	.db #0x00	; 0
      00012B 00                    8887 	.db #0x00	; 0
      00012C 00                    8888 	.db #0x00	; 0
      00012D 08                    8889 	.db #0x08	; 8
      00012E 14                    8890 	.db #0x14	; 20
      00012F 22                    8891 	.db #0x22	; 34
      000130 41                    8892 	.db #0x41	; 65	'A'
      000131 14                    8893 	.db #0x14	; 20
      000132 14                    8894 	.db #0x14	; 20
      000133 14                    8895 	.db #0x14	; 20
      000134 14                    8896 	.db #0x14	; 20
      000135 14                    8897 	.db #0x14	; 20
      000136 00                    8898 	.db #0x00	; 0
      000137 41                    8899 	.db #0x41	; 65	'A'
      000138 22                    8900 	.db #0x22	; 34
      000139 14                    8901 	.db #0x14	; 20
      00013A 08                    8902 	.db #0x08	; 8
      00013B 02                    8903 	.db #0x02	; 2
      00013C 01                    8904 	.db #0x01	; 1
      00013D 59                    8905 	.db #0x59	; 89	'Y'
      00013E 09                    8906 	.db #0x09	; 9
      00013F 06                    8907 	.db #0x06	; 6
      000140 3E                    8908 	.db #0x3e	; 62
      000141 41                    8909 	.db #0x41	; 65	'A'
      000142 5D                    8910 	.db #0x5d	; 93
      000143 59                    8911 	.db #0x59	; 89	'Y'
      000144 4E                    8912 	.db #0x4e	; 78	'N'
      000145 7C                    8913 	.db #0x7c	; 124
      000146 12                    8914 	.db #0x12	; 18
      000147 11                    8915 	.db #0x11	; 17
      000148 12                    8916 	.db #0x12	; 18
      000149 7C                    8917 	.db #0x7c	; 124
      00014A 7F                    8918 	.db #0x7f	; 127
      00014B 49                    8919 	.db #0x49	; 73	'I'
      00014C 49                    8920 	.db #0x49	; 73	'I'
      00014D 49                    8921 	.db #0x49	; 73	'I'
      00014E 36                    8922 	.db #0x36	; 54	'6'
      00014F 3E                    8923 	.db #0x3e	; 62
      000150 41                    8924 	.db #0x41	; 65	'A'
      000151 41                    8925 	.db #0x41	; 65	'A'
      000152 41                    8926 	.db #0x41	; 65	'A'
      000153 22                    8927 	.db #0x22	; 34
      000154 7F                    8928 	.db #0x7f	; 127
      000155 41                    8929 	.db #0x41	; 65	'A'
      000156 41                    8930 	.db #0x41	; 65	'A'
      000157 41                    8931 	.db #0x41	; 65	'A'
      000158 3E                    8932 	.db #0x3e	; 62
      000159 7F                    8933 	.db #0x7f	; 127
      00015A 49                    8934 	.db #0x49	; 73	'I'
      00015B 49                    8935 	.db #0x49	; 73	'I'
      00015C 49                    8936 	.db #0x49	; 73	'I'
      00015D 41                    8937 	.db #0x41	; 65	'A'
      00015E 7F                    8938 	.db #0x7f	; 127
      00015F 09                    8939 	.db #0x09	; 9
      000160 09                    8940 	.db #0x09	; 9
      000161 09                    8941 	.db #0x09	; 9
      000162 01                    8942 	.db #0x01	; 1
      000163 3E                    8943 	.db #0x3e	; 62
      000164 41                    8944 	.db #0x41	; 65	'A'
      000165 41                    8945 	.db #0x41	; 65	'A'
      000166 51                    8946 	.db #0x51	; 81	'Q'
      000167 73                    8947 	.db #0x73	; 115	's'
      000168 7F                    8948 	.db #0x7f	; 127
      000169 08                    8949 	.db #0x08	; 8
      00016A 08                    8950 	.db #0x08	; 8
      00016B 08                    8951 	.db #0x08	; 8
      00016C 7F                    8952 	.db #0x7f	; 127
      00016D 00                    8953 	.db #0x00	; 0
      00016E 41                    8954 	.db #0x41	; 65	'A'
      00016F 7F                    8955 	.db #0x7f	; 127
      000170 41                    8956 	.db #0x41	; 65	'A'
      000171 00                    8957 	.db #0x00	; 0
      000172 20                    8958 	.db #0x20	; 32
      000173 40                    8959 	.db #0x40	; 64
      000174 41                    8960 	.db #0x41	; 65	'A'
      000175 3F                    8961 	.db #0x3f	; 63
      000176 01                    8962 	.db #0x01	; 1
      000177 7F                    8963 	.db #0x7f	; 127
      000178 08                    8964 	.db #0x08	; 8
      000179 14                    8965 	.db #0x14	; 20
      00017A 22                    8966 	.db #0x22	; 34
      00017B 41                    8967 	.db #0x41	; 65	'A'
      00017C 7F                    8968 	.db #0x7f	; 127
      00017D 40                    8969 	.db #0x40	; 64
      00017E 40                    8970 	.db #0x40	; 64
      00017F 40                    8971 	.db #0x40	; 64
      000180 40                    8972 	.db #0x40	; 64
      000181 7F                    8973 	.db #0x7f	; 127
      000182 02                    8974 	.db #0x02	; 2
      000183 1C                    8975 	.db #0x1c	; 28
      000184 02                    8976 	.db #0x02	; 2
      000185 7F                    8977 	.db #0x7f	; 127
      000186 7F                    8978 	.db #0x7f	; 127
      000187 04                    8979 	.db #0x04	; 4
      000188 08                    8980 	.db #0x08	; 8
      000189 10                    8981 	.db #0x10	; 16
      00018A 7F                    8982 	.db #0x7f	; 127
      00018B 3E                    8983 	.db #0x3e	; 62
      00018C 41                    8984 	.db #0x41	; 65	'A'
      00018D 41                    8985 	.db #0x41	; 65	'A'
      00018E 41                    8986 	.db #0x41	; 65	'A'
      00018F 3E                    8987 	.db #0x3e	; 62
      000190 7F                    8988 	.db #0x7f	; 127
      000191 09                    8989 	.db #0x09	; 9
      000192 09                    8990 	.db #0x09	; 9
      000193 09                    8991 	.db #0x09	; 9
      000194 06                    8992 	.db #0x06	; 6
      000195 3E                    8993 	.db #0x3e	; 62
      000196 41                    8994 	.db #0x41	; 65	'A'
      000197 51                    8995 	.db #0x51	; 81	'Q'
      000198 21                    8996 	.db #0x21	; 33
      000199 5E                    8997 	.db #0x5e	; 94
      00019A 7F                    8998 	.db #0x7f	; 127
      00019B 09                    8999 	.db #0x09	; 9
      00019C 19                    9000 	.db #0x19	; 25
      00019D 29                    9001 	.db #0x29	; 41
      00019E 46                    9002 	.db #0x46	; 70	'F'
      00019F 26                    9003 	.db #0x26	; 38
      0001A0 49                    9004 	.db #0x49	; 73	'I'
      0001A1 49                    9005 	.db #0x49	; 73	'I'
      0001A2 49                    9006 	.db #0x49	; 73	'I'
      0001A3 32                    9007 	.db #0x32	; 50	'2'
      0001A4 03                    9008 	.db #0x03	; 3
      0001A5 01                    9009 	.db #0x01	; 1
      0001A6 7F                    9010 	.db #0x7f	; 127
      0001A7 01                    9011 	.db #0x01	; 1
      0001A8 03                    9012 	.db #0x03	; 3
      0001A9 3F                    9013 	.db #0x3f	; 63
      0001AA 40                    9014 	.db #0x40	; 64
      0001AB 40                    9015 	.db #0x40	; 64
      0001AC 40                    9016 	.db #0x40	; 64
      0001AD 3F                    9017 	.db #0x3f	; 63
      0001AE 1F                    9018 	.db #0x1f	; 31
      0001AF 20                    9019 	.db #0x20	; 32
      0001B0 40                    9020 	.db #0x40	; 64
      0001B1 20                    9021 	.db #0x20	; 32
      0001B2 1F                    9022 	.db #0x1f	; 31
      0001B3 3F                    9023 	.db #0x3f	; 63
      0001B4 40                    9024 	.db #0x40	; 64
      0001B5 38                    9025 	.db #0x38	; 56	'8'
      0001B6 40                    9026 	.db #0x40	; 64
      0001B7 3F                    9027 	.db #0x3f	; 63
      0001B8 63                    9028 	.db #0x63	; 99	'c'
      0001B9 14                    9029 	.db #0x14	; 20
      0001BA 08                    9030 	.db #0x08	; 8
      0001BB 14                    9031 	.db #0x14	; 20
      0001BC 63                    9032 	.db #0x63	; 99	'c'
      0001BD 03                    9033 	.db #0x03	; 3
      0001BE 04                    9034 	.db #0x04	; 4
      0001BF 78                    9035 	.db #0x78	; 120	'x'
      0001C0 04                    9036 	.db #0x04	; 4
      0001C1 03                    9037 	.db #0x03	; 3
      0001C2 61                    9038 	.db #0x61	; 97	'a'
      0001C3 59                    9039 	.db #0x59	; 89	'Y'
      0001C4 49                    9040 	.db #0x49	; 73	'I'
      0001C5 4D                    9041 	.db #0x4d	; 77	'M'
      0001C6 43                    9042 	.db #0x43	; 67	'C'
      0001C7 00                    9043 	.db #0x00	; 0
      0001C8 7F                    9044 	.db #0x7f	; 127
      0001C9 41                    9045 	.db #0x41	; 65	'A'
      0001CA 41                    9046 	.db #0x41	; 65	'A'
      0001CB 41                    9047 	.db #0x41	; 65	'A'
      0001CC 02                    9048 	.db #0x02	; 2
      0001CD 04                    9049 	.db #0x04	; 4
      0001CE 08                    9050 	.db #0x08	; 8
      0001CF 10                    9051 	.db #0x10	; 16
      0001D0 20                    9052 	.db #0x20	; 32
      0001D1 00                    9053 	.db #0x00	; 0
      0001D2 41                    9054 	.db #0x41	; 65	'A'
      0001D3 41                    9055 	.db #0x41	; 65	'A'
      0001D4 41                    9056 	.db #0x41	; 65	'A'
      0001D5 7F                    9057 	.db #0x7f	; 127
      0001D6 04                    9058 	.db #0x04	; 4
      0001D7 02                    9059 	.db #0x02	; 2
      0001D8 01                    9060 	.db #0x01	; 1
      0001D9 02                    9061 	.db #0x02	; 2
      0001DA 04                    9062 	.db #0x04	; 4
      0001DB 40                    9063 	.db #0x40	; 64
      0001DC 40                    9064 	.db #0x40	; 64
      0001DD 40                    9065 	.db #0x40	; 64
      0001DE 40                    9066 	.db #0x40	; 64
      0001DF 40                    9067 	.db #0x40	; 64
      0001E0 00                    9068 	.db #0x00	; 0
      0001E1 03                    9069 	.db #0x03	; 3
      0001E2 07                    9070 	.db #0x07	; 7
      0001E3 08                    9071 	.db #0x08	; 8
      0001E4 00                    9072 	.db #0x00	; 0
      0001E5 20                    9073 	.db #0x20	; 32
      0001E6 54                    9074 	.db #0x54	; 84	'T'
      0001E7 54                    9075 	.db #0x54	; 84	'T'
      0001E8 78                    9076 	.db #0x78	; 120	'x'
      0001E9 40                    9077 	.db #0x40	; 64
      0001EA 7F                    9078 	.db #0x7f	; 127
      0001EB 28                    9079 	.db #0x28	; 40
      0001EC 44                    9080 	.db #0x44	; 68	'D'
      0001ED 44                    9081 	.db #0x44	; 68	'D'
      0001EE 38                    9082 	.db #0x38	; 56	'8'
      0001EF 38                    9083 	.db #0x38	; 56	'8'
      0001F0 44                    9084 	.db #0x44	; 68	'D'
      0001F1 44                    9085 	.db #0x44	; 68	'D'
      0001F2 44                    9086 	.db #0x44	; 68	'D'
      0001F3 28                    9087 	.db #0x28	; 40
      0001F4 38                    9088 	.db #0x38	; 56	'8'
      0001F5 44                    9089 	.db #0x44	; 68	'D'
      0001F6 44                    9090 	.db #0x44	; 68	'D'
      0001F7 28                    9091 	.db #0x28	; 40
      0001F8 7F                    9092 	.db #0x7f	; 127
      0001F9 38                    9093 	.db #0x38	; 56	'8'
      0001FA 54                    9094 	.db #0x54	; 84	'T'
      0001FB 54                    9095 	.db #0x54	; 84	'T'
      0001FC 54                    9096 	.db #0x54	; 84	'T'
      0001FD 18                    9097 	.db #0x18	; 24
      0001FE 00                    9098 	.db #0x00	; 0
      0001FF 08                    9099 	.db #0x08	; 8
      000200 7E                    9100 	.db #0x7e	; 126
      000201 09                    9101 	.db #0x09	; 9
      000202 02                    9102 	.db #0x02	; 2
      000203 18                    9103 	.db #0x18	; 24
      000204 A4                    9104 	.db #0xa4	; 164
      000205 A4                    9105 	.db #0xa4	; 164
      000206 9C                    9106 	.db #0x9c	; 156
      000207 78                    9107 	.db #0x78	; 120	'x'
      000208 7F                    9108 	.db #0x7f	; 127
      000209 08                    9109 	.db #0x08	; 8
      00020A 04                    9110 	.db #0x04	; 4
      00020B 04                    9111 	.db #0x04	; 4
      00020C 78                    9112 	.db #0x78	; 120	'x'
      00020D 00                    9113 	.db #0x00	; 0
      00020E 44                    9114 	.db #0x44	; 68	'D'
      00020F 7D                    9115 	.db #0x7d	; 125
      000210 40                    9116 	.db #0x40	; 64
      000211 00                    9117 	.db #0x00	; 0
      000212 20                    9118 	.db #0x20	; 32
      000213 40                    9119 	.db #0x40	; 64
      000214 40                    9120 	.db #0x40	; 64
      000215 3D                    9121 	.db #0x3d	; 61
      000216 00                    9122 	.db #0x00	; 0
      000217 7F                    9123 	.db #0x7f	; 127
      000218 10                    9124 	.db #0x10	; 16
      000219 28                    9125 	.db #0x28	; 40
      00021A 44                    9126 	.db #0x44	; 68	'D'
      00021B 00                    9127 	.db #0x00	; 0
      00021C 00                    9128 	.db #0x00	; 0
      00021D 41                    9129 	.db #0x41	; 65	'A'
      00021E 7F                    9130 	.db #0x7f	; 127
      00021F 40                    9131 	.db #0x40	; 64
      000220 00                    9132 	.db #0x00	; 0
      000221 7C                    9133 	.db #0x7c	; 124
      000222 04                    9134 	.db #0x04	; 4
      000223 78                    9135 	.db #0x78	; 120	'x'
      000224 04                    9136 	.db #0x04	; 4
      000225 78                    9137 	.db #0x78	; 120	'x'
      000226 7C                    9138 	.db #0x7c	; 124
      000227 08                    9139 	.db #0x08	; 8
      000228 04                    9140 	.db #0x04	; 4
      000229 04                    9141 	.db #0x04	; 4
      00022A 78                    9142 	.db #0x78	; 120	'x'
      00022B 38                    9143 	.db #0x38	; 56	'8'
      00022C 44                    9144 	.db #0x44	; 68	'D'
      00022D 44                    9145 	.db #0x44	; 68	'D'
      00022E 44                    9146 	.db #0x44	; 68	'D'
      00022F 38                    9147 	.db #0x38	; 56	'8'
      000230 FC                    9148 	.db #0xfc	; 252
      000231 18                    9149 	.db #0x18	; 24
      000232 24                    9150 	.db #0x24	; 36
      000233 24                    9151 	.db #0x24	; 36
      000234 18                    9152 	.db #0x18	; 24
      000235 18                    9153 	.db #0x18	; 24
      000236 24                    9154 	.db #0x24	; 36
      000237 24                    9155 	.db #0x24	; 36
      000238 18                    9156 	.db #0x18	; 24
      000239 FC                    9157 	.db #0xfc	; 252
      00023A 7C                    9158 	.db #0x7c	; 124
      00023B 08                    9159 	.db #0x08	; 8
      00023C 04                    9160 	.db #0x04	; 4
      00023D 04                    9161 	.db #0x04	; 4
      00023E 08                    9162 	.db #0x08	; 8
      00023F 48                    9163 	.db #0x48	; 72	'H'
      000240 54                    9164 	.db #0x54	; 84	'T'
      000241 54                    9165 	.db #0x54	; 84	'T'
      000242 54                    9166 	.db #0x54	; 84	'T'
      000243 24                    9167 	.db #0x24	; 36
      000244 04                    9168 	.db #0x04	; 4
      000245 04                    9169 	.db #0x04	; 4
      000246 3F                    9170 	.db #0x3f	; 63
      000247 44                    9171 	.db #0x44	; 68	'D'
      000248 24                    9172 	.db #0x24	; 36
      000249 3C                    9173 	.db #0x3c	; 60
      00024A 40                    9174 	.db #0x40	; 64
      00024B 40                    9175 	.db #0x40	; 64
      00024C 20                    9176 	.db #0x20	; 32
      00024D 7C                    9177 	.db #0x7c	; 124
      00024E 1C                    9178 	.db #0x1c	; 28
      00024F 20                    9179 	.db #0x20	; 32
      000250 40                    9180 	.db #0x40	; 64
      000251 20                    9181 	.db #0x20	; 32
      000252 1C                    9182 	.db #0x1c	; 28
      000253 3C                    9183 	.db #0x3c	; 60
      000254 40                    9184 	.db #0x40	; 64
      000255 30                    9185 	.db #0x30	; 48	'0'
      000256 40                    9186 	.db #0x40	; 64
      000257 3C                    9187 	.db #0x3c	; 60
      000258 44                    9188 	.db #0x44	; 68	'D'
      000259 28                    9189 	.db #0x28	; 40
      00025A 10                    9190 	.db #0x10	; 16
      00025B 28                    9191 	.db #0x28	; 40
      00025C 44                    9192 	.db #0x44	; 68	'D'
      00025D 4C                    9193 	.db #0x4c	; 76	'L'
      00025E 90                    9194 	.db #0x90	; 144
      00025F 90                    9195 	.db #0x90	; 144
      000260 90                    9196 	.db #0x90	; 144
      000261 7C                    9197 	.db #0x7c	; 124
      000262 44                    9198 	.db #0x44	; 68	'D'
      000263 64                    9199 	.db #0x64	; 100	'd'
      000264 54                    9200 	.db #0x54	; 84	'T'
      000265 4C                    9201 	.db #0x4c	; 76	'L'
      000266 44                    9202 	.db #0x44	; 68	'D'
      000267 00                    9203 	.db #0x00	; 0
      000268 08                    9204 	.db #0x08	; 8
      000269 36                    9205 	.db #0x36	; 54	'6'
      00026A 41                    9206 	.db #0x41	; 65	'A'
      00026B 00                    9207 	.db #0x00	; 0
      00026C 00                    9208 	.db #0x00	; 0
      00026D 00                    9209 	.db #0x00	; 0
      00026E 77                    9210 	.db #0x77	; 119	'w'
      00026F 00                    9211 	.db #0x00	; 0
      000270 00                    9212 	.db #0x00	; 0
      000271 00                    9213 	.db #0x00	; 0
      000272 41                    9214 	.db #0x41	; 65	'A'
      000273 36                    9215 	.db #0x36	; 54	'6'
      000274 08                    9216 	.db #0x08	; 8
      000275 00                    9217 	.db #0x00	; 0
      000276 02                    9218 	.db #0x02	; 2
      000277 01                    9219 	.db #0x01	; 1
      000278 02                    9220 	.db #0x02	; 2
      000279 04                    9221 	.db #0x04	; 4
      00027A 02                    9222 	.db #0x02	; 2
      00027B 3C                    9223 	.db #0x3c	; 60
      00027C 26                    9224 	.db #0x26	; 38
      00027D 23                    9225 	.db #0x23	; 35
      00027E 26                    9226 	.db #0x26	; 38
      00027F 3C                    9227 	.db #0x3c	; 60
      000280 1E                    9228 	.db #0x1e	; 30
      000281 A1                    9229 	.db #0xa1	; 161
      000282 A1                    9230 	.db #0xa1	; 161
      000283 61                    9231 	.db #0x61	; 97	'a'
      000284 12                    9232 	.db #0x12	; 18
      000285 3A                    9233 	.db #0x3a	; 58
      000286 40                    9234 	.db #0x40	; 64
      000287 40                    9235 	.db #0x40	; 64
      000288 20                    9236 	.db #0x20	; 32
      000289 7A                    9237 	.db #0x7a	; 122	'z'
      00028A 38                    9238 	.db #0x38	; 56	'8'
      00028B 54                    9239 	.db #0x54	; 84	'T'
      00028C 54                    9240 	.db #0x54	; 84	'T'
      00028D 55                    9241 	.db #0x55	; 85	'U'
      00028E 59                    9242 	.db #0x59	; 89	'Y'
      00028F 21                    9243 	.db #0x21	; 33
      000290 55                    9244 	.db #0x55	; 85	'U'
      000291 55                    9245 	.db #0x55	; 85	'U'
      000292 79                    9246 	.db #0x79	; 121	'y'
      000293 41                    9247 	.db #0x41	; 65	'A'
      000294 22                    9248 	.db #0x22	; 34
      000295 54                    9249 	.db #0x54	; 84	'T'
      000296 54                    9250 	.db #0x54	; 84	'T'
      000297 78                    9251 	.db #0x78	; 120	'x'
      000298 42                    9252 	.db #0x42	; 66	'B'
      000299 21                    9253 	.db #0x21	; 33
      00029A 55                    9254 	.db #0x55	; 85	'U'
      00029B 54                    9255 	.db #0x54	; 84	'T'
      00029C 78                    9256 	.db #0x78	; 120	'x'
      00029D 40                    9257 	.db #0x40	; 64
      00029E 20                    9258 	.db #0x20	; 32
      00029F 54                    9259 	.db #0x54	; 84	'T'
      0002A0 55                    9260 	.db #0x55	; 85	'U'
      0002A1 79                    9261 	.db #0x79	; 121	'y'
      0002A2 40                    9262 	.db #0x40	; 64
      0002A3 0C                    9263 	.db #0x0c	; 12
      0002A4 1E                    9264 	.db #0x1e	; 30
      0002A5 52                    9265 	.db #0x52	; 82	'R'
      0002A6 72                    9266 	.db #0x72	; 114	'r'
      0002A7 12                    9267 	.db #0x12	; 18
      0002A8 39                    9268 	.db #0x39	; 57	'9'
      0002A9 55                    9269 	.db #0x55	; 85	'U'
      0002AA 55                    9270 	.db #0x55	; 85	'U'
      0002AB 55                    9271 	.db #0x55	; 85	'U'
      0002AC 59                    9272 	.db #0x59	; 89	'Y'
      0002AD 39                    9273 	.db #0x39	; 57	'9'
      0002AE 54                    9274 	.db #0x54	; 84	'T'
      0002AF 54                    9275 	.db #0x54	; 84	'T'
      0002B0 54                    9276 	.db #0x54	; 84	'T'
      0002B1 59                    9277 	.db #0x59	; 89	'Y'
      0002B2 39                    9278 	.db #0x39	; 57	'9'
      0002B3 55                    9279 	.db #0x55	; 85	'U'
      0002B4 54                    9280 	.db #0x54	; 84	'T'
      0002B5 54                    9281 	.db #0x54	; 84	'T'
      0002B6 58                    9282 	.db #0x58	; 88	'X'
      0002B7 00                    9283 	.db #0x00	; 0
      0002B8 00                    9284 	.db #0x00	; 0
      0002B9 45                    9285 	.db #0x45	; 69	'E'
      0002BA 7C                    9286 	.db #0x7c	; 124
      0002BB 41                    9287 	.db #0x41	; 65	'A'
      0002BC 00                    9288 	.db #0x00	; 0
      0002BD 02                    9289 	.db #0x02	; 2
      0002BE 45                    9290 	.db #0x45	; 69	'E'
      0002BF 7D                    9291 	.db #0x7d	; 125
      0002C0 42                    9292 	.db #0x42	; 66	'B'
      0002C1 00                    9293 	.db #0x00	; 0
      0002C2 01                    9294 	.db #0x01	; 1
      0002C3 45                    9295 	.db #0x45	; 69	'E'
      0002C4 7C                    9296 	.db #0x7c	; 124
      0002C5 40                    9297 	.db #0x40	; 64
      0002C6 7D                    9298 	.db #0x7d	; 125
      0002C7 12                    9299 	.db #0x12	; 18
      0002C8 11                    9300 	.db #0x11	; 17
      0002C9 12                    9301 	.db #0x12	; 18
      0002CA 7D                    9302 	.db #0x7d	; 125
      0002CB F0                    9303 	.db #0xf0	; 240
      0002CC 28                    9304 	.db #0x28	; 40
      0002CD 25                    9305 	.db #0x25	; 37
      0002CE 28                    9306 	.db #0x28	; 40
      0002CF F0                    9307 	.db #0xf0	; 240
      0002D0 7C                    9308 	.db #0x7c	; 124
      0002D1 54                    9309 	.db #0x54	; 84	'T'
      0002D2 55                    9310 	.db #0x55	; 85	'U'
      0002D3 45                    9311 	.db #0x45	; 69	'E'
      0002D4 00                    9312 	.db #0x00	; 0
      0002D5 20                    9313 	.db #0x20	; 32
      0002D6 54                    9314 	.db #0x54	; 84	'T'
      0002D7 54                    9315 	.db #0x54	; 84	'T'
      0002D8 7C                    9316 	.db #0x7c	; 124
      0002D9 54                    9317 	.db #0x54	; 84	'T'
      0002DA 7C                    9318 	.db #0x7c	; 124
      0002DB 0A                    9319 	.db #0x0a	; 10
      0002DC 09                    9320 	.db #0x09	; 9
      0002DD 7F                    9321 	.db #0x7f	; 127
      0002DE 49                    9322 	.db #0x49	; 73	'I'
      0002DF 32                    9323 	.db #0x32	; 50	'2'
      0002E0 49                    9324 	.db #0x49	; 73	'I'
      0002E1 49                    9325 	.db #0x49	; 73	'I'
      0002E2 49                    9326 	.db #0x49	; 73	'I'
      0002E3 32                    9327 	.db #0x32	; 50	'2'
      0002E4 3A                    9328 	.db #0x3a	; 58
      0002E5 44                    9329 	.db #0x44	; 68	'D'
      0002E6 44                    9330 	.db #0x44	; 68	'D'
      0002E7 44                    9331 	.db #0x44	; 68	'D'
      0002E8 3A                    9332 	.db #0x3a	; 58
      0002E9 32                    9333 	.db #0x32	; 50	'2'
      0002EA 4A                    9334 	.db #0x4a	; 74	'J'
      0002EB 48                    9335 	.db #0x48	; 72	'H'
      0002EC 48                    9336 	.db #0x48	; 72	'H'
      0002ED 30                    9337 	.db #0x30	; 48	'0'
      0002EE 3A                    9338 	.db #0x3a	; 58
      0002EF 41                    9339 	.db #0x41	; 65	'A'
      0002F0 41                    9340 	.db #0x41	; 65	'A'
      0002F1 21                    9341 	.db #0x21	; 33
      0002F2 7A                    9342 	.db #0x7a	; 122	'z'
      0002F3 3A                    9343 	.db #0x3a	; 58
      0002F4 42                    9344 	.db #0x42	; 66	'B'
      0002F5 40                    9345 	.db #0x40	; 64
      0002F6 20                    9346 	.db #0x20	; 32
      0002F7 78                    9347 	.db #0x78	; 120	'x'
      0002F8 00                    9348 	.db #0x00	; 0
      0002F9 9D                    9349 	.db #0x9d	; 157
      0002FA A0                    9350 	.db #0xa0	; 160
      0002FB A0                    9351 	.db #0xa0	; 160
      0002FC 7D                    9352 	.db #0x7d	; 125
      0002FD 3D                    9353 	.db #0x3d	; 61
      0002FE 42                    9354 	.db #0x42	; 66	'B'
      0002FF 42                    9355 	.db #0x42	; 66	'B'
      000300 42                    9356 	.db #0x42	; 66	'B'
      000301 3D                    9357 	.db #0x3d	; 61
      000302 3D                    9358 	.db #0x3d	; 61
      000303 40                    9359 	.db #0x40	; 64
      000304 40                    9360 	.db #0x40	; 64
      000305 40                    9361 	.db #0x40	; 64
      000306 3D                    9362 	.db #0x3d	; 61
      000307 3C                    9363 	.db #0x3c	; 60
      000308 24                    9364 	.db #0x24	; 36
      000309 FF                    9365 	.db #0xff	; 255
      00030A 24                    9366 	.db #0x24	; 36
      00030B 24                    9367 	.db #0x24	; 36
      00030C 48                    9368 	.db #0x48	; 72	'H'
      00030D 7E                    9369 	.db #0x7e	; 126
      00030E 49                    9370 	.db #0x49	; 73	'I'
      00030F 43                    9371 	.db #0x43	; 67	'C'
      000310 66                    9372 	.db #0x66	; 102	'f'
      000311 2B                    9373 	.db #0x2b	; 43
      000312 2F                    9374 	.db #0x2f	; 47
      000313 FC                    9375 	.db #0xfc	; 252
      000314 2F                    9376 	.db #0x2f	; 47
      000315 2B                    9377 	.db #0x2b	; 43
      000316 FF                    9378 	.db #0xff	; 255
      000317 09                    9379 	.db #0x09	; 9
      000318 29                    9380 	.db #0x29	; 41
      000319 F6                    9381 	.db #0xf6	; 246
      00031A 20                    9382 	.db #0x20	; 32
      00031B C0                    9383 	.db #0xc0	; 192
      00031C 88                    9384 	.db #0x88	; 136
      00031D 7E                    9385 	.db #0x7e	; 126
      00031E 09                    9386 	.db #0x09	; 9
      00031F 03                    9387 	.db #0x03	; 3
      000320 20                    9388 	.db #0x20	; 32
      000321 54                    9389 	.db #0x54	; 84	'T'
      000322 54                    9390 	.db #0x54	; 84	'T'
      000323 79                    9391 	.db #0x79	; 121	'y'
      000324 41                    9392 	.db #0x41	; 65	'A'
      000325 00                    9393 	.db #0x00	; 0
      000326 00                    9394 	.db #0x00	; 0
      000327 44                    9395 	.db #0x44	; 68	'D'
      000328 7D                    9396 	.db #0x7d	; 125
      000329 41                    9397 	.db #0x41	; 65	'A'
      00032A 30                    9398 	.db #0x30	; 48	'0'
      00032B 48                    9399 	.db #0x48	; 72	'H'
      00032C 48                    9400 	.db #0x48	; 72	'H'
      00032D 4A                    9401 	.db #0x4a	; 74	'J'
      00032E 32                    9402 	.db #0x32	; 50	'2'
      00032F 38                    9403 	.db #0x38	; 56	'8'
      000330 40                    9404 	.db #0x40	; 64
      000331 40                    9405 	.db #0x40	; 64
      000332 22                    9406 	.db #0x22	; 34
      000333 7A                    9407 	.db #0x7a	; 122	'z'
      000334 00                    9408 	.db #0x00	; 0
      000335 7A                    9409 	.db #0x7a	; 122	'z'
      000336 0A                    9410 	.db #0x0a	; 10
      000337 0A                    9411 	.db #0x0a	; 10
      000338 72                    9412 	.db #0x72	; 114	'r'
      000339 7D                    9413 	.db #0x7d	; 125
      00033A 0D                    9414 	.db #0x0d	; 13
      00033B 19                    9415 	.db #0x19	; 25
      00033C 31                    9416 	.db #0x31	; 49	'1'
      00033D 7D                    9417 	.db #0x7d	; 125
      00033E 26                    9418 	.db #0x26	; 38
      00033F 29                    9419 	.db #0x29	; 41
      000340 29                    9420 	.db #0x29	; 41
      000341 2F                    9421 	.db #0x2f	; 47
      000342 28                    9422 	.db #0x28	; 40
      000343 26                    9423 	.db #0x26	; 38
      000344 29                    9424 	.db #0x29	; 41
      000345 29                    9425 	.db #0x29	; 41
      000346 29                    9426 	.db #0x29	; 41
      000347 26                    9427 	.db #0x26	; 38
      000348 30                    9428 	.db #0x30	; 48	'0'
      000349 48                    9429 	.db #0x48	; 72	'H'
      00034A 4D                    9430 	.db #0x4d	; 77	'M'
      00034B 40                    9431 	.db #0x40	; 64
      00034C 20                    9432 	.db #0x20	; 32
      00034D 38                    9433 	.db #0x38	; 56	'8'
      00034E 08                    9434 	.db #0x08	; 8
      00034F 08                    9435 	.db #0x08	; 8
      000350 08                    9436 	.db #0x08	; 8
      000351 08                    9437 	.db #0x08	; 8
      000352 08                    9438 	.db #0x08	; 8
      000353 08                    9439 	.db #0x08	; 8
      000354 08                    9440 	.db #0x08	; 8
      000355 08                    9441 	.db #0x08	; 8
      000356 38                    9442 	.db #0x38	; 56	'8'
      000357 2F                    9443 	.db #0x2f	; 47
      000358 10                    9444 	.db #0x10	; 16
      000359 C8                    9445 	.db #0xc8	; 200
      00035A AC                    9446 	.db #0xac	; 172
      00035B BA                    9447 	.db #0xba	; 186
      00035C 2F                    9448 	.db #0x2f	; 47
      00035D 10                    9449 	.db #0x10	; 16
      00035E 28                    9450 	.db #0x28	; 40
      00035F 34                    9451 	.db #0x34	; 52	'4'
      000360 FA                    9452 	.db #0xfa	; 250
      000361 00                    9453 	.db #0x00	; 0
      000362 00                    9454 	.db #0x00	; 0
      000363 7B                    9455 	.db #0x7b	; 123
      000364 00                    9456 	.db #0x00	; 0
      000365 00                    9457 	.db #0x00	; 0
      000366 08                    9458 	.db #0x08	; 8
      000367 14                    9459 	.db #0x14	; 20
      000368 2A                    9460 	.db #0x2a	; 42
      000369 14                    9461 	.db #0x14	; 20
      00036A 22                    9462 	.db #0x22	; 34
      00036B 22                    9463 	.db #0x22	; 34
      00036C 14                    9464 	.db #0x14	; 20
      00036D 2A                    9465 	.db #0x2a	; 42
      00036E 14                    9466 	.db #0x14	; 20
      00036F 08                    9467 	.db #0x08	; 8
      000370 AA                    9468 	.db #0xaa	; 170
      000371 00                    9469 	.db #0x00	; 0
      000372 55                    9470 	.db #0x55	; 85	'U'
      000373 00                    9471 	.db #0x00	; 0
      000374 AA                    9472 	.db #0xaa	; 170
      000375 AA                    9473 	.db #0xaa	; 170
      000376 55                    9474 	.db #0x55	; 85	'U'
      000377 AA                    9475 	.db #0xaa	; 170
      000378 55                    9476 	.db #0x55	; 85	'U'
      000379 AA                    9477 	.db #0xaa	; 170
      00037A 00                    9478 	.db #0x00	; 0
      00037B 00                    9479 	.db #0x00	; 0
      00037C 00                    9480 	.db #0x00	; 0
      00037D FF                    9481 	.db #0xff	; 255
      00037E 00                    9482 	.db #0x00	; 0
      00037F 10                    9483 	.db #0x10	; 16
      000380 10                    9484 	.db #0x10	; 16
      000381 10                    9485 	.db #0x10	; 16
      000382 FF                    9486 	.db #0xff	; 255
      000383 00                    9487 	.db #0x00	; 0
      000384 14                    9488 	.db #0x14	; 20
      000385 14                    9489 	.db #0x14	; 20
      000386 14                    9490 	.db #0x14	; 20
      000387 FF                    9491 	.db #0xff	; 255
      000388 00                    9492 	.db #0x00	; 0
      000389 10                    9493 	.db #0x10	; 16
      00038A 10                    9494 	.db #0x10	; 16
      00038B FF                    9495 	.db #0xff	; 255
      00038C 00                    9496 	.db #0x00	; 0
      00038D FF                    9497 	.db #0xff	; 255
      00038E 10                    9498 	.db #0x10	; 16
      00038F 10                    9499 	.db #0x10	; 16
      000390 F0                    9500 	.db #0xf0	; 240
      000391 10                    9501 	.db #0x10	; 16
      000392 F0                    9502 	.db #0xf0	; 240
      000393 14                    9503 	.db #0x14	; 20
      000394 14                    9504 	.db #0x14	; 20
      000395 14                    9505 	.db #0x14	; 20
      000396 FC                    9506 	.db #0xfc	; 252
      000397 00                    9507 	.db #0x00	; 0
      000398 14                    9508 	.db #0x14	; 20
      000399 14                    9509 	.db #0x14	; 20
      00039A F7                    9510 	.db #0xf7	; 247
      00039B 00                    9511 	.db #0x00	; 0
      00039C FF                    9512 	.db #0xff	; 255
      00039D 00                    9513 	.db #0x00	; 0
      00039E 00                    9514 	.db #0x00	; 0
      00039F FF                    9515 	.db #0xff	; 255
      0003A0 00                    9516 	.db #0x00	; 0
      0003A1 FF                    9517 	.db #0xff	; 255
      0003A2 14                    9518 	.db #0x14	; 20
      0003A3 14                    9519 	.db #0x14	; 20
      0003A4 F4                    9520 	.db #0xf4	; 244
      0003A5 04                    9521 	.db #0x04	; 4
      0003A6 FC                    9522 	.db #0xfc	; 252
      0003A7 14                    9523 	.db #0x14	; 20
      0003A8 14                    9524 	.db #0x14	; 20
      0003A9 17                    9525 	.db #0x17	; 23
      0003AA 10                    9526 	.db #0x10	; 16
      0003AB 1F                    9527 	.db #0x1f	; 31
      0003AC 10                    9528 	.db #0x10	; 16
      0003AD 10                    9529 	.db #0x10	; 16
      0003AE 1F                    9530 	.db #0x1f	; 31
      0003AF 10                    9531 	.db #0x10	; 16
      0003B0 1F                    9532 	.db #0x1f	; 31
      0003B1 14                    9533 	.db #0x14	; 20
      0003B2 14                    9534 	.db #0x14	; 20
      0003B3 14                    9535 	.db #0x14	; 20
      0003B4 1F                    9536 	.db #0x1f	; 31
      0003B5 00                    9537 	.db #0x00	; 0
      0003B6 10                    9538 	.db #0x10	; 16
      0003B7 10                    9539 	.db #0x10	; 16
      0003B8 10                    9540 	.db #0x10	; 16
      0003B9 F0                    9541 	.db #0xf0	; 240
      0003BA 00                    9542 	.db #0x00	; 0
      0003BB 00                    9543 	.db #0x00	; 0
      0003BC 00                    9544 	.db #0x00	; 0
      0003BD 00                    9545 	.db #0x00	; 0
      0003BE 1F                    9546 	.db #0x1f	; 31
      0003BF 10                    9547 	.db #0x10	; 16
      0003C0 10                    9548 	.db #0x10	; 16
      0003C1 10                    9549 	.db #0x10	; 16
      0003C2 10                    9550 	.db #0x10	; 16
      0003C3 1F                    9551 	.db #0x1f	; 31
      0003C4 10                    9552 	.db #0x10	; 16
      0003C5 10                    9553 	.db #0x10	; 16
      0003C6 10                    9554 	.db #0x10	; 16
      0003C7 10                    9555 	.db #0x10	; 16
      0003C8 F0                    9556 	.db #0xf0	; 240
      0003C9 10                    9557 	.db #0x10	; 16
      0003CA 00                    9558 	.db #0x00	; 0
      0003CB 00                    9559 	.db #0x00	; 0
      0003CC 00                    9560 	.db #0x00	; 0
      0003CD FF                    9561 	.db #0xff	; 255
      0003CE 10                    9562 	.db #0x10	; 16
      0003CF 10                    9563 	.db #0x10	; 16
      0003D0 10                    9564 	.db #0x10	; 16
      0003D1 10                    9565 	.db #0x10	; 16
      0003D2 10                    9566 	.db #0x10	; 16
      0003D3 10                    9567 	.db #0x10	; 16
      0003D4 10                    9568 	.db #0x10	; 16
      0003D5 10                    9569 	.db #0x10	; 16
      0003D6 10                    9570 	.db #0x10	; 16
      0003D7 FF                    9571 	.db #0xff	; 255
      0003D8 10                    9572 	.db #0x10	; 16
      0003D9 00                    9573 	.db #0x00	; 0
      0003DA 00                    9574 	.db #0x00	; 0
      0003DB 00                    9575 	.db #0x00	; 0
      0003DC FF                    9576 	.db #0xff	; 255
      0003DD 14                    9577 	.db #0x14	; 20
      0003DE 00                    9578 	.db #0x00	; 0
      0003DF 00                    9579 	.db #0x00	; 0
      0003E0 FF                    9580 	.db #0xff	; 255
      0003E1 00                    9581 	.db #0x00	; 0
      0003E2 FF                    9582 	.db #0xff	; 255
      0003E3 00                    9583 	.db #0x00	; 0
      0003E4 00                    9584 	.db #0x00	; 0
      0003E5 1F                    9585 	.db #0x1f	; 31
      0003E6 10                    9586 	.db #0x10	; 16
      0003E7 17                    9587 	.db #0x17	; 23
      0003E8 00                    9588 	.db #0x00	; 0
      0003E9 00                    9589 	.db #0x00	; 0
      0003EA FC                    9590 	.db #0xfc	; 252
      0003EB 04                    9591 	.db #0x04	; 4
      0003EC F4                    9592 	.db #0xf4	; 244
      0003ED 14                    9593 	.db #0x14	; 20
      0003EE 14                    9594 	.db #0x14	; 20
      0003EF 17                    9595 	.db #0x17	; 23
      0003F0 10                    9596 	.db #0x10	; 16
      0003F1 17                    9597 	.db #0x17	; 23
      0003F2 14                    9598 	.db #0x14	; 20
      0003F3 14                    9599 	.db #0x14	; 20
      0003F4 F4                    9600 	.db #0xf4	; 244
      0003F5 04                    9601 	.db #0x04	; 4
      0003F6 F4                    9602 	.db #0xf4	; 244
      0003F7 00                    9603 	.db #0x00	; 0
      0003F8 00                    9604 	.db #0x00	; 0
      0003F9 FF                    9605 	.db #0xff	; 255
      0003FA 00                    9606 	.db #0x00	; 0
      0003FB F7                    9607 	.db #0xf7	; 247
      0003FC 14                    9608 	.db #0x14	; 20
      0003FD 14                    9609 	.db #0x14	; 20
      0003FE 14                    9610 	.db #0x14	; 20
      0003FF 14                    9611 	.db #0x14	; 20
      000400 14                    9612 	.db #0x14	; 20
      000401 14                    9613 	.db #0x14	; 20
      000402 14                    9614 	.db #0x14	; 20
      000403 F7                    9615 	.db #0xf7	; 247
      000404 00                    9616 	.db #0x00	; 0
      000405 F7                    9617 	.db #0xf7	; 247
      000406 14                    9618 	.db #0x14	; 20
      000407 14                    9619 	.db #0x14	; 20
      000408 14                    9620 	.db #0x14	; 20
      000409 17                    9621 	.db #0x17	; 23
      00040A 14                    9622 	.db #0x14	; 20
      00040B 10                    9623 	.db #0x10	; 16
      00040C 10                    9624 	.db #0x10	; 16
      00040D 1F                    9625 	.db #0x1f	; 31
      00040E 10                    9626 	.db #0x10	; 16
      00040F 1F                    9627 	.db #0x1f	; 31
      000410 14                    9628 	.db #0x14	; 20
      000411 14                    9629 	.db #0x14	; 20
      000412 14                    9630 	.db #0x14	; 20
      000413 F4                    9631 	.db #0xf4	; 244
      000414 14                    9632 	.db #0x14	; 20
      000415 10                    9633 	.db #0x10	; 16
      000416 10                    9634 	.db #0x10	; 16
      000417 F0                    9635 	.db #0xf0	; 240
      000418 10                    9636 	.db #0x10	; 16
      000419 F0                    9637 	.db #0xf0	; 240
      00041A 00                    9638 	.db #0x00	; 0
      00041B 00                    9639 	.db #0x00	; 0
      00041C 1F                    9640 	.db #0x1f	; 31
      00041D 10                    9641 	.db #0x10	; 16
      00041E 1F                    9642 	.db #0x1f	; 31
      00041F 00                    9643 	.db #0x00	; 0
      000420 00                    9644 	.db #0x00	; 0
      000421 00                    9645 	.db #0x00	; 0
      000422 1F                    9646 	.db #0x1f	; 31
      000423 14                    9647 	.db #0x14	; 20
      000424 00                    9648 	.db #0x00	; 0
      000425 00                    9649 	.db #0x00	; 0
      000426 00                    9650 	.db #0x00	; 0
      000427 FC                    9651 	.db #0xfc	; 252
      000428 14                    9652 	.db #0x14	; 20
      000429 00                    9653 	.db #0x00	; 0
      00042A 00                    9654 	.db #0x00	; 0
      00042B F0                    9655 	.db #0xf0	; 240
      00042C 10                    9656 	.db #0x10	; 16
      00042D F0                    9657 	.db #0xf0	; 240
      00042E 10                    9658 	.db #0x10	; 16
      00042F 10                    9659 	.db #0x10	; 16
      000430 FF                    9660 	.db #0xff	; 255
      000431 10                    9661 	.db #0x10	; 16
      000432 FF                    9662 	.db #0xff	; 255
      000433 14                    9663 	.db #0x14	; 20
      000434 14                    9664 	.db #0x14	; 20
      000435 14                    9665 	.db #0x14	; 20
      000436 FF                    9666 	.db #0xff	; 255
      000437 14                    9667 	.db #0x14	; 20
      000438 10                    9668 	.db #0x10	; 16
      000439 10                    9669 	.db #0x10	; 16
      00043A 10                    9670 	.db #0x10	; 16
      00043B 1F                    9671 	.db #0x1f	; 31
      00043C 00                    9672 	.db #0x00	; 0
      00043D 00                    9673 	.db #0x00	; 0
      00043E 00                    9674 	.db #0x00	; 0
      00043F 00                    9675 	.db #0x00	; 0
      000440 F0                    9676 	.db #0xf0	; 240
      000441 10                    9677 	.db #0x10	; 16
      000442 FF                    9678 	.db #0xff	; 255
      000443 FF                    9679 	.db #0xff	; 255
      000444 FF                    9680 	.db #0xff	; 255
      000445 FF                    9681 	.db #0xff	; 255
      000446 FF                    9682 	.db #0xff	; 255
      000447 F0                    9683 	.db #0xf0	; 240
      000448 F0                    9684 	.db #0xf0	; 240
      000449 F0                    9685 	.db #0xf0	; 240
      00044A F0                    9686 	.db #0xf0	; 240
      00044B F0                    9687 	.db #0xf0	; 240
      00044C FF                    9688 	.db #0xff	; 255
      00044D FF                    9689 	.db #0xff	; 255
      00044E FF                    9690 	.db #0xff	; 255
      00044F 00                    9691 	.db #0x00	; 0
      000450 00                    9692 	.db #0x00	; 0
      000451 00                    9693 	.db #0x00	; 0
      000452 00                    9694 	.db #0x00	; 0
      000453 00                    9695 	.db #0x00	; 0
      000454 FF                    9696 	.db #0xff	; 255
      000455 FF                    9697 	.db #0xff	; 255
      000456 0F                    9698 	.db #0x0f	; 15
      000457 0F                    9699 	.db #0x0f	; 15
      000458 0F                    9700 	.db #0x0f	; 15
      000459 0F                    9701 	.db #0x0f	; 15
      00045A 0F                    9702 	.db #0x0f	; 15
      00045B 38                    9703 	.db #0x38	; 56	'8'
      00045C 44                    9704 	.db #0x44	; 68	'D'
      00045D 44                    9705 	.db #0x44	; 68	'D'
      00045E 38                    9706 	.db #0x38	; 56	'8'
      00045F 44                    9707 	.db #0x44	; 68	'D'
      000460 FC                    9708 	.db #0xfc	; 252
      000461 4A                    9709 	.db #0x4a	; 74	'J'
      000462 4A                    9710 	.db #0x4a	; 74	'J'
      000463 4A                    9711 	.db #0x4a	; 74	'J'
      000464 34                    9712 	.db #0x34	; 52	'4'
      000465 7E                    9713 	.db #0x7e	; 126
      000466 02                    9714 	.db #0x02	; 2
      000467 02                    9715 	.db #0x02	; 2
      000468 06                    9716 	.db #0x06	; 6
      000469 06                    9717 	.db #0x06	; 6
      00046A 02                    9718 	.db #0x02	; 2
      00046B 7E                    9719 	.db #0x7e	; 126
      00046C 02                    9720 	.db #0x02	; 2
      00046D 7E                    9721 	.db #0x7e	; 126
      00046E 02                    9722 	.db #0x02	; 2
      00046F 63                    9723 	.db #0x63	; 99	'c'
      000470 55                    9724 	.db #0x55	; 85	'U'
      000471 49                    9725 	.db #0x49	; 73	'I'
      000472 41                    9726 	.db #0x41	; 65	'A'
      000473 63                    9727 	.db #0x63	; 99	'c'
      000474 38                    9728 	.db #0x38	; 56	'8'
      000475 44                    9729 	.db #0x44	; 68	'D'
      000476 44                    9730 	.db #0x44	; 68	'D'
      000477 3C                    9731 	.db #0x3c	; 60
      000478 04                    9732 	.db #0x04	; 4
      000479 40                    9733 	.db #0x40	; 64
      00047A 7E                    9734 	.db #0x7e	; 126
      00047B 20                    9735 	.db #0x20	; 32
      00047C 1E                    9736 	.db #0x1e	; 30
      00047D 20                    9737 	.db #0x20	; 32
      00047E 06                    9738 	.db #0x06	; 6
      00047F 02                    9739 	.db #0x02	; 2
      000480 7E                    9740 	.db #0x7e	; 126
      000481 02                    9741 	.db #0x02	; 2
      000482 02                    9742 	.db #0x02	; 2
      000483 99                    9743 	.db #0x99	; 153
      000484 A5                    9744 	.db #0xa5	; 165
      000485 E7                    9745 	.db #0xe7	; 231
      000486 A5                    9746 	.db #0xa5	; 165
      000487 99                    9747 	.db #0x99	; 153
      000488 1C                    9748 	.db #0x1c	; 28
      000489 2A                    9749 	.db #0x2a	; 42
      00048A 49                    9750 	.db #0x49	; 73	'I'
      00048B 2A                    9751 	.db #0x2a	; 42
      00048C 1C                    9752 	.db #0x1c	; 28
      00048D 4C                    9753 	.db #0x4c	; 76	'L'
      00048E 72                    9754 	.db #0x72	; 114	'r'
      00048F 01                    9755 	.db #0x01	; 1
      000490 72                    9756 	.db #0x72	; 114	'r'
      000491 4C                    9757 	.db #0x4c	; 76	'L'
      000492 30                    9758 	.db #0x30	; 48	'0'
      000493 4A                    9759 	.db #0x4a	; 74	'J'
      000494 4D                    9760 	.db #0x4d	; 77	'M'
      000495 4D                    9761 	.db #0x4d	; 77	'M'
      000496 30                    9762 	.db #0x30	; 48	'0'
      000497 30                    9763 	.db #0x30	; 48	'0'
      000498 48                    9764 	.db #0x48	; 72	'H'
      000499 78                    9765 	.db #0x78	; 120	'x'
      00049A 48                    9766 	.db #0x48	; 72	'H'
      00049B 30                    9767 	.db #0x30	; 48	'0'
      00049C BC                    9768 	.db #0xbc	; 188
      00049D 62                    9769 	.db #0x62	; 98	'b'
      00049E 5A                    9770 	.db #0x5a	; 90	'Z'
      00049F 46                    9771 	.db #0x46	; 70	'F'
      0004A0 3D                    9772 	.db #0x3d	; 61
      0004A1 3E                    9773 	.db #0x3e	; 62
      0004A2 49                    9774 	.db #0x49	; 73	'I'
      0004A3 49                    9775 	.db #0x49	; 73	'I'
      0004A4 49                    9776 	.db #0x49	; 73	'I'
      0004A5 00                    9777 	.db #0x00	; 0
      0004A6 7E                    9778 	.db #0x7e	; 126
      0004A7 01                    9779 	.db #0x01	; 1
      0004A8 01                    9780 	.db #0x01	; 1
      0004A9 01                    9781 	.db #0x01	; 1
      0004AA 7E                    9782 	.db #0x7e	; 126
      0004AB 2A                    9783 	.db #0x2a	; 42
      0004AC 2A                    9784 	.db #0x2a	; 42
      0004AD 2A                    9785 	.db #0x2a	; 42
      0004AE 2A                    9786 	.db #0x2a	; 42
      0004AF 2A                    9787 	.db #0x2a	; 42
      0004B0 44                    9788 	.db #0x44	; 68	'D'
      0004B1 44                    9789 	.db #0x44	; 68	'D'
      0004B2 5F                    9790 	.db #0x5f	; 95
      0004B3 44                    9791 	.db #0x44	; 68	'D'
      0004B4 44                    9792 	.db #0x44	; 68	'D'
      0004B5 40                    9793 	.db #0x40	; 64
      0004B6 51                    9794 	.db #0x51	; 81	'Q'
      0004B7 4A                    9795 	.db #0x4a	; 74	'J'
      0004B8 44                    9796 	.db #0x44	; 68	'D'
      0004B9 40                    9797 	.db #0x40	; 64
      0004BA 40                    9798 	.db #0x40	; 64
      0004BB 44                    9799 	.db #0x44	; 68	'D'
      0004BC 4A                    9800 	.db #0x4a	; 74	'J'
      0004BD 51                    9801 	.db #0x51	; 81	'Q'
      0004BE 40                    9802 	.db #0x40	; 64
      0004BF 00                    9803 	.db #0x00	; 0
      0004C0 00                    9804 	.db #0x00	; 0
      0004C1 FF                    9805 	.db #0xff	; 255
      0004C2 01                    9806 	.db #0x01	; 1
      0004C3 03                    9807 	.db #0x03	; 3
      0004C4 E0                    9808 	.db #0xe0	; 224
      0004C5 80                    9809 	.db #0x80	; 128
      0004C6 FF                    9810 	.db #0xff	; 255
      0004C7 00                    9811 	.db #0x00	; 0
      0004C8 00                    9812 	.db #0x00	; 0
      0004C9 08                    9813 	.db #0x08	; 8
      0004CA 08                    9814 	.db #0x08	; 8
      0004CB 6B                    9815 	.db #0x6b	; 107	'k'
      0004CC 6B                    9816 	.db #0x6b	; 107	'k'
      0004CD 08                    9817 	.db #0x08	; 8
      0004CE 36                    9818 	.db #0x36	; 54	'6'
      0004CF 12                    9819 	.db #0x12	; 18
      0004D0 36                    9820 	.db #0x36	; 54	'6'
      0004D1 24                    9821 	.db #0x24	; 36
      0004D2 36                    9822 	.db #0x36	; 54	'6'
      0004D3 06                    9823 	.db #0x06	; 6
      0004D4 0F                    9824 	.db #0x0f	; 15
      0004D5 09                    9825 	.db #0x09	; 9
      0004D6 0F                    9826 	.db #0x0f	; 15
      0004D7 06                    9827 	.db #0x06	; 6
      0004D8 00                    9828 	.db #0x00	; 0
      0004D9 00                    9829 	.db #0x00	; 0
      0004DA 18                    9830 	.db #0x18	; 24
      0004DB 18                    9831 	.db #0x18	; 24
      0004DC 00                    9832 	.db #0x00	; 0
      0004DD 00                    9833 	.db #0x00	; 0
      0004DE 00                    9834 	.db #0x00	; 0
      0004DF 10                    9835 	.db #0x10	; 16
      0004E0 10                    9836 	.db #0x10	; 16
      0004E1 00                    9837 	.db #0x00	; 0
      0004E2 30                    9838 	.db #0x30	; 48	'0'
      0004E3 40                    9839 	.db #0x40	; 64
      0004E4 FF                    9840 	.db #0xff	; 255
      0004E5 01                    9841 	.db #0x01	; 1
      0004E6 01                    9842 	.db #0x01	; 1
      0004E7 00                    9843 	.db #0x00	; 0
      0004E8 1F                    9844 	.db #0x1f	; 31
      0004E9 01                    9845 	.db #0x01	; 1
      0004EA 01                    9846 	.db #0x01	; 1
      0004EB 1E                    9847 	.db #0x1e	; 30
      0004EC 00                    9848 	.db #0x00	; 0
      0004ED 19                    9849 	.db #0x19	; 25
      0004EE 1D                    9850 	.db #0x1d	; 29
      0004EF 17                    9851 	.db #0x17	; 23
      0004F0 12                    9852 	.db #0x12	; 18
      0004F1 00                    9853 	.db #0x00	; 0
      0004F2 3C                    9854 	.db #0x3c	; 60
      0004F3 3C                    9855 	.db #0x3c	; 60
      0004F4 3C                    9856 	.db #0x3c	; 60
      0004F5 3C                    9857 	.db #0x3c	; 60
      0004F6 00                    9858 	.db #0x00	; 0
      0004F7 00                    9859 	.db #0x00	; 0
      0004F8 00                    9860 	.db #0x00	; 0
      0004F9 00                    9861 	.db #0x00	; 0
      0004FA 00                    9862 	.db #0x00	; 0
      0004FB                       9863 _keypad:
      0004FB 31                    9864 	.db #0x31	; 49	'1'
      0004FC 34                    9865 	.db #0x34	; 52	'4'
      0004FD 37                    9866 	.db #0x37	; 55	'7'
      0004FE 45                    9867 	.db #0x45	; 69	'E'
      0004FF 32                    9868 	.db #0x32	; 50	'2'
      000500 35                    9869 	.db #0x35	; 53	'5'
      000501 38                    9870 	.db #0x38	; 56	'8'
      000502 30                    9871 	.db #0x30	; 48	'0'
      000503 33                    9872 	.db #0x33	; 51	'3'
      000504 36                    9873 	.db #0x36	; 54	'6'
      000505 39                    9874 	.db #0x39	; 57	'9'
      000506 46                    9875 	.db #0x46	; 70	'F'
      000507 41                    9876 	.db #0x41	; 65	'A'
      000508 42                    9877 	.db #0x42	; 66	'B'
      000509 43                    9878 	.db #0x43	; 67	'C'
      00050A 44                    9879 	.db #0x44	; 68	'D'
                                   9880 	.area CONST   (CODE)
      00050B                       9881 ___str_0:
      00050B 50 61 72 69 74 79     9882 	.ascii "Parity"
      000511 0A                    9883 	.db 0x0a
      000512 45 72 72 6F 72 2E     9884 	.ascii "Error."
      000518 00                    9885 	.db 0x00
                                   9886 	.area CSEG    (CODE)
                                   9887 	.area CONST   (CODE)
      000519                       9888 ___str_1:
      000519 55 41 52 54 20 64 61  9889 	.ascii "UART data"
             74 61
      000522 0A                    9890 	.db 0x0a
      000523 72 65 63 65 69 76 65  9891 	.ascii "received."
             64 2E
      00052C 0A                    9892 	.db 0x0a
      00052D 0A                    9893 	.db 0x0a
      00052E 20 3E 3E 20           9894 	.ascii " >> "
      000532 00                    9895 	.db 0x00
                                   9896 	.area CSEG    (CODE)
                                   9897 	.area CONST   (CODE)
      000533                       9898 ___str_2:
      000533 3A                    9899 	.ascii ":"
      000534 00                    9900 	.db 0x00
                                   9901 	.area CSEG    (CODE)
                                   9902 	.area CONST   (CODE)
      000535                       9903 ___str_3:
      000535 30 78                 9904 	.ascii "0x"
      000537 00                    9905 	.db 0x00
                                   9906 	.area CSEG    (CODE)
                                   9907 	.area CONST   (CODE)
      000538                       9908 ___str_4:
      000538 0A                    9909 	.db 0x0a
      000539 20 20 20 49 6E 76 61  9910 	.ascii "   Invalid"
             6C 69 64
      000543 0A                    9911 	.db 0x0a
      000544 0A                    9912 	.db 0x0a
      000545 00                    9913 	.db 0x00
                                   9914 	.area CSEG    (CODE)
                                   9915 	.area CONST   (CODE)
      000546                       9916 ___str_5:
      000546 20 20 20 20 49 6E 70  9917 	.ascii "    Input"
             75 74
      00054F 00                    9918 	.db 0x00
                                   9919 	.area CSEG    (CODE)
                                   9920 	.area CONST   (CODE)
      000550                       9921 ___str_6:
      000550 0A                    9922 	.db 0x0a
      000551 53 65 6C 65 63 74 20  9923 	.ascii "Select Data"
             44 61 74 61
      00055C 0A                    9924 	.db 0x0a
      00055D 54 79 70 65 3A        9925 	.ascii "Type:"
      000562 0A                    9926 	.db 0x0a
      000563 0A                    9927 	.db 0x0a
      000564 00                    9928 	.db 0x00
                                   9929 	.area CSEG    (CODE)
                                   9930 	.area CONST   (CODE)
      000565                       9931 ___str_7:
      000565 28 31 29 20 42 79 74  9932 	.ascii "(1) Byte"
             65
      00056D 0A                    9933 	.db 0x0a
      00056E 00                    9934 	.db 0x00
                                   9935 	.area CSEG    (CODE)
                                   9936 	.area CONST   (CODE)
      00056F                       9937 ___str_8:
      00056F 28 32 29 20 57 6F 72  9938 	.ascii "(2) Word"
             64
      000577 0A                    9939 	.db 0x0a
      000578 00                    9940 	.db 0x00
                                   9941 	.area CSEG    (CODE)
                                   9942 	.area CONST   (CODE)
      000579                       9943 ___str_9:
      000579 28 33 29 20 44 6F 75  9944 	.ascii "(3) Double"
             62 6C 65
      000583 0A                    9945 	.db 0x0a
      000584 20 20 20 20 57 6F 72  9946 	.ascii "    Word"
             64
      00058C 0A                    9947 	.db 0x0a
      00058D 0A                    9948 	.db 0x0a
      00058E 20 20 5F              9949 	.ascii "  _"
      000591 00                    9950 	.db 0x00
                                   9951 	.area CSEG    (CODE)
                                   9952 	.area CONST   (CODE)
      000592                       9953 ___str_10:
      000592 0A                    9954 	.db 0x0a
      000593 45 6E 74 65 72 20 44  9955 	.ascii "Enter Data"
             61 74 61
      00059D 0A                    9956 	.db 0x0a
      00059E 53 69 7A 65 3A        9957 	.ascii "Size:"
      0005A3 0A                    9958 	.db 0x0a
      0005A4 0A                    9959 	.db 0x0a
      0005A5 20 20 30 78 5F 5F 5F  9960 	.ascii "  0x____"
             5F
      0005AD 00                    9961 	.db 0x00
                                   9962 	.area CSEG    (CODE)
                                   9963 	.area CONST   (CODE)
      0005AE                       9964 ___str_11:
      0005AE 0A                    9965 	.db 0x0a
      0005AF 57 72 69 74 69 6E 67  9966 	.ascii "Writing 0x55"
             20 30 78 35 35
      0005BB 0A                    9967 	.db 0x0a
      0005BC 74 6F 20 61 6C 6C     9968 	.ascii "to all"
      0005C2 0A                    9969 	.db 0x0a
      0005C3 65 78 74 65 72 6E 61  9970 	.ascii "external RAM"
             6C 20 52 41 4D
      0005CF 0A                    9971 	.db 0x0a
      0005D0 6C 6F 63 61 74 69 6F  9972 	.ascii "locations."
             6E 73 2E
      0005DA 0A                    9973 	.db 0x0a
      0005DB 0A                    9974 	.db 0x0a
      0005DC 00                    9975 	.db 0x00
                                   9976 	.area CSEG    (CODE)
                                   9977 	.area CONST   (CODE)
      0005DD                       9978 ___str_12:
      0005DD 57 72 69 74 65        9979 	.ascii "Write"
      0005E2 0A                    9980 	.db 0x0a
      0005E3 63 6F 6D 70 6C 65 74  9981 	.ascii "complete."
             65 2E
      0005EC 0A                    9982 	.db 0x0a
      0005ED 00                    9983 	.db 0x00
                                   9984 	.area CSEG    (CODE)
                                   9985 	.area CONST   (CODE)
      0005EE                       9986 ___str_13:
      0005EE 0A                    9987 	.db 0x0a
      0005EF 56 65 72 69 66 79 69  9988 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0005FC 0A                    9989 	.db 0x0a
      0005FD 52 41 4D 20 6C 6F 63  9990 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      00060A 0A                    9991 	.db 0x0a
      00060B 65 71 75 61 6C 20 30  9992 	.ascii "equal 0x55."
             78 35 35 2E
      000616 0A                    9993 	.db 0x0a
      000617 0A                    9994 	.db 0x0a
      000618 00                    9995 	.db 0x00
                                   9996 	.area CSEG    (CODE)
                                   9997 	.area CONST   (CODE)
      000619                       9998 ___str_14:
      000619 31 73 74 20 52 41 4D  9999 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      000626 0A                   10000 	.db 0x0a
      000627 75 6E 73 75 63 63 65 10001 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      000634 0A                   10002 	.db 0x0a
      000635 0A                   10003 	.db 0x0a
      000636 00                   10004 	.db 0x00
                                  10005 	.area CSEG    (CODE)
                                  10006 	.area CONST   (CODE)
      000637                      10007 ___str_15:
      000637 45 72 72 6F 72 20 61 10008 	.ascii "Error at:"
             74 3A
      000640 0A                   10009 	.db 0x0a
      000641 00                   10010 	.db 0x00
                                  10011 	.area CSEG    (CODE)
                                  10012 	.area CONST   (CODE)
      000642                      10013 ___str_16:
      000642 3A 20 30 78          10014 	.ascii ": 0x"
      000646 00                   10015 	.db 0x00
                                  10016 	.area CSEG    (CODE)
                                  10017 	.area CONST   (CODE)
      000647                      10018 ___str_17:
      000647 52 65 74 75 72 6E 69 10019 	.ascii "Returning to"
             6E 67 20 74 6F
      000653 0A                   10020 	.db 0x0a
      000654 6D 61 69 6E 20 6D 65 10021 	.ascii "main menu."
             6E 75 2E
      00065E 00                   10022 	.db 0x00
                                  10023 	.area CSEG    (CODE)
                                  10024 	.area CONST   (CODE)
      00065F                      10025 ___str_18:
      00065F 31 73 74 20 52 41 4D 10026 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      00066C 0A                   10027 	.db 0x0a
      00066D 73 75 63 63 65 73 73 10028 	.ascii "successful."
             66 75 6C 2E
      000678 0A                   10029 	.db 0x0a
      000679 0A                   10030 	.db 0x0a
      00067A 00                   10031 	.db 0x00
                                  10032 	.area CSEG    (CODE)
                                  10033 	.area CONST   (CODE)
      00067B                      10034 ___str_19:
      00067B 0A                   10035 	.db 0x0a
      00067C 57 72 69 74 69 6E 67 10036 	.ascii "Writing 0xAA"
             20 30 78 41 41
      000688 0A                   10037 	.db 0x0a
      000689 74 6F 20 61 6C 6C    10038 	.ascii "to all"
      00068F 0A                   10039 	.db 0x0a
      000690 65 78 74 65 72 6E 61 10040 	.ascii "external RAM"
             6C 20 52 41 4D
      00069C 0A                   10041 	.db 0x0a
      00069D 6C 6F 63 61 74 69 6F 10042 	.ascii "locations."
             6E 73 2E
      0006A7 0A                   10043 	.db 0x0a
      0006A8 0A                   10044 	.db 0x0a
      0006A9 00                   10045 	.db 0x00
                                  10046 	.area CSEG    (CODE)
                                  10047 	.area CONST   (CODE)
      0006AA                      10048 ___str_20:
      0006AA 0A                   10049 	.db 0x0a
      0006AB 56 65 72 69 66 79 69 10050 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0006B8 0A                   10051 	.db 0x0a
      0006B9 52 41 4D 20 6C 6F 63 10052 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0006C6 0A                   10053 	.db 0x0a
      0006C7 65 71 75 61 6C 20 30 10054 	.ascii "equal 0xAA."
             78 41 41 2E
      0006D2 0A                   10055 	.db 0x0a
      0006D3 0A                   10056 	.db 0x0a
      0006D4 00                   10057 	.db 0x00
                                  10058 	.area CSEG    (CODE)
                                  10059 	.area CONST   (CODE)
      0006D5                      10060 ___str_21:
      0006D5 32 6E 64 20 52 41 4D 10061 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006E2 0A                   10062 	.db 0x0a
      0006E3 75 6E 73 75 63 63 65 10063 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      0006F0 0A                   10064 	.db 0x0a
      0006F1 0A                   10065 	.db 0x0a
      0006F2 00                   10066 	.db 0x00
                                  10067 	.area CSEG    (CODE)
                                  10068 	.area CONST   (CODE)
      0006F3                      10069 ___str_22:
      0006F3 32 6E 64 20 52 41 4D 10070 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      000700 0A                   10071 	.db 0x0a
      000701 73 75 63 63 65 73 73 10072 	.ascii "successful."
             66 75 6C 2E
      00070C 0A                   10073 	.db 0x0a
      00070D 0A                   10074 	.db 0x0a
      00070E 00                   10075 	.db 0x00
                                  10076 	.area CSEG    (CODE)
                                  10077 	.area CONST   (CODE)
      00070F                      10078 ___str_23:
      00070F 52 41 4D 20 63 68 65 10079 	.ascii "RAM check"
             63 6B
      000718 0A                   10080 	.db 0x0a
      000719 63 6F 6D 70 6C 65 74 10081 	.ascii "complete."
             65 2E
      000722 0A                   10082 	.db 0x0a
      000723 0A                   10083 	.db 0x0a
      000724 00                   10084 	.db 0x00
                                  10085 	.area CSEG    (CODE)
                                  10086 	.area CONST   (CODE)
      000725                      10087 ___str_24:
      000725 0A                   10088 	.db 0x0a
      000726 45 6E 74 65 72 20 73 10089 	.ascii "Enter source"
             6F 75 72 63 65
      000732 0A                   10090 	.db 0x0a
      000733 73 74 61 72 74 69 6E 10091 	.ascii "starting RAM"
             67 20 52 41 4D
      00073F 0A                   10092 	.db 0x0a
      000740 61 64 64 72 65 73 73 10093 	.ascii "address:"
             3A
      000748 0A                   10094 	.db 0x0a
      000749 0A                   10095 	.db 0x0a
      00074A 0A                   10096 	.db 0x0a
      00074B 20 20 30 78 5F 5F 5F 10097 	.ascii "  0x____"
             5F
      000753 00                   10098 	.db 0x00
                                  10099 	.area CSEG    (CODE)
                                  10100 	.area CONST   (CODE)
      000754                      10101 ___str_25:
      000754 0A                   10102 	.db 0x0a
      000755 45 6E 74 65 72       10103 	.ascii "Enter"
      00075A 0A                   10104 	.db 0x0a
      00075B 64 65 73 74 69 6E 61 10105 	.ascii "destination"
             74 69 6F 6E
      000766 0A                   10106 	.db 0x0a
      000767 73 74 61 72 74 69 6E 10107 	.ascii "starting RAM"
             67 20 52 41 4D
      000773 0A                   10108 	.db 0x0a
      000774 61 64 64 72 65 73 73 10109 	.ascii "address:"
             3A
      00077C 0A                   10110 	.db 0x0a
      00077D 0A                   10111 	.db 0x0a
      00077E 0A                   10112 	.db 0x0a
      00077F 20 20 30 78 5F 5F 5F 10113 	.ascii "  0x____"
             5F
      000787 00                   10114 	.db 0x00
                                  10115 	.area CSEG    (CODE)
                                  10116 	.area CONST   (CODE)
      000788                      10117 ___str_26:
      000788 0A                   10118 	.db 0x0a
      000789 4D 6F 76 65 20 63 6F 10119 	.ascii "Move complete."
             6D 70 6C 65 74 65 2E
      000797 0A                   10120 	.db 0x0a
      000798 0A                   10121 	.db 0x0a
      000799 00                   10122 	.db 0x00
                                  10123 	.area CSEG    (CODE)
                                  10124 	.area CONST   (CODE)
      00079A                      10125 ___str_27:
      00079A 0A                   10126 	.db 0x0a
      00079B 45 6E 74 65 72       10127 	.ascii "Enter"
      0007A0 0A                   10128 	.db 0x0a
      0007A1 73 74 61 72 74 69 6E 10129 	.ascii "starting RAM"
             67 20 52 41 4D
      0007AD 0A                   10130 	.db 0x0a
      0007AE 61 64 64 72 65 73 73 10131 	.ascii "address:"
             3A
      0007B6 0A                   10132 	.db 0x0a
      0007B7 0A                   10133 	.db 0x0a
      0007B8 20 20 30 78 5F 5F 5F 10134 	.ascii "  0x____"
             5F
      0007C0 00                   10135 	.db 0x00
                                  10136 	.area CSEG    (CODE)
                                  10137 	.area CONST   (CODE)
      0007C1                      10138 ___str_28:
      0007C1 0A                   10139 	.db 0x0a
      0007C2 45 6E 74 65 72 20 73 10140 	.ascii "Enter search"
             65 61 72 63 68
      0007CE 0A                   10141 	.db 0x0a
      0007CF 76 61 6C 75 65 3A    10142 	.ascii "value:"
      0007D5 0A                   10143 	.db 0x0a
      0007D6 0A                   10144 	.db 0x0a
      0007D7 20 20 30 78 5F 5F    10145 	.ascii "  0x__"
      0007DD 00                   10146 	.db 0x00
                                  10147 	.area CSEG    (CODE)
                                  10148 	.area CONST   (CODE)
      0007DE                      10149 ___str_29:
      0007DE 0A                   10150 	.db 0x0a
      0007DF 30 78                10151 	.ascii "0x"
      0007E1 00                   10152 	.db 0x00
                                  10153 	.area CSEG    (CODE)
                                  10154 	.area CONST   (CODE)
      0007E2                      10155 ___str_30:
      0007E2 20 66 6F 75 6E 64    10156 	.ascii " found"
      0007E8 0A                   10157 	.db 0x0a
      0007E9 00                   10158 	.db 0x00
                                  10159 	.area CSEG    (CODE)
                                  10160 	.area CONST   (CODE)
      0007EA                      10161 ___str_31:
      0007EA 30 78 31 30 30 30 30 10162 	.ascii "0x10000"
      0007F1 00                   10163 	.db 0x00
                                  10164 	.area CSEG    (CODE)
                                  10165 	.area CONST   (CODE)
      0007F2                      10166 ___str_32:
      0007F2 0A                   10167 	.db 0x0a
      0007F3 74 69 6D 65 73 2E    10168 	.ascii "times."
      0007F9 00                   10169 	.db 0x00
                                  10170 	.area CSEG    (CODE)
                                  10171 	.area CONST   (CODE)
      0007FA                      10172 ___str_33:
      0007FA 20 6E 6F 74          10173 	.ascii " not"
      0007FE 0A                   10174 	.db 0x0a
      0007FF 66 6F 75 6E 64 20 69 10175 	.ascii "found in"
             6E
      000807 0A                   10176 	.db 0x0a
      000808 65 78 74 65 72 6E 61 10177 	.ascii "external RAM"
             6C 20 52 41 4D
      000814 0A                   10178 	.db 0x0a
      000815 00                   10179 	.db 0x00
                                  10180 	.area CSEG    (CODE)
                                  10181 	.area CONST   (CODE)
      000816                      10182 ___str_34:
      000816 20 2D                10183 	.ascii " -"
      000818 0A                   10184 	.db 0x0a
      000819 00                   10185 	.db 0x00
                                  10186 	.area CSEG    (CODE)
                                  10187 	.area CONST   (CODE)
      00081A                      10188 ___str_35:
      00081A 0A                   10189 	.db 0x0a
      00081B 00                   10190 	.db 0x00
                                  10191 	.area CSEG    (CODE)
                                  10192 	.area CONST   (CODE)
      00081C                      10193 ___str_36:
      00081C 20 20 28 30 29 20 2D 10194 	.ascii "  (0) - Next Page"
             20 4E 65 78 74 20 50
             61 67 65
      00082D 0A                   10195 	.db 0x0a
      00082E 20 20 28 31 29 20 2D 10196 	.ascii "  (1) - Prev Page"
             20 50 72 65 76 20 50
             61 67 65
      00083F 0A                   10197 	.db 0x0a
      000840 20 20 28 45 29 20 2D 10198 	.ascii "  (E) - END"
             20 45 4E 44
      00084B 0A                   10199 	.db 0x0a
      00084C 00                   10200 	.db 0x00
                                  10201 	.area CSEG    (CODE)
                                  10202 	.area CONST   (CODE)
      00084D                      10203 ___str_37:
      00084D 0A                   10204 	.db 0x0a
      00084E 45 6E 64 20 6F 66 20 10205 	.ascii "End of Data."
             44 61 74 61 2E
      00085A 00                   10206 	.db 0x00
                                  10207 	.area CSEG    (CODE)
                                  10208 	.area CONST   (CODE)
      00085B                      10209 ___str_38:
      00085B 45 6E 64 20 6F 66 20 10210 	.ascii "End of Data"
             44 61 74 61
      000866 00                   10211 	.db 0x00
                                  10212 	.area CSEG    (CODE)
                                  10213 	.area CONST   (CODE)
      000867                      10214 ___str_39:
      000867 0A                   10215 	.db 0x0a
      000868 52 65 74 75 72 6E 69 10216 	.ascii "Returning to"
             6E 67 20 74 6F
      000874 0A                   10217 	.db 0x0a
      000875 4D 61 69 6E 20 4D 65 10218 	.ascii "Main Menu."
             6E 75 2E
      00087F 00                   10219 	.db 0x00
                                  10220 	.area CSEG    (CODE)
                                  10221 	.area CONST   (CODE)
      000880                      10222 ___str_40:
      000880 0A                   10223 	.db 0x0a
      000881 45 6E 74 65 72 20 73 10224 	.ascii "Enter source"
             6F 75 72 63 65
      00088D 0A                   10225 	.db 0x0a
      00088E 73 74 61 72 74 69 6E 10226 	.ascii "starting RAM"
             67 20 52 41 4D
      00089A 0A                   10227 	.db 0x0a
      00089B 61 64 64 72 65 73 73 10228 	.ascii "address:"
             3A
      0008A3 0A                   10229 	.db 0x0a
      0008A4 0A                   10230 	.db 0x0a
      0008A5 20 20 30 78 5F 5F 5F 10231 	.ascii "  0x____"
             5F
      0008AD 00                   10232 	.db 0x00
                                  10233 	.area CSEG    (CODE)
                                  10234 	.area CONST   (CODE)
      0008AE                      10235 ___str_41:
      0008AE 0A                   10236 	.db 0x0a
      0008AF 0A                   10237 	.db 0x0a
      0008B0 4E 65 77 20 76 61 6C 10238 	.ascii "New value:"
             75 65 3A
      0008BA 0A                   10239 	.db 0x0a
      0008BB 20 20 30 78 5F 5F    10240 	.ascii "  0x__"
      0008C1 00                   10241 	.db 0x00
                                  10242 	.area CSEG    (CODE)
                                  10243 	.area CONST   (CODE)
      0008C2                      10244 ___str_42:
      0008C2 0A                   10245 	.db 0x0a
      0008C3 0A                   10246 	.db 0x0a
      0008C4 0A                   10247 	.db 0x0a
      0008C5 0A                   10248 	.db 0x0a
      0008C6 28 31 29 20 45 64 69 10249 	.ascii "(1) Edit next"
             74 20 6E 65 78 74
      0008D3 0A                   10250 	.db 0x0a
      0008D4 52 41 4D 20 6C 6F 63 10251 	.ascii "RAM location"
             61 74 69 6F 6E
      0008E0 0A                   10252 	.db 0x0a
      0008E1 0A                   10253 	.db 0x0a
      0008E2 00                   10254 	.db 0x00
                                  10255 	.area CSEG    (CODE)
                                  10256 	.area CONST   (CODE)
      0008E3                      10257 ___str_43:
      0008E3 28 45 29 20 45 6E 64 10258 	.ascii "(E) End"
      0008EA 00                   10259 	.db 0x00
                                  10260 	.area CSEG    (CODE)
                                  10261 	.area CONST   (CODE)
      0008EB                      10262 ___str_44:
      0008EB 0A                   10263 	.db 0x0a
      0008EC 45 6E 64 20 6F 66 20 10264 	.ascii "End of data."
             64 61 74 61 2E
      0008F8 0A                   10265 	.db 0x0a
      0008F9 00                   10266 	.db 0x00
                                  10267 	.area CSEG    (CODE)
                                  10268 	.area CONST   (CODE)
      0008FA                      10269 ___str_45:
      0008FA 0A                   10270 	.db 0x0a
      0008FB 52 65 74 75 72 6E 69 10271 	.ascii "Returning to"
             6E 67 20 74 6F
      000907 0A                   10272 	.db 0x0a
      000908 6D 61 69 6E 20 6D 65 10273 	.ascii "main menu."
             6E 75 2E
      000912 00                   10274 	.db 0x00
                                  10275 	.area CSEG    (CODE)
                                  10276 	.area CONST   (CODE)
      000913                      10277 ___str_46:
      000913 20 6E 6F 74          10278 	.ascii " not"
      000917 0A                   10279 	.db 0x0a
      000918 66 6F 75 6E 64 20 69 10280 	.ascii "found in"
             6E
      000920 0A                   10281 	.db 0x0a
      000921 61 64 64 72 65 73 73 10282 	.ascii "address range"
             20 72 61 6E 67 65
      00092E 0A                   10283 	.db 0x0a
      00092F 0A                   10284 	.db 0x0a
      000930 00                   10285 	.db 0x00
                                  10286 	.area CSEG    (CODE)
                                  10287 	.area CONST   (CODE)
      000931                      10288 ___str_47:
      000931 20 66 6F 75 6E 64 20 10289 	.ascii " found at"
             61 74
      00093A 0A                   10290 	.db 0x0a
      00093B 74 68 65 20 66 6F 6C 10291 	.ascii "the following"
             6C 6F 77 69 6E 67
      000948 0A                   10292 	.db 0x0a
      000949 61 64 64 72 65 73 73 10293 	.ascii "addresses:"
             65 73 3A
      000953 0A                   10294 	.db 0x0a
      000954 0A                   10295 	.db 0x0a
      000955 00                   10296 	.db 0x00
                                  10297 	.area CSEG    (CODE)
                                  10298 	.area CONST   (CODE)
      000956                      10299 ___str_48:
      000956 45 6E 64 20 6F 66 20 10300 	.ascii "End of Data."
             44 61 74 61 2E
      000962 00                   10301 	.db 0x00
                                  10302 	.area CSEG    (CODE)
                                  10303 	.area CONST   (CODE)
      000963                      10304 ___str_49:
      000963 0A                   10305 	.db 0x0a
      000964 45 6E 74 65 72       10306 	.ascii "Enter"
      000969 0A                   10307 	.db 0x0a
      00096A 73 74 61 72 74 69 6E 10308 	.ascii "starting RAM"
             67 20 52 41 4D
      000976 0A                   10309 	.db 0x0a
      000977 61 64 64 72 65 73 73 10310 	.ascii "address:"
             3A
      00097F 0A                   10311 	.db 0x0a
      000980 0A                   10312 	.db 0x0a
      000981 20 20 20 30 78 5F 5F 10313 	.ascii "   0x____"
             5F 5F
      00098A 00                   10314 	.db 0x00
                                  10315 	.area CSEG    (CODE)
                                  10316 	.area CONST   (CODE)
      00098B                      10317 ___str_50:
      00098B 0A                   10318 	.db 0x0a
      00098C 45 6E 74 65 72 20 73 10319 	.ascii "Enter search"
             65 61 72 63 68
      000998 0A                   10320 	.db 0x0a
      000999 76 61 6C 75 65 3A    10321 	.ascii "value:"
      00099F 0A                   10322 	.db 0x0a
      0009A0 0A                   10323 	.db 0x0a
      0009A1 20 20 20 30 78 5F 5F 10324 	.ascii "   0x__"
      0009A8 00                   10325 	.db 0x00
                                  10326 	.area CSEG    (CODE)
                                  10327 	.area CONST   (CODE)
      0009A9                      10328 ___str_51:
      0009A9 0A                   10329 	.db 0x0a
      0009AA 28 31 29 20 31 32 30 10330 	.ascii "(1) 1200"
             30
      0009B2 0A                   10331 	.db 0x0a
      0009B3 00                   10332 	.db 0x00
                                  10333 	.area CSEG    (CODE)
                                  10334 	.area CONST   (CODE)
      0009B4                      10335 ___str_52:
      0009B4 28 32 29 20 32 34 30 10336 	.ascii "(2) 2400"
             30
      0009BC 0A                   10337 	.db 0x0a
      0009BD 00                   10338 	.db 0x00
                                  10339 	.area CSEG    (CODE)
                                  10340 	.area CONST   (CODE)
      0009BE                      10341 ___str_53:
      0009BE 28 33 29 20 34 38 30 10342 	.ascii "(3) 4800"
             30
      0009C6 0A                   10343 	.db 0x0a
      0009C7 00                   10344 	.db 0x00
                                  10345 	.area CSEG    (CODE)
                                  10346 	.area CONST   (CODE)
      0009C8                      10347 ___str_54:
      0009C8 28 34 29 20 39 36 30 10348 	.ascii "(4) 9600"
             30
      0009D0 0A                   10349 	.db 0x0a
      0009D1 00                   10350 	.db 0x00
                                  10351 	.area CSEG    (CODE)
                                  10352 	.area CONST   (CODE)
      0009D2                      10353 ___str_55:
      0009D2 28 35 29 20 31 39 32 10354 	.ascii "(5) 19200"
             30 30
      0009DB 0A                   10355 	.db 0x0a
      0009DC 0A                   10356 	.db 0x0a
      0009DD 00                   10357 	.db 0x00
                                  10358 	.area CSEG    (CODE)
                                  10359 	.area CONST   (CODE)
      0009DE                      10360 ___str_56:
      0009DE 43 75 72 72 65 6E 74 10361 	.ascii "Current:"
             3A
      0009E6 0A                   10362 	.db 0x0a
      0009E7 00                   10363 	.db 0x00
                                  10364 	.area CSEG    (CODE)
                                  10365 	.area CONST   (CODE)
      0009E8                      10366 ___str_57:
      0009E8 31 39 32 30 30       10367 	.ascii "19200"
      0009ED 0A                   10368 	.db 0x0a
      0009EE 00                   10369 	.db 0x00
                                  10370 	.area CSEG    (CODE)
                                  10371 	.area CONST   (CODE)
      0009EF                      10372 ___str_58:
      0009EF 49 6E 76 61 6C 69 64 10373 	.ascii "Invalid"
      0009F6 0A                   10374 	.db 0x0a
      0009F7 00                   10375 	.db 0x00
                                  10376 	.area CSEG    (CODE)
                                  10377 	.area CONST   (CODE)
      0009F8                      10378 ___str_59:
      0009F8 31 32 30 30          10379 	.ascii "1200"
      0009FC 0A                   10380 	.db 0x0a
      0009FD 00                   10381 	.db 0x00
                                  10382 	.area CSEG    (CODE)
                                  10383 	.area CONST   (CODE)
      0009FE                      10384 ___str_60:
      0009FE 32 34 30 30          10385 	.ascii "2400"
      000A02 0A                   10386 	.db 0x0a
      000A03 00                   10387 	.db 0x00
                                  10388 	.area CSEG    (CODE)
                                  10389 	.area CONST   (CODE)
      000A04                      10390 ___str_61:
      000A04 34 38 30 30          10391 	.ascii "4800"
      000A08 0A                   10392 	.db 0x0a
      000A09 00                   10393 	.db 0x00
                                  10394 	.area CSEG    (CODE)
                                  10395 	.area CONST   (CODE)
      000A0A                      10396 ___str_62:
      000A0A 39 36 30 30          10397 	.ascii "9600"
      000A0E 0A                   10398 	.db 0x0a
      000A0F 00                   10399 	.db 0x00
                                  10400 	.area CSEG    (CODE)
                                  10401 	.area CONST   (CODE)
      000A10                      10402 ___str_63:
      000A10 0A                   10403 	.db 0x0a
      000A11 20 20 20 5F          10404 	.ascii "   _"
      000A15 00                   10405 	.db 0x00
                                  10406 	.area CSEG    (CODE)
                                  10407 	.area CONST   (CODE)
      000A16                      10408 ___str_64:
      000A16 31                   10409 	.ascii "1"
      000A17 0A                   10410 	.db 0x0a
      000A18 00                   10411 	.db 0x00
                                  10412 	.area CSEG    (CODE)
                                  10413 	.area CONST   (CODE)
      000A19                      10414 ___str_65:
      000A19 32                   10415 	.ascii "2"
      000A1A 0A                   10416 	.db 0x0a
      000A1B 00                   10417 	.db 0x00
                                  10418 	.area CSEG    (CODE)
                                  10419 	.area CONST   (CODE)
      000A1C                      10420 ___str_66:
      000A1C 33                   10421 	.ascii "3"
      000A1D 0A                   10422 	.db 0x0a
      000A1E 00                   10423 	.db 0x00
                                  10424 	.area CSEG    (CODE)
                                  10425 	.area CONST   (CODE)
      000A1F                      10426 ___str_67:
      000A1F 34                   10427 	.ascii "4"
      000A20 0A                   10428 	.db 0x0a
      000A21 00                   10429 	.db 0x00
                                  10430 	.area CSEG    (CODE)
                                  10431 	.area CONST   (CODE)
      000A22                      10432 ___str_68:
      000A22 35                   10433 	.ascii "5"
      000A23 0A                   10434 	.db 0x0a
      000A24 00                   10435 	.db 0x00
                                  10436 	.area CSEG    (CODE)
                                  10437 	.area CONST   (CODE)
      000A25                      10438 ___str_69:
      000A25 58                   10439 	.ascii "X"
      000A26 0A                   10440 	.db 0x0a
      000A27 00                   10441 	.db 0x00
                                  10442 	.area CSEG    (CODE)
                                  10443 	.area CONST   (CODE)
      000A28                      10444 ___str_70:
      000A28 0A                   10445 	.db 0x0a
      000A29 44 61 74 61 20 42 69 10446 	.ascii "Data Bits"
             74 73
      000A32 0A                   10447 	.db 0x0a
      000A33 0A                   10448 	.db 0x0a
      000A34 00                   10449 	.db 0x00
                                  10450 	.area CSEG    (CODE)
                                  10451 	.area CONST   (CODE)
      000A35                      10452 ___str_71:
      000A35 28 31 29 20 38       10453 	.ascii "(1) 8"
      000A3A 0A                   10454 	.db 0x0a
      000A3B 00                   10455 	.db 0x00
                                  10456 	.area CSEG    (CODE)
                                  10457 	.area CONST   (CODE)
      000A3C                      10458 ___str_72:
      000A3C 28 32 29 20 39       10459 	.ascii "(2) 9"
      000A41 0A                   10460 	.db 0x0a
      000A42 00                   10461 	.db 0x00
                                  10462 	.area CSEG    (CODE)
                                  10463 	.area CONST   (CODE)
      000A43                      10464 ___str_73:
      000A43 0A                   10465 	.db 0x0a
      000A44 43 75 72 72 65 6E 74 10466 	.ascii "Current: "
             3A 20
      000A4D 00                   10467 	.db 0x00
                                  10468 	.area CSEG    (CODE)
                                  10469 	.area CONST   (CODE)
      000A4E                      10470 ___str_74:
      000A4E 38                   10471 	.ascii "8"
      000A4F 0A                   10472 	.db 0x0a
      000A50 00                   10473 	.db 0x00
                                  10474 	.area CSEG    (CODE)
                                  10475 	.area CONST   (CODE)
      000A51                      10476 ___str_75:
      000A51 39                   10477 	.ascii "9"
      000A52 0A                   10478 	.db 0x0a
      000A53 00                   10479 	.db 0x00
                                  10480 	.area CSEG    (CODE)
                                  10481 	.area CONST   (CODE)
      000A54                      10482 ___str_76:
      000A54 0A                   10483 	.db 0x0a
      000A55 50 61 72 69 74 79    10484 	.ascii "Parity"
      000A5B 0A                   10485 	.db 0x0a
      000A5C 0A                   10486 	.db 0x0a
      000A5D 00                   10487 	.db 0x00
                                  10488 	.area CSEG    (CODE)
                                  10489 	.area CONST   (CODE)
      000A5E                      10490 ___str_77:
      000A5E 28 31 29 20 45 76 65 10491 	.ascii "(1) Even"
             6E
      000A66 0A                   10492 	.db 0x0a
      000A67 00                   10493 	.db 0x00
                                  10494 	.area CSEG    (CODE)
                                  10495 	.area CONST   (CODE)
      000A68                      10496 ___str_78:
      000A68 28 32 29 20 4F 64 64 10497 	.ascii "(2) Odd"
      000A6F 0A                   10498 	.db 0x0a
      000A70 00                   10499 	.db 0x00
                                  10500 	.area CSEG    (CODE)
                                  10501 	.area CONST   (CODE)
      000A71                      10502 ___str_79:
      000A71 28 33 29 20 4E 6F 6E 10503 	.ascii "(3) None"
             65
      000A79 0A                   10504 	.db 0x0a
      000A7A 00                   10505 	.db 0x00
                                  10506 	.area CSEG    (CODE)
                                  10507 	.area CONST   (CODE)
      000A7B                      10508 ___str_80:
      000A7B 45 76 65 6E          10509 	.ascii "Even"
      000A7F 0A                   10510 	.db 0x0a
      000A80 00                   10511 	.db 0x00
                                  10512 	.area CSEG    (CODE)
                                  10513 	.area CONST   (CODE)
      000A81                      10514 ___str_81:
      000A81 4F 64 64             10515 	.ascii "Odd"
      000A84 0A                   10516 	.db 0x0a
      000A85 00                   10517 	.db 0x00
                                  10518 	.area CSEG    (CODE)
                                  10519 	.area CONST   (CODE)
      000A86                      10520 ___str_82:
      000A86 4E 6F 6E 65          10521 	.ascii "None"
      000A8A 0A                   10522 	.db 0x0a
      000A8B 00                   10523 	.db 0x00
                                  10524 	.area CSEG    (CODE)
                                  10525 	.area CONST   (CODE)
      000A8C                      10526 ___str_83:
      000A8C 0A                   10527 	.db 0x0a
      000A8D 45 6E 74 65 72       10528 	.ascii "Enter"
      000A92 0A                   10529 	.db 0x0a
      000A93 63 68 61 72 61 63 74 10530 	.ascii "character"
             65 72
      000A9C 0A                   10531 	.db 0x0a
      000A9D 74 6F 20 73 65 6E 64 10532 	.ascii "to send:"
             3A
      000AA5 0A                   10533 	.db 0x0a
      000AA6 0A                   10534 	.db 0x0a
      000AA7 20 20 20 5F          10535 	.ascii "   _"
      000AAB 00                   10536 	.db 0x00
                                  10537 	.area CSEG    (CODE)
                                  10538 	.area CONST   (CODE)
      000AAC                      10539 ___str_84:
      000AAC 0A                   10540 	.db 0x0a
      000AAD 28 31 29 20 44 61 74 10541 	.ascii "(1) Data Rate"
             61 20 52 61 74 65
      000ABA 00                   10542 	.db 0x00
                                  10543 	.area CSEG    (CODE)
                                  10544 	.area CONST   (CODE)
      000ABB                      10545 ___str_85:
      000ABB 0A                   10546 	.db 0x0a
      000ABC 28 32 29 20 23 20 6F 10547 	.ascii "(2) # of Data"
             66 20 44 61 74 61
      000AC9 0A                   10548 	.db 0x0a
      000ACA 20 20 20 20 42 69 74 10549 	.ascii "    Bits"
             73
      000AD2 00                   10550 	.db 0x00
                                  10551 	.area CSEG    (CODE)
                                  10552 	.area CONST   (CODE)
      000AD3                      10553 ___str_86:
      000AD3 0A                   10554 	.db 0x0a
      000AD4 28 33 29 20 50 61 72 10555 	.ascii "(3) Parity"
             69 74 79
      000ADE 00                   10556 	.db 0x00
                                  10557 	.area CSEG    (CODE)
                                  10558 	.area CONST   (CODE)
      000ADF                      10559 ___str_87:
      000ADF 0A                   10560 	.db 0x0a
      000AE0 28 34 29 20 53 65 6E 10561 	.ascii "(4) Send Data"
             64 20 44 61 74 61
      000AED 00                   10562 	.db 0x00
                                  10563 	.area CSEG    (CODE)
                                  10564 	.area CONST   (CODE)
      000AEE                      10565 ___str_88:
      000AEE 0A                   10566 	.db 0x0a
      000AEF 28 45 29 20 45 6E 64 10567 	.ascii "(E) End"
      000AF6 0A                   10568 	.db 0x0a
      000AF7 00                   10569 	.db 0x00
                                  10570 	.area CSEG    (CODE)
                                  10571 	.area CONST   (CODE)
      000AF8                      10572 ___str_89:
      000AF8 0A                   10573 	.db 0x0a
      000AF9 0A                   10574 	.db 0x0a
      000AFA 0A                   10575 	.db 0x0a
      000AFB 42 61 75 64 3A 20 20 10576 	.ascii "Baud:   "
             20
      000B03 00                   10577 	.db 0x00
                                  10578 	.area CSEG    (CODE)
                                  10579 	.area CONST   (CODE)
      000B04                      10580 ___str_90:
      000B04 31 39 32 30 30       10581 	.ascii "19200"
      000B09 00                   10582 	.db 0x00
                                  10583 	.area CSEG    (CODE)
                                  10584 	.area CONST   (CODE)
      000B0A                      10585 ___str_91:
      000B0A 49 6E 76 61 6C 69 64 10586 	.ascii "Invalid"
      000B11 00                   10587 	.db 0x00
                                  10588 	.area CSEG    (CODE)
                                  10589 	.area CONST   (CODE)
      000B12                      10590 ___str_92:
      000B12 31 32 30 30          10591 	.ascii "1200"
      000B16 00                   10592 	.db 0x00
                                  10593 	.area CSEG    (CODE)
                                  10594 	.area CONST   (CODE)
      000B17                      10595 ___str_93:
      000B17 32 34 30 30          10596 	.ascii "2400"
      000B1B 00                   10597 	.db 0x00
                                  10598 	.area CSEG    (CODE)
                                  10599 	.area CONST   (CODE)
      000B1C                      10600 ___str_94:
      000B1C 34 38 30 30          10601 	.ascii "4800"
      000B20 00                   10602 	.db 0x00
                                  10603 	.area CSEG    (CODE)
                                  10604 	.area CONST   (CODE)
      000B21                      10605 ___str_95:
      000B21 39 36 30 30          10606 	.ascii "9600"
      000B25 00                   10607 	.db 0x00
                                  10608 	.area CSEG    (CODE)
                                  10609 	.area CONST   (CODE)
      000B26                      10610 ___str_96:
      000B26 0A                   10611 	.db 0x0a
      000B27 42 69 74 73 3A 20 20 10612 	.ascii "Bits:   "
             20
      000B2F 00                   10613 	.db 0x00
                                  10614 	.area CSEG    (CODE)
                                  10615 	.area CONST   (CODE)
      000B30                      10616 ___str_97:
      000B30 38                   10617 	.ascii "8"
      000B31 00                   10618 	.db 0x00
                                  10619 	.area CSEG    (CODE)
                                  10620 	.area CONST   (CODE)
      000B32                      10621 ___str_98:
      000B32 39                   10622 	.ascii "9"
      000B33 00                   10623 	.db 0x00
                                  10624 	.area CSEG    (CODE)
                                  10625 	.area CONST   (CODE)
      000B34                      10626 ___str_99:
      000B34 0A                   10627 	.db 0x0a
      000B35 50 61 72 69 74 79 3A 10628 	.ascii "Parity: "
             20
      000B3D 00                   10629 	.db 0x00
                                  10630 	.area CSEG    (CODE)
                                  10631 	.area CONST   (CODE)
      000B3E                      10632 ___str_100:
      000B3E 45 76 65 6E          10633 	.ascii "Even"
      000B42 00                   10634 	.db 0x00
                                  10635 	.area CSEG    (CODE)
                                  10636 	.area CONST   (CODE)
      000B43                      10637 ___str_101:
      000B43 4F 64 64             10638 	.ascii "Odd"
      000B46 00                   10639 	.db 0x00
                                  10640 	.area CSEG    (CODE)
                                  10641 	.area CONST   (CODE)
      000B47                      10642 ___str_102:
      000B47 4E 6F 6E 65          10643 	.ascii "None"
      000B4B 00                   10644 	.db 0x00
                                  10645 	.area CSEG    (CODE)
                                  10646 	.area CONST   (CODE)
      000B4C                      10647 ___str_103:
      000B4C 20 20 20 43 61 6D 65 10648 	.ascii "   Cameron"
             72 6F 6E
      000B56 0A                   10649 	.db 0x0a
      000B57 20 20 20 42 69 6E 69 10650 	.ascii "   Biniamow"
             61 6D 6F 77
      000B62 0A                   10651 	.db 0x0a
      000B63 00                   10652 	.db 0x00
                                  10653 	.area CSEG    (CODE)
                                  10654 	.area CONST   (CODE)
      000B64                      10655 ___str_104:
      000B64 20 20 45 43 45 4E 2D 10656 	.ascii "  ECEN-4330"
             34 33 33 30
      000B6F 0A                   10657 	.db 0x0a
      000B70 0A                   10658 	.db 0x0a
      000B71 00                   10659 	.db 0x00
                                  10660 	.area CSEG    (CODE)
                                  10661 	.area CONST   (CODE)
      000B72                      10662 ___str_105:
      000B72 28 41 29 20 52 41 4D 10663 	.ascii "(A) RAM CHECK"
             20 43 48 45 43 4B
      000B7F 0A                   10664 	.db 0x0a
      000B80 00                   10665 	.db 0x00
                                  10666 	.area CSEG    (CODE)
                                  10667 	.area CONST   (CODE)
      000B81                      10668 ___str_106:
      000B81 28 42 29 20 4D 4F 56 10669 	.ascii "(B) MOVE"
             45
      000B89 0A                   10670 	.db 0x0a
      000B8A 00                   10671 	.db 0x00
                                  10672 	.area CSEG    (CODE)
                                  10673 	.area CONST   (CODE)
      000B8B                      10674 ___str_107:
      000B8B 28 43 29 20 43 4F 55 10675 	.ascii "(C) COUNT"
             4E 54
      000B94 0A                   10676 	.db 0x0a
      000B95 00                   10677 	.db 0x00
                                  10678 	.area CSEG    (CODE)
                                  10679 	.area CONST   (CODE)
      000B96                      10680 ___str_108:
      000B96 28 44 29 20 44 55 4D 10681 	.ascii "(D) DUMP"
             50
      000B9E 0A                   10682 	.db 0x0a
      000B9F 00                   10683 	.db 0x00
                                  10684 	.area CSEG    (CODE)
                                  10685 	.area CONST   (CODE)
      000BA0                      10686 ___str_109:
      000BA0 28 45 29 20 45 44 49 10687 	.ascii "(E) EDIT"
             54
      000BA8 0A                   10688 	.db 0x0a
      000BA9 00                   10689 	.db 0x00
                                  10690 	.area CSEG    (CODE)
                                  10691 	.area CONST   (CODE)
      000BAA                      10692 ___str_110:
      000BAA 28 46 29 20 46 49 4E 10693 	.ascii "(F) FIND"
             44
      000BB2 0A                   10694 	.db 0x0a
      000BB3 00                   10695 	.db 0x00
                                  10696 	.area CSEG    (CODE)
                                  10697 	.area CONST   (CODE)
      000BB4                      10698 ___str_111:
      000BB4 28 31 29 20 55 41 52 10699 	.ascii "(1) UART"
             54
      000BBC 0A                   10700 	.db 0x0a
      000BBD 00                   10701 	.db 0x00
                                  10702 	.area CSEG    (CODE)
                                  10703 	.area CONST   (CODE)
      000BBE                      10704 ___str_112:
      000BBE 53 70 72 69 6E 67 20 10705 	.ascii "Spring 2021"
             32 30 32 31
      000BC9 00                   10706 	.db 0x00
                                  10707 	.area CSEG    (CODE)
                                  10708 	.area XINIT   (CODE)
                                  10709 	.area CABS    (ABS,CODE)
