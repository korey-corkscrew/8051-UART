                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.9 #12669 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4330lab7
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _RAMwrite_PARM_2
                                     12 	.globl _setAddress_PARM_4
                                     13 	.globl _setAddress_PARM_3
                                     14 	.globl _setAddress_PARM_2
                                     15 	.globl _setTextColor_PARM_2
                                     16 	.globl _setCursor_PARM_2
                                     17 	.globl _rtcCmd_PARM_2
                                     18 	.globl _writeRegister16_PARM_2
                                     19 	.globl _writeRegister8_PARM_2
                                     20 	.globl _keypad
                                     21 	.globl _main
                                     22 	.globl _UART
                                     23 	.globl _UART_send
                                     24 	.globl _UART_parity
                                     25 	.globl _UART_dataBits
                                     26 	.globl _UART_dataRate
                                     27 	.globl _resetLCD1
                                     28 	.globl _FIND
                                     29 	.globl _EDIT
                                     30 	.globl _EDIT_display
                                     31 	.globl _DUMP
                                     32 	.globl _DUMP_display
                                     33 	.globl _COUNT
                                     34 	.globl _MOVE
                                     35 	.globl _RAM_CHECK
                                     36 	.globl _inputDataSize
                                     37 	.globl _inputDataType
                                     38 	.globl _inputRead8
                                     39 	.globl _inputRead16
                                     40 	.globl _invalidInput
                                     41 	.globl _RAMread
                                     42 	.globl _RAMwrite
                                     43 	.globl _HEXtoASCII_16write
                                     44 	.globl _HEXtoASCII
                                     45 	.globl _ASCIItoHEX
                                     46 	.globl _drawChar
                                     47 	.globl _setRotation
                                     48 	.globl _UART_transmit
                                     49 	.globl _UART_Init
                                     50 	.globl _ISR_receive
                                     51 	.globl _CY
                                     52 	.globl _AC
                                     53 	.globl _F0
                                     54 	.globl _RS1
                                     55 	.globl _RS0
                                     56 	.globl _OV
                                     57 	.globl _FL
                                     58 	.globl _P
                                     59 	.globl _TF2
                                     60 	.globl _EXF2
                                     61 	.globl _RCLK
                                     62 	.globl _TCLK
                                     63 	.globl _EXEN2
                                     64 	.globl _TR2
                                     65 	.globl _C_T2
                                     66 	.globl _CP_RL2
                                     67 	.globl _T2CON_7
                                     68 	.globl _T2CON_6
                                     69 	.globl _T2CON_5
                                     70 	.globl _T2CON_4
                                     71 	.globl _T2CON_3
                                     72 	.globl _T2CON_2
                                     73 	.globl _T2CON_1
                                     74 	.globl _T2CON_0
                                     75 	.globl _PT2
                                     76 	.globl _PS
                                     77 	.globl _PT1
                                     78 	.globl _PX1
                                     79 	.globl _PT0
                                     80 	.globl _PX0
                                     81 	.globl _RD
                                     82 	.globl _WR
                                     83 	.globl _T1
                                     84 	.globl _T0
                                     85 	.globl _INT1
                                     86 	.globl _INT0
                                     87 	.globl _TXD
                                     88 	.globl _RXD
                                     89 	.globl _P3_7
                                     90 	.globl _P3_6
                                     91 	.globl _P3_5
                                     92 	.globl _P3_4
                                     93 	.globl _P3_3
                                     94 	.globl _P3_2
                                     95 	.globl _P3_1
                                     96 	.globl _P3_0
                                     97 	.globl _EA
                                     98 	.globl _ET2
                                     99 	.globl _ES
                                    100 	.globl _ET1
                                    101 	.globl _EX1
                                    102 	.globl _ET0
                                    103 	.globl _EX0
                                    104 	.globl _P2_7
                                    105 	.globl _P2_6
                                    106 	.globl _P2_5
                                    107 	.globl _P2_4
                                    108 	.globl _P2_3
                                    109 	.globl _P2_2
                                    110 	.globl _P2_1
                                    111 	.globl _P2_0
                                    112 	.globl _SM0
                                    113 	.globl _SM1
                                    114 	.globl _SM2
                                    115 	.globl _REN
                                    116 	.globl _TB8
                                    117 	.globl _RB8
                                    118 	.globl _TI
                                    119 	.globl _RI
                                    120 	.globl _T2EX
                                    121 	.globl _T2
                                    122 	.globl _P1_7
                                    123 	.globl _P1_6
                                    124 	.globl _P1_5
                                    125 	.globl _P1_4
                                    126 	.globl _P1_3
                                    127 	.globl _P1_2
                                    128 	.globl _P1_1
                                    129 	.globl _P1_0
                                    130 	.globl _TF1
                                    131 	.globl _TR1
                                    132 	.globl _TF0
                                    133 	.globl _TR0
                                    134 	.globl _IE1
                                    135 	.globl _IT1
                                    136 	.globl _IE0
                                    137 	.globl _IT0
                                    138 	.globl _P0_7
                                    139 	.globl _P0_6
                                    140 	.globl _P0_5
                                    141 	.globl _P0_4
                                    142 	.globl _P0_3
                                    143 	.globl _P0_2
                                    144 	.globl _P0_1
                                    145 	.globl _P0_0
                                    146 	.globl _B
                                    147 	.globl _A
                                    148 	.globl _ACC
                                    149 	.globl _PSW
                                    150 	.globl _TH2
                                    151 	.globl _TL2
                                    152 	.globl _RCAP2H
                                    153 	.globl _RCAP2L
                                    154 	.globl _T2MOD
                                    155 	.globl _T2CON
                                    156 	.globl _IP
                                    157 	.globl _P3
                                    158 	.globl _IE
                                    159 	.globl _P2
                                    160 	.globl _SBUF
                                    161 	.globl _SCON
                                    162 	.globl _P1
                                    163 	.globl _TH1
                                    164 	.globl _TH0
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TMOD
                                    168 	.globl _TCON
                                    169 	.globl _PCON
                                    170 	.globl _DPH
                                    171 	.globl _DPL
                                    172 	.globl _SP
                                    173 	.globl _P0
                                    174 	.globl _drawChar_PARM_6
                                    175 	.globl _drawChar_PARM_5
                                    176 	.globl _drawChar_PARM_4
                                    177 	.globl _drawChar_PARM_3
                                    178 	.globl _drawChar_PARM_2
                                    179 	.globl _fillRect_PARM_5
                                    180 	.globl _fillRect_PARM_4
                                    181 	.globl _fillRect_PARM_3
                                    182 	.globl _fillRect_PARM_2
                                    183 	.globl _drawPixel_PARM_3
                                    184 	.globl _drawPixel_PARM_2
                                    185 	.globl _rtcWrite_PARM_2
                                    186 	.globl _received_flag
                                    187 	.globl _received_byte
                                    188 	.globl _parity
                                    189 	.globl _dataBits
                                    190 	.globl _dataRate
                                    191 	.globl _ts
                                    192 	.globl _y
                                    193 	.globl _x
                                    194 	.globl _textSizeHold
                                    195 	.globl _yCursorHold
                                    196 	.globl _xCursorHold
                                    197 	.globl _endAddrCalc
                                    198 	.globl _count
                                    199 	.globl _ASCII
                                    200 	.globl _byte1
                                    201 	.globl _byte
                                    202 	.globl _currAddr1
                                    203 	.globl _currAddr0
                                    204 	.globl _addr3
                                    205 	.globl _addr2
                                    206 	.globl _addr1
                                    207 	.globl _addr0
                                    208 	.globl _data
                                    209 	.globl _scrollEnd
                                    210 	.globl _dataEnd
                                    211 	.globl _validInput
                                    212 	.globl _dataSize
                                    213 	.globl _dataType
                                    214 	.globl _input8
                                    215 	.globl _input16
                                    216 	.globl _key
                                    217 	.globl __height
                                    218 	.globl __width
                                    219 	.globl _textbgcolor
                                    220 	.globl _textcolor
                                    221 	.globl _rotation
                                    222 	.globl _textsize
                                    223 	.globl _cursor_y
                                    224 	.globl _cursor_x
                                    225 	.globl _read_ram_address
                                    226 	.globl _seg7_address
                                    227 	.globl _lcd_address
                                    228 	.globl _rowloc
                                    229 	.globl _colloc
                                    230 	.globl _delay
                                    231 	.globl _writeRegister8
                                    232 	.globl _writeRegister16
                                    233 	.globl _rtcInit
                                    234 	.globl _rtcBusy
                                    235 	.globl _rtcCmd
                                    236 	.globl _rtcWrite
                                    237 	.globl _rtcRead
                                    238 	.globl _rtcPrint
                                    239 	.globl _setCursor
                                    240 	.globl _setTextColor
                                    241 	.globl _setTextSize
                                    242 	.globl _setAddress
                                    243 	.globl _TFT_LCD_INIT
                                    244 	.globl _drawPixel
                                    245 	.globl _fillRect
                                    246 	.globl _fillScreen
                                    247 	.globl _write
                                    248 	.globl _LCD_string_write
                                    249 	.globl _keyDetect
                                    250 	.globl _HEXtoASCII_8write
                                    251 	.globl _testRAM
                                    252 	.globl _resetLCD
                                    253 	.globl _FIND_display
                                    254 	.globl _LCD_mainMenu
                                    255 ;--------------------------------------------------------
                                    256 ; special function registers
                                    257 ;--------------------------------------------------------
                                    258 	.area RSEG    (ABS,DATA)
      000000                        259 	.org 0x0000
                           000080   260 _P0	=	0x0080
                           000081   261 _SP	=	0x0081
                           000082   262 _DPL	=	0x0082
                           000083   263 _DPH	=	0x0083
                           000087   264 _PCON	=	0x0087
                           000088   265 _TCON	=	0x0088
                           000089   266 _TMOD	=	0x0089
                           00008A   267 _TL0	=	0x008a
                           00008B   268 _TL1	=	0x008b
                           00008C   269 _TH0	=	0x008c
                           00008D   270 _TH1	=	0x008d
                           000090   271 _P1	=	0x0090
                           000098   272 _SCON	=	0x0098
                           000099   273 _SBUF	=	0x0099
                           0000A0   274 _P2	=	0x00a0
                           0000A8   275 _IE	=	0x00a8
                           0000B0   276 _P3	=	0x00b0
                           0000B8   277 _IP	=	0x00b8
                           0000C8   278 _T2CON	=	0x00c8
                           0000C9   279 _T2MOD	=	0x00c9
                           0000CA   280 _RCAP2L	=	0x00ca
                           0000CB   281 _RCAP2H	=	0x00cb
                           0000CC   282 _TL2	=	0x00cc
                           0000CD   283 _TH2	=	0x00cd
                           0000D0   284 _PSW	=	0x00d0
                           0000E0   285 _ACC	=	0x00e0
                           0000E0   286 _A	=	0x00e0
                           0000F0   287 _B	=	0x00f0
                                    288 ;--------------------------------------------------------
                                    289 ; special function bits
                                    290 ;--------------------------------------------------------
                                    291 	.area RSEG    (ABS,DATA)
      000000                        292 	.org 0x0000
                           000080   293 _P0_0	=	0x0080
                           000081   294 _P0_1	=	0x0081
                           000082   295 _P0_2	=	0x0082
                           000083   296 _P0_3	=	0x0083
                           000084   297 _P0_4	=	0x0084
                           000085   298 _P0_5	=	0x0085
                           000086   299 _P0_6	=	0x0086
                           000087   300 _P0_7	=	0x0087
                           000088   301 _IT0	=	0x0088
                           000089   302 _IE0	=	0x0089
                           00008A   303 _IT1	=	0x008a
                           00008B   304 _IE1	=	0x008b
                           00008C   305 _TR0	=	0x008c
                           00008D   306 _TF0	=	0x008d
                           00008E   307 _TR1	=	0x008e
                           00008F   308 _TF1	=	0x008f
                           000090   309 _P1_0	=	0x0090
                           000091   310 _P1_1	=	0x0091
                           000092   311 _P1_2	=	0x0092
                           000093   312 _P1_3	=	0x0093
                           000094   313 _P1_4	=	0x0094
                           000095   314 _P1_5	=	0x0095
                           000096   315 _P1_6	=	0x0096
                           000097   316 _P1_7	=	0x0097
                           000090   317 _T2	=	0x0090
                           000091   318 _T2EX	=	0x0091
                           000098   319 _RI	=	0x0098
                           000099   320 _TI	=	0x0099
                           00009A   321 _RB8	=	0x009a
                           00009B   322 _TB8	=	0x009b
                           00009C   323 _REN	=	0x009c
                           00009D   324 _SM2	=	0x009d
                           00009E   325 _SM1	=	0x009e
                           00009F   326 _SM0	=	0x009f
                           0000A0   327 _P2_0	=	0x00a0
                           0000A1   328 _P2_1	=	0x00a1
                           0000A2   329 _P2_2	=	0x00a2
                           0000A3   330 _P2_3	=	0x00a3
                           0000A4   331 _P2_4	=	0x00a4
                           0000A5   332 _P2_5	=	0x00a5
                           0000A6   333 _P2_6	=	0x00a6
                           0000A7   334 _P2_7	=	0x00a7
                           0000A8   335 _EX0	=	0x00a8
                           0000A9   336 _ET0	=	0x00a9
                           0000AA   337 _EX1	=	0x00aa
                           0000AB   338 _ET1	=	0x00ab
                           0000AC   339 _ES	=	0x00ac
                           0000AD   340 _ET2	=	0x00ad
                           0000AF   341 _EA	=	0x00af
                           0000B0   342 _P3_0	=	0x00b0
                           0000B1   343 _P3_1	=	0x00b1
                           0000B2   344 _P3_2	=	0x00b2
                           0000B3   345 _P3_3	=	0x00b3
                           0000B4   346 _P3_4	=	0x00b4
                           0000B5   347 _P3_5	=	0x00b5
                           0000B6   348 _P3_6	=	0x00b6
                           0000B7   349 _P3_7	=	0x00b7
                           0000B0   350 _RXD	=	0x00b0
                           0000B1   351 _TXD	=	0x00b1
                           0000B2   352 _INT0	=	0x00b2
                           0000B3   353 _INT1	=	0x00b3
                           0000B4   354 _T0	=	0x00b4
                           0000B5   355 _T1	=	0x00b5
                           0000B6   356 _WR	=	0x00b6
                           0000B7   357 _RD	=	0x00b7
                           0000B8   358 _PX0	=	0x00b8
                           0000B9   359 _PT0	=	0x00b9
                           0000BA   360 _PX1	=	0x00ba
                           0000BB   361 _PT1	=	0x00bb
                           0000BC   362 _PS	=	0x00bc
                           0000BD   363 _PT2	=	0x00bd
                           0000C8   364 _T2CON_0	=	0x00c8
                           0000C9   365 _T2CON_1	=	0x00c9
                           0000CA   366 _T2CON_2	=	0x00ca
                           0000CB   367 _T2CON_3	=	0x00cb
                           0000CC   368 _T2CON_4	=	0x00cc
                           0000CD   369 _T2CON_5	=	0x00cd
                           0000CE   370 _T2CON_6	=	0x00ce
                           0000CF   371 _T2CON_7	=	0x00cf
                           0000C8   372 _CP_RL2	=	0x00c8
                           0000C9   373 _C_T2	=	0x00c9
                           0000CA   374 _TR2	=	0x00ca
                           0000CB   375 _EXEN2	=	0x00cb
                           0000CC   376 _TCLK	=	0x00cc
                           0000CD   377 _RCLK	=	0x00cd
                           0000CE   378 _EXF2	=	0x00ce
                           0000CF   379 _TF2	=	0x00cf
                           0000D0   380 _P	=	0x00d0
                           0000D1   381 _FL	=	0x00d1
                           0000D2   382 _OV	=	0x00d2
                           0000D3   383 _RS0	=	0x00d3
                           0000D4   384 _RS1	=	0x00d4
                           0000D5   385 _F0	=	0x00d5
                           0000D6   386 _AC	=	0x00d6
                           0000D7   387 _CY	=	0x00d7
                                    388 ;--------------------------------------------------------
                                    389 ; overlayable register banks
                                    390 ;--------------------------------------------------------
                                    391 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        392 	.ds 8
                                    393 ;--------------------------------------------------------
                                    394 ; overlayable bit register bank
                                    395 ;--------------------------------------------------------
                                    396 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        397 bits:
      000000                        398 	.ds 1
                           008000   399 	b0 = bits[0]
                           008100   400 	b1 = bits[1]
                           008200   401 	b2 = bits[2]
                           008300   402 	b3 = bits[3]
                           008400   403 	b4 = bits[4]
                           008500   404 	b5 = bits[5]
                           008600   405 	b6 = bits[6]
                           008700   406 	b7 = bits[7]
                                    407 ;--------------------------------------------------------
                                    408 ; internal ram data
                                    409 ;--------------------------------------------------------
                                    410 	.area DSEG    (DATA)
      000000                        411 _colloc::
      000000                        412 	.ds 1
      000001                        413 _rowloc::
      000001                        414 	.ds 1
      000002                        415 _lcd_address::
      000002                        416 	.ds 2
      000004                        417 _seg7_address::
      000004                        418 	.ds 2
      000006                        419 _read_ram_address::
      000006                        420 	.ds 2
      000008                        421 _cursor_x::
      000008                        422 	.ds 2
      00000A                        423 _cursor_y::
      00000A                        424 	.ds 2
      00000C                        425 _textsize::
      00000C                        426 	.ds 1
      00000D                        427 _rotation::
      00000D                        428 	.ds 1
      00000E                        429 _textcolor::
      00000E                        430 	.ds 2
      000010                        431 _textbgcolor::
      000010                        432 	.ds 2
      000012                        433 __width::
      000012                        434 	.ds 2
      000014                        435 __height::
      000014                        436 	.ds 2
      000016                        437 _key::
      000016                        438 	.ds 1
      000017                        439 _input16::
      000017                        440 	.ds 2
      000019                        441 _input8::
      000019                        442 	.ds 1
      00001A                        443 _dataType::
      00001A                        444 	.ds 1
      00001B                        445 _dataSize::
      00001B                        446 	.ds 2
      00001D                        447 _validInput::
      00001D                        448 	.ds 1
      00001E                        449 _dataEnd::
      00001E                        450 	.ds 1
      00001F                        451 _scrollEnd::
      00001F                        452 	.ds 1
      000020                        453 _data::
      000020                        454 	.ds 1
      000021                        455 _addr0::
      000021                        456 	.ds 2
      000023                        457 _addr1::
      000023                        458 	.ds 2
      000025                        459 _addr2::
      000025                        460 	.ds 2
      000027                        461 _addr3::
      000027                        462 	.ds 2
      000029                        463 _currAddr0::
      000029                        464 	.ds 2
      00002B                        465 _currAddr1::
      00002B                        466 	.ds 2
      00002D                        467 _byte::
      00002D                        468 	.ds 2
      00002F                        469 _byte1::
      00002F                        470 	.ds 2
      000031                        471 _ASCII::
      000031                        472 	.ds 1
      000032                        473 _count::
      000032                        474 	.ds 2
      000034                        475 _endAddrCalc::
      000034                        476 	.ds 4
      000038                        477 _xCursorHold::
      000038                        478 	.ds 1
      000039                        479 _yCursorHold::
      000039                        480 	.ds 1
      00003A                        481 _textSizeHold::
      00003A                        482 	.ds 1
      00003B                        483 _x::
      00003B                        484 	.ds 1
      00003C                        485 _y::
      00003C                        486 	.ds 1
      00003D                        487 _ts::
      00003D                        488 	.ds 1
      00003E                        489 _dataRate::
      00003E                        490 	.ds 1
      00003F                        491 _dataBits::
      00003F                        492 	.ds 1
      000040                        493 _parity::
      000040                        494 	.ds 1
      000041                        495 _received_byte::
      000041                        496 	.ds 1
      000042                        497 _received_flag::
      000042                        498 	.ds 1
      000043                        499 _rtcWrite_PARM_2:
      000043                        500 	.ds 1
      000044                        501 _drawPixel_PARM_2:
      000044                        502 	.ds 2
      000046                        503 _drawPixel_PARM_3:
      000046                        504 	.ds 2
      000048                        505 _fillRect_PARM_2:
      000048                        506 	.ds 2
      00004A                        507 _fillRect_PARM_3:
      00004A                        508 	.ds 2
      00004C                        509 _fillRect_PARM_4:
      00004C                        510 	.ds 2
      00004E                        511 _fillRect_PARM_5:
      00004E                        512 	.ds 2
      000050                        513 _drawChar_PARM_2:
      000050                        514 	.ds 2
      000052                        515 _drawChar_PARM_3:
      000052                        516 	.ds 1
      000053                        517 _drawChar_PARM_4:
      000053                        518 	.ds 2
      000055                        519 _drawChar_PARM_5:
      000055                        520 	.ds 2
      000057                        521 _drawChar_PARM_6:
      000057                        522 	.ds 1
      000058                        523 _drawChar_x_65536_312:
      000058                        524 	.ds 2
      00005A                        525 _drawChar_line_196608_316:
      00005A                        526 	.ds 1
      00005B                        527 _drawChar_sloc1_1_0:
      00005B                        528 	.ds 2
                                    529 ;--------------------------------------------------------
                                    530 ; overlayable items in internal ram 
                                    531 ;--------------------------------------------------------
                                    532 	.area	OSEG    (OVR,DATA)
                                    533 	.area	OSEG    (OVR,DATA)
      000000                        534 _writeRegister8_PARM_2:
      000000                        535 	.ds 1
                                    536 	.area	OSEG    (OVR,DATA)
      000000                        537 _writeRegister16_PARM_2:
      000000                        538 	.ds 2
                                    539 	.area	OSEG    (OVR,DATA)
                                    540 	.area	OSEG    (OVR,DATA)
      000000                        541 _rtcCmd_PARM_2:
      000000                        542 	.ds 1
                                    543 	.area	OSEG    (OVR,DATA)
      000000                        544 _setCursor_PARM_2:
      000000                        545 	.ds 2
                                    546 	.area	OSEG    (OVR,DATA)
      000000                        547 _setTextColor_PARM_2:
      000000                        548 	.ds 2
                                    549 	.area	OSEG    (OVR,DATA)
                                    550 	.area	OSEG    (OVR,DATA)
      000000                        551 _setAddress_PARM_2:
      000000                        552 	.ds 2
      000002                        553 _setAddress_PARM_3:
      000002                        554 	.ds 2
      000004                        555 _setAddress_PARM_4:
      000004                        556 	.ds 2
                                    557 	.area	OSEG    (OVR,DATA)
                                    558 	.area	OSEG    (OVR,DATA)
                                    559 	.area	OSEG    (OVR,DATA)
      000000                        560 _RAMwrite_PARM_2:
      000000                        561 	.ds 1
                                    562 	.area	OSEG    (OVR,DATA)
                                    563 	.area	OSEG    (OVR,DATA)
                                    564 ;--------------------------------------------------------
                                    565 ; Stack segment in internal ram 
                                    566 ;--------------------------------------------------------
                                    567 	.area	SSEG
      000000                        568 __start__stack:
      000000                        569 	.ds	1
                                    570 
                                    571 ;--------------------------------------------------------
                                    572 ; indirectly addressable internal ram data
                                    573 ;--------------------------------------------------------
                                    574 	.area ISEG    (DATA)
                                    575 ;--------------------------------------------------------
                                    576 ; absolute internal ram data
                                    577 ;--------------------------------------------------------
                                    578 	.area IABS    (ABS,DATA)
                                    579 	.area IABS    (ABS,DATA)
                                    580 ;--------------------------------------------------------
                                    581 ; bit data
                                    582 ;--------------------------------------------------------
                                    583 	.area BSEG    (BIT)
      000000                        584 _drawChar_sloc0_1_0:
      000000                        585 	.ds 1
                                    586 ;--------------------------------------------------------
                                    587 ; paged external ram data
                                    588 ;--------------------------------------------------------
                                    589 	.area PSEG    (PAG,XDATA)
                                    590 ;--------------------------------------------------------
                                    591 ; external ram data
                                    592 ;--------------------------------------------------------
                                    593 	.area XSEG    (XDATA)
                                    594 ;--------------------------------------------------------
                                    595 ; absolute external ram data
                                    596 ;--------------------------------------------------------
                                    597 	.area XABS    (ABS,XDATA)
                                    598 ;--------------------------------------------------------
                                    599 ; external initialized ram data
                                    600 ;--------------------------------------------------------
                                    601 	.area XISEG   (XDATA)
                                    602 	.area HOME    (CODE)
                                    603 	.area GSINIT0 (CODE)
                                    604 	.area GSINIT1 (CODE)
                                    605 	.area GSINIT2 (CODE)
                                    606 	.area GSINIT3 (CODE)
                                    607 	.area GSINIT4 (CODE)
                                    608 	.area GSINIT5 (CODE)
                                    609 	.area GSINIT  (CODE)
                                    610 	.area GSFINAL (CODE)
                                    611 	.area CSEG    (CODE)
                                    612 ;--------------------------------------------------------
                                    613 ; interrupt vector 
                                    614 ;--------------------------------------------------------
                                    615 	.area HOME    (CODE)
      000000                        616 __interrupt_vect:
      000000 02r00r00         [24]  617 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  618 	reti
      000004                        619 	.ds	7
      00000B 32               [24]  620 	reti
      00000C                        621 	.ds	7
      000013 32               [24]  622 	reti
      000014                        623 	.ds	7
      00001B 32               [24]  624 	reti
      00001C                        625 	.ds	7
      000023 02r00r00         [24]  626 	ljmp	_ISR_receive
                                    627 ;--------------------------------------------------------
                                    628 ; global & static initialisations
                                    629 ;--------------------------------------------------------
                                    630 	.area HOME    (CODE)
                                    631 	.area GSINIT  (CODE)
                                    632 	.area GSFINAL (CODE)
                                    633 	.area GSINIT  (CODE)
                                    634 	.globl __sdcc_gsinit_startup
                                    635 	.globl __sdcc_program_startup
                                    636 	.globl __start__stack
                                    637 	.globl __mcs51_genXINIT
                                    638 	.globl __mcs51_genXRAMCLEAR
                                    639 	.globl __mcs51_genRAMCLEAR
                                    640 ;	ecen4330lab7.c:39: __xdata unsigned char* lcd_address = (unsigned char __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  641 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  642 	mov	(_lcd_address + 1),#0x40
                                    643 ;	ecen4330lab7.c:40: __xdata unsigned char* seg7_address = (unsigned char __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  644 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  645 	mov	(_seg7_address + 1),#0x80
                                    646 ;	ecen4330lab7.c:103: unsigned int count = 0;
      00000C E4               [12]  647 	clr	a
      00000D F5*32            [12]  648 	mov	_count,a
      00000F F5*33            [12]  649 	mov	(_count + 1),a
                                    650 ;	ecen4330lab7.c:107: unsigned char dataRate = 3;
      000011 75*3E 03         [24]  651 	mov	_dataRate,#0x03
                                    652 ;	ecen4330lab7.c:108: unsigned char dataBits = 0;
                                    653 ;	1-genFromRTrack replaced	mov	_dataBits,#0x00
      000014 F5*3F            [12]  654 	mov	_dataBits,a
                                    655 ;	ecen4330lab7.c:109: unsigned char parity = 2;
      000016 75*40 02         [24]  656 	mov	_parity,#0x02
                                    657 ;	ecen4330lab7.c:111: volatile unsigned char received_byte = 0;
                                    658 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000019 F5*41            [12]  659 	mov	_received_byte,a
                                    660 ;	ecen4330lab7.c:112: volatile unsigned char received_flag = 0;
                                    661 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      00001B F5*42            [12]  662 	mov	_received_flag,a
                                    663 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  664 	ljmp	__sdcc_program_startup
                                    665 ;--------------------------------------------------------
                                    666 ; Home
                                    667 ;--------------------------------------------------------
                                    668 	.area HOME    (CODE)
                                    669 	.area HOME    (CODE)
      000026                        670 __sdcc_program_startup:
      000026 02r26r75         [24]  671 	ljmp	_main
                                    672 ;	return from main will return to caller
                                    673 ;--------------------------------------------------------
                                    674 ; code
                                    675 ;--------------------------------------------------------
                                    676 	.area CSEG    (CODE)
                                    677 ;------------------------------------------------------------
                                    678 ;Allocation info for local variables in function 'ISR_receive'
                                    679 ;------------------------------------------------------------
                                    680 ;	ecen4330lab7.c:137: void ISR_receive() __interrupt (4) {
                                    681 ;	-----------------------------------------
                                    682 ;	 function ISR_receive
                                    683 ;	-----------------------------------------
      000000                        684 _ISR_receive:
                           000007   685 	ar7 = 0x07
                           000006   686 	ar6 = 0x06
                           000005   687 	ar5 = 0x05
                           000004   688 	ar4 = 0x04
                           000003   689 	ar3 = 0x03
                           000002   690 	ar2 = 0x02
                           000001   691 	ar1 = 0x01
                           000000   692 	ar0 = 0x00
      000000 C0*00            [24]  693 	push	bits
      000002 C0 E0            [24]  694 	push	acc
      000004 C0 F0            [24]  695 	push	b
      000006 C0 82            [24]  696 	push	dpl
      000008 C0 83            [24]  697 	push	dph
      00000A C0 07            [24]  698 	push	(0+7)
      00000C C0 06            [24]  699 	push	(0+6)
      00000E C0 05            [24]  700 	push	(0+5)
      000010 C0 04            [24]  701 	push	(0+4)
      000012 C0 03            [24]  702 	push	(0+3)
      000014 C0 02            [24]  703 	push	(0+2)
      000016 C0 01            [24]  704 	push	(0+1)
      000018 C0 00            [24]  705 	push	(0+0)
      00001A C0 D0            [24]  706 	push	psw
      00001C 75 D0 00         [24]  707 	mov	psw,#0x00
                                    708 ;	ecen4330lab7.c:138: if (RI == 1){
      00001F 30 98 22         [24]  709 	jnb	_RI,00102$
                                    710 ;	ecen4330lab7.c:139: received_byte = SBUF;
      000022 85 99*41         [24]  711 	mov	_received_byte,_SBUF
                                    712 ;	ecen4330lab7.c:140: RI = 0;
                                    713 ;	assignBit
      000025 C2 98            [12]  714 	clr	_RI
                                    715 ;	ecen4330lab7.c:141: received_flag = 1;
      000027 75*42 01         [24]  716 	mov	_received_flag,#0x01
                                    717 ;	ecen4330lab7.c:142: resetLCD();
      00002A 12r0DrAD         [24]  718 	lcall	_resetLCD
                                    719 ;	ecen4330lab7.c:143: LCD_string_write("UART data\nreceived.\n\n >> ");
      00002D 90r05r0B         [24]  720 	mov	dptr,#___str_0
      000030 75 F0 80         [24]  721 	mov	b,#0x80
      000033 12r0Ar19         [24]  722 	lcall	_LCD_string_write
                                    723 ;	ecen4330lab7.c:144: write(received_byte);
      000036 85*41 82         [24]  724 	mov	dpl,_received_byte
      000039 12r09rB3         [24]  725 	lcall	_write
                                    726 ;	ecen4330lab7.c:145: delay(500);
      00003C 90 01 F4         [24]  727 	mov	dptr,#0x01f4
      00003F 12r00r79         [24]  728 	lcall	_delay
      000042 80 02            [24]  729 	sjmp	00104$
      000044                        730 00102$:
                                    731 ;	ecen4330lab7.c:148: TI = 0;
                                    732 ;	assignBit
      000044 C2 99            [12]  733 	clr	_TI
      000046                        734 00104$:
                                    735 ;	ecen4330lab7.c:150: }
      000046 D0 D0            [24]  736 	pop	psw
      000048 D0 00            [24]  737 	pop	(0+0)
      00004A D0 01            [24]  738 	pop	(0+1)
      00004C D0 02            [24]  739 	pop	(0+2)
      00004E D0 03            [24]  740 	pop	(0+3)
      000050 D0 04            [24]  741 	pop	(0+4)
      000052 D0 05            [24]  742 	pop	(0+5)
      000054 D0 06            [24]  743 	pop	(0+6)
      000056 D0 07            [24]  744 	pop	(0+7)
      000058 D0 83            [24]  745 	pop	dph
      00005A D0 82            [24]  746 	pop	dpl
      00005C D0 F0            [24]  747 	pop	b
      00005E D0 E0            [24]  748 	pop	acc
      000060 D0*00            [24]  749 	pop	bits
      000062 32               [24]  750 	reti
                                    751 ;------------------------------------------------------------
                                    752 ;Allocation info for local variables in function 'UART_Init'
                                    753 ;------------------------------------------------------------
                                    754 ;	ecen4330lab7.c:158: void UART_Init(){
                                    755 ;	-----------------------------------------
                                    756 ;	 function UART_Init
                                    757 ;	-----------------------------------------
      000063                        758 _UART_Init:
                                    759 ;	ecen4330lab7.c:159: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      000063 75 98 50         [24]  760 	mov	_SCON,#0x50
                                    761 ;	ecen4330lab7.c:161: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      000066 75 89 20         [24]  762 	mov	_TMOD,#0x20
                                    763 ;	ecen4330lab7.c:162: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      000069 75 8D FD         [24]  764 	mov	_TH1,#0xfd
                                    765 ;	ecen4330lab7.c:163: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    766 ;	assignBit
      00006C D2 8E            [12]  767 	setb	_TR1
                                    768 ;	ecen4330lab7.c:164: ES  = 1;      // Enable Serial Interrupt
                                    769 ;	assignBit
      00006E D2 AC            [12]  770 	setb	_ES
                                    771 ;	ecen4330lab7.c:165: EA  = 1;      // Enable Global Interrupt bit
                                    772 ;	assignBit
      000070 D2 AF            [12]  773 	setb	_EA
                                    774 ;	ecen4330lab7.c:166: }
      000072 22               [24]  775 	ret
                                    776 ;------------------------------------------------------------
                                    777 ;Allocation info for local variables in function 'UART_transmit'
                                    778 ;------------------------------------------------------------
                                    779 ;	ecen4330lab7.c:174: void UART_transmit(){
                                    780 ;	-----------------------------------------
                                    781 ;	 function UART_transmit
                                    782 ;	-----------------------------------------
      000073                        783 _UART_transmit:
                                    784 ;	ecen4330lab7.c:177: while(TI == 1);
      000073                        785 00101$:
      000073 20 99 FD         [24]  786 	jb	_TI,00101$
                                    787 ;	ecen4330lab7.c:179: TI = 0;
                                    788 ;	assignBit
      000076 C2 99            [12]  789 	clr	_TI
                                    790 ;	ecen4330lab7.c:180: }
      000078 22               [24]  791 	ret
                                    792 ;------------------------------------------------------------
                                    793 ;Allocation info for local variables in function 'delay'
                                    794 ;------------------------------------------------------------
                                    795 ;d                         Allocated to registers r6 r7 
                                    796 ;i                         Allocated to registers r4 r5 
                                    797 ;j                         Allocated to registers r2 r3 
                                    798 ;------------------------------------------------------------
                                    799 ;	ecen4330lab7.c:214: void delay (int d) /// x 1ms
                                    800 ;	-----------------------------------------
                                    801 ;	 function delay
                                    802 ;	-----------------------------------------
      000079                        803 _delay:
      000079 AE 82            [24]  804 	mov	r6,dpl
      00007B AF 83            [24]  805 	mov	r7,dph
                                    806 ;	ecen4330lab7.c:217: for (i=0;i<d;i++)
      00007D 7C 00            [12]  807 	mov	r4,#0x00
      00007F 7D 00            [12]  808 	mov	r5,#0x00
      000081                        809 00107$:
      000081 C3               [12]  810 	clr	c
      000082 EC               [12]  811 	mov	a,r4
      000083 9E               [12]  812 	subb	a,r6
      000084 ED               [12]  813 	mov	a,r5
      000085 64 80            [12]  814 	xrl	a,#0x80
      000087 8F F0            [24]  815 	mov	b,r7
      000089 63 F0 80         [24]  816 	xrl	b,#0x80
      00008C 95 F0            [12]  817 	subb	a,b
      00008E 50 14            [24]  818 	jnc	00109$
                                    819 ;	ecen4330lab7.c:219: for (j=0;j<1000;j++);
      000090 7A E8            [12]  820 	mov	r2,#0xe8
      000092 7B 03            [12]  821 	mov	r3,#0x03
      000094                        822 00105$:
      000094 1A               [12]  823 	dec	r2
      000095 BA FF 01         [24]  824 	cjne	r2,#0xff,00130$
      000098 1B               [12]  825 	dec	r3
      000099                        826 00130$:
      000099 EA               [12]  827 	mov	a,r2
      00009A 4B               [12]  828 	orl	a,r3
      00009B 70 F7            [24]  829 	jnz	00105$
                                    830 ;	ecen4330lab7.c:217: for (i=0;i<d;i++)
      00009D 0C               [12]  831 	inc	r4
      00009E BC 00 E0         [24]  832 	cjne	r4,#0x00,00107$
      0000A1 0D               [12]  833 	inc	r5
      0000A2 80 DD            [24]  834 	sjmp	00107$
      0000A4                        835 00109$:
                                    836 ;	ecen4330lab7.c:221: }
      0000A4 22               [24]  837 	ret
                                    838 ;------------------------------------------------------------
                                    839 ;Allocation info for local variables in function 'writeRegister8'
                                    840 ;------------------------------------------------------------
                                    841 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    842 ;a                         Allocated to registers r7 
                                    843 ;------------------------------------------------------------
                                    844 ;	ecen4330lab7.c:229: void writeRegister8(u8 a, u8 d) {
                                    845 ;	-----------------------------------------
                                    846 ;	 function writeRegister8
                                    847 ;	-----------------------------------------
      0000A5                        848 _writeRegister8:
      0000A5 AF 82            [24]  849 	mov	r7,dpl
                                    850 ;	ecen4330lab7.c:230: CD = __CMD__;
                                    851 ;	assignBit
      0000A7 C2 B5            [12]  852 	clr	_P3_5
                                    853 ;	ecen4330lab7.c:231: write8(a);
                                    854 ;	assignBit
      0000A9 D2 B4            [12]  855 	setb	_P3_4
      0000AB 85*02 82         [24]  856 	mov	dpl,_lcd_address
      0000AE 85*03 83         [24]  857 	mov	dph,(_lcd_address + 1)
      0000B1 EF               [12]  858 	mov	a,r7
      0000B2 F0               [24]  859 	movx	@dptr,a
                                    860 ;	assignBit
      0000B3 C2 B4            [12]  861 	clr	_P3_4
                                    862 ;	ecen4330lab7.c:232: CD = __DATA__;
                                    863 ;	assignBit
      0000B5 D2 B5            [12]  864 	setb	_P3_5
                                    865 ;	ecen4330lab7.c:233: write8(d);
                                    866 ;	assignBit
      0000B7 D2 B4            [12]  867 	setb	_P3_4
      0000B9 85*02 82         [24]  868 	mov	dpl,_lcd_address
      0000BC 85*03 83         [24]  869 	mov	dph,(_lcd_address + 1)
      0000BF E5*00            [12]  870 	mov	a,_writeRegister8_PARM_2
      0000C1 F0               [24]  871 	movx	@dptr,a
                                    872 ;	assignBit
      0000C2 C2 B4            [12]  873 	clr	_P3_4
                                    874 ;	ecen4330lab7.c:234: }
      0000C4 22               [24]  875 	ret
                                    876 ;------------------------------------------------------------
                                    877 ;Allocation info for local variables in function 'writeRegister16'
                                    878 ;------------------------------------------------------------
                                    879 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    880 ;a                         Allocated to registers r6 r7 
                                    881 ;hi                        Allocated to registers r6 r7 
                                    882 ;lo                        Allocated to registers r4 r5 
                                    883 ;------------------------------------------------------------
                                    884 ;	ecen4330lab7.c:242: void writeRegister16(u16 a, u16 d){
                                    885 ;	-----------------------------------------
                                    886 ;	 function writeRegister16
                                    887 ;	-----------------------------------------
      0000C5                        888 _writeRegister16:
      0000C5 AE 82            [24]  889 	mov	r6,dpl
      0000C7 AF 83            [24]  890 	mov	r7,dph
                                    891 ;	ecen4330lab7.c:244: hi = (a) >> 8;
      0000C9 8F 04            [24]  892 	mov	ar4,r7
                                    893 ;	ecen4330lab7.c:245: lo = (a);
                                    894 ;	ecen4330lab7.c:246: write8Reg(hi);
                                    895 ;	assignBit
      0000CB C2 B5            [12]  896 	clr	_P3_5
                                    897 ;	assignBit
      0000CD D2 B4            [12]  898 	setb	_P3_4
      0000CF 85*02 82         [24]  899 	mov	dpl,_lcd_address
      0000D2 85*03 83         [24]  900 	mov	dph,(_lcd_address + 1)
      0000D5 EC               [12]  901 	mov	a,r4
      0000D6 F0               [24]  902 	movx	@dptr,a
                                    903 ;	assignBit
      0000D7 C2 B4            [12]  904 	clr	_P3_4
                                    905 ;	ecen4330lab7.c:247: write8Reg(lo);
                                    906 ;	assignBit
      0000D9 C2 B5            [12]  907 	clr	_P3_5
                                    908 ;	assignBit
      0000DB D2 B4            [12]  909 	setb	_P3_4
      0000DD 85*02 82         [24]  910 	mov	dpl,_lcd_address
      0000E0 85*03 83         [24]  911 	mov	dph,(_lcd_address + 1)
      0000E3 EE               [12]  912 	mov	a,r6
      0000E4 F0               [24]  913 	movx	@dptr,a
                                    914 ;	assignBit
      0000E5 C2 B4            [12]  915 	clr	_P3_4
                                    916 ;	ecen4330lab7.c:248: hi = (d) >> 8;
      0000E7 AE*01            [24]  917 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                    918 ;	ecen4330lab7.c:249: lo = (d);
      0000E9 AC*00            [24]  919 	mov	r4,_writeRegister16_PARM_2
                                    920 ;	ecen4330lab7.c:250: CD = 1 ;
                                    921 ;	assignBit
      0000EB D2 B5            [12]  922 	setb	_P3_5
                                    923 ;	ecen4330lab7.c:251: write8Data(hi);
                                    924 ;	assignBit
      0000ED D2 B5            [12]  925 	setb	_P3_5
                                    926 ;	assignBit
      0000EF D2 B4            [12]  927 	setb	_P3_4
      0000F1 85*02 82         [24]  928 	mov	dpl,_lcd_address
      0000F4 85*03 83         [24]  929 	mov	dph,(_lcd_address + 1)
      0000F7 EE               [12]  930 	mov	a,r6
      0000F8 F0               [24]  931 	movx	@dptr,a
                                    932 ;	assignBit
      0000F9 C2 B4            [12]  933 	clr	_P3_4
                                    934 ;	ecen4330lab7.c:252: write8Data(lo);
                                    935 ;	assignBit
      0000FB D2 B5            [12]  936 	setb	_P3_5
                                    937 ;	assignBit
      0000FD D2 B4            [12]  938 	setb	_P3_4
      0000FF 85*02 82         [24]  939 	mov	dpl,_lcd_address
      000102 85*03 83         [24]  940 	mov	dph,(_lcd_address + 1)
      000105 EC               [12]  941 	mov	a,r4
      000106 F0               [24]  942 	movx	@dptr,a
                                    943 ;	assignBit
      000107 C2 B4            [12]  944 	clr	_P3_4
                                    945 ;	ecen4330lab7.c:253: }
      000109 22               [24]  946 	ret
                                    947 ;------------------------------------------------------------
                                    948 ;Allocation info for local variables in function 'rtcInit'
                                    949 ;------------------------------------------------------------
                                    950 ;i                         Allocated with name '_rtcInit_i_65536_64'
                                    951 ;------------------------------------------------------------
                                    952 ;	ecen4330lab7.c:275: void rtcInit(void) {
                                    953 ;	-----------------------------------------
                                    954 ;	 function rtcInit
                                    955 ;	-----------------------------------------
      00010A                        956 _rtcInit:
                                    957 ;	ecen4330lab7.c:278: rtcCmd(__REG_F__, __HR_24__|__STOP__|__RESET__);  // stop and reset
      00010A 75*00 07         [24]  958 	mov	_rtcCmd_PARM_2,#0x07
      00010D 90 00 0F         [24]  959 	mov	dptr,#0x000f
      000110 12r01r50         [24]  960 	lcall	_rtcCmd
                                    961 ;	ecen4330lab7.c:281: for (i = __S1_REG__; i < __REG_D__;i++) {
      000113 7E 00            [12]  962 	mov	r6,#0x00
      000115 7F 00            [12]  963 	mov	r7,#0x00
      000117                        964 00102$:
                                    965 ;	ecen4330lab7.c:282: rtcWrite(i, 0x00);
      000117 75*43 00         [24]  966 	mov	_rtcWrite_PARM_2,#0x00
      00011A 8E 82            [24]  967 	mov	dpl,r6
      00011C 8F 83            [24]  968 	mov	dph,r7
      00011E C0 07            [24]  969 	push	ar7
      000120 C0 06            [24]  970 	push	ar6
      000122 12r01r59         [24]  971 	lcall	_rtcWrite
      000125 D0 06            [24]  972 	pop	ar6
      000127 D0 07            [24]  973 	pop	ar7
                                    974 ;	ecen4330lab7.c:281: for (i = __S1_REG__; i < __REG_D__;i++) {
      000129 0E               [12]  975 	inc	r6
      00012A BE 00 01         [24]  976 	cjne	r6,#0x00,00115$
      00012D 0F               [12]  977 	inc	r7
      00012E                        978 00115$:
      00012E C3               [12]  979 	clr	c
      00012F EE               [12]  980 	mov	a,r6
      000130 94 0D            [12]  981 	subb	a,#0x0d
      000132 EF               [12]  982 	mov	a,r7
      000133 94 00            [12]  983 	subb	a,#0x00
      000135 40 E0            [24]  984 	jc	00102$
                                    985 ;	ecen4330lab7.c:285: rtcCmd(__REG_F__, __HR_24__);
      000137 75*00 04         [24]  986 	mov	_rtcCmd_PARM_2,#0x04
      00013A 90 00 0F         [24]  987 	mov	dptr,#0x000f
                                    988 ;	ecen4330lab7.c:286: }
      00013D 02r01r50         [24]  989 	ljmp	_rtcCmd
                                    990 ;------------------------------------------------------------
                                    991 ;Allocation info for local variables in function 'rtcBusy'
                                    992 ;------------------------------------------------------------
                                    993 ;__1310720001              Allocated to registers 
                                    994 ;map_address               Allocated to registers 
                                    995 ;__1310720002              Allocated to registers 
                                    996 ;map_address               Allocated to registers 
                                    997 ;------------------------------------------------------------
                                    998 ;	ecen4330lab7.c:294: void rtcBusy(void) {
                                    999 ;	-----------------------------------------
                                   1000 ;	 function rtcBusy
                                   1001 ;	-----------------------------------------
      000140                       1002 _rtcBusy:
                                   1003 ;	ecen4330lab7.c:296: while((ioread8(map_address) & 0x02));
      000140                       1004 00101$:
                                   1005 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1006 ;	assignBit
      000140 D2 B4            [12] 1007 	setb	_P3_4
                                   1008 ;	ecen4330lab7.c:203: data = *map_address;
      000142 90 00 0D         [24] 1009 	mov	dptr,#0x000d
      000145 E0               [24] 1010 	movx	a,@dptr
      000146 F5*20            [12] 1011 	mov	_data,a
                                   1012 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1013 ;	assignBit
      000148 C2 B4            [12] 1014 	clr	_P3_4
                                   1015 ;	ecen4330lab7.c:205: return data;   
      00014A E5*20            [12] 1016 	mov	a,_data
                                   1017 ;	ecen4330lab7.c:296: while((ioread8(map_address) & 0x02));
      00014C 20 E1 F1         [24] 1018 	jb	acc.1,00101$
                                   1019 ;	ecen4330lab7.c:297: }
      00014F 22               [24] 1020 	ret
                                   1021 ;------------------------------------------------------------
                                   1022 ;Allocation info for local variables in function 'rtcCmd'
                                   1023 ;------------------------------------------------------------
                                   1024 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1025 ;addr                      Allocated to registers r6 r7 
                                   1026 ;map_address               Allocated to registers 
                                   1027 ;__1310720004              Allocated to registers 
                                   1028 ;__1310720005              Allocated to registers r7 
                                   1029 ;map_address               Allocated to registers 
                                   1030 ;d                         Allocated to registers 
                                   1031 ;------------------------------------------------------------
                                   1032 ;	ecen4330lab7.c:305: inline void rtcCmd(unsigned int addr, unsigned char d) {
                                   1033 ;	-----------------------------------------
                                   1034 ;	 function rtcCmd
                                   1035 ;	-----------------------------------------
      000150                       1036 _rtcCmd:
                                   1037 ;	ecen4330lab7.c:306: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1038 ;	ecen4330lab7.c:307: iowrite8(map_address, d);
      000150 AF*00            [24] 1039 	mov	r7,_rtcCmd_PARM_2
                                   1040 ;	ecen4330lab7.c:189: IOM = 1;
                                   1041 ;	assignBit
      000152 D2 B4            [12] 1042 	setb	_P3_4
                                   1043 ;	ecen4330lab7.c:190: *map_address = d;
      000154 EF               [12] 1044 	mov	a,r7
      000155 F0               [24] 1045 	movx	@dptr,a
                                   1046 ;	ecen4330lab7.c:191: IOM = 0;
                                   1047 ;	assignBit
      000156 C2 B4            [12] 1048 	clr	_P3_4
                                   1049 ;	ecen4330lab7.c:307: iowrite8(map_address, d);
                                   1050 ;	ecen4330lab7.c:308: }
      000158 22               [24] 1051 	ret
                                   1052 ;------------------------------------------------------------
                                   1053 ;Allocation info for local variables in function 'rtcWrite'
                                   1054 ;------------------------------------------------------------
                                   1055 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1056 ;addr                      Allocated to registers r6 r7 
                                   1057 ;map_address               Allocated to registers r6 r7 
                                   1058 ;__1310720007              Allocated to registers 
                                   1059 ;__1310720008              Allocated to registers 
                                   1060 ;addr                      Allocated to registers 
                                   1061 ;d                         Allocated to registers 
                                   1062 ;map_address               Allocated to registers 
                                   1063 ;__1310720004              Allocated to registers 
                                   1064 ;__1310720005              Allocated to registers 
                                   1065 ;map_address               Allocated to registers 
                                   1066 ;d                         Allocated to registers 
                                   1067 ;__1310720010              Allocated to registers 
                                   1068 ;__1310720011              Allocated to registers 
                                   1069 ;map_address               Allocated to registers 
                                   1070 ;d                         Allocated to registers 
                                   1071 ;__1310720013              Allocated to registers 
                                   1072 ;__1310720014              Allocated to registers r7 
                                   1073 ;addr                      Allocated to registers 
                                   1074 ;d                         Allocated to registers 
                                   1075 ;map_address               Allocated to registers 
                                   1076 ;__1310720004              Allocated to registers 
                                   1077 ;__1310720005              Allocated to registers 
                                   1078 ;map_address               Allocated to registers 
                                   1079 ;d                         Allocated to registers 
                                   1080 ;------------------------------------------------------------
                                   1081 ;	ecen4330lab7.c:316: inline void rtcWrite(unsigned int addr, unsigned char d) {
                                   1082 ;	-----------------------------------------
                                   1083 ;	 function rtcWrite
                                   1084 ;	-----------------------------------------
      000159                       1085 _rtcWrite:
      000159 AE 82            [24] 1086 	mov	r6,dpl
      00015B AF 83            [24] 1087 	mov	r7,dph
                                   1088 ;	ecen4330lab7.c:317: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1089 ;	ecen4330lab7.c:189: IOM = 1;
                                   1090 ;	assignBit
      00015D D2 B4            [12] 1091 	setb	_P3_4
                                   1092 ;	ecen4330lab7.c:190: *map_address = d;
      00015F 90 00 0D         [24] 1093 	mov	dptr,#0x000d
      000162 74 01            [12] 1094 	mov	a,#0x01
      000164 F0               [24] 1095 	movx	@dptr,a
                                   1096 ;	ecen4330lab7.c:191: IOM = 0;
                                   1097 ;	assignBit
      000165 C2 B4            [12] 1098 	clr	_P3_4
                                   1099 ;	ecen4330lab7.c:319: rtcBusy();
      000167 C0 07            [24] 1100 	push	ar7
      000169 C0 06            [24] 1101 	push	ar6
      00016B 12r01r40         [24] 1102 	lcall	_rtcBusy
      00016E D0 06            [24] 1103 	pop	ar6
      000170 D0 07            [24] 1104 	pop	ar7
                                   1105 ;	ecen4330lab7.c:189: IOM = 1;
                                   1106 ;	assignBit
      000172 D2 B4            [12] 1107 	setb	_P3_4
                                   1108 ;	ecen4330lab7.c:190: *map_address = d;
      000174 8E 82            [24] 1109 	mov	dpl,r6
      000176 8F 83            [24] 1110 	mov	dph,r7
      000178 E4               [12] 1111 	clr	a
      000179 F0               [24] 1112 	movx	@dptr,a
                                   1113 ;	ecen4330lab7.c:191: IOM = 0;
                                   1114 ;	assignBit
      00017A C2 B4            [12] 1115 	clr	_P3_4
                                   1116 ;	ecen4330lab7.c:321: rtcCmd(__REG_D__, d);
      00017C AF*43            [24] 1117 	mov	r7,_rtcWrite_PARM_2
                                   1118 ;	ecen4330lab7.c:189: IOM = 1;
                                   1119 ;	assignBit
      00017E D2 B4            [12] 1120 	setb	_P3_4
                                   1121 ;	ecen4330lab7.c:190: *map_address = d;
      000180 90 00 0D         [24] 1122 	mov	dptr,#0x000d
      000183 EF               [12] 1123 	mov	a,r7
      000184 F0               [24] 1124 	movx	@dptr,a
                                   1125 ;	ecen4330lab7.c:191: IOM = 0;
                                   1126 ;	assignBit
      000185 C2 B4            [12] 1127 	clr	_P3_4
                                   1128 ;	ecen4330lab7.c:321: rtcCmd(__REG_D__, d);
                                   1129 ;	ecen4330lab7.c:322: }
      000187 22               [24] 1130 	ret
                                   1131 ;------------------------------------------------------------
                                   1132 ;Allocation info for local variables in function 'rtcRead'
                                   1133 ;------------------------------------------------------------
                                   1134 ;addr                      Allocated to registers r6 r7 
                                   1135 ;__1310720019              Allocated to registers 
                                   1136 ;map_address               Allocated to registers r6 r7 
                                   1137 ;__1310720016              Allocated to registers 
                                   1138 ;__1310720017              Allocated to registers 
                                   1139 ;addr                      Allocated to registers 
                                   1140 ;d                         Allocated to registers 
                                   1141 ;map_address               Allocated to registers 
                                   1142 ;__1310720004              Allocated to registers 
                                   1143 ;__1310720005              Allocated to registers 
                                   1144 ;map_address               Allocated to registers 
                                   1145 ;d                         Allocated to registers 
                                   1146 ;__1310720020              Allocated to registers 
                                   1147 ;map_address               Allocated to registers 
                                   1148 ;__1310720022              Allocated to registers 
                                   1149 ;__1310720023              Allocated to registers 
                                   1150 ;addr                      Allocated to registers 
                                   1151 ;d                         Allocated to registers 
                                   1152 ;map_address               Allocated to registers 
                                   1153 ;__1310720004              Allocated to registers 
                                   1154 ;__1310720005              Allocated to registers 
                                   1155 ;map_address               Allocated to registers 
                                   1156 ;d                         Allocated to registers 
                                   1157 ;------------------------------------------------------------
                                   1158 ;	ecen4330lab7.c:331: inline unsigned char rtcRead(unsigned int addr) {
                                   1159 ;	-----------------------------------------
                                   1160 ;	 function rtcRead
                                   1161 ;	-----------------------------------------
      000188                       1162 _rtcRead:
      000188 AE 82            [24] 1163 	mov	r6,dpl
      00018A AF 83            [24] 1164 	mov	r7,dph
                                   1165 ;	ecen4330lab7.c:332: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1166 ;	ecen4330lab7.c:189: IOM = 1;
                                   1167 ;	assignBit
      00018C D2 B4            [12] 1168 	setb	_P3_4
                                   1169 ;	ecen4330lab7.c:190: *map_address = d;
      00018E 90 00 0D         [24] 1170 	mov	dptr,#0x000d
      000191 74 01            [12] 1171 	mov	a,#0x01
      000193 F0               [24] 1172 	movx	@dptr,a
                                   1173 ;	ecen4330lab7.c:191: IOM = 0;
                                   1174 ;	assignBit
      000194 C2 B4            [12] 1175 	clr	_P3_4
                                   1176 ;	ecen4330lab7.c:334: rtcBusy();
      000196 C0 07            [24] 1177 	push	ar7
      000198 C0 06            [24] 1178 	push	ar6
      00019A 12r01r40         [24] 1179 	lcall	_rtcBusy
      00019D D0 06            [24] 1180 	pop	ar6
      00019F D0 07            [24] 1181 	pop	ar7
                                   1182 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1183 ;	assignBit
      0001A1 D2 B4            [12] 1184 	setb	_P3_4
                                   1185 ;	ecen4330lab7.c:203: data = *map_address;
      0001A3 8E 82            [24] 1186 	mov	dpl,r6
      0001A5 8F 83            [24] 1187 	mov	dph,r7
      0001A7 E0               [24] 1188 	movx	a,@dptr
      0001A8 F5*20            [12] 1189 	mov	_data,a
                                   1190 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1191 ;	assignBit
      0001AA C2 B4            [12] 1192 	clr	_P3_4
                                   1193 ;	ecen4330lab7.c:205: return data;   
                                   1194 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001AC E5*20            [12] 1195 	mov	a,_data
      0001AE 54 0F            [12] 1196 	anl	a,#0x0f
      0001B0 44 30            [12] 1197 	orl	a,#0x30
      0001B2 F5*20            [12] 1198 	mov	_data,a
                                   1199 ;	ecen4330lab7.c:189: IOM = 1;
                                   1200 ;	assignBit
      0001B4 D2 B4            [12] 1201 	setb	_P3_4
                                   1202 ;	ecen4330lab7.c:190: *map_address = d;
      0001B6 90 00 0D         [24] 1203 	mov	dptr,#0x000d
      0001B9 E4               [12] 1204 	clr	a
      0001BA F0               [24] 1205 	movx	@dptr,a
                                   1206 ;	ecen4330lab7.c:191: IOM = 0;
                                   1207 ;	assignBit
      0001BB C2 B4            [12] 1208 	clr	_P3_4
                                   1209 ;	ecen4330lab7.c:339: return data;
      0001BD 85*20 82         [24] 1210 	mov	dpl,_data
                                   1211 ;	ecen4330lab7.c:340: }
      0001C0 22               [24] 1212 	ret
                                   1213 ;------------------------------------------------------------
                                   1214 ;Allocation info for local variables in function 'rtcPrint'
                                   1215 ;------------------------------------------------------------
                                   1216 ;__1310720040              Allocated to registers 
                                   1217 ;__1310720037              Allocated to registers 
                                   1218 ;__1310720034              Allocated to registers 
                                   1219 ;__1310720031              Allocated to registers 
                                   1220 ;__1310720028              Allocated to registers 
                                   1221 ;__1310720025              Allocated to registers 
                                   1222 ;t                         Allocated to registers 
                                   1223 ;__1310720026              Allocated to registers 
                                   1224 ;addr                      Allocated to registers 
                                   1225 ;__1310720019              Allocated to registers 
                                   1226 ;map_address               Allocated to registers 
                                   1227 ;__1310720016              Allocated to registers 
                                   1228 ;__1310720017              Allocated to registers 
                                   1229 ;addr                      Allocated to registers 
                                   1230 ;d                         Allocated to registers 
                                   1231 ;map_address               Allocated to registers 
                                   1232 ;__1310720004              Allocated to registers 
                                   1233 ;__1310720005              Allocated to registers 
                                   1234 ;map_address               Allocated to registers 
                                   1235 ;d                         Allocated to registers 
                                   1236 ;__1310720020              Allocated to registers 
                                   1237 ;map_address               Allocated to registers 
                                   1238 ;__1310720022              Allocated to registers 
                                   1239 ;__1310720023              Allocated to registers 
                                   1240 ;addr                      Allocated to registers 
                                   1241 ;d                         Allocated to registers 
                                   1242 ;map_address               Allocated to registers 
                                   1243 ;__1310720004              Allocated to registers 
                                   1244 ;__1310720005              Allocated to registers 
                                   1245 ;map_address               Allocated to registers 
                                   1246 ;d                         Allocated to registers 
                                   1247 ;__1310720029              Allocated to registers 
                                   1248 ;addr                      Allocated to registers 
                                   1249 ;__1310720019              Allocated to registers 
                                   1250 ;map_address               Allocated to registers 
                                   1251 ;__1310720016              Allocated to registers 
                                   1252 ;__1310720017              Allocated to registers 
                                   1253 ;addr                      Allocated to registers 
                                   1254 ;d                         Allocated to registers 
                                   1255 ;map_address               Allocated to registers 
                                   1256 ;__1310720004              Allocated to registers 
                                   1257 ;__1310720005              Allocated to registers 
                                   1258 ;map_address               Allocated to registers 
                                   1259 ;d                         Allocated to registers 
                                   1260 ;__1310720020              Allocated to registers 
                                   1261 ;map_address               Allocated to registers 
                                   1262 ;__1310720022              Allocated to registers 
                                   1263 ;__1310720023              Allocated to registers 
                                   1264 ;addr                      Allocated to registers 
                                   1265 ;d                         Allocated to registers 
                                   1266 ;map_address               Allocated to registers 
                                   1267 ;__1310720004              Allocated to registers 
                                   1268 ;__1310720005              Allocated to registers 
                                   1269 ;map_address               Allocated to registers 
                                   1270 ;d                         Allocated to registers 
                                   1271 ;__1310720032              Allocated to registers 
                                   1272 ;addr                      Allocated to registers 
                                   1273 ;__1310720019              Allocated to registers 
                                   1274 ;map_address               Allocated to registers 
                                   1275 ;__1310720016              Allocated to registers 
                                   1276 ;__1310720017              Allocated to registers 
                                   1277 ;addr                      Allocated to registers 
                                   1278 ;d                         Allocated to registers 
                                   1279 ;map_address               Allocated to registers 
                                   1280 ;__1310720004              Allocated to registers 
                                   1281 ;__1310720005              Allocated to registers 
                                   1282 ;map_address               Allocated to registers 
                                   1283 ;d                         Allocated to registers 
                                   1284 ;__1310720020              Allocated to registers 
                                   1285 ;map_address               Allocated to registers 
                                   1286 ;__1310720022              Allocated to registers 
                                   1287 ;__1310720023              Allocated to registers 
                                   1288 ;addr                      Allocated to registers 
                                   1289 ;d                         Allocated to registers 
                                   1290 ;map_address               Allocated to registers 
                                   1291 ;__1310720004              Allocated to registers 
                                   1292 ;__1310720005              Allocated to registers 
                                   1293 ;map_address               Allocated to registers 
                                   1294 ;d                         Allocated to registers 
                                   1295 ;__1310720035              Allocated to registers 
                                   1296 ;addr                      Allocated to registers 
                                   1297 ;__1310720019              Allocated to registers 
                                   1298 ;map_address               Allocated to registers 
                                   1299 ;__1310720016              Allocated to registers 
                                   1300 ;__1310720017              Allocated to registers 
                                   1301 ;addr                      Allocated to registers 
                                   1302 ;d                         Allocated to registers 
                                   1303 ;map_address               Allocated to registers 
                                   1304 ;__1310720004              Allocated to registers 
                                   1305 ;__1310720005              Allocated to registers 
                                   1306 ;map_address               Allocated to registers 
                                   1307 ;d                         Allocated to registers 
                                   1308 ;__1310720020              Allocated to registers 
                                   1309 ;map_address               Allocated to registers 
                                   1310 ;__1310720022              Allocated to registers 
                                   1311 ;__1310720023              Allocated to registers 
                                   1312 ;addr                      Allocated to registers 
                                   1313 ;d                         Allocated to registers 
                                   1314 ;map_address               Allocated to registers 
                                   1315 ;__1310720004              Allocated to registers 
                                   1316 ;__1310720005              Allocated to registers 
                                   1317 ;map_address               Allocated to registers 
                                   1318 ;d                         Allocated to registers 
                                   1319 ;__1310720038              Allocated to registers 
                                   1320 ;addr                      Allocated to registers 
                                   1321 ;__1310720019              Allocated to registers 
                                   1322 ;map_address               Allocated to registers 
                                   1323 ;__1310720016              Allocated to registers 
                                   1324 ;__1310720017              Allocated to registers 
                                   1325 ;addr                      Allocated to registers 
                                   1326 ;d                         Allocated to registers 
                                   1327 ;map_address               Allocated to registers 
                                   1328 ;__1310720004              Allocated to registers 
                                   1329 ;__1310720005              Allocated to registers 
                                   1330 ;map_address               Allocated to registers 
                                   1331 ;d                         Allocated to registers 
                                   1332 ;__1310720020              Allocated to registers 
                                   1333 ;map_address               Allocated to registers 
                                   1334 ;__1310720022              Allocated to registers 
                                   1335 ;__1310720023              Allocated to registers 
                                   1336 ;addr                      Allocated to registers 
                                   1337 ;d                         Allocated to registers 
                                   1338 ;map_address               Allocated to registers 
                                   1339 ;__1310720004              Allocated to registers 
                                   1340 ;__1310720005              Allocated to registers 
                                   1341 ;map_address               Allocated to registers 
                                   1342 ;d                         Allocated to registers 
                                   1343 ;__1310720041              Allocated to registers 
                                   1344 ;addr                      Allocated to registers 
                                   1345 ;__1310720019              Allocated to registers 
                                   1346 ;map_address               Allocated to registers 
                                   1347 ;__1310720016              Allocated to registers 
                                   1348 ;__1310720017              Allocated to registers 
                                   1349 ;addr                      Allocated to registers 
                                   1350 ;d                         Allocated to registers 
                                   1351 ;map_address               Allocated to registers 
                                   1352 ;__1310720004              Allocated to registers 
                                   1353 ;__1310720005              Allocated to registers 
                                   1354 ;map_address               Allocated to registers 
                                   1355 ;d                         Allocated to registers 
                                   1356 ;__1310720020              Allocated to registers 
                                   1357 ;map_address               Allocated to registers 
                                   1358 ;__1310720022              Allocated to registers 
                                   1359 ;__1310720023              Allocated to registers 
                                   1360 ;addr                      Allocated to registers 
                                   1361 ;d                         Allocated to registers 
                                   1362 ;map_address               Allocated to registers 
                                   1363 ;__1310720004              Allocated to registers 
                                   1364 ;__1310720005              Allocated to registers 
                                   1365 ;map_address               Allocated to registers 
                                   1366 ;d                         Allocated to registers 
                                   1367 ;------------------------------------------------------------
                                   1368 ;	ecen4330lab7.c:349: void rtcPrint(void) {
                                   1369 ;	-----------------------------------------
                                   1370 ;	 function rtcPrint
                                   1371 ;	-----------------------------------------
      0001C1                       1372 _rtcPrint:
                                   1373 ;	ecen4330lab7.c:352: xCursorHold = cursor_x;
      0001C1 85*08*38         [24] 1374 	mov	_xCursorHold,_cursor_x
                                   1375 ;	ecen4330lab7.c:353: yCursorHold = cursor_y;
      0001C4 85*0A*39         [24] 1376 	mov	_yCursorHold,_cursor_y
                                   1377 ;	ecen4330lab7.c:354: textSizeHold = textsize;
      0001C7 85*0C*3A         [24] 1378 	mov	_textSizeHold,_textsize
                                   1379 ;	ecen4330lab7.c:356: setTextColor(GRAY, BLACK);
      0001CA E4               [12] 1380 	clr	a
      0001CB F5*00            [12] 1381 	mov	_setTextColor_PARM_2,a
      0001CD F5*01            [12] 1382 	mov	(_setTextColor_PARM_2 + 1),a
      0001CF 90 D6 BA         [24] 1383 	mov	dptr,#0xd6ba
      0001D2 12r03r2A         [24] 1384 	lcall	_setTextColor
                                   1385 ;	ecen4330lab7.c:357: setTextSize(2);
      0001D5 75 82 02         [24] 1386 	mov	dpl,#0x02
      0001D8 12r03r37         [24] 1387 	lcall	_setTextSize
                                   1388 ;	ecen4330lab7.c:358: setCursor(132, 304);
      0001DB 75*00 30         [24] 1389 	mov	_setCursor_PARM_2,#0x30
      0001DE 75*01 01         [24] 1390 	mov	(_setCursor_PARM_2 + 1),#0x01
      0001E1 90 00 84         [24] 1391 	mov	dptr,#0x0084
      0001E4 12r03r1D         [24] 1392 	lcall	_setCursor
                                   1393 ;	ecen4330lab7.c:189: IOM = 1;
                                   1394 ;	assignBit
      0001E7 D2 B4            [12] 1395 	setb	_P3_4
                                   1396 ;	ecen4330lab7.c:190: *map_address = d;
      0001E9 90 00 0D         [24] 1397 	mov	dptr,#0x000d
      0001EC 74 01            [12] 1398 	mov	a,#0x01
      0001EE F0               [24] 1399 	movx	@dptr,a
                                   1400 ;	ecen4330lab7.c:191: IOM = 0;
                                   1401 ;	assignBit
      0001EF C2 B4            [12] 1402 	clr	_P3_4
                                   1403 ;	ecen4330lab7.c:334: rtcBusy();
      0001F1 12r01r40         [24] 1404 	lcall	_rtcBusy
                                   1405 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1406 ;	assignBit
      0001F4 D2 B4            [12] 1407 	setb	_P3_4
                                   1408 ;	ecen4330lab7.c:203: data = *map_address;
      0001F6 90 00 05         [24] 1409 	mov	dptr,#0x0005
      0001F9 E0               [24] 1410 	movx	a,@dptr
      0001FA F5*20            [12] 1411 	mov	_data,a
                                   1412 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1413 ;	assignBit
      0001FC C2 B4            [12] 1414 	clr	_P3_4
                                   1415 ;	ecen4330lab7.c:205: return data;   
                                   1416 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      0001FE E5*20            [12] 1417 	mov	a,_data
      000200 54 0F            [12] 1418 	anl	a,#0x0f
      000202 44 30            [12] 1419 	orl	a,#0x30
      000204 F5*20            [12] 1420 	mov	_data,a
                                   1421 ;	ecen4330lab7.c:189: IOM = 1;
                                   1422 ;	assignBit
      000206 D2 B4            [12] 1423 	setb	_P3_4
                                   1424 ;	ecen4330lab7.c:190: *map_address = d;
      000208 90 00 0D         [24] 1425 	mov	dptr,#0x000d
      00020B E4               [12] 1426 	clr	a
      00020C F0               [24] 1427 	movx	@dptr,a
                                   1428 ;	ecen4330lab7.c:191: IOM = 0;
                                   1429 ;	assignBit
      00020D C2 B4            [12] 1430 	clr	_P3_4
                                   1431 ;	ecen4330lab7.c:339: return data;
      00020F 85*20 82         [24] 1432 	mov	dpl,_data
                                   1433 ;	ecen4330lab7.c:361: write(t);
      000212 12r09rB3         [24] 1434 	lcall	_write
                                   1435 ;	ecen4330lab7.c:189: IOM = 1;
                                   1436 ;	assignBit
      000215 D2 B4            [12] 1437 	setb	_P3_4
                                   1438 ;	ecen4330lab7.c:190: *map_address = d;
      000217 90 00 0D         [24] 1439 	mov	dptr,#0x000d
      00021A 74 01            [12] 1440 	mov	a,#0x01
      00021C F0               [24] 1441 	movx	@dptr,a
                                   1442 ;	ecen4330lab7.c:191: IOM = 0;
                                   1443 ;	assignBit
      00021D C2 B4            [12] 1444 	clr	_P3_4
                                   1445 ;	ecen4330lab7.c:334: rtcBusy();
      00021F 12r01r40         [24] 1446 	lcall	_rtcBusy
                                   1447 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1448 ;	assignBit
      000222 D2 B4            [12] 1449 	setb	_P3_4
                                   1450 ;	ecen4330lab7.c:203: data = *map_address;
      000224 90 00 04         [24] 1451 	mov	dptr,#0x0004
      000227 E0               [24] 1452 	movx	a,@dptr
      000228 F5*20            [12] 1453 	mov	_data,a
                                   1454 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1455 ;	assignBit
      00022A C2 B4            [12] 1456 	clr	_P3_4
                                   1457 ;	ecen4330lab7.c:205: return data;   
                                   1458 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      00022C E5*20            [12] 1459 	mov	a,_data
      00022E 54 0F            [12] 1460 	anl	a,#0x0f
      000230 44 30            [12] 1461 	orl	a,#0x30
      000232 F5*20            [12] 1462 	mov	_data,a
                                   1463 ;	ecen4330lab7.c:189: IOM = 1;
                                   1464 ;	assignBit
      000234 D2 B4            [12] 1465 	setb	_P3_4
                                   1466 ;	ecen4330lab7.c:190: *map_address = d;
      000236 90 00 0D         [24] 1467 	mov	dptr,#0x000d
      000239 E4               [12] 1468 	clr	a
      00023A F0               [24] 1469 	movx	@dptr,a
                                   1470 ;	ecen4330lab7.c:191: IOM = 0;
                                   1471 ;	assignBit
      00023B C2 B4            [12] 1472 	clr	_P3_4
                                   1473 ;	ecen4330lab7.c:339: return data;
      00023D 85*20 82         [24] 1474 	mov	dpl,_data
                                   1475 ;	ecen4330lab7.c:363: write(t);
      000240 12r09rB3         [24] 1476 	lcall	_write
                                   1477 ;	ecen4330lab7.c:364: LCD_string_write(":");
      000243 90r05r25         [24] 1478 	mov	dptr,#___str_1
      000246 75 F0 80         [24] 1479 	mov	b,#0x80
      000249 12r0Ar19         [24] 1480 	lcall	_LCD_string_write
                                   1481 ;	ecen4330lab7.c:189: IOM = 1;
                                   1482 ;	assignBit
      00024C D2 B4            [12] 1483 	setb	_P3_4
                                   1484 ;	ecen4330lab7.c:190: *map_address = d;
      00024E 90 00 0D         [24] 1485 	mov	dptr,#0x000d
      000251 74 01            [12] 1486 	mov	a,#0x01
      000253 F0               [24] 1487 	movx	@dptr,a
                                   1488 ;	ecen4330lab7.c:191: IOM = 0;
                                   1489 ;	assignBit
      000254 C2 B4            [12] 1490 	clr	_P3_4
                                   1491 ;	ecen4330lab7.c:334: rtcBusy();
      000256 12r01r40         [24] 1492 	lcall	_rtcBusy
                                   1493 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1494 ;	assignBit
      000259 D2 B4            [12] 1495 	setb	_P3_4
                                   1496 ;	ecen4330lab7.c:203: data = *map_address;
      00025B 90 00 03         [24] 1497 	mov	dptr,#0x0003
      00025E E0               [24] 1498 	movx	a,@dptr
      00025F F5*20            [12] 1499 	mov	_data,a
                                   1500 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1501 ;	assignBit
      000261 C2 B4            [12] 1502 	clr	_P3_4
                                   1503 ;	ecen4330lab7.c:205: return data;   
                                   1504 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      000263 E5*20            [12] 1505 	mov	a,_data
      000265 54 0F            [12] 1506 	anl	a,#0x0f
      000267 44 30            [12] 1507 	orl	a,#0x30
      000269 F5*20            [12] 1508 	mov	_data,a
                                   1509 ;	ecen4330lab7.c:189: IOM = 1;
                                   1510 ;	assignBit
      00026B D2 B4            [12] 1511 	setb	_P3_4
                                   1512 ;	ecen4330lab7.c:190: *map_address = d;
      00026D 90 00 0D         [24] 1513 	mov	dptr,#0x000d
      000270 E4               [12] 1514 	clr	a
      000271 F0               [24] 1515 	movx	@dptr,a
                                   1516 ;	ecen4330lab7.c:191: IOM = 0;
                                   1517 ;	assignBit
      000272 C2 B4            [12] 1518 	clr	_P3_4
                                   1519 ;	ecen4330lab7.c:339: return data;
      000274 85*20 82         [24] 1520 	mov	dpl,_data
                                   1521 ;	ecen4330lab7.c:366: write(t);
      000277 12r09rB3         [24] 1522 	lcall	_write
                                   1523 ;	ecen4330lab7.c:189: IOM = 1;
                                   1524 ;	assignBit
      00027A D2 B4            [12] 1525 	setb	_P3_4
                                   1526 ;	ecen4330lab7.c:190: *map_address = d;
      00027C 90 00 0D         [24] 1527 	mov	dptr,#0x000d
      00027F 74 01            [12] 1528 	mov	a,#0x01
      000281 F0               [24] 1529 	movx	@dptr,a
                                   1530 ;	ecen4330lab7.c:191: IOM = 0;
                                   1531 ;	assignBit
      000282 C2 B4            [12] 1532 	clr	_P3_4
                                   1533 ;	ecen4330lab7.c:334: rtcBusy();
      000284 12r01r40         [24] 1534 	lcall	_rtcBusy
                                   1535 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1536 ;	assignBit
      000287 D2 B4            [12] 1537 	setb	_P3_4
                                   1538 ;	ecen4330lab7.c:203: data = *map_address;
      000289 90 00 02         [24] 1539 	mov	dptr,#0x0002
      00028C E0               [24] 1540 	movx	a,@dptr
      00028D F5*20            [12] 1541 	mov	_data,a
                                   1542 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1543 ;	assignBit
      00028F C2 B4            [12] 1544 	clr	_P3_4
                                   1545 ;	ecen4330lab7.c:205: return data;   
                                   1546 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      000291 E5*20            [12] 1547 	mov	a,_data
      000293 54 0F            [12] 1548 	anl	a,#0x0f
      000295 44 30            [12] 1549 	orl	a,#0x30
      000297 F5*20            [12] 1550 	mov	_data,a
                                   1551 ;	ecen4330lab7.c:189: IOM = 1;
                                   1552 ;	assignBit
      000299 D2 B4            [12] 1553 	setb	_P3_4
                                   1554 ;	ecen4330lab7.c:190: *map_address = d;
      00029B 90 00 0D         [24] 1555 	mov	dptr,#0x000d
      00029E E4               [12] 1556 	clr	a
      00029F F0               [24] 1557 	movx	@dptr,a
                                   1558 ;	ecen4330lab7.c:191: IOM = 0;
                                   1559 ;	assignBit
      0002A0 C2 B4            [12] 1560 	clr	_P3_4
                                   1561 ;	ecen4330lab7.c:339: return data;
      0002A2 85*20 82         [24] 1562 	mov	dpl,_data
                                   1563 ;	ecen4330lab7.c:368: write(t);
      0002A5 12r09rB3         [24] 1564 	lcall	_write
                                   1565 ;	ecen4330lab7.c:369: LCD_string_write(":");
      0002A8 90r05r25         [24] 1566 	mov	dptr,#___str_1
      0002AB 75 F0 80         [24] 1567 	mov	b,#0x80
      0002AE 12r0Ar19         [24] 1568 	lcall	_LCD_string_write
                                   1569 ;	ecen4330lab7.c:189: IOM = 1;
                                   1570 ;	assignBit
      0002B1 D2 B4            [12] 1571 	setb	_P3_4
                                   1572 ;	ecen4330lab7.c:190: *map_address = d;
      0002B3 90 00 0D         [24] 1573 	mov	dptr,#0x000d
      0002B6 74 01            [12] 1574 	mov	a,#0x01
      0002B8 F0               [24] 1575 	movx	@dptr,a
                                   1576 ;	ecen4330lab7.c:191: IOM = 0;
                                   1577 ;	assignBit
      0002B9 C2 B4            [12] 1578 	clr	_P3_4
                                   1579 ;	ecen4330lab7.c:334: rtcBusy();
      0002BB 12r01r40         [24] 1580 	lcall	_rtcBusy
                                   1581 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1582 ;	assignBit
      0002BE D2 B4            [12] 1583 	setb	_P3_4
                                   1584 ;	ecen4330lab7.c:203: data = *map_address;
      0002C0 90 00 01         [24] 1585 	mov	dptr,#0x0001
      0002C3 E0               [24] 1586 	movx	a,@dptr
      0002C4 F5*20            [12] 1587 	mov	_data,a
                                   1588 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1589 ;	assignBit
      0002C6 C2 B4            [12] 1590 	clr	_P3_4
                                   1591 ;	ecen4330lab7.c:205: return data;   
                                   1592 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002C8 E5*20            [12] 1593 	mov	a,_data
      0002CA 54 0F            [12] 1594 	anl	a,#0x0f
      0002CC 44 30            [12] 1595 	orl	a,#0x30
      0002CE F5*20            [12] 1596 	mov	_data,a
                                   1597 ;	ecen4330lab7.c:189: IOM = 1;
                                   1598 ;	assignBit
      0002D0 D2 B4            [12] 1599 	setb	_P3_4
                                   1600 ;	ecen4330lab7.c:190: *map_address = d;
      0002D2 90 00 0D         [24] 1601 	mov	dptr,#0x000d
      0002D5 E4               [12] 1602 	clr	a
      0002D6 F0               [24] 1603 	movx	@dptr,a
                                   1604 ;	ecen4330lab7.c:191: IOM = 0;
                                   1605 ;	assignBit
      0002D7 C2 B4            [12] 1606 	clr	_P3_4
                                   1607 ;	ecen4330lab7.c:339: return data;
      0002D9 85*20 82         [24] 1608 	mov	dpl,_data
                                   1609 ;	ecen4330lab7.c:371: write(t);
      0002DC 12r09rB3         [24] 1610 	lcall	_write
                                   1611 ;	ecen4330lab7.c:189: IOM = 1;
                                   1612 ;	assignBit
      0002DF D2 B4            [12] 1613 	setb	_P3_4
                                   1614 ;	ecen4330lab7.c:190: *map_address = d;
      0002E1 90 00 0D         [24] 1615 	mov	dptr,#0x000d
      0002E4 74 01            [12] 1616 	mov	a,#0x01
      0002E6 F0               [24] 1617 	movx	@dptr,a
                                   1618 ;	ecen4330lab7.c:191: IOM = 0;
                                   1619 ;	assignBit
      0002E7 C2 B4            [12] 1620 	clr	_P3_4
                                   1621 ;	ecen4330lab7.c:334: rtcBusy();
      0002E9 12r01r40         [24] 1622 	lcall	_rtcBusy
                                   1623 ;	ecen4330lab7.c:202: IOM = 1;                            
                                   1624 ;	assignBit
      0002EC D2 B4            [12] 1625 	setb	_P3_4
                                   1626 ;	ecen4330lab7.c:203: data = *map_address;
      0002EE 90 00 00         [24] 1627 	mov	dptr,#0x0000
      0002F1 E0               [24] 1628 	movx	a,@dptr
      0002F2 F5*20            [12] 1629 	mov	_data,a
                                   1630 ;	ecen4330lab7.c:204: IOM = 0;    
                                   1631 ;	assignBit
      0002F4 C2 B4            [12] 1632 	clr	_P3_4
                                   1633 ;	ecen4330lab7.c:205: return data;   
                                   1634 ;	ecen4330lab7.c:337: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002F6 E5*20            [12] 1635 	mov	a,_data
      0002F8 54 0F            [12] 1636 	anl	a,#0x0f
      0002FA 44 30            [12] 1637 	orl	a,#0x30
      0002FC F5*20            [12] 1638 	mov	_data,a
                                   1639 ;	ecen4330lab7.c:189: IOM = 1;
                                   1640 ;	assignBit
      0002FE D2 B4            [12] 1641 	setb	_P3_4
                                   1642 ;	ecen4330lab7.c:190: *map_address = d;
      000300 90 00 0D         [24] 1643 	mov	dptr,#0x000d
      000303 E4               [12] 1644 	clr	a
      000304 F0               [24] 1645 	movx	@dptr,a
                                   1646 ;	ecen4330lab7.c:191: IOM = 0;
                                   1647 ;	assignBit
      000305 C2 B4            [12] 1648 	clr	_P3_4
                                   1649 ;	ecen4330lab7.c:339: return data;
      000307 85*20 82         [24] 1650 	mov	dpl,_data
                                   1651 ;	ecen4330lab7.c:373: write(t);
      00030A 12r09rB3         [24] 1652 	lcall	_write
                                   1653 ;	ecen4330lab7.c:375: cursor_x = xCursorHold;
      00030D 85*38*08         [24] 1654 	mov	_cursor_x,_xCursorHold
      000310 75*09 00         [24] 1655 	mov	(_cursor_x + 1),#0x00
                                   1656 ;	ecen4330lab7.c:376: cursor_y = yCursorHold;
      000313 85*39*0A         [24] 1657 	mov	_cursor_y,_yCursorHold
      000316 75*0B 00         [24] 1658 	mov	(_cursor_y + 1),#0x00
                                   1659 ;	ecen4330lab7.c:377: textsize = textSizeHold;
      000319 85*3A*0C         [24] 1660 	mov	_textsize,_textSizeHold
                                   1661 ;	ecen4330lab7.c:378: }
      00031C 22               [24] 1662 	ret
                                   1663 ;------------------------------------------------------------
                                   1664 ;Allocation info for local variables in function 'setCursor'
                                   1665 ;------------------------------------------------------------
                                   1666 ;y                         Allocated with name '_setCursor_PARM_2'
                                   1667 ;x                         Allocated to registers 
                                   1668 ;------------------------------------------------------------
                                   1669 ;	ecen4330lab7.c:398: void setCursor(u16 x, u16 y){
                                   1670 ;	-----------------------------------------
                                   1671 ;	 function setCursor
                                   1672 ;	-----------------------------------------
      00031D                       1673 _setCursor:
      00031D 85 82*08         [24] 1674 	mov	_cursor_x,dpl
      000320 85 83*09         [24] 1675 	mov	(_cursor_x + 1),dph
                                   1676 ;	ecen4330lab7.c:400: cursor_y = y;
      000323 85*00*0A         [24] 1677 	mov	_cursor_y,_setCursor_PARM_2
      000326 85*01*0B         [24] 1678 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   1679 ;	ecen4330lab7.c:401: }
      000329 22               [24] 1680 	ret
                                   1681 ;------------------------------------------------------------
                                   1682 ;Allocation info for local variables in function 'setTextColor'
                                   1683 ;------------------------------------------------------------
                                   1684 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   1685 ;x                         Allocated to registers 
                                   1686 ;------------------------------------------------------------
                                   1687 ;	ecen4330lab7.c:409: void setTextColor(u16 x, u16 y){
                                   1688 ;	-----------------------------------------
                                   1689 ;	 function setTextColor
                                   1690 ;	-----------------------------------------
      00032A                       1691 _setTextColor:
      00032A 85 82*0E         [24] 1692 	mov	_textcolor,dpl
      00032D 85 83*0F         [24] 1693 	mov	(_textcolor + 1),dph
                                   1694 ;	ecen4330lab7.c:411: textbgcolor = y;
      000330 85*00*10         [24] 1695 	mov	_textbgcolor,_setTextColor_PARM_2
      000333 85*01*11         [24] 1696 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   1697 ;	ecen4330lab7.c:412: }
      000336 22               [24] 1698 	ret
                                   1699 ;------------------------------------------------------------
                                   1700 ;Allocation info for local variables in function 'setTextSize'
                                   1701 ;------------------------------------------------------------
                                   1702 ;s                         Allocated to registers r7 
                                   1703 ;------------------------------------------------------------
                                   1704 ;	ecen4330lab7.c:420: void setTextSize(u8 s){
                                   1705 ;	-----------------------------------------
                                   1706 ;	 function setTextSize
                                   1707 ;	-----------------------------------------
      000337                       1708 _setTextSize:
                                   1709 ;	ecen4330lab7.c:421: if (s > 8) return;
      000337 E5 82            [12] 1710 	mov	a,dpl
      000339 FF               [12] 1711 	mov	r7,a
      00033A 24 F7            [12] 1712 	add	a,#0xff - 0x08
      00033C 50 01            [24] 1713 	jnc	00102$
      00033E 22               [24] 1714 	ret
      00033F                       1715 00102$:
                                   1716 ;	ecen4330lab7.c:422: textsize = (s>0) ? s : 1 ;
      00033F EF               [12] 1717 	mov	a,r7
      000340 60 06            [24] 1718 	jz	00105$
      000342 8F 06            [24] 1719 	mov	ar6,r7
      000344 7F 00            [12] 1720 	mov	r7,#0x00
      000346 80 04            [24] 1721 	sjmp	00106$
      000348                       1722 00105$:
      000348 7E 01            [12] 1723 	mov	r6,#0x01
      00034A 7F 00            [12] 1724 	mov	r7,#0x00
      00034C                       1725 00106$:
      00034C 8E*0C            [24] 1726 	mov	_textsize,r6
                                   1727 ;	ecen4330lab7.c:423: }
      00034E 22               [24] 1728 	ret
                                   1729 ;------------------------------------------------------------
                                   1730 ;Allocation info for local variables in function 'setRotation'
                                   1731 ;------------------------------------------------------------
                                   1732 ;flag                      Allocated to registers r7 
                                   1733 ;------------------------------------------------------------
                                   1734 ;	ecen4330lab7.c:431: void setRotation(u8 flag){
                                   1735 ;	-----------------------------------------
                                   1736 ;	 function setRotation
                                   1737 ;	-----------------------------------------
      00034F                       1738 _setRotation:
                                   1739 ;	ecen4330lab7.c:432: switch(flag) {
      00034F E5 82            [12] 1740 	mov	a,dpl
      000351 FF               [12] 1741 	mov	r7,a
      000352 24 FC            [12] 1742 	add	a,#0xff - 0x03
      000354 40 4E            [24] 1743 	jc	00105$
      000356 EF               [12] 1744 	mov	a,r7
      000357 2F               [12] 1745 	add	a,r7
                                   1746 ;	ecen4330lab7.c:433: case 0:
      000358 90r03r5C         [24] 1747 	mov	dptr,#00115$
      00035B 73               [24] 1748 	jmp	@a+dptr
      00035C                       1749 00115$:
      00035C 80 06            [24] 1750 	sjmp	00101$
      00035E 80 14            [24] 1751 	sjmp	00102$
      000360 80 22            [24] 1752 	sjmp	00103$
      000362 80 30            [24] 1753 	sjmp	00104$
      000364                       1754 00101$:
                                   1755 ;	ecen4330lab7.c:434: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000364 7F 48            [12] 1756 	mov	r7,#0x48
                                   1757 ;	ecen4330lab7.c:435: _width = TFTWIDTH;
      000366 75*12 F0         [24] 1758 	mov	__width,#0xf0
      000369 75*13 00         [24] 1759 	mov	(__width + 1),#0x00
                                   1760 ;	ecen4330lab7.c:436: _height = TFTHEIGHT;
      00036C 75*14 40         [24] 1761 	mov	__height,#0x40
      00036F 75*15 01         [24] 1762 	mov	(__height + 1),#0x01
                                   1763 ;	ecen4330lab7.c:437: break;
                                   1764 ;	ecen4330lab7.c:438: case 1:
      000372 80 3E            [24] 1765 	sjmp	00106$
      000374                       1766 00102$:
                                   1767 ;	ecen4330lab7.c:439: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000374 7F 28            [12] 1768 	mov	r7,#0x28
                                   1769 ;	ecen4330lab7.c:440: _width = TFTHEIGHT;
      000376 75*12 40         [24] 1770 	mov	__width,#0x40
      000379 75*13 01         [24] 1771 	mov	(__width + 1),#0x01
                                   1772 ;	ecen4330lab7.c:441: _height = TFTWIDTH;
      00037C 75*14 F0         [24] 1773 	mov	__height,#0xf0
      00037F 75*15 00         [24] 1774 	mov	(__height + 1),#0x00
                                   1775 ;	ecen4330lab7.c:442: break;
                                   1776 ;	ecen4330lab7.c:443: case 2:
      000382 80 2E            [24] 1777 	sjmp	00106$
      000384                       1778 00103$:
                                   1779 ;	ecen4330lab7.c:444: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000384 7F 88            [12] 1780 	mov	r7,#0x88
                                   1781 ;	ecen4330lab7.c:445: _width = TFTWIDTH;
      000386 75*12 F0         [24] 1782 	mov	__width,#0xf0
      000389 75*13 00         [24] 1783 	mov	(__width + 1),#0x00
                                   1784 ;	ecen4330lab7.c:446: _height = TFTHEIGHT;
      00038C 75*14 40         [24] 1785 	mov	__height,#0x40
      00038F 75*15 01         [24] 1786 	mov	(__height + 1),#0x01
                                   1787 ;	ecen4330lab7.c:447: break;
                                   1788 ;	ecen4330lab7.c:448: case 3:
      000392 80 1E            [24] 1789 	sjmp	00106$
      000394                       1790 00104$:
                                   1791 ;	ecen4330lab7.c:449: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000394 7F E8            [12] 1792 	mov	r7,#0xe8
                                   1793 ;	ecen4330lab7.c:450: _width = TFTHEIGHT;
      000396 75*12 40         [24] 1794 	mov	__width,#0x40
      000399 75*13 01         [24] 1795 	mov	(__width + 1),#0x01
                                   1796 ;	ecen4330lab7.c:451: _height = TFTWIDTH;
      00039C 75*14 F0         [24] 1797 	mov	__height,#0xf0
      00039F 75*15 00         [24] 1798 	mov	(__height + 1),#0x00
                                   1799 ;	ecen4330lab7.c:452: break;
                                   1800 ;	ecen4330lab7.c:453: default:
      0003A2 80 0E            [24] 1801 	sjmp	00106$
      0003A4                       1802 00105$:
                                   1803 ;	ecen4330lab7.c:454: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      0003A4 7F 48            [12] 1804 	mov	r7,#0x48
                                   1805 ;	ecen4330lab7.c:455: _width = TFTWIDTH;
      0003A6 75*12 F0         [24] 1806 	mov	__width,#0xf0
      0003A9 75*13 00         [24] 1807 	mov	(__width + 1),#0x00
                                   1808 ;	ecen4330lab7.c:456: _height = TFTHEIGHT;
      0003AC 75*14 40         [24] 1809 	mov	__height,#0x40
      0003AF 75*15 01         [24] 1810 	mov	(__height + 1),#0x01
                                   1811 ;	ecen4330lab7.c:458: }
      0003B2                       1812 00106$:
                                   1813 ;	ecen4330lab7.c:459: writeRegister8(ILI9341_MEMCONTROL, flag);
      0003B2 8F*00            [24] 1814 	mov	_writeRegister8_PARM_2,r7
      0003B4 75 82 36         [24] 1815 	mov	dpl,#0x36
                                   1816 ;	ecen4330lab7.c:460: }
      0003B7 02r00rA5         [24] 1817 	ljmp	_writeRegister8
                                   1818 ;------------------------------------------------------------
                                   1819 ;Allocation info for local variables in function 'setAddress'
                                   1820 ;------------------------------------------------------------
                                   1821 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1822 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1823 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1824 ;x1                        Allocated to registers r6 r7 
                                   1825 ;------------------------------------------------------------
                                   1826 ;	ecen4330lab7.c:469: void setAddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2){
                                   1827 ;	-----------------------------------------
                                   1828 ;	 function setAddress
                                   1829 ;	-----------------------------------------
      0003BA                       1830 _setAddress:
      0003BA AE 82            [24] 1831 	mov	r6,dpl
      0003BC AF 83            [24] 1832 	mov	r7,dph
                                   1833 ;	ecen4330lab7.c:470: write8Reg(0x2A);
                                   1834 ;	assignBit
      0003BE C2 B5            [12] 1835 	clr	_P3_5
                                   1836 ;	assignBit
      0003C0 D2 B4            [12] 1837 	setb	_P3_4
      0003C2 85*02 82         [24] 1838 	mov	dpl,_lcd_address
      0003C5 85*03 83         [24] 1839 	mov	dph,(_lcd_address + 1)
      0003C8 74 2A            [12] 1840 	mov	a,#0x2a
      0003CA F0               [24] 1841 	movx	@dptr,a
                                   1842 ;	assignBit
      0003CB C2 B4            [12] 1843 	clr	_P3_4
                                   1844 ;	ecen4330lab7.c:471: write8Data(x1 >> 8);
                                   1845 ;	assignBit
      0003CD D2 B5            [12] 1846 	setb	_P3_5
                                   1847 ;	assignBit
      0003CF D2 B4            [12] 1848 	setb	_P3_4
      0003D1 85*02 82         [24] 1849 	mov	dpl,_lcd_address
      0003D4 85*03 83         [24] 1850 	mov	dph,(_lcd_address + 1)
      0003D7 8F 05            [24] 1851 	mov	ar5,r7
      0003D9 ED               [12] 1852 	mov	a,r5
      0003DA F0               [24] 1853 	movx	@dptr,a
                                   1854 ;	assignBit
      0003DB C2 B4            [12] 1855 	clr	_P3_4
                                   1856 ;	ecen4330lab7.c:472: write8Data(x1);
                                   1857 ;	assignBit
      0003DD D2 B5            [12] 1858 	setb	_P3_5
                                   1859 ;	assignBit
      0003DF D2 B4            [12] 1860 	setb	_P3_4
      0003E1 85*02 82         [24] 1861 	mov	dpl,_lcd_address
      0003E4 85*03 83         [24] 1862 	mov	dph,(_lcd_address + 1)
      0003E7 EE               [12] 1863 	mov	a,r6
      0003E8 F0               [24] 1864 	movx	@dptr,a
                                   1865 ;	assignBit
      0003E9 C2 B4            [12] 1866 	clr	_P3_4
                                   1867 ;	ecen4330lab7.c:473: write8Data(x2 >> 8);
                                   1868 ;	assignBit
      0003EB D2 B5            [12] 1869 	setb	_P3_5
                                   1870 ;	assignBit
      0003ED D2 B4            [12] 1871 	setb	_P3_4
      0003EF 85*02 82         [24] 1872 	mov	dpl,_lcd_address
      0003F2 85*03 83         [24] 1873 	mov	dph,(_lcd_address + 1)
      0003F5 E5*03            [12] 1874 	mov	a,(_setAddress_PARM_3 + 1)
      0003F7 F0               [24] 1875 	movx	@dptr,a
                                   1876 ;	assignBit
      0003F8 C2 B4            [12] 1877 	clr	_P3_4
                                   1878 ;	ecen4330lab7.c:474: write8Data(x2);
                                   1879 ;	assignBit
      0003FA D2 B5            [12] 1880 	setb	_P3_5
                                   1881 ;	assignBit
      0003FC D2 B4            [12] 1882 	setb	_P3_4
      0003FE 85*02 82         [24] 1883 	mov	dpl,_lcd_address
      000401 85*03 83         [24] 1884 	mov	dph,(_lcd_address + 1)
      000404 E5*02            [12] 1885 	mov	a,_setAddress_PARM_3
      000406 F0               [24] 1886 	movx	@dptr,a
                                   1887 ;	assignBit
      000407 C2 B4            [12] 1888 	clr	_P3_4
                                   1889 ;	ecen4330lab7.c:475: write8Reg(0x2B);
                                   1890 ;	assignBit
      000409 C2 B5            [12] 1891 	clr	_P3_5
                                   1892 ;	assignBit
      00040B D2 B4            [12] 1893 	setb	_P3_4
      00040D 85*02 82         [24] 1894 	mov	dpl,_lcd_address
      000410 85*03 83         [24] 1895 	mov	dph,(_lcd_address + 1)
      000413 74 2B            [12] 1896 	mov	a,#0x2b
      000415 F0               [24] 1897 	movx	@dptr,a
                                   1898 ;	assignBit
      000416 C2 B4            [12] 1899 	clr	_P3_4
                                   1900 ;	ecen4330lab7.c:476: write8Data(y1 >> 8);
                                   1901 ;	assignBit
      000418 D2 B5            [12] 1902 	setb	_P3_5
                                   1903 ;	assignBit
      00041A D2 B4            [12] 1904 	setb	_P3_4
      00041C 85*02 82         [24] 1905 	mov	dpl,_lcd_address
      00041F 85*03 83         [24] 1906 	mov	dph,(_lcd_address + 1)
      000422 E5*01            [12] 1907 	mov	a,(_setAddress_PARM_2 + 1)
      000424 F0               [24] 1908 	movx	@dptr,a
                                   1909 ;	assignBit
      000425 C2 B4            [12] 1910 	clr	_P3_4
                                   1911 ;	ecen4330lab7.c:477: write8Data(y1);
                                   1912 ;	assignBit
      000427 D2 B5            [12] 1913 	setb	_P3_5
                                   1914 ;	assignBit
      000429 D2 B4            [12] 1915 	setb	_P3_4
      00042B 85*02 82         [24] 1916 	mov	dpl,_lcd_address
      00042E 85*03 83         [24] 1917 	mov	dph,(_lcd_address + 1)
      000431 E5*00            [12] 1918 	mov	a,_setAddress_PARM_2
      000433 F0               [24] 1919 	movx	@dptr,a
                                   1920 ;	assignBit
      000434 C2 B4            [12] 1921 	clr	_P3_4
                                   1922 ;	ecen4330lab7.c:478: write8Data(y2 >> 8);
                                   1923 ;	assignBit
      000436 D2 B5            [12] 1924 	setb	_P3_5
                                   1925 ;	assignBit
      000438 D2 B4            [12] 1926 	setb	_P3_4
      00043A 85*02 82         [24] 1927 	mov	dpl,_lcd_address
      00043D 85*03 83         [24] 1928 	mov	dph,(_lcd_address + 1)
      000440 E5*05            [12] 1929 	mov	a,(_setAddress_PARM_4 + 1)
      000442 F0               [24] 1930 	movx	@dptr,a
                                   1931 ;	assignBit
      000443 C2 B4            [12] 1932 	clr	_P3_4
                                   1933 ;	ecen4330lab7.c:479: write8Data(y2);
                                   1934 ;	assignBit
      000445 D2 B5            [12] 1935 	setb	_P3_5
                                   1936 ;	assignBit
      000447 D2 B4            [12] 1937 	setb	_P3_4
      000449 85*02 82         [24] 1938 	mov	dpl,_lcd_address
      00044C 85*03 83         [24] 1939 	mov	dph,(_lcd_address + 1)
      00044F E5*04            [12] 1940 	mov	a,_setAddress_PARM_4
      000451 F0               [24] 1941 	movx	@dptr,a
                                   1942 ;	assignBit
      000452 C2 B4            [12] 1943 	clr	_P3_4
                                   1944 ;	ecen4330lab7.c:480: }
      000454 22               [24] 1945 	ret
                                   1946 ;------------------------------------------------------------
                                   1947 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   1948 ;------------------------------------------------------------
                                   1949 ;	ecen4330lab7.c:488: void TFT_LCD_INIT(void){
                                   1950 ;	-----------------------------------------
                                   1951 ;	 function TFT_LCD_INIT
                                   1952 ;	-----------------------------------------
      000455                       1953 _TFT_LCD_INIT:
                                   1954 ;	ecen4330lab7.c:489: _width = TFTWIDTH;
      000455 75*12 F0         [24] 1955 	mov	__width,#0xf0
      000458 75*13 00         [24] 1956 	mov	(__width + 1),#0x00
                                   1957 ;	ecen4330lab7.c:490: _height = TFTHEIGHT;
      00045B 75*14 40         [24] 1958 	mov	__height,#0x40
      00045E 75*15 01         [24] 1959 	mov	(__height + 1),#0x01
                                   1960 ;	ecen4330lab7.c:492: IOM = 0;
                                   1961 ;	assignBit
      000461 C2 B4            [12] 1962 	clr	_P3_4
                                   1963 ;	ecen4330lab7.c:493: CD = 1;
                                   1964 ;	assignBit
      000463 D2 B5            [12] 1965 	setb	_P3_5
                                   1966 ;	ecen4330lab7.c:495: write8Reg(0x00);
                                   1967 ;	assignBit
      000465 C2 B5            [12] 1968 	clr	_P3_5
                                   1969 ;	assignBit
      000467 D2 B4            [12] 1970 	setb	_P3_4
      000469 85*02 82         [24] 1971 	mov	dpl,_lcd_address
      00046C 85*03 83         [24] 1972 	mov	dph,(_lcd_address + 1)
      00046F E4               [12] 1973 	clr	a
      000470 F0               [24] 1974 	movx	@dptr,a
                                   1975 ;	assignBit
      000471 C2 B4            [12] 1976 	clr	_P3_4
                                   1977 ;	ecen4330lab7.c:496: write8Data(0x00);
                                   1978 ;	assignBit
      000473 D2 B5            [12] 1979 	setb	_P3_5
                                   1980 ;	assignBit
      000475 D2 B4            [12] 1981 	setb	_P3_4
      000477 85*02 82         [24] 1982 	mov	dpl,_lcd_address
      00047A 85*03 83         [24] 1983 	mov	dph,(_lcd_address + 1)
      00047D E4               [12] 1984 	clr	a
      00047E F0               [24] 1985 	movx	@dptr,a
                                   1986 ;	assignBit
      00047F C2 B4            [12] 1987 	clr	_P3_4
                                   1988 ;	ecen4330lab7.c:497: write8Data(0x00);
                                   1989 ;	assignBit
      000481 D2 B5            [12] 1990 	setb	_P3_5
                                   1991 ;	assignBit
      000483 D2 B4            [12] 1992 	setb	_P3_4
      000485 85*02 82         [24] 1993 	mov	dpl,_lcd_address
      000488 85*03 83         [24] 1994 	mov	dph,(_lcd_address + 1)
      00048B E4               [12] 1995 	clr	a
      00048C F0               [24] 1996 	movx	@dptr,a
                                   1997 ;	assignBit
      00048D C2 B4            [12] 1998 	clr	_P3_4
                                   1999 ;	ecen4330lab7.c:498: write8Data(0x00);
                                   2000 ;	assignBit
      00048F D2 B5            [12] 2001 	setb	_P3_5
                                   2002 ;	assignBit
      000491 D2 B4            [12] 2003 	setb	_P3_4
      000493 85*02 82         [24] 2004 	mov	dpl,_lcd_address
      000496 85*03 83         [24] 2005 	mov	dph,(_lcd_address + 1)
      000499 E4               [12] 2006 	clr	a
      00049A F0               [24] 2007 	movx	@dptr,a
                                   2008 ;	assignBit
      00049B C2 B4            [12] 2009 	clr	_P3_4
                                   2010 ;	ecen4330lab7.c:499: delay(200);
      00049D 90 00 C8         [24] 2011 	mov	dptr,#0x00c8
      0004A0 12r00r79         [24] 2012 	lcall	_delay
                                   2013 ;	ecen4330lab7.c:501: writeRegister8(ILI9341_SOFTRESET, 0);
      0004A3 75*00 00         [24] 2014 	mov	_writeRegister8_PARM_2,#0x00
      0004A6 75 82 01         [24] 2015 	mov	dpl,#0x01
      0004A9 12r00rA5         [24] 2016 	lcall	_writeRegister8
                                   2017 ;	ecen4330lab7.c:502: delay(50);
      0004AC 90 00 32         [24] 2018 	mov	dptr,#0x0032
      0004AF 12r00r79         [24] 2019 	lcall	_delay
                                   2020 ;	ecen4330lab7.c:504: writeRegister8(ILI9341_DISPLAYOFF, 0);
      0004B2 75*00 00         [24] 2021 	mov	_writeRegister8_PARM_2,#0x00
      0004B5 75 82 28         [24] 2022 	mov	dpl,#0x28
      0004B8 12r00rA5         [24] 2023 	lcall	_writeRegister8
                                   2024 ;	ecen4330lab7.c:505: delay(10);
      0004BB 90 00 0A         [24] 2025 	mov	dptr,#0x000a
      0004BE 12r00r79         [24] 2026 	lcall	_delay
                                   2027 ;	ecen4330lab7.c:507: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      0004C1 75*00 23         [24] 2028 	mov	_writeRegister8_PARM_2,#0x23
      0004C4 75 82 C0         [24] 2029 	mov	dpl,#0xc0
      0004C7 12r00rA5         [24] 2030 	lcall	_writeRegister8
                                   2031 ;	ecen4330lab7.c:508: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      0004CA 75*00 11         [24] 2032 	mov	_writeRegister8_PARM_2,#0x11
      0004CD 75 82 C1         [24] 2033 	mov	dpl,#0xc1
      0004D0 12r00rA5         [24] 2034 	lcall	_writeRegister8
                                   2035 ;	ecen4330lab7.c:509: write8Reg(ILI9341_VCOMCONTROL1);
                                   2036 ;	assignBit
      0004D3 C2 B5            [12] 2037 	clr	_P3_5
                                   2038 ;	assignBit
      0004D5 D2 B4            [12] 2039 	setb	_P3_4
      0004D7 85*02 82         [24] 2040 	mov	dpl,_lcd_address
      0004DA 85*03 83         [24] 2041 	mov	dph,(_lcd_address + 1)
      0004DD 74 C5            [12] 2042 	mov	a,#0xc5
      0004DF F0               [24] 2043 	movx	@dptr,a
                                   2044 ;	assignBit
      0004E0 C2 B4            [12] 2045 	clr	_P3_4
                                   2046 ;	ecen4330lab7.c:510: write8Data(0x3d);
                                   2047 ;	assignBit
      0004E2 D2 B5            [12] 2048 	setb	_P3_5
                                   2049 ;	assignBit
      0004E4 D2 B4            [12] 2050 	setb	_P3_4
      0004E6 85*02 82         [24] 2051 	mov	dpl,_lcd_address
      0004E9 85*03 83         [24] 2052 	mov	dph,(_lcd_address + 1)
      0004EC 74 3D            [12] 2053 	mov	a,#0x3d
      0004EE F0               [24] 2054 	movx	@dptr,a
                                   2055 ;	assignBit
      0004EF C2 B4            [12] 2056 	clr	_P3_4
                                   2057 ;	ecen4330lab7.c:511: write8Data(0x30);
                                   2058 ;	assignBit
      0004F1 D2 B5            [12] 2059 	setb	_P3_5
                                   2060 ;	assignBit
      0004F3 D2 B4            [12] 2061 	setb	_P3_4
      0004F5 85*02 82         [24] 2062 	mov	dpl,_lcd_address
      0004F8 85*03 83         [24] 2063 	mov	dph,(_lcd_address + 1)
      0004FB 74 30            [12] 2064 	mov	a,#0x30
      0004FD F0               [24] 2065 	movx	@dptr,a
                                   2066 ;	assignBit
      0004FE C2 B4            [12] 2067 	clr	_P3_4
                                   2068 ;	ecen4330lab7.c:512: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      000500 75*00 AA         [24] 2069 	mov	_writeRegister8_PARM_2,#0xaa
      000503 75 82 C7         [24] 2070 	mov	dpl,#0xc7
      000506 12r00rA5         [24] 2071 	lcall	_writeRegister8
                                   2072 ;	ecen4330lab7.c:513: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000509 75*00 88         [24] 2073 	mov	_writeRegister8_PARM_2,#0x88
      00050C 75 82 36         [24] 2074 	mov	dpl,#0x36
      00050F 12r00rA5         [24] 2075 	lcall	_writeRegister8
                                   2076 ;	ecen4330lab7.c:514: write8Reg(ILI9341_PIXELFORMAT);
                                   2077 ;	assignBit
      000512 C2 B5            [12] 2078 	clr	_P3_5
                                   2079 ;	assignBit
      000514 D2 B4            [12] 2080 	setb	_P3_4
      000516 85*02 82         [24] 2081 	mov	dpl,_lcd_address
      000519 85*03 83         [24] 2082 	mov	dph,(_lcd_address + 1)
      00051C 74 3A            [12] 2083 	mov	a,#0x3a
      00051E F0               [24] 2084 	movx	@dptr,a
                                   2085 ;	assignBit
      00051F C2 B4            [12] 2086 	clr	_P3_4
                                   2087 ;	ecen4330lab7.c:515: write8Data(0x55);
                                   2088 ;	assignBit
      000521 D2 B5            [12] 2089 	setb	_P3_5
                                   2090 ;	assignBit
      000523 D2 B4            [12] 2091 	setb	_P3_4
      000525 85*02 82         [24] 2092 	mov	dpl,_lcd_address
      000528 85*03 83         [24] 2093 	mov	dph,(_lcd_address + 1)
      00052B 74 55            [12] 2094 	mov	a,#0x55
      00052D F0               [24] 2095 	movx	@dptr,a
                                   2096 ;	assignBit
      00052E C2 B4            [12] 2097 	clr	_P3_4
                                   2098 ;	ecen4330lab7.c:516: write8Data(0x00);
                                   2099 ;	assignBit
      000530 D2 B5            [12] 2100 	setb	_P3_5
                                   2101 ;	assignBit
      000532 D2 B4            [12] 2102 	setb	_P3_4
      000534 85*02 82         [24] 2103 	mov	dpl,_lcd_address
      000537 85*03 83         [24] 2104 	mov	dph,(_lcd_address + 1)
      00053A E4               [12] 2105 	clr	a
      00053B F0               [24] 2106 	movx	@dptr,a
                                   2107 ;	assignBit
      00053C C2 B4            [12] 2108 	clr	_P3_4
                                   2109 ;	ecen4330lab7.c:517: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      00053E 75*00 1B         [24] 2110 	mov	_writeRegister16_PARM_2,#0x1b
      000541 75*01 00         [24] 2111 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      000544 90 00 B1         [24] 2112 	mov	dptr,#0x00b1
      000547 12r00rC5         [24] 2113 	lcall	_writeRegister16
                                   2114 ;	ecen4330lab7.c:518: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      00054A 75*00 07         [24] 2115 	mov	_writeRegister8_PARM_2,#0x07
      00054D 75 82 B7         [24] 2116 	mov	dpl,#0xb7
      000550 12r00rA5         [24] 2117 	lcall	_writeRegister8
                                   2118 ;	ecen4330lab7.c:519: writeRegister8(ILI9341_SLEEPOUT, 0);
      000553 75*00 00         [24] 2119 	mov	_writeRegister8_PARM_2,#0x00
      000556 75 82 11         [24] 2120 	mov	dpl,#0x11
      000559 12r00rA5         [24] 2121 	lcall	_writeRegister8
                                   2122 ;	ecen4330lab7.c:520: delay(150);
      00055C 90 00 96         [24] 2123 	mov	dptr,#0x0096
      00055F 12r00r79         [24] 2124 	lcall	_delay
                                   2125 ;	ecen4330lab7.c:522: writeRegister8(ILI9341_DISPLAYON, 0);
      000562 75*00 00         [24] 2126 	mov	_writeRegister8_PARM_2,#0x00
      000565 75 82 29         [24] 2127 	mov	dpl,#0x29
      000568 12r00rA5         [24] 2128 	lcall	_writeRegister8
                                   2129 ;	ecen4330lab7.c:523: delay(500);
      00056B 90 01 F4         [24] 2130 	mov	dptr,#0x01f4
      00056E 12r00r79         [24] 2131 	lcall	_delay
                                   2132 ;	ecen4330lab7.c:525: setAddress(0,0,_width-1,_height-1);
      000571 E5*12            [12] 2133 	mov	a,__width
      000573 24 FF            [12] 2134 	add	a,#0xff
      000575 F5*02            [12] 2135 	mov	_setAddress_PARM_3,a
      000577 E5*13            [12] 2136 	mov	a,(__width + 1)
      000579 34 FF            [12] 2137 	addc	a,#0xff
      00057B F5*03            [12] 2138 	mov	(_setAddress_PARM_3 + 1),a
      00057D E5*14            [12] 2139 	mov	a,__height
      00057F 24 FF            [12] 2140 	add	a,#0xff
      000581 F5*04            [12] 2141 	mov	_setAddress_PARM_4,a
      000583 E5*15            [12] 2142 	mov	a,(__height + 1)
      000585 34 FF            [12] 2143 	addc	a,#0xff
      000587 F5*05            [12] 2144 	mov	(_setAddress_PARM_4 + 1),a
      000589 E4               [12] 2145 	clr	a
      00058A F5*00            [12] 2146 	mov	_setAddress_PARM_2,a
      00058C F5*01            [12] 2147 	mov	(_setAddress_PARM_2 + 1),a
      00058E 90 00 00         [24] 2148 	mov	dptr,#0x0000
                                   2149 ;	ecen4330lab7.c:526: }
      000591 02r03rBA         [24] 2150 	ljmp	_setAddress
                                   2151 ;------------------------------------------------------------
                                   2152 ;Allocation info for local variables in function 'drawPixel'
                                   2153 ;------------------------------------------------------------
                                   2154 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2155 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2156 ;x3                        Allocated to registers r6 r7 
                                   2157 ;------------------------------------------------------------
                                   2158 ;	ecen4330lab7.c:534: void drawPixel(u16 x3,u16 y3,u16 color1)
                                   2159 ;	-----------------------------------------
                                   2160 ;	 function drawPixel
                                   2161 ;	-----------------------------------------
      000594                       2162 _drawPixel:
      000594 AE 82            [24] 2163 	mov	r6,dpl
      000596 AF 83            [24] 2164 	mov	r7,dph
                                   2165 ;	ecen4330lab7.c:536: setAddress(x3,y3,x3+1,y3+1);
      000598 74 01            [12] 2166 	mov	a,#0x01
      00059A 2E               [12] 2167 	add	a,r6
      00059B F5*02            [12] 2168 	mov	_setAddress_PARM_3,a
      00059D E4               [12] 2169 	clr	a
      00059E 3F               [12] 2170 	addc	a,r7
      00059F F5*03            [12] 2171 	mov	(_setAddress_PARM_3 + 1),a
      0005A1 74 01            [12] 2172 	mov	a,#0x01
      0005A3 25*44            [12] 2173 	add	a,_drawPixel_PARM_2
      0005A5 F5*04            [12] 2174 	mov	_setAddress_PARM_4,a
      0005A7 E4               [12] 2175 	clr	a
      0005A8 35*45            [12] 2176 	addc	a,(_drawPixel_PARM_2 + 1)
      0005AA F5*05            [12] 2177 	mov	(_setAddress_PARM_4 + 1),a
      0005AC 85*44*00         [24] 2178 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      0005AF 85*45*01         [24] 2179 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      0005B2 8E 82            [24] 2180 	mov	dpl,r6
      0005B4 8F 83            [24] 2181 	mov	dph,r7
      0005B6 12r03rBA         [24] 2182 	lcall	_setAddress
                                   2183 ;	ecen4330lab7.c:537: CD=0; 
                                   2184 ;	assignBit
      0005B9 C2 B5            [12] 2185 	clr	_P3_5
                                   2186 ;	ecen4330lab7.c:538: write8(0x2C);
                                   2187 ;	assignBit
      0005BB D2 B4            [12] 2188 	setb	_P3_4
      0005BD 85*02 82         [24] 2189 	mov	dpl,_lcd_address
      0005C0 85*03 83         [24] 2190 	mov	dph,(_lcd_address + 1)
      0005C3 74 2C            [12] 2191 	mov	a,#0x2c
      0005C5 F0               [24] 2192 	movx	@dptr,a
                                   2193 ;	assignBit
      0005C6 C2 B4            [12] 2194 	clr	_P3_4
                                   2195 ;	ecen4330lab7.c:539: CD = 1;
                                   2196 ;	assignBit
      0005C8 D2 B5            [12] 2197 	setb	_P3_5
                                   2198 ;	ecen4330lab7.c:540: write8(color1>>8);
                                   2199 ;	assignBit
      0005CA D2 B4            [12] 2200 	setb	_P3_4
      0005CC 85*02 82         [24] 2201 	mov	dpl,_lcd_address
      0005CF 85*03 83         [24] 2202 	mov	dph,(_lcd_address + 1)
      0005D2 E5*47            [12] 2203 	mov	a,(_drawPixel_PARM_3 + 1)
      0005D4 F0               [24] 2204 	movx	@dptr,a
                                   2205 ;	assignBit
      0005D5 C2 B4            [12] 2206 	clr	_P3_4
                                   2207 ;	ecen4330lab7.c:541: write8(color1);
                                   2208 ;	assignBit
      0005D7 D2 B4            [12] 2209 	setb	_P3_4
      0005D9 85*02 82         [24] 2210 	mov	dpl,_lcd_address
      0005DC 85*03 83         [24] 2211 	mov	dph,(_lcd_address + 1)
      0005DF E5*46            [12] 2212 	mov	a,_drawPixel_PARM_3
      0005E1 F0               [24] 2213 	movx	@dptr,a
                                   2214 ;	assignBit
      0005E2 C2 B4            [12] 2215 	clr	_P3_4
                                   2216 ;	ecen4330lab7.c:542: }
      0005E4 22               [24] 2217 	ret
                                   2218 ;------------------------------------------------------------
                                   2219 ;Allocation info for local variables in function 'fillRect'
                                   2220 ;------------------------------------------------------------
                                   2221 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2222 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2223 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2224 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2225 ;x                         Allocated to registers 
                                   2226 ;------------------------------------------------------------
                                   2227 ;	ecen4330lab7.c:550: void fillRect(u16 x,u16 y,u16 w,u16 h,u16 color){
                                   2228 ;	-----------------------------------------
                                   2229 ;	 function fillRect
                                   2230 ;	-----------------------------------------
      0005E5                       2231 _fillRect:
      0005E5 AE 82            [24] 2232 	mov	r6,dpl
      0005E7 AF 83            [24] 2233 	mov	r7,dph
                                   2234 ;	ecen4330lab7.c:551: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      0005E9 C3               [12] 2235 	clr	c
      0005EA EE               [12] 2236 	mov	a,r6
      0005EB 94 F0            [12] 2237 	subb	a,#0xf0
      0005ED EF               [12] 2238 	mov	a,r7
      0005EE 94 00            [12] 2239 	subb	a,#0x00
      0005F0 50 0B            [24] 2240 	jnc	00101$
      0005F2 C3               [12] 2241 	clr	c
      0005F3 E5*48            [12] 2242 	mov	a,_fillRect_PARM_2
      0005F5 94 40            [12] 2243 	subb	a,#0x40
      0005F7 E5*49            [12] 2244 	mov	a,(_fillRect_PARM_2 + 1)
      0005F9 94 01            [12] 2245 	subb	a,#0x01
      0005FB 40 01            [24] 2246 	jc	00102$
      0005FD                       2247 00101$:
                                   2248 ;	ecen4330lab7.c:553: return;
      0005FD 22               [24] 2249 	ret
      0005FE                       2250 00102$:
                                   2251 ;	ecen4330lab7.c:556: if ((x+w-1) >= TFTWIDTH)
      0005FE E5*4A            [12] 2252 	mov	a,_fillRect_PARM_3
      000600 2E               [12] 2253 	add	a,r6
      000601 FC               [12] 2254 	mov	r4,a
      000602 E5*4B            [12] 2255 	mov	a,(_fillRect_PARM_3 + 1)
      000604 3F               [12] 2256 	addc	a,r7
      000605 FD               [12] 2257 	mov	r5,a
      000606 1C               [12] 2258 	dec	r4
      000607 BC FF 01         [24] 2259 	cjne	r4,#0xff,00161$
      00060A 1D               [12] 2260 	dec	r5
      00060B                       2261 00161$:
      00060B C3               [12] 2262 	clr	c
      00060C EC               [12] 2263 	mov	a,r4
      00060D 94 F0            [12] 2264 	subb	a,#0xf0
      00060F ED               [12] 2265 	mov	a,r5
      000610 94 00            [12] 2266 	subb	a,#0x00
      000612 40 0A            [24] 2267 	jc	00105$
                                   2268 ;	ecen4330lab7.c:558: w = TFTWIDTH-x;
      000614 74 F0            [12] 2269 	mov	a,#0xf0
      000616 C3               [12] 2270 	clr	c
      000617 9E               [12] 2271 	subb	a,r6
      000618 F5*4A            [12] 2272 	mov	_fillRect_PARM_3,a
      00061A E4               [12] 2273 	clr	a
      00061B 9F               [12] 2274 	subb	a,r7
      00061C F5*4B            [12] 2275 	mov	(_fillRect_PARM_3 + 1),a
      00061E                       2276 00105$:
                                   2277 ;	ecen4330lab7.c:561: if ((y+h-1) >= TFTHEIGHT)
      00061E E5*4C            [12] 2278 	mov	a,_fillRect_PARM_4
      000620 25*48            [12] 2279 	add	a,_fillRect_PARM_2
      000622 FC               [12] 2280 	mov	r4,a
      000623 E5*4D            [12] 2281 	mov	a,(_fillRect_PARM_4 + 1)
      000625 35*49            [12] 2282 	addc	a,(_fillRect_PARM_2 + 1)
      000627 FD               [12] 2283 	mov	r5,a
      000628 1C               [12] 2284 	dec	r4
      000629 BC FF 01         [24] 2285 	cjne	r4,#0xff,00163$
      00062C 1D               [12] 2286 	dec	r5
      00062D                       2287 00163$:
      00062D C3               [12] 2288 	clr	c
      00062E EC               [12] 2289 	mov	a,r4
      00062F 94 40            [12] 2290 	subb	a,#0x40
      000631 ED               [12] 2291 	mov	a,r5
      000632 94 01            [12] 2292 	subb	a,#0x01
      000634 40 0D            [24] 2293 	jc	00107$
                                   2294 ;	ecen4330lab7.c:563: h = TFTHEIGHT-y;
      000636 74 40            [12] 2295 	mov	a,#0x40
      000638 C3               [12] 2296 	clr	c
      000639 95*48            [12] 2297 	subb	a,_fillRect_PARM_2
      00063B F5*4C            [12] 2298 	mov	_fillRect_PARM_4,a
      00063D 74 01            [12] 2299 	mov	a,#0x01
      00063F 95*49            [12] 2300 	subb	a,(_fillRect_PARM_2 + 1)
      000641 F5*4D            [12] 2301 	mov	(_fillRect_PARM_4 + 1),a
      000643                       2302 00107$:
                                   2303 ;	ecen4330lab7.c:566: setAddress(x, y, x+w-1, y+h-1);
      000643 E5*4A            [12] 2304 	mov	a,_fillRect_PARM_3
      000645 2E               [12] 2305 	add	a,r6
      000646 FC               [12] 2306 	mov	r4,a
      000647 E5*4B            [12] 2307 	mov	a,(_fillRect_PARM_3 + 1)
      000649 3F               [12] 2308 	addc	a,r7
      00064A FD               [12] 2309 	mov	r5,a
      00064B EC               [12] 2310 	mov	a,r4
      00064C 24 FF            [12] 2311 	add	a,#0xff
      00064E F5*02            [12] 2312 	mov	_setAddress_PARM_3,a
      000650 ED               [12] 2313 	mov	a,r5
      000651 34 FF            [12] 2314 	addc	a,#0xff
      000653 F5*03            [12] 2315 	mov	(_setAddress_PARM_3 + 1),a
      000655 E5*4C            [12] 2316 	mov	a,_fillRect_PARM_4
      000657 25*48            [12] 2317 	add	a,_fillRect_PARM_2
      000659 FC               [12] 2318 	mov	r4,a
      00065A E5*4D            [12] 2319 	mov	a,(_fillRect_PARM_4 + 1)
      00065C 35*49            [12] 2320 	addc	a,(_fillRect_PARM_2 + 1)
      00065E FD               [12] 2321 	mov	r5,a
      00065F EC               [12] 2322 	mov	a,r4
      000660 24 FF            [12] 2323 	add	a,#0xff
      000662 F5*04            [12] 2324 	mov	_setAddress_PARM_4,a
      000664 ED               [12] 2325 	mov	a,r5
      000665 34 FF            [12] 2326 	addc	a,#0xff
      000667 F5*05            [12] 2327 	mov	(_setAddress_PARM_4 + 1),a
      000669 85*48*00         [24] 2328 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      00066C 85*49*01         [24] 2329 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      00066F 8E 82            [24] 2330 	mov	dpl,r6
      000671 8F 83            [24] 2331 	mov	dph,r7
      000673 12r03rBA         [24] 2332 	lcall	_setAddress
                                   2333 ;	ecen4330lab7.c:567: write8Reg(0x2C);
                                   2334 ;	assignBit
      000676 C2 B5            [12] 2335 	clr	_P3_5
                                   2336 ;	assignBit
      000678 D2 B4            [12] 2337 	setb	_P3_4
      00067A 85*02 82         [24] 2338 	mov	dpl,_lcd_address
      00067D 85*03 83         [24] 2339 	mov	dph,(_lcd_address + 1)
      000680 74 2C            [12] 2340 	mov	a,#0x2c
      000682 F0               [24] 2341 	movx	@dptr,a
                                   2342 ;	assignBit
      000683 C2 B4            [12] 2343 	clr	_P3_4
                                   2344 ;	ecen4330lab7.c:568: CD = 1;
                                   2345 ;	assignBit
      000685 D2 B5            [12] 2346 	setb	_P3_5
                                   2347 ;	ecen4330lab7.c:569: for(y=h; y>0; y--)
      000687 AF*4F            [24] 2348 	mov	r7,(_fillRect_PARM_5 + 1)
      000689 AD*4C            [24] 2349 	mov	r5,_fillRect_PARM_4
      00068B AE*4D            [24] 2350 	mov	r6,(_fillRect_PARM_4 + 1)
      00068D                       2351 00114$:
      00068D ED               [12] 2352 	mov	a,r5
      00068E 4E               [12] 2353 	orl	a,r6
      00068F 60 30            [24] 2354 	jz	00116$
                                   2355 ;	ecen4330lab7.c:571: for(x=w; x>0; x--)
      000691 AB*4A            [24] 2356 	mov	r3,_fillRect_PARM_3
      000693 AC*4B            [24] 2357 	mov	r4,(_fillRect_PARM_3 + 1)
      000695                       2358 00111$:
      000695 EB               [12] 2359 	mov	a,r3
      000696 4C               [12] 2360 	orl	a,r4
      000697 60 21            [24] 2361 	jz	00115$
                                   2362 ;	ecen4330lab7.c:573: write8(color>>8); 
                                   2363 ;	assignBit
      000699 D2 B4            [12] 2364 	setb	_P3_4
      00069B 85*02 82         [24] 2365 	mov	dpl,_lcd_address
      00069E 85*03 83         [24] 2366 	mov	dph,(_lcd_address + 1)
      0006A1 EF               [12] 2367 	mov	a,r7
      0006A2 F0               [24] 2368 	movx	@dptr,a
                                   2369 ;	assignBit
      0006A3 C2 B4            [12] 2370 	clr	_P3_4
                                   2371 ;	ecen4330lab7.c:574: write8(color);
                                   2372 ;	assignBit
      0006A5 D2 B4            [12] 2373 	setb	_P3_4
      0006A7 85*02 82         [24] 2374 	mov	dpl,_lcd_address
      0006AA 85*03 83         [24] 2375 	mov	dph,(_lcd_address + 1)
      0006AD E5*4E            [12] 2376 	mov	a,_fillRect_PARM_5
      0006AF FA               [12] 2377 	mov	r2,a
      0006B0 F0               [24] 2378 	movx	@dptr,a
                                   2379 ;	assignBit
      0006B1 C2 B4            [12] 2380 	clr	_P3_4
                                   2381 ;	ecen4330lab7.c:571: for(x=w; x>0; x--)
      0006B3 1B               [12] 2382 	dec	r3
      0006B4 BB FF 01         [24] 2383 	cjne	r3,#0xff,00167$
      0006B7 1C               [12] 2384 	dec	r4
      0006B8                       2385 00167$:
      0006B8 80 DB            [24] 2386 	sjmp	00111$
      0006BA                       2387 00115$:
                                   2388 ;	ecen4330lab7.c:569: for(y=h; y>0; y--)
      0006BA 1D               [12] 2389 	dec	r5
      0006BB BD FF 01         [24] 2390 	cjne	r5,#0xff,00168$
      0006BE 1E               [12] 2391 	dec	r6
      0006BF                       2392 00168$:
      0006BF 80 CC            [24] 2393 	sjmp	00114$
      0006C1                       2394 00116$:
                                   2395 ;	ecen4330lab7.c:577: }
      0006C1 22               [24] 2396 	ret
                                   2397 ;------------------------------------------------------------
                                   2398 ;Allocation info for local variables in function 'fillScreen'
                                   2399 ;------------------------------------------------------------
                                   2400 ;Color                     Allocated to registers r6 r7 
                                   2401 ;len                       Allocated to registers 
                                   2402 ;blocks                    Allocated to registers r4 r7 
                                   2403 ;i                         Allocated to registers r3 
                                   2404 ;hi                        Allocated to registers r5 
                                   2405 ;lo                        Allocated to registers r6 
                                   2406 ;------------------------------------------------------------
                                   2407 ;	ecen4330lab7.c:585: void fillScreen(unsigned int Color){
                                   2408 ;	-----------------------------------------
                                   2409 ;	 function fillScreen
                                   2410 ;	-----------------------------------------
      0006C2                       2411 _fillScreen:
      0006C2 AE 82            [24] 2412 	mov	r6,dpl
      0006C4 AF 83            [24] 2413 	mov	r7,dph
                                   2414 ;	ecen4330lab7.c:588: unsigned char  i, hi = Color >> 8, lo = Color;
      0006C6 8F 05            [24] 2415 	mov	ar5,r7
                                   2416 ;	ecen4330lab7.c:591: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      0006C8 E4               [12] 2417 	clr	a
      0006C9 F5*00            [12] 2418 	mov	_setAddress_PARM_2,a
      0006CB F5*01            [12] 2419 	mov	(_setAddress_PARM_2 + 1),a
      0006CD 75*02 EF         [24] 2420 	mov	_setAddress_PARM_3,#0xef
                                   2421 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      0006D0 F5*03            [12] 2422 	mov	(_setAddress_PARM_3 + 1),a
      0006D2 75*04 3F         [24] 2423 	mov	_setAddress_PARM_4,#0x3f
      0006D5 75*05 01         [24] 2424 	mov	(_setAddress_PARM_4 + 1),#0x01
      0006D8 90 00 00         [24] 2425 	mov	dptr,#0x0000
      0006DB C0 06            [24] 2426 	push	ar6
      0006DD C0 05            [24] 2427 	push	ar5
      0006DF 12r03rBA         [24] 2428 	lcall	_setAddress
      0006E2 D0 05            [24] 2429 	pop	ar5
      0006E4 D0 06            [24] 2430 	pop	ar6
                                   2431 ;	ecen4330lab7.c:592: write8Reg(0x2C);
                                   2432 ;	assignBit
      0006E6 C2 B5            [12] 2433 	clr	_P3_5
                                   2434 ;	assignBit
      0006E8 D2 B4            [12] 2435 	setb	_P3_4
      0006EA 85*02 82         [24] 2436 	mov	dpl,_lcd_address
      0006ED 85*03 83         [24] 2437 	mov	dph,(_lcd_address + 1)
      0006F0 74 2C            [12] 2438 	mov	a,#0x2c
      0006F2 F0               [24] 2439 	movx	@dptr,a
                                   2440 ;	assignBit
      0006F3 C2 B4            [12] 2441 	clr	_P3_4
                                   2442 ;	ecen4330lab7.c:593: CD = 1;
                                   2443 ;	assignBit
      0006F5 D2 B5            [12] 2444 	setb	_P3_5
                                   2445 ;	ecen4330lab7.c:594: write8(hi); 
                                   2446 ;	assignBit
      0006F7 D2 B4            [12] 2447 	setb	_P3_4
      0006F9 85*02 82         [24] 2448 	mov	dpl,_lcd_address
      0006FC 85*03 83         [24] 2449 	mov	dph,(_lcd_address + 1)
      0006FF ED               [12] 2450 	mov	a,r5
      000700 F0               [24] 2451 	movx	@dptr,a
                                   2452 ;	assignBit
      000701 C2 B4            [12] 2453 	clr	_P3_4
                                   2454 ;	ecen4330lab7.c:595: write8(lo);
                                   2455 ;	assignBit
      000703 D2 B4            [12] 2456 	setb	_P3_4
      000705 85*02 82         [24] 2457 	mov	dpl,_lcd_address
      000708 85*03 83         [24] 2458 	mov	dph,(_lcd_address + 1)
      00070B EE               [12] 2459 	mov	a,r6
      00070C F0               [24] 2460 	movx	@dptr,a
                                   2461 ;	assignBit
      00070D C2 B4            [12] 2462 	clr	_P3_4
                                   2463 ;	ecen4330lab7.c:597: while(blocks--) {
      00070F 7C B0            [12] 2464 	mov	r4,#0xb0
      000711 7F 04            [12] 2465 	mov	r7,#0x04
      000713                       2466 00104$:
      000713 8C 02            [24] 2467 	mov	ar2,r4
      000715 8F 03            [24] 2468 	mov	ar3,r7
      000717 1C               [12] 2469 	dec	r4
      000718 BC FF 01         [24] 2470 	cjne	r4,#0xff,00140$
      00071B 1F               [12] 2471 	dec	r7
      00071C                       2472 00140$:
      00071C EA               [12] 2473 	mov	a,r2
      00071D 4B               [12] 2474 	orl	a,r3
      00071E 60 66            [24] 2475 	jz	00106$
                                   2476 ;	ecen4330lab7.c:599: do {
      000720 7B 10            [12] 2477 	mov	r3,#0x10
      000722                       2478 00101$:
                                   2479 ;	ecen4330lab7.c:600: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2480 ;	assignBit
      000722 D2 B4            [12] 2481 	setb	_P3_4
      000724 85*02 82         [24] 2482 	mov	dpl,_lcd_address
      000727 85*03 83         [24] 2483 	mov	dph,(_lcd_address + 1)
      00072A ED               [12] 2484 	mov	a,r5
      00072B F0               [24] 2485 	movx	@dptr,a
                                   2486 ;	assignBit
      00072C C2 B4            [12] 2487 	clr	_P3_4
                                   2488 ;	assignBit
      00072E D2 B4            [12] 2489 	setb	_P3_4
      000730 85*02 82         [24] 2490 	mov	dpl,_lcd_address
      000733 85*03 83         [24] 2491 	mov	dph,(_lcd_address + 1)
      000736 EE               [12] 2492 	mov	a,r6
      000737 F0               [24] 2493 	movx	@dptr,a
                                   2494 ;	assignBit
      000738 C2 B4            [12] 2495 	clr	_P3_4
                                   2496 ;	assignBit
      00073A D2 B4            [12] 2497 	setb	_P3_4
      00073C 85*02 82         [24] 2498 	mov	dpl,_lcd_address
      00073F 85*03 83         [24] 2499 	mov	dph,(_lcd_address + 1)
      000742 ED               [12] 2500 	mov	a,r5
      000743 F0               [24] 2501 	movx	@dptr,a
                                   2502 ;	assignBit
      000744 C2 B4            [12] 2503 	clr	_P3_4
                                   2504 ;	assignBit
      000746 D2 B4            [12] 2505 	setb	_P3_4
      000748 85*02 82         [24] 2506 	mov	dpl,_lcd_address
      00074B 85*03 83         [24] 2507 	mov	dph,(_lcd_address + 1)
      00074E EE               [12] 2508 	mov	a,r6
      00074F F0               [24] 2509 	movx	@dptr,a
                                   2510 ;	assignBit
      000750 C2 B4            [12] 2511 	clr	_P3_4
                                   2512 ;	ecen4330lab7.c:601: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2513 ;	assignBit
      000752 D2 B4            [12] 2514 	setb	_P3_4
      000754 85*02 82         [24] 2515 	mov	dpl,_lcd_address
      000757 85*03 83         [24] 2516 	mov	dph,(_lcd_address + 1)
      00075A ED               [12] 2517 	mov	a,r5
      00075B F0               [24] 2518 	movx	@dptr,a
                                   2519 ;	assignBit
      00075C C2 B4            [12] 2520 	clr	_P3_4
                                   2521 ;	assignBit
      00075E D2 B4            [12] 2522 	setb	_P3_4
      000760 85*02 82         [24] 2523 	mov	dpl,_lcd_address
      000763 85*03 83         [24] 2524 	mov	dph,(_lcd_address + 1)
      000766 EE               [12] 2525 	mov	a,r6
      000767 F0               [24] 2526 	movx	@dptr,a
                                   2527 ;	assignBit
      000768 C2 B4            [12] 2528 	clr	_P3_4
                                   2529 ;	assignBit
      00076A D2 B4            [12] 2530 	setb	_P3_4
      00076C 85*02 82         [24] 2531 	mov	dpl,_lcd_address
      00076F 85*03 83         [24] 2532 	mov	dph,(_lcd_address + 1)
      000772 ED               [12] 2533 	mov	a,r5
      000773 F0               [24] 2534 	movx	@dptr,a
                                   2535 ;	assignBit
      000774 C2 B4            [12] 2536 	clr	_P3_4
                                   2537 ;	assignBit
      000776 D2 B4            [12] 2538 	setb	_P3_4
      000778 85*02 82         [24] 2539 	mov	dpl,_lcd_address
      00077B 85*03 83         [24] 2540 	mov	dph,(_lcd_address + 1)
      00077E EE               [12] 2541 	mov	a,r6
      00077F F0               [24] 2542 	movx	@dptr,a
                                   2543 ;	assignBit
      000780 C2 B4            [12] 2544 	clr	_P3_4
                                   2545 ;	ecen4330lab7.c:602: } while(--i);
      000782 DB 9E            [24] 2546 	djnz	r3,00101$
      000784 80 8D            [24] 2547 	sjmp	00104$
      000786                       2548 00106$:
                                   2549 ;	ecen4330lab7.c:604: for(i = (char)len & 63; i--; ) {
      000786 7F 3F            [12] 2550 	mov	r7,#0x3f
      000788                       2551 00109$:
      000788 8F 04            [24] 2552 	mov	ar4,r7
      00078A 1F               [12] 2553 	dec	r7
      00078B EC               [12] 2554 	mov	a,r4
      00078C 60 1A            [24] 2555 	jz	00111$
                                   2556 ;	ecen4330lab7.c:605: write8(hi); 
                                   2557 ;	assignBit
      00078E D2 B4            [12] 2558 	setb	_P3_4
      000790 85*02 82         [24] 2559 	mov	dpl,_lcd_address
      000793 85*03 83         [24] 2560 	mov	dph,(_lcd_address + 1)
      000796 ED               [12] 2561 	mov	a,r5
      000797 F0               [24] 2562 	movx	@dptr,a
                                   2563 ;	assignBit
      000798 C2 B4            [12] 2564 	clr	_P3_4
                                   2565 ;	ecen4330lab7.c:606: write8(lo);
                                   2566 ;	assignBit
      00079A D2 B4            [12] 2567 	setb	_P3_4
      00079C 85*02 82         [24] 2568 	mov	dpl,_lcd_address
      00079F 85*03 83         [24] 2569 	mov	dph,(_lcd_address + 1)
      0007A2 EE               [12] 2570 	mov	a,r6
      0007A3 F0               [24] 2571 	movx	@dptr,a
                                   2572 ;	assignBit
      0007A4 C2 B4            [12] 2573 	clr	_P3_4
      0007A6 80 E0            [24] 2574 	sjmp	00109$
      0007A8                       2575 00111$:
                                   2576 ;	ecen4330lab7.c:608: }
      0007A8 22               [24] 2577 	ret
                                   2578 ;------------------------------------------------------------
                                   2579 ;Allocation info for local variables in function 'drawChar'
                                   2580 ;------------------------------------------------------------
                                   2581 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2582 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2583 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2584 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2585 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2586 ;x                         Allocated with name '_drawChar_x_65536_312'
                                   2587 ;i                         Allocated to registers r3 
                                   2588 ;line                      Allocated with name '_drawChar_line_196608_316'
                                   2589 ;j                         Allocated to registers r2 
                                   2590 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2591 ;------------------------------------------------------------
                                   2592 ;	ecen4330lab7.c:616: void drawChar(int x, int y, unsigned char c,u16 color, u16 bg, u8 size){
                                   2593 ;	-----------------------------------------
                                   2594 ;	 function drawChar
                                   2595 ;	-----------------------------------------
      0007A9                       2596 _drawChar:
      0007A9 85 82*58         [24] 2597 	mov	_drawChar_x_65536_312,dpl
      0007AC 85 83*59         [24] 2598 	mov	(_drawChar_x_65536_312 + 1),dph
                                   2599 ;	ecen4330lab7.c:617: if ((x >=TFTWIDTH) || // Clip right
      0007AF C3               [12] 2600 	clr	c
      0007B0 E5*58            [12] 2601 	mov	a,_drawChar_x_65536_312
      0007B2 94 F0            [12] 2602 	subb	a,#0xf0
      0007B4 E5*59            [12] 2603 	mov	a,(_drawChar_x_65536_312 + 1)
      0007B6 64 80            [12] 2604 	xrl	a,#0x80
      0007B8 94 80            [12] 2605 	subb	a,#0x80
      0007BA 50 59            [24] 2606 	jnc	00101$
                                   2607 ;	ecen4330lab7.c:618: (y >=TFTHEIGHT)           || // Clip bottom
      0007BC C3               [12] 2608 	clr	c
      0007BD E5*50            [12] 2609 	mov	a,_drawChar_PARM_2
      0007BF 94 40            [12] 2610 	subb	a,#0x40
      0007C1 E5*51            [12] 2611 	mov	a,(_drawChar_PARM_2 + 1)
      0007C3 64 80            [12] 2612 	xrl	a,#0x80
      0007C5 94 81            [12] 2613 	subb	a,#0x81
      0007C7 50 4C            [24] 2614 	jnc	00101$
                                   2615 ;	ecen4330lab7.c:619: ((x + 6 * size - 1) < 0) || // Clip left
      0007C9 AC*57            [24] 2616 	mov	r4,_drawChar_PARM_6
      0007CB 7D 00            [12] 2617 	mov	r5,#0x00
      0007CD 8C*00            [24] 2618 	mov	__mulint_PARM_2,r4
      0007CF 8D*01            [24] 2619 	mov	(__mulint_PARM_2 + 1),r5
      0007D1 90 00 06         [24] 2620 	mov	dptr,#0x0006
      0007D4 C0 05            [24] 2621 	push	ar5
      0007D6 C0 04            [24] 2622 	push	ar4
      0007D8 12r00r00         [24] 2623 	lcall	__mulint
      0007DB AA 82            [24] 2624 	mov	r2,dpl
      0007DD AB 83            [24] 2625 	mov	r3,dph
      0007DF D0 04            [24] 2626 	pop	ar4
      0007E1 D0 05            [24] 2627 	pop	ar5
      0007E3 EA               [12] 2628 	mov	a,r2
      0007E4 25*58            [12] 2629 	add	a,_drawChar_x_65536_312
      0007E6 FA               [12] 2630 	mov	r2,a
      0007E7 EB               [12] 2631 	mov	a,r3
      0007E8 35*59            [12] 2632 	addc	a,(_drawChar_x_65536_312 + 1)
      0007EA FB               [12] 2633 	mov	r3,a
      0007EB 1A               [12] 2634 	dec	r2
      0007EC BA FF 01         [24] 2635 	cjne	r2,#0xff,00182$
      0007EF 1B               [12] 2636 	dec	r3
      0007F0                       2637 00182$:
      0007F0 EB               [12] 2638 	mov	a,r3
      0007F1 20 E7 21         [24] 2639 	jb	acc.7,00101$
                                   2640 ;	ecen4330lab7.c:620: ((y + 8 * size - 1) < 0))   // Clip top
      0007F4 ED               [12] 2641 	mov	a,r5
      0007F5 C4               [12] 2642 	swap	a
      0007F6 03               [12] 2643 	rr	a
      0007F7 54 F8            [12] 2644 	anl	a,#0xf8
      0007F9 CC               [12] 2645 	xch	a,r4
      0007FA C4               [12] 2646 	swap	a
      0007FB 03               [12] 2647 	rr	a
      0007FC CC               [12] 2648 	xch	a,r4
      0007FD 6C               [12] 2649 	xrl	a,r4
      0007FE CC               [12] 2650 	xch	a,r4
      0007FF 54 F8            [12] 2651 	anl	a,#0xf8
      000801 CC               [12] 2652 	xch	a,r4
      000802 6C               [12] 2653 	xrl	a,r4
      000803 FD               [12] 2654 	mov	r5,a
      000804 EC               [12] 2655 	mov	a,r4
      000805 25*50            [12] 2656 	add	a,_drawChar_PARM_2
      000807 FC               [12] 2657 	mov	r4,a
      000808 ED               [12] 2658 	mov	a,r5
      000809 35*51            [12] 2659 	addc	a,(_drawChar_PARM_2 + 1)
      00080B FD               [12] 2660 	mov	r5,a
      00080C 1C               [12] 2661 	dec	r4
      00080D BC FF 01         [24] 2662 	cjne	r4,#0xff,00184$
      000810 1D               [12] 2663 	dec	r5
      000811                       2664 00184$:
      000811 ED               [12] 2665 	mov	a,r5
      000812 30 E7 01         [24] 2666 	jnb	acc.7,00141$
      000815                       2667 00101$:
                                   2668 ;	ecen4330lab7.c:622: return;
      000815 22               [24] 2669 	ret
                                   2670 ;	ecen4330lab7.c:625: for (char i=0; i<6; i++ )
      000816                       2671 00141$:
      000816 74 01            [12] 2672 	mov	a,#0x01
      000818 B5*57 04         [24] 2673 	cjne	a,_drawChar_PARM_6,00186$
      00081B 74 01            [12] 2674 	mov	a,#0x01
      00081D 80 01            [24] 2675 	sjmp	00187$
      00081F                       2676 00186$:
      00081F E4               [12] 2677 	clr	a
      000820                       2678 00187$:
      000820 FD               [12] 2679 	mov	r5,a
      000821 FC               [12] 2680 	mov	r4,a
      000822 E5*53            [12] 2681 	mov	a,_drawChar_PARM_4
      000824 B5*55 08         [24] 2682 	cjne	a,_drawChar_PARM_5,00188$
      000827 E5*54            [12] 2683 	mov	a,(_drawChar_PARM_4 + 1)
      000829 B5*56 03         [24] 2684 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      00082C D3               [12] 2685 	setb	c
      00082D 80 01            [24] 2686 	sjmp	00189$
      00082F                       2687 00188$:
      00082F C3               [12] 2688 	clr	c
      000830                       2689 00189$:
      000830 92*00            [24] 2690 	mov	_drawChar_sloc0_1_0,c
      000832 7B 00            [12] 2691 	mov	r3,#0x00
      000834                       2692 00126$:
      000834 BB 06 00         [24] 2693 	cjne	r3,#0x06,00190$
      000837                       2694 00190$:
      000837 40 01            [24] 2695 	jc	00191$
      000839 22               [24] 2696 	ret
      00083A                       2697 00191$:
                                   2698 ;	ecen4330lab7.c:629: if (i == 5)
      00083A BB 05 05         [24] 2699 	cjne	r3,#0x05,00107$
                                   2700 ;	ecen4330lab7.c:631: line = 0x0;
      00083D 75*5A 00         [24] 2701 	mov	_drawChar_line_196608_316,#0x00
      000840 80 30            [24] 2702 	sjmp	00140$
      000842                       2703 00107$:
                                   2704 ;	ecen4330lab7.c:635: line = pgm_read_byte(font+(c*5)+i);
      000842 85*52*00         [24] 2705 	mov	__mulint_PARM_2,_drawChar_PARM_3
      000845 75*01 00         [24] 2706 	mov	(__mulint_PARM_2 + 1),#0x00
      000848 90 00 05         [24] 2707 	mov	dptr,#0x0005
      00084B C0 05            [24] 2708 	push	ar5
      00084D C0 04            [24] 2709 	push	ar4
      00084F C0 03            [24] 2710 	push	ar3
      000851 12r00r00         [24] 2711 	lcall	__mulint
      000854 A8 82            [24] 2712 	mov	r0,dpl
      000856 A9 83            [24] 2713 	mov	r1,dph
      000858 D0 03            [24] 2714 	pop	ar3
      00085A D0 04            [24] 2715 	pop	ar4
      00085C D0 05            [24] 2716 	pop	ar5
      00085E E8               [12] 2717 	mov	a,r0
      00085F 24r00            [12] 2718 	add	a,#_font
      000861 F8               [12] 2719 	mov	r0,a
      000862 E9               [12] 2720 	mov	a,r1
      000863 34s00            [12] 2721 	addc	a,#(_font >> 8)
      000865 F9               [12] 2722 	mov	r1,a
      000866 EB               [12] 2723 	mov	a,r3
      000867 28               [12] 2724 	add	a,r0
      000868 F5 82            [12] 2725 	mov	dpl,a
      00086A E4               [12] 2726 	clr	a
      00086B 39               [12] 2727 	addc	a,r1
      00086C F5 83            [12] 2728 	mov	dph,a
      00086E E4               [12] 2729 	clr	a
      00086F 93               [24] 2730 	movc	a,@a+dptr
      000870 F5*5A            [12] 2731 	mov	_drawChar_line_196608_316,a
                                   2732 ;	ecen4330lab7.c:638: for (char j = 0; j<8; j++)
      000872                       2733 00140$:
      000872 8B F0            [24] 2734 	mov	b,r3
      000874 E5*57            [12] 2735 	mov	a,_drawChar_PARM_6
      000876 A4               [48] 2736 	mul	ab
      000877 25*58            [12] 2737 	add	a,_drawChar_x_65536_312
      000879 F8               [12] 2738 	mov	r0,a
      00087A E5*59            [12] 2739 	mov	a,(_drawChar_x_65536_312 + 1)
      00087C 35 F0            [12] 2740 	addc	a,b
      00087E F9               [12] 2741 	mov	r1,a
      00087F 88*5B            [24] 2742 	mov	_drawChar_sloc1_1_0,r0
      000881 89*5C            [24] 2743 	mov	(_drawChar_sloc1_1_0 + 1),r1
      000883 7A 00            [12] 2744 	mov	r2,#0x00
      000885                       2745 00123$:
      000885 BA 08 00         [24] 2746 	cjne	r2,#0x08,00194$
      000888                       2747 00194$:
      000888 40 03            [24] 2748 	jc	00195$
      00088A 02r09rAF         [24] 2749 	ljmp	00127$
      00088D                       2750 00195$:
                                   2751 ;	ecen4330lab7.c:640: if (line & 0x1)
      00088D E5*5A            [12] 2752 	mov	a,_drawChar_line_196608_316
      00088F 20 E0 03         [24] 2753 	jb	acc.0,00196$
      000892 02r09r1D         [24] 2754 	ljmp	00118$
      000895                       2755 00196$:
                                   2756 ;	ecen4330lab7.c:642: if (size == 1) // default size
      000895 ED               [12] 2757 	mov	a,r5
      000896 60 40            [24] 2758 	jz	00110$
                                   2759 ;	ecen4330lab7.c:644: drawPixel(x+i, y+j, color);
      000898 8B 06            [24] 2760 	mov	ar6,r3
      00089A 7F 00            [12] 2761 	mov	r7,#0x00
      00089C EE               [12] 2762 	mov	a,r6
      00089D 25*58            [12] 2763 	add	a,_drawChar_x_65536_312
      00089F F5 82            [12] 2764 	mov	dpl,a
      0008A1 EF               [12] 2765 	mov	a,r7
      0008A2 35*59            [12] 2766 	addc	a,(_drawChar_x_65536_312 + 1)
      0008A4 F5 83            [12] 2767 	mov	dph,a
      0008A6 8A 06            [24] 2768 	mov	ar6,r2
      0008A8 7F 00            [12] 2769 	mov	r7,#0x00
      0008AA EE               [12] 2770 	mov	a,r6
      0008AB 25*50            [12] 2771 	add	a,_drawChar_PARM_2
      0008AD F5*44            [12] 2772 	mov	_drawPixel_PARM_2,a
      0008AF EF               [12] 2773 	mov	a,r7
      0008B0 35*51            [12] 2774 	addc	a,(_drawChar_PARM_2 + 1)
      0008B2 F5*45            [12] 2775 	mov	(_drawPixel_PARM_2 + 1),a
      0008B4 85*53*46         [24] 2776 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      0008B7 85*54*47         [24] 2777 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      0008BA C0 05            [24] 2778 	push	ar5
      0008BC C0 04            [24] 2779 	push	ar4
      0008BE C0 03            [24] 2780 	push	ar3
      0008C0 C0 02            [24] 2781 	push	ar2
      0008C2 C0 01            [24] 2782 	push	ar1
      0008C4 C0 00            [24] 2783 	push	ar0
      0008C6 12r05r94         [24] 2784 	lcall	_drawPixel
      0008C9 D0 00            [24] 2785 	pop	ar0
      0008CB D0 01            [24] 2786 	pop	ar1
      0008CD D0 02            [24] 2787 	pop	ar2
      0008CF D0 03            [24] 2788 	pop	ar3
      0008D1 D0 04            [24] 2789 	pop	ar4
      0008D3 D0 05            [24] 2790 	pop	ar5
      0008D5 02r09rA5         [24] 2791 	ljmp	00119$
      0008D8                       2792 00110$:
                                   2793 ;	ecen4330lab7.c:647: fillRect(x+(i*size), y+(j*size), size, size, color);
      0008D8 8A F0            [24] 2794 	mov	b,r2
      0008DA E5*57            [12] 2795 	mov	a,_drawChar_PARM_6
      0008DC A4               [48] 2796 	mul	ab
      0008DD 25*50            [12] 2797 	add	a,_drawChar_PARM_2
      0008DF F5*48            [12] 2798 	mov	_fillRect_PARM_2,a
      0008E1 E5*51            [12] 2799 	mov	a,(_drawChar_PARM_2 + 1)
      0008E3 35 F0            [12] 2800 	addc	a,b
      0008E5 F5*49            [12] 2801 	mov	(_fillRect_PARM_2 + 1),a
      0008E7 AE*57            [24] 2802 	mov	r6,_drawChar_PARM_6
      0008E9 7F 00            [12] 2803 	mov	r7,#0x00
      0008EB 8E*4A            [24] 2804 	mov	_fillRect_PARM_3,r6
      0008ED 8F*4B            [24] 2805 	mov	(_fillRect_PARM_3 + 1),r7
      0008EF 8E*4C            [24] 2806 	mov	_fillRect_PARM_4,r6
      0008F1 8F*4D            [24] 2807 	mov	(_fillRect_PARM_4 + 1),r7
      0008F3 85*53*4E         [24] 2808 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      0008F6 85*54*4F         [24] 2809 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      0008F9 85*5B 82         [24] 2810 	mov	dpl,_drawChar_sloc1_1_0
      0008FC 85*5C 83         [24] 2811 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      0008FF C0 05            [24] 2812 	push	ar5
      000901 C0 04            [24] 2813 	push	ar4
      000903 C0 03            [24] 2814 	push	ar3
      000905 C0 02            [24] 2815 	push	ar2
      000907 C0 01            [24] 2816 	push	ar1
      000909 C0 00            [24] 2817 	push	ar0
      00090B 12r05rE5         [24] 2818 	lcall	_fillRect
      00090E D0 00            [24] 2819 	pop	ar0
      000910 D0 01            [24] 2820 	pop	ar1
      000912 D0 02            [24] 2821 	pop	ar2
      000914 D0 03            [24] 2822 	pop	ar3
      000916 D0 04            [24] 2823 	pop	ar4
      000918 D0 05            [24] 2824 	pop	ar5
      00091A 02r09rA5         [24] 2825 	ljmp	00119$
      00091D                       2826 00118$:
                                   2827 ;	ecen4330lab7.c:649: } else if (bg != color)
      00091D 30*00 03         [24] 2828 	jnb	_drawChar_sloc0_1_0,00198$
      000920 02r09rA5         [24] 2829 	ljmp	00119$
      000923                       2830 00198$:
                                   2831 ;	ecen4330lab7.c:651: if (size == 1) // default size
      000923 EC               [12] 2832 	mov	a,r4
      000924 60 3F            [24] 2833 	jz	00113$
                                   2834 ;	ecen4330lab7.c:653: drawPixel(x+i, y+j, bg);
      000926 8B 06            [24] 2835 	mov	ar6,r3
      000928 7F 00            [12] 2836 	mov	r7,#0x00
      00092A EE               [12] 2837 	mov	a,r6
      00092B 25*58            [12] 2838 	add	a,_drawChar_x_65536_312
      00092D F5 82            [12] 2839 	mov	dpl,a
      00092F EF               [12] 2840 	mov	a,r7
      000930 35*59            [12] 2841 	addc	a,(_drawChar_x_65536_312 + 1)
      000932 F5 83            [12] 2842 	mov	dph,a
      000934 8A 06            [24] 2843 	mov	ar6,r2
      000936 7F 00            [12] 2844 	mov	r7,#0x00
      000938 EE               [12] 2845 	mov	a,r6
      000939 25*50            [12] 2846 	add	a,_drawChar_PARM_2
      00093B F5*44            [12] 2847 	mov	_drawPixel_PARM_2,a
      00093D EF               [12] 2848 	mov	a,r7
      00093E 35*51            [12] 2849 	addc	a,(_drawChar_PARM_2 + 1)
      000940 F5*45            [12] 2850 	mov	(_drawPixel_PARM_2 + 1),a
      000942 85*55*46         [24] 2851 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      000945 85*56*47         [24] 2852 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      000948 C0 05            [24] 2853 	push	ar5
      00094A C0 04            [24] 2854 	push	ar4
      00094C C0 03            [24] 2855 	push	ar3
      00094E C0 02            [24] 2856 	push	ar2
      000950 C0 01            [24] 2857 	push	ar1
      000952 C0 00            [24] 2858 	push	ar0
      000954 12r05r94         [24] 2859 	lcall	_drawPixel
      000957 D0 00            [24] 2860 	pop	ar0
      000959 D0 01            [24] 2861 	pop	ar1
      00095B D0 02            [24] 2862 	pop	ar2
      00095D D0 03            [24] 2863 	pop	ar3
      00095F D0 04            [24] 2864 	pop	ar4
      000961 D0 05            [24] 2865 	pop	ar5
      000963 80 40            [24] 2866 	sjmp	00119$
      000965                       2867 00113$:
                                   2868 ;	ecen4330lab7.c:657: fillRect(x+i*size, y+j*size, size, size, bg);
      000965 8A F0            [24] 2869 	mov	b,r2
      000967 E5*57            [12] 2870 	mov	a,_drawChar_PARM_6
      000969 A4               [48] 2871 	mul	ab
      00096A 25*50            [12] 2872 	add	a,_drawChar_PARM_2
      00096C F5*48            [12] 2873 	mov	_fillRect_PARM_2,a
      00096E E5*51            [12] 2874 	mov	a,(_drawChar_PARM_2 + 1)
      000970 35 F0            [12] 2875 	addc	a,b
      000972 F5*49            [12] 2876 	mov	(_fillRect_PARM_2 + 1),a
      000974 AE*57            [24] 2877 	mov	r6,_drawChar_PARM_6
      000976 7F 00            [12] 2878 	mov	r7,#0x00
      000978 8E*4A            [24] 2879 	mov	_fillRect_PARM_3,r6
      00097A 8F*4B            [24] 2880 	mov	(_fillRect_PARM_3 + 1),r7
      00097C 8E*4C            [24] 2881 	mov	_fillRect_PARM_4,r6
      00097E 8F*4D            [24] 2882 	mov	(_fillRect_PARM_4 + 1),r7
      000980 85*55*4E         [24] 2883 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000983 85*56*4F         [24] 2884 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000986 88 82            [24] 2885 	mov	dpl,r0
      000988 89 83            [24] 2886 	mov	dph,r1
      00098A C0 05            [24] 2887 	push	ar5
      00098C C0 04            [24] 2888 	push	ar4
      00098E C0 03            [24] 2889 	push	ar3
      000990 C0 02            [24] 2890 	push	ar2
      000992 C0 01            [24] 2891 	push	ar1
      000994 C0 00            [24] 2892 	push	ar0
      000996 12r05rE5         [24] 2893 	lcall	_fillRect
      000999 D0 00            [24] 2894 	pop	ar0
      00099B D0 01            [24] 2895 	pop	ar1
      00099D D0 02            [24] 2896 	pop	ar2
      00099F D0 03            [24] 2897 	pop	ar3
      0009A1 D0 04            [24] 2898 	pop	ar4
      0009A3 D0 05            [24] 2899 	pop	ar5
      0009A5                       2900 00119$:
                                   2901 ;	ecen4330lab7.c:661: line >>= 1;
      0009A5 E5*5A            [12] 2902 	mov	a,_drawChar_line_196608_316
      0009A7 C3               [12] 2903 	clr	c
      0009A8 13               [12] 2904 	rrc	a
      0009A9 F5*5A            [12] 2905 	mov	_drawChar_line_196608_316,a
                                   2906 ;	ecen4330lab7.c:638: for (char j = 0; j<8; j++)
      0009AB 0A               [12] 2907 	inc	r2
      0009AC 02r08r85         [24] 2908 	ljmp	00123$
      0009AF                       2909 00127$:
                                   2910 ;	ecen4330lab7.c:625: for (char i=0; i<6; i++ )
      0009AF 0B               [12] 2911 	inc	r3
                                   2912 ;	ecen4330lab7.c:665: }
      0009B0 02r08r34         [24] 2913 	ljmp	00126$
                                   2914 ;------------------------------------------------------------
                                   2915 ;Allocation info for local variables in function 'write'
                                   2916 ;------------------------------------------------------------
                                   2917 ;c                         Allocated to registers r7 
                                   2918 ;------------------------------------------------------------
                                   2919 ;	ecen4330lab7.c:673: void write(u8 c)
                                   2920 ;	-----------------------------------------
                                   2921 ;	 function write
                                   2922 ;	-----------------------------------------
      0009B3                       2923 _write:
      0009B3 AF 82            [24] 2924 	mov	r7,dpl
                                   2925 ;	ecen4330lab7.c:675: if (c == '\n')
      0009B5 BF 0A 22         [24] 2926 	cjne	r7,#0x0a,00105$
                                   2927 ;	ecen4330lab7.c:677: cursor_y += textsize*8;
      0009B8 AD*0C            [24] 2928 	mov	r5,_textsize
      0009BA E4               [12] 2929 	clr	a
      0009BB C4               [12] 2930 	swap	a
      0009BC 03               [12] 2931 	rr	a
      0009BD 54 F8            [12] 2932 	anl	a,#0xf8
      0009BF CD               [12] 2933 	xch	a,r5
      0009C0 C4               [12] 2934 	swap	a
      0009C1 03               [12] 2935 	rr	a
      0009C2 CD               [12] 2936 	xch	a,r5
      0009C3 6D               [12] 2937 	xrl	a,r5
      0009C4 CD               [12] 2938 	xch	a,r5
      0009C5 54 F8            [12] 2939 	anl	a,#0xf8
      0009C7 CD               [12] 2940 	xch	a,r5
      0009C8 6D               [12] 2941 	xrl	a,r5
      0009C9 FE               [12] 2942 	mov	r6,a
      0009CA ED               [12] 2943 	mov	a,r5
      0009CB 25*0A            [12] 2944 	add	a,_cursor_y
      0009CD F5*0A            [12] 2945 	mov	_cursor_y,a
      0009CF EE               [12] 2946 	mov	a,r6
      0009D0 35*0B            [12] 2947 	addc	a,(_cursor_y + 1)
      0009D2 F5*0B            [12] 2948 	mov	(_cursor_y + 1),a
                                   2949 ;	ecen4330lab7.c:678: cursor_x  = 0;
      0009D4 E4               [12] 2950 	clr	a
      0009D5 F5*08            [12] 2951 	mov	_cursor_x,a
      0009D7 F5*09            [12] 2952 	mov	(_cursor_x + 1),a
      0009D9 22               [24] 2953 	ret
      0009DA                       2954 00105$:
                                   2955 ;	ecen4330lab7.c:680: else if (c == '\r')
      0009DA BF 0D 01         [24] 2956 	cjne	r7,#0x0d,00119$
      0009DD 22               [24] 2957 	ret
      0009DE                       2958 00119$:
                                   2959 ;	ecen4330lab7.c:686: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      0009DE 85*0A*50         [24] 2960 	mov	_drawChar_PARM_2,_cursor_y
      0009E1 85*0B*51         [24] 2961 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      0009E4 8F*52            [24] 2962 	mov	_drawChar_PARM_3,r7
      0009E6 85*0E*53         [24] 2963 	mov	_drawChar_PARM_4,_textcolor
      0009E9 85*0F*54         [24] 2964 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      0009EC 85*10*55         [24] 2965 	mov	_drawChar_PARM_5,_textbgcolor
      0009EF 85*11*56         [24] 2966 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      0009F2 85*0C*57         [24] 2967 	mov	_drawChar_PARM_6,_textsize
      0009F5 85*08 82         [24] 2968 	mov	dpl,_cursor_x
      0009F8 85*09 83         [24] 2969 	mov	dph,(_cursor_x + 1)
      0009FB 12r07rA9         [24] 2970 	lcall	_drawChar
                                   2971 ;	ecen4330lab7.c:687: cursor_x += textsize*6;
      0009FE 85*0C*00         [24] 2972 	mov	__mulint_PARM_2,_textsize
      000A01 75*01 00         [24] 2973 	mov	(__mulint_PARM_2 + 1),#0x00
      000A04 90 00 06         [24] 2974 	mov	dptr,#0x0006
      000A07 12r00r00         [24] 2975 	lcall	__mulint
      000A0A AE 82            [24] 2976 	mov	r6,dpl
      000A0C AF 83            [24] 2977 	mov	r7,dph
      000A0E EE               [12] 2978 	mov	a,r6
      000A0F 25*08            [12] 2979 	add	a,_cursor_x
      000A11 F5*08            [12] 2980 	mov	_cursor_x,a
      000A13 EF               [12] 2981 	mov	a,r7
      000A14 35*09            [12] 2982 	addc	a,(_cursor_x + 1)
      000A16 F5*09            [12] 2983 	mov	(_cursor_x + 1),a
                                   2984 ;	ecen4330lab7.c:689: }
      000A18 22               [24] 2985 	ret
                                   2986 ;------------------------------------------------------------
                                   2987 ;Allocation info for local variables in function 'LCD_string_write'
                                   2988 ;------------------------------------------------------------
                                   2989 ;str                       Allocated to registers r5 r6 r7 
                                   2990 ;i                         Allocated to registers r3 r4 
                                   2991 ;------------------------------------------------------------
                                   2992 ;	ecen4330lab7.c:697: void LCD_string_write(char *str)
                                   2993 ;	-----------------------------------------
                                   2994 ;	 function LCD_string_write
                                   2995 ;	-----------------------------------------
      000A19                       2996 _LCD_string_write:
      000A19 AD 82            [24] 2997 	mov	r5,dpl
      000A1B AE 83            [24] 2998 	mov	r6,dph
      000A1D AF F0            [24] 2999 	mov	r7,b
                                   3000 ;	ecen4330lab7.c:700: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      000A1F 7B 00            [12] 3001 	mov	r3,#0x00
      000A21 7C 00            [12] 3002 	mov	r4,#0x00
      000A23                       3003 00103$:
      000A23 EB               [12] 3004 	mov	a,r3
      000A24 2D               [12] 3005 	add	a,r5
      000A25 F8               [12] 3006 	mov	r0,a
      000A26 EC               [12] 3007 	mov	a,r4
      000A27 3E               [12] 3008 	addc	a,r6
      000A28 F9               [12] 3009 	mov	r1,a
      000A29 8F 02            [24] 3010 	mov	ar2,r7
      000A2B 88 82            [24] 3011 	mov	dpl,r0
      000A2D 89 83            [24] 3012 	mov	dph,r1
      000A2F 8A F0            [24] 3013 	mov	b,r2
      000A31 12r00r00         [24] 3014 	lcall	__gptrget
      000A34 FA               [12] 3015 	mov	r2,a
      000A35 60 20            [24] 3016 	jz	00105$
                                   3017 ;	ecen4330lab7.c:702: write(str[i]);  /* Call transmit data function */
      000A37 8A 82            [24] 3018 	mov	dpl,r2
      000A39 C0 07            [24] 3019 	push	ar7
      000A3B C0 06            [24] 3020 	push	ar6
      000A3D C0 05            [24] 3021 	push	ar5
      000A3F C0 04            [24] 3022 	push	ar4
      000A41 C0 03            [24] 3023 	push	ar3
      000A43 12r09rB3         [24] 3024 	lcall	_write
      000A46 D0 03            [24] 3025 	pop	ar3
      000A48 D0 04            [24] 3026 	pop	ar4
      000A4A D0 05            [24] 3027 	pop	ar5
      000A4C D0 06            [24] 3028 	pop	ar6
      000A4E D0 07            [24] 3029 	pop	ar7
                                   3030 ;	ecen4330lab7.c:700: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      000A50 0B               [12] 3031 	inc	r3
      000A51 BB 00 CF         [24] 3032 	cjne	r3,#0x00,00103$
      000A54 0C               [12] 3033 	inc	r4
      000A55 80 CC            [24] 3034 	sjmp	00103$
      000A57                       3035 00105$:
                                   3036 ;	ecen4330lab7.c:704: }
      000A57 22               [24] 3037 	ret
                                   3038 ;------------------------------------------------------------
                                   3039 ;Allocation info for local variables in function 'keyDetect'
                                   3040 ;------------------------------------------------------------
                                   3041 ;	ecen4330lab7.c:724: unsigned char keyDetect(){
                                   3042 ;	-----------------------------------------
                                   3043 ;	 function keyDetect
                                   3044 ;	-----------------------------------------
      000A58                       3045 _keyDetect:
                                   3046 ;	ecen4330lab7.c:725: __KEYPAD_PORT__=0xF0;           /*set port direction as input-output*/
      000A58 75 90 F0         [24] 3047 	mov	_P1,#0xf0
                                   3048 ;	ecen4330lab7.c:726: received_flag = 0;
      000A5B 75*42 00         [24] 3049 	mov	_received_flag,#0x00
                                   3050 ;	ecen4330lab7.c:727: do
      000A5E                       3051 00102$:
                                   3052 ;	ecen4330lab7.c:729: __KEYPAD_PORT__ = 0xF0;
      000A5E 75 90 F0         [24] 3053 	mov	_P1,#0xf0
                                   3054 ;	ecen4330lab7.c:730: colloc = __KEYPAD_PORT__;
      000A61 85 90*00         [24] 3055 	mov	_colloc,_P1
                                   3056 ;	ecen4330lab7.c:731: colloc&= 0xF0;  /* mask port for column read only */
      000A64 53*00 F0         [24] 3057 	anl	_colloc,#0xf0
                                   3058 ;	ecen4330lab7.c:732: }while(colloc != 0xF0 && received_flag == 0);     /* read status of column */
      000A67 74 F0            [12] 3059 	mov	a,#0xf0
      000A69 B5*00 02         [24] 3060 	cjne	a,_colloc,00190$
      000A6C 80 04            [24] 3061 	sjmp	00106$
      000A6E                       3062 00190$:
      000A6E E5*42            [12] 3063 	mov	a,_received_flag
      000A70 60 EC            [24] 3064 	jz	00102$
                                   3065 ;	ecen4330lab7.c:736: do
      000A72                       3066 00106$:
                                   3067 ;	ecen4330lab7.c:739: rtcPrint();
      000A72 12r01rC1         [24] 3068 	lcall	_rtcPrint
                                   3069 ;	ecen4330lab7.c:740: delay(10);  /* 20ms key debounce time */
      000A75 90 00 0A         [24] 3070 	mov	dptr,#0x000a
      000A78 12r00r79         [24] 3071 	lcall	_delay
                                   3072 ;	ecen4330lab7.c:741: colloc = (__KEYPAD_PORT__ & 0xF0);  /* read status of column */
      000A7B E5 90            [12] 3073 	mov	a,_P1
      000A7D 54 F0            [12] 3074 	anl	a,#0xf0
      000A7F F5*00            [12] 3075 	mov	_colloc,a
                                   3076 ;	ecen4330lab7.c:742: }while(colloc == 0xF0 && received_flag == 0); /* check for any key press */
      000A81 74 F0            [12] 3077 	mov	a,#0xf0
      000A83 B5*00 04         [24] 3078 	cjne	a,_colloc,00108$
      000A86 E5*42            [12] 3079 	mov	a,_received_flag
      000A88 60 E8            [24] 3080 	jz	00106$
      000A8A                       3081 00108$:
                                   3082 ;	ecen4330lab7.c:744: delay(1);
      000A8A 90 00 01         [24] 3083 	mov	dptr,#0x0001
      000A8D 12r00r79         [24] 3084 	lcall	_delay
                                   3085 ;	ecen4330lab7.c:745: colloc = (__KEYPAD_PORT__ & 0xF0);
      000A90 E5 90            [12] 3086 	mov	a,_P1
      000A92 54 F0            [12] 3087 	anl	a,#0xf0
      000A94 F5*00            [12] 3088 	mov	_colloc,a
                                   3089 ;	ecen4330lab7.c:746: }while(colloc == 0xF0 && received_flag == 0);
      000A96 74 F0            [12] 3090 	mov	a,#0xf0
      000A98 B5*00 04         [24] 3091 	cjne	a,_colloc,00112$
      000A9B E5*42            [12] 3092 	mov	a,_received_flag
      000A9D 60 D3            [24] 3093 	jz	00106$
      000A9F                       3094 00112$:
                                   3095 ;	ecen4330lab7.c:748: if(received_flag == 0){
      000A9F E5*42            [12] 3096 	mov	a,_received_flag
      000AA1 60 03            [24] 3097 	jz	00198$
      000AA3 02r0Br67         [24] 3098 	ljmp	00134$
      000AA6                       3099 00198$:
                                   3100 ;	ecen4330lab7.c:749: while(1)
      000AA6                       3101 00122$:
                                   3102 ;	ecen4330lab7.c:753: __KEYPAD_PORT__= 0xFE;                                          /* check for pressed key in 1st row */
      000AA6 75 90 FE         [24] 3103 	mov	_P1,#0xfe
                                   3104 ;	ecen4330lab7.c:754: colloc = (__KEYPAD_PORT__ & 0xF0);
      000AA9 E5 90            [12] 3105 	mov	a,_P1
      000AAB 54 F0            [12] 3106 	anl	a,#0xf0
      000AAD F5*00            [12] 3107 	mov	_colloc,a
                                   3108 ;	ecen4330lab7.c:755: if(colloc != 0xF0)
      000AAF 74 F0            [12] 3109 	mov	a,#0xf0
      000AB1 B5*00 02         [24] 3110 	cjne	a,_colloc,00199$
      000AB4 80 05            [24] 3111 	sjmp	00114$
      000AB6                       3112 00199$:
                                   3113 ;	ecen4330lab7.c:757: rowloc = 0;
      000AB6 75*01 00         [24] 3114 	mov	_rowloc,#0x00
                                   3115 ;	ecen4330lab7.c:758: break;
      000AB9 80 3D            [24] 3116 	sjmp	00123$
      000ABB                       3117 00114$:
                                   3118 ;	ecen4330lab7.c:761: __KEYPAD_PORT__ = 0xFD;                                 /* check for pressed key in 2nd row */
      000ABB 75 90 FD         [24] 3119 	mov	_P1,#0xfd
                                   3120 ;	ecen4330lab7.c:762: colloc = (__KEYPAD_PORT__ & 0xF0);
      000ABE E5 90            [12] 3121 	mov	a,_P1
      000AC0 54 F0            [12] 3122 	anl	a,#0xf0
      000AC2 F5*00            [12] 3123 	mov	_colloc,a
                                   3124 ;	ecen4330lab7.c:763: if(colloc != 0xF0)
      000AC4 74 F0            [12] 3125 	mov	a,#0xf0
      000AC6 B5*00 02         [24] 3126 	cjne	a,_colloc,00200$
      000AC9 80 05            [24] 3127 	sjmp	00116$
      000ACB                       3128 00200$:
                                   3129 ;	ecen4330lab7.c:765: rowloc = 1;
      000ACB 75*01 01         [24] 3130 	mov	_rowloc,#0x01
                                   3131 ;	ecen4330lab7.c:766: break;
      000ACE 80 28            [24] 3132 	sjmp	00123$
      000AD0                       3133 00116$:
                                   3134 ;	ecen4330lab7.c:769: __KEYPAD_PORT__ = 0xFB;         /* check for pressed key in 3rd row */
      000AD0 75 90 FB         [24] 3135 	mov	_P1,#0xfb
                                   3136 ;	ecen4330lab7.c:770: colloc = (__KEYPAD_PORT__ & 0xF0);
      000AD3 E5 90            [12] 3137 	mov	a,_P1
      000AD5 54 F0            [12] 3138 	anl	a,#0xf0
      000AD7 F5*00            [12] 3139 	mov	_colloc,a
                                   3140 ;	ecen4330lab7.c:771: if(colloc != 0xF0)
      000AD9 74 F0            [12] 3141 	mov	a,#0xf0
      000ADB B5*00 02         [24] 3142 	cjne	a,_colloc,00201$
      000ADE 80 05            [24] 3143 	sjmp	00118$
      000AE0                       3144 00201$:
                                   3145 ;	ecen4330lab7.c:773: rowloc = 2;
      000AE0 75*01 02         [24] 3146 	mov	_rowloc,#0x02
                                   3147 ;	ecen4330lab7.c:774: break;
      000AE3 80 13            [24] 3148 	sjmp	00123$
      000AE5                       3149 00118$:
                                   3150 ;	ecen4330lab7.c:777: __KEYPAD_PORT__ = 0xF7;         /* check for pressed key in 4th row */
      000AE5 75 90 F7         [24] 3151 	mov	_P1,#0xf7
                                   3152 ;	ecen4330lab7.c:778: colloc = (__KEYPAD_PORT__ & 0xF0);
      000AE8 E5 90            [12] 3153 	mov	a,_P1
      000AEA 54 F0            [12] 3154 	anl	a,#0xf0
      000AEC F5*00            [12] 3155 	mov	_colloc,a
                                   3156 ;	ecen4330lab7.c:779: if(colloc != 0xF0)
      000AEE 74 F0            [12] 3157 	mov	a,#0xf0
      000AF0 B5*00 02         [24] 3158 	cjne	a,_colloc,00202$
      000AF3 80 B1            [24] 3159 	sjmp	00122$
      000AF5                       3160 00202$:
                                   3161 ;	ecen4330lab7.c:781: rowloc = 3;
      000AF5 75*01 03         [24] 3162 	mov	_rowloc,#0x03
                                   3163 ;	ecen4330lab7.c:782: break;
      000AF8                       3164 00123$:
                                   3165 ;	ecen4330lab7.c:786: if(colloc == 0xE0)
      000AF8 74 E0            [12] 3166 	mov	a,#0xe0
      000AFA B5*00 15         [24] 3167 	cjne	a,_colloc,00131$
                                   3168 ;	ecen4330lab7.c:788: return(keypad[rowloc][0]);
      000AFD E5*01            [12] 3169 	mov	a,_rowloc
      000AFF 75 F0 04         [24] 3170 	mov	b,#0x04
      000B02 A4               [48] 3171 	mul	ab
      000B03 24rFB            [12] 3172 	add	a,#_keypad
      000B05 F5 82            [12] 3173 	mov	dpl,a
      000B07 74s04            [12] 3174 	mov	a,#(_keypad >> 8)
      000B09 35 F0            [12] 3175 	addc	a,b
      000B0B F5 83            [12] 3176 	mov	dph,a
      000B0D E4               [12] 3177 	clr	a
      000B0E 93               [24] 3178 	movc	a,@a+dptr
      000B0F F5 82            [12] 3179 	mov	dpl,a
      000B11 22               [24] 3180 	ret
      000B12                       3181 00131$:
                                   3182 ;	ecen4330lab7.c:790: else if(colloc == 0xD0)
      000B12 74 D0            [12] 3183 	mov	a,#0xd0
      000B14 B5*00 18         [24] 3184 	cjne	a,_colloc,00128$
                                   3185 ;	ecen4330lab7.c:792: return(keypad[rowloc][1]);
      000B17 E5*01            [12] 3186 	mov	a,_rowloc
      000B19 75 F0 04         [24] 3187 	mov	b,#0x04
      000B1C A4               [48] 3188 	mul	ab
      000B1D 24rFB            [12] 3189 	add	a,#_keypad
      000B1F FE               [12] 3190 	mov	r6,a
      000B20 74s04            [12] 3191 	mov	a,#(_keypad >> 8)
      000B22 35 F0            [12] 3192 	addc	a,b
      000B24 FF               [12] 3193 	mov	r7,a
      000B25 8E 82            [24] 3194 	mov	dpl,r6
      000B27 8F 83            [24] 3195 	mov	dph,r7
      000B29 A3               [24] 3196 	inc	dptr
      000B2A E4               [12] 3197 	clr	a
      000B2B 93               [24] 3198 	movc	a,@a+dptr
      000B2C F5 82            [12] 3199 	mov	dpl,a
      000B2E 22               [24] 3200 	ret
      000B2F                       3201 00128$:
                                   3202 ;	ecen4330lab7.c:794: else if(colloc == 0xB0)
      000B2F 74 B0            [12] 3203 	mov	a,#0xb0
      000B31 B5*00 19         [24] 3204 	cjne	a,_colloc,00125$
                                   3205 ;	ecen4330lab7.c:796: return(keypad[rowloc][2]);
      000B34 E5*01            [12] 3206 	mov	a,_rowloc
      000B36 75 F0 04         [24] 3207 	mov	b,#0x04
      000B39 A4               [48] 3208 	mul	ab
      000B3A 24rFB            [12] 3209 	add	a,#_keypad
      000B3C FE               [12] 3210 	mov	r6,a
      000B3D 74s04            [12] 3211 	mov	a,#(_keypad >> 8)
      000B3F 35 F0            [12] 3212 	addc	a,b
      000B41 FF               [12] 3213 	mov	r7,a
      000B42 8E 82            [24] 3214 	mov	dpl,r6
      000B44 8F 83            [24] 3215 	mov	dph,r7
      000B46 A3               [24] 3216 	inc	dptr
      000B47 A3               [24] 3217 	inc	dptr
      000B48 E4               [12] 3218 	clr	a
      000B49 93               [24] 3219 	movc	a,@a+dptr
      000B4A F5 82            [12] 3220 	mov	dpl,a
      000B4C 22               [24] 3221 	ret
      000B4D                       3222 00125$:
                                   3223 ;	ecen4330lab7.c:800: return(keypad[rowloc][3]);
      000B4D E5*01            [12] 3224 	mov	a,_rowloc
      000B4F 75 F0 04         [24] 3225 	mov	b,#0x04
      000B52 A4               [48] 3226 	mul	ab
      000B53 24rFB            [12] 3227 	add	a,#_keypad
      000B55 FE               [12] 3228 	mov	r6,a
      000B56 74s04            [12] 3229 	mov	a,#(_keypad >> 8)
      000B58 35 F0            [12] 3230 	addc	a,b
      000B5A FF               [12] 3231 	mov	r7,a
      000B5B 8E 82            [24] 3232 	mov	dpl,r6
      000B5D 8F 83            [24] 3233 	mov	dph,r7
      000B5F A3               [24] 3234 	inc	dptr
      000B60 A3               [24] 3235 	inc	dptr
      000B61 A3               [24] 3236 	inc	dptr
      000B62 E4               [12] 3237 	clr	a
      000B63 93               [24] 3238 	movc	a,@a+dptr
      000B64 F5 82            [12] 3239 	mov	dpl,a
      000B66 22               [24] 3240 	ret
      000B67                       3241 00134$:
                                   3242 ;	ecen4330lab7.c:804: received_flag = 0;
      000B67 75*42 00         [24] 3243 	mov	_received_flag,#0x00
                                   3244 ;	ecen4330lab7.c:805: return received_byte - 0x40;
      000B6A E5*41            [12] 3245 	mov	a,_received_byte
      000B6C 24 C0            [12] 3246 	add	a,#0xc0
      000B6E F5 82            [12] 3247 	mov	dpl,a
                                   3248 ;	ecen4330lab7.c:807: }
      000B70 22               [24] 3249 	ret
                                   3250 ;------------------------------------------------------------
                                   3251 ;Allocation info for local variables in function 'ASCIItoHEX'
                                   3252 ;------------------------------------------------------------
                                   3253 ;a                         Allocated to registers r7 
                                   3254 ;h                         Allocated to registers r7 
                                   3255 ;------------------------------------------------------------
                                   3256 ;	ecen4330lab7.c:815: unsigned char ASCIItoHEX(unsigned char a){
                                   3257 ;	-----------------------------------------
                                   3258 ;	 function ASCIItoHEX
                                   3259 ;	-----------------------------------------
      000B71                       3260 _ASCIItoHEX:
      000B71 AF 82            [24] 3261 	mov	r7,dpl
                                   3262 ;	ecen4330lab7.c:818: switch (a)
      000B73 BF 30 00         [24] 3263 	cjne	r7,#0x30,00129$
      000B76                       3264 00129$:
      000B76 50 03            [24] 3265 	jnc	00130$
      000B78 02r0Cr02         [24] 3266 	ljmp	00117$
      000B7B                       3267 00130$:
      000B7B EF               [12] 3268 	mov	a,r7
      000B7C 24 B9            [12] 3269 	add	a,#0xff - 0x46
      000B7E 50 03            [24] 3270 	jnc	00131$
      000B80 02r0Cr02         [24] 3271 	ljmp	00117$
      000B83                       3272 00131$:
      000B83 EF               [12] 3273 	mov	a,r7
      000B84 24 D0            [12] 3274 	add	a,#0xd0
      000B86 FF               [12] 3275 	mov	r7,a
      000B87 24 0A            [12] 3276 	add	a,#(00132$-3-.)
      000B89 83               [24] 3277 	movc	a,@a+pc
      000B8A F5 82            [12] 3278 	mov	dpl,a
      000B8C EF               [12] 3279 	mov	a,r7
      000B8D 24 1B            [12] 3280 	add	a,#(00133$-3-.)
      000B8F 83               [24] 3281 	movc	a,@a+pc
      000B90 F5 83            [12] 3282 	mov	dph,a
      000B92 E4               [12] 3283 	clr	a
      000B93 73               [24] 3284 	jmp	@a+dptr
      000B94                       3285 00132$:
      000B94rC2                    3286 	.db	00101$
      000B95rC6                    3287 	.db	00102$
      000B96rCA                    3288 	.db	00103$
      000B97rCE                    3289 	.db	00104$
      000B98rD2                    3290 	.db	00105$
      000B99rD6                    3291 	.db	00106$
      000B9ArDA                    3292 	.db	00107$
      000B9BrDE                    3293 	.db	00108$
      000B9CrE2                    3294 	.db	00109$
      000B9DrE6                    3295 	.db	00110$
      000B9Er02                    3296 	.db	00117$
      000B9Fr02                    3297 	.db	00117$
      000BA0r02                    3298 	.db	00117$
      000BA1r02                    3299 	.db	00117$
      000BA2r02                    3300 	.db	00117$
      000BA3r02                    3301 	.db	00117$
      000BA4r02                    3302 	.db	00117$
      000BA5rEA                    3303 	.db	00111$
      000BA6rEE                    3304 	.db	00112$
      000BA7rF2                    3305 	.db	00113$
      000BA8rF6                    3306 	.db	00114$
      000BA9rFA                    3307 	.db	00115$
      000BAArFE                    3308 	.db	00116$
      000BAB                       3309 00133$:
      000BABs0B                    3310 	.db	00101$>>8
      000BACs0B                    3311 	.db	00102$>>8
      000BADs0B                    3312 	.db	00103$>>8
      000BAEs0B                    3313 	.db	00104$>>8
      000BAFs0B                    3314 	.db	00105$>>8
      000BB0s0B                    3315 	.db	00106$>>8
      000BB1s0B                    3316 	.db	00107$>>8
      000BB2s0B                    3317 	.db	00108$>>8
      000BB3s0B                    3318 	.db	00109$>>8
      000BB4s0B                    3319 	.db	00110$>>8
      000BB5s0C                    3320 	.db	00117$>>8
      000BB6s0C                    3321 	.db	00117$>>8
      000BB7s0C                    3322 	.db	00117$>>8
      000BB8s0C                    3323 	.db	00117$>>8
      000BB9s0C                    3324 	.db	00117$>>8
      000BBAs0C                    3325 	.db	00117$>>8
      000BBBs0C                    3326 	.db	00117$>>8
      000BBCs0B                    3327 	.db	00111$>>8
      000BBDs0B                    3328 	.db	00112$>>8
      000BBEs0B                    3329 	.db	00113$>>8
      000BBFs0B                    3330 	.db	00114$>>8
      000BC0s0B                    3331 	.db	00115$>>8
      000BC1s0B                    3332 	.db	00116$>>8
                                   3333 ;	ecen4330lab7.c:820: case '0':
      000BC2                       3334 00101$:
                                   3335 ;	ecen4330lab7.c:821: h = 0x00;
      000BC2 7F 00            [12] 3336 	mov	r7,#0x00
                                   3337 ;	ecen4330lab7.c:822: break;
                                   3338 ;	ecen4330lab7.c:823: case '1':
      000BC4 80 3E            [24] 3339 	sjmp	00118$
      000BC6                       3340 00102$:
                                   3341 ;	ecen4330lab7.c:824: h = 0x01;
      000BC6 7F 01            [12] 3342 	mov	r7,#0x01
                                   3343 ;	ecen4330lab7.c:825: break;
                                   3344 ;	ecen4330lab7.c:826: case '2':
      000BC8 80 3A            [24] 3345 	sjmp	00118$
      000BCA                       3346 00103$:
                                   3347 ;	ecen4330lab7.c:827: h = 0x02;
      000BCA 7F 02            [12] 3348 	mov	r7,#0x02
                                   3349 ;	ecen4330lab7.c:828: break;
                                   3350 ;	ecen4330lab7.c:829: case '3':
      000BCC 80 36            [24] 3351 	sjmp	00118$
      000BCE                       3352 00104$:
                                   3353 ;	ecen4330lab7.c:830: h = 0x03;
      000BCE 7F 03            [12] 3354 	mov	r7,#0x03
                                   3355 ;	ecen4330lab7.c:831: break;
                                   3356 ;	ecen4330lab7.c:832: case '4':
      000BD0 80 32            [24] 3357 	sjmp	00118$
      000BD2                       3358 00105$:
                                   3359 ;	ecen4330lab7.c:833: h = 0x04;
      000BD2 7F 04            [12] 3360 	mov	r7,#0x04
                                   3361 ;	ecen4330lab7.c:834: break;
                                   3362 ;	ecen4330lab7.c:835: case '5':
      000BD4 80 2E            [24] 3363 	sjmp	00118$
      000BD6                       3364 00106$:
                                   3365 ;	ecen4330lab7.c:836: h = 0x05;
      000BD6 7F 05            [12] 3366 	mov	r7,#0x05
                                   3367 ;	ecen4330lab7.c:837: break;
                                   3368 ;	ecen4330lab7.c:838: case '6':
      000BD8 80 2A            [24] 3369 	sjmp	00118$
      000BDA                       3370 00107$:
                                   3371 ;	ecen4330lab7.c:839: h = 0x06;
      000BDA 7F 06            [12] 3372 	mov	r7,#0x06
                                   3373 ;	ecen4330lab7.c:840: break;
                                   3374 ;	ecen4330lab7.c:841: case '7':
      000BDC 80 26            [24] 3375 	sjmp	00118$
      000BDE                       3376 00108$:
                                   3377 ;	ecen4330lab7.c:842: h = 0x07;
      000BDE 7F 07            [12] 3378 	mov	r7,#0x07
                                   3379 ;	ecen4330lab7.c:843: break;
                                   3380 ;	ecen4330lab7.c:844: case '8':
      000BE0 80 22            [24] 3381 	sjmp	00118$
      000BE2                       3382 00109$:
                                   3383 ;	ecen4330lab7.c:845: h = 0x08;
      000BE2 7F 08            [12] 3384 	mov	r7,#0x08
                                   3385 ;	ecen4330lab7.c:846: break;
                                   3386 ;	ecen4330lab7.c:847: case '9':
      000BE4 80 1E            [24] 3387 	sjmp	00118$
      000BE6                       3388 00110$:
                                   3389 ;	ecen4330lab7.c:848: h = 0x09;
      000BE6 7F 09            [12] 3390 	mov	r7,#0x09
                                   3391 ;	ecen4330lab7.c:849: break;
                                   3392 ;	ecen4330lab7.c:850: case 'A':
      000BE8 80 1A            [24] 3393 	sjmp	00118$
      000BEA                       3394 00111$:
                                   3395 ;	ecen4330lab7.c:851: h = 0x0A;
      000BEA 7F 0A            [12] 3396 	mov	r7,#0x0a
                                   3397 ;	ecen4330lab7.c:852: break;
                                   3398 ;	ecen4330lab7.c:853: case 'B':
      000BEC 80 16            [24] 3399 	sjmp	00118$
      000BEE                       3400 00112$:
                                   3401 ;	ecen4330lab7.c:854: h = 0x0B;
      000BEE 7F 0B            [12] 3402 	mov	r7,#0x0b
                                   3403 ;	ecen4330lab7.c:855: break;
                                   3404 ;	ecen4330lab7.c:856: case 'C':
      000BF0 80 12            [24] 3405 	sjmp	00118$
      000BF2                       3406 00113$:
                                   3407 ;	ecen4330lab7.c:857: h = 0x0C;
      000BF2 7F 0C            [12] 3408 	mov	r7,#0x0c
                                   3409 ;	ecen4330lab7.c:858: break;
                                   3410 ;	ecen4330lab7.c:859: case 'D':
      000BF4 80 0E            [24] 3411 	sjmp	00118$
      000BF6                       3412 00114$:
                                   3413 ;	ecen4330lab7.c:860: h = 0x0D;
      000BF6 7F 0D            [12] 3414 	mov	r7,#0x0d
                                   3415 ;	ecen4330lab7.c:861: break;
                                   3416 ;	ecen4330lab7.c:862: case 'E':
      000BF8 80 0A            [24] 3417 	sjmp	00118$
      000BFA                       3418 00115$:
                                   3419 ;	ecen4330lab7.c:863: h = 0x0E;
      000BFA 7F 0E            [12] 3420 	mov	r7,#0x0e
                                   3421 ;	ecen4330lab7.c:864: break;
                                   3422 ;	ecen4330lab7.c:865: case 'F':
      000BFC 80 06            [24] 3423 	sjmp	00118$
      000BFE                       3424 00116$:
                                   3425 ;	ecen4330lab7.c:866: h = 0x0F;
      000BFE 7F 0F            [12] 3426 	mov	r7,#0x0f
                                   3427 ;	ecen4330lab7.c:867: break;
                                   3428 ;	ecen4330lab7.c:868: default:
      000C00 80 02            [24] 3429 	sjmp	00118$
      000C02                       3430 00117$:
                                   3431 ;	ecen4330lab7.c:869: h = 0x00;
      000C02 7F 00            [12] 3432 	mov	r7,#0x00
                                   3433 ;	ecen4330lab7.c:871: }
      000C04                       3434 00118$:
                                   3435 ;	ecen4330lab7.c:872: return h;
      000C04 8F 82            [24] 3436 	mov	dpl,r7
                                   3437 ;	ecen4330lab7.c:873: }
      000C06 22               [24] 3438 	ret
                                   3439 ;------------------------------------------------------------
                                   3440 ;Allocation info for local variables in function 'HEXtoASCII'
                                   3441 ;------------------------------------------------------------
                                   3442 ;h                         Allocated to registers r6 r7 
                                   3443 ;a                         Allocated to registers r7 
                                   3444 ;------------------------------------------------------------
                                   3445 ;	ecen4330lab7.c:880: unsigned char HEXtoASCII(unsigned int h){
                                   3446 ;	-----------------------------------------
                                   3447 ;	 function HEXtoASCII
                                   3448 ;	-----------------------------------------
      000C07                       3449 _HEXtoASCII:
      000C07 AE 82            [24] 3450 	mov	r6,dpl
      000C09 AF 83            [24] 3451 	mov	r7,dph
                                   3452 ;	ecen4330lab7.c:883: switch (h)
      000C0B C3               [12] 3453 	clr	c
      000C0C 74 0F            [12] 3454 	mov	a,#0x0f
      000C0E 9E               [12] 3455 	subb	a,r6
      000C0F E4               [12] 3456 	clr	a
      000C10 9F               [12] 3457 	subb	a,r7
      000C11 50 03            [24] 3458 	jnc	00125$
      000C13 02r0Cr84         [24] 3459 	ljmp	00117$
      000C16                       3460 00125$:
      000C16 EE               [12] 3461 	mov	a,r6
      000C17 24 0A            [12] 3462 	add	a,#(00126$-3-.)
      000C19 83               [24] 3463 	movc	a,@a+pc
      000C1A F5 82            [12] 3464 	mov	dpl,a
      000C1C EE               [12] 3465 	mov	a,r6
      000C1D 24 14            [12] 3466 	add	a,#(00127$-3-.)
      000C1F 83               [24] 3467 	movc	a,@a+pc
      000C20 F5 83            [12] 3468 	mov	dph,a
      000C22 E4               [12] 3469 	clr	a
      000C23 73               [24] 3470 	jmp	@a+dptr
      000C24                       3471 00126$:
      000C24r44                    3472 	.db	00101$
      000C25r48                    3473 	.db	00102$
      000C26r4C                    3474 	.db	00103$
      000C27r50                    3475 	.db	00104$
      000C28r54                    3476 	.db	00105$
      000C29r58                    3477 	.db	00106$
      000C2Ar5C                    3478 	.db	00107$
      000C2Br60                    3479 	.db	00108$
      000C2Cr64                    3480 	.db	00109$
      000C2Dr68                    3481 	.db	00110$
      000C2Er6C                    3482 	.db	00111$
      000C2Fr70                    3483 	.db	00112$
      000C30r74                    3484 	.db	00113$
      000C31r78                    3485 	.db	00114$
      000C32r7C                    3486 	.db	00115$
      000C33r80                    3487 	.db	00116$
      000C34                       3488 00127$:
      000C34s0C                    3489 	.db	00101$>>8
      000C35s0C                    3490 	.db	00102$>>8
      000C36s0C                    3491 	.db	00103$>>8
      000C37s0C                    3492 	.db	00104$>>8
      000C38s0C                    3493 	.db	00105$>>8
      000C39s0C                    3494 	.db	00106$>>8
      000C3As0C                    3495 	.db	00107$>>8
      000C3Bs0C                    3496 	.db	00108$>>8
      000C3Cs0C                    3497 	.db	00109$>>8
      000C3Ds0C                    3498 	.db	00110$>>8
      000C3Es0C                    3499 	.db	00111$>>8
      000C3Fs0C                    3500 	.db	00112$>>8
      000C40s0C                    3501 	.db	00113$>>8
      000C41s0C                    3502 	.db	00114$>>8
      000C42s0C                    3503 	.db	00115$>>8
      000C43s0C                    3504 	.db	00116$>>8
                                   3505 ;	ecen4330lab7.c:885: case 0x0000:
      000C44                       3506 00101$:
                                   3507 ;	ecen4330lab7.c:886: a = '0';
      000C44 7F 30            [12] 3508 	mov	r7,#0x30
                                   3509 ;	ecen4330lab7.c:887: break;
                                   3510 ;	ecen4330lab7.c:888: case 0x0001:
      000C46 80 3E            [24] 3511 	sjmp	00118$
      000C48                       3512 00102$:
                                   3513 ;	ecen4330lab7.c:889: a = '1';
      000C48 7F 31            [12] 3514 	mov	r7,#0x31
                                   3515 ;	ecen4330lab7.c:890: break;
                                   3516 ;	ecen4330lab7.c:891: case 0x0002:
      000C4A 80 3A            [24] 3517 	sjmp	00118$
      000C4C                       3518 00103$:
                                   3519 ;	ecen4330lab7.c:892: a = '2';
      000C4C 7F 32            [12] 3520 	mov	r7,#0x32
                                   3521 ;	ecen4330lab7.c:893: break;
                                   3522 ;	ecen4330lab7.c:894: case 0x0003:
      000C4E 80 36            [24] 3523 	sjmp	00118$
      000C50                       3524 00104$:
                                   3525 ;	ecen4330lab7.c:895: a = '3';
      000C50 7F 33            [12] 3526 	mov	r7,#0x33
                                   3527 ;	ecen4330lab7.c:896: break;
                                   3528 ;	ecen4330lab7.c:897: case 0x0004:
      000C52 80 32            [24] 3529 	sjmp	00118$
      000C54                       3530 00105$:
                                   3531 ;	ecen4330lab7.c:898: a = '4';
      000C54 7F 34            [12] 3532 	mov	r7,#0x34
                                   3533 ;	ecen4330lab7.c:899: break;
                                   3534 ;	ecen4330lab7.c:900: case 0x0005:
      000C56 80 2E            [24] 3535 	sjmp	00118$
      000C58                       3536 00106$:
                                   3537 ;	ecen4330lab7.c:901: a = '5';
      000C58 7F 35            [12] 3538 	mov	r7,#0x35
                                   3539 ;	ecen4330lab7.c:902: break;
                                   3540 ;	ecen4330lab7.c:903: case 0x0006:
      000C5A 80 2A            [24] 3541 	sjmp	00118$
      000C5C                       3542 00107$:
                                   3543 ;	ecen4330lab7.c:904: a = '6';
      000C5C 7F 36            [12] 3544 	mov	r7,#0x36
                                   3545 ;	ecen4330lab7.c:905: break;
                                   3546 ;	ecen4330lab7.c:906: case 0x0007:
      000C5E 80 26            [24] 3547 	sjmp	00118$
      000C60                       3548 00108$:
                                   3549 ;	ecen4330lab7.c:907: a = '7';
      000C60 7F 37            [12] 3550 	mov	r7,#0x37
                                   3551 ;	ecen4330lab7.c:908: break;
                                   3552 ;	ecen4330lab7.c:909: case 0x0008:
      000C62 80 22            [24] 3553 	sjmp	00118$
      000C64                       3554 00109$:
                                   3555 ;	ecen4330lab7.c:910: a = '8';
      000C64 7F 38            [12] 3556 	mov	r7,#0x38
                                   3557 ;	ecen4330lab7.c:911: break;
                                   3558 ;	ecen4330lab7.c:912: case 0x0009:
      000C66 80 1E            [24] 3559 	sjmp	00118$
      000C68                       3560 00110$:
                                   3561 ;	ecen4330lab7.c:913: a = '9';
      000C68 7F 39            [12] 3562 	mov	r7,#0x39
                                   3563 ;	ecen4330lab7.c:914: break;
                                   3564 ;	ecen4330lab7.c:915: case 0x000A:
      000C6A 80 1A            [24] 3565 	sjmp	00118$
      000C6C                       3566 00111$:
                                   3567 ;	ecen4330lab7.c:916: a = 'A';
      000C6C 7F 41            [12] 3568 	mov	r7,#0x41
                                   3569 ;	ecen4330lab7.c:917: break;
                                   3570 ;	ecen4330lab7.c:918: case 0x000B:
      000C6E 80 16            [24] 3571 	sjmp	00118$
      000C70                       3572 00112$:
                                   3573 ;	ecen4330lab7.c:919: a = 'B';
      000C70 7F 42            [12] 3574 	mov	r7,#0x42
                                   3575 ;	ecen4330lab7.c:920: break;
                                   3576 ;	ecen4330lab7.c:921: case 0x000C:
      000C72 80 12            [24] 3577 	sjmp	00118$
      000C74                       3578 00113$:
                                   3579 ;	ecen4330lab7.c:922: a = 'C';
      000C74 7F 43            [12] 3580 	mov	r7,#0x43
                                   3581 ;	ecen4330lab7.c:923: break;
                                   3582 ;	ecen4330lab7.c:924: case 0x000D:
      000C76 80 0E            [24] 3583 	sjmp	00118$
      000C78                       3584 00114$:
                                   3585 ;	ecen4330lab7.c:925: a = 'D';
      000C78 7F 44            [12] 3586 	mov	r7,#0x44
                                   3587 ;	ecen4330lab7.c:926: break;
                                   3588 ;	ecen4330lab7.c:927: case 0x000E:
      000C7A 80 0A            [24] 3589 	sjmp	00118$
      000C7C                       3590 00115$:
                                   3591 ;	ecen4330lab7.c:928: a = 'E';
      000C7C 7F 45            [12] 3592 	mov	r7,#0x45
                                   3593 ;	ecen4330lab7.c:929: break;
                                   3594 ;	ecen4330lab7.c:930: case 0x000F:
      000C7E 80 06            [24] 3595 	sjmp	00118$
      000C80                       3596 00116$:
                                   3597 ;	ecen4330lab7.c:931: a = 'F';
      000C80 7F 46            [12] 3598 	mov	r7,#0x46
                                   3599 ;	ecen4330lab7.c:932: break;
                                   3600 ;	ecen4330lab7.c:933: default:
      000C82 80 02            [24] 3601 	sjmp	00118$
      000C84                       3602 00117$:
                                   3603 ;	ecen4330lab7.c:934: a = '0';
      000C84 7F 30            [12] 3604 	mov	r7,#0x30
                                   3605 ;	ecen4330lab7.c:936: }
      000C86                       3606 00118$:
                                   3607 ;	ecen4330lab7.c:937: return a;
      000C86 8F 82            [24] 3608 	mov	dpl,r7
                                   3609 ;	ecen4330lab7.c:938: }
      000C88 22               [24] 3610 	ret
                                   3611 ;------------------------------------------------------------
                                   3612 ;Allocation info for local variables in function 'HEXtoASCII_8write'
                                   3613 ;------------------------------------------------------------
                                   3614 ;h                         Allocated to registers r7 
                                   3615 ;------------------------------------------------------------
                                   3616 ;	ecen4330lab7.c:946: void HEXtoASCII_8write(unsigned char h){
                                   3617 ;	-----------------------------------------
                                   3618 ;	 function HEXtoASCII_8write
                                   3619 ;	-----------------------------------------
      000C89                       3620 _HEXtoASCII_8write:
                                   3621 ;	ecen4330lab7.c:949: byte = (h >> 4);
      000C89 E5 82            [12] 3622 	mov	a,dpl
      000C8B FF               [12] 3623 	mov	r7,a
      000C8C C4               [12] 3624 	swap	a
      000C8D 54 0F            [12] 3625 	anl	a,#0x0f
      000C8F FE               [12] 3626 	mov	r6,a
      000C90 8E*2D            [24] 3627 	mov	_byte,r6
      000C92 75*2E 00         [24] 3628 	mov	(_byte + 1),#0x00
                                   3629 ;	ecen4330lab7.c:950: byte &= 0x0F;
      000C95 53*2D 0F         [24] 3630 	anl	_byte,#0x0f
      000C98 75*2E 00         [24] 3631 	mov	(_byte + 1),#0x00
                                   3632 ;	ecen4330lab7.c:951: ASCII = HEXtoASCII(byte);
      000C9B 85*2D 82         [24] 3633 	mov	dpl,_byte
      000C9E 85*2E 83         [24] 3634 	mov	dph,(_byte + 1)
      000CA1 C0 07            [24] 3635 	push	ar7
      000CA3 12r0Cr07         [24] 3636 	lcall	_HEXtoASCII
                                   3637 ;	ecen4330lab7.c:952: write(ASCII);
      000CA6 85 82*31         [24] 3638 	mov  _ASCII,dpl
      000CA9 12r09rB3         [24] 3639 	lcall	_write
      000CAC D0 07            [24] 3640 	pop	ar7
                                   3641 ;	ecen4330lab7.c:955: byte = (h & 0x0F);
      000CAE 7E 00            [12] 3642 	mov	r6,#0x00
      000CB0 74 0F            [12] 3643 	mov	a,#0x0f
      000CB2 5F               [12] 3644 	anl	a,r7
      000CB3 F5*2D            [12] 3645 	mov	_byte,a
                                   3646 ;	1-genFromRTrack replaced	mov	(_byte + 1),#0x00
      000CB5 8E*2E            [24] 3647 	mov	(_byte + 1),r6
                                   3648 ;	ecen4330lab7.c:956: ASCII = HEXtoASCII(byte);
      000CB7 85*2D 82         [24] 3649 	mov	dpl,_byte
      000CBA 85*2E 83         [24] 3650 	mov	dph,(_byte + 1)
      000CBD 12r0Cr07         [24] 3651 	lcall	_HEXtoASCII
                                   3652 ;	ecen4330lab7.c:957: write(ASCII);
      000CC0 85 82*31         [24] 3653 	mov  _ASCII,dpl
                                   3654 ;	ecen4330lab7.c:958: }
      000CC3 02r09rB3         [24] 3655 	ljmp	_write
                                   3656 ;------------------------------------------------------------
                                   3657 ;Allocation info for local variables in function 'HEXtoASCII_16write'
                                   3658 ;------------------------------------------------------------
                                   3659 ;h                         Allocated to registers r6 r7 
                                   3660 ;------------------------------------------------------------
                                   3661 ;	ecen4330lab7.c:966: void HEXtoASCII_16write(unsigned int h){
                                   3662 ;	-----------------------------------------
                                   3663 ;	 function HEXtoASCII_16write
                                   3664 ;	-----------------------------------------
      000CC6                       3665 _HEXtoASCII_16write:
      000CC6 AE 82            [24] 3666 	mov	r6,dpl
                                   3667 ;	ecen4330lab7.c:969: byte = (h >> 12);
      000CC8 E5 83            [12] 3668 	mov	a,dph
      000CCA FF               [12] 3669 	mov	r7,a
      000CCB C4               [12] 3670 	swap	a
      000CCC 54 0F            [12] 3671 	anl	a,#0x0f
      000CCE F5*2D            [12] 3672 	mov	_byte,a
      000CD0 75*2E 00         [24] 3673 	mov	(_byte + 1),#0x00
                                   3674 ;	ecen4330lab7.c:970: byte &= 0x000F;
      000CD3 53*2D 0F         [24] 3675 	anl	_byte,#0x0f
      000CD6 75*2E 00         [24] 3676 	mov	(_byte + 1),#0x00
                                   3677 ;	ecen4330lab7.c:971: ASCII = HEXtoASCII(byte);
      000CD9 85*2D 82         [24] 3678 	mov	dpl,_byte
      000CDC 85*2E 83         [24] 3679 	mov	dph,(_byte + 1)
      000CDF C0 07            [24] 3680 	push	ar7
      000CE1 C0 06            [24] 3681 	push	ar6
      000CE3 12r0Cr07         [24] 3682 	lcall	_HEXtoASCII
      000CE6 85 82*31         [24] 3683 	mov	_ASCII,dpl
                                   3684 ;	ecen4330lab7.c:972: LCD_string_write("0x");
      000CE9 90r05r27         [24] 3685 	mov	dptr,#___str_2
      000CEC 75 F0 80         [24] 3686 	mov	b,#0x80
      000CEF 12r0Ar19         [24] 3687 	lcall	_LCD_string_write
                                   3688 ;	ecen4330lab7.c:973: write(ASCII);
      000CF2 85*31 82         [24] 3689 	mov	dpl,_ASCII
      000CF5 12r09rB3         [24] 3690 	lcall	_write
      000CF8 D0 06            [24] 3691 	pop	ar6
      000CFA D0 07            [24] 3692 	pop	ar7
                                   3693 ;	ecen4330lab7.c:976: byte = (h >> 8);
      000CFC 8F*2D            [24] 3694 	mov	_byte,r7
      000CFE 75*2E 00         [24] 3695 	mov	(_byte + 1),#0x00
                                   3696 ;	ecen4330lab7.c:977: byte &= 0x000F;
      000D01 53*2D 0F         [24] 3697 	anl	_byte,#0x0f
      000D04 75*2E 00         [24] 3698 	mov	(_byte + 1),#0x00
                                   3699 ;	ecen4330lab7.c:978: ASCII = HEXtoASCII(byte);
      000D07 85*2D 82         [24] 3700 	mov	dpl,_byte
      000D0A 85*2E 83         [24] 3701 	mov	dph,(_byte + 1)
      000D0D C0 07            [24] 3702 	push	ar7
      000D0F C0 06            [24] 3703 	push	ar6
      000D11 12r0Cr07         [24] 3704 	lcall	_HEXtoASCII
                                   3705 ;	ecen4330lab7.c:979: write(ASCII);
      000D14 85 82*31         [24] 3706 	mov  _ASCII,dpl
      000D17 12r09rB3         [24] 3707 	lcall	_write
      000D1A D0 06            [24] 3708 	pop	ar6
      000D1C D0 07            [24] 3709 	pop	ar7
                                   3710 ;	ecen4330lab7.c:982: byte = (h >> 4);
      000D1E 8E*2D            [24] 3711 	mov	_byte,r6
      000D20 EF               [12] 3712 	mov	a,r7
      000D21 C4               [12] 3713 	swap	a
      000D22 C5*2D            [12] 3714 	xch	a,_byte
      000D24 C4               [12] 3715 	swap	a
      000D25 54 0F            [12] 3716 	anl	a,#0x0f
      000D27 65*2D            [12] 3717 	xrl	a,_byte
      000D29 C5*2D            [12] 3718 	xch	a,_byte
      000D2B 54 0F            [12] 3719 	anl	a,#0x0f
      000D2D C5*2D            [12] 3720 	xch	a,_byte
      000D2F 65*2D            [12] 3721 	xrl	a,_byte
      000D31 C5*2D            [12] 3722 	xch	a,_byte
      000D33 F5*2E            [12] 3723 	mov	(_byte + 1),a
                                   3724 ;	ecen4330lab7.c:983: byte &= 0x000F;
      000D35 53*2D 0F         [24] 3725 	anl	_byte,#0x0f
      000D38 75*2E 00         [24] 3726 	mov	(_byte + 1),#0x00
                                   3727 ;	ecen4330lab7.c:984: ASCII = HEXtoASCII(byte);
      000D3B 85*2D 82         [24] 3728 	mov	dpl,_byte
      000D3E 85*2E 83         [24] 3729 	mov	dph,(_byte + 1)
      000D41 C0 07            [24] 3730 	push	ar7
      000D43 C0 06            [24] 3731 	push	ar6
      000D45 12r0Cr07         [24] 3732 	lcall	_HEXtoASCII
                                   3733 ;	ecen4330lab7.c:985: write(ASCII);
      000D48 85 82*31         [24] 3734 	mov  _ASCII,dpl
      000D4B 12r09rB3         [24] 3735 	lcall	_write
      000D4E D0 06            [24] 3736 	pop	ar6
      000D50 D0 07            [24] 3737 	pop	ar7
                                   3738 ;	ecen4330lab7.c:988: byte = h;
      000D52 8E*2D            [24] 3739 	mov	_byte,r6
      000D54 8F*2E            [24] 3740 	mov	(_byte + 1),r7
                                   3741 ;	ecen4330lab7.c:989: byte &= 0x000F;
      000D56 53*2D 0F         [24] 3742 	anl	_byte,#0x0f
      000D59 75*2E 00         [24] 3743 	mov	(_byte + 1),#0x00
                                   3744 ;	ecen4330lab7.c:990: ASCII = HEXtoASCII(byte);
      000D5C 85*2D 82         [24] 3745 	mov	dpl,_byte
      000D5F 85*2E 83         [24] 3746 	mov	dph,(_byte + 1)
      000D62 12r0Cr07         [24] 3747 	lcall	_HEXtoASCII
                                   3748 ;	ecen4330lab7.c:991: write(ASCII);
      000D65 85 82*31         [24] 3749 	mov  _ASCII,dpl
                                   3750 ;	ecen4330lab7.c:992: }
      000D68 02r09rB3         [24] 3751 	ljmp	_write
                                   3752 ;------------------------------------------------------------
                                   3753 ;Allocation info for local variables in function 'RAMwrite'
                                   3754 ;------------------------------------------------------------
                                   3755 ;d                         Allocated with name '_RAMwrite_PARM_2'
                                   3756 ;a                         Allocated to registers r6 r7 
                                   3757 ;ram_address               Allocated to registers 
                                   3758 ;------------------------------------------------------------
                                   3759 ;	ecen4330lab7.c:1000: void RAMwrite(unsigned int a, unsigned char d){
                                   3760 ;	-----------------------------------------
                                   3761 ;	 function RAMwrite
                                   3762 ;	-----------------------------------------
      000D6B                       3763 _RAMwrite:
      000D6B AE 82            [24] 3764 	mov	r6,dpl
      000D6D AF 83            [24] 3765 	mov	r7,dph
                                   3766 ;	ecen4330lab7.c:1003: IOM = 0;
                                   3767 ;	assignBit
      000D6F C2 B4            [12] 3768 	clr	_P3_4
                                   3769 ;	ecen4330lab7.c:1006: ram_address = (unsigned char __xdata*)(a);
      000D71 8E 82            [24] 3770 	mov	dpl,r6
      000D73 8F 83            [24] 3771 	mov	dph,r7
                                   3772 ;	ecen4330lab7.c:1009: *ram_address = d;
      000D75 E5*00            [12] 3773 	mov	a,_RAMwrite_PARM_2
      000D77 F0               [24] 3774 	movx	@dptr,a
                                   3775 ;	ecen4330lab7.c:1010: IOM = 1;
                                   3776 ;	assignBit
      000D78 D2 B4            [12] 3777 	setb	_P3_4
                                   3778 ;	ecen4330lab7.c:1011: }
      000D7A 22               [24] 3779 	ret
                                   3780 ;------------------------------------------------------------
                                   3781 ;Allocation info for local variables in function 'testRAM'
                                   3782 ;------------------------------------------------------------
                                   3783 ;d                         Allocated to registers r7 
                                   3784 ;i                         Allocated to registers r5 r6 
                                   3785 ;ram_address               Allocated to registers 
                                   3786 ;------------------------------------------------------------
                                   3787 ;	ecen4330lab7.c:1014: void testRAM(unsigned char d){
                                   3788 ;	-----------------------------------------
                                   3789 ;	 function testRAM
                                   3790 ;	-----------------------------------------
      000D7B                       3791 _testRAM:
      000D7B AF 82            [24] 3792 	mov	r7,dpl
                                   3793 ;	ecen4330lab7.c:1018: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D7D 7D 00            [12] 3794 	mov	r5,#0x00
      000D7F 7E 00            [12] 3795 	mov	r6,#0x00
      000D81                       3796 00102$:
                                   3797 ;	ecen4330lab7.c:1019: IOM = 0;
                                   3798 ;	assignBit
      000D81 C2 B4            [12] 3799 	clr	_P3_4
                                   3800 ;	ecen4330lab7.c:1020: ram_address = (unsigned char __xdata*)(i);
      000D83 8D 82            [24] 3801 	mov	dpl,r5
      000D85 8E 83            [24] 3802 	mov	dph,r6
                                   3803 ;	ecen4330lab7.c:1021: *ram_address = d;
      000D87 EF               [12] 3804 	mov	a,r7
      000D88 F0               [24] 3805 	movx	@dptr,a
                                   3806 ;	ecen4330lab7.c:1022: IOM = 1;
                                   3807 ;	assignBit
      000D89 D2 B4            [12] 3808 	setb	_P3_4
                                   3809 ;	ecen4330lab7.c:1018: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000D8B 0D               [12] 3810 	inc	r5
      000D8C BD 00 01         [24] 3811 	cjne	r5,#0x00,00111$
      000D8F 0E               [12] 3812 	inc	r6
      000D90                       3813 00111$:
      000D90 C3               [12] 3814 	clr	c
      000D91 74 FE            [12] 3815 	mov	a,#0xfe
      000D93 9D               [12] 3816 	subb	a,r5
      000D94 74 FF            [12] 3817 	mov	a,#0xff
      000D96 9E               [12] 3818 	subb	a,r6
      000D97 50 E8            [24] 3819 	jnc	00102$
                                   3820 ;	ecen4330lab7.c:1025: }
      000D99 22               [24] 3821 	ret
                                   3822 ;------------------------------------------------------------
                                   3823 ;Allocation info for local variables in function 'RAMread'
                                   3824 ;------------------------------------------------------------
                                   3825 ;a                         Allocated to registers r6 r7 
                                   3826 ;ram_address               Allocated to registers 
                                   3827 ;------------------------------------------------------------
                                   3828 ;	ecen4330lab7.c:1032: unsigned char RAMread(unsigned int a){
                                   3829 ;	-----------------------------------------
                                   3830 ;	 function RAMread
                                   3831 ;	-----------------------------------------
      000D9A                       3832 _RAMread:
      000D9A AE 82            [24] 3833 	mov	r6,dpl
      000D9C AF 83            [24] 3834 	mov	r7,dph
                                   3835 ;	ecen4330lab7.c:1035: IOM = 0;
                                   3836 ;	assignBit
      000D9E C2 B4            [12] 3837 	clr	_P3_4
                                   3838 ;	ecen4330lab7.c:1038: ram_address = (unsigned char __xdata*)(a);
      000DA0 8E 82            [24] 3839 	mov	dpl,r6
      000DA2 8F 83            [24] 3840 	mov	dph,r7
                                   3841 ;	ecen4330lab7.c:1041: data = *ram_address;
      000DA4 E0               [24] 3842 	movx	a,@dptr
      000DA5 F5*20            [12] 3843 	mov	_data,a
                                   3844 ;	ecen4330lab7.c:1042: IOM = 1;
                                   3845 ;	assignBit
      000DA7 D2 B4            [12] 3846 	setb	_P3_4
                                   3847 ;	ecen4330lab7.c:1043: return data;
      000DA9 85*20 82         [24] 3848 	mov	dpl,_data
                                   3849 ;	ecen4330lab7.c:1044: }
      000DAC 22               [24] 3850 	ret
                                   3851 ;------------------------------------------------------------
                                   3852 ;Allocation info for local variables in function 'resetLCD'
                                   3853 ;------------------------------------------------------------
                                   3854 ;	ecen4330lab7.c:1056: void resetLCD(){
                                   3855 ;	-----------------------------------------
                                   3856 ;	 function resetLCD
                                   3857 ;	-----------------------------------------
      000DAD                       3858 _resetLCD:
                                   3859 ;	ecen4330lab7.c:1057: setRotation(4);
      000DAD 75 82 04         [24] 3860 	mov	dpl,#0x04
      000DB0 12r03r4F         [24] 3861 	lcall	_setRotation
                                   3862 ;	ecen4330lab7.c:1058: setTextColor(GRAY, BLACK);
      000DB3 E4               [12] 3863 	clr	a
      000DB4 F5*00            [12] 3864 	mov	_setTextColor_PARM_2,a
      000DB6 F5*01            [12] 3865 	mov	(_setTextColor_PARM_2 + 1),a
      000DB8 90 D6 BA         [24] 3866 	mov	dptr,#0xd6ba
      000DBB 12r03r2A         [24] 3867 	lcall	_setTextColor
                                   3868 ;	ecen4330lab7.c:1059: setTextSize(3);
      000DBE 75 82 03         [24] 3869 	mov	dpl,#0x03
      000DC1 12r03r37         [24] 3870 	lcall	_setTextSize
                                   3871 ;	ecen4330lab7.c:1060: fillScreen(BLACK);
      000DC4 90 00 00         [24] 3872 	mov	dptr,#0x0000
      000DC7 12r06rC2         [24] 3873 	lcall	_fillScreen
                                   3874 ;	ecen4330lab7.c:1061: setCursor(0, 0);
      000DCA E4               [12] 3875 	clr	a
      000DCB F5*00            [12] 3876 	mov	_setCursor_PARM_2,a
      000DCD F5*01            [12] 3877 	mov	(_setCursor_PARM_2 + 1),a
      000DCF 90 00 00         [24] 3878 	mov	dptr,#0x0000
                                   3879 ;	ecen4330lab7.c:1062: }
      000DD2 02r03r1D         [24] 3880 	ljmp	_setCursor
                                   3881 ;------------------------------------------------------------
                                   3882 ;Allocation info for local variables in function 'invalidInput'
                                   3883 ;------------------------------------------------------------
                                   3884 ;	ecen4330lab7.c:1074: void invalidInput(){
                                   3885 ;	-----------------------------------------
                                   3886 ;	 function invalidInput
                                   3887 ;	-----------------------------------------
      000DD5                       3888 _invalidInput:
                                   3889 ;	ecen4330lab7.c:1075: resetLCD();
      000DD5 12r0DrAD         [24] 3890 	lcall	_resetLCD
                                   3891 ;	ecen4330lab7.c:1076: setTextColor(RED, BLACK);
      000DD8 E4               [12] 3892 	clr	a
      000DD9 F5*00            [12] 3893 	mov	_setTextColor_PARM_2,a
      000DDB F5*01            [12] 3894 	mov	(_setTextColor_PARM_2 + 1),a
      000DDD 90 F8 00         [24] 3895 	mov	dptr,#0xf800
      000DE0 12r03r2A         [24] 3896 	lcall	_setTextColor
                                   3897 ;	ecen4330lab7.c:1079: LCD_string_write("\n   Invalid\n\n");
      000DE3 90r05r2A         [24] 3898 	mov	dptr,#___str_3
      000DE6 75 F0 80         [24] 3899 	mov	b,#0x80
      000DE9 12r0Ar19         [24] 3900 	lcall	_LCD_string_write
                                   3901 ;	ecen4330lab7.c:1080: LCD_string_write("    Input");
      000DEC 90r05r38         [24] 3902 	mov	dptr,#___str_4
      000DEF 75 F0 80         [24] 3903 	mov	b,#0x80
      000DF2 12r0Ar19         [24] 3904 	lcall	_LCD_string_write
                                   3905 ;	ecen4330lab7.c:1083: delay(200);
      000DF5 90 00 C8         [24] 3906 	mov	dptr,#0x00c8
      000DF8 12r00r79         [24] 3907 	lcall	_delay
                                   3908 ;	ecen4330lab7.c:1084: resetLCD();
                                   3909 ;	ecen4330lab7.c:1085: }
      000DFB 02r0DrAD         [24] 3910 	ljmp	_resetLCD
                                   3911 ;------------------------------------------------------------
                                   3912 ;Allocation info for local variables in function 'inputRead16'
                                   3913 ;------------------------------------------------------------
                                   3914 ;	ecen4330lab7.c:1096: void inputRead16(){
                                   3915 ;	-----------------------------------------
                                   3916 ;	 function inputRead16
                                   3917 ;	-----------------------------------------
      000DFE                       3918 _inputRead16:
                                   3919 ;	ecen4330lab7.c:1097: input16 = 0x0000;
      000DFE E4               [12] 3920 	clr	a
      000DFF F5*17            [12] 3921 	mov	_input16,a
      000E01 F5*18            [12] 3922 	mov	(_input16 + 1),a
                                   3923 ;	ecen4330lab7.c:1099: setTextColor(WHITE, BLACK);
      000E03 F5*00            [12] 3924 	mov	_setTextColor_PARM_2,a
      000E05 F5*01            [12] 3925 	mov	(_setTextColor_PARM_2 + 1),a
      000E07 90 FF FF         [24] 3926 	mov	dptr,#0xffff
      000E0A 12r03r2A         [24] 3927 	lcall	_setTextColor
                                   3928 ;	ecen4330lab7.c:1102: key = keyDetect();
      000E0D 12r0Ar58         [24] 3929 	lcall	_keyDetect
      000E10 85 82*16         [24] 3930 	mov	_key,dpl
                                   3931 ;	ecen4330lab7.c:1103: setTextColor(WHITE, BLACK);
      000E13 E4               [12] 3932 	clr	a
      000E14 F5*00            [12] 3933 	mov	_setTextColor_PARM_2,a
      000E16 F5*01            [12] 3934 	mov	(_setTextColor_PARM_2 + 1),a
      000E18 90 FF FF         [24] 3935 	mov	dptr,#0xffff
      000E1B 12r03r2A         [24] 3936 	lcall	_setTextColor
                                   3937 ;	ecen4330lab7.c:1104: write(key);
      000E1E 85*16 82         [24] 3938 	mov	dpl,_key
      000E21 12r09rB3         [24] 3939 	lcall	_write
                                   3940 ;	ecen4330lab7.c:1105: input16 |= (ASCIItoHEX(key) << 12);
      000E24 85*16 82         [24] 3941 	mov	dpl,_key
      000E27 12r0Br71         [24] 3942 	lcall	_ASCIItoHEX
      000E2A AF 82            [24] 3943 	mov	r7,dpl
      000E2C EF               [12] 3944 	mov	a,r7
      000E2D C4               [12] 3945 	swap	a
      000E2E 54 F0            [12] 3946 	anl	a,#0xf0
      000E30 FE               [12] 3947 	mov	r6,a
      000E31 E4               [12] 3948 	clr	a
      000E32 42*17            [12] 3949 	orl	_input16,a
      000E34 EE               [12] 3950 	mov	a,r6
      000E35 42*18            [12] 3951 	orl	(_input16 + 1),a
                                   3952 ;	ecen4330lab7.c:1107: key = keyDetect();
      000E37 12r0Ar58         [24] 3953 	lcall	_keyDetect
      000E3A 85 82*16         [24] 3954 	mov	_key,dpl
                                   3955 ;	ecen4330lab7.c:1108: setTextColor(WHITE, BLACK);
      000E3D E4               [12] 3956 	clr	a
      000E3E F5*00            [12] 3957 	mov	_setTextColor_PARM_2,a
      000E40 F5*01            [12] 3958 	mov	(_setTextColor_PARM_2 + 1),a
      000E42 90 FF FF         [24] 3959 	mov	dptr,#0xffff
      000E45 12r03r2A         [24] 3960 	lcall	_setTextColor
                                   3961 ;	ecen4330lab7.c:1109: write(key);
      000E48 85*16 82         [24] 3962 	mov	dpl,_key
      000E4B 12r09rB3         [24] 3963 	lcall	_write
                                   3964 ;	ecen4330lab7.c:1110: input16 |= (ASCIItoHEX(key) << 8);
      000E4E 85*16 82         [24] 3965 	mov	dpl,_key
      000E51 12r0Br71         [24] 3966 	lcall	_ASCIItoHEX
      000E54 AF 82            [24] 3967 	mov	r7,dpl
      000E56 8F 06            [24] 3968 	mov	ar6,r7
      000E58 E4               [12] 3969 	clr	a
      000E59 42*17            [12] 3970 	orl	_input16,a
      000E5B EE               [12] 3971 	mov	a,r6
      000E5C 42*18            [12] 3972 	orl	(_input16 + 1),a
                                   3973 ;	ecen4330lab7.c:1112: key = keyDetect();
      000E5E 12r0Ar58         [24] 3974 	lcall	_keyDetect
      000E61 85 82*16         [24] 3975 	mov	_key,dpl
                                   3976 ;	ecen4330lab7.c:1113: setTextColor(WHITE, BLACK);
      000E64 E4               [12] 3977 	clr	a
      000E65 F5*00            [12] 3978 	mov	_setTextColor_PARM_2,a
      000E67 F5*01            [12] 3979 	mov	(_setTextColor_PARM_2 + 1),a
      000E69 90 FF FF         [24] 3980 	mov	dptr,#0xffff
      000E6C 12r03r2A         [24] 3981 	lcall	_setTextColor
                                   3982 ;	ecen4330lab7.c:1114: write(key);
      000E6F 85*16 82         [24] 3983 	mov	dpl,_key
      000E72 12r09rB3         [24] 3984 	lcall	_write
                                   3985 ;	ecen4330lab7.c:1115: input16 |= (ASCIItoHEX(key) << 4);
      000E75 85*16 82         [24] 3986 	mov	dpl,_key
      000E78 12r0Br71         [24] 3987 	lcall	_ASCIItoHEX
      000E7B AF 82            [24] 3988 	mov	r7,dpl
      000E7D E4               [12] 3989 	clr	a
      000E7E C4               [12] 3990 	swap	a
      000E7F 54 F0            [12] 3991 	anl	a,#0xf0
      000E81 CF               [12] 3992 	xch	a,r7
      000E82 C4               [12] 3993 	swap	a
      000E83 CF               [12] 3994 	xch	a,r7
      000E84 6F               [12] 3995 	xrl	a,r7
      000E85 CF               [12] 3996 	xch	a,r7
      000E86 54 F0            [12] 3997 	anl	a,#0xf0
      000E88 CF               [12] 3998 	xch	a,r7
      000E89 6F               [12] 3999 	xrl	a,r7
      000E8A FE               [12] 4000 	mov	r6,a
      000E8B EF               [12] 4001 	mov	a,r7
      000E8C 42*17            [12] 4002 	orl	_input16,a
      000E8E EE               [12] 4003 	mov	a,r6
      000E8F 42*18            [12] 4004 	orl	(_input16 + 1),a
                                   4005 ;	ecen4330lab7.c:1117: key = keyDetect();
      000E91 12r0Ar58         [24] 4006 	lcall	_keyDetect
      000E94 85 82*16         [24] 4007 	mov	_key,dpl
                                   4008 ;	ecen4330lab7.c:1118: setTextColor(WHITE, BLACK);
      000E97 E4               [12] 4009 	clr	a
      000E98 F5*00            [12] 4010 	mov	_setTextColor_PARM_2,a
      000E9A F5*01            [12] 4011 	mov	(_setTextColor_PARM_2 + 1),a
      000E9C 90 FF FF         [24] 4012 	mov	dptr,#0xffff
      000E9F 12r03r2A         [24] 4013 	lcall	_setTextColor
                                   4014 ;	ecen4330lab7.c:1119: write(key);
      000EA2 85*16 82         [24] 4015 	mov	dpl,_key
      000EA5 12r09rB3         [24] 4016 	lcall	_write
                                   4017 ;	ecen4330lab7.c:1120: input16 |= ASCIItoHEX(key);
      000EA8 85*16 82         [24] 4018 	mov	dpl,_key
      000EAB 12r0Br71         [24] 4019 	lcall	_ASCIItoHEX
      000EAE AF 82            [24] 4020 	mov	r7,dpl
      000EB0 7E 00            [12] 4021 	mov	r6,#0x00
      000EB2 EF               [12] 4022 	mov	a,r7
      000EB3 42*17            [12] 4023 	orl	_input16,a
      000EB5 EE               [12] 4024 	mov	a,r6
      000EB6 42*18            [12] 4025 	orl	(_input16 + 1),a
                                   4026 ;	ecen4330lab7.c:1121: }
      000EB8 22               [24] 4027 	ret
                                   4028 ;------------------------------------------------------------
                                   4029 ;Allocation info for local variables in function 'inputRead8'
                                   4030 ;------------------------------------------------------------
                                   4031 ;	ecen4330lab7.c:1131: void inputRead8(){
                                   4032 ;	-----------------------------------------
                                   4033 ;	 function inputRead8
                                   4034 ;	-----------------------------------------
      000EB9                       4035 _inputRead8:
                                   4036 ;	ecen4330lab7.c:1132: setTextColor(WHITE, BLACK);
      000EB9 E4               [12] 4037 	clr	a
      000EBA F5*00            [12] 4038 	mov	_setTextColor_PARM_2,a
      000EBC F5*01            [12] 4039 	mov	(_setTextColor_PARM_2 + 1),a
      000EBE 90 FF FF         [24] 4040 	mov	dptr,#0xffff
      000EC1 12r03r2A         [24] 4041 	lcall	_setTextColor
                                   4042 ;	ecen4330lab7.c:1134: input8 = 0x00;
      000EC4 75*19 00         [24] 4043 	mov	_input8,#0x00
                                   4044 ;	ecen4330lab7.c:1136: key = keyDetect();
      000EC7 12r0Ar58         [24] 4045 	lcall	_keyDetect
      000ECA 85 82*16         [24] 4046 	mov	_key,dpl
                                   4047 ;	ecen4330lab7.c:1137: setTextColor(WHITE, BLACK);
      000ECD E4               [12] 4048 	clr	a
      000ECE F5*00            [12] 4049 	mov	_setTextColor_PARM_2,a
      000ED0 F5*01            [12] 4050 	mov	(_setTextColor_PARM_2 + 1),a
      000ED2 90 FF FF         [24] 4051 	mov	dptr,#0xffff
      000ED5 12r03r2A         [24] 4052 	lcall	_setTextColor
                                   4053 ;	ecen4330lab7.c:1138: write(key);
      000ED8 85*16 82         [24] 4054 	mov	dpl,_key
      000EDB 12r09rB3         [24] 4055 	lcall	_write
                                   4056 ;	ecen4330lab7.c:1139: input8 |= (ASCIItoHEX(key) << 4);
      000EDE 85*16 82         [24] 4057 	mov	dpl,_key
      000EE1 12r0Br71         [24] 4058 	lcall	_ASCIItoHEX
      000EE4 E5 82            [12] 4059 	mov	a,dpl
      000EE6 C4               [12] 4060 	swap	a
      000EE7 54 F0            [12] 4061 	anl	a,#0xf0
      000EE9 42*19            [12] 4062 	orl	_input8,a
                                   4063 ;	ecen4330lab7.c:1141: key = keyDetect();
      000EEB 12r0Ar58         [24] 4064 	lcall	_keyDetect
      000EEE 85 82*16         [24] 4065 	mov	_key,dpl
                                   4066 ;	ecen4330lab7.c:1142: setTextColor(WHITE, BLACK);
      000EF1 E4               [12] 4067 	clr	a
      000EF2 F5*00            [12] 4068 	mov	_setTextColor_PARM_2,a
      000EF4 F5*01            [12] 4069 	mov	(_setTextColor_PARM_2 + 1),a
      000EF6 90 FF FF         [24] 4070 	mov	dptr,#0xffff
      000EF9 12r03r2A         [24] 4071 	lcall	_setTextColor
                                   4072 ;	ecen4330lab7.c:1143: write(key);
      000EFC 85*16 82         [24] 4073 	mov	dpl,_key
      000EFF 12r09rB3         [24] 4074 	lcall	_write
                                   4075 ;	ecen4330lab7.c:1144: input8 |= ASCIItoHEX(key);
      000F02 85*16 82         [24] 4076 	mov	dpl,_key
      000F05 12r0Br71         [24] 4077 	lcall	_ASCIItoHEX
      000F08 E5 82            [12] 4078 	mov	a,dpl
      000F0A 42*19            [12] 4079 	orl	_input8,a
                                   4080 ;	ecen4330lab7.c:1145: }
      000F0C 22               [24] 4081 	ret
                                   4082 ;------------------------------------------------------------
                                   4083 ;Allocation info for local variables in function 'inputDataType'
                                   4084 ;------------------------------------------------------------
                                   4085 ;	ecen4330lab7.c:1164: void inputDataType(){
                                   4086 ;	-----------------------------------------
                                   4087 ;	 function inputDataType
                                   4088 ;	-----------------------------------------
      000F0D                       4089 _inputDataType:
                                   4090 ;	ecen4330lab7.c:1165: validInput = 0;
      000F0D 75*1D 00         [24] 4091 	mov	_validInput,#0x00
                                   4092 ;	ecen4330lab7.c:1166: dataType = 0;
      000F10 75*1A 00         [24] 4093 	mov	_dataType,#0x00
                                   4094 ;	ecen4330lab7.c:1168: do
      000F13                       4095 00106$:
                                   4096 ;	ecen4330lab7.c:1171: resetLCD();
      000F13 12r0DrAD         [24] 4097 	lcall	_resetLCD
                                   4098 ;	ecen4330lab7.c:1172: setTextColor(WHITE, BLACK);
      000F16 E4               [12] 4099 	clr	a
      000F17 F5*00            [12] 4100 	mov	_setTextColor_PARM_2,a
      000F19 F5*01            [12] 4101 	mov	(_setTextColor_PARM_2 + 1),a
      000F1B 90 FF FF         [24] 4102 	mov	dptr,#0xffff
      000F1E 12r03r2A         [24] 4103 	lcall	_setTextColor
                                   4104 ;	ecen4330lab7.c:1173: LCD_string_write("\nSelect Data\nType:\n\n");
      000F21 90r05r42         [24] 4105 	mov	dptr,#___str_5
      000F24 75 F0 80         [24] 4106 	mov	b,#0x80
      000F27 12r0Ar19         [24] 4107 	lcall	_LCD_string_write
                                   4108 ;	ecen4330lab7.c:1174: LCD_string_write("(1) Byte\n");
      000F2A 90r05r57         [24] 4109 	mov	dptr,#___str_6
      000F2D 75 F0 80         [24] 4110 	mov	b,#0x80
      000F30 12r0Ar19         [24] 4111 	lcall	_LCD_string_write
                                   4112 ;	ecen4330lab7.c:1175: LCD_string_write("(2) Word\n");
      000F33 90r05r61         [24] 4113 	mov	dptr,#___str_7
      000F36 75 F0 80         [24] 4114 	mov	b,#0x80
      000F39 12r0Ar19         [24] 4115 	lcall	_LCD_string_write
                                   4116 ;	ecen4330lab7.c:1176: LCD_string_write("(3) Double\n    Word\n\n  _");
      000F3C 90r05r6B         [24] 4117 	mov	dptr,#___str_8
      000F3F 75 F0 80         [24] 4118 	mov	b,#0x80
      000F42 12r0Ar19         [24] 4119 	lcall	_LCD_string_write
                                   4120 ;	ecen4330lab7.c:1177: cursor_x -= textsize * 6;
      000F45 85*0C*00         [24] 4121 	mov	__mulint_PARM_2,_textsize
      000F48 75*01 00         [24] 4122 	mov	(__mulint_PARM_2 + 1),#0x00
      000F4B 90 00 06         [24] 4123 	mov	dptr,#0x0006
      000F4E 12r00r00         [24] 4124 	lcall	__mulint
      000F51 AE 82            [24] 4125 	mov	r6,dpl
      000F53 AF 83            [24] 4126 	mov	r7,dph
      000F55 E5*08            [12] 4127 	mov	a,_cursor_x
      000F57 C3               [12] 4128 	clr	c
      000F58 9E               [12] 4129 	subb	a,r6
      000F59 F5*08            [12] 4130 	mov	_cursor_x,a
      000F5B E5*09            [12] 4131 	mov	a,(_cursor_x + 1)
      000F5D 9F               [12] 4132 	subb	a,r7
      000F5E F5*09            [12] 4133 	mov	(_cursor_x + 1),a
                                   4134 ;	ecen4330lab7.c:1178: x = cursor_x;
      000F60 85*08*3B         [24] 4135 	mov	_x,_cursor_x
                                   4136 ;	ecen4330lab7.c:1179: y = cursor_y;
      000F63 85*0A*3C         [24] 4137 	mov	_y,_cursor_y
                                   4138 ;	ecen4330lab7.c:1180: ts = textsize;
      000F66 85*0C*3D         [24] 4139 	mov	_ts,_textsize
                                   4140 ;	ecen4330lab7.c:1183: setTextColor(WHITE, BLACK);
      000F69 E4               [12] 4141 	clr	a
      000F6A F5*00            [12] 4142 	mov	_setTextColor_PARM_2,a
      000F6C F5*01            [12] 4143 	mov	(_setTextColor_PARM_2 + 1),a
      000F6E 90 FF FF         [24] 4144 	mov	dptr,#0xffff
      000F71 12r03r2A         [24] 4145 	lcall	_setTextColor
                                   4146 ;	ecen4330lab7.c:1184: key = keyDetect();
      000F74 12r0Ar58         [24] 4147 	lcall	_keyDetect
      000F77 85 82*16         [24] 4148 	mov	_key,dpl
                                   4149 ;	ecen4330lab7.c:1185: cursor_x = x;
      000F7A 85*3B*08         [24] 4150 	mov	_cursor_x,_x
      000F7D 75*09 00         [24] 4151 	mov	(_cursor_x + 1),#0x00
                                   4152 ;	ecen4330lab7.c:1186: cursor_y = y;
      000F80 85*3C*0A         [24] 4153 	mov	_cursor_y,_y
      000F83 75*0B 00         [24] 4154 	mov	(_cursor_y + 1),#0x00
                                   4155 ;	ecen4330lab7.c:1187: textsize = ts;
      000F86 85*3D*0C         [24] 4156 	mov	_textsize,_ts
                                   4157 ;	ecen4330lab7.c:1188: write(key);
      000F89 85*16 82         [24] 4158 	mov	dpl,_key
      000F8C 12r09rB3         [24] 4159 	lcall	_write
                                   4160 ;	ecen4330lab7.c:1190: switch (key)
      000F8F 74 31            [12] 4161 	mov	a,#0x31
      000F91 B5*16 02         [24] 4162 	cjne	a,_key,00127$
      000F94 80 0E            [24] 4163 	sjmp	00101$
      000F96                       4164 00127$:
      000F96 74 32            [12] 4165 	mov	a,#0x32
      000F98 B5*16 02         [24] 4166 	cjne	a,_key,00128$
      000F9B 80 0F            [24] 4167 	sjmp	00102$
      000F9D                       4168 00128$:
      000F9D 74 33            [12] 4169 	mov	a,#0x33
                                   4170 ;	ecen4330lab7.c:1193: case '1':
      000F9F B5*16 1A         [24] 4171 	cjne	a,_key,00104$
      000FA2 80 10            [24] 4172 	sjmp	00103$
      000FA4                       4173 00101$:
                                   4174 ;	ecen4330lab7.c:1194: dataType = 1;
      000FA4 75*1A 01         [24] 4175 	mov	_dataType,#0x01
                                   4176 ;	ecen4330lab7.c:1195: validInput = 1;
      000FA7 75*1D 01         [24] 4177 	mov	_validInput,#0x01
                                   4178 ;	ecen4330lab7.c:1196: break;
                                   4179 ;	ecen4330lab7.c:1199: case '2':
      000FAA 80 16            [24] 4180 	sjmp	00107$
      000FAC                       4181 00102$:
                                   4182 ;	ecen4330lab7.c:1200: dataType = 2;
      000FAC 75*1A 02         [24] 4183 	mov	_dataType,#0x02
                                   4184 ;	ecen4330lab7.c:1201: validInput = 1;
      000FAF 75*1D 01         [24] 4185 	mov	_validInput,#0x01
                                   4186 ;	ecen4330lab7.c:1202: break;
                                   4187 ;	ecen4330lab7.c:1205: case '3':
      000FB2 80 0E            [24] 4188 	sjmp	00107$
      000FB4                       4189 00103$:
                                   4190 ;	ecen4330lab7.c:1206: dataType = 4;
      000FB4 75*1A 04         [24] 4191 	mov	_dataType,#0x04
                                   4192 ;	ecen4330lab7.c:1207: validInput = 1;
      000FB7 75*1D 01         [24] 4193 	mov	_validInput,#0x01
                                   4194 ;	ecen4330lab7.c:1208: break;
                                   4195 ;	ecen4330lab7.c:1211: default:
      000FBA 80 06            [24] 4196 	sjmp	00107$
      000FBC                       4197 00104$:
                                   4198 ;	ecen4330lab7.c:1212: invalidInput();
      000FBC 12r0DrD5         [24] 4199 	lcall	_invalidInput
                                   4200 ;	ecen4330lab7.c:1213: validInput = 0;
      000FBF 75*1D 00         [24] 4201 	mov	_validInput,#0x00
                                   4202 ;	ecen4330lab7.c:1215: }
      000FC2                       4203 00107$:
                                   4204 ;	ecen4330lab7.c:1216: } while (validInput == 0);
      000FC2 E5*1D            [12] 4205 	mov	a,_validInput
      000FC4 70 03            [24] 4206 	jnz	00130$
      000FC6 02r0Fr13         [24] 4207 	ljmp	00106$
      000FC9                       4208 00130$:
                                   4209 ;	ecen4330lab7.c:1217: }
      000FC9 22               [24] 4210 	ret
                                   4211 ;------------------------------------------------------------
                                   4212 ;Allocation info for local variables in function 'inputDataSize'
                                   4213 ;------------------------------------------------------------
                                   4214 ;	ecen4330lab7.c:1227: void inputDataSize(){
                                   4215 ;	-----------------------------------------
                                   4216 ;	 function inputDataSize
                                   4217 ;	-----------------------------------------
      000FCA                       4218 _inputDataSize:
                                   4219 ;	ecen4330lab7.c:1228: validInput = 0;
                                   4220 ;	ecen4330lab7.c:1229: dataSize = 0x0000;
      000FCA E4               [12] 4221 	clr	a
      000FCB F5*1D            [12] 4222 	mov	_validInput,a
      000FCD F5*1B            [12] 4223 	mov	_dataSize,a
      000FCF F5*1C            [12] 4224 	mov	(_dataSize + 1),a
                                   4225 ;	ecen4330lab7.c:1231: do
      000FD1                       4226 00104$:
                                   4227 ;	ecen4330lab7.c:1234: resetLCD();
      000FD1 12r0DrAD         [24] 4228 	lcall	_resetLCD
                                   4229 ;	ecen4330lab7.c:1235: LCD_string_write("\nEnter Data\nSize:\n\n  0x____");
      000FD4 90r05r84         [24] 4230 	mov	dptr,#___str_9
      000FD7 75 F0 80         [24] 4231 	mov	b,#0x80
      000FDA 12r0Ar19         [24] 4232 	lcall	_LCD_string_write
                                   4233 ;	ecen4330lab7.c:1236: cursor_x -= 4 * textsize * 6;
      000FDD E5*0C            [12] 4234 	mov	a,_textsize
      000FDF 75 F0 18         [24] 4235 	mov	b,#0x18
      000FE2 A4               [48] 4236 	mul	ab
      000FE3 FE               [12] 4237 	mov	r6,a
      000FE4 AF F0            [24] 4238 	mov	r7,b
      000FE6 E5*08            [12] 4239 	mov	a,_cursor_x
      000FE8 C3               [12] 4240 	clr	c
      000FE9 9E               [12] 4241 	subb	a,r6
      000FEA F5*08            [12] 4242 	mov	_cursor_x,a
      000FEC E5*09            [12] 4243 	mov	a,(_cursor_x + 1)
      000FEE 9F               [12] 4244 	subb	a,r7
      000FEF F5*09            [12] 4245 	mov	(_cursor_x + 1),a
                                   4246 ;	ecen4330lab7.c:1237: x = cursor_x;
      000FF1 85*08*3B         [24] 4247 	mov	_x,_cursor_x
                                   4248 ;	ecen4330lab7.c:1238: y = cursor_y;
      000FF4 85*0A*3C         [24] 4249 	mov	_y,_cursor_y
                                   4250 ;	ecen4330lab7.c:1239: ts = textsize;
      000FF7 85*0C*3D         [24] 4251 	mov	_ts,_textsize
                                   4252 ;	ecen4330lab7.c:1241: input16 = 0x0000;
      000FFA E4               [12] 4253 	clr	a
      000FFB F5*17            [12] 4254 	mov	_input16,a
      000FFD F5*18            [12] 4255 	mov	(_input16 + 1),a
                                   4256 ;	ecen4330lab7.c:1243: setTextColor(WHITE, BLACK);
      000FFF F5*00            [12] 4257 	mov	_setTextColor_PARM_2,a
      001001 F5*01            [12] 4258 	mov	(_setTextColor_PARM_2 + 1),a
      001003 90 FF FF         [24] 4259 	mov	dptr,#0xffff
      001006 12r03r2A         [24] 4260 	lcall	_setTextColor
                                   4261 ;	ecen4330lab7.c:1246: key = keyDetect();
      001009 12r0Ar58         [24] 4262 	lcall	_keyDetect
      00100C 85 82*16         [24] 4263 	mov	_key,dpl
                                   4264 ;	ecen4330lab7.c:1247: cursor_x = x;
      00100F 85*3B*08         [24] 4265 	mov	_cursor_x,_x
      001012 75*09 00         [24] 4266 	mov	(_cursor_x + 1),#0x00
                                   4267 ;	ecen4330lab7.c:1248: cursor_y = y;
      001015 85*3C*0A         [24] 4268 	mov	_cursor_y,_y
      001018 75*0B 00         [24] 4269 	mov	(_cursor_y + 1),#0x00
                                   4270 ;	ecen4330lab7.c:1249: textsize = ts;
      00101B 85*3D*0C         [24] 4271 	mov	_textsize,_ts
                                   4272 ;	ecen4330lab7.c:1250: write(key);
      00101E 85*16 82         [24] 4273 	mov	dpl,_key
      001021 12r09rB3         [24] 4274 	lcall	_write
                                   4275 ;	ecen4330lab7.c:1251: x = cursor_x;
      001024 85*08*3B         [24] 4276 	mov	_x,_cursor_x
                                   4277 ;	ecen4330lab7.c:1252: y = cursor_y;
      001027 85*0A*3C         [24] 4278 	mov	_y,_cursor_y
                                   4279 ;	ecen4330lab7.c:1253: ts = textsize;
      00102A 85*0C*3D         [24] 4280 	mov	_ts,_textsize
                                   4281 ;	ecen4330lab7.c:1254: input16 |= (ASCIItoHEX(key) << 12);
      00102D 85*16 82         [24] 4282 	mov	dpl,_key
      001030 12r0Br71         [24] 4283 	lcall	_ASCIItoHEX
      001033 AF 82            [24] 4284 	mov	r7,dpl
      001035 EF               [12] 4285 	mov	a,r7
      001036 C4               [12] 4286 	swap	a
      001037 54 F0            [12] 4287 	anl	a,#0xf0
      001039 FE               [12] 4288 	mov	r6,a
      00103A E4               [12] 4289 	clr	a
      00103B 42*17            [12] 4290 	orl	_input16,a
      00103D EE               [12] 4291 	mov	a,r6
      00103E 42*18            [12] 4292 	orl	(_input16 + 1),a
                                   4293 ;	ecen4330lab7.c:1256: key = keyDetect();
      001040 12r0Ar58         [24] 4294 	lcall	_keyDetect
      001043 85 82*16         [24] 4295 	mov	_key,dpl
                                   4296 ;	ecen4330lab7.c:1257: cursor_x = x;
      001046 85*3B*08         [24] 4297 	mov	_cursor_x,_x
      001049 75*09 00         [24] 4298 	mov	(_cursor_x + 1),#0x00
                                   4299 ;	ecen4330lab7.c:1258: cursor_y = y;
      00104C 85*3C*0A         [24] 4300 	mov	_cursor_y,_y
      00104F 75*0B 00         [24] 4301 	mov	(_cursor_y + 1),#0x00
                                   4302 ;	ecen4330lab7.c:1259: textsize = ts;
      001052 85*3D*0C         [24] 4303 	mov	_textsize,_ts
                                   4304 ;	ecen4330lab7.c:1260: write(key);
      001055 85*16 82         [24] 4305 	mov	dpl,_key
      001058 12r09rB3         [24] 4306 	lcall	_write
                                   4307 ;	ecen4330lab7.c:1261: x = cursor_x;
      00105B 85*08*3B         [24] 4308 	mov	_x,_cursor_x
                                   4309 ;	ecen4330lab7.c:1262: y = cursor_y;
      00105E 85*0A*3C         [24] 4310 	mov	_y,_cursor_y
                                   4311 ;	ecen4330lab7.c:1263: ts = textsize;
      001061 85*0C*3D         [24] 4312 	mov	_ts,_textsize
                                   4313 ;	ecen4330lab7.c:1264: input16 |= (ASCIItoHEX(key) << 8);
      001064 85*16 82         [24] 4314 	mov	dpl,_key
      001067 12r0Br71         [24] 4315 	lcall	_ASCIItoHEX
      00106A AF 82            [24] 4316 	mov	r7,dpl
      00106C 8F 06            [24] 4317 	mov	ar6,r7
      00106E E4               [12] 4318 	clr	a
      00106F 42*17            [12] 4319 	orl	_input16,a
      001071 EE               [12] 4320 	mov	a,r6
      001072 42*18            [12] 4321 	orl	(_input16 + 1),a
                                   4322 ;	ecen4330lab7.c:1266: key = keyDetect();
      001074 12r0Ar58         [24] 4323 	lcall	_keyDetect
      001077 85 82*16         [24] 4324 	mov	_key,dpl
                                   4325 ;	ecen4330lab7.c:1267: cursor_x = x;
      00107A 85*3B*08         [24] 4326 	mov	_cursor_x,_x
      00107D 75*09 00         [24] 4327 	mov	(_cursor_x + 1),#0x00
                                   4328 ;	ecen4330lab7.c:1268: cursor_y = y;
      001080 85*3C*0A         [24] 4329 	mov	_cursor_y,_y
      001083 75*0B 00         [24] 4330 	mov	(_cursor_y + 1),#0x00
                                   4331 ;	ecen4330lab7.c:1269: textsize = ts;
      001086 85*3D*0C         [24] 4332 	mov	_textsize,_ts
                                   4333 ;	ecen4330lab7.c:1270: write(key);
      001089 85*16 82         [24] 4334 	mov	dpl,_key
      00108C 12r09rB3         [24] 4335 	lcall	_write
                                   4336 ;	ecen4330lab7.c:1271: x = cursor_x;
      00108F 85*08*3B         [24] 4337 	mov	_x,_cursor_x
                                   4338 ;	ecen4330lab7.c:1272: y = cursor_y;
      001092 85*0A*3C         [24] 4339 	mov	_y,_cursor_y
                                   4340 ;	ecen4330lab7.c:1273: ts = textsize;
      001095 85*0C*3D         [24] 4341 	mov	_ts,_textsize
                                   4342 ;	ecen4330lab7.c:1274: input16 |= (ASCIItoHEX(key) << 4);
      001098 85*16 82         [24] 4343 	mov	dpl,_key
      00109B 12r0Br71         [24] 4344 	lcall	_ASCIItoHEX
      00109E AF 82            [24] 4345 	mov	r7,dpl
      0010A0 E4               [12] 4346 	clr	a
      0010A1 C4               [12] 4347 	swap	a
      0010A2 54 F0            [12] 4348 	anl	a,#0xf0
      0010A4 CF               [12] 4349 	xch	a,r7
      0010A5 C4               [12] 4350 	swap	a
      0010A6 CF               [12] 4351 	xch	a,r7
      0010A7 6F               [12] 4352 	xrl	a,r7
      0010A8 CF               [12] 4353 	xch	a,r7
      0010A9 54 F0            [12] 4354 	anl	a,#0xf0
      0010AB CF               [12] 4355 	xch	a,r7
      0010AC 6F               [12] 4356 	xrl	a,r7
      0010AD FE               [12] 4357 	mov	r6,a
      0010AE EF               [12] 4358 	mov	a,r7
      0010AF 42*17            [12] 4359 	orl	_input16,a
      0010B1 EE               [12] 4360 	mov	a,r6
      0010B2 42*18            [12] 4361 	orl	(_input16 + 1),a
                                   4362 ;	ecen4330lab7.c:1276: key = keyDetect();
      0010B4 12r0Ar58         [24] 4363 	lcall	_keyDetect
      0010B7 85 82*16         [24] 4364 	mov	_key,dpl
                                   4365 ;	ecen4330lab7.c:1277: cursor_x = x;
      0010BA 85*3B*08         [24] 4366 	mov	_cursor_x,_x
      0010BD 75*09 00         [24] 4367 	mov	(_cursor_x + 1),#0x00
                                   4368 ;	ecen4330lab7.c:1278: cursor_y = y;
      0010C0 85*3C*0A         [24] 4369 	mov	_cursor_y,_y
      0010C3 75*0B 00         [24] 4370 	mov	(_cursor_y + 1),#0x00
                                   4371 ;	ecen4330lab7.c:1279: textsize = ts;
      0010C6 85*3D*0C         [24] 4372 	mov	_textsize,_ts
                                   4373 ;	ecen4330lab7.c:1280: write(key);
      0010C9 85*16 82         [24] 4374 	mov	dpl,_key
      0010CC 12r09rB3         [24] 4375 	lcall	_write
                                   4376 ;	ecen4330lab7.c:1281: x = cursor_x;
      0010CF 85*08*3B         [24] 4377 	mov	_x,_cursor_x
                                   4378 ;	ecen4330lab7.c:1282: y = cursor_y;
      0010D2 85*0A*3C         [24] 4379 	mov	_y,_cursor_y
                                   4380 ;	ecen4330lab7.c:1283: ts = textsize;
      0010D5 85*0C*3D         [24] 4381 	mov	_ts,_textsize
                                   4382 ;	ecen4330lab7.c:1284: input16 |= ASCIItoHEX(key);
      0010D8 85*16 82         [24] 4383 	mov	dpl,_key
      0010DB 12r0Br71         [24] 4384 	lcall	_ASCIItoHEX
      0010DE AF 82            [24] 4385 	mov	r7,dpl
      0010E0 7E 00            [12] 4386 	mov	r6,#0x00
      0010E2 EF               [12] 4387 	mov	a,r7
      0010E3 42*17            [12] 4388 	orl	_input16,a
      0010E5 EE               [12] 4389 	mov	a,r6
      0010E6 42*18            [12] 4390 	orl	(_input16 + 1),a
                                   4391 ;	ecen4330lab7.c:1285: dataSize = input16;
      0010E8 85*17*1B         [24] 4392 	mov	_dataSize,_input16
      0010EB 85*18*1C         [24] 4393 	mov	(_dataSize + 1),(_input16 + 1)
                                   4394 ;	ecen4330lab7.c:1288: if(dataSize == 0x0000){
      0010EE E5*1B            [12] 4395 	mov	a,_dataSize
      0010F0 45*1C            [12] 4396 	orl	a,(_dataSize + 1)
      0010F2 70 09            [24] 4397 	jnz	00102$
                                   4398 ;	ecen4330lab7.c:1289: invalidInput();
      0010F4 12r0DrD5         [24] 4399 	lcall	_invalidInput
                                   4400 ;	ecen4330lab7.c:1290: validInput = 0;
      0010F7 75*1D 00         [24] 4401 	mov	_validInput,#0x00
      0010FA 02r0FrD1         [24] 4402 	ljmp	00104$
      0010FD                       4403 00102$:
                                   4404 ;	ecen4330lab7.c:1293: validInput = 1;
      0010FD 75*1D 01         [24] 4405 	mov	_validInput,#0x01
                                   4406 ;	ecen4330lab7.c:1295: } while (validInput == 0);
                                   4407 ;	ecen4330lab7.c:1296: }
      001100 22               [24] 4408 	ret
                                   4409 ;------------------------------------------------------------
                                   4410 ;Allocation info for local variables in function 'RAM_CHECK'
                                   4411 ;------------------------------------------------------------
                                   4412 ;i                         Allocated to registers r6 r7 
                                   4413 ;------------------------------------------------------------
                                   4414 ;	ecen4330lab7.c:1307: void RAM_CHECK(){
                                   4415 ;	-----------------------------------------
                                   4416 ;	 function RAM_CHECK
                                   4417 ;	-----------------------------------------
      001101                       4418 _RAM_CHECK:
                                   4419 ;	ecen4330lab7.c:1309: data = 0;
      001101 75*20 00         [24] 4420 	mov	_data,#0x00
                                   4421 ;	ecen4330lab7.c:1310: dataEnd = 0;
      001104 75*1E 00         [24] 4422 	mov	_dataEnd,#0x00
                                   4423 ;	ecen4330lab7.c:1313: resetLCD();
      001107 12r0DrAD         [24] 4424 	lcall	_resetLCD
                                   4425 ;	ecen4330lab7.c:1314: LCD_string_write("\nWriting 0x55\nto all\nexternal RAM\nlocations.\n\n");
      00110A 90r05rA0         [24] 4426 	mov	dptr,#___str_10
      00110D 75 F0 80         [24] 4427 	mov	b,#0x80
      001110 12r0Ar19         [24] 4428 	lcall	_LCD_string_write
                                   4429 ;	ecen4330lab7.c:1315: testRAM(RAMcheckVal1);
      001113 75 82 55         [24] 4430 	mov	dpl,#0x55
      001116 12r0Dr7B         [24] 4431 	lcall	_testRAM
                                   4432 ;	ecen4330lab7.c:1316: RAMwrite(0xFFFF, RAMcheckVal1);
      001119 75*00 55         [24] 4433 	mov	_RAMwrite_PARM_2,#0x55
      00111C 90 FF FF         [24] 4434 	mov	dptr,#0xffff
      00111F 12r0Dr6B         [24] 4435 	lcall	_RAMwrite
                                   4436 ;	ecen4330lab7.c:1318: setTextColor(GREEN, BLACK);
      001122 E4               [12] 4437 	clr	a
      001123 F5*00            [12] 4438 	mov	_setTextColor_PARM_2,a
      001125 F5*01            [12] 4439 	mov	(_setTextColor_PARM_2 + 1),a
      001127 90 07 E0         [24] 4440 	mov	dptr,#0x07e0
      00112A 12r03r2A         [24] 4441 	lcall	_setTextColor
                                   4442 ;	ecen4330lab7.c:1319: LCD_string_write("Write\ncomplete.\n");
      00112D 90r05rCF         [24] 4443 	mov	dptr,#___str_11
      001130 75 F0 80         [24] 4444 	mov	b,#0x80
      001133 12r0Ar19         [24] 4445 	lcall	_LCD_string_write
                                   4446 ;	ecen4330lab7.c:1320: delay(200);
      001136 90 00 C8         [24] 4447 	mov	dptr,#0x00c8
      001139 12r00r79         [24] 4448 	lcall	_delay
                                   4449 ;	ecen4330lab7.c:1323: resetLCD();
      00113C 12r0DrAD         [24] 4450 	lcall	_resetLCD
                                   4451 ;	ecen4330lab7.c:1324: LCD_string_write("\nVerifying all\nRAM locations\nequal 0x55.\n\n");
      00113F 90r05rE0         [24] 4452 	mov	dptr,#___str_12
      001142 75 F0 80         [24] 4453 	mov	b,#0x80
      001145 12r0Ar19         [24] 4454 	lcall	_LCD_string_write
                                   4455 ;	ecen4330lab7.c:1326: do
      001148 7E 00            [12] 4456 	mov	r6,#0x00
      00114A 7F 00            [12] 4457 	mov	r7,#0x00
      00114C                       4458 00102$:
                                   4459 ;	ecen4330lab7.c:1328: data = RAMread(i);
      00114C 8E 82            [24] 4460 	mov	dpl,r6
      00114E 8F 83            [24] 4461 	mov	dph,r7
      001150 C0 07            [24] 4462 	push	ar7
      001152 C0 06            [24] 4463 	push	ar6
      001154 12r0Dr9A         [24] 4464 	lcall	_RAMread
      001157 85 82*20         [24] 4465 	mov	_data,dpl
      00115A D0 06            [24] 4466 	pop	ar6
      00115C D0 07            [24] 4467 	pop	ar7
                                   4468 ;	ecen4330lab7.c:1329: i++;
      00115E 0E               [12] 4469 	inc	r6
      00115F BE 00 01         [24] 4470 	cjne	r6,#0x00,00163$
      001162 0F               [12] 4471 	inc	r7
      001163                       4472 00163$:
                                   4473 ;	ecen4330lab7.c:1330: } while (data == RAMcheckVal1 && i <= __END_RAM__);
      001163 74 55            [12] 4474 	mov	a,#0x55
      001165 B5*20 04         [24] 4475 	cjne	a,_data,00164$
      001168 74 01            [12] 4476 	mov	a,#0x01
      00116A 80 01            [24] 4477 	sjmp	00165$
      00116C                       4478 00164$:
      00116C E4               [12] 4479 	clr	a
      00116D                       4480 00165$:
      00116D FD               [12] 4481 	mov	r5,a
      00116E 60 09            [24] 4482 	jz	00129$
      001170 C3               [12] 4483 	clr	c
      001171 74 FE            [12] 4484 	mov	a,#0xfe
      001173 9E               [12] 4485 	subb	a,r6
      001174 74 FF            [12] 4486 	mov	a,#0xff
      001176 9F               [12] 4487 	subb	a,r7
      001177 50 D3            [24] 4488 	jnc	00102$
      001179                       4489 00129$:
                                   4490 ;	ecen4330lab7.c:1331: if(data == RAMcheckVal1){
      001179 ED               [12] 4491 	mov	a,r5
      00117A 60 11            [24] 4492 	jz	00106$
                                   4493 ;	ecen4330lab7.c:1332: data = RAMread(0xFFFF);
      00117C 90 FF FF         [24] 4494 	mov	dptr,#0xffff
      00117F C0 07            [24] 4495 	push	ar7
      001181 C0 06            [24] 4496 	push	ar6
      001183 12r0Dr9A         [24] 4497 	lcall	_RAMread
      001186 85 82*20         [24] 4498 	mov	_data,dpl
      001189 D0 06            [24] 4499 	pop	ar6
      00118B D0 07            [24] 4500 	pop	ar7
      00118D                       4501 00106$:
                                   4502 ;	ecen4330lab7.c:1336: if(data != RAMcheckVal1){
      00118D 74 55            [12] 4503 	mov	a,#0x55
      00118F B5*20 02         [24] 4504 	cjne	a,_data,00169$
      001192 80 61            [24] 4505 	sjmp	00117$
      001194                       4506 00169$:
                                   4507 ;	ecen4330lab7.c:1337: setTextColor(RED, BLACK);
      001194 E4               [12] 4508 	clr	a
      001195 F5*00            [12] 4509 	mov	_setTextColor_PARM_2,a
      001197 F5*01            [12] 4510 	mov	(_setTextColor_PARM_2 + 1),a
      001199 90 F8 00         [24] 4511 	mov	dptr,#0xf800
      00119C C0 07            [24] 4512 	push	ar7
      00119E C0 06            [24] 4513 	push	ar6
      0011A0 12r03r2A         [24] 4514 	lcall	_setTextColor
                                   4515 ;	ecen4330lab7.c:1338: LCD_string_write("1st RAM check\nunsuccessful.\n\n");
      0011A3 90r06r0B         [24] 4516 	mov	dptr,#___str_13
      0011A6 75 F0 80         [24] 4517 	mov	b,#0x80
      0011A9 12r0Ar19         [24] 4518 	lcall	_LCD_string_write
                                   4519 ;	ecen4330lab7.c:1339: delay(100);
      0011AC 90 00 64         [24] 4520 	mov	dptr,#0x0064
      0011AF 12r00r79         [24] 4521 	lcall	_delay
                                   4522 ;	ecen4330lab7.c:1341: LCD_string_write("Error at:\n");
      0011B2 90r06r29         [24] 4523 	mov	dptr,#___str_14
      0011B5 75 F0 80         [24] 4524 	mov	b,#0x80
      0011B8 12r0Ar19         [24] 4525 	lcall	_LCD_string_write
      0011BB D0 06            [24] 4526 	pop	ar6
      0011BD D0 07            [24] 4527 	pop	ar7
                                   4528 ;	ecen4330lab7.c:1342: HEXtoASCII_16write(i - 1);
      0011BF EE               [12] 4529 	mov	a,r6
      0011C0 24 FF            [12] 4530 	add	a,#0xff
      0011C2 F5 82            [12] 4531 	mov	dpl,a
      0011C4 EF               [12] 4532 	mov	a,r7
      0011C5 34 FF            [12] 4533 	addc	a,#0xff
      0011C7 F5 83            [12] 4534 	mov	dph,a
      0011C9 12r0CrC6         [24] 4535 	lcall	_HEXtoASCII_16write
                                   4536 ;	ecen4330lab7.c:1343: LCD_string_write(": 0x");
      0011CC 90r06r34         [24] 4537 	mov	dptr,#___str_15
      0011CF 75 F0 80         [24] 4538 	mov	b,#0x80
      0011D2 12r0Ar19         [24] 4539 	lcall	_LCD_string_write
                                   4540 ;	ecen4330lab7.c:1344: HEXtoASCII_8write(data);
      0011D5 85*20 82         [24] 4541 	mov	dpl,_data
      0011D8 12r0Cr89         [24] 4542 	lcall	_HEXtoASCII_8write
                                   4543 ;	ecen4330lab7.c:1346: setTextColor(WHITE, BLACK);
      0011DB E4               [12] 4544 	clr	a
      0011DC F5*00            [12] 4545 	mov	_setTextColor_PARM_2,a
      0011DE F5*01            [12] 4546 	mov	(_setTextColor_PARM_2 + 1),a
      0011E0 90 FF FF         [24] 4547 	mov	dptr,#0xffff
      0011E3 12r03r2A         [24] 4548 	lcall	_setTextColor
                                   4549 ;	ecen4330lab7.c:1347: LCD_string_write("Returning to\nmain menu.");
      0011E6 90r06r39         [24] 4550 	mov	dptr,#___str_16
      0011E9 75 F0 80         [24] 4551 	mov	b,#0x80
      0011EC 12r0Ar19         [24] 4552 	lcall	_LCD_string_write
                                   4553 ;	ecen4330lab7.c:1348: delay(200);
      0011EF 90 00 C8         [24] 4554 	mov	dptr,#0x00c8
      0011F2 02r00r79         [24] 4555 	ljmp	_delay
      0011F5                       4556 00117$:
                                   4557 ;	ecen4330lab7.c:1353: setTextColor(GREEN, BLACK);
      0011F5 E4               [12] 4558 	clr	a
      0011F6 F5*00            [12] 4559 	mov	_setTextColor_PARM_2,a
      0011F8 F5*01            [12] 4560 	mov	(_setTextColor_PARM_2 + 1),a
      0011FA 90 07 E0         [24] 4561 	mov	dptr,#0x07e0
      0011FD 12r03r2A         [24] 4562 	lcall	_setTextColor
                                   4563 ;	ecen4330lab7.c:1354: LCD_string_write("1st RAM check\nsuccessful.\n\n");
      001200 90r06r51         [24] 4564 	mov	dptr,#___str_17
      001203 75 F0 80         [24] 4565 	mov	b,#0x80
      001206 12r0Ar19         [24] 4566 	lcall	_LCD_string_write
                                   4567 ;	ecen4330lab7.c:1355: delay(200);
      001209 90 00 C8         [24] 4568 	mov	dptr,#0x00c8
      00120C 12r00r79         [24] 4569 	lcall	_delay
                                   4570 ;	ecen4330lab7.c:1357: resetLCD();
      00120F 12r0DrAD         [24] 4571 	lcall	_resetLCD
                                   4572 ;	ecen4330lab7.c:1358: LCD_string_write("\nWriting 0xAA\nto all\nexternal RAM\nlocations.\n\n");
      001212 90r06r6D         [24] 4573 	mov	dptr,#___str_18
      001215 75 F0 80         [24] 4574 	mov	b,#0x80
      001218 12r0Ar19         [24] 4575 	lcall	_LCD_string_write
                                   4576 ;	ecen4330lab7.c:1359: testRAM(RAMcheckVal2);
      00121B 75 82 AA         [24] 4577 	mov	dpl,#0xaa
      00121E 12r0Dr7B         [24] 4578 	lcall	_testRAM
                                   4579 ;	ecen4330lab7.c:1360: RAMwrite(0xFFFF, RAMcheckVal2);
      001221 75*00 AA         [24] 4580 	mov	_RAMwrite_PARM_2,#0xaa
      001224 90 FF FF         [24] 4581 	mov	dptr,#0xffff
      001227 12r0Dr6B         [24] 4582 	lcall	_RAMwrite
                                   4583 ;	ecen4330lab7.c:1361: setTextColor(GREEN, BLACK);
      00122A E4               [12] 4584 	clr	a
      00122B F5*00            [12] 4585 	mov	_setTextColor_PARM_2,a
      00122D F5*01            [12] 4586 	mov	(_setTextColor_PARM_2 + 1),a
      00122F 90 07 E0         [24] 4587 	mov	dptr,#0x07e0
      001232 12r03r2A         [24] 4588 	lcall	_setTextColor
                                   4589 ;	ecen4330lab7.c:1362: LCD_string_write("Write\ncomplete.\n");
      001235 90r05rCF         [24] 4590 	mov	dptr,#___str_11
      001238 75 F0 80         [24] 4591 	mov	b,#0x80
      00123B 12r0Ar19         [24] 4592 	lcall	_LCD_string_write
                                   4593 ;	ecen4330lab7.c:1363: delay(200);
      00123E 90 00 C8         [24] 4594 	mov	dptr,#0x00c8
      001241 12r00r79         [24] 4595 	lcall	_delay
                                   4596 ;	ecen4330lab7.c:1366: resetLCD();
      001244 12r0DrAD         [24] 4597 	lcall	_resetLCD
                                   4598 ;	ecen4330lab7.c:1367: LCD_string_write("\nVerifying all\nRAM locations\nequal 0xAA.\n\n");
      001247 90r06r9C         [24] 4599 	mov	dptr,#___str_19
      00124A 75 F0 80         [24] 4600 	mov	b,#0x80
      00124D 12r0Ar19         [24] 4601 	lcall	_LCD_string_write
                                   4602 ;	ecen4330lab7.c:1369: do
      001250 7E 00            [12] 4603 	mov	r6,#0x00
      001252 7F 00            [12] 4604 	mov	r7,#0x00
      001254                       4605 00108$:
                                   4606 ;	ecen4330lab7.c:1371: data = RAMread(i);
      001254 8E 82            [24] 4607 	mov	dpl,r6
      001256 8F 83            [24] 4608 	mov	dph,r7
      001258 C0 07            [24] 4609 	push	ar7
      00125A C0 06            [24] 4610 	push	ar6
      00125C 12r0Dr9A         [24] 4611 	lcall	_RAMread
      00125F 85 82*20         [24] 4612 	mov	_data,dpl
      001262 D0 06            [24] 4613 	pop	ar6
      001264 D0 07            [24] 4614 	pop	ar7
                                   4615 ;	ecen4330lab7.c:1372: i++;
      001266 0E               [12] 4616 	inc	r6
      001267 BE 00 01         [24] 4617 	cjne	r6,#0x00,00170$
      00126A 0F               [12] 4618 	inc	r7
      00126B                       4619 00170$:
                                   4620 ;	ecen4330lab7.c:1373: } while (data == RAMcheckVal2 && i <= __END_RAM__);
      00126B 74 AA            [12] 4621 	mov	a,#0xaa
      00126D B5*20 04         [24] 4622 	cjne	a,_data,00171$
      001270 74 01            [12] 4623 	mov	a,#0x01
      001272 80 01            [24] 4624 	sjmp	00172$
      001274                       4625 00171$:
      001274 E4               [12] 4626 	clr	a
      001275                       4627 00172$:
      001275 FD               [12] 4628 	mov	r5,a
      001276 60 09            [24] 4629 	jz	00130$
      001278 C3               [12] 4630 	clr	c
      001279 74 FE            [12] 4631 	mov	a,#0xfe
      00127B 9E               [12] 4632 	subb	a,r6
      00127C 74 FF            [12] 4633 	mov	a,#0xff
      00127E 9F               [12] 4634 	subb	a,r7
      00127F 50 D3            [24] 4635 	jnc	00108$
      001281                       4636 00130$:
                                   4637 ;	ecen4330lab7.c:1374: if(data == RAMcheckVal2){
      001281 ED               [12] 4638 	mov	a,r5
      001282 60 11            [24] 4639 	jz	00112$
                                   4640 ;	ecen4330lab7.c:1375: data = RAMread(0xFFFF);
      001284 90 FF FF         [24] 4641 	mov	dptr,#0xffff
      001287 C0 07            [24] 4642 	push	ar7
      001289 C0 06            [24] 4643 	push	ar6
      00128B 12r0Dr9A         [24] 4644 	lcall	_RAMread
      00128E 85 82*20         [24] 4645 	mov	_data,dpl
      001291 D0 06            [24] 4646 	pop	ar6
      001293 D0 07            [24] 4647 	pop	ar7
      001295                       4648 00112$:
                                   4649 ;	ecen4330lab7.c:1378: if(data != RAMcheckVal2){
      001295 74 AA            [12] 4650 	mov	a,#0xaa
      001297 B5*20 02         [24] 4651 	cjne	a,_data,00176$
      00129A 80 61            [24] 4652 	sjmp	00114$
      00129C                       4653 00176$:
                                   4654 ;	ecen4330lab7.c:1379: setTextColor(RED, BLACK);
      00129C E4               [12] 4655 	clr	a
      00129D F5*00            [12] 4656 	mov	_setTextColor_PARM_2,a
      00129F F5*01            [12] 4657 	mov	(_setTextColor_PARM_2 + 1),a
      0012A1 90 F8 00         [24] 4658 	mov	dptr,#0xf800
      0012A4 C0 07            [24] 4659 	push	ar7
      0012A6 C0 06            [24] 4660 	push	ar6
      0012A8 12r03r2A         [24] 4661 	lcall	_setTextColor
                                   4662 ;	ecen4330lab7.c:1380: LCD_string_write("2nd RAM check\nunsuccessful.\n\n");
      0012AB 90r06rC7         [24] 4663 	mov	dptr,#___str_20
      0012AE 75 F0 80         [24] 4664 	mov	b,#0x80
      0012B1 12r0Ar19         [24] 4665 	lcall	_LCD_string_write
                                   4666 ;	ecen4330lab7.c:1381: delay(100);
      0012B4 90 00 64         [24] 4667 	mov	dptr,#0x0064
      0012B7 12r00r79         [24] 4668 	lcall	_delay
                                   4669 ;	ecen4330lab7.c:1383: LCD_string_write("Error at:\n");
      0012BA 90r06r29         [24] 4670 	mov	dptr,#___str_14
      0012BD 75 F0 80         [24] 4671 	mov	b,#0x80
      0012C0 12r0Ar19         [24] 4672 	lcall	_LCD_string_write
      0012C3 D0 06            [24] 4673 	pop	ar6
      0012C5 D0 07            [24] 4674 	pop	ar7
                                   4675 ;	ecen4330lab7.c:1384: HEXtoASCII_16write(i - 1);
      0012C7 EE               [12] 4676 	mov	a,r6
      0012C8 24 FF            [12] 4677 	add	a,#0xff
      0012CA F5 82            [12] 4678 	mov	dpl,a
      0012CC EF               [12] 4679 	mov	a,r7
      0012CD 34 FF            [12] 4680 	addc	a,#0xff
      0012CF F5 83            [12] 4681 	mov	dph,a
      0012D1 12r0CrC6         [24] 4682 	lcall	_HEXtoASCII_16write
                                   4683 ;	ecen4330lab7.c:1385: LCD_string_write(": 0x");
      0012D4 90r06r34         [24] 4684 	mov	dptr,#___str_15
      0012D7 75 F0 80         [24] 4685 	mov	b,#0x80
      0012DA 12r0Ar19         [24] 4686 	lcall	_LCD_string_write
                                   4687 ;	ecen4330lab7.c:1386: HEXtoASCII_8write(data);
      0012DD 85*20 82         [24] 4688 	mov	dpl,_data
      0012E0 12r0Cr89         [24] 4689 	lcall	_HEXtoASCII_8write
                                   4690 ;	ecen4330lab7.c:1388: setTextColor(WHITE, BLACK);
      0012E3 E4               [12] 4691 	clr	a
      0012E4 F5*00            [12] 4692 	mov	_setTextColor_PARM_2,a
      0012E6 F5*01            [12] 4693 	mov	(_setTextColor_PARM_2 + 1),a
      0012E8 90 FF FF         [24] 4694 	mov	dptr,#0xffff
      0012EB 12r03r2A         [24] 4695 	lcall	_setTextColor
                                   4696 ;	ecen4330lab7.c:1389: LCD_string_write("Returning to\nmain menu.");
      0012EE 90r06r39         [24] 4697 	mov	dptr,#___str_16
      0012F1 75 F0 80         [24] 4698 	mov	b,#0x80
      0012F4 12r0Ar19         [24] 4699 	lcall	_LCD_string_write
                                   4700 ;	ecen4330lab7.c:1390: delay(100);
      0012F7 90 00 64         [24] 4701 	mov	dptr,#0x0064
      0012FA 02r00r79         [24] 4702 	ljmp	_delay
      0012FD                       4703 00114$:
                                   4704 ;	ecen4330lab7.c:1395: setTextColor(GREEN, BLACK);
      0012FD E4               [12] 4705 	clr	a
      0012FE F5*00            [12] 4706 	mov	_setTextColor_PARM_2,a
      001300 F5*01            [12] 4707 	mov	(_setTextColor_PARM_2 + 1),a
      001302 90 07 E0         [24] 4708 	mov	dptr,#0x07e0
      001305 12r03r2A         [24] 4709 	lcall	_setTextColor
                                   4710 ;	ecen4330lab7.c:1396: LCD_string_write("2nd RAM check\nsuccessful.\n\n");
      001308 90r06rE5         [24] 4711 	mov	dptr,#___str_21
      00130B 75 F0 80         [24] 4712 	mov	b,#0x80
      00130E 12r0Ar19         [24] 4713 	lcall	_LCD_string_write
                                   4714 ;	ecen4330lab7.c:1397: LCD_string_write("RAM check\ncomplete.\n\n");
      001311 90r07r01         [24] 4715 	mov	dptr,#___str_22
      001314 75 F0 80         [24] 4716 	mov	b,#0x80
      001317 12r0Ar19         [24] 4717 	lcall	_LCD_string_write
                                   4718 ;	ecen4330lab7.c:1398: delay(100);
      00131A 90 00 64         [24] 4719 	mov	dptr,#0x0064
      00131D 12r00r79         [24] 4720 	lcall	_delay
                                   4721 ;	ecen4330lab7.c:1399: setTextColor(WHITE, BLACK);
      001320 E4               [12] 4722 	clr	a
      001321 F5*00            [12] 4723 	mov	_setTextColor_PARM_2,a
      001323 F5*01            [12] 4724 	mov	(_setTextColor_PARM_2 + 1),a
      001325 90 FF FF         [24] 4725 	mov	dptr,#0xffff
      001328 12r03r2A         [24] 4726 	lcall	_setTextColor
                                   4727 ;	ecen4330lab7.c:1400: LCD_string_write("Returning to\nmain menu.");
      00132B 90r06r39         [24] 4728 	mov	dptr,#___str_16
      00132E 75 F0 80         [24] 4729 	mov	b,#0x80
      001331 12r0Ar19         [24] 4730 	lcall	_LCD_string_write
                                   4731 ;	ecen4330lab7.c:1401: delay(100);
      001334 90 00 64         [24] 4732 	mov	dptr,#0x0064
                                   4733 ;	ecen4330lab7.c:1404: }
      001337 02r00r79         [24] 4734 	ljmp	_delay
                                   4735 ;------------------------------------------------------------
                                   4736 ;Allocation info for local variables in function 'MOVE'
                                   4737 ;------------------------------------------------------------
                                   4738 ;	ecen4330lab7.c:1427: void MOVE(){
                                   4739 ;	-----------------------------------------
                                   4740 ;	 function MOVE
                                   4741 ;	-----------------------------------------
      00133A                       4742 _MOVE:
                                   4743 ;	ecen4330lab7.c:1428: endAddrCalc = 0;
      00133A E4               [12] 4744 	clr	a
      00133B F5*34            [12] 4745 	mov	_endAddrCalc,a
      00133D F5*35            [12] 4746 	mov	(_endAddrCalc + 1),a
      00133F F5*36            [12] 4747 	mov	(_endAddrCalc + 2),a
      001341 F5*37            [12] 4748 	mov	(_endAddrCalc + 3),a
                                   4749 ;	ecen4330lab7.c:1429: addr0 = 0;                  // Source Address
      001343 F5*21            [12] 4750 	mov	_addr0,a
      001345 F5*22            [12] 4751 	mov	(_addr0 + 1),a
                                   4752 ;	ecen4330lab7.c:1430: addr1 = 0;                  // Source End Address
      001347 F5*23            [12] 4753 	mov	_addr1,a
      001349 F5*24            [12] 4754 	mov	(_addr1 + 1),a
                                   4755 ;	ecen4330lab7.c:1431: addr2 = 0;                  // Destination Address
      00134B F5*25            [12] 4756 	mov	_addr2,a
      00134D F5*26            [12] 4757 	mov	(_addr2 + 1),a
                                   4758 ;	ecen4330lab7.c:1432: addr3 = 0;                  // Destination End Address
      00134F F5*27            [12] 4759 	mov	_addr3,a
      001351 F5*28            [12] 4760 	mov	(_addr3 + 1),a
                                   4761 ;	ecen4330lab7.c:1433: currAddr0 = 0;              // Current Source Address
      001353 F5*29            [12] 4762 	mov	_currAddr0,a
      001355 F5*2A            [12] 4763 	mov	(_currAddr0 + 1),a
                                   4764 ;	ecen4330lab7.c:1434: currAddr1 = 0;              // Current Destination Address
      001357 F5*2B            [12] 4765 	mov	_currAddr1,a
      001359 F5*2C            [12] 4766 	mov	(_currAddr1 + 1),a
                                   4767 ;	ecen4330lab7.c:1437: resetLCD();
      00135B 12r0DrAD         [24] 4768 	lcall	_resetLCD
                                   4769 ;	ecen4330lab7.c:1438: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n\n  0x____");
      00135E 90r07r17         [24] 4770 	mov	dptr,#___str_23
      001361 75 F0 80         [24] 4771 	mov	b,#0x80
      001364 12r0Ar19         [24] 4772 	lcall	_LCD_string_write
                                   4773 ;	ecen4330lab7.c:1439: cursor_x -= 4 * textsize * 6;
      001367 E5*0C            [12] 4774 	mov	a,_textsize
      001369 75 F0 18         [24] 4775 	mov	b,#0x18
      00136C A4               [48] 4776 	mul	ab
      00136D FE               [12] 4777 	mov	r6,a
      00136E AF F0            [24] 4778 	mov	r7,b
      001370 E5*08            [12] 4779 	mov	a,_cursor_x
      001372 C3               [12] 4780 	clr	c
      001373 9E               [12] 4781 	subb	a,r6
      001374 F5*08            [12] 4782 	mov	_cursor_x,a
      001376 E5*09            [12] 4783 	mov	a,(_cursor_x + 1)
      001378 9F               [12] 4784 	subb	a,r7
      001379 F5*09            [12] 4785 	mov	(_cursor_x + 1),a
                                   4786 ;	ecen4330lab7.c:1440: inputRead16();
      00137B 12r0DrFE         [24] 4787 	lcall	_inputRead16
                                   4788 ;	ecen4330lab7.c:1441: addr0 = input16;
      00137E 85*17*21         [24] 4789 	mov	_addr0,_input16
      001381 85*18*22         [24] 4790 	mov	(_addr0 + 1),(_input16 + 1)
                                   4791 ;	ecen4330lab7.c:1444: resetLCD();
      001384 12r0DrAD         [24] 4792 	lcall	_resetLCD
                                   4793 ;	ecen4330lab7.c:1445: LCD_string_write("\nEnter\ndestination\nstarting RAM\naddress:\n\n\n  0x____");
      001387 90r07r46         [24] 4794 	mov	dptr,#___str_24
      00138A 75 F0 80         [24] 4795 	mov	b,#0x80
      00138D 12r0Ar19         [24] 4796 	lcall	_LCD_string_write
                                   4797 ;	ecen4330lab7.c:1446: cursor_x -= 4 * textsize * 6;
      001390 E5*0C            [12] 4798 	mov	a,_textsize
      001392 75 F0 18         [24] 4799 	mov	b,#0x18
      001395 A4               [48] 4800 	mul	ab
      001396 FE               [12] 4801 	mov	r6,a
      001397 AF F0            [24] 4802 	mov	r7,b
      001399 E5*08            [12] 4803 	mov	a,_cursor_x
      00139B C3               [12] 4804 	clr	c
      00139C 9E               [12] 4805 	subb	a,r6
      00139D F5*08            [12] 4806 	mov	_cursor_x,a
      00139F E5*09            [12] 4807 	mov	a,(_cursor_x + 1)
      0013A1 9F               [12] 4808 	subb	a,r7
      0013A2 F5*09            [12] 4809 	mov	(_cursor_x + 1),a
                                   4810 ;	ecen4330lab7.c:1447: inputRead16();
      0013A4 12r0DrFE         [24] 4811 	lcall	_inputRead16
                                   4812 ;	ecen4330lab7.c:1448: addr2 = input16;
      0013A7 85*17*25         [24] 4813 	mov	_addr2,_input16
      0013AA 85*18*26         [24] 4814 	mov	(_addr2 + 1),(_input16 + 1)
                                   4815 ;	ecen4330lab7.c:1451: inputDataType();
      0013AD 12r0Fr0D         [24] 4816 	lcall	_inputDataType
                                   4817 ;	ecen4330lab7.c:1454: resetLCD();
      0013B0 12r0DrAD         [24] 4818 	lcall	_resetLCD
                                   4819 ;	ecen4330lab7.c:1455: inputDataSize();
      0013B3 12r0FrCA         [24] 4820 	lcall	_inputDataSize
                                   4821 ;	ecen4330lab7.c:1458: if(addr2 > addr0){
      0013B6 C3               [12] 4822 	clr	c
      0013B7 E5*21            [12] 4823 	mov	a,_addr0
      0013B9 95*25            [12] 4824 	subb	a,_addr2
      0013BB E5*22            [12] 4825 	mov	a,(_addr0 + 1)
      0013BD 95*26            [12] 4826 	subb	a,(_addr2 + 1)
      0013BF 50 63            [24] 4827 	jnc	00108$
                                   4828 ;	ecen4330lab7.c:1459: endAddrCalc = addr2 + (dataSize * dataType);
      0013C1 85*1A*00         [24] 4829 	mov	__mulint_PARM_2,_dataType
      0013C4 75*01 00         [24] 4830 	mov	(__mulint_PARM_2 + 1),#0x00
      0013C7 85*1B 82         [24] 4831 	mov	dpl,_dataSize
      0013CA 85*1C 83         [24] 4832 	mov	dph,(_dataSize + 1)
      0013CD 12r00r00         [24] 4833 	lcall	__mulint
      0013D0 AE 82            [24] 4834 	mov	r6,dpl
      0013D2 AF 83            [24] 4835 	mov	r7,dph
      0013D4 EE               [12] 4836 	mov	a,r6
      0013D5 25*25            [12] 4837 	add	a,_addr2
      0013D7 FC               [12] 4838 	mov	r4,a
      0013D8 EF               [12] 4839 	mov	a,r7
      0013D9 35*26            [12] 4840 	addc	a,(_addr2 + 1)
      0013DB FD               [12] 4841 	mov	r5,a
      0013DC 8C*34            [24] 4842 	mov	_endAddrCalc,r4
      0013DE 8D*35            [24] 4843 	mov	(_endAddrCalc + 1),r5
      0013E0 75*36 00         [24] 4844 	mov	(_endAddrCalc + 2),#0x00
      0013E3 75*37 00         [24] 4845 	mov	(_endAddrCalc + 3),#0x00
                                   4846 ;	ecen4330lab7.c:1460: if(endAddrCalc > 0xFFFF){
      0013E6 C3               [12] 4847 	clr	c
      0013E7 74 FF            [12] 4848 	mov	a,#0xff
      0013E9 95*34            [12] 4849 	subb	a,_endAddrCalc
      0013EB 74 FF            [12] 4850 	mov	a,#0xff
      0013ED 95*35            [12] 4851 	subb	a,(_endAddrCalc + 1)
      0013EF E4               [12] 4852 	clr	a
      0013F0 95*36            [12] 4853 	subb	a,(_endAddrCalc + 2)
      0013F2 E4               [12] 4854 	clr	a
      0013F3 95*37            [12] 4855 	subb	a,(_endAddrCalc + 3)
      0013F5 50 08            [24] 4856 	jnc	00102$
                                   4857 ;	ecen4330lab7.c:1461: addr3 = 0xFFFF;
      0013F7 75*27 FF         [24] 4858 	mov	_addr3,#0xff
      0013FA 75*28 FF         [24] 4859 	mov	(_addr3 + 1),#0xff
      0013FD 80 0A            [24] 4860 	sjmp	00103$
      0013FF                       4861 00102$:
                                   4862 ;	ecen4330lab7.c:1464: addr3 = addr2 + (dataSize * dataType);
      0013FF EE               [12] 4863 	mov	a,r6
      001400 25*25            [12] 4864 	add	a,_addr2
      001402 F5*27            [12] 4865 	mov	_addr3,a
      001404 EF               [12] 4866 	mov	a,r7
      001405 35*26            [12] 4867 	addc	a,(_addr2 + 1)
      001407 F5*28            [12] 4868 	mov	(_addr3 + 1),a
      001409                       4869 00103$:
                                   4870 ;	ecen4330lab7.c:1466: dataSize = addr3 - addr2;
      001409 E5*27            [12] 4871 	mov	a,_addr3
      00140B C3               [12] 4872 	clr	c
      00140C 95*25            [12] 4873 	subb	a,_addr2
      00140E F5*1B            [12] 4874 	mov	_dataSize,a
      001410 E5*28            [12] 4875 	mov	a,(_addr3 + 1)
      001412 95*26            [12] 4876 	subb	a,(_addr2 + 1)
      001414 F5*1C            [12] 4877 	mov	(_dataSize + 1),a
                                   4878 ;	ecen4330lab7.c:1467: addr1 = addr0 + dataSize;
      001416 E5*1B            [12] 4879 	mov	a,_dataSize
      001418 25*21            [12] 4880 	add	a,_addr0
      00141A F5*23            [12] 4881 	mov	_addr1,a
      00141C E5*1C            [12] 4882 	mov	a,(_dataSize + 1)
      00141E 35*22            [12] 4883 	addc	a,(_addr0 + 1)
      001420 F5*24            [12] 4884 	mov	(_addr1 + 1),a
      001422 80 61            [24] 4885 	sjmp	00109$
      001424                       4886 00108$:
                                   4887 ;	ecen4330lab7.c:1470: endAddrCalc = addr0 + (dataSize * dataType);
      001424 85*1A*00         [24] 4888 	mov	__mulint_PARM_2,_dataType
      001427 75*01 00         [24] 4889 	mov	(__mulint_PARM_2 + 1),#0x00
      00142A 85*1B 82         [24] 4890 	mov	dpl,_dataSize
      00142D 85*1C 83         [24] 4891 	mov	dph,(_dataSize + 1)
      001430 12r00r00         [24] 4892 	lcall	__mulint
      001433 AE 82            [24] 4893 	mov	r6,dpl
      001435 AF 83            [24] 4894 	mov	r7,dph
      001437 EE               [12] 4895 	mov	a,r6
      001438 25*21            [12] 4896 	add	a,_addr0
      00143A FC               [12] 4897 	mov	r4,a
      00143B EF               [12] 4898 	mov	a,r7
      00143C 35*22            [12] 4899 	addc	a,(_addr0 + 1)
      00143E FD               [12] 4900 	mov	r5,a
      00143F 8C*34            [24] 4901 	mov	_endAddrCalc,r4
      001441 8D*35            [24] 4902 	mov	(_endAddrCalc + 1),r5
      001443 75*36 00         [24] 4903 	mov	(_endAddrCalc + 2),#0x00
      001446 75*37 00         [24] 4904 	mov	(_endAddrCalc + 3),#0x00
                                   4905 ;	ecen4330lab7.c:1471: if(endAddrCalc > 0xFFFF){
      001449 C3               [12] 4906 	clr	c
      00144A 74 FF            [12] 4907 	mov	a,#0xff
      00144C 95*34            [12] 4908 	subb	a,_endAddrCalc
      00144E 74 FF            [12] 4909 	mov	a,#0xff
      001450 95*35            [12] 4910 	subb	a,(_endAddrCalc + 1)
      001452 E4               [12] 4911 	clr	a
      001453 95*36            [12] 4912 	subb	a,(_endAddrCalc + 2)
      001455 E4               [12] 4913 	clr	a
      001456 95*37            [12] 4914 	subb	a,(_endAddrCalc + 3)
      001458 50 08            [24] 4915 	jnc	00105$
                                   4916 ;	ecen4330lab7.c:1472: addr1 = 0xFFFF;
      00145A 75*23 FF         [24] 4917 	mov	_addr1,#0xff
      00145D 75*24 FF         [24] 4918 	mov	(_addr1 + 1),#0xff
      001460 80 0A            [24] 4919 	sjmp	00106$
      001462                       4920 00105$:
                                   4921 ;	ecen4330lab7.c:1475: addr1 = addr0 + (dataSize * dataType);
      001462 EE               [12] 4922 	mov	a,r6
      001463 25*21            [12] 4923 	add	a,_addr0
      001465 F5*23            [12] 4924 	mov	_addr1,a
      001467 EF               [12] 4925 	mov	a,r7
      001468 35*22            [12] 4926 	addc	a,(_addr0 + 1)
      00146A F5*24            [12] 4927 	mov	(_addr1 + 1),a
      00146C                       4928 00106$:
                                   4929 ;	ecen4330lab7.c:1477: dataSize = addr1 - addr0;
      00146C E5*23            [12] 4930 	mov	a,_addr1
      00146E C3               [12] 4931 	clr	c
      00146F 95*21            [12] 4932 	subb	a,_addr0
      001471 F5*1B            [12] 4933 	mov	_dataSize,a
      001473 E5*24            [12] 4934 	mov	a,(_addr1 + 1)
      001475 95*22            [12] 4935 	subb	a,(_addr0 + 1)
      001477 F5*1C            [12] 4936 	mov	(_dataSize + 1),a
                                   4937 ;	ecen4330lab7.c:1478: addr3 = addr2 + dataSize;
      001479 E5*1B            [12] 4938 	mov	a,_dataSize
      00147B 25*25            [12] 4939 	add	a,_addr2
      00147D F5*27            [12] 4940 	mov	_addr3,a
      00147F E5*1C            [12] 4941 	mov	a,(_dataSize + 1)
      001481 35*26            [12] 4942 	addc	a,(_addr2 + 1)
      001483 F5*28            [12] 4943 	mov	(_addr3 + 1),a
      001485                       4944 00109$:
                                   4945 ;	ecen4330lab7.c:1483: if(addr0 < addr2 && addr1 > addr2){
      001485 C3               [12] 4946 	clr	c
      001486 E5*21            [12] 4947 	mov	a,_addr0
      001488 95*25            [12] 4948 	subb	a,_addr2
      00148A E5*22            [12] 4949 	mov	a,(_addr0 + 1)
      00148C 95*26            [12] 4950 	subb	a,(_addr2 + 1)
      00148E 50 4E            [24] 4951 	jnc	00113$
      001490 C3               [12] 4952 	clr	c
      001491 E5*25            [12] 4953 	mov	a,_addr2
      001493 95*23            [12] 4954 	subb	a,_addr1
      001495 E5*26            [12] 4955 	mov	a,(_addr2 + 1)
      001497 95*24            [12] 4956 	subb	a,(_addr1 + 1)
      001499 50 43            [24] 4957 	jnc	00113$
                                   4958 ;	ecen4330lab7.c:1484: currAddr0 = addr1;
      00149B 85*23*29         [24] 4959 	mov	_currAddr0,_addr1
      00149E 85*24*2A         [24] 4960 	mov	(_currAddr0 + 1),(_addr1 + 1)
                                   4961 ;	ecen4330lab7.c:1485: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      0014A1 85*27*2B         [24] 4962 	mov	_currAddr1,_addr3
      0014A4 85*28*2C         [24] 4963 	mov	(_currAddr1 + 1),(_addr3 + 1)
      0014A7                       4964 00117$:
      0014A7 C3               [12] 4965 	clr	c
      0014A8 E5*2B            [12] 4966 	mov	a,_currAddr1
      0014AA 95*25            [12] 4967 	subb	a,_addr2
      0014AC E5*2C            [12] 4968 	mov	a,(_currAddr1 + 1)
      0014AE 95*26            [12] 4969 	subb	a,(_addr2 + 1)
      0014B0 40 6D            [24] 4970 	jc	00114$
                                   4971 ;	ecen4330lab7.c:1486: data = RAMread(currAddr0);
      0014B2 85*29 82         [24] 4972 	mov	dpl,_currAddr0
      0014B5 85*2A 83         [24] 4973 	mov	dph,(_currAddr0 + 1)
      0014B8 12r0Dr9A         [24] 4974 	lcall	_RAMread
      0014BB 85 82*20         [24] 4975 	mov	_data,dpl
                                   4976 ;	ecen4330lab7.c:1487: RAMwrite(currAddr1, data);
      0014BE 85*20*00         [24] 4977 	mov	_RAMwrite_PARM_2,_data
      0014C1 85*2B 82         [24] 4978 	mov	dpl,_currAddr1
      0014C4 85*2C 83         [24] 4979 	mov	dph,(_currAddr1 + 1)
      0014C7 12r0Dr6B         [24] 4980 	lcall	_RAMwrite
                                   4981 ;	ecen4330lab7.c:1488: currAddr0--;
      0014CA 15*29            [12] 4982 	dec	_currAddr0
      0014CC 74 FF            [12] 4983 	mov	a,#0xff
      0014CE B5*29 02         [24] 4984 	cjne	a,_currAddr0,00166$
      0014D1 15*2A            [12] 4985 	dec	(_currAddr0 + 1)
      0014D3                       4986 00166$:
                                   4987 ;	ecen4330lab7.c:1485: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      0014D3 15*2B            [12] 4988 	dec	_currAddr1
      0014D5 74 FF            [12] 4989 	mov	a,#0xff
      0014D7 B5*2B 02         [24] 4990 	cjne	a,_currAddr1,00167$
      0014DA 15*2C            [12] 4991 	dec	(_currAddr1 + 1)
      0014DC                       4992 00167$:
      0014DC 80 C9            [24] 4993 	sjmp	00117$
      0014DE                       4994 00113$:
                                   4995 ;	ecen4330lab7.c:1495: currAddr0 = addr0;
      0014DE 85*21*29         [24] 4996 	mov	_currAddr0,_addr0
      0014E1 85*22*2A         [24] 4997 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   4998 ;	ecen4330lab7.c:1496: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      0014E4 85*25*2B         [24] 4999 	mov	_currAddr1,_addr2
      0014E7 85*26*2C         [24] 5000 	mov	(_currAddr1 + 1),(_addr2 + 1)
      0014EA                       5001 00120$:
      0014EA C3               [12] 5002 	clr	c
      0014EB E5*27            [12] 5003 	mov	a,_addr3
      0014ED 95*2B            [12] 5004 	subb	a,_currAddr1
      0014EF E5*28            [12] 5005 	mov	a,(_addr3 + 1)
      0014F1 95*2C            [12] 5006 	subb	a,(_currAddr1 + 1)
      0014F3 40 2A            [24] 5007 	jc	00114$
                                   5008 ;	ecen4330lab7.c:1497: data = RAMread(currAddr0);
      0014F5 85*29 82         [24] 5009 	mov	dpl,_currAddr0
      0014F8 85*2A 83         [24] 5010 	mov	dph,(_currAddr0 + 1)
      0014FB 12r0Dr9A         [24] 5011 	lcall	_RAMread
      0014FE 85 82*20         [24] 5012 	mov	_data,dpl
                                   5013 ;	ecen4330lab7.c:1498: RAMwrite(currAddr1, data);
      001501 85*20*00         [24] 5014 	mov	_RAMwrite_PARM_2,_data
      001504 85*2B 82         [24] 5015 	mov	dpl,_currAddr1
      001507 85*2C 83         [24] 5016 	mov	dph,(_currAddr1 + 1)
      00150A 12r0Dr6B         [24] 5017 	lcall	_RAMwrite
                                   5018 ;	ecen4330lab7.c:1499: currAddr0++;
      00150D 05*29            [12] 5019 	inc	_currAddr0
      00150F E4               [12] 5020 	clr	a
      001510 B5*29 02         [24] 5021 	cjne	a,_currAddr0,00169$
      001513 05*2A            [12] 5022 	inc	(_currAddr0 + 1)
      001515                       5023 00169$:
                                   5024 ;	ecen4330lab7.c:1496: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      001515 05*2B            [12] 5025 	inc	_currAddr1
      001517 E4               [12] 5026 	clr	a
      001518 B5*2B CF         [24] 5027 	cjne	a,_currAddr1,00120$
      00151B 05*2C            [12] 5028 	inc	(_currAddr1 + 1)
      00151D 80 CB            [24] 5029 	sjmp	00120$
      00151F                       5030 00114$:
                                   5031 ;	ecen4330lab7.c:1504: resetLCD();
      00151F 12r0DrAD         [24] 5032 	lcall	_resetLCD
                                   5033 ;	ecen4330lab7.c:1505: setTextColor(GREEN, BLACK);
      001522 E4               [12] 5034 	clr	a
      001523 F5*00            [12] 5035 	mov	_setTextColor_PARM_2,a
      001525 F5*01            [12] 5036 	mov	(_setTextColor_PARM_2 + 1),a
      001527 90 07 E0         [24] 5037 	mov	dptr,#0x07e0
      00152A 12r03r2A         [24] 5038 	lcall	_setTextColor
                                   5039 ;	ecen4330lab7.c:1506: LCD_string_write("\nMove complete.\n\n");
      00152D 90r07r7A         [24] 5040 	mov	dptr,#___str_25
      001530 75 F0 80         [24] 5041 	mov	b,#0x80
      001533 12r0Ar19         [24] 5042 	lcall	_LCD_string_write
                                   5043 ;	ecen4330lab7.c:1507: delay(100);
      001536 90 00 64         [24] 5044 	mov	dptr,#0x0064
      001539 12r00r79         [24] 5045 	lcall	_delay
                                   5046 ;	ecen4330lab7.c:1508: setTextColor(WHITE, BLACK);
      00153C E4               [12] 5047 	clr	a
      00153D F5*00            [12] 5048 	mov	_setTextColor_PARM_2,a
      00153F F5*01            [12] 5049 	mov	(_setTextColor_PARM_2 + 1),a
      001541 90 FF FF         [24] 5050 	mov	dptr,#0xffff
      001544 12r03r2A         [24] 5051 	lcall	_setTextColor
                                   5052 ;	ecen4330lab7.c:1509: LCD_string_write("Returning to\nmain menu.");
      001547 90r06r39         [24] 5053 	mov	dptr,#___str_16
      00154A 75 F0 80         [24] 5054 	mov	b,#0x80
      00154D 12r0Ar19         [24] 5055 	lcall	_LCD_string_write
                                   5056 ;	ecen4330lab7.c:1510: delay(100);
      001550 90 00 64         [24] 5057 	mov	dptr,#0x0064
                                   5058 ;	ecen4330lab7.c:1511: }
      001553 02r00r79         [24] 5059 	ljmp	_delay
                                   5060 ;------------------------------------------------------------
                                   5061 ;Allocation info for local variables in function 'COUNT'
                                   5062 ;------------------------------------------------------------
                                   5063 ;i                         Allocated to registers 
                                   5064 ;------------------------------------------------------------
                                   5065 ;	ecen4330lab7.c:1518: void COUNT(){
                                   5066 ;	-----------------------------------------
                                   5067 ;	 function COUNT
                                   5068 ;	-----------------------------------------
      001556                       5069 _COUNT:
                                   5070 ;	ecen4330lab7.c:1519: endAddrCalc = 0;
      001556 E4               [12] 5071 	clr	a
      001557 F5*34            [12] 5072 	mov	_endAddrCalc,a
      001559 F5*35            [12] 5073 	mov	(_endAddrCalc + 1),a
      00155B F5*36            [12] 5074 	mov	(_endAddrCalc + 2),a
      00155D F5*37            [12] 5075 	mov	(_endAddrCalc + 3),a
                                   5076 ;	ecen4330lab7.c:1520: addr0 = 0;                      // Starting Address
      00155F F5*21            [12] 5077 	mov	_addr0,a
      001561 F5*22            [12] 5078 	mov	(_addr0 + 1),a
                                   5079 ;	ecen4330lab7.c:1521: addr1 = 0;                      // End Address
      001563 F5*23            [12] 5080 	mov	_addr1,a
      001565 F5*24            [12] 5081 	mov	(_addr1 + 1),a
                                   5082 ;	ecen4330lab7.c:1522: dataSize = 0;                   // Data Size
      001567 F5*1B            [12] 5083 	mov	_dataSize,a
      001569 F5*1C            [12] 5084 	mov	(_dataSize + 1),a
                                   5085 ;	ecen4330lab7.c:1523: byte1 = 0;                       // Find Value
      00156B F5*2F            [12] 5086 	mov	_byte1,a
      00156D F5*30            [12] 5087 	mov	(_byte1 + 1),a
                                   5088 ;	ecen4330lab7.c:1524: count = 0;
      00156F F5*32            [12] 5089 	mov	_count,a
      001571 F5*33            [12] 5090 	mov	(_count + 1),a
                                   5091 ;	ecen4330lab7.c:1525: addr3 = 0;						// Count overflow
      001573 F5*27            [12] 5092 	mov	_addr3,a
      001575 F5*28            [12] 5093 	mov	(_addr3 + 1),a
                                   5094 ;	ecen4330lab7.c:1526: dataEnd = 0;
                                   5095 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      001577 F5*1E            [12] 5096 	mov	_dataEnd,a
                                   5097 ;	ecen4330lab7.c:1529: resetLCD();
      001579 12r0DrAD         [24] 5098 	lcall	_resetLCD
                                   5099 ;	ecen4330lab7.c:1530: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      00157C 90r07r8C         [24] 5100 	mov	dptr,#___str_26
      00157F 75 F0 80         [24] 5101 	mov	b,#0x80
      001582 12r0Ar19         [24] 5102 	lcall	_LCD_string_write
                                   5103 ;	ecen4330lab7.c:1531: cursor_x -= 4 * textsize * 6;
      001585 E5*0C            [12] 5104 	mov	a,_textsize
      001587 75 F0 18         [24] 5105 	mov	b,#0x18
      00158A A4               [48] 5106 	mul	ab
      00158B FE               [12] 5107 	mov	r6,a
      00158C AF F0            [24] 5108 	mov	r7,b
      00158E E5*08            [12] 5109 	mov	a,_cursor_x
      001590 C3               [12] 5110 	clr	c
      001591 9E               [12] 5111 	subb	a,r6
      001592 F5*08            [12] 5112 	mov	_cursor_x,a
      001594 E5*09            [12] 5113 	mov	a,(_cursor_x + 1)
      001596 9F               [12] 5114 	subb	a,r7
      001597 F5*09            [12] 5115 	mov	(_cursor_x + 1),a
                                   5116 ;	ecen4330lab7.c:1532: inputRead16();                  // Read input
      001599 12r0DrFE         [24] 5117 	lcall	_inputRead16
                                   5118 ;	ecen4330lab7.c:1533: addr0 = input16;                // Start address
      00159C 85*17*21         [24] 5119 	mov	_addr0,_input16
      00159F 85*18*22         [24] 5120 	mov	(_addr0 + 1),(_input16 + 1)
                                   5121 ;	ecen4330lab7.c:1536: resetLCD();
      0015A2 12r0DrAD         [24] 5122 	lcall	_resetLCD
                                   5123 ;	ecen4330lab7.c:1537: inputDataSize();                // Prompt & read input
      0015A5 12r0FrCA         [24] 5124 	lcall	_inputDataSize
                                   5125 ;	ecen4330lab7.c:1540: resetLCD();
      0015A8 12r0DrAD         [24] 5126 	lcall	_resetLCD
                                   5127 ;	ecen4330lab7.c:1541: LCD_string_write("\nEnter search\nvalue:\n\n  0x__");
      0015AB 90r07rB3         [24] 5128 	mov	dptr,#___str_27
      0015AE 75 F0 80         [24] 5129 	mov	b,#0x80
      0015B1 12r0Ar19         [24] 5130 	lcall	_LCD_string_write
                                   5131 ;	ecen4330lab7.c:1542: cursor_x -= 2 * textsize * 6;
      0015B4 E5*0C            [12] 5132 	mov	a,_textsize
      0015B6 75 F0 0C         [24] 5133 	mov	b,#0x0c
      0015B9 A4               [48] 5134 	mul	ab
      0015BA FE               [12] 5135 	mov	r6,a
      0015BB AF F0            [24] 5136 	mov	r7,b
      0015BD E5*08            [12] 5137 	mov	a,_cursor_x
      0015BF C3               [12] 5138 	clr	c
      0015C0 9E               [12] 5139 	subb	a,r6
      0015C1 F5*08            [12] 5140 	mov	_cursor_x,a
      0015C3 E5*09            [12] 5141 	mov	a,(_cursor_x + 1)
      0015C5 9F               [12] 5142 	subb	a,r7
      0015C6 F5*09            [12] 5143 	mov	(_cursor_x + 1),a
                                   5144 ;	ecen4330lab7.c:1543: inputRead8();                  // Read input
      0015C8 12r0ErB9         [24] 5145 	lcall	_inputRead8
                                   5146 ;	ecen4330lab7.c:1544: byte1 = input8;                 // Find value
      0015CB 85*19*2F         [24] 5147 	mov	_byte1,_input8
      0015CE 75*30 00         [24] 5148 	mov	(_byte1 + 1),#0x00
                                   5149 ;	ecen4330lab7.c:1547: endAddrCalc = addr0 + dataSize;
      0015D1 E5*1B            [12] 5150 	mov	a,_dataSize
      0015D3 25*21            [12] 5151 	add	a,_addr0
      0015D5 FE               [12] 5152 	mov	r6,a
      0015D6 E5*1C            [12] 5153 	mov	a,(_dataSize + 1)
      0015D8 35*22            [12] 5154 	addc	a,(_addr0 + 1)
      0015DA FF               [12] 5155 	mov	r7,a
      0015DB 8E*34            [24] 5156 	mov	_endAddrCalc,r6
      0015DD 8F*35            [24] 5157 	mov	(_endAddrCalc + 1),r7
      0015DF 75*36 00         [24] 5158 	mov	(_endAddrCalc + 2),#0x00
      0015E2 75*37 00         [24] 5159 	mov	(_endAddrCalc + 3),#0x00
                                   5160 ;	ecen4330lab7.c:1548: if(endAddrCalc < addr0){ // RAM overflow
      0015E5 AC*21            [24] 5161 	mov	r4,_addr0
      0015E7 AD*22            [24] 5162 	mov	r5,(_addr0 + 1)
      0015E9 7E 00            [12] 5163 	mov	r6,#0x00
      0015EB 7F 00            [12] 5164 	mov	r7,#0x00
      0015ED C3               [12] 5165 	clr	c
      0015EE E5*34            [12] 5166 	mov	a,_endAddrCalc
      0015F0 9C               [12] 5167 	subb	a,r4
      0015F1 E5*35            [12] 5168 	mov	a,(_endAddrCalc + 1)
      0015F3 9D               [12] 5169 	subb	a,r5
      0015F4 E5*36            [12] 5170 	mov	a,(_endAddrCalc + 2)
      0015F6 9E               [12] 5171 	subb	a,r6
      0015F7 E5*37            [12] 5172 	mov	a,(_endAddrCalc + 3)
      0015F9 9F               [12] 5173 	subb	a,r7
      0015FA 50 14            [24] 5174 	jnc	00102$
                                   5175 ;	ecen4330lab7.c:1549: addr1 = 0xFFFF;             // Set end address
      0015FC 75*23 FF         [24] 5176 	mov	_addr1,#0xff
                                   5177 ;	ecen4330lab7.c:1550: dataSize = addr1 - addr0;   // Recalculate data size
      0015FF 74 FF            [12] 5178 	mov	a,#0xff
      001601 F5*24            [12] 5179 	mov	(_addr1 + 1),a
      001603 C3               [12] 5180 	clr	c
      001604 95*21            [12] 5181 	subb	a,_addr0
      001606 F5*1B            [12] 5182 	mov	_dataSize,a
      001608 74 FF            [12] 5183 	mov	a,#0xff
      00160A 95*22            [12] 5184 	subb	a,(_addr0 + 1)
      00160C F5*1C            [12] 5185 	mov	(_dataSize + 1),a
      00160E 80 0C            [24] 5186 	sjmp	00103$
      001610                       5187 00102$:
                                   5188 ;	ecen4330lab7.c:1553: addr1 = addr0 + dataSize;
      001610 E5*1B            [12] 5189 	mov	a,_dataSize
      001612 25*21            [12] 5190 	add	a,_addr0
      001614 F5*23            [12] 5191 	mov	_addr1,a
      001616 E5*1C            [12] 5192 	mov	a,(_dataSize + 1)
      001618 35*22            [12] 5193 	addc	a,(_addr0 + 1)
      00161A F5*24            [12] 5194 	mov	(_addr1 + 1),a
      00161C                       5195 00103$:
                                   5196 ;	ecen4330lab7.c:1571: int i = addr0;
      00161C AE*21            [24] 5197 	mov	r6,_addr0
      00161E AF*22            [24] 5198 	mov	r7,(_addr0 + 1)
                                   5199 ;	ecen4330lab7.c:1572: while(i <= addr1 && dataEnd == 0){
      001620                       5200 00111$:
      001620 8E 04            [24] 5201 	mov	ar4,r6
      001622 8F 05            [24] 5202 	mov	ar5,r7
      001624 C3               [12] 5203 	clr	c
      001625 E5*23            [12] 5204 	mov	a,_addr1
      001627 9C               [12] 5205 	subb	a,r4
      001628 E5*24            [12] 5206 	mov	a,(_addr1 + 1)
      00162A 9D               [12] 5207 	subb	a,r5
      00162B 40 4C            [24] 5208 	jc	00113$
      00162D E5*1E            [12] 5209 	mov	a,_dataEnd
      00162F 70 48            [24] 5210 	jnz	00113$
                                   5211 ;	ecen4330lab7.c:1573: data = RAMread(i);
      001631 8E 82            [24] 5212 	mov	dpl,r6
      001633 8F 83            [24] 5213 	mov	dph,r7
      001635 C0 07            [24] 5214 	push	ar7
      001637 C0 06            [24] 5215 	push	ar6
      001639 12r0Dr9A         [24] 5216 	lcall	_RAMread
      00163C 85 82*20         [24] 5217 	mov	_data,dpl
      00163F D0 06            [24] 5218 	pop	ar6
      001641 D0 07            [24] 5219 	pop	ar7
                                   5220 ;	ecen4330lab7.c:1574: if(data == byte1){
      001643 AC*20            [24] 5221 	mov	r4,_data
      001645 7D 00            [12] 5222 	mov	r5,#0x00
      001647 EC               [12] 5223 	mov	a,r4
      001648 B5*2F 1A         [24] 5224 	cjne	a,_byte1,00107$
      00164B ED               [12] 5225 	mov	a,r5
      00164C B5*30 16         [24] 5226 	cjne	a,(_byte1 + 1),00107$
                                   5227 ;	ecen4330lab7.c:1575: if(count == 0xFFFF){
      00164F 74 FF            [12] 5228 	mov	a,#0xff
      001651 B5*32 09         [24] 5229 	cjne	a,_count,00105$
      001654 B5*33 06         [24] 5230 	cjne	a,(_count + 1),00105$
                                   5231 ;	ecen4330lab7.c:1576: addr3 = 1;
      001657 75*27 01         [24] 5232 	mov	_addr3,#0x01
      00165A 75*28 00         [24] 5233 	mov	(_addr3 + 1),#0x00
      00165D                       5234 00105$:
                                   5235 ;	ecen4330lab7.c:1578: count++;
      00165D 05*32            [12] 5236 	inc	_count
      00165F E4               [12] 5237 	clr	a
      001660 B5*32 02         [24] 5238 	cjne	a,_count,00173$
      001663 05*33            [12] 5239 	inc	(_count + 1)
      001665                       5240 00173$:
      001665                       5241 00107$:
                                   5242 ;	ecen4330lab7.c:1580: if(i == 0xFFFF){
      001665 8E 04            [24] 5243 	mov	ar4,r6
      001667 8F 05            [24] 5244 	mov	ar5,r7
      001669 BC FF 06         [24] 5245 	cjne	r4,#0xff,00109$
      00166C BD FF 03         [24] 5246 	cjne	r5,#0xff,00109$
                                   5247 ;	ecen4330lab7.c:1581: dataEnd = 1;
      00166F 75*1E 01         [24] 5248 	mov	_dataEnd,#0x01
      001672                       5249 00109$:
                                   5250 ;	ecen4330lab7.c:1583: i++;
      001672 0E               [12] 5251 	inc	r6
      001673 BE 00 AA         [24] 5252 	cjne	r6,#0x00,00111$
      001676 0F               [12] 5253 	inc	r7
      001677 80 A7            [24] 5254 	sjmp	00111$
      001679                       5255 00113$:
                                   5256 ;	ecen4330lab7.c:1586: if(count > 0 || addr3 == 1){
      001679 E5*32            [12] 5257 	mov	a,_count
      00167B 45*33            [12] 5258 	orl	a,(_count + 1)
      00167D 70 0D            [24] 5259 	jnz	00119$
      00167F 74 01            [12] 5260 	mov	a,#0x01
      001681 B5*27 06         [24] 5261 	cjne	a,_addr3,00178$
      001684 14               [12] 5262 	dec	a
      001685 B5*28 02         [24] 5263 	cjne	a,(_addr3 + 1),00178$
      001688 80 02            [24] 5264 	sjmp	00179$
      00168A                       5265 00178$:
      00168A 80 5F            [24] 5266 	sjmp	00120$
      00168C                       5267 00179$:
      00168C                       5268 00119$:
                                   5269 ;	ecen4330lab7.c:1587: resetLCD();
      00168C 12r0DrAD         [24] 5270 	lcall	_resetLCD
                                   5271 ;	ecen4330lab7.c:1588: setTextColor(GREEN, BLACK);
      00168F E4               [12] 5272 	clr	a
      001690 F5*00            [12] 5273 	mov	_setTextColor_PARM_2,a
      001692 F5*01            [12] 5274 	mov	(_setTextColor_PARM_2 + 1),a
      001694 90 07 E0         [24] 5275 	mov	dptr,#0x07e0
      001697 12r03r2A         [24] 5276 	lcall	_setTextColor
                                   5277 ;	ecen4330lab7.c:1589: LCD_string_write("\n0x");
      00169A 90r07rD0         [24] 5278 	mov	dptr,#___str_28
      00169D 75 F0 80         [24] 5279 	mov	b,#0x80
      0016A0 12r0Ar19         [24] 5280 	lcall	_LCD_string_write
                                   5281 ;	ecen4330lab7.c:1590: HEXtoASCII_8write(byte1);
      0016A3 85*2F 82         [24] 5282 	mov	dpl,_byte1
      0016A6 12r0Cr89         [24] 5283 	lcall	_HEXtoASCII_8write
                                   5284 ;	ecen4330lab7.c:1591: LCD_string_write(" found\n");
      0016A9 90r07rD4         [24] 5285 	mov	dptr,#___str_29
      0016AC 75 F0 80         [24] 5286 	mov	b,#0x80
      0016AF 12r0Ar19         [24] 5287 	lcall	_LCD_string_write
                                   5288 ;	ecen4330lab7.c:1593: if(count > 0){
      0016B2 E5*32            [12] 5289 	mov	a,_count
      0016B4 45*33            [12] 5290 	orl	a,(_count + 1)
      0016B6 60 0B            [24] 5291 	jz	00117$
                                   5292 ;	ecen4330lab7.c:1594: HEXtoASCII_16write(count);
      0016B8 85*32 82         [24] 5293 	mov	dpl,_count
      0016BB 85*33 83         [24] 5294 	mov	dph,(_count + 1)
      0016BE 12r0CrC6         [24] 5295 	lcall	_HEXtoASCII_16write
      0016C1 80 16            [24] 5296 	sjmp	00118$
      0016C3                       5297 00117$:
                                   5298 ;	ecen4330lab7.c:1596: else if(addr3 == 1){
      0016C3 74 01            [12] 5299 	mov	a,#0x01
      0016C5 B5*27 06         [24] 5300 	cjne	a,_addr3,00181$
      0016C8 14               [12] 5301 	dec	a
      0016C9 B5*28 02         [24] 5302 	cjne	a,(_addr3 + 1),00181$
      0016CC 80 02            [24] 5303 	sjmp	00182$
      0016CE                       5304 00181$:
      0016CE 80 09            [24] 5305 	sjmp	00118$
      0016D0                       5306 00182$:
                                   5307 ;	ecen4330lab7.c:1597: LCD_string_write("0x10000");
      0016D0 90r07rDC         [24] 5308 	mov	dptr,#___str_30
      0016D3 75 F0 80         [24] 5309 	mov	b,#0x80
      0016D6 12r0Ar19         [24] 5310 	lcall	_LCD_string_write
      0016D9                       5311 00118$:
                                   5312 ;	ecen4330lab7.c:1599: LCD_string_write("\ntimes.");
      0016D9 90r07rE4         [24] 5313 	mov	dptr,#___str_31
      0016DC 75 F0 80         [24] 5314 	mov	b,#0x80
      0016DF 12r0Ar19         [24] 5315 	lcall	_LCD_string_write
                                   5316 ;	ecen4330lab7.c:1600: delay(300);
      0016E2 90 01 2C         [24] 5317 	mov	dptr,#0x012c
      0016E5 12r00r79         [24] 5318 	lcall	_delay
                                   5319 ;	ecen4330lab7.c:1601: FIND_display();                 // Display dump data
      0016E8 02r1Dr26         [24] 5320 	ljmp	_FIND_display
      0016EB                       5321 00120$:
                                   5322 ;	ecen4330lab7.c:1604: resetLCD();
      0016EB 12r0DrAD         [24] 5323 	lcall	_resetLCD
                                   5324 ;	ecen4330lab7.c:1605: LCD_string_write("\n0x");
      0016EE 90r07rD0         [24] 5325 	mov	dptr,#___str_28
      0016F1 75 F0 80         [24] 5326 	mov	b,#0x80
      0016F4 12r0Ar19         [24] 5327 	lcall	_LCD_string_write
                                   5328 ;	ecen4330lab7.c:1606: HEXtoASCII_8write(byte1);
      0016F7 85*2F 82         [24] 5329 	mov	dpl,_byte1
      0016FA 12r0Cr89         [24] 5330 	lcall	_HEXtoASCII_8write
                                   5331 ;	ecen4330lab7.c:1607: LCD_string_write(" not\nfound in\nexternal RAM\n");
      0016FD 90r07rEC         [24] 5332 	mov	dptr,#___str_32
      001700 75 F0 80         [24] 5333 	mov	b,#0x80
      001703 12r0Ar19         [24] 5334 	lcall	_LCD_string_write
                                   5335 ;	ecen4330lab7.c:1608: HEXtoASCII_16write(addr0);
      001706 85*21 82         [24] 5336 	mov	dpl,_addr0
      001709 85*22 83         [24] 5337 	mov	dph,(_addr0 + 1)
      00170C 12r0CrC6         [24] 5338 	lcall	_HEXtoASCII_16write
                                   5339 ;	ecen4330lab7.c:1609: LCD_string_write(" -\n");
      00170F 90r08r08         [24] 5340 	mov	dptr,#___str_33
      001712 75 F0 80         [24] 5341 	mov	b,#0x80
      001715 12r0Ar19         [24] 5342 	lcall	_LCD_string_write
                                   5343 ;	ecen4330lab7.c:1610: HEXtoASCII_16write(addr1);
      001718 85*23 82         [24] 5344 	mov	dpl,_addr1
      00171B 85*24 83         [24] 5345 	mov	dph,(_addr1 + 1)
      00171E 12r0CrC6         [24] 5346 	lcall	_HEXtoASCII_16write
                                   5347 ;	ecen4330lab7.c:1611: delay(300);
      001721 90 01 2C         [24] 5348 	mov	dptr,#0x012c
      001724 12r00r79         [24] 5349 	lcall	_delay
                                   5350 ;	ecen4330lab7.c:1612: resetLCD();
      001727 12r0DrAD         [24] 5351 	lcall	_resetLCD
                                   5352 ;	ecen4330lab7.c:1613: LCD_string_write("Returning to\nmain menu.");
      00172A 90r06r39         [24] 5353 	mov	dptr,#___str_16
      00172D 75 F0 80         [24] 5354 	mov	b,#0x80
      001730 12r0Ar19         [24] 5355 	lcall	_LCD_string_write
                                   5356 ;	ecen4330lab7.c:1614: delay(200);
      001733 90 00 C8         [24] 5357 	mov	dptr,#0x00c8
                                   5358 ;	ecen4330lab7.c:1616: }
      001736 02r00r79         [24] 5359 	ljmp	_delay
                                   5360 ;------------------------------------------------------------
                                   5361 ;Allocation info for local variables in function 'DUMP_display'
                                   5362 ;------------------------------------------------------------
                                   5363 ;i                         Allocated to registers r6 r7 
                                   5364 ;j                         Allocated to registers r4 r5 
                                   5365 ;------------------------------------------------------------
                                   5366 ;	ecen4330lab7.c:1625: void DUMP_display(){
                                   5367 ;	-----------------------------------------
                                   5368 ;	 function DUMP_display
                                   5369 ;	-----------------------------------------
      001739                       5370 _DUMP_display:
                                   5371 ;	ecen4330lab7.c:1628: currAddr1 = 0;              // Page Count
      001739 E4               [12] 5372 	clr	a
      00173A F5*2B            [12] 5373 	mov	_currAddr1,a
      00173C F5*2C            [12] 5374 	mov	(_currAddr1 + 1),a
                                   5375 ;	ecen4330lab7.c:1629: dataEnd = 0;
                                   5376 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      00173E F5*1E            [12] 5377 	mov	_dataEnd,a
                                   5378 ;	ecen4330lab7.c:1630: addr2 = 0;					// Prev data count
      001740 F5*25            [12] 5379 	mov	_addr2,a
      001742 F5*26            [12] 5380 	mov	(_addr2 + 1),a
                                   5381 ;	ecen4330lab7.c:1632: currAddr0 = addr0;          // Set current address
      001744 85*21*29         [24] 5382 	mov	_currAddr0,_addr0
      001747 85*22*2A         [24] 5383 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5384 ;	ecen4330lab7.c:1634: do{
      00174A                       5385 00134$:
                                   5386 ;	ecen4330lab7.c:1635: resetLCD();
      00174A 12r0DrAD         [24] 5387 	lcall	_resetLCD
                                   5388 ;	ecen4330lab7.c:1636: setTextSize(2);
      00174D 75 82 02         [24] 5389 	mov	dpl,#0x02
      001750 12r03r37         [24] 5390 	lcall	_setTextSize
                                   5391 ;	ecen4330lab7.c:1637: LCD_string_write("\n");
      001753 90r08r0C         [24] 5392 	mov	dptr,#___str_34
      001756 75 F0 80         [24] 5393 	mov	b,#0x80
      001759 12r0Ar19         [24] 5394 	lcall	_LCD_string_write
                                   5395 ;	ecen4330lab7.c:1640: if(dataSize >= 10){
      00175C C3               [12] 5396 	clr	c
      00175D E5*1B            [12] 5397 	mov	a,_dataSize
      00175F 94 0A            [12] 5398 	subb	a,#0x0a
      001761 E5*1C            [12] 5399 	mov	a,(_dataSize + 1)
      001763 94 00            [12] 5400 	subb	a,#0x00
      001765 50 03            [24] 5401 	jnc	00258$
      001767 02r18r08         [24] 5402 	ljmp	00119$
      00176A                       5403 00258$:
                                   5404 ;	ecen4330lab7.c:1641: addr2 = 10;
      00176A 75*25 0A         [24] 5405 	mov	_addr2,#0x0a
      00176D 75*26 00         [24] 5406 	mov	(_addr2 + 1),#0x00
                                   5407 ;	ecen4330lab7.c:1643: for(i = 0; i < 10; i++){
      001770 7E 00            [12] 5408 	mov	r6,#0x00
      001772 7F 00            [12] 5409 	mov	r7,#0x00
      001774                       5410 00140$:
                                   5411 ;	ecen4330lab7.c:1644: HEXtoASCII_16write(currAddr0);
      001774 85*29 82         [24] 5412 	mov	dpl,_currAddr0
      001777 85*2A 83         [24] 5413 	mov	dph,(_currAddr0 + 1)
      00177A C0 07            [24] 5414 	push	ar7
      00177C C0 06            [24] 5415 	push	ar6
      00177E 12r0CrC6         [24] 5416 	lcall	_HEXtoASCII_16write
                                   5417 ;	ecen4330lab7.c:1645: LCD_string_write(": 0x");
      001781 90r06r34         [24] 5418 	mov	dptr,#___str_15
      001784 75 F0 80         [24] 5419 	mov	b,#0x80
      001787 12r0Ar19         [24] 5420 	lcall	_LCD_string_write
      00178A D0 06            [24] 5421 	pop	ar6
      00178C D0 07            [24] 5422 	pop	ar7
                                   5423 ;	ecen4330lab7.c:1646: for(j = 0; j < dataType; j++){
      00178E 7C 00            [12] 5424 	mov	r4,#0x00
      001790 7D 00            [12] 5425 	mov	r5,#0x00
      001792                       5426 00138$:
      001792 AA*1A            [24] 5427 	mov	r2,_dataType
      001794 7B 00            [12] 5428 	mov	r3,#0x00
      001796 C3               [12] 5429 	clr	c
      001797 EC               [12] 5430 	mov	a,r4
      001798 9A               [12] 5431 	subb	a,r2
      001799 ED               [12] 5432 	mov	a,r5
      00179A 64 80            [12] 5433 	xrl	a,#0x80
      00179C 8B F0            [24] 5434 	mov	b,r3
      00179E 63 F0 80         [24] 5435 	xrl	b,#0x80
      0017A1 95 F0            [12] 5436 	subb	a,b
      0017A3 50 2B            [24] 5437 	jnc	00101$
                                   5438 ;	ecen4330lab7.c:1647: HEXtoASCII_8write(RAMread(currAddr0));
      0017A5 85*29 82         [24] 5439 	mov	dpl,_currAddr0
      0017A8 85*2A 83         [24] 5440 	mov	dph,(_currAddr0 + 1)
      0017AB C0 07            [24] 5441 	push	ar7
      0017AD C0 06            [24] 5442 	push	ar6
      0017AF C0 05            [24] 5443 	push	ar5
      0017B1 C0 04            [24] 5444 	push	ar4
      0017B3 12r0Dr9A         [24] 5445 	lcall	_RAMread
      0017B6 12r0Cr89         [24] 5446 	lcall	_HEXtoASCII_8write
      0017B9 D0 04            [24] 5447 	pop	ar4
      0017BB D0 05            [24] 5448 	pop	ar5
      0017BD D0 06            [24] 5449 	pop	ar6
      0017BF D0 07            [24] 5450 	pop	ar7
                                   5451 ;	ecen4330lab7.c:1648: currAddr0++;
      0017C1 05*29            [12] 5452 	inc	_currAddr0
      0017C3 E4               [12] 5453 	clr	a
      0017C4 B5*29 02         [24] 5454 	cjne	a,_currAddr0,00260$
      0017C7 05*2A            [12] 5455 	inc	(_currAddr0 + 1)
      0017C9                       5456 00260$:
                                   5457 ;	ecen4330lab7.c:1646: for(j = 0; j < dataType; j++){
      0017C9 0C               [12] 5458 	inc	r4
      0017CA BC 00 C5         [24] 5459 	cjne	r4,#0x00,00138$
      0017CD 0D               [12] 5460 	inc	r5
      0017CE 80 C2            [24] 5461 	sjmp	00138$
      0017D0                       5462 00101$:
                                   5463 ;	ecen4330lab7.c:1650: LCD_string_write("\n");
      0017D0 90r08r0C         [24] 5464 	mov	dptr,#___str_34
      0017D3 75 F0 80         [24] 5465 	mov	b,#0x80
      0017D6 C0 07            [24] 5466 	push	ar7
      0017D8 C0 06            [24] 5467 	push	ar6
      0017DA 12r0Ar19         [24] 5468 	lcall	_LCD_string_write
      0017DD D0 06            [24] 5469 	pop	ar6
      0017DF D0 07            [24] 5470 	pop	ar7
                                   5471 ;	ecen4330lab7.c:1651: dataSize--;
      0017E1 15*1B            [12] 5472 	dec	_dataSize
      0017E3 74 FF            [12] 5473 	mov	a,#0xff
      0017E5 B5*1B 02         [24] 5474 	cjne	a,_dataSize,00262$
      0017E8 15*1C            [12] 5475 	dec	(_dataSize + 1)
      0017EA                       5476 00262$:
                                   5477 ;	ecen4330lab7.c:1643: for(i = 0; i < 10; i++){
      0017EA 0E               [12] 5478 	inc	r6
      0017EB BE 00 01         [24] 5479 	cjne	r6,#0x00,00263$
      0017EE 0F               [12] 5480 	inc	r7
      0017EF                       5481 00263$:
      0017EF C3               [12] 5482 	clr	c
      0017F0 EE               [12] 5483 	mov	a,r6
      0017F1 94 0A            [12] 5484 	subb	a,#0x0a
      0017F3 EF               [12] 5485 	mov	a,r7
      0017F4 64 80            [12] 5486 	xrl	a,#0x80
      0017F6 94 80            [12] 5487 	subb	a,#0x80
      0017F8 50 03            [24] 5488 	jnc	00264$
      0017FA 02r17r74         [24] 5489 	ljmp	00140$
      0017FD                       5490 00264$:
                                   5491 ;	ecen4330lab7.c:1653: currAddr1++;        // Next page
      0017FD 05*2B            [12] 5492 	inc	_currAddr1
      0017FF E4               [12] 5493 	clr	a
      001800 B5*2B 02         [24] 5494 	cjne	a,_currAddr1,00265$
      001803 05*2C            [12] 5495 	inc	(_currAddr1 + 1)
      001805                       5496 00265$:
      001805 02r19r6D         [24] 5497 	ljmp	00120$
      001808                       5498 00119$:
                                   5499 ;	ecen4330lab7.c:1657: else if(dataSize > 0 && dataSize < 10){
      001808 E5*1B            [12] 5500 	mov	a,_dataSize
      00180A 45*1C            [12] 5501 	orl	a,(_dataSize + 1)
      00180C 70 03            [24] 5502 	jnz	00266$
      00180E 02r18rF7         [24] 5503 	ljmp	00115$
      001811                       5504 00266$:
      001811 C3               [12] 5505 	clr	c
      001812 E5*1B            [12] 5506 	mov	a,_dataSize
      001814 94 0A            [12] 5507 	subb	a,#0x0a
      001816 E5*1C            [12] 5508 	mov	a,(_dataSize + 1)
      001818 94 00            [12] 5509 	subb	a,#0x00
      00181A 40 03            [24] 5510 	jc	00267$
      00181C 02r18rF7         [24] 5511 	ljmp	00115$
      00181F                       5512 00267$:
                                   5513 ;	ecen4330lab7.c:1658: addr2 = dataSize;
      00181F 85*1B*25         [24] 5514 	mov	_addr2,_dataSize
      001822 85*1C*26         [24] 5515 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5516 ;	ecen4330lab7.c:1660: while(dataSize > 0){
      001825                       5517 00104$:
      001825 E5*1B            [12] 5518 	mov	a,_dataSize
      001827 45*1C            [12] 5519 	orl	a,(_dataSize + 1)
      001829 60 60            [24] 5520 	jz	00106$
                                   5521 ;	ecen4330lab7.c:1661: HEXtoASCII_16write(currAddr0);
      00182B 85*29 82         [24] 5522 	mov	dpl,_currAddr0
      00182E 85*2A 83         [24] 5523 	mov	dph,(_currAddr0 + 1)
      001831 12r0CrC6         [24] 5524 	lcall	_HEXtoASCII_16write
                                   5525 ;	ecen4330lab7.c:1662: LCD_string_write(": 0x");
      001834 90r06r34         [24] 5526 	mov	dptr,#___str_15
      001837 75 F0 80         [24] 5527 	mov	b,#0x80
      00183A 12r0Ar19         [24] 5528 	lcall	_LCD_string_write
                                   5529 ;	ecen4330lab7.c:1663: for(j = 0; j < dataType; j++){
      00183D 7E 00            [12] 5530 	mov	r6,#0x00
      00183F 7F 00            [12] 5531 	mov	r7,#0x00
      001841                       5532 00143$:
      001841 AC*1A            [24] 5533 	mov	r4,_dataType
      001843 7D 00            [12] 5534 	mov	r5,#0x00
      001845 C3               [12] 5535 	clr	c
      001846 EE               [12] 5536 	mov	a,r6
      001847 9C               [12] 5537 	subb	a,r4
      001848 EF               [12] 5538 	mov	a,r7
      001849 64 80            [12] 5539 	xrl	a,#0x80
      00184B 8D F0            [24] 5540 	mov	b,r5
      00184D 63 F0 80         [24] 5541 	xrl	b,#0x80
      001850 95 F0            [12] 5542 	subb	a,b
      001852 50 23            [24] 5543 	jnc	00103$
                                   5544 ;	ecen4330lab7.c:1664: HEXtoASCII_8write(RAMread(currAddr0));
      001854 85*29 82         [24] 5545 	mov	dpl,_currAddr0
      001857 85*2A 83         [24] 5546 	mov	dph,(_currAddr0 + 1)
      00185A C0 07            [24] 5547 	push	ar7
      00185C C0 06            [24] 5548 	push	ar6
      00185E 12r0Dr9A         [24] 5549 	lcall	_RAMread
      001861 12r0Cr89         [24] 5550 	lcall	_HEXtoASCII_8write
      001864 D0 06            [24] 5551 	pop	ar6
      001866 D0 07            [24] 5552 	pop	ar7
                                   5553 ;	ecen4330lab7.c:1665: currAddr0++;
      001868 05*29            [12] 5554 	inc	_currAddr0
      00186A E4               [12] 5555 	clr	a
      00186B B5*29 02         [24] 5556 	cjne	a,_currAddr0,00270$
      00186E 05*2A            [12] 5557 	inc	(_currAddr0 + 1)
      001870                       5558 00270$:
                                   5559 ;	ecen4330lab7.c:1663: for(j = 0; j < dataType; j++){
      001870 0E               [12] 5560 	inc	r6
      001871 BE 00 CD         [24] 5561 	cjne	r6,#0x00,00143$
      001874 0F               [12] 5562 	inc	r7
      001875 80 CA            [24] 5563 	sjmp	00143$
      001877                       5564 00103$:
                                   5565 ;	ecen4330lab7.c:1667: LCD_string_write("\n");
      001877 90r08r0C         [24] 5566 	mov	dptr,#___str_34
      00187A 75 F0 80         [24] 5567 	mov	b,#0x80
      00187D 12r0Ar19         [24] 5568 	lcall	_LCD_string_write
                                   5569 ;	ecen4330lab7.c:1668: dataSize--;
      001880 15*1B            [12] 5570 	dec	_dataSize
      001882 74 FF            [12] 5571 	mov	a,#0xff
      001884 B5*1B 02         [24] 5572 	cjne	a,_dataSize,00272$
      001887 15*1C            [12] 5573 	dec	(_dataSize + 1)
      001889                       5574 00272$:
      001889 80 9A            [24] 5575 	sjmp	00104$
      00188B                       5576 00106$:
                                   5577 ;	ecen4330lab7.c:1670: if(addr3 > 0){
      00188B E5*27            [12] 5578 	mov	a,_addr3
      00188D 45*28            [12] 5579 	orl	a,(_addr3 + 1)
      00188F 60 5C            [24] 5580 	jz	00109$
                                   5581 ;	ecen4330lab7.c:1671: HEXtoASCII_16write(currAddr0);
      001891 85*29 82         [24] 5582 	mov	dpl,_currAddr0
      001894 85*2A 83         [24] 5583 	mov	dph,(_currAddr0 + 1)
      001897 12r0CrC6         [24] 5584 	lcall	_HEXtoASCII_16write
                                   5585 ;	ecen4330lab7.c:1672: LCD_string_write(": 0x");
      00189A 90r06r34         [24] 5586 	mov	dptr,#___str_15
      00189D 75 F0 80         [24] 5587 	mov	b,#0x80
      0018A0 12r0Ar19         [24] 5588 	lcall	_LCD_string_write
                                   5589 ;	ecen4330lab7.c:1673: for(j = 0; j < addr3; j++){
      0018A3 7E 00            [12] 5590 	mov	r6,#0x00
      0018A5 7F 00            [12] 5591 	mov	r7,#0x00
      0018A7                       5592 00146$:
      0018A7 8E 04            [24] 5593 	mov	ar4,r6
      0018A9 8F 05            [24] 5594 	mov	ar5,r7
      0018AB C3               [12] 5595 	clr	c
      0018AC EC               [12] 5596 	mov	a,r4
      0018AD 95*27            [12] 5597 	subb	a,_addr3
      0018AF ED               [12] 5598 	mov	a,r5
      0018B0 95*28            [12] 5599 	subb	a,(_addr3 + 1)
      0018B2 50 23            [24] 5600 	jnc	00107$
                                   5601 ;	ecen4330lab7.c:1674: HEXtoASCII_8write(RAMread(currAddr0));
      0018B4 85*29 82         [24] 5602 	mov	dpl,_currAddr0
      0018B7 85*2A 83         [24] 5603 	mov	dph,(_currAddr0 + 1)
      0018BA C0 07            [24] 5604 	push	ar7
      0018BC C0 06            [24] 5605 	push	ar6
      0018BE 12r0Dr9A         [24] 5606 	lcall	_RAMread
      0018C1 12r0Cr89         [24] 5607 	lcall	_HEXtoASCII_8write
      0018C4 D0 06            [24] 5608 	pop	ar6
      0018C6 D0 07            [24] 5609 	pop	ar7
                                   5610 ;	ecen4330lab7.c:1675: currAddr0++;
      0018C8 05*29            [12] 5611 	inc	_currAddr0
      0018CA E4               [12] 5612 	clr	a
      0018CB B5*29 02         [24] 5613 	cjne	a,_currAddr0,00275$
      0018CE 05*2A            [12] 5614 	inc	(_currAddr0 + 1)
      0018D0                       5615 00275$:
                                   5616 ;	ecen4330lab7.c:1673: for(j = 0; j < addr3; j++){
      0018D0 0E               [12] 5617 	inc	r6
      0018D1 BE 00 D3         [24] 5618 	cjne	r6,#0x00,00146$
      0018D4 0F               [12] 5619 	inc	r7
      0018D5 80 D0            [24] 5620 	sjmp	00146$
      0018D7                       5621 00107$:
                                   5622 ;	ecen4330lab7.c:1677: currAddr0 -= addr3;
      0018D7 E5*29            [12] 5623 	mov	a,_currAddr0
      0018D9 C3               [12] 5624 	clr	c
      0018DA 95*27            [12] 5625 	subb	a,_addr3
      0018DC F5*29            [12] 5626 	mov	_currAddr0,a
      0018DE E5*2A            [12] 5627 	mov	a,(_currAddr0 + 1)
      0018E0 95*28            [12] 5628 	subb	a,(_addr3 + 1)
      0018E2 F5*2A            [12] 5629 	mov	(_currAddr0 + 1),a
                                   5630 ;	ecen4330lab7.c:1678: LCD_string_write("\n");
      0018E4 90r08r0C         [24] 5631 	mov	dptr,#___str_34
      0018E7 75 F0 80         [24] 5632 	mov	b,#0x80
      0018EA 12r0Ar19         [24] 5633 	lcall	_LCD_string_write
      0018ED                       5634 00109$:
                                   5635 ;	ecen4330lab7.c:1680: currAddr1++; 
      0018ED 05*2B            [12] 5636 	inc	_currAddr1
      0018EF E4               [12] 5637 	clr	a
      0018F0 B5*2B 7A         [24] 5638 	cjne	a,_currAddr1,00120$
      0018F3 05*2C            [12] 5639 	inc	(_currAddr1 + 1)
      0018F5 80 76            [24] 5640 	sjmp	00120$
      0018F7                       5641 00115$:
                                   5642 ;	ecen4330lab7.c:1683: else if(dataSize == 0 && addr3 > 0){
      0018F7 E5*1B            [12] 5643 	mov	a,_dataSize
      0018F9 45*1C            [12] 5644 	orl	a,(_dataSize + 1)
      0018FB 70 70            [24] 5645 	jnz	00120$
      0018FD E5*27            [12] 5646 	mov	a,_addr3
      0018FF 45*28            [12] 5647 	orl	a,(_addr3 + 1)
      001901 60 6A            [24] 5648 	jz	00120$
                                   5649 ;	ecen4330lab7.c:1684: addr2 = dataSize;
      001903 85*1B*25         [24] 5650 	mov	_addr2,_dataSize
      001906 85*1C*26         [24] 5651 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5652 ;	ecen4330lab7.c:1685: HEXtoASCII_16write(currAddr0);
      001909 85*29 82         [24] 5653 	mov	dpl,_currAddr0
      00190C 85*2A 83         [24] 5654 	mov	dph,(_currAddr0 + 1)
      00190F 12r0CrC6         [24] 5655 	lcall	_HEXtoASCII_16write
                                   5656 ;	ecen4330lab7.c:1686: LCD_string_write(": 0x");
      001912 90r06r34         [24] 5657 	mov	dptr,#___str_15
      001915 75 F0 80         [24] 5658 	mov	b,#0x80
      001918 12r0Ar19         [24] 5659 	lcall	_LCD_string_write
                                   5660 ;	ecen4330lab7.c:1687: for(j = 0; j < addr3; j++){
      00191B 7E 00            [12] 5661 	mov	r6,#0x00
      00191D 7F 00            [12] 5662 	mov	r7,#0x00
      00191F                       5663 00149$:
      00191F 8E 04            [24] 5664 	mov	ar4,r6
      001921 8F 05            [24] 5665 	mov	ar5,r7
      001923 C3               [12] 5666 	clr	c
      001924 EC               [12] 5667 	mov	a,r4
      001925 95*27            [12] 5668 	subb	a,_addr3
      001927 ED               [12] 5669 	mov	a,r5
      001928 95*28            [12] 5670 	subb	a,(_addr3 + 1)
      00192A 50 23            [24] 5671 	jnc	00110$
                                   5672 ;	ecen4330lab7.c:1688: HEXtoASCII_8write(RAMread(currAddr0));
      00192C 85*29 82         [24] 5673 	mov	dpl,_currAddr0
      00192F 85*2A 83         [24] 5674 	mov	dph,(_currAddr0 + 1)
      001932 C0 07            [24] 5675 	push	ar7
      001934 C0 06            [24] 5676 	push	ar6
      001936 12r0Dr9A         [24] 5677 	lcall	_RAMread
      001939 12r0Cr89         [24] 5678 	lcall	_HEXtoASCII_8write
      00193C D0 06            [24] 5679 	pop	ar6
      00193E D0 07            [24] 5680 	pop	ar7
                                   5681 ;	ecen4330lab7.c:1689: currAddr0++;
      001940 05*29            [12] 5682 	inc	_currAddr0
      001942 E4               [12] 5683 	clr	a
      001943 B5*29 02         [24] 5684 	cjne	a,_currAddr0,00281$
      001946 05*2A            [12] 5685 	inc	(_currAddr0 + 1)
      001948                       5686 00281$:
                                   5687 ;	ecen4330lab7.c:1687: for(j = 0; j < addr3; j++){
      001948 0E               [12] 5688 	inc	r6
      001949 BE 00 D3         [24] 5689 	cjne	r6,#0x00,00149$
      00194C 0F               [12] 5690 	inc	r7
      00194D 80 D0            [24] 5691 	sjmp	00149$
      00194F                       5692 00110$:
                                   5693 ;	ecen4330lab7.c:1691: LCD_string_write("\n");
      00194F 90r08r0C         [24] 5694 	mov	dptr,#___str_34
      001952 75 F0 80         [24] 5695 	mov	b,#0x80
      001955 12r0Ar19         [24] 5696 	lcall	_LCD_string_write
                                   5697 ;	ecen4330lab7.c:1692: currAddr1++; 
      001958 05*2B            [12] 5698 	inc	_currAddr1
      00195A E4               [12] 5699 	clr	a
      00195B B5*2B 02         [24] 5700 	cjne	a,_currAddr1,00283$
      00195E 05*2C            [12] 5701 	inc	(_currAddr1 + 1)
      001960                       5702 00283$:
                                   5703 ;	ecen4330lab7.c:1693: currAddr0 -= addr3;
      001960 E5*29            [12] 5704 	mov	a,_currAddr0
      001962 C3               [12] 5705 	clr	c
      001963 95*27            [12] 5706 	subb	a,_addr3
      001965 F5*29            [12] 5707 	mov	_currAddr0,a
      001967 E5*2A            [12] 5708 	mov	a,(_currAddr0 + 1)
      001969 95*28            [12] 5709 	subb	a,(_addr3 + 1)
      00196B F5*2A            [12] 5710 	mov	(_currAddr0 + 1),a
      00196D                       5711 00120$:
                                   5712 ;	ecen4330lab7.c:1697: setCursor(0, 250);
      00196D 75*00 FA         [24] 5713 	mov	_setCursor_PARM_2,#0xfa
      001970 75*01 00         [24] 5714 	mov	(_setCursor_PARM_2 + 1),#0x00
      001973 90 00 00         [24] 5715 	mov	dptr,#0x0000
      001976 12r03r1D         [24] 5716 	lcall	_setCursor
                                   5717 ;	ecen4330lab7.c:1698: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001979 90r08r0E         [24] 5718 	mov	dptr,#___str_35
      00197C 75 F0 80         [24] 5719 	mov	b,#0x80
      00197F 12r0Ar19         [24] 5720 	lcall	_LCD_string_write
                                   5721 ;	ecen4330lab7.c:1699: HEXtoASCII_16write(currAddr1);
      001982 85*2B 82         [24] 5722 	mov	dpl,_currAddr1
      001985 85*2C 83         [24] 5723 	mov	dph,(_currAddr1 + 1)
      001988 12r0CrC6         [24] 5724 	lcall	_HEXtoASCII_16write
                                   5725 ;	ecen4330lab7.c:1700: key = keyDetect();
      00198B 12r0Ar58         [24] 5726 	lcall	_keyDetect
      00198E 85 82*16         [24] 5727 	mov	_key,dpl
                                   5728 ;	ecen4330lab7.c:1701: switch (key)
      001991 74 30            [12] 5729 	mov	a,#0x30
      001993 B5*16 02         [24] 5730 	cjne	a,_key,00284$
      001996 80 12            [24] 5731 	sjmp	00121$
      001998                       5732 00284$:
      001998 74 31            [12] 5733 	mov	a,#0x31
      00199A B5*16 02         [24] 5734 	cjne	a,_key,00285$
      00199D 80 65            [24] 5735 	sjmp	00125$
      00199F                       5736 00285$:
      00199F 74 45            [12] 5737 	mov	a,#0x45
      0019A1 B5*16 03         [24] 5738 	cjne	a,_key,00286$
      0019A4 02r1ArA1         [24] 5739 	ljmp	00129$
      0019A7                       5740 00286$:
      0019A7 02r1ArB8         [24] 5741 	ljmp	00130$
                                   5742 ;	ecen4330lab7.c:1705: case '0':
      0019AA                       5743 00121$:
                                   5744 ;	ecen4330lab7.c:1706: validInput = 1;
      0019AA 75*1D 01         [24] 5745 	mov	_validInput,#0x01
                                   5746 ;	ecen4330lab7.c:1709: if(dataSize > 0){
      0019AD E5*1B            [12] 5747 	mov	a,_dataSize
      0019AF 45*1C            [12] 5748 	orl	a,(_dataSize + 1)
      0019B1 60 06            [24] 5749 	jz	00123$
                                   5750 ;	ecen4330lab7.c:1710: dataEnd = 0;
      0019B3 75*1E 00         [24] 5751 	mov	_dataEnd,#0x00
      0019B6 02r1ArFC         [24] 5752 	ljmp	00135$
      0019B9                       5753 00123$:
                                   5754 ;	ecen4330lab7.c:1716: dataEnd = 0;
      0019B9 75*1E 00         [24] 5755 	mov	_dataEnd,#0x00
                                   5756 ;	ecen4330lab7.c:1717: currAddr0 -= (addr2 * dataType); // 1st address of previous page displayed
      0019BC 85*1A*00         [24] 5757 	mov	__mulint_PARM_2,_dataType
      0019BF 75*01 00         [24] 5758 	mov	(__mulint_PARM_2 + 1),#0x00
      0019C2 85*25 82         [24] 5759 	mov	dpl,_addr2
      0019C5 85*26 83         [24] 5760 	mov	dph,(_addr2 + 1)
      0019C8 12r00r00         [24] 5761 	lcall	__mulint
      0019CB AE 82            [24] 5762 	mov	r6,dpl
      0019CD AF 83            [24] 5763 	mov	r7,dph
      0019CF E5*29            [12] 5764 	mov	a,_currAddr0
      0019D1 C3               [12] 5765 	clr	c
      0019D2 9E               [12] 5766 	subb	a,r6
      0019D3 F5*29            [12] 5767 	mov	_currAddr0,a
      0019D5 E5*2A            [12] 5768 	mov	a,(_currAddr0 + 1)
      0019D7 9F               [12] 5769 	subb	a,r7
      0019D8 F5*2A            [12] 5770 	mov	(_currAddr0 + 1),a
                                   5771 ;	ecen4330lab7.c:1718: dataSize += addr2;  // restore data size of previous page
      0019DA E5*25            [12] 5772 	mov	a,_addr2
      0019DC 25*1B            [12] 5773 	add	a,_dataSize
      0019DE F5*1B            [12] 5774 	mov	_dataSize,a
      0019E0 E5*26            [12] 5775 	mov	a,(_addr2 + 1)
      0019E2 35*1C            [12] 5776 	addc	a,(_dataSize + 1)
      0019E4 F5*1C            [12] 5777 	mov	(_dataSize + 1),a
                                   5778 ;	ecen4330lab7.c:1719: currAddr1--;
      0019E6 15*2B            [12] 5779 	dec	_currAddr1
      0019E8 74 FF            [12] 5780 	mov	a,#0xff
      0019EA B5*2B 02         [24] 5781 	cjne	a,_currAddr1,00288$
      0019ED 15*2C            [12] 5782 	dec	(_currAddr1 + 1)
      0019EF                       5783 00288$:
                                   5784 ;	ecen4330lab7.c:1720: resetLCD();
      0019EF 12r0DrAD         [24] 5785 	lcall	_resetLCD
                                   5786 ;	ecen4330lab7.c:1721: LCD_string_write("\nEnd of Data.");
      0019F2 90r08r3F         [24] 5787 	mov	dptr,#___str_36
      0019F5 75 F0 80         [24] 5788 	mov	b,#0x80
      0019F8 12r0Ar19         [24] 5789 	lcall	_LCD_string_write
                                   5790 ;	ecen4330lab7.c:1722: delay(200);
      0019FB 90 00 C8         [24] 5791 	mov	dptr,#0x00c8
      0019FE 12r00r79         [24] 5792 	lcall	_delay
                                   5793 ;	ecen4330lab7.c:1724: break;
      001A01 02r1ArFC         [24] 5794 	ljmp	00135$
                                   5795 ;	ecen4330lab7.c:1727: case '1':
      001A04                       5796 00125$:
                                   5797 ;	ecen4330lab7.c:1730: if(currAddr1 > 1){
      001A04 C3               [12] 5798 	clr	c
      001A05 74 01            [12] 5799 	mov	a,#0x01
      001A07 95*2B            [12] 5800 	subb	a,_currAddr1
      001A09 E4               [12] 5801 	clr	a
      001A0A 95*2C            [12] 5802 	subb	a,(_currAddr1 + 1)
      001A0C 50 49            [24] 5803 	jnc	00127$
                                   5804 ;	ecen4330lab7.c:1731: dataEnd = 0;
      001A0E 75*1E 00         [24] 5805 	mov	_dataEnd,#0x00
                                   5806 ;	ecen4330lab7.c:1732: currAddr0 -= ((addr2 + 10) * dataType);
      001A11 74 0A            [12] 5807 	mov	a,#0x0a
      001A13 25*25            [12] 5808 	add	a,_addr2
      001A15 FE               [12] 5809 	mov	r6,a
      001A16 E4               [12] 5810 	clr	a
      001A17 35*26            [12] 5811 	addc	a,(_addr2 + 1)
      001A19 FF               [12] 5812 	mov	r7,a
      001A1A 85*1A*00         [24] 5813 	mov	__mulint_PARM_2,_dataType
      001A1D 75*01 00         [24] 5814 	mov	(__mulint_PARM_2 + 1),#0x00
      001A20 8E 82            [24] 5815 	mov	dpl,r6
      001A22 8F 83            [24] 5816 	mov	dph,r7
      001A24 C0 07            [24] 5817 	push	ar7
      001A26 C0 06            [24] 5818 	push	ar6
      001A28 12r00r00         [24] 5819 	lcall	__mulint
      001A2B AC 82            [24] 5820 	mov	r4,dpl
      001A2D AD 83            [24] 5821 	mov	r5,dph
      001A2F D0 06            [24] 5822 	pop	ar6
      001A31 D0 07            [24] 5823 	pop	ar7
      001A33 E5*29            [12] 5824 	mov	a,_currAddr0
      001A35 C3               [12] 5825 	clr	c
      001A36 9C               [12] 5826 	subb	a,r4
      001A37 F5*29            [12] 5827 	mov	_currAddr0,a
      001A39 E5*2A            [12] 5828 	mov	a,(_currAddr0 + 1)
      001A3B 9D               [12] 5829 	subb	a,r5
      001A3C F5*2A            [12] 5830 	mov	(_currAddr0 + 1),a
                                   5831 ;	ecen4330lab7.c:1733: currAddr1 -= 2;
      001A3E E5*2B            [12] 5832 	mov	a,_currAddr1
      001A40 24 FE            [12] 5833 	add	a,#0xfe
      001A42 F5*2B            [12] 5834 	mov	_currAddr1,a
      001A44 E5*2C            [12] 5835 	mov	a,(_currAddr1 + 1)
      001A46 34 FF            [12] 5836 	addc	a,#0xff
      001A48 F5*2C            [12] 5837 	mov	(_currAddr1 + 1),a
                                   5838 ;	ecen4330lab7.c:1734: dataSize += (addr2 + 10);
      001A4A EE               [12] 5839 	mov	a,r6
      001A4B 25*1B            [12] 5840 	add	a,_dataSize
      001A4D F5*1B            [12] 5841 	mov	_dataSize,a
      001A4F EF               [12] 5842 	mov	a,r7
      001A50 35*1C            [12] 5843 	addc	a,(_dataSize + 1)
      001A52 F5*1C            [12] 5844 	mov	(_dataSize + 1),a
      001A54 02r1ArFC         [24] 5845 	ljmp	00135$
      001A57                       5846 00127$:
                                   5847 ;	ecen4330lab7.c:1739: dataEnd = 0;
      001A57 75*1E 00         [24] 5848 	mov	_dataEnd,#0x00
                                   5849 ;	ecen4330lab7.c:1740: resetLCD();
      001A5A 12r0DrAD         [24] 5850 	lcall	_resetLCD
                                   5851 ;	ecen4330lab7.c:1741: LCD_string_write("End of Data");
      001A5D 90r08r4D         [24] 5852 	mov	dptr,#___str_37
      001A60 75 F0 80         [24] 5853 	mov	b,#0x80
      001A63 12r0Ar19         [24] 5854 	lcall	_LCD_string_write
                                   5855 ;	ecen4330lab7.c:1742: delay(200);
      001A66 90 00 C8         [24] 5856 	mov	dptr,#0x00c8
      001A69 12r00r79         [24] 5857 	lcall	_delay
                                   5858 ;	ecen4330lab7.c:1743: currAddr0 -= (addr2 * dataType);
      001A6C 85*1A*00         [24] 5859 	mov	__mulint_PARM_2,_dataType
      001A6F 75*01 00         [24] 5860 	mov	(__mulint_PARM_2 + 1),#0x00
      001A72 85*25 82         [24] 5861 	mov	dpl,_addr2
      001A75 85*26 83         [24] 5862 	mov	dph,(_addr2 + 1)
      001A78 12r00r00         [24] 5863 	lcall	__mulint
      001A7B AE 82            [24] 5864 	mov	r6,dpl
      001A7D AF 83            [24] 5865 	mov	r7,dph
      001A7F E5*29            [12] 5866 	mov	a,_currAddr0
      001A81 C3               [12] 5867 	clr	c
      001A82 9E               [12] 5868 	subb	a,r6
      001A83 F5*29            [12] 5869 	mov	_currAddr0,a
      001A85 E5*2A            [12] 5870 	mov	a,(_currAddr0 + 1)
      001A87 9F               [12] 5871 	subb	a,r7
      001A88 F5*2A            [12] 5872 	mov	(_currAddr0 + 1),a
                                   5873 ;	ecen4330lab7.c:1744: currAddr1--;
      001A8A 15*2B            [12] 5874 	dec	_currAddr1
      001A8C 74 FF            [12] 5875 	mov	a,#0xff
      001A8E B5*2B 02         [24] 5876 	cjne	a,_currAddr1,00290$
      001A91 15*2C            [12] 5877 	dec	(_currAddr1 + 1)
      001A93                       5878 00290$:
                                   5879 ;	ecen4330lab7.c:1745: dataSize += addr2;
      001A93 E5*25            [12] 5880 	mov	a,_addr2
      001A95 25*1B            [12] 5881 	add	a,_dataSize
      001A97 F5*1B            [12] 5882 	mov	_dataSize,a
      001A99 E5*26            [12] 5883 	mov	a,(_addr2 + 1)
      001A9B 35*1C            [12] 5884 	addc	a,(_dataSize + 1)
      001A9D F5*1C            [12] 5885 	mov	(_dataSize + 1),a
                                   5886 ;	ecen4330lab7.c:1747: break;
                                   5887 ;	ecen4330lab7.c:1750: case 'E':
      001A9F 80 5B            [24] 5888 	sjmp	00135$
      001AA1                       5889 00129$:
                                   5890 ;	ecen4330lab7.c:1751: resetLCD();
      001AA1 12r0DrAD         [24] 5891 	lcall	_resetLCD
                                   5892 ;	ecen4330lab7.c:1752: LCD_string_write("\nReturning to\nMain Menu.");
      001AA4 90r08r59         [24] 5893 	mov	dptr,#___str_38
      001AA7 75 F0 80         [24] 5894 	mov	b,#0x80
      001AAA 12r0Ar19         [24] 5895 	lcall	_LCD_string_write
                                   5896 ;	ecen4330lab7.c:1753: delay(200);
      001AAD 90 00 C8         [24] 5897 	mov	dptr,#0x00c8
      001AB0 12r00r79         [24] 5898 	lcall	_delay
                                   5899 ;	ecen4330lab7.c:1754: dataEnd = 1;
      001AB3 75*1E 01         [24] 5900 	mov	_dataEnd,#0x01
                                   5901 ;	ecen4330lab7.c:1755: break;
                                   5902 ;	ecen4330lab7.c:1758: default:
      001AB6 80 44            [24] 5903 	sjmp	00135$
      001AB8                       5904 00130$:
                                   5905 ;	ecen4330lab7.c:1759: dataEnd = 0;
      001AB8 75*1E 00         [24] 5906 	mov	_dataEnd,#0x00
                                   5907 ;	ecen4330lab7.c:1760: invalidInput();
      001ABB 12r0DrD5         [24] 5908 	lcall	_invalidInput
                                   5909 ;	ecen4330lab7.c:1761: if(addr2 > 0 ){
      001ABE E5*25            [12] 5910 	mov	a,_addr2
      001AC0 45*26            [12] 5911 	orl	a,(_addr2 + 1)
      001AC2 60 38            [24] 5912 	jz	00135$
                                   5913 ;	ecen4330lab7.c:1762: currAddr0 -= (addr2 * dataType);
      001AC4 85*1A*00         [24] 5914 	mov	__mulint_PARM_2,_dataType
      001AC7 75*01 00         [24] 5915 	mov	(__mulint_PARM_2 + 1),#0x00
      001ACA 85*25 82         [24] 5916 	mov	dpl,_addr2
      001ACD 85*26 83         [24] 5917 	mov	dph,(_addr2 + 1)
      001AD0 12r00r00         [24] 5918 	lcall	__mulint
      001AD3 AE 82            [24] 5919 	mov	r6,dpl
      001AD5 AF 83            [24] 5920 	mov	r7,dph
      001AD7 E5*29            [12] 5921 	mov	a,_currAddr0
      001AD9 C3               [12] 5922 	clr	c
      001ADA 9E               [12] 5923 	subb	a,r6
      001ADB F5*29            [12] 5924 	mov	_currAddr0,a
      001ADD E5*2A            [12] 5925 	mov	a,(_currAddr0 + 1)
      001ADF 9F               [12] 5926 	subb	a,r7
      001AE0 F5*2A            [12] 5927 	mov	(_currAddr0 + 1),a
                                   5928 ;	ecen4330lab7.c:1763: currAddr1 --;
      001AE2 15*2B            [12] 5929 	dec	_currAddr1
      001AE4 74 FF            [12] 5930 	mov	a,#0xff
      001AE6 B5*2B 02         [24] 5931 	cjne	a,_currAddr1,00292$
      001AE9 15*2C            [12] 5932 	dec	(_currAddr1 + 1)
      001AEB                       5933 00292$:
                                   5934 ;	ecen4330lab7.c:1764: dataSize += addr2;
      001AEB E5*25            [12] 5935 	mov	a,_addr2
      001AED 25*1B            [12] 5936 	add	a,_dataSize
      001AEF F5*1B            [12] 5937 	mov	_dataSize,a
      001AF1 E5*26            [12] 5938 	mov	a,(_addr2 + 1)
      001AF3 35*1C            [12] 5939 	addc	a,(_dataSize + 1)
      001AF5 F5*1C            [12] 5940 	mov	(_dataSize + 1),a
                                   5941 ;	ecen4330lab7.c:1765: addr2 = 0;
      001AF7 E4               [12] 5942 	clr	a
      001AF8 F5*25            [12] 5943 	mov	_addr2,a
      001AFA F5*26            [12] 5944 	mov	(_addr2 + 1),a
                                   5945 ;	ecen4330lab7.c:1768: }
      001AFC                       5946 00135$:
                                   5947 ;	ecen4330lab7.c:1769: } while(dataEnd == 0);
      001AFC E5*1E            [12] 5948 	mov	a,_dataEnd
      001AFE 70 03            [24] 5949 	jnz	00293$
      001B00 02r17r4A         [24] 5950 	ljmp	00134$
      001B03                       5951 00293$:
                                   5952 ;	ecen4330lab7.c:1770: }
      001B03 22               [24] 5953 	ret
                                   5954 ;------------------------------------------------------------
                                   5955 ;Allocation info for local variables in function 'DUMP'
                                   5956 ;------------------------------------------------------------
                                   5957 ;	ecen4330lab7.c:1778: void DUMP(){
                                   5958 ;	-----------------------------------------
                                   5959 ;	 function DUMP
                                   5960 ;	-----------------------------------------
      001B04                       5961 _DUMP:
                                   5962 ;	ecen4330lab7.c:1779: endAddrCalc = 0;
      001B04 E4               [12] 5963 	clr	a
      001B05 F5*34            [12] 5964 	mov	_endAddrCalc,a
      001B07 F5*35            [12] 5965 	mov	(_endAddrCalc + 1),a
      001B09 F5*36            [12] 5966 	mov	(_endAddrCalc + 2),a
      001B0B F5*37            [12] 5967 	mov	(_endAddrCalc + 3),a
                                   5968 ;	ecen4330lab7.c:1780: addr0 = 0;                      // Source Address
      001B0D F5*21            [12] 5969 	mov	_addr0,a
      001B0F F5*22            [12] 5970 	mov	(_addr0 + 1),a
                                   5971 ;	ecen4330lab7.c:1781: addr1 = 0;                      // Source End Address
      001B11 F5*23            [12] 5972 	mov	_addr1,a
      001B13 F5*24            [12] 5973 	mov	(_addr1 + 1),a
                                   5974 ;	ecen4330lab7.c:1782: dataType = 0;                   // Data Type
                                   5975 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001B15 F5*1A            [12] 5976 	mov	_dataType,a
                                   5977 ;	ecen4330lab7.c:1783: dataSize = 0;                   // Data Size
      001B17 F5*1B            [12] 5978 	mov	_dataSize,a
      001B19 F5*1C            [12] 5979 	mov	(_dataSize + 1),a
                                   5980 ;	ecen4330lab7.c:1784: addr3 = 0;						// Remainder
      001B1B F5*27            [12] 5981 	mov	_addr3,a
      001B1D F5*28            [12] 5982 	mov	(_addr3 + 1),a
                                   5983 ;	ecen4330lab7.c:1787: resetLCD();
      001B1F 12r0DrAD         [24] 5984 	lcall	_resetLCD
                                   5985 ;	ecen4330lab7.c:1788: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n  0x____");
      001B22 90r08r72         [24] 5986 	mov	dptr,#___str_39
      001B25 75 F0 80         [24] 5987 	mov	b,#0x80
      001B28 12r0Ar19         [24] 5988 	lcall	_LCD_string_write
                                   5989 ;	ecen4330lab7.c:1789: cursor_x -= 4 * textsize * 6;
      001B2B E5*0C            [12] 5990 	mov	a,_textsize
      001B2D 75 F0 18         [24] 5991 	mov	b,#0x18
      001B30 A4               [48] 5992 	mul	ab
      001B31 FE               [12] 5993 	mov	r6,a
      001B32 AF F0            [24] 5994 	mov	r7,b
      001B34 E5*08            [12] 5995 	mov	a,_cursor_x
      001B36 C3               [12] 5996 	clr	c
      001B37 9E               [12] 5997 	subb	a,r6
      001B38 F5*08            [12] 5998 	mov	_cursor_x,a
      001B3A E5*09            [12] 5999 	mov	a,(_cursor_x + 1)
      001B3C 9F               [12] 6000 	subb	a,r7
      001B3D F5*09            [12] 6001 	mov	(_cursor_x + 1),a
                                   6002 ;	ecen4330lab7.c:1790: inputRead16();                  // Read input
      001B3F 12r0DrFE         [24] 6003 	lcall	_inputRead16
                                   6004 ;	ecen4330lab7.c:1791: addr0 = input16;                // Set starting address
      001B42 85*17*21         [24] 6005 	mov	_addr0,_input16
      001B45 85*18*22         [24] 6006 	mov	(_addr0 + 1),(_input16 + 1)
                                   6007 ;	ecen4330lab7.c:1794: inputDataType();                // Prompt & read input
      001B48 12r0Fr0D         [24] 6008 	lcall	_inputDataType
                                   6009 ;	ecen4330lab7.c:1797: resetLCD();
      001B4B 12r0DrAD         [24] 6010 	lcall	_resetLCD
                                   6011 ;	ecen4330lab7.c:1798: inputDataSize();                // Prompt & read input
      001B4E 12r0FrCA         [24] 6012 	lcall	_inputDataSize
                                   6013 ;	ecen4330lab7.c:1801: endAddrCalc = addr0 + (dataType * dataSize);
      001B51 AE*1A            [24] 6014 	mov	r6,_dataType
      001B53 7F 00            [12] 6015 	mov	r7,#0x00
      001B55 85*1B*00         [24] 6016 	mov	__mulint_PARM_2,_dataSize
      001B58 85*1C*01         [24] 6017 	mov	(__mulint_PARM_2 + 1),(_dataSize + 1)
      001B5B 8E 82            [24] 6018 	mov	dpl,r6
      001B5D 8F 83            [24] 6019 	mov	dph,r7
      001B5F C0 07            [24] 6020 	push	ar7
      001B61 C0 06            [24] 6021 	push	ar6
      001B63 12r00r00         [24] 6022 	lcall	__mulint
      001B66 AC 82            [24] 6023 	mov	r4,dpl
      001B68 AD 83            [24] 6024 	mov	r5,dph
      001B6A D0 06            [24] 6025 	pop	ar6
      001B6C D0 07            [24] 6026 	pop	ar7
      001B6E EC               [12] 6027 	mov	a,r4
      001B6F 25*21            [12] 6028 	add	a,_addr0
      001B71 FA               [12] 6029 	mov	r2,a
      001B72 ED               [12] 6030 	mov	a,r5
      001B73 35*22            [12] 6031 	addc	a,(_addr0 + 1)
      001B75 FB               [12] 6032 	mov	r3,a
      001B76 8A*34            [24] 6033 	mov	_endAddrCalc,r2
      001B78 8B*35            [24] 6034 	mov	(_endAddrCalc + 1),r3
      001B7A 75*36 00         [24] 6035 	mov	(_endAddrCalc + 2),#0x00
      001B7D 75*37 00         [24] 6036 	mov	(_endAddrCalc + 3),#0x00
                                   6037 ;	ecen4330lab7.c:1802: if(endAddrCalc < addr0){ // RAM overflow
      001B80 A8*21            [24] 6038 	mov	r0,_addr0
      001B82 A9*22            [24] 6039 	mov	r1,(_addr0 + 1)
      001B84 7A 00            [12] 6040 	mov	r2,#0x00
      001B86 7B 00            [12] 6041 	mov	r3,#0x00
      001B88 C3               [12] 6042 	clr	c
      001B89 E5*34            [12] 6043 	mov	a,_endAddrCalc
      001B8B 98               [12] 6044 	subb	a,r0
      001B8C E5*35            [12] 6045 	mov	a,(_endAddrCalc + 1)
      001B8E 99               [12] 6046 	subb	a,r1
      001B8F E5*36            [12] 6047 	mov	a,(_endAddrCalc + 2)
      001B91 9A               [12] 6048 	subb	a,r2
      001B92 E5*37            [12] 6049 	mov	a,(_endAddrCalc + 3)
      001B94 9B               [12] 6050 	subb	a,r3
      001B95 50 08            [24] 6051 	jnc	00102$
                                   6052 ;	ecen4330lab7.c:1803: addr1 = 0xFFFF;             // Set end address
      001B97 75*23 FF         [24] 6053 	mov	_addr1,#0xff
      001B9A 75*24 FF         [24] 6054 	mov	(_addr1 + 1),#0xff
      001B9D 80 12            [24] 6055 	sjmp	00103$
      001B9F                       6056 00102$:
                                   6057 ;	ecen4330lab7.c:1806: addr1 = addr0 + (dataType * dataSize) - 1;
      001B9F EC               [12] 6058 	mov	a,r4
      001BA0 25*21            [12] 6059 	add	a,_addr0
      001BA2 FC               [12] 6060 	mov	r4,a
      001BA3 ED               [12] 6061 	mov	a,r5
      001BA4 35*22            [12] 6062 	addc	a,(_addr0 + 1)
      001BA6 FD               [12] 6063 	mov	r5,a
      001BA7 EC               [12] 6064 	mov	a,r4
      001BA8 24 FF            [12] 6065 	add	a,#0xff
      001BAA F5*23            [12] 6066 	mov	_addr1,a
      001BAC ED               [12] 6067 	mov	a,r5
      001BAD 34 FF            [12] 6068 	addc	a,#0xff
      001BAF F5*24            [12] 6069 	mov	(_addr1 + 1),a
      001BB1                       6070 00103$:
                                   6071 ;	ecen4330lab7.c:1808: dataSize = ((addr1 - addr0) + 1) / dataType;   // Recalculate data size
      001BB1 E5*23            [12] 6072 	mov	a,_addr1
      001BB3 C3               [12] 6073 	clr	c
      001BB4 95*21            [12] 6074 	subb	a,_addr0
      001BB6 FC               [12] 6075 	mov	r4,a
      001BB7 E5*24            [12] 6076 	mov	a,(_addr1 + 1)
      001BB9 95*22            [12] 6077 	subb	a,(_addr0 + 1)
      001BBB FD               [12] 6078 	mov	r5,a
      001BBC 0C               [12] 6079 	inc	r4
      001BBD BC 00 01         [24] 6080 	cjne	r4,#0x00,00111$
      001BC0 0D               [12] 6081 	inc	r5
      001BC1                       6082 00111$:
      001BC1 8E*00            [24] 6083 	mov	__divuint_PARM_2,r6
      001BC3 8F*01            [24] 6084 	mov	(__divuint_PARM_2 + 1),r7
      001BC5 8C 82            [24] 6085 	mov	dpl,r4
      001BC7 8D 83            [24] 6086 	mov	dph,r5
      001BC9 C0 07            [24] 6087 	push	ar7
      001BCB C0 06            [24] 6088 	push	ar6
      001BCD C0 05            [24] 6089 	push	ar5
      001BCF C0 04            [24] 6090 	push	ar4
      001BD1 12r00r00         [24] 6091 	lcall	__divuint
      001BD4 85 82*1B         [24] 6092 	mov	_dataSize,dpl
      001BD7 85 83*1C         [24] 6093 	mov	(_dataSize + 1),dph
      001BDA D0 04            [24] 6094 	pop	ar4
      001BDC D0 05            [24] 6095 	pop	ar5
      001BDE D0 06            [24] 6096 	pop	ar6
      001BE0 D0 07            [24] 6097 	pop	ar7
                                   6098 ;	ecen4330lab7.c:1809: addr3 = ((addr1 - addr0) + 1) % dataType;
      001BE2 8E*00            [24] 6099 	mov	__moduint_PARM_2,r6
      001BE4 8F*01            [24] 6100 	mov	(__moduint_PARM_2 + 1),r7
      001BE6 8C 82            [24] 6101 	mov	dpl,r4
      001BE8 8D 83            [24] 6102 	mov	dph,r5
      001BEA 12r00r00         [24] 6103 	lcall	__moduint
      001BED 85 82*27         [24] 6104 	mov	_addr3,dpl
      001BF0 85 83*28         [24] 6105 	mov	(_addr3 + 1),dph
                                   6106 ;	ecen4330lab7.c:1828: DUMP_display();                 // Display dump data
                                   6107 ;	ecen4330lab7.c:1829: }
      001BF3 02r17r39         [24] 6108 	ljmp	_DUMP_display
                                   6109 ;------------------------------------------------------------
                                   6110 ;Allocation info for local variables in function 'EDIT_display'
                                   6111 ;------------------------------------------------------------
                                   6112 ;addr                      Allocated to registers r6 r7 
                                   6113 ;------------------------------------------------------------
                                   6114 ;	ecen4330lab7.c:1839: void EDIT_display(unsigned int addr){
                                   6115 ;	-----------------------------------------
                                   6116 ;	 function EDIT_display
                                   6117 ;	-----------------------------------------
      001BF6                       6118 _EDIT_display:
                                   6119 ;	ecen4330lab7.c:1842: data = RAMread(addr);
      001BF6 AE 82            [24] 6120 	mov	r6,dpl
      001BF8 AF 83            [24] 6121 	mov  r7,dph
      001BFA C0 07            [24] 6122 	push	ar7
      001BFC C0 06            [24] 6123 	push	ar6
      001BFE 12r0Dr9A         [24] 6124 	lcall	_RAMread
      001C01 85 82*20         [24] 6125 	mov	_data,dpl
                                   6126 ;	ecen4330lab7.c:1845: resetLCD();
      001C04 12r0DrAD         [24] 6127 	lcall	_resetLCD
                                   6128 ;	ecen4330lab7.c:1846: LCD_string_write("\n");
      001C07 90r08r0C         [24] 6129 	mov	dptr,#___str_34
      001C0A 75 F0 80         [24] 6130 	mov	b,#0x80
      001C0D 12r0Ar19         [24] 6131 	lcall	_LCD_string_write
      001C10 D0 06            [24] 6132 	pop	ar6
      001C12 D0 07            [24] 6133 	pop	ar7
                                   6134 ;	ecen4330lab7.c:1847: HEXtoASCII_16write(addr);
      001C14 8E 82            [24] 6135 	mov	dpl,r6
      001C16 8F 83            [24] 6136 	mov	dph,r7
      001C18 C0 07            [24] 6137 	push	ar7
      001C1A C0 06            [24] 6138 	push	ar6
      001C1C 12r0CrC6         [24] 6139 	lcall	_HEXtoASCII_16write
                                   6140 ;	ecen4330lab7.c:1848: LCD_string_write(": 0x");
      001C1F 90r06r34         [24] 6141 	mov	dptr,#___str_15
      001C22 75 F0 80         [24] 6142 	mov	b,#0x80
      001C25 12r0Ar19         [24] 6143 	lcall	_LCD_string_write
                                   6144 ;	ecen4330lab7.c:1849: HEXtoASCII_8write(data);
      001C28 85*20 82         [24] 6145 	mov	dpl,_data
      001C2B 12r0Cr89         [24] 6146 	lcall	_HEXtoASCII_8write
                                   6147 ;	ecen4330lab7.c:1852: LCD_string_write("\n\nNew value:\n  0x__");
      001C2E 90r08rA0         [24] 6148 	mov	dptr,#___str_40
      001C31 75 F0 80         [24] 6149 	mov	b,#0x80
      001C34 12r0Ar19         [24] 6150 	lcall	_LCD_string_write
                                   6151 ;	ecen4330lab7.c:1853: cursor_x -= 2 * textsize * 6;
      001C37 E5*0C            [12] 6152 	mov	a,_textsize
      001C39 75 F0 0C         [24] 6153 	mov	b,#0x0c
      001C3C A4               [48] 6154 	mul	ab
      001C3D FC               [12] 6155 	mov	r4,a
      001C3E AD F0            [24] 6156 	mov	r5,b
      001C40 E5*08            [12] 6157 	mov	a,_cursor_x
      001C42 C3               [12] 6158 	clr	c
      001C43 9C               [12] 6159 	subb	a,r4
      001C44 F5*08            [12] 6160 	mov	_cursor_x,a
      001C46 E5*09            [12] 6161 	mov	a,(_cursor_x + 1)
      001C48 9D               [12] 6162 	subb	a,r5
      001C49 F5*09            [12] 6163 	mov	(_cursor_x + 1),a
                                   6164 ;	ecen4330lab7.c:1854: inputRead8();
      001C4B 12r0ErB9         [24] 6165 	lcall	_inputRead8
      001C4E D0 06            [24] 6166 	pop	ar6
      001C50 D0 07            [24] 6167 	pop	ar7
                                   6168 ;	ecen4330lab7.c:1855: RAMwrite(addr, input8);
      001C52 85*19*00         [24] 6169 	mov	_RAMwrite_PARM_2,_input8
      001C55 8E 82            [24] 6170 	mov	dpl,r6
      001C57 8F 83            [24] 6171 	mov	dph,r7
      001C59 12r0Dr6B         [24] 6172 	lcall	_RAMwrite
                                   6173 ;	ecen4330lab7.c:1858: LCD_string_write("\n\n\n\n(1) Edit next\nRAM location\n\n");
      001C5C 90r08rB4         [24] 6174 	mov	dptr,#___str_41
      001C5F 75 F0 80         [24] 6175 	mov	b,#0x80
      001C62 12r0Ar19         [24] 6176 	lcall	_LCD_string_write
                                   6177 ;	ecen4330lab7.c:1859: LCD_string_write("(E) End");
      001C65 90r08rD5         [24] 6178 	mov	dptr,#___str_42
      001C68 75 F0 80         [24] 6179 	mov	b,#0x80
                                   6180 ;	ecen4330lab7.c:1860: }
      001C6B 02r0Ar19         [24] 6181 	ljmp	_LCD_string_write
                                   6182 ;------------------------------------------------------------
                                   6183 ;Allocation info for local variables in function 'EDIT'
                                   6184 ;------------------------------------------------------------
                                   6185 ;	ecen4330lab7.c:1872: void EDIT(){
                                   6186 ;	-----------------------------------------
                                   6187 ;	 function EDIT
                                   6188 ;	-----------------------------------------
      001C6E                       6189 _EDIT:
                                   6190 ;	ecen4330lab7.c:1873: dataEnd = 0;
      001C6E 75*1E 00         [24] 6191 	mov	_dataEnd,#0x00
                                   6192 ;	ecen4330lab7.c:1874: scrollEnd = 0;
      001C71 75*1F 00         [24] 6193 	mov	_scrollEnd,#0x00
                                   6194 ;	ecen4330lab7.c:1875: validInput = 0;
      001C74 75*1D 00         [24] 6195 	mov	_validInput,#0x00
                                   6196 ;	ecen4330lab7.c:1878: resetLCD();
      001C77 12r0DrAD         [24] 6197 	lcall	_resetLCD
                                   6198 ;	ecen4330lab7.c:1879: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001C7A 90r07r8C         [24] 6199 	mov	dptr,#___str_26
      001C7D 75 F0 80         [24] 6200 	mov	b,#0x80
      001C80 12r0Ar19         [24] 6201 	lcall	_LCD_string_write
                                   6202 ;	ecen4330lab7.c:1880: cursor_x -= 4 * textsize * 6;
      001C83 E5*0C            [12] 6203 	mov	a,_textsize
      001C85 75 F0 18         [24] 6204 	mov	b,#0x18
      001C88 A4               [48] 6205 	mul	ab
      001C89 FE               [12] 6206 	mov	r6,a
      001C8A AF F0            [24] 6207 	mov	r7,b
      001C8C E5*08            [12] 6208 	mov	a,_cursor_x
      001C8E C3               [12] 6209 	clr	c
      001C8F 9E               [12] 6210 	subb	a,r6
      001C90 F5*08            [12] 6211 	mov	_cursor_x,a
      001C92 E5*09            [12] 6212 	mov	a,(_cursor_x + 1)
      001C94 9F               [12] 6213 	subb	a,r7
      001C95 F5*09            [12] 6214 	mov	(_cursor_x + 1),a
                                   6215 ;	ecen4330lab7.c:1883: inputRead16();
      001C97 12r0DrFE         [24] 6216 	lcall	_inputRead16
                                   6217 ;	ecen4330lab7.c:1886: while(scrollEnd == 0 && dataEnd == 0){
      001C9A                       6218 00112$:
      001C9A E5*1F            [12] 6219 	mov	a,_scrollEnd
      001C9C 70 52            [24] 6220 	jnz	00114$
      001C9E E5*1E            [12] 6221 	mov	a,_dataEnd
      001CA0 70 4E            [24] 6222 	jnz	00114$
                                   6223 ;	ecen4330lab7.c:1889: do
      001CA2                       6224 00108$:
                                   6225 ;	ecen4330lab7.c:1891: EDIT_display(input16);
      001CA2 85*17 82         [24] 6226 	mov	dpl,_input16
      001CA5 85*18 83         [24] 6227 	mov	dph,(_input16 + 1)
      001CA8 12r1BrF6         [24] 6228 	lcall	_EDIT_display
                                   6229 ;	ecen4330lab7.c:1892: key = keyDetect();
      001CAB 12r0Ar58         [24] 6230 	lcall	_keyDetect
      001CAE 85 82*16         [24] 6231 	mov	_key,dpl
                                   6232 ;	ecen4330lab7.c:1894: switch (key)
      001CB1 74 31            [12] 6233 	mov	a,#0x31
      001CB3 B5*16 02         [24] 6234 	cjne	a,_key,00153$
      001CB6 80 07            [24] 6235 	sjmp	00101$
      001CB8                       6236 00153$:
      001CB8 74 45            [12] 6237 	mov	a,#0x45
                                   6238 ;	ecen4330lab7.c:1898: case '1':
      001CBA B5*16 27         [24] 6239 	cjne	a,_key,00106$
      001CBD 80 1D            [24] 6240 	sjmp	00105$
      001CBF                       6241 00101$:
                                   6242 ;	ecen4330lab7.c:1899: validInput = 1;
      001CBF 75*1D 01         [24] 6243 	mov	_validInput,#0x01
                                   6244 ;	ecen4330lab7.c:1902: if(input16 == 0xFFFF){
      001CC2 74 FF            [12] 6245 	mov	a,#0xff
      001CC4 B5*17 08         [24] 6246 	cjne	a,_input16,00103$
      001CC7 B5*18 05         [24] 6247 	cjne	a,(_input16 + 1),00103$
                                   6248 ;	ecen4330lab7.c:1903: scrollEnd = 1;
      001CCA 75*1F 01         [24] 6249 	mov	_scrollEnd,#0x01
      001CCD 80 1B            [24] 6250 	sjmp	00109$
      001CCF                       6251 00103$:
                                   6252 ;	ecen4330lab7.c:1908: input16++;
      001CCF 05*17            [12] 6253 	inc	_input16
      001CD1 E4               [12] 6254 	clr	a
      001CD2 B5*17 02         [24] 6255 	cjne	a,_input16,00157$
      001CD5 05*18            [12] 6256 	inc	(_input16 + 1)
      001CD7                       6257 00157$:
                                   6258 ;	ecen4330lab7.c:1909: scrollEnd = 0;
      001CD7 75*1F 00         [24] 6259 	mov	_scrollEnd,#0x00
                                   6260 ;	ecen4330lab7.c:1911: break;
                                   6261 ;	ecen4330lab7.c:1914: case 'E':
      001CDA 80 0E            [24] 6262 	sjmp	00109$
      001CDC                       6263 00105$:
                                   6264 ;	ecen4330lab7.c:1915: validInput = 1;
      001CDC 75*1D 01         [24] 6265 	mov	_validInput,#0x01
                                   6266 ;	ecen4330lab7.c:1916: dataEnd = 1;
      001CDF 75*1E 01         [24] 6267 	mov	_dataEnd,#0x01
                                   6268 ;	ecen4330lab7.c:1917: break;
                                   6269 ;	ecen4330lab7.c:1920: default:
      001CE2 80 06            [24] 6270 	sjmp	00109$
      001CE4                       6271 00106$:
                                   6272 ;	ecen4330lab7.c:1921: validInput = 0;
      001CE4 75*1D 00         [24] 6273 	mov	_validInput,#0x00
                                   6274 ;	ecen4330lab7.c:1922: invalidInput();
      001CE7 12r0DrD5         [24] 6275 	lcall	_invalidInput
                                   6276 ;	ecen4330lab7.c:1924: }
      001CEA                       6277 00109$:
                                   6278 ;	ecen4330lab7.c:1925: } while (validInput == 0);
      001CEA E5*1D            [12] 6279 	mov	a,_validInput
      001CEC 60 B4            [24] 6280 	jz	00108$
      001CEE 80 AA            [24] 6281 	sjmp	00112$
      001CF0                       6282 00114$:
                                   6283 ;	ecen4330lab7.c:1929: resetLCD();
      001CF0 12r0DrAD         [24] 6284 	lcall	_resetLCD
                                   6285 ;	ecen4330lab7.c:1930: if(scrollEnd == 1){
      001CF3 74 01            [12] 6286 	mov	a,#0x01
      001CF5 B5*1F 14         [24] 6287 	cjne	a,_scrollEnd,00116$
                                   6288 ;	ecen4330lab7.c:1931: setTextColor(RED, BLACK);
      001CF8 E4               [12] 6289 	clr	a
      001CF9 F5*00            [12] 6290 	mov	_setTextColor_PARM_2,a
      001CFB F5*01            [12] 6291 	mov	(_setTextColor_PARM_2 + 1),a
      001CFD 90 F8 00         [24] 6292 	mov	dptr,#0xf800
      001D00 12r03r2A         [24] 6293 	lcall	_setTextColor
                                   6294 ;	ecen4330lab7.c:1932: LCD_string_write("\nEnd of data.\n");
      001D03 90r08rDD         [24] 6295 	mov	dptr,#___str_43
      001D06 75 F0 80         [24] 6296 	mov	b,#0x80
      001D09 12r0Ar19         [24] 6297 	lcall	_LCD_string_write
      001D0C                       6298 00116$:
                                   6299 ;	ecen4330lab7.c:1936: setTextColor(WHITE, BLACK);
      001D0C E4               [12] 6300 	clr	a
      001D0D F5*00            [12] 6301 	mov	_setTextColor_PARM_2,a
      001D0F F5*01            [12] 6302 	mov	(_setTextColor_PARM_2 + 1),a
      001D11 90 FF FF         [24] 6303 	mov	dptr,#0xffff
      001D14 12r03r2A         [24] 6304 	lcall	_setTextColor
                                   6305 ;	ecen4330lab7.c:1937: LCD_string_write("\nReturning to\nmain menu.");
      001D17 90r08rEC         [24] 6306 	mov	dptr,#___str_44
      001D1A 75 F0 80         [24] 6307 	mov	b,#0x80
      001D1D 12r0Ar19         [24] 6308 	lcall	_LCD_string_write
                                   6309 ;	ecen4330lab7.c:1938: delay(200);
      001D20 90 00 C8         [24] 6310 	mov	dptr,#0x00c8
                                   6311 ;	ecen4330lab7.c:1939: }
      001D23 02r00r79         [24] 6312 	ljmp	_delay
                                   6313 ;------------------------------------------------------------
                                   6314 ;Allocation info for local variables in function 'FIND_display'
                                   6315 ;------------------------------------------------------------
                                   6316 ;	ecen4330lab7.c:1953: void FIND_display(){
                                   6317 ;	-----------------------------------------
                                   6318 ;	 function FIND_display
                                   6319 ;	-----------------------------------------
      001D26                       6320 _FIND_display:
                                   6321 ;	ecen4330lab7.c:1954: addr2 = 0;						// first addr of page
      001D26 E4               [12] 6322 	clr	a
      001D27 F5*25            [12] 6323 	mov	_addr2,a
      001D29 F5*26            [12] 6324 	mov	(_addr2 + 1),a
                                   6325 ;	ecen4330lab7.c:1955: currAddr1 = 0;					// page count
      001D2B F5*2B            [12] 6326 	mov	_currAddr1,a
      001D2D F5*2C            [12] 6327 	mov	(_currAddr1 + 1),a
                                   6328 ;	ecen4330lab7.c:1956: resetLCD();
      001D2F 12r0DrAD         [24] 6329 	lcall	_resetLCD
                                   6330 ;	ecen4330lab7.c:1957: currAddr0 = addr0;				// Load starting address
      001D32 85*21*29         [24] 6331 	mov	_currAddr0,_addr0
      001D35 85*22*2A         [24] 6332 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   6333 ;	ecen4330lab7.c:1958: data = RAMread(currAddr0);		// Read data from starting address
      001D38 85*29 82         [24] 6334 	mov	dpl,_currAddr0
      001D3B 85*2A 83         [24] 6335 	mov	dph,(_currAddr0 + 1)
      001D3E 12r0Dr9A         [24] 6336 	lcall	_RAMread
      001D41 85 82*20         [24] 6337 	mov	_data,dpl
                                   6338 ;	ecen4330lab7.c:1961: while(data != byte1 && currAddr0 < addr1){
      001D44                       6339 00102$:
      001D44 AE*20            [24] 6340 	mov	r6,_data
      001D46 7F 00            [12] 6341 	mov	r7,#0x00
      001D48 EE               [12] 6342 	mov	a,r6
      001D49 B5*2F 06         [24] 6343 	cjne	a,_byte1,00235$
      001D4C EF               [12] 6344 	mov	a,r7
      001D4D B5*30 02         [24] 6345 	cjne	a,(_byte1 + 1),00235$
      001D50 80 21            [24] 6346 	sjmp	00104$
      001D52                       6347 00235$:
      001D52 C3               [12] 6348 	clr	c
      001D53 E5*29            [12] 6349 	mov	a,_currAddr0
      001D55 95*23            [12] 6350 	subb	a,_addr1
      001D57 E5*2A            [12] 6351 	mov	a,(_currAddr0 + 1)
      001D59 95*24            [12] 6352 	subb	a,(_addr1 + 1)
      001D5B 50 16            [24] 6353 	jnc	00104$
                                   6354 ;	ecen4330lab7.c:1962: currAddr0++;				// Next RAM address
      001D5D 05*29            [12] 6355 	inc	_currAddr0
      001D5F E4               [12] 6356 	clr	a
      001D60 B5*29 02         [24] 6357 	cjne	a,_currAddr0,00237$
      001D63 05*2A            [12] 6358 	inc	(_currAddr0 + 1)
      001D65                       6359 00237$:
                                   6360 ;	ecen4330lab7.c:1963: data = RAMread(currAddr0);	// Read data from RAM
      001D65 85*29 82         [24] 6361 	mov	dpl,_currAddr0
      001D68 85*2A 83         [24] 6362 	mov	dph,(_currAddr0 + 1)
      001D6B 12r0Dr9A         [24] 6363 	lcall	_RAMread
      001D6E 85 82*20         [24] 6364 	mov	_data,dpl
      001D71 80 D1            [24] 6365 	sjmp	00102$
      001D73                       6366 00104$:
                                   6367 ;	ecen4330lab7.c:1967: if(data != byte1 && currAddr0 == addr1){
      001D73 AE*20            [24] 6368 	mov	r6,_data
      001D75 7F 00            [12] 6369 	mov	r7,#0x00
      001D77 EE               [12] 6370 	mov	a,r6
      001D78 B5*2F 06         [24] 6371 	cjne	a,_byte1,00238$
      001D7B EF               [12] 6372 	mov	a,r7
      001D7C B5*30 02         [24] 6373 	cjne	a,(_byte1 + 1),00238$
      001D7F 80 58            [24] 6374 	sjmp	00142$
      001D81                       6375 00238$:
      001D81 E5*23            [12] 6376 	mov	a,_addr1
      001D83 B5*29 53         [24] 6377 	cjne	a,_currAddr0,00142$
      001D86 E5*24            [12] 6378 	mov	a,(_addr1 + 1)
      001D88 B5*2A 4E         [24] 6379 	cjne	a,(_currAddr0 + 1),00142$
                                   6380 ;	ecen4330lab7.c:1968: resetLCD();
      001D8B 12r0DrAD         [24] 6381 	lcall	_resetLCD
                                   6382 ;	ecen4330lab7.c:1969: LCD_string_write("\n0x");
      001D8E 90r07rD0         [24] 6383 	mov	dptr,#___str_28
      001D91 75 F0 80         [24] 6384 	mov	b,#0x80
      001D94 12r0Ar19         [24] 6385 	lcall	_LCD_string_write
                                   6386 ;	ecen4330lab7.c:1970: HEXtoASCII_8write(byte1);
      001D97 85*2F 82         [24] 6387 	mov	dpl,_byte1
      001D9A 12r0Cr89         [24] 6388 	lcall	_HEXtoASCII_8write
                                   6389 ;	ecen4330lab7.c:1971: LCD_string_write(" not\nfound in\naddress range\n\n");
      001D9D 90r09r05         [24] 6390 	mov	dptr,#___str_45
      001DA0 75 F0 80         [24] 6391 	mov	b,#0x80
      001DA3 12r0Ar19         [24] 6392 	lcall	_LCD_string_write
                                   6393 ;	ecen4330lab7.c:1972: HEXtoASCII_16write(addr0);
      001DA6 85*21 82         [24] 6394 	mov	dpl,_addr0
      001DA9 85*22 83         [24] 6395 	mov	dph,(_addr0 + 1)
      001DAC 12r0CrC6         [24] 6396 	lcall	_HEXtoASCII_16write
                                   6397 ;	ecen4330lab7.c:1973: LCD_string_write(" -\n");
      001DAF 90r08r08         [24] 6398 	mov	dptr,#___str_33
      001DB2 75 F0 80         [24] 6399 	mov	b,#0x80
      001DB5 12r0Ar19         [24] 6400 	lcall	_LCD_string_write
                                   6401 ;	ecen4330lab7.c:1974: HEXtoASCII_16write(addr1);
      001DB8 85*23 82         [24] 6402 	mov	dpl,_addr1
      001DBB 85*24 83         [24] 6403 	mov	dph,(_addr1 + 1)
      001DBE 12r0CrC6         [24] 6404 	lcall	_HEXtoASCII_16write
                                   6405 ;	ecen4330lab7.c:1975: delay(200);
      001DC1 90 00 C8         [24] 6406 	mov	dptr,#0x00c8
      001DC4 12r00r79         [24] 6407 	lcall	_delay
                                   6408 ;	ecen4330lab7.c:1976: resetLCD();
      001DC7 12r0DrAD         [24] 6409 	lcall	_resetLCD
                                   6410 ;	ecen4330lab7.c:1977: LCD_string_write("Returning to\nmain menu.");
      001DCA 90r06r39         [24] 6411 	mov	dptr,#___str_16
      001DCD 75 F0 80         [24] 6412 	mov	b,#0x80
      001DD0 12r0Ar19         [24] 6413 	lcall	_LCD_string_write
                                   6414 ;	ecen4330lab7.c:1978: delay(100);
      001DD3 90 00 64         [24] 6415 	mov	dptr,#0x0064
      001DD6 02r00r79         [24] 6416 	ljmp	_delay
      001DD9                       6417 00142$:
                                   6418 ;	ecen4330lab7.c:1986: resetLCD();
      001DD9 12r0DrAD         [24] 6419 	lcall	_resetLCD
                                   6420 ;	ecen4330lab7.c:1987: setTextColor(GREEN, BLACK);
      001DDC E4               [12] 6421 	clr	a
      001DDD F5*00            [12] 6422 	mov	_setTextColor_PARM_2,a
      001DDF F5*01            [12] 6423 	mov	(_setTextColor_PARM_2 + 1),a
      001DE1 90 07 E0         [24] 6424 	mov	dptr,#0x07e0
      001DE4 12r03r2A         [24] 6425 	lcall	_setTextColor
                                   6426 ;	ecen4330lab7.c:1988: LCD_string_write("\n0x");
      001DE7 90r07rD0         [24] 6427 	mov	dptr,#___str_28
      001DEA 75 F0 80         [24] 6428 	mov	b,#0x80
      001DED 12r0Ar19         [24] 6429 	lcall	_LCD_string_write
                                   6430 ;	ecen4330lab7.c:1989: HEXtoASCII_8write(byte1);
      001DF0 85*2F 82         [24] 6431 	mov	dpl,_byte1
      001DF3 12r0Cr89         [24] 6432 	lcall	_HEXtoASCII_8write
                                   6433 ;	ecen4330lab7.c:1990: LCD_string_write(" found at\nthe following\naddresses:\n\n");
      001DF6 90r09r23         [24] 6434 	mov	dptr,#___str_46
      001DF9 75 F0 80         [24] 6435 	mov	b,#0x80
      001DFC 12r0Ar19         [24] 6436 	lcall	_LCD_string_write
                                   6437 ;	ecen4330lab7.c:1991: delay(200);
      001DFF 90 00 C8         [24] 6438 	mov	dptr,#0x00c8
      001E02 12r00r79         [24] 6439 	lcall	_delay
                                   6440 ;	ecen4330lab7.c:1992: addr2 = currAddr0;					// Load first found address of page
      001E05 85*29*25         [24] 6441 	mov	_addr2,_currAddr0
      001E08 85*2A*26         [24] 6442 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6443 ;	ecen4330lab7.c:1997: do{
      001E0B                       6444 00138$:
                                   6445 ;	ecen4330lab7.c:1998: resetLCD();
      001E0B 12r0DrAD         [24] 6446 	lcall	_resetLCD
                                   6447 ;	ecen4330lab7.c:1999: currAddr0 = addr2;				// Load current address	
      001E0E 85*25*29         [24] 6448 	mov	_currAddr0,_addr2
      001E11 85*26*2A         [24] 6449 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6450 ;	ecen4330lab7.c:2000: HEXtoASCII_16write(currAddr0);	// Write found address to LCD
      001E14 85*29 82         [24] 6451 	mov	dpl,_currAddr0
      001E17 85*2A 83         [24] 6452 	mov	dph,(_currAddr0 + 1)
      001E1A 12r0CrC6         [24] 6453 	lcall	_HEXtoASCII_16write
                                   6454 ;	ecen4330lab7.c:2001: count = 7;						// Set page address display counter
      001E1D 75*32 07         [24] 6455 	mov	_count,#0x07
      001E20 75*33 00         [24] 6456 	mov	(_count + 1),#0x00
                                   6457 ;	ecen4330lab7.c:2002: currAddr1++;					// Increment page count
      001E23 05*2B            [12] 6458 	inc	_currAddr1
      001E25 E4               [12] 6459 	clr	a
      001E26 B5*2B 02         [24] 6460 	cjne	a,_currAddr1,00241$
      001E29 05*2C            [12] 6461 	inc	(_currAddr1 + 1)
      001E2B                       6462 00241$:
                                   6463 ;	ecen4330lab7.c:2008: if(currAddr0 != 0xFFFF){
      001E2B 74 FF            [12] 6464 	mov	a,#0xff
      001E2D B5*29 05         [24] 6465 	cjne	a,_currAddr0,00242$
      001E30 B5*2A 02         [24] 6466 	cjne	a,(_currAddr0 + 1),00242$
      001E33 80 4C            [24] 6467 	sjmp	00112$
      001E35                       6468 00242$:
                                   6469 ;	ecen4330lab7.c:2009: do{
      001E35                       6470 00108$:
                                   6471 ;	ecen4330lab7.c:2010: currAddr0++;				// Next RAM address
      001E35 05*29            [12] 6472 	inc	_currAddr0
      001E37 E4               [12] 6473 	clr	a
      001E38 B5*29 02         [24] 6474 	cjne	a,_currAddr0,00243$
      001E3B 05*2A            [12] 6475 	inc	(_currAddr0 + 1)
      001E3D                       6476 00243$:
                                   6477 ;	ecen4330lab7.c:2011: data = RAMread(currAddr0);	// Read data
      001E3D 85*29 82         [24] 6478 	mov	dpl,_currAddr0
      001E40 85*2A 83         [24] 6479 	mov	dph,(_currAddr0 + 1)
      001E43 12r0Dr9A         [24] 6480 	lcall	_RAMread
      001E46 85 82*20         [24] 6481 	mov	_data,dpl
                                   6482 ;	ecen4330lab7.c:2012: if(data == byte1){			// If data = search value
      001E49 AE*20            [24] 6483 	mov	r6,_data
      001E4B 7F 00            [12] 6484 	mov	r7,#0x00
      001E4D EE               [12] 6485 	mov	a,r6
      001E4E B5*2F 1F         [24] 6486 	cjne	a,_byte1,00109$
      001E51 EF               [12] 6487 	mov	a,r7
      001E52 B5*30 1B         [24] 6488 	cjne	a,(_byte1 + 1),00109$
                                   6489 ;	ecen4330lab7.c:2013: count--;				// Decrement page address display counter
      001E55 15*32            [12] 6490 	dec	_count
      001E57 74 FF            [12] 6491 	mov	a,#0xff
      001E59 B5*32 02         [24] 6492 	cjne	a,_count,00246$
      001E5C 15*33            [12] 6493 	dec	(_count + 1)
      001E5E                       6494 00246$:
                                   6495 ;	ecen4330lab7.c:2014: LCD_string_write("\n");	// Next line
      001E5E 90r08r0C         [24] 6496 	mov	dptr,#___str_34
      001E61 75 F0 80         [24] 6497 	mov	b,#0x80
      001E64 12r0Ar19         [24] 6498 	lcall	_LCD_string_write
                                   6499 ;	ecen4330lab7.c:2015: HEXtoASCII_16write(currAddr0);	// Display found address
      001E67 85*29 82         [24] 6500 	mov	dpl,_currAddr0
      001E6A 85*2A 83         [24] 6501 	mov	dph,(_currAddr0 + 1)
      001E6D 12r0CrC6         [24] 6502 	lcall	_HEXtoASCII_16write
      001E70                       6503 00109$:
                                   6504 ;	ecen4330lab7.c:2017: }while(currAddr0 < addr1 && count > 0);
      001E70 C3               [12] 6505 	clr	c
      001E71 E5*29            [12] 6506 	mov	a,_currAddr0
      001E73 95*23            [12] 6507 	subb	a,_addr1
      001E75 E5*2A            [12] 6508 	mov	a,(_currAddr0 + 1)
      001E77 95*24            [12] 6509 	subb	a,(_addr1 + 1)
      001E79 50 06            [24] 6510 	jnc	00112$
      001E7B E5*32            [12] 6511 	mov	a,_count
      001E7D 45*33            [12] 6512 	orl	a,(_count + 1)
      001E7F 70 B4            [24] 6513 	jnz	00108$
      001E81                       6514 00112$:
                                   6515 ;	ecen4330lab7.c:2024: setCursor(0, 250);
      001E81 75*00 FA         [24] 6516 	mov	_setCursor_PARM_2,#0xfa
      001E84 75*01 00         [24] 6517 	mov	(_setCursor_PARM_2 + 1),#0x00
      001E87 90 00 00         [24] 6518 	mov	dptr,#0x0000
      001E8A 12r03r1D         [24] 6519 	lcall	_setCursor
                                   6520 ;	ecen4330lab7.c:2025: setTextSize(2);
      001E8D 75 82 02         [24] 6521 	mov	dpl,#0x02
      001E90 12r03r37         [24] 6522 	lcall	_setTextSize
                                   6523 ;	ecen4330lab7.c:2026: setTextColor(WHITE, BLACK);
      001E93 E4               [12] 6524 	clr	a
      001E94 F5*00            [12] 6525 	mov	_setTextColor_PARM_2,a
      001E96 F5*01            [12] 6526 	mov	(_setTextColor_PARM_2 + 1),a
      001E98 90 FF FF         [24] 6527 	mov	dptr,#0xffff
      001E9B 12r03r2A         [24] 6528 	lcall	_setTextColor
                                   6529 ;	ecen4330lab7.c:2027: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001E9E 90r08r0E         [24] 6530 	mov	dptr,#___str_35
      001EA1 75 F0 80         [24] 6531 	mov	b,#0x80
      001EA4 12r0Ar19         [24] 6532 	lcall	_LCD_string_write
                                   6533 ;	ecen4330lab7.c:2028: HEXtoASCII_16write(currAddr1);
      001EA7 85*2B 82         [24] 6534 	mov	dpl,_currAddr1
      001EAA 85*2C 83         [24] 6535 	mov	dph,(_currAddr1 + 1)
      001EAD 12r0CrC6         [24] 6536 	lcall	_HEXtoASCII_16write
                                   6537 ;	ecen4330lab7.c:2034: key = keyDetect();
      001EB0 12r0Ar58         [24] 6538 	lcall	_keyDetect
      001EB3 85 82*16         [24] 6539 	mov	_key,dpl
                                   6540 ;	ecen4330lab7.c:2035: switch (key)
      001EB6 74 30            [12] 6541 	mov	a,#0x30
      001EB8 B5*16 02         [24] 6542 	cjne	a,_key,00249$
      001EBB 80 13            [24] 6543 	sjmp	00113$
      001EBD                       6544 00249$:
      001EBD 74 31            [12] 6545 	mov	a,#0x31
      001EBF B5*16 03         [24] 6546 	cjne	a,_key,00250$
      001EC2 02r1Fr71         [24] 6547 	ljmp	00126$
      001EC5                       6548 00250$:
      001EC5 74 45            [12] 6549 	mov	a,#0x45
      001EC7 B5*16 03         [24] 6550 	cjne	a,_key,00251$
      001ECA 02r1FrF1         [24] 6551 	ljmp	00135$
      001ECD                       6552 00251$:
      001ECD 02r20r05         [24] 6553 	ljmp	00136$
                                   6554 ;	ecen4330lab7.c:2041: case '0':
      001ED0                       6555 00113$:
                                   6556 ;	ecen4330lab7.c:2046: if(currAddr0 >= addr1){
      001ED0 C3               [12] 6557 	clr	c
      001ED1 E5*29            [12] 6558 	mov	a,_currAddr0
      001ED3 95*23            [12] 6559 	subb	a,_addr1
      001ED5 E5*2A            [12] 6560 	mov	a,(_currAddr0 + 1)
      001ED7 95*24            [12] 6561 	subb	a,(_addr1 + 1)
      001ED9 40 1E            [24] 6562 	jc	00117$
                                   6563 ;	ecen4330lab7.c:2047: resetLCD();
      001EDB 12r0DrAD         [24] 6564 	lcall	_resetLCD
                                   6565 ;	ecen4330lab7.c:2048: LCD_string_write("End of Data.");
      001EDE 90r09r48         [24] 6566 	mov	dptr,#___str_47
      001EE1 75 F0 80         [24] 6567 	mov	b,#0x80
      001EE4 12r0Ar19         [24] 6568 	lcall	_LCD_string_write
                                   6569 ;	ecen4330lab7.c:2049: delay(200);
      001EE7 90 00 C8         [24] 6570 	mov	dptr,#0x00c8
      001EEA 12r00r79         [24] 6571 	lcall	_delay
                                   6572 ;	ecen4330lab7.c:2050: currAddr1--;	// Reset page count to last displayed page 
      001EED 15*2B            [12] 6573 	dec	_currAddr1
      001EEF 74 FF            [12] 6574 	mov	a,#0xff
      001EF1 B5*2B 02         [24] 6575 	cjne	a,_currAddr1,00253$
      001EF4 15*2C            [12] 6576 	dec	(_currAddr1 + 1)
      001EF6                       6577 00253$:
      001EF6 02r20r11         [24] 6578 	ljmp	00139$
                                   6579 ;	ecen4330lab7.c:2063: do{
      001EF9                       6580 00117$:
                                   6581 ;	ecen4330lab7.c:2064: currAddr0++;			// Next RAM address
      001EF9 05*29            [12] 6582 	inc	_currAddr0
      001EFB E4               [12] 6583 	clr	a
      001EFC B5*29 02         [24] 6584 	cjne	a,_currAddr0,00254$
      001EFF 05*2A            [12] 6585 	inc	(_currAddr0 + 1)
      001F01                       6586 00254$:
                                   6587 ;	ecen4330lab7.c:2065: data = RAMread(currAddr0);	// Read data
      001F01 85*29 82         [24] 6588 	mov	dpl,_currAddr0
      001F04 85*2A 83         [24] 6589 	mov	dph,(_currAddr0 + 1)
      001F07 12r0Dr9A         [24] 6590 	lcall	_RAMread
      001F0A 85 82*20         [24] 6591 	mov	_data,dpl
                                   6592 ;	ecen4330lab7.c:2066: if(data == byte1){			// If data matches search value
      001F0D AE*20            [24] 6593 	mov	r6,_data
      001F0F 7F 00            [12] 6594 	mov	r7,#0x00
      001F11 EE               [12] 6595 	mov	a,r6
      001F12 B5*2F 0A         [24] 6596 	cjne	a,_byte1,00118$
      001F15 EF               [12] 6597 	mov	a,r7
      001F16 B5*30 06         [24] 6598 	cjne	a,(_byte1 + 1),00118$
                                   6599 ;	ecen4330lab7.c:2067: addr2 = currAddr0;		// Set first address of display page
      001F19 85*29*25         [24] 6600 	mov	_addr2,_currAddr0
      001F1C 85*2A*26         [24] 6601 	mov	(_addr2 + 1),(_currAddr0 + 1)
      001F1F                       6602 00118$:
                                   6603 ;	ecen4330lab7.c:2069: }while(currAddr0 < addr1 && data != byte1);
      001F1F C3               [12] 6604 	clr	c
      001F20 E5*29            [12] 6605 	mov	a,_currAddr0
      001F22 95*23            [12] 6606 	subb	a,_addr1
      001F24 E5*2A            [12] 6607 	mov	a,(_currAddr0 + 1)
      001F26 95*24            [12] 6608 	subb	a,(_addr1 + 1)
      001F28 50 0C            [24] 6609 	jnc	00119$
      001F2A AE*20            [24] 6610 	mov	r6,_data
      001F2C 7F 00            [12] 6611 	mov	r7,#0x00
      001F2E EE               [12] 6612 	mov	a,r6
      001F2F B5*2F C7         [24] 6613 	cjne	a,_byte1,00117$
      001F32 EF               [12] 6614 	mov	a,r7
      001F33 B5*30 C3         [24] 6615 	cjne	a,(_byte1 + 1),00117$
      001F36                       6616 00119$:
                                   6617 ;	ecen4330lab7.c:2075: if(currAddr0 >= addr1 && data != byte1){
      001F36 C3               [12] 6618 	clr	c
      001F37 E5*29            [12] 6619 	mov	a,_currAddr0
      001F39 95*23            [12] 6620 	subb	a,_addr1
      001F3B E5*2A            [12] 6621 	mov	a,(_currAddr0 + 1)
      001F3D 95*24            [12] 6622 	subb	a,(_addr1 + 1)
      001F3F 50 03            [24] 6623 	jnc	00260$
      001F41 02r20r11         [24] 6624 	ljmp	00139$
      001F44                       6625 00260$:
      001F44 AE*20            [24] 6626 	mov	r6,_data
      001F46 7F 00            [12] 6627 	mov	r7,#0x00
      001F48 EE               [12] 6628 	mov	a,r6
      001F49 B5*2F 07         [24] 6629 	cjne	a,_byte1,00261$
      001F4C EF               [12] 6630 	mov	a,r7
      001F4D B5*30 03         [24] 6631 	cjne	a,(_byte1 + 1),00261$
      001F50 02r20r11         [24] 6632 	ljmp	00139$
      001F53                       6633 00261$:
                                   6634 ;	ecen4330lab7.c:2076: resetLCD();
      001F53 12r0DrAD         [24] 6635 	lcall	_resetLCD
                                   6636 ;	ecen4330lab7.c:2077: LCD_string_write("End of Data.");
      001F56 90r09r48         [24] 6637 	mov	dptr,#___str_47
      001F59 75 F0 80         [24] 6638 	mov	b,#0x80
      001F5C 12r0Ar19         [24] 6639 	lcall	_LCD_string_write
                                   6640 ;	ecen4330lab7.c:2078: delay(200);
      001F5F 90 00 C8         [24] 6641 	mov	dptr,#0x00c8
      001F62 12r00r79         [24] 6642 	lcall	_delay
                                   6643 ;	ecen4330lab7.c:2079: currAddr1--;	// Reset page count to last displayed page
      001F65 15*2B            [12] 6644 	dec	_currAddr1
      001F67 74 FF            [12] 6645 	mov	a,#0xff
      001F69 B5*2B 02         [24] 6646 	cjne	a,_currAddr1,00262$
      001F6C 15*2C            [12] 6647 	dec	(_currAddr1 + 1)
      001F6E                       6648 00262$:
                                   6649 ;	ecen4330lab7.c:2084: break;
      001F6E 02r20r11         [24] 6650 	ljmp	00139$
                                   6651 ;	ecen4330lab7.c:2091: case '1':
      001F71                       6652 00126$:
                                   6653 ;	ecen4330lab7.c:2095: if(currAddr1 == 1){
      001F71 74 01            [12] 6654 	mov	a,#0x01
      001F73 B5*2B 06         [24] 6655 	cjne	a,_currAddr1,00263$
      001F76 14               [12] 6656 	dec	a
      001F77 B5*2C 02         [24] 6657 	cjne	a,(_currAddr1 + 1),00263$
      001F7A 80 02            [24] 6658 	sjmp	00264$
      001F7C                       6659 00263$:
      001F7C 80 1E            [24] 6660 	sjmp	00133$
      001F7E                       6661 00264$:
                                   6662 ;	ecen4330lab7.c:2096: resetLCD();
      001F7E 12r0DrAD         [24] 6663 	lcall	_resetLCD
                                   6664 ;	ecen4330lab7.c:2097: LCD_string_write("End of Data.");
      001F81 90r09r48         [24] 6665 	mov	dptr,#___str_47
      001F84 75 F0 80         [24] 6666 	mov	b,#0x80
      001F87 12r0Ar19         [24] 6667 	lcall	_LCD_string_write
                                   6668 ;	ecen4330lab7.c:2098: delay(200);
      001F8A 90 00 C8         [24] 6669 	mov	dptr,#0x00c8
      001F8D 12r00r79         [24] 6670 	lcall	_delay
                                   6671 ;	ecen4330lab7.c:2099: currAddr1--;	// Reset page count to last displayed page
      001F90 15*2B            [12] 6672 	dec	_currAddr1
      001F92 74 FF            [12] 6673 	mov	a,#0xff
      001F94 B5*2B 02         [24] 6674 	cjne	a,_currAddr1,00265$
      001F97 15*2C            [12] 6675 	dec	(_currAddr1 + 1)
      001F99                       6676 00265$:
      001F99 02r20r11         [24] 6677 	ljmp	00139$
      001F9C                       6678 00133$:
                                   6679 ;	ecen4330lab7.c:2107: currAddr0 = addr2;
      001F9C 85*25*29         [24] 6680 	mov	_currAddr0,_addr2
      001F9F 85*26*2A         [24] 6681 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6682 ;	ecen4330lab7.c:2108: count = 0;
      001FA2 E4               [12] 6683 	clr	a
      001FA3 F5*32            [12] 6684 	mov	_count,a
      001FA5 F5*33            [12] 6685 	mov	(_count + 1),a
                                   6686 ;	ecen4330lab7.c:2109: while(count < 8){
      001FA7                       6687 00129$:
      001FA7 C3               [12] 6688 	clr	c
      001FA8 E5*32            [12] 6689 	mov	a,_count
      001FAA 94 08            [12] 6690 	subb	a,#0x08
      001FAC E5*33            [12] 6691 	mov	a,(_count + 1)
      001FAE 94 00            [12] 6692 	subb	a,#0x00
      001FB0 50 2B            [24] 6693 	jnc	00131$
                                   6694 ;	ecen4330lab7.c:2110: currAddr0--;
      001FB2 15*29            [12] 6695 	dec	_currAddr0
      001FB4 74 FF            [12] 6696 	mov	a,#0xff
      001FB6 B5*29 02         [24] 6697 	cjne	a,_currAddr0,00267$
      001FB9 15*2A            [12] 6698 	dec	(_currAddr0 + 1)
      001FBB                       6699 00267$:
                                   6700 ;	ecen4330lab7.c:2111: data = RAMread(currAddr0);
      001FBB 85*29 82         [24] 6701 	mov	dpl,_currAddr0
      001FBE 85*2A 83         [24] 6702 	mov	dph,(_currAddr0 + 1)
      001FC1 12r0Dr9A         [24] 6703 	lcall	_RAMread
      001FC4 85 82*20         [24] 6704 	mov	_data,dpl
                                   6705 ;	ecen4330lab7.c:2112: if(data == byte1){
      001FC7 AE*20            [24] 6706 	mov	r6,_data
      001FC9 7F 00            [12] 6707 	mov	r7,#0x00
      001FCB EE               [12] 6708 	mov	a,r6
      001FCC B5*2F D8         [24] 6709 	cjne	a,_byte1,00129$
      001FCF EF               [12] 6710 	mov	a,r7
      001FD0 B5*30 D4         [24] 6711 	cjne	a,(_byte1 + 1),00129$
                                   6712 ;	ecen4330lab7.c:2113: count++;
      001FD3 05*32            [12] 6713 	inc	_count
      001FD5 E4               [12] 6714 	clr	a
      001FD6 B5*32 CE         [24] 6715 	cjne	a,_count,00129$
      001FD9 05*33            [12] 6716 	inc	(_count + 1)
      001FDB 80 CA            [24] 6717 	sjmp	00129$
      001FDD                       6718 00131$:
                                   6719 ;	ecen4330lab7.c:2116: addr2 = currAddr0;
      001FDD 85*29*25         [24] 6720 	mov	_addr2,_currAddr0
      001FE0 85*2A*26         [24] 6721 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6722 ;	ecen4330lab7.c:2117: currAddr1 -= 2;
      001FE3 E5*2B            [12] 6723 	mov	a,_currAddr1
      001FE5 24 FE            [12] 6724 	add	a,#0xfe
      001FE7 F5*2B            [12] 6725 	mov	_currAddr1,a
      001FE9 E5*2C            [12] 6726 	mov	a,(_currAddr1 + 1)
      001FEB 34 FF            [12] 6727 	addc	a,#0xff
      001FED F5*2C            [12] 6728 	mov	(_currAddr1 + 1),a
                                   6729 ;	ecen4330lab7.c:2119: break;
                                   6730 ;	ecen4330lab7.c:2125: case 'E':
      001FEF 80 20            [24] 6731 	sjmp	00139$
      001FF1                       6732 00135$:
                                   6733 ;	ecen4330lab7.c:2126: resetLCD();
      001FF1 12r0DrAD         [24] 6734 	lcall	_resetLCD
                                   6735 ;	ecen4330lab7.c:2127: LCD_string_write("Returning to\nmain menu.");
      001FF4 90r06r39         [24] 6736 	mov	dptr,#___str_16
      001FF7 75 F0 80         [24] 6737 	mov	b,#0x80
      001FFA 12r0Ar19         [24] 6738 	lcall	_LCD_string_write
                                   6739 ;	ecen4330lab7.c:2128: delay(200);
      001FFD 90 00 C8         [24] 6740 	mov	dptr,#0x00c8
      002000 12r00r79         [24] 6741 	lcall	_delay
                                   6742 ;	ecen4330lab7.c:2129: break;
                                   6743 ;	ecen4330lab7.c:2135: default:
      002003 80 0C            [24] 6744 	sjmp	00139$
      002005                       6745 00136$:
                                   6746 ;	ecen4330lab7.c:2136: invalidInput();
      002005 12r0DrD5         [24] 6747 	lcall	_invalidInput
                                   6748 ;	ecen4330lab7.c:2137: currAddr1--;
      002008 15*2B            [12] 6749 	dec	_currAddr1
      00200A 74 FF            [12] 6750 	mov	a,#0xff
      00200C B5*2B 02         [24] 6751 	cjne	a,_currAddr1,00271$
      00200F 15*2C            [12] 6752 	dec	(_currAddr1 + 1)
      002011                       6753 00271$:
                                   6754 ;	ecen4330lab7.c:2140: }
      002011                       6755 00139$:
                                   6756 ;	ecen4330lab7.c:2141: }while(key != 'E');
      002011 74 45            [12] 6757 	mov	a,#0x45
      002013 B5*16 01         [24] 6758 	cjne	a,_key,00272$
      002016 22               [24] 6759 	ret
      002017                       6760 00272$:
      002017 02r1Er0B         [24] 6761 	ljmp	00138$
                                   6762 ;	ecen4330lab7.c:2143: }
      00201A 22               [24] 6763 	ret
                                   6764 ;------------------------------------------------------------
                                   6765 ;Allocation info for local variables in function 'FIND'
                                   6766 ;------------------------------------------------------------
                                   6767 ;	ecen4330lab7.c:2151: void FIND(){
                                   6768 ;	-----------------------------------------
                                   6769 ;	 function FIND
                                   6770 ;	-----------------------------------------
      00201B                       6771 _FIND:
                                   6772 ;	ecen4330lab7.c:2152: endAddrCalc = 0;
      00201B E4               [12] 6773 	clr	a
      00201C F5*34            [12] 6774 	mov	_endAddrCalc,a
      00201E F5*35            [12] 6775 	mov	(_endAddrCalc + 1),a
      002020 F5*36            [12] 6776 	mov	(_endAddrCalc + 2),a
      002022 F5*37            [12] 6777 	mov	(_endAddrCalc + 3),a
                                   6778 ;	ecen4330lab7.c:2153: addr0 = 0;                      // Starting Address
      002024 F5*21            [12] 6779 	mov	_addr0,a
      002026 F5*22            [12] 6780 	mov	(_addr0 + 1),a
                                   6781 ;	ecen4330lab7.c:2154: addr1 = 0;                      // End Address
      002028 F5*23            [12] 6782 	mov	_addr1,a
      00202A F5*24            [12] 6783 	mov	(_addr1 + 1),a
                                   6784 ;	ecen4330lab7.c:2155: dataType = 0;                   // Data Type
                                   6785 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      00202C F5*1A            [12] 6786 	mov	_dataType,a
                                   6787 ;	ecen4330lab7.c:2156: dataSize = 0;                   // Data Size
      00202E F5*1B            [12] 6788 	mov	_dataSize,a
      002030 F5*1C            [12] 6789 	mov	(_dataSize + 1),a
                                   6790 ;	ecen4330lab7.c:2157: byte1 = 0;                       // Find Value
      002032 F5*2F            [12] 6791 	mov	_byte1,a
      002034 F5*30            [12] 6792 	mov	(_byte1 + 1),a
                                   6793 ;	ecen4330lab7.c:2160: resetLCD();
      002036 12r0DrAD         [24] 6794 	lcall	_resetLCD
                                   6795 ;	ecen4330lab7.c:2161: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n   0x____");
      002039 90r09r55         [24] 6796 	mov	dptr,#___str_48
      00203C 75 F0 80         [24] 6797 	mov	b,#0x80
      00203F 12r0Ar19         [24] 6798 	lcall	_LCD_string_write
                                   6799 ;	ecen4330lab7.c:2162: cursor_x -= 4 * textsize * 6;
      002042 E5*0C            [12] 6800 	mov	a,_textsize
      002044 75 F0 18         [24] 6801 	mov	b,#0x18
      002047 A4               [48] 6802 	mul	ab
      002048 FE               [12] 6803 	mov	r6,a
      002049 AF F0            [24] 6804 	mov	r7,b
      00204B E5*08            [12] 6805 	mov	a,_cursor_x
      00204D C3               [12] 6806 	clr	c
      00204E 9E               [12] 6807 	subb	a,r6
      00204F F5*08            [12] 6808 	mov	_cursor_x,a
      002051 E5*09            [12] 6809 	mov	a,(_cursor_x + 1)
      002053 9F               [12] 6810 	subb	a,r7
      002054 F5*09            [12] 6811 	mov	(_cursor_x + 1),a
                                   6812 ;	ecen4330lab7.c:2163: inputRead16();                  // Read input
      002056 12r0DrFE         [24] 6813 	lcall	_inputRead16
                                   6814 ;	ecen4330lab7.c:2164: addr0 = input16;                // Start address
      002059 85*17*21         [24] 6815 	mov	_addr0,_input16
      00205C 85*18*22         [24] 6816 	mov	(_addr0 + 1),(_input16 + 1)
                                   6817 ;	ecen4330lab7.c:2170: resetLCD();
      00205F 12r0DrAD         [24] 6818 	lcall	_resetLCD
                                   6819 ;	ecen4330lab7.c:2171: inputDataSize();                // Prompt & read input
      002062 12r0FrCA         [24] 6820 	lcall	_inputDataSize
                                   6821 ;	ecen4330lab7.c:2174: resetLCD();
      002065 12r0DrAD         [24] 6822 	lcall	_resetLCD
                                   6823 ;	ecen4330lab7.c:2175: LCD_string_write("\nEnter search\nvalue:\n\n   0x__");
      002068 90r09r7D         [24] 6824 	mov	dptr,#___str_49
      00206B 75 F0 80         [24] 6825 	mov	b,#0x80
      00206E 12r0Ar19         [24] 6826 	lcall	_LCD_string_write
                                   6827 ;	ecen4330lab7.c:2176: cursor_x -= 2 * textsize * 6;
      002071 E5*0C            [12] 6828 	mov	a,_textsize
      002073 75 F0 0C         [24] 6829 	mov	b,#0x0c
      002076 A4               [48] 6830 	mul	ab
      002077 FE               [12] 6831 	mov	r6,a
      002078 AF F0            [24] 6832 	mov	r7,b
      00207A E5*08            [12] 6833 	mov	a,_cursor_x
      00207C C3               [12] 6834 	clr	c
      00207D 9E               [12] 6835 	subb	a,r6
      00207E F5*08            [12] 6836 	mov	_cursor_x,a
      002080 E5*09            [12] 6837 	mov	a,(_cursor_x + 1)
      002082 9F               [12] 6838 	subb	a,r7
      002083 F5*09            [12] 6839 	mov	(_cursor_x + 1),a
                                   6840 ;	ecen4330lab7.c:2177: inputRead8();                  // Read input
      002085 12r0ErB9         [24] 6841 	lcall	_inputRead8
                                   6842 ;	ecen4330lab7.c:2178: byte1 = input8;                 // Find value
      002088 85*19*2F         [24] 6843 	mov	_byte1,_input8
      00208B 75*30 00         [24] 6844 	mov	(_byte1 + 1),#0x00
                                   6845 ;	ecen4330lab7.c:2181: endAddrCalc = addr0 + dataSize;
      00208E E5*1B            [12] 6846 	mov	a,_dataSize
      002090 25*21            [12] 6847 	add	a,_addr0
      002092 FE               [12] 6848 	mov	r6,a
      002093 E5*1C            [12] 6849 	mov	a,(_dataSize + 1)
      002095 35*22            [12] 6850 	addc	a,(_addr0 + 1)
      002097 FF               [12] 6851 	mov	r7,a
      002098 8E*34            [24] 6852 	mov	_endAddrCalc,r6
      00209A 8F*35            [24] 6853 	mov	(_endAddrCalc + 1),r7
      00209C 75*36 00         [24] 6854 	mov	(_endAddrCalc + 2),#0x00
      00209F 75*37 00         [24] 6855 	mov	(_endAddrCalc + 3),#0x00
                                   6856 ;	ecen4330lab7.c:2182: if(endAddrCalc < addr0){ // RAM overflow
      0020A2 AC*21            [24] 6857 	mov	r4,_addr0
      0020A4 AD*22            [24] 6858 	mov	r5,(_addr0 + 1)
      0020A6 7E 00            [12] 6859 	mov	r6,#0x00
      0020A8 7F 00            [12] 6860 	mov	r7,#0x00
      0020AA C3               [12] 6861 	clr	c
      0020AB E5*34            [12] 6862 	mov	a,_endAddrCalc
      0020AD 9C               [12] 6863 	subb	a,r4
      0020AE E5*35            [12] 6864 	mov	a,(_endAddrCalc + 1)
      0020B0 9D               [12] 6865 	subb	a,r5
      0020B1 E5*36            [12] 6866 	mov	a,(_endAddrCalc + 2)
      0020B3 9E               [12] 6867 	subb	a,r6
      0020B4 E5*37            [12] 6868 	mov	a,(_endAddrCalc + 3)
      0020B6 9F               [12] 6869 	subb	a,r7
      0020B7 50 14            [24] 6870 	jnc	00102$
                                   6871 ;	ecen4330lab7.c:2183: addr1 = 0xFFFF;             // Set end address
      0020B9 75*23 FF         [24] 6872 	mov	_addr1,#0xff
                                   6873 ;	ecen4330lab7.c:2184: dataSize = addr1 - addr0;   // Recalculate data size
      0020BC 74 FF            [12] 6874 	mov	a,#0xff
      0020BE F5*24            [12] 6875 	mov	(_addr1 + 1),a
      0020C0 C3               [12] 6876 	clr	c
      0020C1 95*21            [12] 6877 	subb	a,_addr0
      0020C3 F5*1B            [12] 6878 	mov	_dataSize,a
      0020C5 74 FF            [12] 6879 	mov	a,#0xff
      0020C7 95*22            [12] 6880 	subb	a,(_addr0 + 1)
      0020C9 F5*1C            [12] 6881 	mov	(_dataSize + 1),a
      0020CB 80 0C            [24] 6882 	sjmp	00103$
      0020CD                       6883 00102$:
                                   6884 ;	ecen4330lab7.c:2187: addr1 = addr0 + dataSize;
      0020CD E5*1B            [12] 6885 	mov	a,_dataSize
      0020CF 25*21            [12] 6886 	add	a,_addr0
      0020D1 F5*23            [12] 6887 	mov	_addr1,a
      0020D3 E5*1C            [12] 6888 	mov	a,(_dataSize + 1)
      0020D5 35*22            [12] 6889 	addc	a,(_addr0 + 1)
      0020D7 F5*24            [12] 6890 	mov	(_addr1 + 1),a
      0020D9                       6891 00103$:
                                   6892 ;	ecen4330lab7.c:2207: FIND_display();                 // Display dump data
                                   6893 ;	ecen4330lab7.c:2208: }
      0020D9 02r1Dr26         [24] 6894 	ljmp	_FIND_display
                                   6895 ;------------------------------------------------------------
                                   6896 ;Allocation info for local variables in function 'resetLCD1'
                                   6897 ;------------------------------------------------------------
                                   6898 ;	ecen4330lab7.c:2210: void resetLCD1(){
                                   6899 ;	-----------------------------------------
                                   6900 ;	 function resetLCD1
                                   6901 ;	-----------------------------------------
      0020DC                       6902 _resetLCD1:
                                   6903 ;	ecen4330lab7.c:2211: setRotation(4);
      0020DC 75 82 04         [24] 6904 	mov	dpl,#0x04
      0020DF 12r03r4F         [24] 6905 	lcall	_setRotation
                                   6906 ;	ecen4330lab7.c:2212: setTextColor(GRAY, BLACK);
      0020E2 E4               [12] 6907 	clr	a
      0020E3 F5*00            [12] 6908 	mov	_setTextColor_PARM_2,a
      0020E5 F5*01            [12] 6909 	mov	(_setTextColor_PARM_2 + 1),a
      0020E7 90 D6 BA         [24] 6910 	mov	dptr,#0xd6ba
      0020EA 12r03r2A         [24] 6911 	lcall	_setTextColor
                                   6912 ;	ecen4330lab7.c:2213: setTextSize(3);
      0020ED 75 82 03         [24] 6913 	mov	dpl,#0x03
      0020F0 12r03r37         [24] 6914 	lcall	_setTextSize
                                   6915 ;	ecen4330lab7.c:2214: fillScreen(BLACK);
      0020F3 90 00 00         [24] 6916 	mov	dptr,#0x0000
      0020F6 12r06rC2         [24] 6917 	lcall	_fillScreen
                                   6918 ;	ecen4330lab7.c:2215: setCursor(0, 0);
      0020F9 E4               [12] 6919 	clr	a
      0020FA F5*00            [12] 6920 	mov	_setCursor_PARM_2,a
      0020FC F5*01            [12] 6921 	mov	(_setCursor_PARM_2 + 1),a
      0020FE 90 00 00         [24] 6922 	mov	dptr,#0x0000
                                   6923 ;	ecen4330lab7.c:2216: }
      002101 02r03r1D         [24] 6924 	ljmp	_setCursor
                                   6925 ;------------------------------------------------------------
                                   6926 ;Allocation info for local variables in function 'UART_dataRate'
                                   6927 ;------------------------------------------------------------
                                   6928 ;	ecen4330lab7.c:2235: void UART_dataRate() {
                                   6929 ;	-----------------------------------------
                                   6930 ;	 function UART_dataRate
                                   6931 ;	-----------------------------------------
      002104                       6932 _UART_dataRate:
                                   6933 ;	ecen4330lab7.c:2236: resetLCD();
      002104 12r0DrAD         [24] 6934 	lcall	_resetLCD
                                   6935 ;	ecen4330lab7.c:2237: do {
      002107                       6936 00119$:
                                   6937 ;	ecen4330lab7.c:2238: LCD_string_write("\n(1) 1200\n");
      002107 90r09r9B         [24] 6938 	mov	dptr,#___str_50
      00210A 75 F0 80         [24] 6939 	mov	b,#0x80
      00210D 12r0Ar19         [24] 6940 	lcall	_LCD_string_write
                                   6941 ;	ecen4330lab7.c:2239: LCD_string_write("(2) 2400\n");
      002110 90r09rA6         [24] 6942 	mov	dptr,#___str_51
      002113 75 F0 80         [24] 6943 	mov	b,#0x80
      002116 12r0Ar19         [24] 6944 	lcall	_LCD_string_write
                                   6945 ;	ecen4330lab7.c:2240: LCD_string_write("(3) 4800\n");
      002119 90r09rB0         [24] 6946 	mov	dptr,#___str_52
      00211C 75 F0 80         [24] 6947 	mov	b,#0x80
      00211F 12r0Ar19         [24] 6948 	lcall	_LCD_string_write
                                   6949 ;	ecen4330lab7.c:2241: LCD_string_write("(4) 9600\n");
      002122 90r09rBA         [24] 6950 	mov	dptr,#___str_53
      002125 75 F0 80         [24] 6951 	mov	b,#0x80
      002128 12r0Ar19         [24] 6952 	lcall	_LCD_string_write
                                   6953 ;	ecen4330lab7.c:2242: LCD_string_write("(5) 19200\n\n");
      00212B 90r09rC4         [24] 6954 	mov	dptr,#___str_54
      00212E 75 F0 80         [24] 6955 	mov	b,#0x80
      002131 12r0Ar19         [24] 6956 	lcall	_LCD_string_write
                                   6957 ;	ecen4330lab7.c:2243: LCD_string_write("Current:\n");
      002134 90r09rD0         [24] 6958 	mov	dptr,#___str_55
      002137 75 F0 80         [24] 6959 	mov	b,#0x80
      00213A 12r0Ar19         [24] 6960 	lcall	_LCD_string_write
                                   6961 ;	ecen4330lab7.c:2244: if(PCON == 0x80){
      00213D 74 80            [12] 6962 	mov	a,#0x80
      00213F B5 87 1B         [24] 6963 	cjne	a,_PCON,00110$
                                   6964 ;	ecen4330lab7.c:2245: if (TH1 == 0xFD){
      002142 74 FD            [12] 6965 	mov	a,#0xfd
      002144 B5 8D 0B         [24] 6966 	cjne	a,_TH1,00102$
                                   6967 ;	ecen4330lab7.c:2246: LCD_string_write("19200\n");
      002147 90r09rDA         [24] 6968 	mov	dptr,#___str_56
      00214A 75 F0 80         [24] 6969 	mov	b,#0x80
      00214D 12r0Ar19         [24] 6970 	lcall	_LCD_string_write
      002150 80 4B            [24] 6971 	sjmp	00111$
      002152                       6972 00102$:
                                   6973 ;	ecen4330lab7.c:2249: LCD_string_write("Invalid\n");
      002152 90r09rE1         [24] 6974 	mov	dptr,#___str_57
      002155 75 F0 80         [24] 6975 	mov	b,#0x80
      002158 12r0Ar19         [24] 6976 	lcall	_LCD_string_write
      00215B 80 40            [24] 6977 	sjmp	00111$
      00215D                       6978 00110$:
                                   6979 ;	ecen4330lab7.c:2253: switch(TH1) {
      00215D AF 8D            [24] 6980 	mov	r7,_TH1
      00215F BF E8 02         [24] 6981 	cjne	r7,#0xe8,00180$
      002162 80 0F            [24] 6982 	sjmp	00104$
      002164                       6983 00180$:
      002164 BF F4 02         [24] 6984 	cjne	r7,#0xf4,00181$
      002167 80 15            [24] 6985 	sjmp	00105$
      002169                       6986 00181$:
      002169 BF FA 02         [24] 6987 	cjne	r7,#0xfa,00182$
      00216C 80 1B            [24] 6988 	sjmp	00106$
      00216E                       6989 00182$:
                                   6990 ;	ecen4330lab7.c:2254: case 0xE8:
      00216E BF FD 2C         [24] 6991 	cjne	r7,#0xfd,00111$
      002171 80 21            [24] 6992 	sjmp	00107$
      002173                       6993 00104$:
                                   6994 ;	ecen4330lab7.c:2255: LCD_string_write("1200\n");
      002173 90r09rEA         [24] 6995 	mov	dptr,#___str_58
      002176 75 F0 80         [24] 6996 	mov	b,#0x80
      002179 12r0Ar19         [24] 6997 	lcall	_LCD_string_write
                                   6998 ;	ecen4330lab7.c:2256: break;
                                   6999 ;	ecen4330lab7.c:2257: case 0xF4:
      00217C 80 1F            [24] 7000 	sjmp	00111$
      00217E                       7001 00105$:
                                   7002 ;	ecen4330lab7.c:2258: LCD_string_write("2400\n");
      00217E 90r09rF0         [24] 7003 	mov	dptr,#___str_59
      002181 75 F0 80         [24] 7004 	mov	b,#0x80
      002184 12r0Ar19         [24] 7005 	lcall	_LCD_string_write
                                   7006 ;	ecen4330lab7.c:2259: break;
                                   7007 ;	ecen4330lab7.c:2260: case 0xFA:
      002187 80 14            [24] 7008 	sjmp	00111$
      002189                       7009 00106$:
                                   7010 ;	ecen4330lab7.c:2261: LCD_string_write("4800\n");
      002189 90r09rF6         [24] 7011 	mov	dptr,#___str_60
      00218C 75 F0 80         [24] 7012 	mov	b,#0x80
      00218F 12r0Ar19         [24] 7013 	lcall	_LCD_string_write
                                   7014 ;	ecen4330lab7.c:2262: break;
                                   7015 ;	ecen4330lab7.c:2263: case 0xFD:
      002192 80 09            [24] 7016 	sjmp	00111$
      002194                       7017 00107$:
                                   7018 ;	ecen4330lab7.c:2264: LCD_string_write("9600\n");
      002194 90r09rFC         [24] 7019 	mov	dptr,#___str_61
      002197 75 F0 80         [24] 7020 	mov	b,#0x80
      00219A 12r0Ar19         [24] 7021 	lcall	_LCD_string_write
                                   7022 ;	ecen4330lab7.c:2266: }
      00219D                       7023 00111$:
                                   7024 ;	ecen4330lab7.c:2268: LCD_string_write("\n   _");
      00219D 90r0Ar02         [24] 7025 	mov	dptr,#___str_62
      0021A0 75 F0 80         [24] 7026 	mov	b,#0x80
      0021A3 12r0Ar19         [24] 7027 	lcall	_LCD_string_write
                                   7028 ;	ecen4330lab7.c:2269: cursor_x -= 1 * textsize * 6;
      0021A6 E5*0C            [12] 7029 	mov	a,_textsize
      0021A8 75 F0 06         [24] 7030 	mov	b,#0x06
      0021AB A4               [48] 7031 	mul	ab
      0021AC FE               [12] 7032 	mov	r6,a
      0021AD AF F0            [24] 7033 	mov	r7,b
      0021AF E5*08            [12] 7034 	mov	a,_cursor_x
      0021B1 C3               [12] 7035 	clr	c
      0021B2 9E               [12] 7036 	subb	a,r6
      0021B3 F5*08            [12] 7037 	mov	_cursor_x,a
      0021B5 E5*09            [12] 7038 	mov	a,(_cursor_x + 1)
      0021B7 9F               [12] 7039 	subb	a,r7
      0021B8 F5*09            [12] 7040 	mov	(_cursor_x + 1),a
                                   7041 ;	ecen4330lab7.c:2270: key = keyDetect();
      0021BA 12r0Ar58         [24] 7042 	lcall	_keyDetect
      0021BD 85 82*16         [24] 7043 	mov	_key,dpl
                                   7044 ;	ecen4330lab7.c:2271: switch (key){
      0021C0 74 31            [12] 7045 	mov	a,#0x31
      0021C2 B5*16 02         [24] 7046 	cjne	a,_key,00184$
      0021C5 80 1F            [24] 7047 	sjmp	00112$
      0021C7                       7048 00184$:
      0021C7 74 32            [12] 7049 	mov	a,#0x32
      0021C9 B5*16 02         [24] 7050 	cjne	a,_key,00185$
      0021CC 80 30            [24] 7051 	sjmp	00113$
      0021CE                       7052 00185$:
      0021CE 74 33            [12] 7053 	mov	a,#0x33
      0021D0 B5*16 02         [24] 7054 	cjne	a,_key,00186$
      0021D3 80 40            [24] 7055 	sjmp	00114$
      0021D5                       7056 00186$:
      0021D5 74 34            [12] 7057 	mov	a,#0x34
      0021D7 B5*16 02         [24] 7058 	cjne	a,_key,00187$
      0021DA 80 50            [24] 7059 	sjmp	00115$
      0021DC                       7060 00187$:
      0021DC 74 35            [12] 7061 	mov	a,#0x35
      0021DE B5*16 02         [24] 7062 	cjne	a,_key,00188$
      0021E1 80 60            [24] 7063 	sjmp	00116$
      0021E3                       7064 00188$:
      0021E3 02r22r5A         [24] 7065 	ljmp	00117$
                                   7066 ;	ecen4330lab7.c:2273: case '1':
      0021E6                       7067 00112$:
                                   7068 ;	ecen4330lab7.c:2274: validInput = 1;
      0021E6 75*1D 01         [24] 7069 	mov	_validInput,#0x01
                                   7070 ;	ecen4330lab7.c:2275: TH1 = 0xE8;
      0021E9 75 8D E8         [24] 7071 	mov	_TH1,#0xe8
                                   7072 ;	ecen4330lab7.c:2276: PCON = 0x00;
      0021EC 75 87 00         [24] 7073 	mov	_PCON,#0x00
                                   7074 ;	ecen4330lab7.c:2277: dataEnd = 1;
      0021EF 75*1E 01         [24] 7075 	mov	_dataEnd,#0x01
                                   7076 ;	ecen4330lab7.c:2278: LCD_string_write("1\n");
      0021F2 90r0Ar08         [24] 7077 	mov	dptr,#___str_63
      0021F5 75 F0 80         [24] 7078 	mov	b,#0x80
      0021F8 12r0Ar19         [24] 7079 	lcall	_LCD_string_write
                                   7080 ;	ecen4330lab7.c:2279: break;
      0021FB 02r22r6C         [24] 7081 	ljmp	00120$
                                   7082 ;	ecen4330lab7.c:2280: case '2':
      0021FE                       7083 00113$:
                                   7084 ;	ecen4330lab7.c:2281: validInput = 1;
      0021FE 75*1D 01         [24] 7085 	mov	_validInput,#0x01
                                   7086 ;	ecen4330lab7.c:2282: TH1 = 0xF4;
      002201 75 8D F4         [24] 7087 	mov	_TH1,#0xf4
                                   7088 ;	ecen4330lab7.c:2283: PCON = 0x00;
      002204 75 87 00         [24] 7089 	mov	_PCON,#0x00
                                   7090 ;	ecen4330lab7.c:2284: dataEnd = 1;
      002207 75*1E 01         [24] 7091 	mov	_dataEnd,#0x01
                                   7092 ;	ecen4330lab7.c:2285: LCD_string_write("2\n");
      00220A 90r0Ar0B         [24] 7093 	mov	dptr,#___str_64
      00220D 75 F0 80         [24] 7094 	mov	b,#0x80
      002210 12r0Ar19         [24] 7095 	lcall	_LCD_string_write
                                   7096 ;	ecen4330lab7.c:2286: break;
                                   7097 ;	ecen4330lab7.c:2287: case '3':
      002213 80 57            [24] 7098 	sjmp	00120$
      002215                       7099 00114$:
                                   7100 ;	ecen4330lab7.c:2288: validInput = 1;
      002215 75*1D 01         [24] 7101 	mov	_validInput,#0x01
                                   7102 ;	ecen4330lab7.c:2289: TH1 = 0xFA;
      002218 75 8D FA         [24] 7103 	mov	_TH1,#0xfa
                                   7104 ;	ecen4330lab7.c:2290: PCON = 0x00;
      00221B 75 87 00         [24] 7105 	mov	_PCON,#0x00
                                   7106 ;	ecen4330lab7.c:2291: dataEnd = 1;
      00221E 75*1E 01         [24] 7107 	mov	_dataEnd,#0x01
                                   7108 ;	ecen4330lab7.c:2292: LCD_string_write("3\n");
      002221 90r0Ar0E         [24] 7109 	mov	dptr,#___str_65
      002224 75 F0 80         [24] 7110 	mov	b,#0x80
      002227 12r0Ar19         [24] 7111 	lcall	_LCD_string_write
                                   7112 ;	ecen4330lab7.c:2293: break;
                                   7113 ;	ecen4330lab7.c:2294: case '4':
      00222A 80 40            [24] 7114 	sjmp	00120$
      00222C                       7115 00115$:
                                   7116 ;	ecen4330lab7.c:2295: validInput = 1;
      00222C 75*1D 01         [24] 7117 	mov	_validInput,#0x01
                                   7118 ;	ecen4330lab7.c:2296: TH1 = 0xFD;
      00222F 75 8D FD         [24] 7119 	mov	_TH1,#0xfd
                                   7120 ;	ecen4330lab7.c:2297: PCON = 0x00;
      002232 75 87 00         [24] 7121 	mov	_PCON,#0x00
                                   7122 ;	ecen4330lab7.c:2298: dataEnd = 1;
      002235 75*1E 01         [24] 7123 	mov	_dataEnd,#0x01
                                   7124 ;	ecen4330lab7.c:2299: LCD_string_write("4\n");
      002238 90r0Ar11         [24] 7125 	mov	dptr,#___str_66
      00223B 75 F0 80         [24] 7126 	mov	b,#0x80
      00223E 12r0Ar19         [24] 7127 	lcall	_LCD_string_write
                                   7128 ;	ecen4330lab7.c:2300: break;
                                   7129 ;	ecen4330lab7.c:2301: case '5':
      002241 80 29            [24] 7130 	sjmp	00120$
      002243                       7131 00116$:
                                   7132 ;	ecen4330lab7.c:2302: validInput = 1;
      002243 75*1D 01         [24] 7133 	mov	_validInput,#0x01
                                   7134 ;	ecen4330lab7.c:2303: TH1 = 0xFD;
      002246 75 8D FD         [24] 7135 	mov	_TH1,#0xfd
                                   7136 ;	ecen4330lab7.c:2304: PCON = 0x80;
      002249 75 87 80         [24] 7137 	mov	_PCON,#0x80
                                   7138 ;	ecen4330lab7.c:2305: dataEnd = 1;
      00224C 75*1E 01         [24] 7139 	mov	_dataEnd,#0x01
                                   7140 ;	ecen4330lab7.c:2306: LCD_string_write("5\n");
      00224F 90r0Ar14         [24] 7141 	mov	dptr,#___str_67
      002252 75 F0 80         [24] 7142 	mov	b,#0x80
      002255 12r0Ar19         [24] 7143 	lcall	_LCD_string_write
                                   7144 ;	ecen4330lab7.c:2307: break;
                                   7145 ;	ecen4330lab7.c:2308: default:
      002258 80 12            [24] 7146 	sjmp	00120$
      00225A                       7147 00117$:
                                   7148 ;	ecen4330lab7.c:2309: validInput = 0;
      00225A 75*1D 00         [24] 7149 	mov	_validInput,#0x00
                                   7150 ;	ecen4330lab7.c:2310: LCD_string_write("X\n");
      00225D 90r0Ar17         [24] 7151 	mov	dptr,#___str_68
      002260 75 F0 80         [24] 7152 	mov	b,#0x80
      002263 12r0Ar19         [24] 7153 	lcall	_LCD_string_write
                                   7154 ;	ecen4330lab7.c:2311: invalidInput();
      002266 12r0DrD5         [24] 7155 	lcall	_invalidInput
                                   7156 ;	ecen4330lab7.c:2312: dataEnd = 0;
      002269 75*1E 00         [24] 7157 	mov	_dataEnd,#0x00
                                   7158 ;	ecen4330lab7.c:2314: }
      00226C                       7159 00120$:
                                   7160 ;	ecen4330lab7.c:2315: } while(!dataEnd);
      00226C E5*1E            [12] 7161 	mov	a,_dataEnd
      00226E 70 03            [24] 7162 	jnz	00189$
      002270 02r21r07         [24] 7163 	ljmp	00119$
      002273                       7164 00189$:
                                   7165 ;	ecen4330lab7.c:2316: delay(200);
      002273 90 00 C8         [24] 7166 	mov	dptr,#0x00c8
                                   7167 ;	ecen4330lab7.c:2323: }
      002276 02r00r79         [24] 7168 	ljmp	_delay
                                   7169 ;------------------------------------------------------------
                                   7170 ;Allocation info for local variables in function 'UART_dataBits'
                                   7171 ;------------------------------------------------------------
                                   7172 ;	ecen4330lab7.c:2325: void UART_dataBits() {
                                   7173 ;	-----------------------------------------
                                   7174 ;	 function UART_dataBits
                                   7175 ;	-----------------------------------------
      002279                       7176 _UART_dataBits:
                                   7177 ;	ecen4330lab7.c:2326: resetLCD();
      002279 12r0DrAD         [24] 7178 	lcall	_resetLCD
                                   7179 ;	ecen4330lab7.c:2327: do {
      00227C                       7180 00108$:
                                   7181 ;	ecen4330lab7.c:2328: LCD_string_write("\nData Bits\n\n");
      00227C 90r0Ar1A         [24] 7182 	mov	dptr,#___str_69
      00227F 75 F0 80         [24] 7183 	mov	b,#0x80
      002282 12r0Ar19         [24] 7184 	lcall	_LCD_string_write
                                   7185 ;	ecen4330lab7.c:2329: LCD_string_write("(1) 8\n");
      002285 90r0Ar27         [24] 7186 	mov	dptr,#___str_70
      002288 75 F0 80         [24] 7187 	mov	b,#0x80
      00228B 12r0Ar19         [24] 7188 	lcall	_LCD_string_write
                                   7189 ;	ecen4330lab7.c:2330: LCD_string_write("(2) 9\n");
      00228E 90r0Ar2E         [24] 7190 	mov	dptr,#___str_71
      002291 75 F0 80         [24] 7191 	mov	b,#0x80
      002294 12r0Ar19         [24] 7192 	lcall	_LCD_string_write
                                   7193 ;	ecen4330lab7.c:2331: LCD_string_write("\nCurrent: ");
      002297 90r0Ar35         [24] 7194 	mov	dptr,#___str_72
      00229A 75 F0 80         [24] 7195 	mov	b,#0x80
      00229D 12r0Ar19         [24] 7196 	lcall	_LCD_string_write
                                   7197 ;	ecen4330lab7.c:2332: dataBits = SCON & 0xC0;
      0022A0 E5 98            [12] 7198 	mov	a,_SCON
      0022A2 54 C0            [12] 7199 	anl	a,#0xc0
      0022A4 F5*3F            [12] 7200 	mov	_dataBits,a
                                   7201 ;	ecen4330lab7.c:2333: switch(dataBits) {
      0022A6 74 40            [12] 7202 	mov	a,#0x40
      0022A8 B5*3F 02         [24] 7203 	cjne	a,_dataBits,00137$
      0022AB 80 07            [24] 7204 	sjmp	00101$
      0022AD                       7205 00137$:
      0022AD 74 C0            [12] 7206 	mov	a,#0xc0
                                   7207 ;	ecen4330lab7.c:2334: case 0x40:
      0022AF B5*3F 16         [24] 7208 	cjne	a,_dataBits,00103$
      0022B2 80 0B            [24] 7209 	sjmp	00102$
      0022B4                       7210 00101$:
                                   7211 ;	ecen4330lab7.c:2335: LCD_string_write("8\n");
      0022B4 90r0Ar40         [24] 7212 	mov	dptr,#___str_73
      0022B7 75 F0 80         [24] 7213 	mov	b,#0x80
      0022BA 12r0Ar19         [24] 7214 	lcall	_LCD_string_write
                                   7215 ;	ecen4330lab7.c:2336: break;
                                   7216 ;	ecen4330lab7.c:2337: case 0xC0:
      0022BD 80 09            [24] 7217 	sjmp	00103$
      0022BF                       7218 00102$:
                                   7219 ;	ecen4330lab7.c:2338: LCD_string_write("9\n");
      0022BF 90r0Ar43         [24] 7220 	mov	dptr,#___str_74
      0022C2 75 F0 80         [24] 7221 	mov	b,#0x80
      0022C5 12r0Ar19         [24] 7222 	lcall	_LCD_string_write
                                   7223 ;	ecen4330lab7.c:2340: }
      0022C8                       7224 00103$:
                                   7225 ;	ecen4330lab7.c:2341: LCD_string_write("\n   _");
      0022C8 90r0Ar02         [24] 7226 	mov	dptr,#___str_62
      0022CB 75 F0 80         [24] 7227 	mov	b,#0x80
      0022CE 12r0Ar19         [24] 7228 	lcall	_LCD_string_write
                                   7229 ;	ecen4330lab7.c:2342: cursor_x -= 1 * textsize * 6;
      0022D1 E5*0C            [12] 7230 	mov	a,_textsize
      0022D3 75 F0 06         [24] 7231 	mov	b,#0x06
      0022D6 A4               [48] 7232 	mul	ab
      0022D7 FE               [12] 7233 	mov	r6,a
      0022D8 AF F0            [24] 7234 	mov	r7,b
      0022DA E5*08            [12] 7235 	mov	a,_cursor_x
      0022DC C3               [12] 7236 	clr	c
      0022DD 9E               [12] 7237 	subb	a,r6
      0022DE F5*08            [12] 7238 	mov	_cursor_x,a
      0022E0 E5*09            [12] 7239 	mov	a,(_cursor_x + 1)
      0022E2 9F               [12] 7240 	subb	a,r7
      0022E3 F5*09            [12] 7241 	mov	(_cursor_x + 1),a
                                   7242 ;	ecen4330lab7.c:2343: key = keyDetect();
      0022E5 12r0Ar58         [24] 7243 	lcall	_keyDetect
      0022E8 85 82*16         [24] 7244 	mov	_key,dpl
                                   7245 ;	ecen4330lab7.c:2344: switch (key){
      0022EB 74 31            [12] 7246 	mov	a,#0x31
      0022ED B5*16 02         [24] 7247 	cjne	a,_key,00139$
      0022F0 80 07            [24] 7248 	sjmp	00104$
      0022F2                       7249 00139$:
      0022F2 74 32            [12] 7250 	mov	a,#0x32
                                   7251 ;	ecen4330lab7.c:2346: case '1':
      0022F4 B5*16 2A         [24] 7252 	cjne	a,_key,00106$
      0022F7 80 14            [24] 7253 	sjmp	00105$
      0022F9                       7254 00104$:
                                   7255 ;	ecen4330lab7.c:2347: validInput = 1;
      0022F9 75*1D 01         [24] 7256 	mov	_validInput,#0x01
                                   7257 ;	ecen4330lab7.c:2348: SCON = SCON & 0x7F;
      0022FC 53 98 7F         [24] 7258 	anl	_SCON,#0x7f
                                   7259 ;	ecen4330lab7.c:2349: dataEnd = 1;
      0022FF 75*1E 01         [24] 7260 	mov	_dataEnd,#0x01
                                   7261 ;	ecen4330lab7.c:2350: LCD_string_write("1\n");
      002302 90r0Ar08         [24] 7262 	mov	dptr,#___str_63
      002305 75 F0 80         [24] 7263 	mov	b,#0x80
      002308 12r0Ar19         [24] 7264 	lcall	_LCD_string_write
                                   7265 ;	ecen4330lab7.c:2351: break;
                                   7266 ;	ecen4330lab7.c:2352: case '2':
      00230B 80 26            [24] 7267 	sjmp	00109$
      00230D                       7268 00105$:
                                   7269 ;	ecen4330lab7.c:2353: validInput = 1;
      00230D 75*1D 01         [24] 7270 	mov	_validInput,#0x01
                                   7271 ;	ecen4330lab7.c:2354: SCON = SCON | 0xC0;
      002310 43 98 C0         [24] 7272 	orl	_SCON,#0xc0
                                   7273 ;	ecen4330lab7.c:2355: dataEnd = 1;
      002313 75*1E 01         [24] 7274 	mov	_dataEnd,#0x01
                                   7275 ;	ecen4330lab7.c:2356: LCD_string_write("2\n");
      002316 90r0Ar0B         [24] 7276 	mov	dptr,#___str_64
      002319 75 F0 80         [24] 7277 	mov	b,#0x80
      00231C 12r0Ar19         [24] 7278 	lcall	_LCD_string_write
                                   7279 ;	ecen4330lab7.c:2357: break;
                                   7280 ;	ecen4330lab7.c:2358: default:
      00231F 80 12            [24] 7281 	sjmp	00109$
      002321                       7282 00106$:
                                   7283 ;	ecen4330lab7.c:2359: validInput = 0;
      002321 75*1D 00         [24] 7284 	mov	_validInput,#0x00
                                   7285 ;	ecen4330lab7.c:2360: LCD_string_write("X\n");
      002324 90r0Ar17         [24] 7286 	mov	dptr,#___str_68
      002327 75 F0 80         [24] 7287 	mov	b,#0x80
      00232A 12r0Ar19         [24] 7288 	lcall	_LCD_string_write
                                   7289 ;	ecen4330lab7.c:2361: invalidInput();
      00232D 12r0DrD5         [24] 7290 	lcall	_invalidInput
                                   7291 ;	ecen4330lab7.c:2362: dataEnd = 0;
      002330 75*1E 00         [24] 7292 	mov	_dataEnd,#0x00
                                   7293 ;	ecen4330lab7.c:2364: }
      002333                       7294 00109$:
                                   7295 ;	ecen4330lab7.c:2365: } while(!dataEnd);
      002333 E5*1E            [12] 7296 	mov	a,_dataEnd
      002335 70 03            [24] 7297 	jnz	00141$
      002337 02r22r7C         [24] 7298 	ljmp	00108$
      00233A                       7299 00141$:
                                   7300 ;	ecen4330lab7.c:2366: delay(200);
      00233A 90 00 C8         [24] 7301 	mov	dptr,#0x00c8
                                   7302 ;	ecen4330lab7.c:2373: }
      00233D 02r00r79         [24] 7303 	ljmp	_delay
                                   7304 ;------------------------------------------------------------
                                   7305 ;Allocation info for local variables in function 'UART_parity'
                                   7306 ;------------------------------------------------------------
                                   7307 ;	ecen4330lab7.c:2376: void UART_parity() {
                                   7308 ;	-----------------------------------------
                                   7309 ;	 function UART_parity
                                   7310 ;	-----------------------------------------
      002340                       7311 _UART_parity:
                                   7312 ;	ecen4330lab7.c:2377: resetLCD();
      002340 12r0DrAD         [24] 7313 	lcall	_resetLCD
                                   7314 ;	ecen4330lab7.c:2378: do {
      002343                       7315 00110$:
                                   7316 ;	ecen4330lab7.c:2379: LCD_string_write("\nParity\n\n");
      002343 90r0Ar46         [24] 7317 	mov	dptr,#___str_75
      002346 75 F0 80         [24] 7318 	mov	b,#0x80
      002349 12r0Ar19         [24] 7319 	lcall	_LCD_string_write
                                   7320 ;	ecen4330lab7.c:2380: LCD_string_write("(1) Even\n");
      00234C 90r0Ar50         [24] 7321 	mov	dptr,#___str_76
      00234F 75 F0 80         [24] 7322 	mov	b,#0x80
      002352 12r0Ar19         [24] 7323 	lcall	_LCD_string_write
                                   7324 ;	ecen4330lab7.c:2381: LCD_string_write("(2) Odd\n");
      002355 90r0Ar5A         [24] 7325 	mov	dptr,#___str_77
      002358 75 F0 80         [24] 7326 	mov	b,#0x80
      00235B 12r0Ar19         [24] 7327 	lcall	_LCD_string_write
                                   7328 ;	ecen4330lab7.c:2382: LCD_string_write("(3) None\n");
      00235E 90r0Ar63         [24] 7329 	mov	dptr,#___str_78
      002361 75 F0 80         [24] 7330 	mov	b,#0x80
      002364 12r0Ar19         [24] 7331 	lcall	_LCD_string_write
                                   7332 ;	ecen4330lab7.c:2383: LCD_string_write("\nCurrent: ");
      002367 90r0Ar35         [24] 7333 	mov	dptr,#___str_72
      00236A 75 F0 80         [24] 7334 	mov	b,#0x80
      00236D 12r0Ar19         [24] 7335 	lcall	_LCD_string_write
                                   7336 ;	ecen4330lab7.c:2384: switch(parity) {
      002370 E4               [12] 7337 	clr	a
      002371 B5*40 02         [24] 7338 	cjne	a,_parity,00147$
      002374 80 0E            [24] 7339 	sjmp	00101$
      002376                       7340 00147$:
      002376 74 01            [12] 7341 	mov	a,#0x01
      002378 B5*40 02         [24] 7342 	cjne	a,_parity,00148$
      00237B 80 12            [24] 7343 	sjmp	00102$
      00237D                       7344 00148$:
      00237D 74 02            [12] 7345 	mov	a,#0x02
                                   7346 ;	ecen4330lab7.c:2385: case 0:
      00237F B5*40 21         [24] 7347 	cjne	a,_parity,00104$
      002382 80 16            [24] 7348 	sjmp	00103$
      002384                       7349 00101$:
                                   7350 ;	ecen4330lab7.c:2386: LCD_string_write("Even\n");
      002384 90r0Ar6D         [24] 7351 	mov	dptr,#___str_79
      002387 75 F0 80         [24] 7352 	mov	b,#0x80
      00238A 12r0Ar19         [24] 7353 	lcall	_LCD_string_write
                                   7354 ;	ecen4330lab7.c:2387: break;
                                   7355 ;	ecen4330lab7.c:2388: case 1:
      00238D 80 14            [24] 7356 	sjmp	00104$
      00238F                       7357 00102$:
                                   7358 ;	ecen4330lab7.c:2389: LCD_string_write("Odd\n");
      00238F 90r0Ar73         [24] 7359 	mov	dptr,#___str_80
      002392 75 F0 80         [24] 7360 	mov	b,#0x80
      002395 12r0Ar19         [24] 7361 	lcall	_LCD_string_write
                                   7362 ;	ecen4330lab7.c:2390: break;
                                   7363 ;	ecen4330lab7.c:2391: case 2:
      002398 80 09            [24] 7364 	sjmp	00104$
      00239A                       7365 00103$:
                                   7366 ;	ecen4330lab7.c:2392: LCD_string_write("None\n");
      00239A 90r0Ar78         [24] 7367 	mov	dptr,#___str_81
      00239D 75 F0 80         [24] 7368 	mov	b,#0x80
      0023A0 12r0Ar19         [24] 7369 	lcall	_LCD_string_write
                                   7370 ;	ecen4330lab7.c:2394: }
      0023A3                       7371 00104$:
                                   7372 ;	ecen4330lab7.c:2395: LCD_string_write("\n   _");
      0023A3 90r0Ar02         [24] 7373 	mov	dptr,#___str_62
      0023A6 75 F0 80         [24] 7374 	mov	b,#0x80
      0023A9 12r0Ar19         [24] 7375 	lcall	_LCD_string_write
                                   7376 ;	ecen4330lab7.c:2396: cursor_x -= 1 * textsize * 6;
      0023AC E5*0C            [12] 7377 	mov	a,_textsize
      0023AE 75 F0 06         [24] 7378 	mov	b,#0x06
      0023B1 A4               [48] 7379 	mul	ab
      0023B2 FE               [12] 7380 	mov	r6,a
      0023B3 AF F0            [24] 7381 	mov	r7,b
      0023B5 E5*08            [12] 7382 	mov	a,_cursor_x
      0023B7 C3               [12] 7383 	clr	c
      0023B8 9E               [12] 7384 	subb	a,r6
      0023B9 F5*08            [12] 7385 	mov	_cursor_x,a
      0023BB E5*09            [12] 7386 	mov	a,(_cursor_x + 1)
      0023BD 9F               [12] 7387 	subb	a,r7
      0023BE F5*09            [12] 7388 	mov	(_cursor_x + 1),a
                                   7389 ;	ecen4330lab7.c:2397: key = keyDetect();
      0023C0 12r0Ar58         [24] 7390 	lcall	_keyDetect
      0023C3 85 82*16         [24] 7391 	mov	_key,dpl
                                   7392 ;	ecen4330lab7.c:2398: switch (key){
      0023C6 74 31            [12] 7393 	mov	a,#0x31
      0023C8 B5*16 02         [24] 7394 	cjne	a,_key,00150$
      0023CB 80 0E            [24] 7395 	sjmp	00105$
      0023CD                       7396 00150$:
      0023CD 74 32            [12] 7397 	mov	a,#0x32
      0023CF B5*16 02         [24] 7398 	cjne	a,_key,00151$
      0023D2 80 1B            [24] 7399 	sjmp	00106$
      0023D4                       7400 00151$:
      0023D4 74 33            [12] 7401 	mov	a,#0x33
                                   7402 ;	ecen4330lab7.c:2400: case '1':
      0023D6 B5*16 3E         [24] 7403 	cjne	a,_key,00108$
      0023D9 80 28            [24] 7404 	sjmp	00107$
      0023DB                       7405 00105$:
                                   7406 ;	ecen4330lab7.c:2401: validInput = 1;
      0023DB 75*1D 01         [24] 7407 	mov	_validInput,#0x01
                                   7408 ;	ecen4330lab7.c:2402: parity = 0;
      0023DE 75*40 00         [24] 7409 	mov	_parity,#0x00
                                   7410 ;	ecen4330lab7.c:2403: dataEnd = 1;
      0023E1 75*1E 01         [24] 7411 	mov	_dataEnd,#0x01
                                   7412 ;	ecen4330lab7.c:2404: LCD_string_write("1\n");
      0023E4 90r0Ar08         [24] 7413 	mov	dptr,#___str_63
      0023E7 75 F0 80         [24] 7414 	mov	b,#0x80
      0023EA 12r0Ar19         [24] 7415 	lcall	_LCD_string_write
                                   7416 ;	ecen4330lab7.c:2405: break;
                                   7417 ;	ecen4330lab7.c:2406: case '2':
      0023ED 80 3A            [24] 7418 	sjmp	00111$
      0023EF                       7419 00106$:
                                   7420 ;	ecen4330lab7.c:2407: validInput = 1;
      0023EF 75*1D 01         [24] 7421 	mov	_validInput,#0x01
                                   7422 ;	ecen4330lab7.c:2408: parity = 1;
      0023F2 75*40 01         [24] 7423 	mov	_parity,#0x01
                                   7424 ;	ecen4330lab7.c:2409: dataEnd = 1;
      0023F5 75*1E 01         [24] 7425 	mov	_dataEnd,#0x01
                                   7426 ;	ecen4330lab7.c:2410: LCD_string_write("2\n");
      0023F8 90r0Ar0B         [24] 7427 	mov	dptr,#___str_64
      0023FB 75 F0 80         [24] 7428 	mov	b,#0x80
      0023FE 12r0Ar19         [24] 7429 	lcall	_LCD_string_write
                                   7430 ;	ecen4330lab7.c:2411: break;
                                   7431 ;	ecen4330lab7.c:2412: case '3':
      002401 80 26            [24] 7432 	sjmp	00111$
      002403                       7433 00107$:
                                   7434 ;	ecen4330lab7.c:2413: validInput = 1;
      002403 75*1D 01         [24] 7435 	mov	_validInput,#0x01
                                   7436 ;	ecen4330lab7.c:2414: parity = 2;
      002406 75*40 02         [24] 7437 	mov	_parity,#0x02
                                   7438 ;	ecen4330lab7.c:2415: dataEnd = 1;
      002409 75*1E 01         [24] 7439 	mov	_dataEnd,#0x01
                                   7440 ;	ecen4330lab7.c:2416: LCD_string_write("3\n");
      00240C 90r0Ar0E         [24] 7441 	mov	dptr,#___str_65
      00240F 75 F0 80         [24] 7442 	mov	b,#0x80
      002412 12r0Ar19         [24] 7443 	lcall	_LCD_string_write
                                   7444 ;	ecen4330lab7.c:2417: break;
                                   7445 ;	ecen4330lab7.c:2418: default:
      002415 80 12            [24] 7446 	sjmp	00111$
      002417                       7447 00108$:
                                   7448 ;	ecen4330lab7.c:2419: validInput = 0;
      002417 75*1D 00         [24] 7449 	mov	_validInput,#0x00
                                   7450 ;	ecen4330lab7.c:2420: LCD_string_write("X\n");
      00241A 90r0Ar17         [24] 7451 	mov	dptr,#___str_68
      00241D 75 F0 80         [24] 7452 	mov	b,#0x80
      002420 12r0Ar19         [24] 7453 	lcall	_LCD_string_write
                                   7454 ;	ecen4330lab7.c:2421: invalidInput();
      002423 12r0DrD5         [24] 7455 	lcall	_invalidInput
                                   7456 ;	ecen4330lab7.c:2422: dataEnd = 0;
      002426 75*1E 00         [24] 7457 	mov	_dataEnd,#0x00
                                   7458 ;	ecen4330lab7.c:2424: }
      002429                       7459 00111$:
                                   7460 ;	ecen4330lab7.c:2425: } while(!dataEnd);
      002429 E5*1E            [12] 7461 	mov	a,_dataEnd
      00242B 70 03            [24] 7462 	jnz	00153$
      00242D 02r23r43         [24] 7463 	ljmp	00110$
      002430                       7464 00153$:
                                   7465 ;	ecen4330lab7.c:2426: delay(200);
      002430 90 00 C8         [24] 7466 	mov	dptr,#0x00c8
                                   7467 ;	ecen4330lab7.c:2427: }
      002433 02r00r79         [24] 7468 	ljmp	_delay
                                   7469 ;------------------------------------------------------------
                                   7470 ;Allocation info for local variables in function 'UART_send'
                                   7471 ;------------------------------------------------------------
                                   7472 ;	ecen4330lab7.c:2435: void UART_send() {
                                   7473 ;	-----------------------------------------
                                   7474 ;	 function UART_send
                                   7475 ;	-----------------------------------------
      002436                       7476 _UART_send:
                                   7477 ;	ecen4330lab7.c:2436: resetLCD();
      002436 12r0DrAD         [24] 7478 	lcall	_resetLCD
                                   7479 ;	ecen4330lab7.c:2439: LCD_string_write("\nEnter\ncharacter\nto send:\n\n   _");
      002439 90r0Ar7E         [24] 7480 	mov	dptr,#___str_82
      00243C 75 F0 80         [24] 7481 	mov	b,#0x80
      00243F 12r0Ar19         [24] 7482 	lcall	_LCD_string_write
                                   7483 ;	ecen4330lab7.c:2442: cursor_x -= 1 * textsize * 6;
      002442 E5*0C            [12] 7484 	mov	a,_textsize
      002444 75 F0 06         [24] 7485 	mov	b,#0x06
      002447 A4               [48] 7486 	mul	ab
      002448 FE               [12] 7487 	mov	r6,a
      002449 AF F0            [24] 7488 	mov	r7,b
      00244B E5*08            [12] 7489 	mov	a,_cursor_x
      00244D C3               [12] 7490 	clr	c
      00244E 9E               [12] 7491 	subb	a,r6
      00244F F5*08            [12] 7492 	mov	_cursor_x,a
      002451 E5*09            [12] 7493 	mov	a,(_cursor_x + 1)
      002453 9F               [12] 7494 	subb	a,r7
      002454 F5*09            [12] 7495 	mov	(_cursor_x + 1),a
                                   7496 ;	ecen4330lab7.c:2445: key = keyDetect();
      002456 12r0Ar58         [24] 7497 	lcall	_keyDetect
                                   7498 ;	ecen4330lab7.c:2446: write(key);
      002459 85 82*16         [24] 7499 	mov  _key,dpl
      00245C 12r09rB3         [24] 7500 	lcall	_write
                                   7501 ;	ecen4330lab7.c:2447: SBUF = key;
      00245F 85*16 99         [24] 7502 	mov	_SBUF,_key
                                   7503 ;	ecen4330lab7.c:2448: UART_transmit();
      002462 12r00r73         [24] 7504 	lcall	_UART_transmit
                                   7505 ;	ecen4330lab7.c:2449: delay(200);
      002465 90 00 C8         [24] 7506 	mov	dptr,#0x00c8
      002468 12r00r79         [24] 7507 	lcall	_delay
                                   7508 ;	ecen4330lab7.c:2450: resetLCD();
                                   7509 ;	ecen4330lab7.c:2451: }
      00246B 02r0DrAD         [24] 7510 	ljmp	_resetLCD
                                   7511 ;------------------------------------------------------------
                                   7512 ;Allocation info for local variables in function 'UART'
                                   7513 ;------------------------------------------------------------
                                   7514 ;	ecen4330lab7.c:2465: void UART(){
                                   7515 ;	-----------------------------------------
                                   7516 ;	 function UART
                                   7517 ;	-----------------------------------------
      00246E                       7518 _UART:
                                   7519 ;	ecen4330lab7.c:2468: do{
      00246E                       7520 00108$:
                                   7521 ;	ecen4330lab7.c:2469: resetLCD();
      00246E 12r0DrAD         [24] 7522 	lcall	_resetLCD
                                   7523 ;	ecen4330lab7.c:2470: LCD_string_write("\n(1) Data Rate");
      002471 90r0Ar9E         [24] 7524 	mov	dptr,#___str_83
      002474 75 F0 80         [24] 7525 	mov	b,#0x80
      002477 12r0Ar19         [24] 7526 	lcall	_LCD_string_write
                                   7527 ;	ecen4330lab7.c:2471: LCD_string_write("\n(2) # of Data\n    Bits");
      00247A 90r0ArAD         [24] 7528 	mov	dptr,#___str_84
      00247D 75 F0 80         [24] 7529 	mov	b,#0x80
      002480 12r0Ar19         [24] 7530 	lcall	_LCD_string_write
                                   7531 ;	ecen4330lab7.c:2472: LCD_string_write("\n(3) Parity");
      002483 90r0ArC5         [24] 7532 	mov	dptr,#___str_85
      002486 75 F0 80         [24] 7533 	mov	b,#0x80
      002489 12r0Ar19         [24] 7534 	lcall	_LCD_string_write
                                   7535 ;	ecen4330lab7.c:2473: LCD_string_write("\n(4) Send Data");
      00248C 90r0ArD1         [24] 7536 	mov	dptr,#___str_86
      00248F 75 F0 80         [24] 7537 	mov	b,#0x80
      002492 12r0Ar19         [24] 7538 	lcall	_LCD_string_write
                                   7539 ;	ecen4330lab7.c:2474: LCD_string_write("\n(E) End\n");
      002495 90r0ArE0         [24] 7540 	mov	dptr,#___str_87
      002498 75 F0 80         [24] 7541 	mov	b,#0x80
      00249B 12r0Ar19         [24] 7542 	lcall	_LCD_string_write
                                   7543 ;	ecen4330lab7.c:2477: key = keyDetect();
      00249E 12r0Ar58         [24] 7544 	lcall	_keyDetect
      0024A1 85 82*16         [24] 7545 	mov	_key,dpl
                                   7546 ;	ecen4330lab7.c:2478: switch (key){
      0024A4 74 31            [12] 7547 	mov	a,#0x31
      0024A6 B5*16 02         [24] 7548 	cjne	a,_key,00137$
      0024A9 80 1C            [24] 7549 	sjmp	00101$
      0024AB                       7550 00137$:
      0024AB 74 32            [12] 7551 	mov	a,#0x32
      0024AD B5*16 02         [24] 7552 	cjne	a,_key,00138$
      0024B0 80 1D            [24] 7553 	sjmp	00102$
      0024B2                       7554 00138$:
      0024B2 74 33            [12] 7555 	mov	a,#0x33
      0024B4 B5*16 02         [24] 7556 	cjne	a,_key,00139$
      0024B7 80 1E            [24] 7557 	sjmp	00103$
      0024B9                       7558 00139$:
      0024B9 74 34            [12] 7559 	mov	a,#0x34
      0024BB B5*16 02         [24] 7560 	cjne	a,_key,00140$
      0024BE 80 1F            [24] 7561 	sjmp	00104$
      0024C0                       7562 00140$:
      0024C0 74 45            [12] 7563 	mov	a,#0x45
                                   7564 ;	ecen4330lab7.c:2481: case '1':
      0024C2 B5*16 44         [24] 7565 	cjne	a,_key,00106$
      0024C5 80 20            [24] 7566 	sjmp	00105$
      0024C7                       7567 00101$:
                                   7568 ;	ecen4330lab7.c:2482: UART_dataRate();
      0024C7 12r21r04         [24] 7569 	lcall	_UART_dataRate
                                   7570 ;	ecen4330lab7.c:2483: dataEnd = 0;
      0024CA 75*1E 00         [24] 7571 	mov	_dataEnd,#0x00
                                   7572 ;	ecen4330lab7.c:2484: break;
                                   7573 ;	ecen4330lab7.c:2487: case '2':
      0024CD 80 40            [24] 7574 	sjmp	00109$
      0024CF                       7575 00102$:
                                   7576 ;	ecen4330lab7.c:2488: UART_dataBits();
      0024CF 12r22r79         [24] 7577 	lcall	_UART_dataBits
                                   7578 ;	ecen4330lab7.c:2489: dataEnd = 0;
      0024D2 75*1E 00         [24] 7579 	mov	_dataEnd,#0x00
                                   7580 ;	ecen4330lab7.c:2490: break;
                                   7581 ;	ecen4330lab7.c:2493: case '3':
      0024D5 80 38            [24] 7582 	sjmp	00109$
      0024D7                       7583 00103$:
                                   7584 ;	ecen4330lab7.c:2494: UART_parity();
      0024D7 12r23r40         [24] 7585 	lcall	_UART_parity
                                   7586 ;	ecen4330lab7.c:2495: dataEnd = 0;
      0024DA 75*1E 00         [24] 7587 	mov	_dataEnd,#0x00
                                   7588 ;	ecen4330lab7.c:2496: break;
                                   7589 ;	ecen4330lab7.c:2499: case '4':
      0024DD 80 30            [24] 7590 	sjmp	00109$
      0024DF                       7591 00104$:
                                   7592 ;	ecen4330lab7.c:2500: UART_send();
      0024DF 12r24r36         [24] 7593 	lcall	_UART_send
                                   7594 ;	ecen4330lab7.c:2501: dataEnd = 0;
      0024E2 75*1E 00         [24] 7595 	mov	_dataEnd,#0x00
                                   7596 ;	ecen4330lab7.c:2502: break;
                                   7597 ;	ecen4330lab7.c:2505: case 'E':
      0024E5 80 28            [24] 7598 	sjmp	00109$
      0024E7                       7599 00105$:
                                   7600 ;	ecen4330lab7.c:2506: resetLCD1();
      0024E7 12r20rDC         [24] 7601 	lcall	_resetLCD1
                                   7602 ;	ecen4330lab7.c:2507: setTextColor(WHITE, BLACK);
      0024EA E4               [12] 7603 	clr	a
      0024EB F5*00            [12] 7604 	mov	_setTextColor_PARM_2,a
      0024ED F5*01            [12] 7605 	mov	(_setTextColor_PARM_2 + 1),a
      0024EF 90 FF FF         [24] 7606 	mov	dptr,#0xffff
      0024F2 12r03r2A         [24] 7607 	lcall	_setTextColor
                                   7608 ;	ecen4330lab7.c:2508: LCD_string_write("\nReturning to\nmain menu.");
      0024F5 90r08rEC         [24] 7609 	mov	dptr,#___str_44
      0024F8 75 F0 80         [24] 7610 	mov	b,#0x80
      0024FB 12r0Ar19         [24] 7611 	lcall	_LCD_string_write
                                   7612 ;	ecen4330lab7.c:2509: delay(200);
      0024FE 90 00 C8         [24] 7613 	mov	dptr,#0x00c8
      002501 12r00r79         [24] 7614 	lcall	_delay
                                   7615 ;	ecen4330lab7.c:2510: dataEnd = 1;
      002504 75*1E 01         [24] 7616 	mov	_dataEnd,#0x01
                                   7617 ;	ecen4330lab7.c:2511: break;
                                   7618 ;	ecen4330lab7.c:2514: default:
      002507 80 06            [24] 7619 	sjmp	00109$
      002509                       7620 00106$:
                                   7621 ;	ecen4330lab7.c:2515: invalidInput();
      002509 12r0DrD5         [24] 7622 	lcall	_invalidInput
                                   7623 ;	ecen4330lab7.c:2516: dataEnd = 0;
      00250C 75*1E 00         [24] 7624 	mov	_dataEnd,#0x00
                                   7625 ;	ecen4330lab7.c:2518: }
      00250F                       7626 00109$:
                                   7627 ;	ecen4330lab7.c:2519: } while(dataEnd == 0);
      00250F E5*1E            [12] 7628 	mov	a,_dataEnd
      002511 70 03            [24] 7629 	jnz	00142$
      002513 02r24r6E         [24] 7630 	ljmp	00108$
      002516                       7631 00142$:
                                   7632 ;	ecen4330lab7.c:2520: }
      002516 22               [24] 7633 	ret
                                   7634 ;------------------------------------------------------------
                                   7635 ;Allocation info for local variables in function 'LCD_mainMenu'
                                   7636 ;------------------------------------------------------------
                                   7637 ;__1310720043              Allocated to registers 
                                   7638 ;__1310720044              Allocated to registers 
                                   7639 ;map_address               Allocated to registers 
                                   7640 ;d                         Allocated to registers 
                                   7641 ;__1966080046              Allocated to registers 
                                   7642 ;__1966080047              Allocated to registers 
                                   7643 ;map_address               Allocated to registers 
                                   7644 ;d                         Allocated to registers 
                                   7645 ;__1966080049              Allocated to registers 
                                   7646 ;__1966080050              Allocated to registers 
                                   7647 ;map_address               Allocated to registers 
                                   7648 ;d                         Allocated to registers 
                                   7649 ;__1966080052              Allocated to registers 
                                   7650 ;__1966080053              Allocated to registers 
                                   7651 ;map_address               Allocated to registers 
                                   7652 ;d                         Allocated to registers 
                                   7653 ;__1966080055              Allocated to registers 
                                   7654 ;__1966080056              Allocated to registers 
                                   7655 ;map_address               Allocated to registers 
                                   7656 ;d                         Allocated to registers 
                                   7657 ;__1966080058              Allocated to registers 
                                   7658 ;__1966080059              Allocated to registers 
                                   7659 ;map_address               Allocated to registers 
                                   7660 ;d                         Allocated to registers 
                                   7661 ;__1966080061              Allocated to registers 
                                   7662 ;__1966080062              Allocated to registers 
                                   7663 ;map_address               Allocated to registers 
                                   7664 ;d                         Allocated to registers 
                                   7665 ;__1966080064              Allocated to registers 
                                   7666 ;__1966080065              Allocated to registers 
                                   7667 ;map_address               Allocated to registers 
                                   7668 ;d                         Allocated to registers 
                                   7669 ;__1966080067              Allocated to registers 
                                   7670 ;__1966080068              Allocated to registers 
                                   7671 ;map_address               Allocated to registers 
                                   7672 ;d                         Allocated to registers 
                                   7673 ;------------------------------------------------------------
                                   7674 ;	ecen4330lab7.c:2544: void LCD_mainMenu() {
                                   7675 ;	-----------------------------------------
                                   7676 ;	 function LCD_mainMenu
                                   7677 ;	-----------------------------------------
      002517                       7678 _LCD_mainMenu:
                                   7679 ;	ecen4330lab7.c:2546: key = 0;
      002517 75*16 00         [24] 7680 	mov	_key,#0x00
                                   7681 ;	ecen4330lab7.c:2547: iowrite8(seg7_address, 0xC0);
      00251A 85*04 82         [24] 7682 	mov	dpl,_seg7_address
      00251D 85*05 83         [24] 7683 	mov	dph,(_seg7_address + 1)
                                   7684 ;	ecen4330lab7.c:189: IOM = 1;
                                   7685 ;	assignBit
      002520 D2 B4            [12] 7686 	setb	_P3_4
                                   7687 ;	ecen4330lab7.c:190: *map_address = d;
      002522 74 C0            [12] 7688 	mov	a,#0xc0
      002524 F0               [24] 7689 	movx	@dptr,a
                                   7690 ;	ecen4330lab7.c:191: IOM = 0;
                                   7691 ;	assignBit
      002525 C2 B4            [12] 7692 	clr	_P3_4
                                   7693 ;	ecen4330lab7.c:2550: resetLCD();
      002527 12r0DrAD         [24] 7694 	lcall	_resetLCD
                                   7695 ;	ecen4330lab7.c:2551: setTextColor(GREEN, BLACK);
      00252A E4               [12] 7696 	clr	a
      00252B F5*00            [12] 7697 	mov	_setTextColor_PARM_2,a
      00252D F5*01            [12] 7698 	mov	(_setTextColor_PARM_2 + 1),a
      00252F 90 07 E0         [24] 7699 	mov	dptr,#0x07e0
      002532 12r03r2A         [24] 7700 	lcall	_setTextColor
                                   7701 ;	ecen4330lab7.c:2552: LCD_string_write("   Cameron\n   Biniamow\n");
      002535 90r0ArEA         [24] 7702 	mov	dptr,#___str_88
      002538 75 F0 80         [24] 7703 	mov	b,#0x80
      00253B 12r0Ar19         [24] 7704 	lcall	_LCD_string_write
                                   7705 ;	ecen4330lab7.c:2553: LCD_string_write("  ECEN-4330\n\n");
      00253E 90r0Br02         [24] 7706 	mov	dptr,#___str_89
      002541 75 F0 80         [24] 7707 	mov	b,#0x80
      002544 12r0Ar19         [24] 7708 	lcall	_LCD_string_write
                                   7709 ;	ecen4330lab7.c:2556: setTextColor(WHITE, BLACK);
      002547 E4               [12] 7710 	clr	a
      002548 F5*00            [12] 7711 	mov	_setTextColor_PARM_2,a
      00254A F5*01            [12] 7712 	mov	(_setTextColor_PARM_2 + 1),a
      00254C 90 FF FF         [24] 7713 	mov	dptr,#0xffff
      00254F 12r03r2A         [24] 7714 	lcall	_setTextColor
                                   7715 ;	ecen4330lab7.c:2557: LCD_string_write("(A) RAM CHECK\n");
      002552 90r0Br10         [24] 7716 	mov	dptr,#___str_90
      002555 75 F0 80         [24] 7717 	mov	b,#0x80
      002558 12r0Ar19         [24] 7718 	lcall	_LCD_string_write
                                   7719 ;	ecen4330lab7.c:2558: LCD_string_write("(B) MOVE\n");
      00255B 90r0Br1F         [24] 7720 	mov	dptr,#___str_91
      00255E 75 F0 80         [24] 7721 	mov	b,#0x80
      002561 12r0Ar19         [24] 7722 	lcall	_LCD_string_write
                                   7723 ;	ecen4330lab7.c:2559: LCD_string_write("(C) COUNT\n");
      002564 90r0Br29         [24] 7724 	mov	dptr,#___str_92
      002567 75 F0 80         [24] 7725 	mov	b,#0x80
      00256A 12r0Ar19         [24] 7726 	lcall	_LCD_string_write
                                   7727 ;	ecen4330lab7.c:2560: LCD_string_write("(D) DUMP\n");
      00256D 90r0Br34         [24] 7728 	mov	dptr,#___str_93
      002570 75 F0 80         [24] 7729 	mov	b,#0x80
      002573 12r0Ar19         [24] 7730 	lcall	_LCD_string_write
                                   7731 ;	ecen4330lab7.c:2561: LCD_string_write("(E) EDIT\n");
      002576 90r0Br3E         [24] 7732 	mov	dptr,#___str_94
      002579 75 F0 80         [24] 7733 	mov	b,#0x80
      00257C 12r0Ar19         [24] 7734 	lcall	_LCD_string_write
                                   7735 ;	ecen4330lab7.c:2562: LCD_string_write("(F) FIND\n");
      00257F 90r0Br48         [24] 7736 	mov	dptr,#___str_95
      002582 75 F0 80         [24] 7737 	mov	b,#0x80
      002585 12r0Ar19         [24] 7738 	lcall	_LCD_string_write
                                   7739 ;	ecen4330lab7.c:2564: LCD_string_write("(1) UART\n");
      002588 90r0Br52         [24] 7740 	mov	dptr,#___str_96
      00258B 75 F0 80         [24] 7741 	mov	b,#0x80
      00258E 12r0Ar19         [24] 7742 	lcall	_LCD_string_write
                                   7743 ;	ecen4330lab7.c:2565: setTextColor(WHITE, BLACK);
      002591 E4               [12] 7744 	clr	a
      002592 F5*00            [12] 7745 	mov	_setTextColor_PARM_2,a
      002594 F5*01            [12] 7746 	mov	(_setTextColor_PARM_2 + 1),a
      002596 90 FF FF         [24] 7747 	mov	dptr,#0xffff
      002599 12r03r2A         [24] 7748 	lcall	_setTextColor
                                   7749 ;	ecen4330lab7.c:2566: setTextSize(1);
      00259C 75 82 01         [24] 7750 	mov	dpl,#0x01
      00259F 12r03r37         [24] 7751 	lcall	_setTextSize
                                   7752 ;	ecen4330lab7.c:2567: setCursor(3, 304);
      0025A2 75*00 30         [24] 7753 	mov	_setCursor_PARM_2,#0x30
      0025A5 75*01 01         [24] 7754 	mov	(_setCursor_PARM_2 + 1),#0x01
      0025A8 90 00 03         [24] 7755 	mov	dptr,#0x0003
      0025AB 12r03r1D         [24] 7756 	lcall	_setCursor
                                   7757 ;	ecen4330lab7.c:2568: LCD_string_write("Spring 2021");
      0025AE 90r0Br5C         [24] 7758 	mov	dptr,#___str_97
      0025B1 75 F0 80         [24] 7759 	mov	b,#0x80
      0025B4 12r0Ar19         [24] 7760 	lcall	_LCD_string_write
                                   7761 ;	ecen4330lab7.c:2569: rtcPrint();
      0025B7 12r01rC1         [24] 7762 	lcall	_rtcPrint
                                   7763 ;	ecen4330lab7.c:2572: key = keyDetect();
      0025BA 12r0Ar58         [24] 7764 	lcall	_keyDetect
      0025BD 85 82*16         [24] 7765 	mov	_key,dpl
                                   7766 ;	ecen4330lab7.c:2573: switch (key)
      0025C0 74 31            [12] 7767 	mov	a,#0x31
      0025C2 B5*16 03         [24] 7768 	cjne	a,_key,00149$
      0025C5 02r26r55         [24] 7769 	ljmp	00107$
      0025C8                       7770 00149$:
      0025C8 74 41            [12] 7771 	mov	a,#0x41
      0025CA B5*16 02         [24] 7772 	cjne	a,_key,00150$
      0025CD 80 26            [24] 7773 	sjmp	00101$
      0025CF                       7774 00150$:
      0025CF 74 42            [12] 7775 	mov	a,#0x42
      0025D1 B5*16 02         [24] 7776 	cjne	a,_key,00151$
      0025D4 80 2F            [24] 7777 	sjmp	00102$
      0025D6                       7778 00151$:
      0025D6 74 43            [12] 7779 	mov	a,#0x43
      0025D8 B5*16 02         [24] 7780 	cjne	a,_key,00152$
      0025DB 80 38            [24] 7781 	sjmp	00103$
      0025DD                       7782 00152$:
      0025DD 74 44            [12] 7783 	mov	a,#0x44
      0025DF B5*16 02         [24] 7784 	cjne	a,_key,00153$
      0025E2 80 41            [24] 7785 	sjmp	00104$
      0025E4                       7786 00153$:
      0025E4 74 45            [12] 7787 	mov	a,#0x45
      0025E6 B5*16 02         [24] 7788 	cjne	a,_key,00154$
      0025E9 80 4A            [24] 7789 	sjmp	00105$
      0025EB                       7790 00154$:
      0025EB 74 46            [12] 7791 	mov	a,#0x46
      0025ED B5*16 02         [24] 7792 	cjne	a,_key,00155$
      0025F0 80 53            [24] 7793 	sjmp	00106$
      0025F2                       7794 00155$:
      0025F2 02r26r65         [24] 7795 	ljmp	00108$
                                   7796 ;	ecen4330lab7.c:2575: case 'A':
      0025F5                       7797 00101$:
                                   7798 ;	ecen4330lab7.c:2576: iowrite8(seg7_address, 0x88);
      0025F5 85*04 82         [24] 7799 	mov	dpl,_seg7_address
      0025F8 85*05 83         [24] 7800 	mov	dph,(_seg7_address + 1)
                                   7801 ;	ecen4330lab7.c:189: IOM = 1;
                                   7802 ;	assignBit
      0025FB D2 B4            [12] 7803 	setb	_P3_4
                                   7804 ;	ecen4330lab7.c:190: *map_address = d;
      0025FD 74 88            [12] 7805 	mov	a,#0x88
      0025FF F0               [24] 7806 	movx	@dptr,a
                                   7807 ;	ecen4330lab7.c:191: IOM = 0;
                                   7808 ;	assignBit
      002600 C2 B4            [12] 7809 	clr	_P3_4
                                   7810 ;	ecen4330lab7.c:2577: RAM_CHECK();
                                   7811 ;	ecen4330lab7.c:2578: break;
      002602 02r11r01         [24] 7812 	ljmp	_RAM_CHECK
                                   7813 ;	ecen4330lab7.c:2579: case 'B':
      002605                       7814 00102$:
                                   7815 ;	ecen4330lab7.c:2580: iowrite8(seg7_address, 0x83);
      002605 85*04 82         [24] 7816 	mov	dpl,_seg7_address
      002608 85*05 83         [24] 7817 	mov	dph,(_seg7_address + 1)
                                   7818 ;	ecen4330lab7.c:189: IOM = 1;
                                   7819 ;	assignBit
      00260B D2 B4            [12] 7820 	setb	_P3_4
                                   7821 ;	ecen4330lab7.c:190: *map_address = d;
      00260D 74 83            [12] 7822 	mov	a,#0x83
      00260F F0               [24] 7823 	movx	@dptr,a
                                   7824 ;	ecen4330lab7.c:191: IOM = 0;
                                   7825 ;	assignBit
      002610 C2 B4            [12] 7826 	clr	_P3_4
                                   7827 ;	ecen4330lab7.c:2581: MOVE();
                                   7828 ;	ecen4330lab7.c:2582: break;
                                   7829 ;	ecen4330lab7.c:2583: case 'C':
      002612 02r13r3A         [24] 7830 	ljmp	_MOVE
      002615                       7831 00103$:
                                   7832 ;	ecen4330lab7.c:2584: iowrite8(seg7_address, 0xC6);
      002615 85*04 82         [24] 7833 	mov	dpl,_seg7_address
      002618 85*05 83         [24] 7834 	mov	dph,(_seg7_address + 1)
                                   7835 ;	ecen4330lab7.c:189: IOM = 1;
                                   7836 ;	assignBit
      00261B D2 B4            [12] 7837 	setb	_P3_4
                                   7838 ;	ecen4330lab7.c:190: *map_address = d;
      00261D 74 C6            [12] 7839 	mov	a,#0xc6
      00261F F0               [24] 7840 	movx	@dptr,a
                                   7841 ;	ecen4330lab7.c:191: IOM = 0;
                                   7842 ;	assignBit
      002620 C2 B4            [12] 7843 	clr	_P3_4
                                   7844 ;	ecen4330lab7.c:2585: COUNT();
                                   7845 ;	ecen4330lab7.c:2586: break;
                                   7846 ;	ecen4330lab7.c:2587: case 'D':
      002622 02r15r56         [24] 7847 	ljmp	_COUNT
      002625                       7848 00104$:
                                   7849 ;	ecen4330lab7.c:2588: iowrite8(seg7_address, 0xA1);
      002625 85*04 82         [24] 7850 	mov	dpl,_seg7_address
      002628 85*05 83         [24] 7851 	mov	dph,(_seg7_address + 1)
                                   7852 ;	ecen4330lab7.c:189: IOM = 1;
                                   7853 ;	assignBit
      00262B D2 B4            [12] 7854 	setb	_P3_4
                                   7855 ;	ecen4330lab7.c:190: *map_address = d;
      00262D 74 A1            [12] 7856 	mov	a,#0xa1
      00262F F0               [24] 7857 	movx	@dptr,a
                                   7858 ;	ecen4330lab7.c:191: IOM = 0;
                                   7859 ;	assignBit
      002630 C2 B4            [12] 7860 	clr	_P3_4
                                   7861 ;	ecen4330lab7.c:2589: DUMP();
                                   7862 ;	ecen4330lab7.c:2590: break;
                                   7863 ;	ecen4330lab7.c:2591: case 'E':
      002632 02r1Br04         [24] 7864 	ljmp	_DUMP
      002635                       7865 00105$:
                                   7866 ;	ecen4330lab7.c:2592: iowrite8(seg7_address, 0x86);
      002635 85*04 82         [24] 7867 	mov	dpl,_seg7_address
      002638 85*05 83         [24] 7868 	mov	dph,(_seg7_address + 1)
                                   7869 ;	ecen4330lab7.c:189: IOM = 1;
                                   7870 ;	assignBit
      00263B D2 B4            [12] 7871 	setb	_P3_4
                                   7872 ;	ecen4330lab7.c:190: *map_address = d;
      00263D 74 86            [12] 7873 	mov	a,#0x86
      00263F F0               [24] 7874 	movx	@dptr,a
                                   7875 ;	ecen4330lab7.c:191: IOM = 0;
                                   7876 ;	assignBit
      002640 C2 B4            [12] 7877 	clr	_P3_4
                                   7878 ;	ecen4330lab7.c:2593: EDIT();
                                   7879 ;	ecen4330lab7.c:2594: break;
                                   7880 ;	ecen4330lab7.c:2595: case 'F':
      002642 02r1Cr6E         [24] 7881 	ljmp	_EDIT
      002645                       7882 00106$:
                                   7883 ;	ecen4330lab7.c:2596: iowrite8(seg7_address, 0x8E);
      002645 85*04 82         [24] 7884 	mov	dpl,_seg7_address
      002648 85*05 83         [24] 7885 	mov	dph,(_seg7_address + 1)
                                   7886 ;	ecen4330lab7.c:189: IOM = 1;
                                   7887 ;	assignBit
      00264B D2 B4            [12] 7888 	setb	_P3_4
                                   7889 ;	ecen4330lab7.c:190: *map_address = d;
      00264D 74 8E            [12] 7890 	mov	a,#0x8e
      00264F F0               [24] 7891 	movx	@dptr,a
                                   7892 ;	ecen4330lab7.c:191: IOM = 0;
                                   7893 ;	assignBit
      002650 C2 B4            [12] 7894 	clr	_P3_4
                                   7895 ;	ecen4330lab7.c:2597: FIND();
                                   7896 ;	ecen4330lab7.c:2598: break;
                                   7897 ;	ecen4330lab7.c:2599: case '1':
      002652 02r20r1B         [24] 7898 	ljmp	_FIND
      002655                       7899 00107$:
                                   7900 ;	ecen4330lab7.c:2600: iowrite8(seg7_address, 0xF9);
      002655 85*04 82         [24] 7901 	mov	dpl,_seg7_address
      002658 85*05 83         [24] 7902 	mov	dph,(_seg7_address + 1)
                                   7903 ;	ecen4330lab7.c:189: IOM = 1;
                                   7904 ;	assignBit
      00265B D2 B4            [12] 7905 	setb	_P3_4
                                   7906 ;	ecen4330lab7.c:190: *map_address = d;
      00265D 74 F9            [12] 7907 	mov	a,#0xf9
      00265F F0               [24] 7908 	movx	@dptr,a
                                   7909 ;	ecen4330lab7.c:191: IOM = 0;
                                   7910 ;	assignBit
      002660 C2 B4            [12] 7911 	clr	_P3_4
                                   7912 ;	ecen4330lab7.c:2601: UART();
                                   7913 ;	ecen4330lab7.c:2602: break;
                                   7914 ;	ecen4330lab7.c:2608: default:
      002662 02r24r6E         [24] 7915 	ljmp	_UART
      002665                       7916 00108$:
                                   7917 ;	ecen4330lab7.c:2609: iowrite8(seg7_address, 0xFF);
      002665 85*04 82         [24] 7918 	mov	dpl,_seg7_address
      002668 85*05 83         [24] 7919 	mov	dph,(_seg7_address + 1)
                                   7920 ;	ecen4330lab7.c:189: IOM = 1;
                                   7921 ;	assignBit
      00266B D2 B4            [12] 7922 	setb	_P3_4
                                   7923 ;	ecen4330lab7.c:190: *map_address = d;
      00266D 74 FF            [12] 7924 	mov	a,#0xff
      00266F F0               [24] 7925 	movx	@dptr,a
                                   7926 ;	ecen4330lab7.c:191: IOM = 0;
                                   7927 ;	assignBit
      002670 C2 B4            [12] 7928 	clr	_P3_4
                                   7929 ;	ecen4330lab7.c:2610: invalidInput();
                                   7930 ;	ecen4330lab7.c:2612: }
                                   7931 ;	ecen4330lab7.c:2613: }
      002672 02r0DrD5         [24] 7932 	ljmp	_invalidInput
                                   7933 ;------------------------------------------------------------
                                   7934 ;Allocation info for local variables in function 'main'
                                   7935 ;------------------------------------------------------------
                                   7936 ;__1310720070              Allocated to registers 
                                   7937 ;__1310720071              Allocated to registers 
                                   7938 ;map_address               Allocated to registers 
                                   7939 ;d                         Allocated to registers 
                                   7940 ;__1310720073              Allocated to registers 
                                   7941 ;__1310720074              Allocated to registers 
                                   7942 ;map_address               Allocated to registers 
                                   7943 ;d                         Allocated to registers 
                                   7944 ;__1310720076              Allocated to registers 
                                   7945 ;__1310720077              Allocated to registers 
                                   7946 ;map_address               Allocated to registers 
                                   7947 ;d                         Allocated to registers 
                                   7948 ;__1310720079              Allocated to registers 
                                   7949 ;__1310720080              Allocated to registers 
                                   7950 ;map_address               Allocated to registers 
                                   7951 ;d                         Allocated to registers 
                                   7952 ;__1310720082              Allocated to registers 
                                   7953 ;__1310720083              Allocated to registers 
                                   7954 ;map_address               Allocated to registers 
                                   7955 ;d                         Allocated to registers 
                                   7956 ;__1310720085              Allocated to registers 
                                   7957 ;__1310720086              Allocated to registers 
                                   7958 ;map_address               Allocated to registers 
                                   7959 ;d                         Allocated to registers 
                                   7960 ;__1310720088              Allocated to registers 
                                   7961 ;__1310720089              Allocated to registers 
                                   7962 ;map_address               Allocated to registers 
                                   7963 ;d                         Allocated to registers 
                                   7964 ;------------------------------------------------------------
                                   7965 ;	ecen4330lab7.c:2622: void main (void) {
                                   7966 ;	-----------------------------------------
                                   7967 ;	 function main
                                   7968 ;	-----------------------------------------
      002675                       7969 _main:
                                   7970 ;	ecen4330lab7.c:2623: CD = 0;
                                   7971 ;	assignBit
      002675 C2 B5            [12] 7972 	clr	_P3_5
                                   7973 ;	ecen4330lab7.c:2624: IOM = 0;
                                   7974 ;	assignBit
      002677 C2 B4            [12] 7975 	clr	_P3_4
                                   7976 ;	ecen4330lab7.c:2626: UART_Init();
      002679 12r00r63         [24] 7977 	lcall	_UART_Init
                                   7978 ;	ecen4330lab7.c:2627: rtcInit();
      00267C 12r01r0A         [24] 7979 	lcall	_rtcInit
                                   7980 ;	ecen4330lab7.c:2629: iowrite8(seg7_address, 0xFE);//a
      00267F 85*04 82         [24] 7981 	mov	dpl,_seg7_address
      002682 85*05 83         [24] 7982 	mov	dph,(_seg7_address + 1)
                                   7983 ;	ecen4330lab7.c:189: IOM = 1;
                                   7984 ;	assignBit
      002685 D2 B4            [12] 7985 	setb	_P3_4
                                   7986 ;	ecen4330lab7.c:190: *map_address = d;
      002687 74 FE            [12] 7987 	mov	a,#0xfe
      002689 F0               [24] 7988 	movx	@dptr,a
                                   7989 ;	ecen4330lab7.c:191: IOM = 0;
                                   7990 ;	assignBit
      00268A C2 B4            [12] 7991 	clr	_P3_4
                                   7992 ;	ecen4330lab7.c:2630: delay(100);
      00268C 90 00 64         [24] 7993 	mov	dptr,#0x0064
      00268F 12r00r79         [24] 7994 	lcall	_delay
                                   7995 ;	ecen4330lab7.c:2631: iowrite8(seg7_address, 0xFC);//a & b
      002692 85*04 82         [24] 7996 	mov	dpl,_seg7_address
      002695 85*05 83         [24] 7997 	mov	dph,(_seg7_address + 1)
                                   7998 ;	ecen4330lab7.c:189: IOM = 1;
                                   7999 ;	assignBit
      002698 D2 B4            [12] 8000 	setb	_P3_4
                                   8001 ;	ecen4330lab7.c:190: *map_address = d;
      00269A 74 FC            [12] 8002 	mov	a,#0xfc
      00269C F0               [24] 8003 	movx	@dptr,a
                                   8004 ;	ecen4330lab7.c:191: IOM = 0;
                                   8005 ;	assignBit
      00269D C2 B4            [12] 8006 	clr	_P3_4
                                   8007 ;	ecen4330lab7.c:2632: delay(100);
      00269F 90 00 64         [24] 8008 	mov	dptr,#0x0064
      0026A2 12r00r79         [24] 8009 	lcall	_delay
                                   8010 ;	ecen4330lab7.c:2633: iowrite8(seg7_address, 0xF8);//a & b & c
      0026A5 85*04 82         [24] 8011 	mov	dpl,_seg7_address
      0026A8 85*05 83         [24] 8012 	mov	dph,(_seg7_address + 1)
                                   8013 ;	ecen4330lab7.c:189: IOM = 1;
                                   8014 ;	assignBit
      0026AB D2 B4            [12] 8015 	setb	_P3_4
                                   8016 ;	ecen4330lab7.c:190: *map_address = d;
      0026AD 74 F8            [12] 8017 	mov	a,#0xf8
      0026AF F0               [24] 8018 	movx	@dptr,a
                                   8019 ;	ecen4330lab7.c:191: IOM = 0;
                                   8020 ;	assignBit
      0026B0 C2 B4            [12] 8021 	clr	_P3_4
                                   8022 ;	ecen4330lab7.c:2634: delay(100);
      0026B2 90 00 64         [24] 8023 	mov	dptr,#0x0064
      0026B5 12r00r79         [24] 8024 	lcall	_delay
                                   8025 ;	ecen4330lab7.c:2635: iowrite8(seg7_address, 0xF0);//a & b & c & d
      0026B8 85*04 82         [24] 8026 	mov	dpl,_seg7_address
      0026BB 85*05 83         [24] 8027 	mov	dph,(_seg7_address + 1)
                                   8028 ;	ecen4330lab7.c:189: IOM = 1;
                                   8029 ;	assignBit
      0026BE D2 B4            [12] 8030 	setb	_P3_4
                                   8031 ;	ecen4330lab7.c:190: *map_address = d;
      0026C0 74 F0            [12] 8032 	mov	a,#0xf0
      0026C2 F0               [24] 8033 	movx	@dptr,a
                                   8034 ;	ecen4330lab7.c:191: IOM = 0;
                                   8035 ;	assignBit
      0026C3 C2 B4            [12] 8036 	clr	_P3_4
                                   8037 ;	ecen4330lab7.c:2636: delay(100);
      0026C5 90 00 64         [24] 8038 	mov	dptr,#0x0064
      0026C8 12r00r79         [24] 8039 	lcall	_delay
                                   8040 ;	ecen4330lab7.c:2637: iowrite8(seg7_address, 0xE0);//a & b & c & d & e
      0026CB 85*04 82         [24] 8041 	mov	dpl,_seg7_address
      0026CE 85*05 83         [24] 8042 	mov	dph,(_seg7_address + 1)
                                   8043 ;	ecen4330lab7.c:189: IOM = 1;
                                   8044 ;	assignBit
      0026D1 D2 B4            [12] 8045 	setb	_P3_4
                                   8046 ;	ecen4330lab7.c:190: *map_address = d;
      0026D3 74 E0            [12] 8047 	mov	a,#0xe0
      0026D5 F0               [24] 8048 	movx	@dptr,a
                                   8049 ;	ecen4330lab7.c:191: IOM = 0;
                                   8050 ;	assignBit
      0026D6 C2 B4            [12] 8051 	clr	_P3_4
                                   8052 ;	ecen4330lab7.c:2638: delay(100);
      0026D8 90 00 64         [24] 8053 	mov	dptr,#0x0064
      0026DB 12r00r79         [24] 8054 	lcall	_delay
                                   8055 ;	ecen4330lab7.c:2639: iowrite8(seg7_address, 0xC0);//a & b & c & d & e & f
      0026DE 85*04 82         [24] 8056 	mov	dpl,_seg7_address
      0026E1 85*05 83         [24] 8057 	mov	dph,(_seg7_address + 1)
                                   8058 ;	ecen4330lab7.c:189: IOM = 1;
                                   8059 ;	assignBit
      0026E4 D2 B4            [12] 8060 	setb	_P3_4
                                   8061 ;	ecen4330lab7.c:190: *map_address = d;
      0026E6 74 C0            [12] 8062 	mov	a,#0xc0
      0026E8 F0               [24] 8063 	movx	@dptr,a
                                   8064 ;	ecen4330lab7.c:191: IOM = 0;
                                   8065 ;	assignBit
      0026E9 C2 B4            [12] 8066 	clr	_P3_4
                                   8067 ;	ecen4330lab7.c:2640: delay(100);
      0026EB 90 00 64         [24] 8068 	mov	dptr,#0x0064
      0026EE 12r00r79         [24] 8069 	lcall	_delay
                                   8070 ;	ecen4330lab7.c:2641: IOM = 0;
                                   8071 ;	assignBit
      0026F1 C2 B4            [12] 8072 	clr	_P3_4
                                   8073 ;	ecen4330lab7.c:2642: CD = 1;
                                   8074 ;	assignBit
      0026F3 D2 B5            [12] 8075 	setb	_P3_5
                                   8076 ;	ecen4330lab7.c:2644: TFT_LCD_INIT();
      0026F5 12r04r55         [24] 8077 	lcall	_TFT_LCD_INIT
                                   8078 ;	ecen4330lab7.c:2645: iowrite8(seg7_address, 0xF9);
      0026F8 85*04 82         [24] 8079 	mov	dpl,_seg7_address
      0026FB 85*05 83         [24] 8080 	mov	dph,(_seg7_address + 1)
                                   8081 ;	ecen4330lab7.c:189: IOM = 1;
                                   8082 ;	assignBit
      0026FE D2 B4            [12] 8083 	setb	_P3_4
                                   8084 ;	ecen4330lab7.c:190: *map_address = d;
      002700 74 F9            [12] 8085 	mov	a,#0xf9
      002702 F0               [24] 8086 	movx	@dptr,a
                                   8087 ;	ecen4330lab7.c:191: IOM = 0;
                                   8088 ;	assignBit
      002703 C2 B4            [12] 8089 	clr	_P3_4
                                   8090 ;	ecen4330lab7.c:2646: resetLCD();
      002705 12r0DrAD         [24] 8091 	lcall	_resetLCD
                                   8092 ;	ecen4330lab7.c:2648: while(1) {
      002708                       8093 00102$:
                                   8094 ;	ecen4330lab7.c:2649: LCD_mainMenu();
      002708 12r25r17         [24] 8095 	lcall	_LCD_mainMenu
                                   8096 ;	ecen4330lab7.c:2651: }
      00270B 80 FB            [24] 8097 	sjmp	00102$
                                   8098 	.area CSEG    (CODE)
                                   8099 	.area CONST   (CODE)
      000000                       8100 _font:
      000000 00                    8101 	.db #0x00	; 0
      000001 00                    8102 	.db #0x00	; 0
      000002 00                    8103 	.db #0x00	; 0
      000003 00                    8104 	.db #0x00	; 0
      000004 00                    8105 	.db #0x00	; 0
      000005 3E                    8106 	.db #0x3e	; 62
      000006 5B                    8107 	.db #0x5b	; 91
      000007 4F                    8108 	.db #0x4f	; 79	'O'
      000008 5B                    8109 	.db #0x5b	; 91
      000009 3E                    8110 	.db #0x3e	; 62
      00000A 3E                    8111 	.db #0x3e	; 62
      00000B 6B                    8112 	.db #0x6b	; 107	'k'
      00000C 4F                    8113 	.db #0x4f	; 79	'O'
      00000D 6B                    8114 	.db #0x6b	; 107	'k'
      00000E 3E                    8115 	.db #0x3e	; 62
      00000F 1C                    8116 	.db #0x1c	; 28
      000010 3E                    8117 	.db #0x3e	; 62
      000011 7C                    8118 	.db #0x7c	; 124
      000012 3E                    8119 	.db #0x3e	; 62
      000013 1C                    8120 	.db #0x1c	; 28
      000014 18                    8121 	.db #0x18	; 24
      000015 3C                    8122 	.db #0x3c	; 60
      000016 7E                    8123 	.db #0x7e	; 126
      000017 3C                    8124 	.db #0x3c	; 60
      000018 18                    8125 	.db #0x18	; 24
      000019 1C                    8126 	.db #0x1c	; 28
      00001A 57                    8127 	.db #0x57	; 87	'W'
      00001B 7D                    8128 	.db #0x7d	; 125
      00001C 57                    8129 	.db #0x57	; 87	'W'
      00001D 1C                    8130 	.db #0x1c	; 28
      00001E 1C                    8131 	.db #0x1c	; 28
      00001F 5E                    8132 	.db #0x5e	; 94
      000020 7F                    8133 	.db #0x7f	; 127
      000021 5E                    8134 	.db #0x5e	; 94
      000022 1C                    8135 	.db #0x1c	; 28
      000023 00                    8136 	.db #0x00	; 0
      000024 18                    8137 	.db #0x18	; 24
      000025 3C                    8138 	.db #0x3c	; 60
      000026 18                    8139 	.db #0x18	; 24
      000027 00                    8140 	.db #0x00	; 0
      000028 FF                    8141 	.db #0xff	; 255
      000029 E7                    8142 	.db #0xe7	; 231
      00002A C3                    8143 	.db #0xc3	; 195
      00002B E7                    8144 	.db #0xe7	; 231
      00002C FF                    8145 	.db #0xff	; 255
      00002D 00                    8146 	.db #0x00	; 0
      00002E 18                    8147 	.db #0x18	; 24
      00002F 24                    8148 	.db #0x24	; 36
      000030 18                    8149 	.db #0x18	; 24
      000031 00                    8150 	.db #0x00	; 0
      000032 FF                    8151 	.db #0xff	; 255
      000033 E7                    8152 	.db #0xe7	; 231
      000034 DB                    8153 	.db #0xdb	; 219
      000035 E7                    8154 	.db #0xe7	; 231
      000036 FF                    8155 	.db #0xff	; 255
      000037 30                    8156 	.db #0x30	; 48	'0'
      000038 48                    8157 	.db #0x48	; 72	'H'
      000039 3A                    8158 	.db #0x3a	; 58
      00003A 06                    8159 	.db #0x06	; 6
      00003B 0E                    8160 	.db #0x0e	; 14
      00003C 26                    8161 	.db #0x26	; 38
      00003D 29                    8162 	.db #0x29	; 41
      00003E 79                    8163 	.db #0x79	; 121	'y'
      00003F 29                    8164 	.db #0x29	; 41
      000040 26                    8165 	.db #0x26	; 38
      000041 40                    8166 	.db #0x40	; 64
      000042 7F                    8167 	.db #0x7f	; 127
      000043 05                    8168 	.db #0x05	; 5
      000044 05                    8169 	.db #0x05	; 5
      000045 07                    8170 	.db #0x07	; 7
      000046 40                    8171 	.db #0x40	; 64
      000047 7F                    8172 	.db #0x7f	; 127
      000048 05                    8173 	.db #0x05	; 5
      000049 25                    8174 	.db #0x25	; 37
      00004A 3F                    8175 	.db #0x3f	; 63
      00004B 5A                    8176 	.db #0x5a	; 90	'Z'
      00004C 3C                    8177 	.db #0x3c	; 60
      00004D E7                    8178 	.db #0xe7	; 231
      00004E 3C                    8179 	.db #0x3c	; 60
      00004F 5A                    8180 	.db #0x5a	; 90	'Z'
      000050 7F                    8181 	.db #0x7f	; 127
      000051 3E                    8182 	.db #0x3e	; 62
      000052 1C                    8183 	.db #0x1c	; 28
      000053 1C                    8184 	.db #0x1c	; 28
      000054 08                    8185 	.db #0x08	; 8
      000055 08                    8186 	.db #0x08	; 8
      000056 1C                    8187 	.db #0x1c	; 28
      000057 1C                    8188 	.db #0x1c	; 28
      000058 3E                    8189 	.db #0x3e	; 62
      000059 7F                    8190 	.db #0x7f	; 127
      00005A 14                    8191 	.db #0x14	; 20
      00005B 22                    8192 	.db #0x22	; 34
      00005C 7F                    8193 	.db #0x7f	; 127
      00005D 22                    8194 	.db #0x22	; 34
      00005E 14                    8195 	.db #0x14	; 20
      00005F 5F                    8196 	.db #0x5f	; 95
      000060 5F                    8197 	.db #0x5f	; 95
      000061 00                    8198 	.db #0x00	; 0
      000062 5F                    8199 	.db #0x5f	; 95
      000063 5F                    8200 	.db #0x5f	; 95
      000064 06                    8201 	.db #0x06	; 6
      000065 09                    8202 	.db #0x09	; 9
      000066 7F                    8203 	.db #0x7f	; 127
      000067 01                    8204 	.db #0x01	; 1
      000068 7F                    8205 	.db #0x7f	; 127
      000069 00                    8206 	.db #0x00	; 0
      00006A 66                    8207 	.db #0x66	; 102	'f'
      00006B 89                    8208 	.db #0x89	; 137
      00006C 95                    8209 	.db #0x95	; 149
      00006D 6A                    8210 	.db #0x6a	; 106	'j'
      00006E 60                    8211 	.db #0x60	; 96
      00006F 60                    8212 	.db #0x60	; 96
      000070 60                    8213 	.db #0x60	; 96
      000071 60                    8214 	.db #0x60	; 96
      000072 60                    8215 	.db #0x60	; 96
      000073 94                    8216 	.db #0x94	; 148
      000074 A2                    8217 	.db #0xa2	; 162
      000075 FF                    8218 	.db #0xff	; 255
      000076 A2                    8219 	.db #0xa2	; 162
      000077 94                    8220 	.db #0x94	; 148
      000078 08                    8221 	.db #0x08	; 8
      000079 04                    8222 	.db #0x04	; 4
      00007A 7E                    8223 	.db #0x7e	; 126
      00007B 04                    8224 	.db #0x04	; 4
      00007C 08                    8225 	.db #0x08	; 8
      00007D 10                    8226 	.db #0x10	; 16
      00007E 20                    8227 	.db #0x20	; 32
      00007F 7E                    8228 	.db #0x7e	; 126
      000080 20                    8229 	.db #0x20	; 32
      000081 10                    8230 	.db #0x10	; 16
      000082 08                    8231 	.db #0x08	; 8
      000083 08                    8232 	.db #0x08	; 8
      000084 2A                    8233 	.db #0x2a	; 42
      000085 1C                    8234 	.db #0x1c	; 28
      000086 08                    8235 	.db #0x08	; 8
      000087 08                    8236 	.db #0x08	; 8
      000088 1C                    8237 	.db #0x1c	; 28
      000089 2A                    8238 	.db #0x2a	; 42
      00008A 08                    8239 	.db #0x08	; 8
      00008B 08                    8240 	.db #0x08	; 8
      00008C 1E                    8241 	.db #0x1e	; 30
      00008D 10                    8242 	.db #0x10	; 16
      00008E 10                    8243 	.db #0x10	; 16
      00008F 10                    8244 	.db #0x10	; 16
      000090 10                    8245 	.db #0x10	; 16
      000091 0C                    8246 	.db #0x0c	; 12
      000092 1E                    8247 	.db #0x1e	; 30
      000093 0C                    8248 	.db #0x0c	; 12
      000094 1E                    8249 	.db #0x1e	; 30
      000095 0C                    8250 	.db #0x0c	; 12
      000096 30                    8251 	.db #0x30	; 48	'0'
      000097 38                    8252 	.db #0x38	; 56	'8'
      000098 3E                    8253 	.db #0x3e	; 62
      000099 38                    8254 	.db #0x38	; 56	'8'
      00009A 30                    8255 	.db #0x30	; 48	'0'
      00009B 06                    8256 	.db #0x06	; 6
      00009C 0E                    8257 	.db #0x0e	; 14
      00009D 3E                    8258 	.db #0x3e	; 62
      00009E 0E                    8259 	.db #0x0e	; 14
      00009F 06                    8260 	.db #0x06	; 6
      0000A0 00                    8261 	.db #0x00	; 0
      0000A1 00                    8262 	.db #0x00	; 0
      0000A2 00                    8263 	.db #0x00	; 0
      0000A3 00                    8264 	.db #0x00	; 0
      0000A4 00                    8265 	.db #0x00	; 0
      0000A5 00                    8266 	.db #0x00	; 0
      0000A6 00                    8267 	.db #0x00	; 0
      0000A7 5F                    8268 	.db #0x5f	; 95
      0000A8 00                    8269 	.db #0x00	; 0
      0000A9 00                    8270 	.db #0x00	; 0
      0000AA 00                    8271 	.db #0x00	; 0
      0000AB 07                    8272 	.db #0x07	; 7
      0000AC 00                    8273 	.db #0x00	; 0
      0000AD 07                    8274 	.db #0x07	; 7
      0000AE 00                    8275 	.db #0x00	; 0
      0000AF 14                    8276 	.db #0x14	; 20
      0000B0 7F                    8277 	.db #0x7f	; 127
      0000B1 14                    8278 	.db #0x14	; 20
      0000B2 7F                    8279 	.db #0x7f	; 127
      0000B3 14                    8280 	.db #0x14	; 20
      0000B4 24                    8281 	.db #0x24	; 36
      0000B5 2A                    8282 	.db #0x2a	; 42
      0000B6 7F                    8283 	.db #0x7f	; 127
      0000B7 2A                    8284 	.db #0x2a	; 42
      0000B8 12                    8285 	.db #0x12	; 18
      0000B9 23                    8286 	.db #0x23	; 35
      0000BA 13                    8287 	.db #0x13	; 19
      0000BB 08                    8288 	.db #0x08	; 8
      0000BC 64                    8289 	.db #0x64	; 100	'd'
      0000BD 62                    8290 	.db #0x62	; 98	'b'
      0000BE 36                    8291 	.db #0x36	; 54	'6'
      0000BF 49                    8292 	.db #0x49	; 73	'I'
      0000C0 56                    8293 	.db #0x56	; 86	'V'
      0000C1 20                    8294 	.db #0x20	; 32
      0000C2 50                    8295 	.db #0x50	; 80	'P'
      0000C3 00                    8296 	.db #0x00	; 0
      0000C4 08                    8297 	.db #0x08	; 8
      0000C5 07                    8298 	.db #0x07	; 7
      0000C6 03                    8299 	.db #0x03	; 3
      0000C7 00                    8300 	.db #0x00	; 0
      0000C8 00                    8301 	.db #0x00	; 0
      0000C9 1C                    8302 	.db #0x1c	; 28
      0000CA 22                    8303 	.db #0x22	; 34
      0000CB 41                    8304 	.db #0x41	; 65	'A'
      0000CC 00                    8305 	.db #0x00	; 0
      0000CD 00                    8306 	.db #0x00	; 0
      0000CE 41                    8307 	.db #0x41	; 65	'A'
      0000CF 22                    8308 	.db #0x22	; 34
      0000D0 1C                    8309 	.db #0x1c	; 28
      0000D1 00                    8310 	.db #0x00	; 0
      0000D2 2A                    8311 	.db #0x2a	; 42
      0000D3 1C                    8312 	.db #0x1c	; 28
      0000D4 7F                    8313 	.db #0x7f	; 127
      0000D5 1C                    8314 	.db #0x1c	; 28
      0000D6 2A                    8315 	.db #0x2a	; 42
      0000D7 08                    8316 	.db #0x08	; 8
      0000D8 08                    8317 	.db #0x08	; 8
      0000D9 3E                    8318 	.db #0x3e	; 62
      0000DA 08                    8319 	.db #0x08	; 8
      0000DB 08                    8320 	.db #0x08	; 8
      0000DC 00                    8321 	.db #0x00	; 0
      0000DD 80                    8322 	.db #0x80	; 128
      0000DE 70                    8323 	.db #0x70	; 112	'p'
      0000DF 30                    8324 	.db #0x30	; 48	'0'
      0000E0 00                    8325 	.db #0x00	; 0
      0000E1 08                    8326 	.db #0x08	; 8
      0000E2 08                    8327 	.db #0x08	; 8
      0000E3 08                    8328 	.db #0x08	; 8
      0000E4 08                    8329 	.db #0x08	; 8
      0000E5 08                    8330 	.db #0x08	; 8
      0000E6 00                    8331 	.db #0x00	; 0
      0000E7 00                    8332 	.db #0x00	; 0
      0000E8 60                    8333 	.db #0x60	; 96
      0000E9 60                    8334 	.db #0x60	; 96
      0000EA 00                    8335 	.db #0x00	; 0
      0000EB 20                    8336 	.db #0x20	; 32
      0000EC 10                    8337 	.db #0x10	; 16
      0000ED 08                    8338 	.db #0x08	; 8
      0000EE 04                    8339 	.db #0x04	; 4
      0000EF 02                    8340 	.db #0x02	; 2
      0000F0 3E                    8341 	.db #0x3e	; 62
      0000F1 51                    8342 	.db #0x51	; 81	'Q'
      0000F2 49                    8343 	.db #0x49	; 73	'I'
      0000F3 45                    8344 	.db #0x45	; 69	'E'
      0000F4 3E                    8345 	.db #0x3e	; 62
      0000F5 00                    8346 	.db #0x00	; 0
      0000F6 42                    8347 	.db #0x42	; 66	'B'
      0000F7 7F                    8348 	.db #0x7f	; 127
      0000F8 40                    8349 	.db #0x40	; 64
      0000F9 00                    8350 	.db #0x00	; 0
      0000FA 72                    8351 	.db #0x72	; 114	'r'
      0000FB 49                    8352 	.db #0x49	; 73	'I'
      0000FC 49                    8353 	.db #0x49	; 73	'I'
      0000FD 49                    8354 	.db #0x49	; 73	'I'
      0000FE 46                    8355 	.db #0x46	; 70	'F'
      0000FF 21                    8356 	.db #0x21	; 33
      000100 41                    8357 	.db #0x41	; 65	'A'
      000101 49                    8358 	.db #0x49	; 73	'I'
      000102 4D                    8359 	.db #0x4d	; 77	'M'
      000103 33                    8360 	.db #0x33	; 51	'3'
      000104 18                    8361 	.db #0x18	; 24
      000105 14                    8362 	.db #0x14	; 20
      000106 12                    8363 	.db #0x12	; 18
      000107 7F                    8364 	.db #0x7f	; 127
      000108 10                    8365 	.db #0x10	; 16
      000109 27                    8366 	.db #0x27	; 39
      00010A 45                    8367 	.db #0x45	; 69	'E'
      00010B 45                    8368 	.db #0x45	; 69	'E'
      00010C 45                    8369 	.db #0x45	; 69	'E'
      00010D 39                    8370 	.db #0x39	; 57	'9'
      00010E 3C                    8371 	.db #0x3c	; 60
      00010F 4A                    8372 	.db #0x4a	; 74	'J'
      000110 49                    8373 	.db #0x49	; 73	'I'
      000111 49                    8374 	.db #0x49	; 73	'I'
      000112 31                    8375 	.db #0x31	; 49	'1'
      000113 41                    8376 	.db #0x41	; 65	'A'
      000114 21                    8377 	.db #0x21	; 33
      000115 11                    8378 	.db #0x11	; 17
      000116 09                    8379 	.db #0x09	; 9
      000117 07                    8380 	.db #0x07	; 7
      000118 36                    8381 	.db #0x36	; 54	'6'
      000119 49                    8382 	.db #0x49	; 73	'I'
      00011A 49                    8383 	.db #0x49	; 73	'I'
      00011B 49                    8384 	.db #0x49	; 73	'I'
      00011C 36                    8385 	.db #0x36	; 54	'6'
      00011D 46                    8386 	.db #0x46	; 70	'F'
      00011E 49                    8387 	.db #0x49	; 73	'I'
      00011F 49                    8388 	.db #0x49	; 73	'I'
      000120 29                    8389 	.db #0x29	; 41
      000121 1E                    8390 	.db #0x1e	; 30
      000122 00                    8391 	.db #0x00	; 0
      000123 00                    8392 	.db #0x00	; 0
      000124 14                    8393 	.db #0x14	; 20
      000125 00                    8394 	.db #0x00	; 0
      000126 00                    8395 	.db #0x00	; 0
      000127 00                    8396 	.db #0x00	; 0
      000128 40                    8397 	.db #0x40	; 64
      000129 34                    8398 	.db #0x34	; 52	'4'
      00012A 00                    8399 	.db #0x00	; 0
      00012B 00                    8400 	.db #0x00	; 0
      00012C 00                    8401 	.db #0x00	; 0
      00012D 08                    8402 	.db #0x08	; 8
      00012E 14                    8403 	.db #0x14	; 20
      00012F 22                    8404 	.db #0x22	; 34
      000130 41                    8405 	.db #0x41	; 65	'A'
      000131 14                    8406 	.db #0x14	; 20
      000132 14                    8407 	.db #0x14	; 20
      000133 14                    8408 	.db #0x14	; 20
      000134 14                    8409 	.db #0x14	; 20
      000135 14                    8410 	.db #0x14	; 20
      000136 00                    8411 	.db #0x00	; 0
      000137 41                    8412 	.db #0x41	; 65	'A'
      000138 22                    8413 	.db #0x22	; 34
      000139 14                    8414 	.db #0x14	; 20
      00013A 08                    8415 	.db #0x08	; 8
      00013B 02                    8416 	.db #0x02	; 2
      00013C 01                    8417 	.db #0x01	; 1
      00013D 59                    8418 	.db #0x59	; 89	'Y'
      00013E 09                    8419 	.db #0x09	; 9
      00013F 06                    8420 	.db #0x06	; 6
      000140 3E                    8421 	.db #0x3e	; 62
      000141 41                    8422 	.db #0x41	; 65	'A'
      000142 5D                    8423 	.db #0x5d	; 93
      000143 59                    8424 	.db #0x59	; 89	'Y'
      000144 4E                    8425 	.db #0x4e	; 78	'N'
      000145 7C                    8426 	.db #0x7c	; 124
      000146 12                    8427 	.db #0x12	; 18
      000147 11                    8428 	.db #0x11	; 17
      000148 12                    8429 	.db #0x12	; 18
      000149 7C                    8430 	.db #0x7c	; 124
      00014A 7F                    8431 	.db #0x7f	; 127
      00014B 49                    8432 	.db #0x49	; 73	'I'
      00014C 49                    8433 	.db #0x49	; 73	'I'
      00014D 49                    8434 	.db #0x49	; 73	'I'
      00014E 36                    8435 	.db #0x36	; 54	'6'
      00014F 3E                    8436 	.db #0x3e	; 62
      000150 41                    8437 	.db #0x41	; 65	'A'
      000151 41                    8438 	.db #0x41	; 65	'A'
      000152 41                    8439 	.db #0x41	; 65	'A'
      000153 22                    8440 	.db #0x22	; 34
      000154 7F                    8441 	.db #0x7f	; 127
      000155 41                    8442 	.db #0x41	; 65	'A'
      000156 41                    8443 	.db #0x41	; 65	'A'
      000157 41                    8444 	.db #0x41	; 65	'A'
      000158 3E                    8445 	.db #0x3e	; 62
      000159 7F                    8446 	.db #0x7f	; 127
      00015A 49                    8447 	.db #0x49	; 73	'I'
      00015B 49                    8448 	.db #0x49	; 73	'I'
      00015C 49                    8449 	.db #0x49	; 73	'I'
      00015D 41                    8450 	.db #0x41	; 65	'A'
      00015E 7F                    8451 	.db #0x7f	; 127
      00015F 09                    8452 	.db #0x09	; 9
      000160 09                    8453 	.db #0x09	; 9
      000161 09                    8454 	.db #0x09	; 9
      000162 01                    8455 	.db #0x01	; 1
      000163 3E                    8456 	.db #0x3e	; 62
      000164 41                    8457 	.db #0x41	; 65	'A'
      000165 41                    8458 	.db #0x41	; 65	'A'
      000166 51                    8459 	.db #0x51	; 81	'Q'
      000167 73                    8460 	.db #0x73	; 115	's'
      000168 7F                    8461 	.db #0x7f	; 127
      000169 08                    8462 	.db #0x08	; 8
      00016A 08                    8463 	.db #0x08	; 8
      00016B 08                    8464 	.db #0x08	; 8
      00016C 7F                    8465 	.db #0x7f	; 127
      00016D 00                    8466 	.db #0x00	; 0
      00016E 41                    8467 	.db #0x41	; 65	'A'
      00016F 7F                    8468 	.db #0x7f	; 127
      000170 41                    8469 	.db #0x41	; 65	'A'
      000171 00                    8470 	.db #0x00	; 0
      000172 20                    8471 	.db #0x20	; 32
      000173 40                    8472 	.db #0x40	; 64
      000174 41                    8473 	.db #0x41	; 65	'A'
      000175 3F                    8474 	.db #0x3f	; 63
      000176 01                    8475 	.db #0x01	; 1
      000177 7F                    8476 	.db #0x7f	; 127
      000178 08                    8477 	.db #0x08	; 8
      000179 14                    8478 	.db #0x14	; 20
      00017A 22                    8479 	.db #0x22	; 34
      00017B 41                    8480 	.db #0x41	; 65	'A'
      00017C 7F                    8481 	.db #0x7f	; 127
      00017D 40                    8482 	.db #0x40	; 64
      00017E 40                    8483 	.db #0x40	; 64
      00017F 40                    8484 	.db #0x40	; 64
      000180 40                    8485 	.db #0x40	; 64
      000181 7F                    8486 	.db #0x7f	; 127
      000182 02                    8487 	.db #0x02	; 2
      000183 1C                    8488 	.db #0x1c	; 28
      000184 02                    8489 	.db #0x02	; 2
      000185 7F                    8490 	.db #0x7f	; 127
      000186 7F                    8491 	.db #0x7f	; 127
      000187 04                    8492 	.db #0x04	; 4
      000188 08                    8493 	.db #0x08	; 8
      000189 10                    8494 	.db #0x10	; 16
      00018A 7F                    8495 	.db #0x7f	; 127
      00018B 3E                    8496 	.db #0x3e	; 62
      00018C 41                    8497 	.db #0x41	; 65	'A'
      00018D 41                    8498 	.db #0x41	; 65	'A'
      00018E 41                    8499 	.db #0x41	; 65	'A'
      00018F 3E                    8500 	.db #0x3e	; 62
      000190 7F                    8501 	.db #0x7f	; 127
      000191 09                    8502 	.db #0x09	; 9
      000192 09                    8503 	.db #0x09	; 9
      000193 09                    8504 	.db #0x09	; 9
      000194 06                    8505 	.db #0x06	; 6
      000195 3E                    8506 	.db #0x3e	; 62
      000196 41                    8507 	.db #0x41	; 65	'A'
      000197 51                    8508 	.db #0x51	; 81	'Q'
      000198 21                    8509 	.db #0x21	; 33
      000199 5E                    8510 	.db #0x5e	; 94
      00019A 7F                    8511 	.db #0x7f	; 127
      00019B 09                    8512 	.db #0x09	; 9
      00019C 19                    8513 	.db #0x19	; 25
      00019D 29                    8514 	.db #0x29	; 41
      00019E 46                    8515 	.db #0x46	; 70	'F'
      00019F 26                    8516 	.db #0x26	; 38
      0001A0 49                    8517 	.db #0x49	; 73	'I'
      0001A1 49                    8518 	.db #0x49	; 73	'I'
      0001A2 49                    8519 	.db #0x49	; 73	'I'
      0001A3 32                    8520 	.db #0x32	; 50	'2'
      0001A4 03                    8521 	.db #0x03	; 3
      0001A5 01                    8522 	.db #0x01	; 1
      0001A6 7F                    8523 	.db #0x7f	; 127
      0001A7 01                    8524 	.db #0x01	; 1
      0001A8 03                    8525 	.db #0x03	; 3
      0001A9 3F                    8526 	.db #0x3f	; 63
      0001AA 40                    8527 	.db #0x40	; 64
      0001AB 40                    8528 	.db #0x40	; 64
      0001AC 40                    8529 	.db #0x40	; 64
      0001AD 3F                    8530 	.db #0x3f	; 63
      0001AE 1F                    8531 	.db #0x1f	; 31
      0001AF 20                    8532 	.db #0x20	; 32
      0001B0 40                    8533 	.db #0x40	; 64
      0001B1 20                    8534 	.db #0x20	; 32
      0001B2 1F                    8535 	.db #0x1f	; 31
      0001B3 3F                    8536 	.db #0x3f	; 63
      0001B4 40                    8537 	.db #0x40	; 64
      0001B5 38                    8538 	.db #0x38	; 56	'8'
      0001B6 40                    8539 	.db #0x40	; 64
      0001B7 3F                    8540 	.db #0x3f	; 63
      0001B8 63                    8541 	.db #0x63	; 99	'c'
      0001B9 14                    8542 	.db #0x14	; 20
      0001BA 08                    8543 	.db #0x08	; 8
      0001BB 14                    8544 	.db #0x14	; 20
      0001BC 63                    8545 	.db #0x63	; 99	'c'
      0001BD 03                    8546 	.db #0x03	; 3
      0001BE 04                    8547 	.db #0x04	; 4
      0001BF 78                    8548 	.db #0x78	; 120	'x'
      0001C0 04                    8549 	.db #0x04	; 4
      0001C1 03                    8550 	.db #0x03	; 3
      0001C2 61                    8551 	.db #0x61	; 97	'a'
      0001C3 59                    8552 	.db #0x59	; 89	'Y'
      0001C4 49                    8553 	.db #0x49	; 73	'I'
      0001C5 4D                    8554 	.db #0x4d	; 77	'M'
      0001C6 43                    8555 	.db #0x43	; 67	'C'
      0001C7 00                    8556 	.db #0x00	; 0
      0001C8 7F                    8557 	.db #0x7f	; 127
      0001C9 41                    8558 	.db #0x41	; 65	'A'
      0001CA 41                    8559 	.db #0x41	; 65	'A'
      0001CB 41                    8560 	.db #0x41	; 65	'A'
      0001CC 02                    8561 	.db #0x02	; 2
      0001CD 04                    8562 	.db #0x04	; 4
      0001CE 08                    8563 	.db #0x08	; 8
      0001CF 10                    8564 	.db #0x10	; 16
      0001D0 20                    8565 	.db #0x20	; 32
      0001D1 00                    8566 	.db #0x00	; 0
      0001D2 41                    8567 	.db #0x41	; 65	'A'
      0001D3 41                    8568 	.db #0x41	; 65	'A'
      0001D4 41                    8569 	.db #0x41	; 65	'A'
      0001D5 7F                    8570 	.db #0x7f	; 127
      0001D6 04                    8571 	.db #0x04	; 4
      0001D7 02                    8572 	.db #0x02	; 2
      0001D8 01                    8573 	.db #0x01	; 1
      0001D9 02                    8574 	.db #0x02	; 2
      0001DA 04                    8575 	.db #0x04	; 4
      0001DB 40                    8576 	.db #0x40	; 64
      0001DC 40                    8577 	.db #0x40	; 64
      0001DD 40                    8578 	.db #0x40	; 64
      0001DE 40                    8579 	.db #0x40	; 64
      0001DF 40                    8580 	.db #0x40	; 64
      0001E0 00                    8581 	.db #0x00	; 0
      0001E1 03                    8582 	.db #0x03	; 3
      0001E2 07                    8583 	.db #0x07	; 7
      0001E3 08                    8584 	.db #0x08	; 8
      0001E4 00                    8585 	.db #0x00	; 0
      0001E5 20                    8586 	.db #0x20	; 32
      0001E6 54                    8587 	.db #0x54	; 84	'T'
      0001E7 54                    8588 	.db #0x54	; 84	'T'
      0001E8 78                    8589 	.db #0x78	; 120	'x'
      0001E9 40                    8590 	.db #0x40	; 64
      0001EA 7F                    8591 	.db #0x7f	; 127
      0001EB 28                    8592 	.db #0x28	; 40
      0001EC 44                    8593 	.db #0x44	; 68	'D'
      0001ED 44                    8594 	.db #0x44	; 68	'D'
      0001EE 38                    8595 	.db #0x38	; 56	'8'
      0001EF 38                    8596 	.db #0x38	; 56	'8'
      0001F0 44                    8597 	.db #0x44	; 68	'D'
      0001F1 44                    8598 	.db #0x44	; 68	'D'
      0001F2 44                    8599 	.db #0x44	; 68	'D'
      0001F3 28                    8600 	.db #0x28	; 40
      0001F4 38                    8601 	.db #0x38	; 56	'8'
      0001F5 44                    8602 	.db #0x44	; 68	'D'
      0001F6 44                    8603 	.db #0x44	; 68	'D'
      0001F7 28                    8604 	.db #0x28	; 40
      0001F8 7F                    8605 	.db #0x7f	; 127
      0001F9 38                    8606 	.db #0x38	; 56	'8'
      0001FA 54                    8607 	.db #0x54	; 84	'T'
      0001FB 54                    8608 	.db #0x54	; 84	'T'
      0001FC 54                    8609 	.db #0x54	; 84	'T'
      0001FD 18                    8610 	.db #0x18	; 24
      0001FE 00                    8611 	.db #0x00	; 0
      0001FF 08                    8612 	.db #0x08	; 8
      000200 7E                    8613 	.db #0x7e	; 126
      000201 09                    8614 	.db #0x09	; 9
      000202 02                    8615 	.db #0x02	; 2
      000203 18                    8616 	.db #0x18	; 24
      000204 A4                    8617 	.db #0xa4	; 164
      000205 A4                    8618 	.db #0xa4	; 164
      000206 9C                    8619 	.db #0x9c	; 156
      000207 78                    8620 	.db #0x78	; 120	'x'
      000208 7F                    8621 	.db #0x7f	; 127
      000209 08                    8622 	.db #0x08	; 8
      00020A 04                    8623 	.db #0x04	; 4
      00020B 04                    8624 	.db #0x04	; 4
      00020C 78                    8625 	.db #0x78	; 120	'x'
      00020D 00                    8626 	.db #0x00	; 0
      00020E 44                    8627 	.db #0x44	; 68	'D'
      00020F 7D                    8628 	.db #0x7d	; 125
      000210 40                    8629 	.db #0x40	; 64
      000211 00                    8630 	.db #0x00	; 0
      000212 20                    8631 	.db #0x20	; 32
      000213 40                    8632 	.db #0x40	; 64
      000214 40                    8633 	.db #0x40	; 64
      000215 3D                    8634 	.db #0x3d	; 61
      000216 00                    8635 	.db #0x00	; 0
      000217 7F                    8636 	.db #0x7f	; 127
      000218 10                    8637 	.db #0x10	; 16
      000219 28                    8638 	.db #0x28	; 40
      00021A 44                    8639 	.db #0x44	; 68	'D'
      00021B 00                    8640 	.db #0x00	; 0
      00021C 00                    8641 	.db #0x00	; 0
      00021D 41                    8642 	.db #0x41	; 65	'A'
      00021E 7F                    8643 	.db #0x7f	; 127
      00021F 40                    8644 	.db #0x40	; 64
      000220 00                    8645 	.db #0x00	; 0
      000221 7C                    8646 	.db #0x7c	; 124
      000222 04                    8647 	.db #0x04	; 4
      000223 78                    8648 	.db #0x78	; 120	'x'
      000224 04                    8649 	.db #0x04	; 4
      000225 78                    8650 	.db #0x78	; 120	'x'
      000226 7C                    8651 	.db #0x7c	; 124
      000227 08                    8652 	.db #0x08	; 8
      000228 04                    8653 	.db #0x04	; 4
      000229 04                    8654 	.db #0x04	; 4
      00022A 78                    8655 	.db #0x78	; 120	'x'
      00022B 38                    8656 	.db #0x38	; 56	'8'
      00022C 44                    8657 	.db #0x44	; 68	'D'
      00022D 44                    8658 	.db #0x44	; 68	'D'
      00022E 44                    8659 	.db #0x44	; 68	'D'
      00022F 38                    8660 	.db #0x38	; 56	'8'
      000230 FC                    8661 	.db #0xfc	; 252
      000231 18                    8662 	.db #0x18	; 24
      000232 24                    8663 	.db #0x24	; 36
      000233 24                    8664 	.db #0x24	; 36
      000234 18                    8665 	.db #0x18	; 24
      000235 18                    8666 	.db #0x18	; 24
      000236 24                    8667 	.db #0x24	; 36
      000237 24                    8668 	.db #0x24	; 36
      000238 18                    8669 	.db #0x18	; 24
      000239 FC                    8670 	.db #0xfc	; 252
      00023A 7C                    8671 	.db #0x7c	; 124
      00023B 08                    8672 	.db #0x08	; 8
      00023C 04                    8673 	.db #0x04	; 4
      00023D 04                    8674 	.db #0x04	; 4
      00023E 08                    8675 	.db #0x08	; 8
      00023F 48                    8676 	.db #0x48	; 72	'H'
      000240 54                    8677 	.db #0x54	; 84	'T'
      000241 54                    8678 	.db #0x54	; 84	'T'
      000242 54                    8679 	.db #0x54	; 84	'T'
      000243 24                    8680 	.db #0x24	; 36
      000244 04                    8681 	.db #0x04	; 4
      000245 04                    8682 	.db #0x04	; 4
      000246 3F                    8683 	.db #0x3f	; 63
      000247 44                    8684 	.db #0x44	; 68	'D'
      000248 24                    8685 	.db #0x24	; 36
      000249 3C                    8686 	.db #0x3c	; 60
      00024A 40                    8687 	.db #0x40	; 64
      00024B 40                    8688 	.db #0x40	; 64
      00024C 20                    8689 	.db #0x20	; 32
      00024D 7C                    8690 	.db #0x7c	; 124
      00024E 1C                    8691 	.db #0x1c	; 28
      00024F 20                    8692 	.db #0x20	; 32
      000250 40                    8693 	.db #0x40	; 64
      000251 20                    8694 	.db #0x20	; 32
      000252 1C                    8695 	.db #0x1c	; 28
      000253 3C                    8696 	.db #0x3c	; 60
      000254 40                    8697 	.db #0x40	; 64
      000255 30                    8698 	.db #0x30	; 48	'0'
      000256 40                    8699 	.db #0x40	; 64
      000257 3C                    8700 	.db #0x3c	; 60
      000258 44                    8701 	.db #0x44	; 68	'D'
      000259 28                    8702 	.db #0x28	; 40
      00025A 10                    8703 	.db #0x10	; 16
      00025B 28                    8704 	.db #0x28	; 40
      00025C 44                    8705 	.db #0x44	; 68	'D'
      00025D 4C                    8706 	.db #0x4c	; 76	'L'
      00025E 90                    8707 	.db #0x90	; 144
      00025F 90                    8708 	.db #0x90	; 144
      000260 90                    8709 	.db #0x90	; 144
      000261 7C                    8710 	.db #0x7c	; 124
      000262 44                    8711 	.db #0x44	; 68	'D'
      000263 64                    8712 	.db #0x64	; 100	'd'
      000264 54                    8713 	.db #0x54	; 84	'T'
      000265 4C                    8714 	.db #0x4c	; 76	'L'
      000266 44                    8715 	.db #0x44	; 68	'D'
      000267 00                    8716 	.db #0x00	; 0
      000268 08                    8717 	.db #0x08	; 8
      000269 36                    8718 	.db #0x36	; 54	'6'
      00026A 41                    8719 	.db #0x41	; 65	'A'
      00026B 00                    8720 	.db #0x00	; 0
      00026C 00                    8721 	.db #0x00	; 0
      00026D 00                    8722 	.db #0x00	; 0
      00026E 77                    8723 	.db #0x77	; 119	'w'
      00026F 00                    8724 	.db #0x00	; 0
      000270 00                    8725 	.db #0x00	; 0
      000271 00                    8726 	.db #0x00	; 0
      000272 41                    8727 	.db #0x41	; 65	'A'
      000273 36                    8728 	.db #0x36	; 54	'6'
      000274 08                    8729 	.db #0x08	; 8
      000275 00                    8730 	.db #0x00	; 0
      000276 02                    8731 	.db #0x02	; 2
      000277 01                    8732 	.db #0x01	; 1
      000278 02                    8733 	.db #0x02	; 2
      000279 04                    8734 	.db #0x04	; 4
      00027A 02                    8735 	.db #0x02	; 2
      00027B 3C                    8736 	.db #0x3c	; 60
      00027C 26                    8737 	.db #0x26	; 38
      00027D 23                    8738 	.db #0x23	; 35
      00027E 26                    8739 	.db #0x26	; 38
      00027F 3C                    8740 	.db #0x3c	; 60
      000280 1E                    8741 	.db #0x1e	; 30
      000281 A1                    8742 	.db #0xa1	; 161
      000282 A1                    8743 	.db #0xa1	; 161
      000283 61                    8744 	.db #0x61	; 97	'a'
      000284 12                    8745 	.db #0x12	; 18
      000285 3A                    8746 	.db #0x3a	; 58
      000286 40                    8747 	.db #0x40	; 64
      000287 40                    8748 	.db #0x40	; 64
      000288 20                    8749 	.db #0x20	; 32
      000289 7A                    8750 	.db #0x7a	; 122	'z'
      00028A 38                    8751 	.db #0x38	; 56	'8'
      00028B 54                    8752 	.db #0x54	; 84	'T'
      00028C 54                    8753 	.db #0x54	; 84	'T'
      00028D 55                    8754 	.db #0x55	; 85	'U'
      00028E 59                    8755 	.db #0x59	; 89	'Y'
      00028F 21                    8756 	.db #0x21	; 33
      000290 55                    8757 	.db #0x55	; 85	'U'
      000291 55                    8758 	.db #0x55	; 85	'U'
      000292 79                    8759 	.db #0x79	; 121	'y'
      000293 41                    8760 	.db #0x41	; 65	'A'
      000294 22                    8761 	.db #0x22	; 34
      000295 54                    8762 	.db #0x54	; 84	'T'
      000296 54                    8763 	.db #0x54	; 84	'T'
      000297 78                    8764 	.db #0x78	; 120	'x'
      000298 42                    8765 	.db #0x42	; 66	'B'
      000299 21                    8766 	.db #0x21	; 33
      00029A 55                    8767 	.db #0x55	; 85	'U'
      00029B 54                    8768 	.db #0x54	; 84	'T'
      00029C 78                    8769 	.db #0x78	; 120	'x'
      00029D 40                    8770 	.db #0x40	; 64
      00029E 20                    8771 	.db #0x20	; 32
      00029F 54                    8772 	.db #0x54	; 84	'T'
      0002A0 55                    8773 	.db #0x55	; 85	'U'
      0002A1 79                    8774 	.db #0x79	; 121	'y'
      0002A2 40                    8775 	.db #0x40	; 64
      0002A3 0C                    8776 	.db #0x0c	; 12
      0002A4 1E                    8777 	.db #0x1e	; 30
      0002A5 52                    8778 	.db #0x52	; 82	'R'
      0002A6 72                    8779 	.db #0x72	; 114	'r'
      0002A7 12                    8780 	.db #0x12	; 18
      0002A8 39                    8781 	.db #0x39	; 57	'9'
      0002A9 55                    8782 	.db #0x55	; 85	'U'
      0002AA 55                    8783 	.db #0x55	; 85	'U'
      0002AB 55                    8784 	.db #0x55	; 85	'U'
      0002AC 59                    8785 	.db #0x59	; 89	'Y'
      0002AD 39                    8786 	.db #0x39	; 57	'9'
      0002AE 54                    8787 	.db #0x54	; 84	'T'
      0002AF 54                    8788 	.db #0x54	; 84	'T'
      0002B0 54                    8789 	.db #0x54	; 84	'T'
      0002B1 59                    8790 	.db #0x59	; 89	'Y'
      0002B2 39                    8791 	.db #0x39	; 57	'9'
      0002B3 55                    8792 	.db #0x55	; 85	'U'
      0002B4 54                    8793 	.db #0x54	; 84	'T'
      0002B5 54                    8794 	.db #0x54	; 84	'T'
      0002B6 58                    8795 	.db #0x58	; 88	'X'
      0002B7 00                    8796 	.db #0x00	; 0
      0002B8 00                    8797 	.db #0x00	; 0
      0002B9 45                    8798 	.db #0x45	; 69	'E'
      0002BA 7C                    8799 	.db #0x7c	; 124
      0002BB 41                    8800 	.db #0x41	; 65	'A'
      0002BC 00                    8801 	.db #0x00	; 0
      0002BD 02                    8802 	.db #0x02	; 2
      0002BE 45                    8803 	.db #0x45	; 69	'E'
      0002BF 7D                    8804 	.db #0x7d	; 125
      0002C0 42                    8805 	.db #0x42	; 66	'B'
      0002C1 00                    8806 	.db #0x00	; 0
      0002C2 01                    8807 	.db #0x01	; 1
      0002C3 45                    8808 	.db #0x45	; 69	'E'
      0002C4 7C                    8809 	.db #0x7c	; 124
      0002C5 40                    8810 	.db #0x40	; 64
      0002C6 7D                    8811 	.db #0x7d	; 125
      0002C7 12                    8812 	.db #0x12	; 18
      0002C8 11                    8813 	.db #0x11	; 17
      0002C9 12                    8814 	.db #0x12	; 18
      0002CA 7D                    8815 	.db #0x7d	; 125
      0002CB F0                    8816 	.db #0xf0	; 240
      0002CC 28                    8817 	.db #0x28	; 40
      0002CD 25                    8818 	.db #0x25	; 37
      0002CE 28                    8819 	.db #0x28	; 40
      0002CF F0                    8820 	.db #0xf0	; 240
      0002D0 7C                    8821 	.db #0x7c	; 124
      0002D1 54                    8822 	.db #0x54	; 84	'T'
      0002D2 55                    8823 	.db #0x55	; 85	'U'
      0002D3 45                    8824 	.db #0x45	; 69	'E'
      0002D4 00                    8825 	.db #0x00	; 0
      0002D5 20                    8826 	.db #0x20	; 32
      0002D6 54                    8827 	.db #0x54	; 84	'T'
      0002D7 54                    8828 	.db #0x54	; 84	'T'
      0002D8 7C                    8829 	.db #0x7c	; 124
      0002D9 54                    8830 	.db #0x54	; 84	'T'
      0002DA 7C                    8831 	.db #0x7c	; 124
      0002DB 0A                    8832 	.db #0x0a	; 10
      0002DC 09                    8833 	.db #0x09	; 9
      0002DD 7F                    8834 	.db #0x7f	; 127
      0002DE 49                    8835 	.db #0x49	; 73	'I'
      0002DF 32                    8836 	.db #0x32	; 50	'2'
      0002E0 49                    8837 	.db #0x49	; 73	'I'
      0002E1 49                    8838 	.db #0x49	; 73	'I'
      0002E2 49                    8839 	.db #0x49	; 73	'I'
      0002E3 32                    8840 	.db #0x32	; 50	'2'
      0002E4 3A                    8841 	.db #0x3a	; 58
      0002E5 44                    8842 	.db #0x44	; 68	'D'
      0002E6 44                    8843 	.db #0x44	; 68	'D'
      0002E7 44                    8844 	.db #0x44	; 68	'D'
      0002E8 3A                    8845 	.db #0x3a	; 58
      0002E9 32                    8846 	.db #0x32	; 50	'2'
      0002EA 4A                    8847 	.db #0x4a	; 74	'J'
      0002EB 48                    8848 	.db #0x48	; 72	'H'
      0002EC 48                    8849 	.db #0x48	; 72	'H'
      0002ED 30                    8850 	.db #0x30	; 48	'0'
      0002EE 3A                    8851 	.db #0x3a	; 58
      0002EF 41                    8852 	.db #0x41	; 65	'A'
      0002F0 41                    8853 	.db #0x41	; 65	'A'
      0002F1 21                    8854 	.db #0x21	; 33
      0002F2 7A                    8855 	.db #0x7a	; 122	'z'
      0002F3 3A                    8856 	.db #0x3a	; 58
      0002F4 42                    8857 	.db #0x42	; 66	'B'
      0002F5 40                    8858 	.db #0x40	; 64
      0002F6 20                    8859 	.db #0x20	; 32
      0002F7 78                    8860 	.db #0x78	; 120	'x'
      0002F8 00                    8861 	.db #0x00	; 0
      0002F9 9D                    8862 	.db #0x9d	; 157
      0002FA A0                    8863 	.db #0xa0	; 160
      0002FB A0                    8864 	.db #0xa0	; 160
      0002FC 7D                    8865 	.db #0x7d	; 125
      0002FD 3D                    8866 	.db #0x3d	; 61
      0002FE 42                    8867 	.db #0x42	; 66	'B'
      0002FF 42                    8868 	.db #0x42	; 66	'B'
      000300 42                    8869 	.db #0x42	; 66	'B'
      000301 3D                    8870 	.db #0x3d	; 61
      000302 3D                    8871 	.db #0x3d	; 61
      000303 40                    8872 	.db #0x40	; 64
      000304 40                    8873 	.db #0x40	; 64
      000305 40                    8874 	.db #0x40	; 64
      000306 3D                    8875 	.db #0x3d	; 61
      000307 3C                    8876 	.db #0x3c	; 60
      000308 24                    8877 	.db #0x24	; 36
      000309 FF                    8878 	.db #0xff	; 255
      00030A 24                    8879 	.db #0x24	; 36
      00030B 24                    8880 	.db #0x24	; 36
      00030C 48                    8881 	.db #0x48	; 72	'H'
      00030D 7E                    8882 	.db #0x7e	; 126
      00030E 49                    8883 	.db #0x49	; 73	'I'
      00030F 43                    8884 	.db #0x43	; 67	'C'
      000310 66                    8885 	.db #0x66	; 102	'f'
      000311 2B                    8886 	.db #0x2b	; 43
      000312 2F                    8887 	.db #0x2f	; 47
      000313 FC                    8888 	.db #0xfc	; 252
      000314 2F                    8889 	.db #0x2f	; 47
      000315 2B                    8890 	.db #0x2b	; 43
      000316 FF                    8891 	.db #0xff	; 255
      000317 09                    8892 	.db #0x09	; 9
      000318 29                    8893 	.db #0x29	; 41
      000319 F6                    8894 	.db #0xf6	; 246
      00031A 20                    8895 	.db #0x20	; 32
      00031B C0                    8896 	.db #0xc0	; 192
      00031C 88                    8897 	.db #0x88	; 136
      00031D 7E                    8898 	.db #0x7e	; 126
      00031E 09                    8899 	.db #0x09	; 9
      00031F 03                    8900 	.db #0x03	; 3
      000320 20                    8901 	.db #0x20	; 32
      000321 54                    8902 	.db #0x54	; 84	'T'
      000322 54                    8903 	.db #0x54	; 84	'T'
      000323 79                    8904 	.db #0x79	; 121	'y'
      000324 41                    8905 	.db #0x41	; 65	'A'
      000325 00                    8906 	.db #0x00	; 0
      000326 00                    8907 	.db #0x00	; 0
      000327 44                    8908 	.db #0x44	; 68	'D'
      000328 7D                    8909 	.db #0x7d	; 125
      000329 41                    8910 	.db #0x41	; 65	'A'
      00032A 30                    8911 	.db #0x30	; 48	'0'
      00032B 48                    8912 	.db #0x48	; 72	'H'
      00032C 48                    8913 	.db #0x48	; 72	'H'
      00032D 4A                    8914 	.db #0x4a	; 74	'J'
      00032E 32                    8915 	.db #0x32	; 50	'2'
      00032F 38                    8916 	.db #0x38	; 56	'8'
      000330 40                    8917 	.db #0x40	; 64
      000331 40                    8918 	.db #0x40	; 64
      000332 22                    8919 	.db #0x22	; 34
      000333 7A                    8920 	.db #0x7a	; 122	'z'
      000334 00                    8921 	.db #0x00	; 0
      000335 7A                    8922 	.db #0x7a	; 122	'z'
      000336 0A                    8923 	.db #0x0a	; 10
      000337 0A                    8924 	.db #0x0a	; 10
      000338 72                    8925 	.db #0x72	; 114	'r'
      000339 7D                    8926 	.db #0x7d	; 125
      00033A 0D                    8927 	.db #0x0d	; 13
      00033B 19                    8928 	.db #0x19	; 25
      00033C 31                    8929 	.db #0x31	; 49	'1'
      00033D 7D                    8930 	.db #0x7d	; 125
      00033E 26                    8931 	.db #0x26	; 38
      00033F 29                    8932 	.db #0x29	; 41
      000340 29                    8933 	.db #0x29	; 41
      000341 2F                    8934 	.db #0x2f	; 47
      000342 28                    8935 	.db #0x28	; 40
      000343 26                    8936 	.db #0x26	; 38
      000344 29                    8937 	.db #0x29	; 41
      000345 29                    8938 	.db #0x29	; 41
      000346 29                    8939 	.db #0x29	; 41
      000347 26                    8940 	.db #0x26	; 38
      000348 30                    8941 	.db #0x30	; 48	'0'
      000349 48                    8942 	.db #0x48	; 72	'H'
      00034A 4D                    8943 	.db #0x4d	; 77	'M'
      00034B 40                    8944 	.db #0x40	; 64
      00034C 20                    8945 	.db #0x20	; 32
      00034D 38                    8946 	.db #0x38	; 56	'8'
      00034E 08                    8947 	.db #0x08	; 8
      00034F 08                    8948 	.db #0x08	; 8
      000350 08                    8949 	.db #0x08	; 8
      000351 08                    8950 	.db #0x08	; 8
      000352 08                    8951 	.db #0x08	; 8
      000353 08                    8952 	.db #0x08	; 8
      000354 08                    8953 	.db #0x08	; 8
      000355 08                    8954 	.db #0x08	; 8
      000356 38                    8955 	.db #0x38	; 56	'8'
      000357 2F                    8956 	.db #0x2f	; 47
      000358 10                    8957 	.db #0x10	; 16
      000359 C8                    8958 	.db #0xc8	; 200
      00035A AC                    8959 	.db #0xac	; 172
      00035B BA                    8960 	.db #0xba	; 186
      00035C 2F                    8961 	.db #0x2f	; 47
      00035D 10                    8962 	.db #0x10	; 16
      00035E 28                    8963 	.db #0x28	; 40
      00035F 34                    8964 	.db #0x34	; 52	'4'
      000360 FA                    8965 	.db #0xfa	; 250
      000361 00                    8966 	.db #0x00	; 0
      000362 00                    8967 	.db #0x00	; 0
      000363 7B                    8968 	.db #0x7b	; 123
      000364 00                    8969 	.db #0x00	; 0
      000365 00                    8970 	.db #0x00	; 0
      000366 08                    8971 	.db #0x08	; 8
      000367 14                    8972 	.db #0x14	; 20
      000368 2A                    8973 	.db #0x2a	; 42
      000369 14                    8974 	.db #0x14	; 20
      00036A 22                    8975 	.db #0x22	; 34
      00036B 22                    8976 	.db #0x22	; 34
      00036C 14                    8977 	.db #0x14	; 20
      00036D 2A                    8978 	.db #0x2a	; 42
      00036E 14                    8979 	.db #0x14	; 20
      00036F 08                    8980 	.db #0x08	; 8
      000370 AA                    8981 	.db #0xaa	; 170
      000371 00                    8982 	.db #0x00	; 0
      000372 55                    8983 	.db #0x55	; 85	'U'
      000373 00                    8984 	.db #0x00	; 0
      000374 AA                    8985 	.db #0xaa	; 170
      000375 AA                    8986 	.db #0xaa	; 170
      000376 55                    8987 	.db #0x55	; 85	'U'
      000377 AA                    8988 	.db #0xaa	; 170
      000378 55                    8989 	.db #0x55	; 85	'U'
      000379 AA                    8990 	.db #0xaa	; 170
      00037A 00                    8991 	.db #0x00	; 0
      00037B 00                    8992 	.db #0x00	; 0
      00037C 00                    8993 	.db #0x00	; 0
      00037D FF                    8994 	.db #0xff	; 255
      00037E 00                    8995 	.db #0x00	; 0
      00037F 10                    8996 	.db #0x10	; 16
      000380 10                    8997 	.db #0x10	; 16
      000381 10                    8998 	.db #0x10	; 16
      000382 FF                    8999 	.db #0xff	; 255
      000383 00                    9000 	.db #0x00	; 0
      000384 14                    9001 	.db #0x14	; 20
      000385 14                    9002 	.db #0x14	; 20
      000386 14                    9003 	.db #0x14	; 20
      000387 FF                    9004 	.db #0xff	; 255
      000388 00                    9005 	.db #0x00	; 0
      000389 10                    9006 	.db #0x10	; 16
      00038A 10                    9007 	.db #0x10	; 16
      00038B FF                    9008 	.db #0xff	; 255
      00038C 00                    9009 	.db #0x00	; 0
      00038D FF                    9010 	.db #0xff	; 255
      00038E 10                    9011 	.db #0x10	; 16
      00038F 10                    9012 	.db #0x10	; 16
      000390 F0                    9013 	.db #0xf0	; 240
      000391 10                    9014 	.db #0x10	; 16
      000392 F0                    9015 	.db #0xf0	; 240
      000393 14                    9016 	.db #0x14	; 20
      000394 14                    9017 	.db #0x14	; 20
      000395 14                    9018 	.db #0x14	; 20
      000396 FC                    9019 	.db #0xfc	; 252
      000397 00                    9020 	.db #0x00	; 0
      000398 14                    9021 	.db #0x14	; 20
      000399 14                    9022 	.db #0x14	; 20
      00039A F7                    9023 	.db #0xf7	; 247
      00039B 00                    9024 	.db #0x00	; 0
      00039C FF                    9025 	.db #0xff	; 255
      00039D 00                    9026 	.db #0x00	; 0
      00039E 00                    9027 	.db #0x00	; 0
      00039F FF                    9028 	.db #0xff	; 255
      0003A0 00                    9029 	.db #0x00	; 0
      0003A1 FF                    9030 	.db #0xff	; 255
      0003A2 14                    9031 	.db #0x14	; 20
      0003A3 14                    9032 	.db #0x14	; 20
      0003A4 F4                    9033 	.db #0xf4	; 244
      0003A5 04                    9034 	.db #0x04	; 4
      0003A6 FC                    9035 	.db #0xfc	; 252
      0003A7 14                    9036 	.db #0x14	; 20
      0003A8 14                    9037 	.db #0x14	; 20
      0003A9 17                    9038 	.db #0x17	; 23
      0003AA 10                    9039 	.db #0x10	; 16
      0003AB 1F                    9040 	.db #0x1f	; 31
      0003AC 10                    9041 	.db #0x10	; 16
      0003AD 10                    9042 	.db #0x10	; 16
      0003AE 1F                    9043 	.db #0x1f	; 31
      0003AF 10                    9044 	.db #0x10	; 16
      0003B0 1F                    9045 	.db #0x1f	; 31
      0003B1 14                    9046 	.db #0x14	; 20
      0003B2 14                    9047 	.db #0x14	; 20
      0003B3 14                    9048 	.db #0x14	; 20
      0003B4 1F                    9049 	.db #0x1f	; 31
      0003B5 00                    9050 	.db #0x00	; 0
      0003B6 10                    9051 	.db #0x10	; 16
      0003B7 10                    9052 	.db #0x10	; 16
      0003B8 10                    9053 	.db #0x10	; 16
      0003B9 F0                    9054 	.db #0xf0	; 240
      0003BA 00                    9055 	.db #0x00	; 0
      0003BB 00                    9056 	.db #0x00	; 0
      0003BC 00                    9057 	.db #0x00	; 0
      0003BD 00                    9058 	.db #0x00	; 0
      0003BE 1F                    9059 	.db #0x1f	; 31
      0003BF 10                    9060 	.db #0x10	; 16
      0003C0 10                    9061 	.db #0x10	; 16
      0003C1 10                    9062 	.db #0x10	; 16
      0003C2 10                    9063 	.db #0x10	; 16
      0003C3 1F                    9064 	.db #0x1f	; 31
      0003C4 10                    9065 	.db #0x10	; 16
      0003C5 10                    9066 	.db #0x10	; 16
      0003C6 10                    9067 	.db #0x10	; 16
      0003C7 10                    9068 	.db #0x10	; 16
      0003C8 F0                    9069 	.db #0xf0	; 240
      0003C9 10                    9070 	.db #0x10	; 16
      0003CA 00                    9071 	.db #0x00	; 0
      0003CB 00                    9072 	.db #0x00	; 0
      0003CC 00                    9073 	.db #0x00	; 0
      0003CD FF                    9074 	.db #0xff	; 255
      0003CE 10                    9075 	.db #0x10	; 16
      0003CF 10                    9076 	.db #0x10	; 16
      0003D0 10                    9077 	.db #0x10	; 16
      0003D1 10                    9078 	.db #0x10	; 16
      0003D2 10                    9079 	.db #0x10	; 16
      0003D3 10                    9080 	.db #0x10	; 16
      0003D4 10                    9081 	.db #0x10	; 16
      0003D5 10                    9082 	.db #0x10	; 16
      0003D6 10                    9083 	.db #0x10	; 16
      0003D7 FF                    9084 	.db #0xff	; 255
      0003D8 10                    9085 	.db #0x10	; 16
      0003D9 00                    9086 	.db #0x00	; 0
      0003DA 00                    9087 	.db #0x00	; 0
      0003DB 00                    9088 	.db #0x00	; 0
      0003DC FF                    9089 	.db #0xff	; 255
      0003DD 14                    9090 	.db #0x14	; 20
      0003DE 00                    9091 	.db #0x00	; 0
      0003DF 00                    9092 	.db #0x00	; 0
      0003E0 FF                    9093 	.db #0xff	; 255
      0003E1 00                    9094 	.db #0x00	; 0
      0003E2 FF                    9095 	.db #0xff	; 255
      0003E3 00                    9096 	.db #0x00	; 0
      0003E4 00                    9097 	.db #0x00	; 0
      0003E5 1F                    9098 	.db #0x1f	; 31
      0003E6 10                    9099 	.db #0x10	; 16
      0003E7 17                    9100 	.db #0x17	; 23
      0003E8 00                    9101 	.db #0x00	; 0
      0003E9 00                    9102 	.db #0x00	; 0
      0003EA FC                    9103 	.db #0xfc	; 252
      0003EB 04                    9104 	.db #0x04	; 4
      0003EC F4                    9105 	.db #0xf4	; 244
      0003ED 14                    9106 	.db #0x14	; 20
      0003EE 14                    9107 	.db #0x14	; 20
      0003EF 17                    9108 	.db #0x17	; 23
      0003F0 10                    9109 	.db #0x10	; 16
      0003F1 17                    9110 	.db #0x17	; 23
      0003F2 14                    9111 	.db #0x14	; 20
      0003F3 14                    9112 	.db #0x14	; 20
      0003F4 F4                    9113 	.db #0xf4	; 244
      0003F5 04                    9114 	.db #0x04	; 4
      0003F6 F4                    9115 	.db #0xf4	; 244
      0003F7 00                    9116 	.db #0x00	; 0
      0003F8 00                    9117 	.db #0x00	; 0
      0003F9 FF                    9118 	.db #0xff	; 255
      0003FA 00                    9119 	.db #0x00	; 0
      0003FB F7                    9120 	.db #0xf7	; 247
      0003FC 14                    9121 	.db #0x14	; 20
      0003FD 14                    9122 	.db #0x14	; 20
      0003FE 14                    9123 	.db #0x14	; 20
      0003FF 14                    9124 	.db #0x14	; 20
      000400 14                    9125 	.db #0x14	; 20
      000401 14                    9126 	.db #0x14	; 20
      000402 14                    9127 	.db #0x14	; 20
      000403 F7                    9128 	.db #0xf7	; 247
      000404 00                    9129 	.db #0x00	; 0
      000405 F7                    9130 	.db #0xf7	; 247
      000406 14                    9131 	.db #0x14	; 20
      000407 14                    9132 	.db #0x14	; 20
      000408 14                    9133 	.db #0x14	; 20
      000409 17                    9134 	.db #0x17	; 23
      00040A 14                    9135 	.db #0x14	; 20
      00040B 10                    9136 	.db #0x10	; 16
      00040C 10                    9137 	.db #0x10	; 16
      00040D 1F                    9138 	.db #0x1f	; 31
      00040E 10                    9139 	.db #0x10	; 16
      00040F 1F                    9140 	.db #0x1f	; 31
      000410 14                    9141 	.db #0x14	; 20
      000411 14                    9142 	.db #0x14	; 20
      000412 14                    9143 	.db #0x14	; 20
      000413 F4                    9144 	.db #0xf4	; 244
      000414 14                    9145 	.db #0x14	; 20
      000415 10                    9146 	.db #0x10	; 16
      000416 10                    9147 	.db #0x10	; 16
      000417 F0                    9148 	.db #0xf0	; 240
      000418 10                    9149 	.db #0x10	; 16
      000419 F0                    9150 	.db #0xf0	; 240
      00041A 00                    9151 	.db #0x00	; 0
      00041B 00                    9152 	.db #0x00	; 0
      00041C 1F                    9153 	.db #0x1f	; 31
      00041D 10                    9154 	.db #0x10	; 16
      00041E 1F                    9155 	.db #0x1f	; 31
      00041F 00                    9156 	.db #0x00	; 0
      000420 00                    9157 	.db #0x00	; 0
      000421 00                    9158 	.db #0x00	; 0
      000422 1F                    9159 	.db #0x1f	; 31
      000423 14                    9160 	.db #0x14	; 20
      000424 00                    9161 	.db #0x00	; 0
      000425 00                    9162 	.db #0x00	; 0
      000426 00                    9163 	.db #0x00	; 0
      000427 FC                    9164 	.db #0xfc	; 252
      000428 14                    9165 	.db #0x14	; 20
      000429 00                    9166 	.db #0x00	; 0
      00042A 00                    9167 	.db #0x00	; 0
      00042B F0                    9168 	.db #0xf0	; 240
      00042C 10                    9169 	.db #0x10	; 16
      00042D F0                    9170 	.db #0xf0	; 240
      00042E 10                    9171 	.db #0x10	; 16
      00042F 10                    9172 	.db #0x10	; 16
      000430 FF                    9173 	.db #0xff	; 255
      000431 10                    9174 	.db #0x10	; 16
      000432 FF                    9175 	.db #0xff	; 255
      000433 14                    9176 	.db #0x14	; 20
      000434 14                    9177 	.db #0x14	; 20
      000435 14                    9178 	.db #0x14	; 20
      000436 FF                    9179 	.db #0xff	; 255
      000437 14                    9180 	.db #0x14	; 20
      000438 10                    9181 	.db #0x10	; 16
      000439 10                    9182 	.db #0x10	; 16
      00043A 10                    9183 	.db #0x10	; 16
      00043B 1F                    9184 	.db #0x1f	; 31
      00043C 00                    9185 	.db #0x00	; 0
      00043D 00                    9186 	.db #0x00	; 0
      00043E 00                    9187 	.db #0x00	; 0
      00043F 00                    9188 	.db #0x00	; 0
      000440 F0                    9189 	.db #0xf0	; 240
      000441 10                    9190 	.db #0x10	; 16
      000442 FF                    9191 	.db #0xff	; 255
      000443 FF                    9192 	.db #0xff	; 255
      000444 FF                    9193 	.db #0xff	; 255
      000445 FF                    9194 	.db #0xff	; 255
      000446 FF                    9195 	.db #0xff	; 255
      000447 F0                    9196 	.db #0xf0	; 240
      000448 F0                    9197 	.db #0xf0	; 240
      000449 F0                    9198 	.db #0xf0	; 240
      00044A F0                    9199 	.db #0xf0	; 240
      00044B F0                    9200 	.db #0xf0	; 240
      00044C FF                    9201 	.db #0xff	; 255
      00044D FF                    9202 	.db #0xff	; 255
      00044E FF                    9203 	.db #0xff	; 255
      00044F 00                    9204 	.db #0x00	; 0
      000450 00                    9205 	.db #0x00	; 0
      000451 00                    9206 	.db #0x00	; 0
      000452 00                    9207 	.db #0x00	; 0
      000453 00                    9208 	.db #0x00	; 0
      000454 FF                    9209 	.db #0xff	; 255
      000455 FF                    9210 	.db #0xff	; 255
      000456 0F                    9211 	.db #0x0f	; 15
      000457 0F                    9212 	.db #0x0f	; 15
      000458 0F                    9213 	.db #0x0f	; 15
      000459 0F                    9214 	.db #0x0f	; 15
      00045A 0F                    9215 	.db #0x0f	; 15
      00045B 38                    9216 	.db #0x38	; 56	'8'
      00045C 44                    9217 	.db #0x44	; 68	'D'
      00045D 44                    9218 	.db #0x44	; 68	'D'
      00045E 38                    9219 	.db #0x38	; 56	'8'
      00045F 44                    9220 	.db #0x44	; 68	'D'
      000460 FC                    9221 	.db #0xfc	; 252
      000461 4A                    9222 	.db #0x4a	; 74	'J'
      000462 4A                    9223 	.db #0x4a	; 74	'J'
      000463 4A                    9224 	.db #0x4a	; 74	'J'
      000464 34                    9225 	.db #0x34	; 52	'4'
      000465 7E                    9226 	.db #0x7e	; 126
      000466 02                    9227 	.db #0x02	; 2
      000467 02                    9228 	.db #0x02	; 2
      000468 06                    9229 	.db #0x06	; 6
      000469 06                    9230 	.db #0x06	; 6
      00046A 02                    9231 	.db #0x02	; 2
      00046B 7E                    9232 	.db #0x7e	; 126
      00046C 02                    9233 	.db #0x02	; 2
      00046D 7E                    9234 	.db #0x7e	; 126
      00046E 02                    9235 	.db #0x02	; 2
      00046F 63                    9236 	.db #0x63	; 99	'c'
      000470 55                    9237 	.db #0x55	; 85	'U'
      000471 49                    9238 	.db #0x49	; 73	'I'
      000472 41                    9239 	.db #0x41	; 65	'A'
      000473 63                    9240 	.db #0x63	; 99	'c'
      000474 38                    9241 	.db #0x38	; 56	'8'
      000475 44                    9242 	.db #0x44	; 68	'D'
      000476 44                    9243 	.db #0x44	; 68	'D'
      000477 3C                    9244 	.db #0x3c	; 60
      000478 04                    9245 	.db #0x04	; 4
      000479 40                    9246 	.db #0x40	; 64
      00047A 7E                    9247 	.db #0x7e	; 126
      00047B 20                    9248 	.db #0x20	; 32
      00047C 1E                    9249 	.db #0x1e	; 30
      00047D 20                    9250 	.db #0x20	; 32
      00047E 06                    9251 	.db #0x06	; 6
      00047F 02                    9252 	.db #0x02	; 2
      000480 7E                    9253 	.db #0x7e	; 126
      000481 02                    9254 	.db #0x02	; 2
      000482 02                    9255 	.db #0x02	; 2
      000483 99                    9256 	.db #0x99	; 153
      000484 A5                    9257 	.db #0xa5	; 165
      000485 E7                    9258 	.db #0xe7	; 231
      000486 A5                    9259 	.db #0xa5	; 165
      000487 99                    9260 	.db #0x99	; 153
      000488 1C                    9261 	.db #0x1c	; 28
      000489 2A                    9262 	.db #0x2a	; 42
      00048A 49                    9263 	.db #0x49	; 73	'I'
      00048B 2A                    9264 	.db #0x2a	; 42
      00048C 1C                    9265 	.db #0x1c	; 28
      00048D 4C                    9266 	.db #0x4c	; 76	'L'
      00048E 72                    9267 	.db #0x72	; 114	'r'
      00048F 01                    9268 	.db #0x01	; 1
      000490 72                    9269 	.db #0x72	; 114	'r'
      000491 4C                    9270 	.db #0x4c	; 76	'L'
      000492 30                    9271 	.db #0x30	; 48	'0'
      000493 4A                    9272 	.db #0x4a	; 74	'J'
      000494 4D                    9273 	.db #0x4d	; 77	'M'
      000495 4D                    9274 	.db #0x4d	; 77	'M'
      000496 30                    9275 	.db #0x30	; 48	'0'
      000497 30                    9276 	.db #0x30	; 48	'0'
      000498 48                    9277 	.db #0x48	; 72	'H'
      000499 78                    9278 	.db #0x78	; 120	'x'
      00049A 48                    9279 	.db #0x48	; 72	'H'
      00049B 30                    9280 	.db #0x30	; 48	'0'
      00049C BC                    9281 	.db #0xbc	; 188
      00049D 62                    9282 	.db #0x62	; 98	'b'
      00049E 5A                    9283 	.db #0x5a	; 90	'Z'
      00049F 46                    9284 	.db #0x46	; 70	'F'
      0004A0 3D                    9285 	.db #0x3d	; 61
      0004A1 3E                    9286 	.db #0x3e	; 62
      0004A2 49                    9287 	.db #0x49	; 73	'I'
      0004A3 49                    9288 	.db #0x49	; 73	'I'
      0004A4 49                    9289 	.db #0x49	; 73	'I'
      0004A5 00                    9290 	.db #0x00	; 0
      0004A6 7E                    9291 	.db #0x7e	; 126
      0004A7 01                    9292 	.db #0x01	; 1
      0004A8 01                    9293 	.db #0x01	; 1
      0004A9 01                    9294 	.db #0x01	; 1
      0004AA 7E                    9295 	.db #0x7e	; 126
      0004AB 2A                    9296 	.db #0x2a	; 42
      0004AC 2A                    9297 	.db #0x2a	; 42
      0004AD 2A                    9298 	.db #0x2a	; 42
      0004AE 2A                    9299 	.db #0x2a	; 42
      0004AF 2A                    9300 	.db #0x2a	; 42
      0004B0 44                    9301 	.db #0x44	; 68	'D'
      0004B1 44                    9302 	.db #0x44	; 68	'D'
      0004B2 5F                    9303 	.db #0x5f	; 95
      0004B3 44                    9304 	.db #0x44	; 68	'D'
      0004B4 44                    9305 	.db #0x44	; 68	'D'
      0004B5 40                    9306 	.db #0x40	; 64
      0004B6 51                    9307 	.db #0x51	; 81	'Q'
      0004B7 4A                    9308 	.db #0x4a	; 74	'J'
      0004B8 44                    9309 	.db #0x44	; 68	'D'
      0004B9 40                    9310 	.db #0x40	; 64
      0004BA 40                    9311 	.db #0x40	; 64
      0004BB 44                    9312 	.db #0x44	; 68	'D'
      0004BC 4A                    9313 	.db #0x4a	; 74	'J'
      0004BD 51                    9314 	.db #0x51	; 81	'Q'
      0004BE 40                    9315 	.db #0x40	; 64
      0004BF 00                    9316 	.db #0x00	; 0
      0004C0 00                    9317 	.db #0x00	; 0
      0004C1 FF                    9318 	.db #0xff	; 255
      0004C2 01                    9319 	.db #0x01	; 1
      0004C3 03                    9320 	.db #0x03	; 3
      0004C4 E0                    9321 	.db #0xe0	; 224
      0004C5 80                    9322 	.db #0x80	; 128
      0004C6 FF                    9323 	.db #0xff	; 255
      0004C7 00                    9324 	.db #0x00	; 0
      0004C8 00                    9325 	.db #0x00	; 0
      0004C9 08                    9326 	.db #0x08	; 8
      0004CA 08                    9327 	.db #0x08	; 8
      0004CB 6B                    9328 	.db #0x6b	; 107	'k'
      0004CC 6B                    9329 	.db #0x6b	; 107	'k'
      0004CD 08                    9330 	.db #0x08	; 8
      0004CE 36                    9331 	.db #0x36	; 54	'6'
      0004CF 12                    9332 	.db #0x12	; 18
      0004D0 36                    9333 	.db #0x36	; 54	'6'
      0004D1 24                    9334 	.db #0x24	; 36
      0004D2 36                    9335 	.db #0x36	; 54	'6'
      0004D3 06                    9336 	.db #0x06	; 6
      0004D4 0F                    9337 	.db #0x0f	; 15
      0004D5 09                    9338 	.db #0x09	; 9
      0004D6 0F                    9339 	.db #0x0f	; 15
      0004D7 06                    9340 	.db #0x06	; 6
      0004D8 00                    9341 	.db #0x00	; 0
      0004D9 00                    9342 	.db #0x00	; 0
      0004DA 18                    9343 	.db #0x18	; 24
      0004DB 18                    9344 	.db #0x18	; 24
      0004DC 00                    9345 	.db #0x00	; 0
      0004DD 00                    9346 	.db #0x00	; 0
      0004DE 00                    9347 	.db #0x00	; 0
      0004DF 10                    9348 	.db #0x10	; 16
      0004E0 10                    9349 	.db #0x10	; 16
      0004E1 00                    9350 	.db #0x00	; 0
      0004E2 30                    9351 	.db #0x30	; 48	'0'
      0004E3 40                    9352 	.db #0x40	; 64
      0004E4 FF                    9353 	.db #0xff	; 255
      0004E5 01                    9354 	.db #0x01	; 1
      0004E6 01                    9355 	.db #0x01	; 1
      0004E7 00                    9356 	.db #0x00	; 0
      0004E8 1F                    9357 	.db #0x1f	; 31
      0004E9 01                    9358 	.db #0x01	; 1
      0004EA 01                    9359 	.db #0x01	; 1
      0004EB 1E                    9360 	.db #0x1e	; 30
      0004EC 00                    9361 	.db #0x00	; 0
      0004ED 19                    9362 	.db #0x19	; 25
      0004EE 1D                    9363 	.db #0x1d	; 29
      0004EF 17                    9364 	.db #0x17	; 23
      0004F0 12                    9365 	.db #0x12	; 18
      0004F1 00                    9366 	.db #0x00	; 0
      0004F2 3C                    9367 	.db #0x3c	; 60
      0004F3 3C                    9368 	.db #0x3c	; 60
      0004F4 3C                    9369 	.db #0x3c	; 60
      0004F5 3C                    9370 	.db #0x3c	; 60
      0004F6 00                    9371 	.db #0x00	; 0
      0004F7 00                    9372 	.db #0x00	; 0
      0004F8 00                    9373 	.db #0x00	; 0
      0004F9 00                    9374 	.db #0x00	; 0
      0004FA 00                    9375 	.db #0x00	; 0
      0004FB                       9376 _keypad:
      0004FB 31                    9377 	.db #0x31	; 49	'1'
      0004FC 34                    9378 	.db #0x34	; 52	'4'
      0004FD 37                    9379 	.db #0x37	; 55	'7'
      0004FE 45                    9380 	.db #0x45	; 69	'E'
      0004FF 32                    9381 	.db #0x32	; 50	'2'
      000500 35                    9382 	.db #0x35	; 53	'5'
      000501 38                    9383 	.db #0x38	; 56	'8'
      000502 30                    9384 	.db #0x30	; 48	'0'
      000503 33                    9385 	.db #0x33	; 51	'3'
      000504 36                    9386 	.db #0x36	; 54	'6'
      000505 39                    9387 	.db #0x39	; 57	'9'
      000506 46                    9388 	.db #0x46	; 70	'F'
      000507 41                    9389 	.db #0x41	; 65	'A'
      000508 42                    9390 	.db #0x42	; 66	'B'
      000509 43                    9391 	.db #0x43	; 67	'C'
      00050A 44                    9392 	.db #0x44	; 68	'D'
                                   9393 	.area CONST   (CODE)
      00050B                       9394 ___str_0:
      00050B 55 41 52 54 20 64 61  9395 	.ascii "UART data"
             74 61
      000514 0A                    9396 	.db 0x0a
      000515 72 65 63 65 69 76 65  9397 	.ascii "received."
             64 2E
      00051E 0A                    9398 	.db 0x0a
      00051F 0A                    9399 	.db 0x0a
      000520 20 3E 3E 20           9400 	.ascii " >> "
      000524 00                    9401 	.db 0x00
                                   9402 	.area CSEG    (CODE)
                                   9403 	.area CONST   (CODE)
      000525                       9404 ___str_1:
      000525 3A                    9405 	.ascii ":"
      000526 00                    9406 	.db 0x00
                                   9407 	.area CSEG    (CODE)
                                   9408 	.area CONST   (CODE)
      000527                       9409 ___str_2:
      000527 30 78                 9410 	.ascii "0x"
      000529 00                    9411 	.db 0x00
                                   9412 	.area CSEG    (CODE)
                                   9413 	.area CONST   (CODE)
      00052A                       9414 ___str_3:
      00052A 0A                    9415 	.db 0x0a
      00052B 20 20 20 49 6E 76 61  9416 	.ascii "   Invalid"
             6C 69 64
      000535 0A                    9417 	.db 0x0a
      000536 0A                    9418 	.db 0x0a
      000537 00                    9419 	.db 0x00
                                   9420 	.area CSEG    (CODE)
                                   9421 	.area CONST   (CODE)
      000538                       9422 ___str_4:
      000538 20 20 20 20 49 6E 70  9423 	.ascii "    Input"
             75 74
      000541 00                    9424 	.db 0x00
                                   9425 	.area CSEG    (CODE)
                                   9426 	.area CONST   (CODE)
      000542                       9427 ___str_5:
      000542 0A                    9428 	.db 0x0a
      000543 53 65 6C 65 63 74 20  9429 	.ascii "Select Data"
             44 61 74 61
      00054E 0A                    9430 	.db 0x0a
      00054F 54 79 70 65 3A        9431 	.ascii "Type:"
      000554 0A                    9432 	.db 0x0a
      000555 0A                    9433 	.db 0x0a
      000556 00                    9434 	.db 0x00
                                   9435 	.area CSEG    (CODE)
                                   9436 	.area CONST   (CODE)
      000557                       9437 ___str_6:
      000557 28 31 29 20 42 79 74  9438 	.ascii "(1) Byte"
             65
      00055F 0A                    9439 	.db 0x0a
      000560 00                    9440 	.db 0x00
                                   9441 	.area CSEG    (CODE)
                                   9442 	.area CONST   (CODE)
      000561                       9443 ___str_7:
      000561 28 32 29 20 57 6F 72  9444 	.ascii "(2) Word"
             64
      000569 0A                    9445 	.db 0x0a
      00056A 00                    9446 	.db 0x00
                                   9447 	.area CSEG    (CODE)
                                   9448 	.area CONST   (CODE)
      00056B                       9449 ___str_8:
      00056B 28 33 29 20 44 6F 75  9450 	.ascii "(3) Double"
             62 6C 65
      000575 0A                    9451 	.db 0x0a
      000576 20 20 20 20 57 6F 72  9452 	.ascii "    Word"
             64
      00057E 0A                    9453 	.db 0x0a
      00057F 0A                    9454 	.db 0x0a
      000580 20 20 5F              9455 	.ascii "  _"
      000583 00                    9456 	.db 0x00
                                   9457 	.area CSEG    (CODE)
                                   9458 	.area CONST   (CODE)
      000584                       9459 ___str_9:
      000584 0A                    9460 	.db 0x0a
      000585 45 6E 74 65 72 20 44  9461 	.ascii "Enter Data"
             61 74 61
      00058F 0A                    9462 	.db 0x0a
      000590 53 69 7A 65 3A        9463 	.ascii "Size:"
      000595 0A                    9464 	.db 0x0a
      000596 0A                    9465 	.db 0x0a
      000597 20 20 30 78 5F 5F 5F  9466 	.ascii "  0x____"
             5F
      00059F 00                    9467 	.db 0x00
                                   9468 	.area CSEG    (CODE)
                                   9469 	.area CONST   (CODE)
      0005A0                       9470 ___str_10:
      0005A0 0A                    9471 	.db 0x0a
      0005A1 57 72 69 74 69 6E 67  9472 	.ascii "Writing 0x55"
             20 30 78 35 35
      0005AD 0A                    9473 	.db 0x0a
      0005AE 74 6F 20 61 6C 6C     9474 	.ascii "to all"
      0005B4 0A                    9475 	.db 0x0a
      0005B5 65 78 74 65 72 6E 61  9476 	.ascii "external RAM"
             6C 20 52 41 4D
      0005C1 0A                    9477 	.db 0x0a
      0005C2 6C 6F 63 61 74 69 6F  9478 	.ascii "locations."
             6E 73 2E
      0005CC 0A                    9479 	.db 0x0a
      0005CD 0A                    9480 	.db 0x0a
      0005CE 00                    9481 	.db 0x00
                                   9482 	.area CSEG    (CODE)
                                   9483 	.area CONST   (CODE)
      0005CF                       9484 ___str_11:
      0005CF 57 72 69 74 65        9485 	.ascii "Write"
      0005D4 0A                    9486 	.db 0x0a
      0005D5 63 6F 6D 70 6C 65 74  9487 	.ascii "complete."
             65 2E
      0005DE 0A                    9488 	.db 0x0a
      0005DF 00                    9489 	.db 0x00
                                   9490 	.area CSEG    (CODE)
                                   9491 	.area CONST   (CODE)
      0005E0                       9492 ___str_12:
      0005E0 0A                    9493 	.db 0x0a
      0005E1 56 65 72 69 66 79 69  9494 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0005EE 0A                    9495 	.db 0x0a
      0005EF 52 41 4D 20 6C 6F 63  9496 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0005FC 0A                    9497 	.db 0x0a
      0005FD 65 71 75 61 6C 20 30  9498 	.ascii "equal 0x55."
             78 35 35 2E
      000608 0A                    9499 	.db 0x0a
      000609 0A                    9500 	.db 0x0a
      00060A 00                    9501 	.db 0x00
                                   9502 	.area CSEG    (CODE)
                                   9503 	.area CONST   (CODE)
      00060B                       9504 ___str_13:
      00060B 31 73 74 20 52 41 4D  9505 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      000618 0A                    9506 	.db 0x0a
      000619 75 6E 73 75 63 63 65  9507 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      000626 0A                    9508 	.db 0x0a
      000627 0A                    9509 	.db 0x0a
      000628 00                    9510 	.db 0x00
                                   9511 	.area CSEG    (CODE)
                                   9512 	.area CONST   (CODE)
      000629                       9513 ___str_14:
      000629 45 72 72 6F 72 20 61  9514 	.ascii "Error at:"
             74 3A
      000632 0A                    9515 	.db 0x0a
      000633 00                    9516 	.db 0x00
                                   9517 	.area CSEG    (CODE)
                                   9518 	.area CONST   (CODE)
      000634                       9519 ___str_15:
      000634 3A 20 30 78           9520 	.ascii ": 0x"
      000638 00                    9521 	.db 0x00
                                   9522 	.area CSEG    (CODE)
                                   9523 	.area CONST   (CODE)
      000639                       9524 ___str_16:
      000639 52 65 74 75 72 6E 69  9525 	.ascii "Returning to"
             6E 67 20 74 6F
      000645 0A                    9526 	.db 0x0a
      000646 6D 61 69 6E 20 6D 65  9527 	.ascii "main menu."
             6E 75 2E
      000650 00                    9528 	.db 0x00
                                   9529 	.area CSEG    (CODE)
                                   9530 	.area CONST   (CODE)
      000651                       9531 ___str_17:
      000651 31 73 74 20 52 41 4D  9532 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      00065E 0A                    9533 	.db 0x0a
      00065F 73 75 63 63 65 73 73  9534 	.ascii "successful."
             66 75 6C 2E
      00066A 0A                    9535 	.db 0x0a
      00066B 0A                    9536 	.db 0x0a
      00066C 00                    9537 	.db 0x00
                                   9538 	.area CSEG    (CODE)
                                   9539 	.area CONST   (CODE)
      00066D                       9540 ___str_18:
      00066D 0A                    9541 	.db 0x0a
      00066E 57 72 69 74 69 6E 67  9542 	.ascii "Writing 0xAA"
             20 30 78 41 41
      00067A 0A                    9543 	.db 0x0a
      00067B 74 6F 20 61 6C 6C     9544 	.ascii "to all"
      000681 0A                    9545 	.db 0x0a
      000682 65 78 74 65 72 6E 61  9546 	.ascii "external RAM"
             6C 20 52 41 4D
      00068E 0A                    9547 	.db 0x0a
      00068F 6C 6F 63 61 74 69 6F  9548 	.ascii "locations."
             6E 73 2E
      000699 0A                    9549 	.db 0x0a
      00069A 0A                    9550 	.db 0x0a
      00069B 00                    9551 	.db 0x00
                                   9552 	.area CSEG    (CODE)
                                   9553 	.area CONST   (CODE)
      00069C                       9554 ___str_19:
      00069C 0A                    9555 	.db 0x0a
      00069D 56 65 72 69 66 79 69  9556 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0006AA 0A                    9557 	.db 0x0a
      0006AB 52 41 4D 20 6C 6F 63  9558 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0006B8 0A                    9559 	.db 0x0a
      0006B9 65 71 75 61 6C 20 30  9560 	.ascii "equal 0xAA."
             78 41 41 2E
      0006C4 0A                    9561 	.db 0x0a
      0006C5 0A                    9562 	.db 0x0a
      0006C6 00                    9563 	.db 0x00
                                   9564 	.area CSEG    (CODE)
                                   9565 	.area CONST   (CODE)
      0006C7                       9566 ___str_20:
      0006C7 32 6E 64 20 52 41 4D  9567 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006D4 0A                    9568 	.db 0x0a
      0006D5 75 6E 73 75 63 63 65  9569 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      0006E2 0A                    9570 	.db 0x0a
      0006E3 0A                    9571 	.db 0x0a
      0006E4 00                    9572 	.db 0x00
                                   9573 	.area CSEG    (CODE)
                                   9574 	.area CONST   (CODE)
      0006E5                       9575 ___str_21:
      0006E5 32 6E 64 20 52 41 4D  9576 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006F2 0A                    9577 	.db 0x0a
      0006F3 73 75 63 63 65 73 73  9578 	.ascii "successful."
             66 75 6C 2E
      0006FE 0A                    9579 	.db 0x0a
      0006FF 0A                    9580 	.db 0x0a
      000700 00                    9581 	.db 0x00
                                   9582 	.area CSEG    (CODE)
                                   9583 	.area CONST   (CODE)
      000701                       9584 ___str_22:
      000701 52 41 4D 20 63 68 65  9585 	.ascii "RAM check"
             63 6B
      00070A 0A                    9586 	.db 0x0a
      00070B 63 6F 6D 70 6C 65 74  9587 	.ascii "complete."
             65 2E
      000714 0A                    9588 	.db 0x0a
      000715 0A                    9589 	.db 0x0a
      000716 00                    9590 	.db 0x00
                                   9591 	.area CSEG    (CODE)
                                   9592 	.area CONST   (CODE)
      000717                       9593 ___str_23:
      000717 0A                    9594 	.db 0x0a
      000718 45 6E 74 65 72 20 73  9595 	.ascii "Enter source"
             6F 75 72 63 65
      000724 0A                    9596 	.db 0x0a
      000725 73 74 61 72 74 69 6E  9597 	.ascii "starting RAM"
             67 20 52 41 4D
      000731 0A                    9598 	.db 0x0a
      000732 61 64 64 72 65 73 73  9599 	.ascii "address:"
             3A
      00073A 0A                    9600 	.db 0x0a
      00073B 0A                    9601 	.db 0x0a
      00073C 0A                    9602 	.db 0x0a
      00073D 20 20 30 78 5F 5F 5F  9603 	.ascii "  0x____"
             5F
      000745 00                    9604 	.db 0x00
                                   9605 	.area CSEG    (CODE)
                                   9606 	.area CONST   (CODE)
      000746                       9607 ___str_24:
      000746 0A                    9608 	.db 0x0a
      000747 45 6E 74 65 72        9609 	.ascii "Enter"
      00074C 0A                    9610 	.db 0x0a
      00074D 64 65 73 74 69 6E 61  9611 	.ascii "destination"
             74 69 6F 6E
      000758 0A                    9612 	.db 0x0a
      000759 73 74 61 72 74 69 6E  9613 	.ascii "starting RAM"
             67 20 52 41 4D
      000765 0A                    9614 	.db 0x0a
      000766 61 64 64 72 65 73 73  9615 	.ascii "address:"
             3A
      00076E 0A                    9616 	.db 0x0a
      00076F 0A                    9617 	.db 0x0a
      000770 0A                    9618 	.db 0x0a
      000771 20 20 30 78 5F 5F 5F  9619 	.ascii "  0x____"
             5F
      000779 00                    9620 	.db 0x00
                                   9621 	.area CSEG    (CODE)
                                   9622 	.area CONST   (CODE)
      00077A                       9623 ___str_25:
      00077A 0A                    9624 	.db 0x0a
      00077B 4D 6F 76 65 20 63 6F  9625 	.ascii "Move complete."
             6D 70 6C 65 74 65 2E
      000789 0A                    9626 	.db 0x0a
      00078A 0A                    9627 	.db 0x0a
      00078B 00                    9628 	.db 0x00
                                   9629 	.area CSEG    (CODE)
                                   9630 	.area CONST   (CODE)
      00078C                       9631 ___str_26:
      00078C 0A                    9632 	.db 0x0a
      00078D 45 6E 74 65 72        9633 	.ascii "Enter"
      000792 0A                    9634 	.db 0x0a
      000793 73 74 61 72 74 69 6E  9635 	.ascii "starting RAM"
             67 20 52 41 4D
      00079F 0A                    9636 	.db 0x0a
      0007A0 61 64 64 72 65 73 73  9637 	.ascii "address:"
             3A
      0007A8 0A                    9638 	.db 0x0a
      0007A9 0A                    9639 	.db 0x0a
      0007AA 20 20 30 78 5F 5F 5F  9640 	.ascii "  0x____"
             5F
      0007B2 00                    9641 	.db 0x00
                                   9642 	.area CSEG    (CODE)
                                   9643 	.area CONST   (CODE)
      0007B3                       9644 ___str_27:
      0007B3 0A                    9645 	.db 0x0a
      0007B4 45 6E 74 65 72 20 73  9646 	.ascii "Enter search"
             65 61 72 63 68
      0007C0 0A                    9647 	.db 0x0a
      0007C1 76 61 6C 75 65 3A     9648 	.ascii "value:"
      0007C7 0A                    9649 	.db 0x0a
      0007C8 0A                    9650 	.db 0x0a
      0007C9 20 20 30 78 5F 5F     9651 	.ascii "  0x__"
      0007CF 00                    9652 	.db 0x00
                                   9653 	.area CSEG    (CODE)
                                   9654 	.area CONST   (CODE)
      0007D0                       9655 ___str_28:
      0007D0 0A                    9656 	.db 0x0a
      0007D1 30 78                 9657 	.ascii "0x"
      0007D3 00                    9658 	.db 0x00
                                   9659 	.area CSEG    (CODE)
                                   9660 	.area CONST   (CODE)
      0007D4                       9661 ___str_29:
      0007D4 20 66 6F 75 6E 64     9662 	.ascii " found"
      0007DA 0A                    9663 	.db 0x0a
      0007DB 00                    9664 	.db 0x00
                                   9665 	.area CSEG    (CODE)
                                   9666 	.area CONST   (CODE)
      0007DC                       9667 ___str_30:
      0007DC 30 78 31 30 30 30 30  9668 	.ascii "0x10000"
      0007E3 00                    9669 	.db 0x00
                                   9670 	.area CSEG    (CODE)
                                   9671 	.area CONST   (CODE)
      0007E4                       9672 ___str_31:
      0007E4 0A                    9673 	.db 0x0a
      0007E5 74 69 6D 65 73 2E     9674 	.ascii "times."
      0007EB 00                    9675 	.db 0x00
                                   9676 	.area CSEG    (CODE)
                                   9677 	.area CONST   (CODE)
      0007EC                       9678 ___str_32:
      0007EC 20 6E 6F 74           9679 	.ascii " not"
      0007F0 0A                    9680 	.db 0x0a
      0007F1 66 6F 75 6E 64 20 69  9681 	.ascii "found in"
             6E
      0007F9 0A                    9682 	.db 0x0a
      0007FA 65 78 74 65 72 6E 61  9683 	.ascii "external RAM"
             6C 20 52 41 4D
      000806 0A                    9684 	.db 0x0a
      000807 00                    9685 	.db 0x00
                                   9686 	.area CSEG    (CODE)
                                   9687 	.area CONST   (CODE)
      000808                       9688 ___str_33:
      000808 20 2D                 9689 	.ascii " -"
      00080A 0A                    9690 	.db 0x0a
      00080B 00                    9691 	.db 0x00
                                   9692 	.area CSEG    (CODE)
                                   9693 	.area CONST   (CODE)
      00080C                       9694 ___str_34:
      00080C 0A                    9695 	.db 0x0a
      00080D 00                    9696 	.db 0x00
                                   9697 	.area CSEG    (CODE)
                                   9698 	.area CONST   (CODE)
      00080E                       9699 ___str_35:
      00080E 20 20 28 30 29 20 2D  9700 	.ascii "  (0) - Next Page"
             20 4E 65 78 74 20 50
             61 67 65
      00081F 0A                    9701 	.db 0x0a
      000820 20 20 28 31 29 20 2D  9702 	.ascii "  (1) - Prev Page"
             20 50 72 65 76 20 50
             61 67 65
      000831 0A                    9703 	.db 0x0a
      000832 20 20 28 45 29 20 2D  9704 	.ascii "  (E) - END"
             20 45 4E 44
      00083D 0A                    9705 	.db 0x0a
      00083E 00                    9706 	.db 0x00
                                   9707 	.area CSEG    (CODE)
                                   9708 	.area CONST   (CODE)
      00083F                       9709 ___str_36:
      00083F 0A                    9710 	.db 0x0a
      000840 45 6E 64 20 6F 66 20  9711 	.ascii "End of Data."
             44 61 74 61 2E
      00084C 00                    9712 	.db 0x00
                                   9713 	.area CSEG    (CODE)
                                   9714 	.area CONST   (CODE)
      00084D                       9715 ___str_37:
      00084D 45 6E 64 20 6F 66 20  9716 	.ascii "End of Data"
             44 61 74 61
      000858 00                    9717 	.db 0x00
                                   9718 	.area CSEG    (CODE)
                                   9719 	.area CONST   (CODE)
      000859                       9720 ___str_38:
      000859 0A                    9721 	.db 0x0a
      00085A 52 65 74 75 72 6E 69  9722 	.ascii "Returning to"
             6E 67 20 74 6F
      000866 0A                    9723 	.db 0x0a
      000867 4D 61 69 6E 20 4D 65  9724 	.ascii "Main Menu."
             6E 75 2E
      000871 00                    9725 	.db 0x00
                                   9726 	.area CSEG    (CODE)
                                   9727 	.area CONST   (CODE)
      000872                       9728 ___str_39:
      000872 0A                    9729 	.db 0x0a
      000873 45 6E 74 65 72 20 73  9730 	.ascii "Enter source"
             6F 75 72 63 65
      00087F 0A                    9731 	.db 0x0a
      000880 73 74 61 72 74 69 6E  9732 	.ascii "starting RAM"
             67 20 52 41 4D
      00088C 0A                    9733 	.db 0x0a
      00088D 61 64 64 72 65 73 73  9734 	.ascii "address:"
             3A
      000895 0A                    9735 	.db 0x0a
      000896 0A                    9736 	.db 0x0a
      000897 20 20 30 78 5F 5F 5F  9737 	.ascii "  0x____"
             5F
      00089F 00                    9738 	.db 0x00
                                   9739 	.area CSEG    (CODE)
                                   9740 	.area CONST   (CODE)
      0008A0                       9741 ___str_40:
      0008A0 0A                    9742 	.db 0x0a
      0008A1 0A                    9743 	.db 0x0a
      0008A2 4E 65 77 20 76 61 6C  9744 	.ascii "New value:"
             75 65 3A
      0008AC 0A                    9745 	.db 0x0a
      0008AD 20 20 30 78 5F 5F     9746 	.ascii "  0x__"
      0008B3 00                    9747 	.db 0x00
                                   9748 	.area CSEG    (CODE)
                                   9749 	.area CONST   (CODE)
      0008B4                       9750 ___str_41:
      0008B4 0A                    9751 	.db 0x0a
      0008B5 0A                    9752 	.db 0x0a
      0008B6 0A                    9753 	.db 0x0a
      0008B7 0A                    9754 	.db 0x0a
      0008B8 28 31 29 20 45 64 69  9755 	.ascii "(1) Edit next"
             74 20 6E 65 78 74
      0008C5 0A                    9756 	.db 0x0a
      0008C6 52 41 4D 20 6C 6F 63  9757 	.ascii "RAM location"
             61 74 69 6F 6E
      0008D2 0A                    9758 	.db 0x0a
      0008D3 0A                    9759 	.db 0x0a
      0008D4 00                    9760 	.db 0x00
                                   9761 	.area CSEG    (CODE)
                                   9762 	.area CONST   (CODE)
      0008D5                       9763 ___str_42:
      0008D5 28 45 29 20 45 6E 64  9764 	.ascii "(E) End"
      0008DC 00                    9765 	.db 0x00
                                   9766 	.area CSEG    (CODE)
                                   9767 	.area CONST   (CODE)
      0008DD                       9768 ___str_43:
      0008DD 0A                    9769 	.db 0x0a
      0008DE 45 6E 64 20 6F 66 20  9770 	.ascii "End of data."
             64 61 74 61 2E
      0008EA 0A                    9771 	.db 0x0a
      0008EB 00                    9772 	.db 0x00
                                   9773 	.area CSEG    (CODE)
                                   9774 	.area CONST   (CODE)
      0008EC                       9775 ___str_44:
      0008EC 0A                    9776 	.db 0x0a
      0008ED 52 65 74 75 72 6E 69  9777 	.ascii "Returning to"
             6E 67 20 74 6F
      0008F9 0A                    9778 	.db 0x0a
      0008FA 6D 61 69 6E 20 6D 65  9779 	.ascii "main menu."
             6E 75 2E
      000904 00                    9780 	.db 0x00
                                   9781 	.area CSEG    (CODE)
                                   9782 	.area CONST   (CODE)
      000905                       9783 ___str_45:
      000905 20 6E 6F 74           9784 	.ascii " not"
      000909 0A                    9785 	.db 0x0a
      00090A 66 6F 75 6E 64 20 69  9786 	.ascii "found in"
             6E
      000912 0A                    9787 	.db 0x0a
      000913 61 64 64 72 65 73 73  9788 	.ascii "address range"
             20 72 61 6E 67 65
      000920 0A                    9789 	.db 0x0a
      000921 0A                    9790 	.db 0x0a
      000922 00                    9791 	.db 0x00
                                   9792 	.area CSEG    (CODE)
                                   9793 	.area CONST   (CODE)
      000923                       9794 ___str_46:
      000923 20 66 6F 75 6E 64 20  9795 	.ascii " found at"
             61 74
      00092C 0A                    9796 	.db 0x0a
      00092D 74 68 65 20 66 6F 6C  9797 	.ascii "the following"
             6C 6F 77 69 6E 67
      00093A 0A                    9798 	.db 0x0a
      00093B 61 64 64 72 65 73 73  9799 	.ascii "addresses:"
             65 73 3A
      000945 0A                    9800 	.db 0x0a
      000946 0A                    9801 	.db 0x0a
      000947 00                    9802 	.db 0x00
                                   9803 	.area CSEG    (CODE)
                                   9804 	.area CONST   (CODE)
      000948                       9805 ___str_47:
      000948 45 6E 64 20 6F 66 20  9806 	.ascii "End of Data."
             44 61 74 61 2E
      000954 00                    9807 	.db 0x00
                                   9808 	.area CSEG    (CODE)
                                   9809 	.area CONST   (CODE)
      000955                       9810 ___str_48:
      000955 0A                    9811 	.db 0x0a
      000956 45 6E 74 65 72        9812 	.ascii "Enter"
      00095B 0A                    9813 	.db 0x0a
      00095C 73 74 61 72 74 69 6E  9814 	.ascii "starting RAM"
             67 20 52 41 4D
      000968 0A                    9815 	.db 0x0a
      000969 61 64 64 72 65 73 73  9816 	.ascii "address:"
             3A
      000971 0A                    9817 	.db 0x0a
      000972 0A                    9818 	.db 0x0a
      000973 20 20 20 30 78 5F 5F  9819 	.ascii "   0x____"
             5F 5F
      00097C 00                    9820 	.db 0x00
                                   9821 	.area CSEG    (CODE)
                                   9822 	.area CONST   (CODE)
      00097D                       9823 ___str_49:
      00097D 0A                    9824 	.db 0x0a
      00097E 45 6E 74 65 72 20 73  9825 	.ascii "Enter search"
             65 61 72 63 68
      00098A 0A                    9826 	.db 0x0a
      00098B 76 61 6C 75 65 3A     9827 	.ascii "value:"
      000991 0A                    9828 	.db 0x0a
      000992 0A                    9829 	.db 0x0a
      000993 20 20 20 30 78 5F 5F  9830 	.ascii "   0x__"
      00099A 00                    9831 	.db 0x00
                                   9832 	.area CSEG    (CODE)
                                   9833 	.area CONST   (CODE)
      00099B                       9834 ___str_50:
      00099B 0A                    9835 	.db 0x0a
      00099C 28 31 29 20 31 32 30  9836 	.ascii "(1) 1200"
             30
      0009A4 0A                    9837 	.db 0x0a
      0009A5 00                    9838 	.db 0x00
                                   9839 	.area CSEG    (CODE)
                                   9840 	.area CONST   (CODE)
      0009A6                       9841 ___str_51:
      0009A6 28 32 29 20 32 34 30  9842 	.ascii "(2) 2400"
             30
      0009AE 0A                    9843 	.db 0x0a
      0009AF 00                    9844 	.db 0x00
                                   9845 	.area CSEG    (CODE)
                                   9846 	.area CONST   (CODE)
      0009B0                       9847 ___str_52:
      0009B0 28 33 29 20 34 38 30  9848 	.ascii "(3) 4800"
             30
      0009B8 0A                    9849 	.db 0x0a
      0009B9 00                    9850 	.db 0x00
                                   9851 	.area CSEG    (CODE)
                                   9852 	.area CONST   (CODE)
      0009BA                       9853 ___str_53:
      0009BA 28 34 29 20 39 36 30  9854 	.ascii "(4) 9600"
             30
      0009C2 0A                    9855 	.db 0x0a
      0009C3 00                    9856 	.db 0x00
                                   9857 	.area CSEG    (CODE)
                                   9858 	.area CONST   (CODE)
      0009C4                       9859 ___str_54:
      0009C4 28 35 29 20 31 39 32  9860 	.ascii "(5) 19200"
             30 30
      0009CD 0A                    9861 	.db 0x0a
      0009CE 0A                    9862 	.db 0x0a
      0009CF 00                    9863 	.db 0x00
                                   9864 	.area CSEG    (CODE)
                                   9865 	.area CONST   (CODE)
      0009D0                       9866 ___str_55:
      0009D0 43 75 72 72 65 6E 74  9867 	.ascii "Current:"
             3A
      0009D8 0A                    9868 	.db 0x0a
      0009D9 00                    9869 	.db 0x00
                                   9870 	.area CSEG    (CODE)
                                   9871 	.area CONST   (CODE)
      0009DA                       9872 ___str_56:
      0009DA 31 39 32 30 30        9873 	.ascii "19200"
      0009DF 0A                    9874 	.db 0x0a
      0009E0 00                    9875 	.db 0x00
                                   9876 	.area CSEG    (CODE)
                                   9877 	.area CONST   (CODE)
      0009E1                       9878 ___str_57:
      0009E1 49 6E 76 61 6C 69 64  9879 	.ascii "Invalid"
      0009E8 0A                    9880 	.db 0x0a
      0009E9 00                    9881 	.db 0x00
                                   9882 	.area CSEG    (CODE)
                                   9883 	.area CONST   (CODE)
      0009EA                       9884 ___str_58:
      0009EA 31 32 30 30           9885 	.ascii "1200"
      0009EE 0A                    9886 	.db 0x0a
      0009EF 00                    9887 	.db 0x00
                                   9888 	.area CSEG    (CODE)
                                   9889 	.area CONST   (CODE)
      0009F0                       9890 ___str_59:
      0009F0 32 34 30 30           9891 	.ascii "2400"
      0009F4 0A                    9892 	.db 0x0a
      0009F5 00                    9893 	.db 0x00
                                   9894 	.area CSEG    (CODE)
                                   9895 	.area CONST   (CODE)
      0009F6                       9896 ___str_60:
      0009F6 34 38 30 30           9897 	.ascii "4800"
      0009FA 0A                    9898 	.db 0x0a
      0009FB 00                    9899 	.db 0x00
                                   9900 	.area CSEG    (CODE)
                                   9901 	.area CONST   (CODE)
      0009FC                       9902 ___str_61:
      0009FC 39 36 30 30           9903 	.ascii "9600"
      000A00 0A                    9904 	.db 0x0a
      000A01 00                    9905 	.db 0x00
                                   9906 	.area CSEG    (CODE)
                                   9907 	.area CONST   (CODE)
      000A02                       9908 ___str_62:
      000A02 0A                    9909 	.db 0x0a
      000A03 20 20 20 5F           9910 	.ascii "   _"
      000A07 00                    9911 	.db 0x00
                                   9912 	.area CSEG    (CODE)
                                   9913 	.area CONST   (CODE)
      000A08                       9914 ___str_63:
      000A08 31                    9915 	.ascii "1"
      000A09 0A                    9916 	.db 0x0a
      000A0A 00                    9917 	.db 0x00
                                   9918 	.area CSEG    (CODE)
                                   9919 	.area CONST   (CODE)
      000A0B                       9920 ___str_64:
      000A0B 32                    9921 	.ascii "2"
      000A0C 0A                    9922 	.db 0x0a
      000A0D 00                    9923 	.db 0x00
                                   9924 	.area CSEG    (CODE)
                                   9925 	.area CONST   (CODE)
      000A0E                       9926 ___str_65:
      000A0E 33                    9927 	.ascii "3"
      000A0F 0A                    9928 	.db 0x0a
      000A10 00                    9929 	.db 0x00
                                   9930 	.area CSEG    (CODE)
                                   9931 	.area CONST   (CODE)
      000A11                       9932 ___str_66:
      000A11 34                    9933 	.ascii "4"
      000A12 0A                    9934 	.db 0x0a
      000A13 00                    9935 	.db 0x00
                                   9936 	.area CSEG    (CODE)
                                   9937 	.area CONST   (CODE)
      000A14                       9938 ___str_67:
      000A14 35                    9939 	.ascii "5"
      000A15 0A                    9940 	.db 0x0a
      000A16 00                    9941 	.db 0x00
                                   9942 	.area CSEG    (CODE)
                                   9943 	.area CONST   (CODE)
      000A17                       9944 ___str_68:
      000A17 58                    9945 	.ascii "X"
      000A18 0A                    9946 	.db 0x0a
      000A19 00                    9947 	.db 0x00
                                   9948 	.area CSEG    (CODE)
                                   9949 	.area CONST   (CODE)
      000A1A                       9950 ___str_69:
      000A1A 0A                    9951 	.db 0x0a
      000A1B 44 61 74 61 20 42 69  9952 	.ascii "Data Bits"
             74 73
      000A24 0A                    9953 	.db 0x0a
      000A25 0A                    9954 	.db 0x0a
      000A26 00                    9955 	.db 0x00
                                   9956 	.area CSEG    (CODE)
                                   9957 	.area CONST   (CODE)
      000A27                       9958 ___str_70:
      000A27 28 31 29 20 38        9959 	.ascii "(1) 8"
      000A2C 0A                    9960 	.db 0x0a
      000A2D 00                    9961 	.db 0x00
                                   9962 	.area CSEG    (CODE)
                                   9963 	.area CONST   (CODE)
      000A2E                       9964 ___str_71:
      000A2E 28 32 29 20 39        9965 	.ascii "(2) 9"
      000A33 0A                    9966 	.db 0x0a
      000A34 00                    9967 	.db 0x00
                                   9968 	.area CSEG    (CODE)
                                   9969 	.area CONST   (CODE)
      000A35                       9970 ___str_72:
      000A35 0A                    9971 	.db 0x0a
      000A36 43 75 72 72 65 6E 74  9972 	.ascii "Current: "
             3A 20
      000A3F 00                    9973 	.db 0x00
                                   9974 	.area CSEG    (CODE)
                                   9975 	.area CONST   (CODE)
      000A40                       9976 ___str_73:
      000A40 38                    9977 	.ascii "8"
      000A41 0A                    9978 	.db 0x0a
      000A42 00                    9979 	.db 0x00
                                   9980 	.area CSEG    (CODE)
                                   9981 	.area CONST   (CODE)
      000A43                       9982 ___str_74:
      000A43 39                    9983 	.ascii "9"
      000A44 0A                    9984 	.db 0x0a
      000A45 00                    9985 	.db 0x00
                                   9986 	.area CSEG    (CODE)
                                   9987 	.area CONST   (CODE)
      000A46                       9988 ___str_75:
      000A46 0A                    9989 	.db 0x0a
      000A47 50 61 72 69 74 79     9990 	.ascii "Parity"
      000A4D 0A                    9991 	.db 0x0a
      000A4E 0A                    9992 	.db 0x0a
      000A4F 00                    9993 	.db 0x00
                                   9994 	.area CSEG    (CODE)
                                   9995 	.area CONST   (CODE)
      000A50                       9996 ___str_76:
      000A50 28 31 29 20 45 76 65  9997 	.ascii "(1) Even"
             6E
      000A58 0A                    9998 	.db 0x0a
      000A59 00                    9999 	.db 0x00
                                  10000 	.area CSEG    (CODE)
                                  10001 	.area CONST   (CODE)
      000A5A                      10002 ___str_77:
      000A5A 28 32 29 20 4F 64 64 10003 	.ascii "(2) Odd"
      000A61 0A                   10004 	.db 0x0a
      000A62 00                   10005 	.db 0x00
                                  10006 	.area CSEG    (CODE)
                                  10007 	.area CONST   (CODE)
      000A63                      10008 ___str_78:
      000A63 28 33 29 20 4E 6F 6E 10009 	.ascii "(3) None"
             65
      000A6B 0A                   10010 	.db 0x0a
      000A6C 00                   10011 	.db 0x00
                                  10012 	.area CSEG    (CODE)
                                  10013 	.area CONST   (CODE)
      000A6D                      10014 ___str_79:
      000A6D 45 76 65 6E          10015 	.ascii "Even"
      000A71 0A                   10016 	.db 0x0a
      000A72 00                   10017 	.db 0x00
                                  10018 	.area CSEG    (CODE)
                                  10019 	.area CONST   (CODE)
      000A73                      10020 ___str_80:
      000A73 4F 64 64             10021 	.ascii "Odd"
      000A76 0A                   10022 	.db 0x0a
      000A77 00                   10023 	.db 0x00
                                  10024 	.area CSEG    (CODE)
                                  10025 	.area CONST   (CODE)
      000A78                      10026 ___str_81:
      000A78 4E 6F 6E 65          10027 	.ascii "None"
      000A7C 0A                   10028 	.db 0x0a
      000A7D 00                   10029 	.db 0x00
                                  10030 	.area CSEG    (CODE)
                                  10031 	.area CONST   (CODE)
      000A7E                      10032 ___str_82:
      000A7E 0A                   10033 	.db 0x0a
      000A7F 45 6E 74 65 72       10034 	.ascii "Enter"
      000A84 0A                   10035 	.db 0x0a
      000A85 63 68 61 72 61 63 74 10036 	.ascii "character"
             65 72
      000A8E 0A                   10037 	.db 0x0a
      000A8F 74 6F 20 73 65 6E 64 10038 	.ascii "to send:"
             3A
      000A97 0A                   10039 	.db 0x0a
      000A98 0A                   10040 	.db 0x0a
      000A99 20 20 20 5F          10041 	.ascii "   _"
      000A9D 00                   10042 	.db 0x00
                                  10043 	.area CSEG    (CODE)
                                  10044 	.area CONST   (CODE)
      000A9E                      10045 ___str_83:
      000A9E 0A                   10046 	.db 0x0a
      000A9F 28 31 29 20 44 61 74 10047 	.ascii "(1) Data Rate"
             61 20 52 61 74 65
      000AAC 00                   10048 	.db 0x00
                                  10049 	.area CSEG    (CODE)
                                  10050 	.area CONST   (CODE)
      000AAD                      10051 ___str_84:
      000AAD 0A                   10052 	.db 0x0a
      000AAE 28 32 29 20 23 20 6F 10053 	.ascii "(2) # of Data"
             66 20 44 61 74 61
      000ABB 0A                   10054 	.db 0x0a
      000ABC 20 20 20 20 42 69 74 10055 	.ascii "    Bits"
             73
      000AC4 00                   10056 	.db 0x00
                                  10057 	.area CSEG    (CODE)
                                  10058 	.area CONST   (CODE)
      000AC5                      10059 ___str_85:
      000AC5 0A                   10060 	.db 0x0a
      000AC6 28 33 29 20 50 61 72 10061 	.ascii "(3) Parity"
             69 74 79
      000AD0 00                   10062 	.db 0x00
                                  10063 	.area CSEG    (CODE)
                                  10064 	.area CONST   (CODE)
      000AD1                      10065 ___str_86:
      000AD1 0A                   10066 	.db 0x0a
      000AD2 28 34 29 20 53 65 6E 10067 	.ascii "(4) Send Data"
             64 20 44 61 74 61
      000ADF 00                   10068 	.db 0x00
                                  10069 	.area CSEG    (CODE)
                                  10070 	.area CONST   (CODE)
      000AE0                      10071 ___str_87:
      000AE0 0A                   10072 	.db 0x0a
      000AE1 28 45 29 20 45 6E 64 10073 	.ascii "(E) End"
      000AE8 0A                   10074 	.db 0x0a
      000AE9 00                   10075 	.db 0x00
                                  10076 	.area CSEG    (CODE)
                                  10077 	.area CONST   (CODE)
      000AEA                      10078 ___str_88:
      000AEA 20 20 20 43 61 6D 65 10079 	.ascii "   Cameron"
             72 6F 6E
      000AF4 0A                   10080 	.db 0x0a
      000AF5 20 20 20 42 69 6E 69 10081 	.ascii "   Biniamow"
             61 6D 6F 77
      000B00 0A                   10082 	.db 0x0a
      000B01 00                   10083 	.db 0x00
                                  10084 	.area CSEG    (CODE)
                                  10085 	.area CONST   (CODE)
      000B02                      10086 ___str_89:
      000B02 20 20 45 43 45 4E 2D 10087 	.ascii "  ECEN-4330"
             34 33 33 30
      000B0D 0A                   10088 	.db 0x0a
      000B0E 0A                   10089 	.db 0x0a
      000B0F 00                   10090 	.db 0x00
                                  10091 	.area CSEG    (CODE)
                                  10092 	.area CONST   (CODE)
      000B10                      10093 ___str_90:
      000B10 28 41 29 20 52 41 4D 10094 	.ascii "(A) RAM CHECK"
             20 43 48 45 43 4B
      000B1D 0A                   10095 	.db 0x0a
      000B1E 00                   10096 	.db 0x00
                                  10097 	.area CSEG    (CODE)
                                  10098 	.area CONST   (CODE)
      000B1F                      10099 ___str_91:
      000B1F 28 42 29 20 4D 4F 56 10100 	.ascii "(B) MOVE"
             45
      000B27 0A                   10101 	.db 0x0a
      000B28 00                   10102 	.db 0x00
                                  10103 	.area CSEG    (CODE)
                                  10104 	.area CONST   (CODE)
      000B29                      10105 ___str_92:
      000B29 28 43 29 20 43 4F 55 10106 	.ascii "(C) COUNT"
             4E 54
      000B32 0A                   10107 	.db 0x0a
      000B33 00                   10108 	.db 0x00
                                  10109 	.area CSEG    (CODE)
                                  10110 	.area CONST   (CODE)
      000B34                      10111 ___str_93:
      000B34 28 44 29 20 44 55 4D 10112 	.ascii "(D) DUMP"
             50
      000B3C 0A                   10113 	.db 0x0a
      000B3D 00                   10114 	.db 0x00
                                  10115 	.area CSEG    (CODE)
                                  10116 	.area CONST   (CODE)
      000B3E                      10117 ___str_94:
      000B3E 28 45 29 20 45 44 49 10118 	.ascii "(E) EDIT"
             54
      000B46 0A                   10119 	.db 0x0a
      000B47 00                   10120 	.db 0x00
                                  10121 	.area CSEG    (CODE)
                                  10122 	.area CONST   (CODE)
      000B48                      10123 ___str_95:
      000B48 28 46 29 20 46 49 4E 10124 	.ascii "(F) FIND"
             44
      000B50 0A                   10125 	.db 0x0a
      000B51 00                   10126 	.db 0x00
                                  10127 	.area CSEG    (CODE)
                                  10128 	.area CONST   (CODE)
      000B52                      10129 ___str_96:
      000B52 28 31 29 20 55 41 52 10130 	.ascii "(1) UART"
             54
      000B5A 0A                   10131 	.db 0x0a
      000B5B 00                   10132 	.db 0x00
                                  10133 	.area CSEG    (CODE)
                                  10134 	.area CONST   (CODE)
      000B5C                      10135 ___str_97:
      000B5C 53 70 72 69 6E 67 20 10136 	.ascii "Spring 2021"
             32 30 32 31
      000B67 00                   10137 	.db 0x00
                                  10138 	.area CSEG    (CODE)
                                  10139 	.area XINIT   (CODE)
                                  10140 	.area CABS    (ABS,CODE)
