                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.9 #12669 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module ecen4330lab7
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _RAMwrite_PARM_2
                                     12 	.globl _setAddress_PARM_4
                                     13 	.globl _setAddress_PARM_3
                                     14 	.globl _setAddress_PARM_2
                                     15 	.globl _setTextColor_PARM_2
                                     16 	.globl _setCursor_PARM_2
                                     17 	.globl _rtcCmd_PARM_2
                                     18 	.globl _writeRegister16_PARM_2
                                     19 	.globl _writeRegister8_PARM_2
                                     20 	.globl _keypad
                                     21 	.globl _main
                                     22 	.globl _UART
                                     23 	.globl _UART_send
                                     24 	.globl _UART_dataBits
                                     25 	.globl _UART_dataRate
                                     26 	.globl _resetLCD1
                                     27 	.globl _FIND
                                     28 	.globl _EDIT
                                     29 	.globl _EDIT_display
                                     30 	.globl _DUMP
                                     31 	.globl _DUMP_display
                                     32 	.globl _COUNT
                                     33 	.globl _MOVE
                                     34 	.globl _RAM_CHECK
                                     35 	.globl _inputDataSize
                                     36 	.globl _inputDataType
                                     37 	.globl _inputRead8
                                     38 	.globl _inputRead16
                                     39 	.globl _invalidInput
                                     40 	.globl _RAMread
                                     41 	.globl _RAMwrite
                                     42 	.globl _HEXtoASCII_16write
                                     43 	.globl _HEXtoASCII
                                     44 	.globl _ASCIItoHEX
                                     45 	.globl _drawChar
                                     46 	.globl _setRotation
                                     47 	.globl _UART_transmit
                                     48 	.globl _UART_Init
                                     49 	.globl _ISR_receive
                                     50 	.globl _CY
                                     51 	.globl _AC
                                     52 	.globl _F0
                                     53 	.globl _RS1
                                     54 	.globl _RS0
                                     55 	.globl _OV
                                     56 	.globl _FL
                                     57 	.globl _P
                                     58 	.globl _TF2
                                     59 	.globl _EXF2
                                     60 	.globl _RCLK
                                     61 	.globl _TCLK
                                     62 	.globl _EXEN2
                                     63 	.globl _TR2
                                     64 	.globl _C_T2
                                     65 	.globl _CP_RL2
                                     66 	.globl _T2CON_7
                                     67 	.globl _T2CON_6
                                     68 	.globl _T2CON_5
                                     69 	.globl _T2CON_4
                                     70 	.globl _T2CON_3
                                     71 	.globl _T2CON_2
                                     72 	.globl _T2CON_1
                                     73 	.globl _T2CON_0
                                     74 	.globl _PT2
                                     75 	.globl _PS
                                     76 	.globl _PT1
                                     77 	.globl _PX1
                                     78 	.globl _PT0
                                     79 	.globl _PX0
                                     80 	.globl _RD
                                     81 	.globl _WR
                                     82 	.globl _T1
                                     83 	.globl _T0
                                     84 	.globl _INT1
                                     85 	.globl _INT0
                                     86 	.globl _TXD
                                     87 	.globl _RXD
                                     88 	.globl _P3_7
                                     89 	.globl _P3_6
                                     90 	.globl _P3_5
                                     91 	.globl _P3_4
                                     92 	.globl _P3_3
                                     93 	.globl _P3_2
                                     94 	.globl _P3_1
                                     95 	.globl _P3_0
                                     96 	.globl _EA
                                     97 	.globl _ET2
                                     98 	.globl _ES
                                     99 	.globl _ET1
                                    100 	.globl _EX1
                                    101 	.globl _ET0
                                    102 	.globl _EX0
                                    103 	.globl _P2_7
                                    104 	.globl _P2_6
                                    105 	.globl _P2_5
                                    106 	.globl _P2_4
                                    107 	.globl _P2_3
                                    108 	.globl _P2_2
                                    109 	.globl _P2_1
                                    110 	.globl _P2_0
                                    111 	.globl _SM0
                                    112 	.globl _SM1
                                    113 	.globl _SM2
                                    114 	.globl _REN
                                    115 	.globl _TB8
                                    116 	.globl _RB8
                                    117 	.globl _TI
                                    118 	.globl _RI
                                    119 	.globl _T2EX
                                    120 	.globl _T2
                                    121 	.globl _P1_7
                                    122 	.globl _P1_6
                                    123 	.globl _P1_5
                                    124 	.globl _P1_4
                                    125 	.globl _P1_3
                                    126 	.globl _P1_2
                                    127 	.globl _P1_1
                                    128 	.globl _P1_0
                                    129 	.globl _TF1
                                    130 	.globl _TR1
                                    131 	.globl _TF0
                                    132 	.globl _TR0
                                    133 	.globl _IE1
                                    134 	.globl _IT1
                                    135 	.globl _IE0
                                    136 	.globl _IT0
                                    137 	.globl _P0_7
                                    138 	.globl _P0_6
                                    139 	.globl _P0_5
                                    140 	.globl _P0_4
                                    141 	.globl _P0_3
                                    142 	.globl _P0_2
                                    143 	.globl _P0_1
                                    144 	.globl _P0_0
                                    145 	.globl _B
                                    146 	.globl _A
                                    147 	.globl _ACC
                                    148 	.globl _PSW
                                    149 	.globl _TH2
                                    150 	.globl _TL2
                                    151 	.globl _RCAP2H
                                    152 	.globl _RCAP2L
                                    153 	.globl _T2MOD
                                    154 	.globl _T2CON
                                    155 	.globl _IP
                                    156 	.globl _P3
                                    157 	.globl _IE
                                    158 	.globl _P2
                                    159 	.globl _SBUF
                                    160 	.globl _SCON
                                    161 	.globl _P1
                                    162 	.globl _TH1
                                    163 	.globl _TH0
                                    164 	.globl _TL1
                                    165 	.globl _TL0
                                    166 	.globl _TMOD
                                    167 	.globl _TCON
                                    168 	.globl _PCON
                                    169 	.globl _DPH
                                    170 	.globl _DPL
                                    171 	.globl _SP
                                    172 	.globl _P0
                                    173 	.globl _drawChar_PARM_6
                                    174 	.globl _drawChar_PARM_5
                                    175 	.globl _drawChar_PARM_4
                                    176 	.globl _drawChar_PARM_3
                                    177 	.globl _drawChar_PARM_2
                                    178 	.globl _fillRect_PARM_5
                                    179 	.globl _fillRect_PARM_4
                                    180 	.globl _fillRect_PARM_3
                                    181 	.globl _fillRect_PARM_2
                                    182 	.globl _drawPixel_PARM_3
                                    183 	.globl _drawPixel_PARM_2
                                    184 	.globl _rtcWrite_PARM_2
                                    185 	.globl _received_flag
                                    186 	.globl _received_byte
                                    187 	.globl _parity
                                    188 	.globl _dataBits
                                    189 	.globl _dataRate
                                    190 	.globl _ts
                                    191 	.globl _y
                                    192 	.globl _x
                                    193 	.globl _textSizeHold
                                    194 	.globl _yCursorHold
                                    195 	.globl _xCursorHold
                                    196 	.globl _endAddrCalc
                                    197 	.globl _count
                                    198 	.globl _ASCII
                                    199 	.globl _byte1
                                    200 	.globl _byte
                                    201 	.globl _currAddr1
                                    202 	.globl _currAddr0
                                    203 	.globl _addr3
                                    204 	.globl _addr2
                                    205 	.globl _addr1
                                    206 	.globl _addr0
                                    207 	.globl _data
                                    208 	.globl _scrollEnd
                                    209 	.globl _dataEnd
                                    210 	.globl _validInput
                                    211 	.globl _dataSize
                                    212 	.globl _dataType
                                    213 	.globl _input8
                                    214 	.globl _input16
                                    215 	.globl _key
                                    216 	.globl __height
                                    217 	.globl __width
                                    218 	.globl _textbgcolor
                                    219 	.globl _textcolor
                                    220 	.globl _rotation
                                    221 	.globl _textsize
                                    222 	.globl _cursor_y
                                    223 	.globl _cursor_x
                                    224 	.globl _read_ram_address
                                    225 	.globl _seg7_address
                                    226 	.globl _lcd_address
                                    227 	.globl _rowloc
                                    228 	.globl _colloc
                                    229 	.globl _delay
                                    230 	.globl _writeRegister8
                                    231 	.globl _writeRegister16
                                    232 	.globl _rtcInit
                                    233 	.globl _rtcBusy
                                    234 	.globl _rtcCmd
                                    235 	.globl _rtcWrite
                                    236 	.globl _rtcRead
                                    237 	.globl _rtcPrint
                                    238 	.globl _setCursor
                                    239 	.globl _setTextColor
                                    240 	.globl _setTextSize
                                    241 	.globl _setAddress
                                    242 	.globl _TFT_LCD_INIT
                                    243 	.globl _drawPixel
                                    244 	.globl _fillRect
                                    245 	.globl _fillScreen
                                    246 	.globl _write
                                    247 	.globl _LCD_string_write
                                    248 	.globl _keyDetect
                                    249 	.globl _HEXtoASCII_8write
                                    250 	.globl _testRAM
                                    251 	.globl _resetLCD
                                    252 	.globl _FIND_display
                                    253 	.globl _UART_parity
                                    254 	.globl _UART_parity_count
                                    255 	.globl _LCD_mainMenu
                                    256 ;--------------------------------------------------------
                                    257 ; special function registers
                                    258 ;--------------------------------------------------------
                                    259 	.area RSEG    (ABS,DATA)
      000000                        260 	.org 0x0000
                           000080   261 _P0	=	0x0080
                           000081   262 _SP	=	0x0081
                           000082   263 _DPL	=	0x0082
                           000083   264 _DPH	=	0x0083
                           000087   265 _PCON	=	0x0087
                           000088   266 _TCON	=	0x0088
                           000089   267 _TMOD	=	0x0089
                           00008A   268 _TL0	=	0x008a
                           00008B   269 _TL1	=	0x008b
                           00008C   270 _TH0	=	0x008c
                           00008D   271 _TH1	=	0x008d
                           000090   272 _P1	=	0x0090
                           000098   273 _SCON	=	0x0098
                           000099   274 _SBUF	=	0x0099
                           0000A0   275 _P2	=	0x00a0
                           0000A8   276 _IE	=	0x00a8
                           0000B0   277 _P3	=	0x00b0
                           0000B8   278 _IP	=	0x00b8
                           0000C8   279 _T2CON	=	0x00c8
                           0000C9   280 _T2MOD	=	0x00c9
                           0000CA   281 _RCAP2L	=	0x00ca
                           0000CB   282 _RCAP2H	=	0x00cb
                           0000CC   283 _TL2	=	0x00cc
                           0000CD   284 _TH2	=	0x00cd
                           0000D0   285 _PSW	=	0x00d0
                           0000E0   286 _ACC	=	0x00e0
                           0000E0   287 _A	=	0x00e0
                           0000F0   288 _B	=	0x00f0
                                    289 ;--------------------------------------------------------
                                    290 ; special function bits
                                    291 ;--------------------------------------------------------
                                    292 	.area RSEG    (ABS,DATA)
      000000                        293 	.org 0x0000
                           000080   294 _P0_0	=	0x0080
                           000081   295 _P0_1	=	0x0081
                           000082   296 _P0_2	=	0x0082
                           000083   297 _P0_3	=	0x0083
                           000084   298 _P0_4	=	0x0084
                           000085   299 _P0_5	=	0x0085
                           000086   300 _P0_6	=	0x0086
                           000087   301 _P0_7	=	0x0087
                           000088   302 _IT0	=	0x0088
                           000089   303 _IE0	=	0x0089
                           00008A   304 _IT1	=	0x008a
                           00008B   305 _IE1	=	0x008b
                           00008C   306 _TR0	=	0x008c
                           00008D   307 _TF0	=	0x008d
                           00008E   308 _TR1	=	0x008e
                           00008F   309 _TF1	=	0x008f
                           000090   310 _P1_0	=	0x0090
                           000091   311 _P1_1	=	0x0091
                           000092   312 _P1_2	=	0x0092
                           000093   313 _P1_3	=	0x0093
                           000094   314 _P1_4	=	0x0094
                           000095   315 _P1_5	=	0x0095
                           000096   316 _P1_6	=	0x0096
                           000097   317 _P1_7	=	0x0097
                           000090   318 _T2	=	0x0090
                           000091   319 _T2EX	=	0x0091
                           000098   320 _RI	=	0x0098
                           000099   321 _TI	=	0x0099
                           00009A   322 _RB8	=	0x009a
                           00009B   323 _TB8	=	0x009b
                           00009C   324 _REN	=	0x009c
                           00009D   325 _SM2	=	0x009d
                           00009E   326 _SM1	=	0x009e
                           00009F   327 _SM0	=	0x009f
                           0000A0   328 _P2_0	=	0x00a0
                           0000A1   329 _P2_1	=	0x00a1
                           0000A2   330 _P2_2	=	0x00a2
                           0000A3   331 _P2_3	=	0x00a3
                           0000A4   332 _P2_4	=	0x00a4
                           0000A5   333 _P2_5	=	0x00a5
                           0000A6   334 _P2_6	=	0x00a6
                           0000A7   335 _P2_7	=	0x00a7
                           0000A8   336 _EX0	=	0x00a8
                           0000A9   337 _ET0	=	0x00a9
                           0000AA   338 _EX1	=	0x00aa
                           0000AB   339 _ET1	=	0x00ab
                           0000AC   340 _ES	=	0x00ac
                           0000AD   341 _ET2	=	0x00ad
                           0000AF   342 _EA	=	0x00af
                           0000B0   343 _P3_0	=	0x00b0
                           0000B1   344 _P3_1	=	0x00b1
                           0000B2   345 _P3_2	=	0x00b2
                           0000B3   346 _P3_3	=	0x00b3
                           0000B4   347 _P3_4	=	0x00b4
                           0000B5   348 _P3_5	=	0x00b5
                           0000B6   349 _P3_6	=	0x00b6
                           0000B7   350 _P3_7	=	0x00b7
                           0000B0   351 _RXD	=	0x00b0
                           0000B1   352 _TXD	=	0x00b1
                           0000B2   353 _INT0	=	0x00b2
                           0000B3   354 _INT1	=	0x00b3
                           0000B4   355 _T0	=	0x00b4
                           0000B5   356 _T1	=	0x00b5
                           0000B6   357 _WR	=	0x00b6
                           0000B7   358 _RD	=	0x00b7
                           0000B8   359 _PX0	=	0x00b8
                           0000B9   360 _PT0	=	0x00b9
                           0000BA   361 _PX1	=	0x00ba
                           0000BB   362 _PT1	=	0x00bb
                           0000BC   363 _PS	=	0x00bc
                           0000BD   364 _PT2	=	0x00bd
                           0000C8   365 _T2CON_0	=	0x00c8
                           0000C9   366 _T2CON_1	=	0x00c9
                           0000CA   367 _T2CON_2	=	0x00ca
                           0000CB   368 _T2CON_3	=	0x00cb
                           0000CC   369 _T2CON_4	=	0x00cc
                           0000CD   370 _T2CON_5	=	0x00cd
                           0000CE   371 _T2CON_6	=	0x00ce
                           0000CF   372 _T2CON_7	=	0x00cf
                           0000C8   373 _CP_RL2	=	0x00c8
                           0000C9   374 _C_T2	=	0x00c9
                           0000CA   375 _TR2	=	0x00ca
                           0000CB   376 _EXEN2	=	0x00cb
                           0000CC   377 _TCLK	=	0x00cc
                           0000CD   378 _RCLK	=	0x00cd
                           0000CE   379 _EXF2	=	0x00ce
                           0000CF   380 _TF2	=	0x00cf
                           0000D0   381 _P	=	0x00d0
                           0000D1   382 _FL	=	0x00d1
                           0000D2   383 _OV	=	0x00d2
                           0000D3   384 _RS0	=	0x00d3
                           0000D4   385 _RS1	=	0x00d4
                           0000D5   386 _F0	=	0x00d5
                           0000D6   387 _AC	=	0x00d6
                           0000D7   388 _CY	=	0x00d7
                                    389 ;--------------------------------------------------------
                                    390 ; overlayable register banks
                                    391 ;--------------------------------------------------------
                                    392 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        393 	.ds 8
                                    394 ;--------------------------------------------------------
                                    395 ; overlayable bit register bank
                                    396 ;--------------------------------------------------------
                                    397 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        398 bits:
      000000                        399 	.ds 1
                           008000   400 	b0 = bits[0]
                           008100   401 	b1 = bits[1]
                           008200   402 	b2 = bits[2]
                           008300   403 	b3 = bits[3]
                           008400   404 	b4 = bits[4]
                           008500   405 	b5 = bits[5]
                           008600   406 	b6 = bits[6]
                           008700   407 	b7 = bits[7]
                                    408 ;--------------------------------------------------------
                                    409 ; internal ram data
                                    410 ;--------------------------------------------------------
                                    411 	.area DSEG    (DATA)
      000000                        412 _colloc::
      000000                        413 	.ds 1
      000001                        414 _rowloc::
      000001                        415 	.ds 1
      000002                        416 _lcd_address::
      000002                        417 	.ds 2
      000004                        418 _seg7_address::
      000004                        419 	.ds 2
      000006                        420 _read_ram_address::
      000006                        421 	.ds 2
      000008                        422 _cursor_x::
      000008                        423 	.ds 2
      00000A                        424 _cursor_y::
      00000A                        425 	.ds 2
      00000C                        426 _textsize::
      00000C                        427 	.ds 1
      00000D                        428 _rotation::
      00000D                        429 	.ds 1
      00000E                        430 _textcolor::
      00000E                        431 	.ds 2
      000010                        432 _textbgcolor::
      000010                        433 	.ds 2
      000012                        434 __width::
      000012                        435 	.ds 2
      000014                        436 __height::
      000014                        437 	.ds 2
      000016                        438 _key::
      000016                        439 	.ds 1
      000017                        440 _input16::
      000017                        441 	.ds 2
      000019                        442 _input8::
      000019                        443 	.ds 1
      00001A                        444 _dataType::
      00001A                        445 	.ds 1
      00001B                        446 _dataSize::
      00001B                        447 	.ds 2
      00001D                        448 _validInput::
      00001D                        449 	.ds 1
      00001E                        450 _dataEnd::
      00001E                        451 	.ds 1
      00001F                        452 _scrollEnd::
      00001F                        453 	.ds 1
      000020                        454 _data::
      000020                        455 	.ds 1
      000021                        456 _addr0::
      000021                        457 	.ds 2
      000023                        458 _addr1::
      000023                        459 	.ds 2
      000025                        460 _addr2::
      000025                        461 	.ds 2
      000027                        462 _addr3::
      000027                        463 	.ds 2
      000029                        464 _currAddr0::
      000029                        465 	.ds 2
      00002B                        466 _currAddr1::
      00002B                        467 	.ds 2
      00002D                        468 _byte::
      00002D                        469 	.ds 2
      00002F                        470 _byte1::
      00002F                        471 	.ds 2
      000031                        472 _ASCII::
      000031                        473 	.ds 1
      000032                        474 _count::
      000032                        475 	.ds 2
      000034                        476 _endAddrCalc::
      000034                        477 	.ds 4
      000038                        478 _xCursorHold::
      000038                        479 	.ds 1
      000039                        480 _yCursorHold::
      000039                        481 	.ds 1
      00003A                        482 _textSizeHold::
      00003A                        483 	.ds 1
      00003B                        484 _x::
      00003B                        485 	.ds 1
      00003C                        486 _y::
      00003C                        487 	.ds 1
      00003D                        488 _ts::
      00003D                        489 	.ds 1
      00003E                        490 _dataRate::
      00003E                        491 	.ds 1
      00003F                        492 _dataBits::
      00003F                        493 	.ds 1
      000040                        494 _parity::
      000040                        495 	.ds 1
      000041                        496 _received_byte::
      000041                        497 	.ds 1
      000042                        498 _received_flag::
      000042                        499 	.ds 1
      000043                        500 _rtcWrite_PARM_2:
      000043                        501 	.ds 1
      000044                        502 _drawPixel_PARM_2:
      000044                        503 	.ds 2
      000046                        504 _drawPixel_PARM_3:
      000046                        505 	.ds 2
      000048                        506 _fillRect_PARM_2:
      000048                        507 	.ds 2
      00004A                        508 _fillRect_PARM_3:
      00004A                        509 	.ds 2
      00004C                        510 _fillRect_PARM_4:
      00004C                        511 	.ds 2
      00004E                        512 _fillRect_PARM_5:
      00004E                        513 	.ds 2
      000050                        514 _drawChar_PARM_2:
      000050                        515 	.ds 2
      000052                        516 _drawChar_PARM_3:
      000052                        517 	.ds 1
      000053                        518 _drawChar_PARM_4:
      000053                        519 	.ds 2
      000055                        520 _drawChar_PARM_5:
      000055                        521 	.ds 2
      000057                        522 _drawChar_PARM_6:
      000057                        523 	.ds 1
      000058                        524 _drawChar_x_65536_319:
      000058                        525 	.ds 2
      00005A                        526 _drawChar_line_196608_323:
      00005A                        527 	.ds 1
      00005B                        528 _drawChar_sloc1_1_0:
      00005B                        529 	.ds 2
                                    530 ;--------------------------------------------------------
                                    531 ; overlayable items in internal ram 
                                    532 ;--------------------------------------------------------
                                    533 	.area	OSEG    (OVR,DATA)
                                    534 	.area	OSEG    (OVR,DATA)
      000000                        535 _writeRegister8_PARM_2:
      000000                        536 	.ds 1
                                    537 	.area	OSEG    (OVR,DATA)
      000000                        538 _writeRegister16_PARM_2:
      000000                        539 	.ds 2
                                    540 	.area	OSEG    (OVR,DATA)
                                    541 	.area	OSEG    (OVR,DATA)
      000000                        542 _rtcCmd_PARM_2:
      000000                        543 	.ds 1
                                    544 	.area	OSEG    (OVR,DATA)
      000000                        545 _setCursor_PARM_2:
      000000                        546 	.ds 2
                                    547 	.area	OSEG    (OVR,DATA)
      000000                        548 _setTextColor_PARM_2:
      000000                        549 	.ds 2
                                    550 	.area	OSEG    (OVR,DATA)
                                    551 	.area	OSEG    (OVR,DATA)
      000000                        552 _setAddress_PARM_2:
      000000                        553 	.ds 2
      000002                        554 _setAddress_PARM_3:
      000002                        555 	.ds 2
      000004                        556 _setAddress_PARM_4:
      000004                        557 	.ds 2
                                    558 	.area	OSEG    (OVR,DATA)
                                    559 	.area	OSEG    (OVR,DATA)
                                    560 	.area	OSEG    (OVR,DATA)
      000000                        561 _RAMwrite_PARM_2:
      000000                        562 	.ds 1
                                    563 	.area	OSEG    (OVR,DATA)
                                    564 	.area	OSEG    (OVR,DATA)
                                    565 	.area	OSEG    (OVR,DATA)
                                    566 ;--------------------------------------------------------
                                    567 ; Stack segment in internal ram 
                                    568 ;--------------------------------------------------------
                                    569 	.area	SSEG
      000000                        570 __start__stack:
      000000                        571 	.ds	1
                                    572 
                                    573 ;--------------------------------------------------------
                                    574 ; indirectly addressable internal ram data
                                    575 ;--------------------------------------------------------
                                    576 	.area ISEG    (DATA)
                                    577 ;--------------------------------------------------------
                                    578 ; absolute internal ram data
                                    579 ;--------------------------------------------------------
                                    580 	.area IABS    (ABS,DATA)
                                    581 	.area IABS    (ABS,DATA)
                                    582 ;--------------------------------------------------------
                                    583 ; bit data
                                    584 ;--------------------------------------------------------
                                    585 	.area BSEG    (BIT)
      000000                        586 _drawChar_sloc0_1_0:
      000000                        587 	.ds 1
                                    588 ;--------------------------------------------------------
                                    589 ; paged external ram data
                                    590 ;--------------------------------------------------------
                                    591 	.area PSEG    (PAG,XDATA)
                                    592 ;--------------------------------------------------------
                                    593 ; external ram data
                                    594 ;--------------------------------------------------------
                                    595 	.area XSEG    (XDATA)
                                    596 ;--------------------------------------------------------
                                    597 ; absolute external ram data
                                    598 ;--------------------------------------------------------
                                    599 	.area XABS    (ABS,XDATA)
                                    600 ;--------------------------------------------------------
                                    601 ; external initialized ram data
                                    602 ;--------------------------------------------------------
                                    603 	.area XISEG   (XDATA)
                                    604 	.area HOME    (CODE)
                                    605 	.area GSINIT0 (CODE)
                                    606 	.area GSINIT1 (CODE)
                                    607 	.area GSINIT2 (CODE)
                                    608 	.area GSINIT3 (CODE)
                                    609 	.area GSINIT4 (CODE)
                                    610 	.area GSINIT5 (CODE)
                                    611 	.area GSINIT  (CODE)
                                    612 	.area GSFINAL (CODE)
                                    613 	.area CSEG    (CODE)
                                    614 ;--------------------------------------------------------
                                    615 ; interrupt vector 
                                    616 ;--------------------------------------------------------
                                    617 	.area HOME    (CODE)
      000000                        618 __interrupt_vect:
      000000 02r00r00         [24]  619 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  620 	reti
      000004                        621 	.ds	7
      00000B 32               [24]  622 	reti
      00000C                        623 	.ds	7
      000013 32               [24]  624 	reti
      000014                        625 	.ds	7
      00001B 32               [24]  626 	reti
      00001C                        627 	.ds	7
      000023 02r00r00         [24]  628 	ljmp	_ISR_receive
                                    629 ;--------------------------------------------------------
                                    630 ; global & static initialisations
                                    631 ;--------------------------------------------------------
                                    632 	.area HOME    (CODE)
                                    633 	.area GSINIT  (CODE)
                                    634 	.area GSFINAL (CODE)
                                    635 	.area GSINIT  (CODE)
                                    636 	.globl __sdcc_gsinit_startup
                                    637 	.globl __sdcc_program_startup
                                    638 	.globl __start__stack
                                    639 	.globl __mcs51_genXINIT
                                    640 	.globl __mcs51_genXRAMCLEAR
                                    641 	.globl __mcs51_genRAMCLEAR
                                    642 ;	ecen4330lab7.c:39: __xdata unsigned char* lcd_address = (unsigned char __xdata*) __LCD_ADDRESS__;
      000000 75*02 00         [24]  643 	mov	_lcd_address,#0x00
      000003 75*03 40         [24]  644 	mov	(_lcd_address + 1),#0x40
                                    645 ;	ecen4330lab7.c:40: __xdata unsigned char* seg7_address = (unsigned char __xdata*) __SEG_7_ADDRESS__;
      000006 75*04 00         [24]  646 	mov	_seg7_address,#0x00
      000009 75*05 80         [24]  647 	mov	(_seg7_address + 1),#0x80
                                    648 ;	ecen4330lab7.c:95: unsigned int count = 0;
      00000C E4               [12]  649 	clr	a
      00000D F5*32            [12]  650 	mov	_count,a
      00000F F5*33            [12]  651 	mov	(_count + 1),a
                                    652 ;	ecen4330lab7.c:99: unsigned char dataRate = 0;
                                    653 ;	1-genFromRTrack replaced	mov	_dataRate,#0x00
      000011 F5*3E            [12]  654 	mov	_dataRate,a
                                    655 ;	ecen4330lab7.c:100: unsigned char dataBits = 0;
                                    656 ;	1-genFromRTrack replaced	mov	_dataBits,#0x00
      000013 F5*3F            [12]  657 	mov	_dataBits,a
                                    658 ;	ecen4330lab7.c:101: unsigned char parity = 2;
      000015 75*40 02         [24]  659 	mov	_parity,#0x02
                                    660 ;	ecen4330lab7.c:103: volatile unsigned char received_byte = 0;
                                    661 ;	1-genFromRTrack replaced	mov	_received_byte,#0x00
      000018 F5*41            [12]  662 	mov	_received_byte,a
                                    663 ;	ecen4330lab7.c:104: volatile unsigned char received_flag = 0;
                                    664 ;	1-genFromRTrack replaced	mov	_received_flag,#0x00
      00001A F5*42            [12]  665 	mov	_received_flag,a
                                    666 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  667 	ljmp	__sdcc_program_startup
                                    668 ;--------------------------------------------------------
                                    669 ; Home
                                    670 ;--------------------------------------------------------
                                    671 	.area HOME    (CODE)
                                    672 	.area HOME    (CODE)
      000026                        673 __sdcc_program_startup:
      000026 02r27rA5         [24]  674 	ljmp	_main
                                    675 ;	return from main will return to caller
                                    676 ;--------------------------------------------------------
                                    677 ; code
                                    678 ;--------------------------------------------------------
                                    679 	.area CSEG    (CODE)
                                    680 ;------------------------------------------------------------
                                    681 ;Allocation info for local variables in function 'ISR_receive'
                                    682 ;------------------------------------------------------------
                                    683 ;	ecen4330lab7.c:131: void ISR_receive() __interrupt (4) {
                                    684 ;	-----------------------------------------
                                    685 ;	 function ISR_receive
                                    686 ;	-----------------------------------------
      000000                        687 _ISR_receive:
                           000007   688 	ar7 = 0x07
                           000006   689 	ar6 = 0x06
                           000005   690 	ar5 = 0x05
                           000004   691 	ar4 = 0x04
                           000003   692 	ar3 = 0x03
                           000002   693 	ar2 = 0x02
                           000001   694 	ar1 = 0x01
                           000000   695 	ar0 = 0x00
      000000 C0*00            [24]  696 	push	bits
      000002 C0 E0            [24]  697 	push	acc
      000004 C0 F0            [24]  698 	push	b
      000006 C0 82            [24]  699 	push	dpl
      000008 C0 83            [24]  700 	push	dph
      00000A C0 07            [24]  701 	push	(0+7)
      00000C C0 06            [24]  702 	push	(0+6)
      00000E C0 05            [24]  703 	push	(0+5)
      000010 C0 04            [24]  704 	push	(0+4)
      000012 C0 03            [24]  705 	push	(0+3)
      000014 C0 02            [24]  706 	push	(0+2)
      000016 C0 01            [24]  707 	push	(0+1)
      000018 C0 00            [24]  708 	push	(0+0)
      00001A C0 D0            [24]  709 	push	psw
      00001C 75 D0 00         [24]  710 	mov	psw,#0x00
                                    711 ;	ecen4330lab7.c:132: if (RI == 1){
      00001F 20 98 03         [24]  712 	jb	_RI,00151$
      000022 02r00rE2         [24]  713 	ljmp	00115$
      000025                        714 00151$:
                                    715 ;	ecen4330lab7.c:133: received_byte = SBUF;
      000025 85 99*41         [24]  716 	mov	_received_byte,_SBUF
                                    717 ;	ecen4330lab7.c:134: RI = 0;
                                    718 ;	assignBit
      000028 C2 98            [12]  719 	clr	_RI
                                    720 ;	ecen4330lab7.c:135: received_flag = 1;
      00002A 75*42 01         [24]  721 	mov	_received_flag,#0x01
                                    722 ;	ecen4330lab7.c:136: resetLCD();
      00002D 12r0Er4E         [24]  723 	lcall	_resetLCD
                                    724 ;	ecen4330lab7.c:141: data = UART_parity_count(received_byte);
      000030 85*41 82         [24]  725 	mov	dpl,_received_byte
      000033 12r24rE6         [24]  726 	lcall	_UART_parity_count
      000036 85 82*20         [24]  727 	mov	_data,dpl
                                    728 ;	ecen4330lab7.c:142: dataBits = SCON & 0xC0;
      000039 E5 98            [12]  729 	mov	a,_SCON
      00003B 54 C0            [12]  730 	anl	a,#0xc0
      00003D F5*3F            [12]  731 	mov	_dataBits,a
                                    732 ;	ecen4330lab7.c:143: switch(dataBits) {
      00003F 74 40            [12]  733 	mov	a,#0x40
      000041 B5*3F 02         [24]  734 	cjne	a,_dataBits,00152$
      000044 80 0B            [24]  735 	sjmp	00101$
      000046                        736 00152$:
      000046 74 C0            [12]  737 	mov	a,#0xc0
      000048 B5*3F 03         [24]  738 	cjne	a,_dataBits,00153$
      00004B 02r00rD7         [24]  739 	ljmp	00112$
      00004E                        740 00153$:
      00004E 02r00rE4         [24]  741 	ljmp	00117$
                                    742 ;	ecen4330lab7.c:145: case 0x40:
      000051                        743 00101$:
                                    744 ;	ecen4330lab7.c:146: switch(parity) {
      000051 E4               [12]  745 	clr	a
      000052 B5*40 02         [24]  746 	cjne	a,_parity,00154$
      000055 80 11            [24]  747 	sjmp	00102$
      000057                        748 00154$:
      000057 74 01            [12]  749 	mov	a,#0x01
      000059 B5*40 02         [24]  750 	cjne	a,_parity,00155$
      00005C 80 35            [24]  751 	sjmp	00106$
      00005E                        752 00155$:
      00005E 74 02            [12]  753 	mov	a,#0x02
      000060 B5*40 02         [24]  754 	cjne	a,_parity,00156$
      000063 80 58            [24]  755 	sjmp	00110$
      000065                        756 00156$:
      000065 02r00rE4         [24]  757 	ljmp	00117$
                                    758 ;	ecen4330lab7.c:148: case 0:
      000068                        759 00102$:
                                    760 ;	ecen4330lab7.c:150: if(data % 2 != 0) {
      000068 E5*20            [12]  761 	mov	a,_data
      00006A 30 E0 0C         [24]  762 	jnb	acc.0,00104$
                                    763 ;	ecen4330lab7.c:151: LCD_string_write("Parity\nError.");
      00006D 90r05r0B         [24]  764 	mov	dptr,#___str_0
      000070 75 F0 80         [24]  765 	mov	b,#0x80
      000073 12r0ArBA         [24]  766 	lcall	_LCD_string_write
      000076 02r00rE4         [24]  767 	ljmp	00117$
      000079                        768 00104$:
                                    769 ;	ecen4330lab7.c:154: received_byte &= 0x7F;  // Clear parity bit
      000079 53*41 7F         [24]  770 	anl	_received_byte,#0x7f
                                    771 ;	ecen4330lab7.c:155: LCD_string_write("UART data\nreceived.\n\n >> ");
      00007C 90r05r19         [24]  772 	mov	dptr,#___str_1
      00007F 75 F0 80         [24]  773 	mov	b,#0x80
      000082 12r0ArBA         [24]  774 	lcall	_LCD_string_write
                                    775 ;	ecen4330lab7.c:156: write(received_byte);
      000085 85*41 82         [24]  776 	mov	dpl,_received_byte
      000088 12r0Ar54         [24]  777 	lcall	_write
                                    778 ;	ecen4330lab7.c:157: delay(500);
      00008B 90 01 F4         [24]  779 	mov	dptr,#0x01f4
      00008E 12r01r1A         [24]  780 	lcall	_delay
                                    781 ;	ecen4330lab7.c:159: break;
                                    782 ;	ecen4330lab7.c:161: case 1:
      000091 80 51            [24]  783 	sjmp	00117$
      000093                        784 00106$:
                                    785 ;	ecen4330lab7.c:163: if(data % 2 == 0) {
      000093 E5*20            [12]  786 	mov	a,_data
      000095 20 E0 0B         [24]  787 	jb	acc.0,00108$
                                    788 ;	ecen4330lab7.c:164: LCD_string_write("Parity\nError.");
      000098 90r05r0B         [24]  789 	mov	dptr,#___str_0
      00009B 75 F0 80         [24]  790 	mov	b,#0x80
      00009E 12r0ArBA         [24]  791 	lcall	_LCD_string_write
      0000A1 80 41            [24]  792 	sjmp	00117$
      0000A3                        793 00108$:
                                    794 ;	ecen4330lab7.c:167: received_byte &= 0x7F;  // Clear parity bit
      0000A3 53*41 7F         [24]  795 	anl	_received_byte,#0x7f
                                    796 ;	ecen4330lab7.c:168: LCD_string_write("UART data\nreceived.\n\n >> ");
      0000A6 90r05r19         [24]  797 	mov	dptr,#___str_1
      0000A9 75 F0 80         [24]  798 	mov	b,#0x80
      0000AC 12r0ArBA         [24]  799 	lcall	_LCD_string_write
                                    800 ;	ecen4330lab7.c:169: write(received_byte);
      0000AF 85*41 82         [24]  801 	mov	dpl,_received_byte
      0000B2 12r0Ar54         [24]  802 	lcall	_write
                                    803 ;	ecen4330lab7.c:170: delay(500);
      0000B5 90 01 F4         [24]  804 	mov	dptr,#0x01f4
      0000B8 12r01r1A         [24]  805 	lcall	_delay
                                    806 ;	ecen4330lab7.c:172: break;
                                    807 ;	ecen4330lab7.c:174: case 2:
      0000BB 80 27            [24]  808 	sjmp	00117$
      0000BD                        809 00110$:
                                    810 ;	ecen4330lab7.c:175: received_byte &= 0x7F;  // Clear parity bit
      0000BD 53*41 7F         [24]  811 	anl	_received_byte,#0x7f
                                    812 ;	ecen4330lab7.c:176: LCD_string_write("UART data\nreceived.\n\n >> ");
      0000C0 90r05r19         [24]  813 	mov	dptr,#___str_1
      0000C3 75 F0 80         [24]  814 	mov	b,#0x80
      0000C6 12r0ArBA         [24]  815 	lcall	_LCD_string_write
                                    816 ;	ecen4330lab7.c:177: write(received_byte);
      0000C9 85*41 82         [24]  817 	mov	dpl,_received_byte
      0000CC 12r0Ar54         [24]  818 	lcall	_write
                                    819 ;	ecen4330lab7.c:178: delay(500);
      0000CF 90 01 F4         [24]  820 	mov	dptr,#0x01f4
      0000D2 12r01r1A         [24]  821 	lcall	_delay
                                    822 ;	ecen4330lab7.c:180: break;
                                    823 ;	ecen4330lab7.c:182: case 0xC0:
      0000D5 80 0D            [24]  824 	sjmp	00117$
      0000D7                        825 00112$:
                                    826 ;	ecen4330lab7.c:183: LCD_string_write("9\n");
      0000D7 90r05r33         [24]  827 	mov	dptr,#___str_2
      0000DA 75 F0 80         [24]  828 	mov	b,#0x80
      0000DD 12r0ArBA         [24]  829 	lcall	_LCD_string_write
                                    830 ;	ecen4330lab7.c:185: }
      0000E0 80 02            [24]  831 	sjmp	00117$
      0000E2                        832 00115$:
                                    833 ;	ecen4330lab7.c:188: TI = 0;
                                    834 ;	assignBit
      0000E2 C2 99            [12]  835 	clr	_TI
      0000E4                        836 00117$:
                                    837 ;	ecen4330lab7.c:190: }
      0000E4 D0 D0            [24]  838 	pop	psw
      0000E6 D0 00            [24]  839 	pop	(0+0)
      0000E8 D0 01            [24]  840 	pop	(0+1)
      0000EA D0 02            [24]  841 	pop	(0+2)
      0000EC D0 03            [24]  842 	pop	(0+3)
      0000EE D0 04            [24]  843 	pop	(0+4)
      0000F0 D0 05            [24]  844 	pop	(0+5)
      0000F2 D0 06            [24]  845 	pop	(0+6)
      0000F4 D0 07            [24]  846 	pop	(0+7)
      0000F6 D0 83            [24]  847 	pop	dph
      0000F8 D0 82            [24]  848 	pop	dpl
      0000FA D0 F0            [24]  849 	pop	b
      0000FC D0 E0            [24]  850 	pop	acc
      0000FE D0*00            [24]  851 	pop	bits
      000100 32               [24]  852 	reti
                                    853 ;------------------------------------------------------------
                                    854 ;Allocation info for local variables in function 'UART_Init'
                                    855 ;------------------------------------------------------------
                                    856 ;	ecen4330lab7.c:198: void UART_Init(){
                                    857 ;	-----------------------------------------
                                    858 ;	 function UART_Init
                                    859 ;	-----------------------------------------
      000101                        860 _UART_Init:
                                    861 ;	ecen4330lab7.c:199: SCON = 0x50;  // Asynchronous mode, 8-bit data and 1-stop bit
      000101 75 98 50         [24]  862 	mov	_SCON,#0x50
                                    863 ;	ecen4330lab7.c:200: PCON &= 0x7F; // 
      000104 53 87 7F         [24]  864 	anl	_PCON,#0x7f
                                    865 ;	ecen4330lab7.c:201: TMOD = 0x20;  // Timer1 in Mode2. in 8 bit auto reload
      000107 75 89 20         [24]  866 	mov	_TMOD,#0x20
                                    867 ;	ecen4330lab7.c:202: TH1 =  0xFD;  // Load timer value for 9600 baudrate
      00010A 75 8D FD         [24]  868 	mov	_TH1,#0xfd
                                    869 ;	ecen4330lab7.c:203: TR1 = 1;      // Turn ON the timer for Baud rate generation
                                    870 ;	assignBit
      00010D D2 8E            [12]  871 	setb	_TR1
                                    872 ;	ecen4330lab7.c:204: ES  = 1;      // Enable Serial Interrupt
                                    873 ;	assignBit
      00010F D2 AC            [12]  874 	setb	_ES
                                    875 ;	ecen4330lab7.c:205: EA  = 1;      // Enable Global Interrupt bit
                                    876 ;	assignBit
      000111 D2 AF            [12]  877 	setb	_EA
                                    878 ;	ecen4330lab7.c:206: }
      000113 22               [24]  879 	ret
                                    880 ;------------------------------------------------------------
                                    881 ;Allocation info for local variables in function 'UART_transmit'
                                    882 ;------------------------------------------------------------
                                    883 ;	ecen4330lab7.c:214: void UART_transmit(){
                                    884 ;	-----------------------------------------
                                    885 ;	 function UART_transmit
                                    886 ;	-----------------------------------------
      000114                        887 _UART_transmit:
                                    888 ;	ecen4330lab7.c:217: while(TI == 1);
      000114                        889 00101$:
      000114 20 99 FD         [24]  890 	jb	_TI,00101$
                                    891 ;	ecen4330lab7.c:219: TI = 0;
                                    892 ;	assignBit
      000117 C2 99            [12]  893 	clr	_TI
                                    894 ;	ecen4330lab7.c:220: }
      000119 22               [24]  895 	ret
                                    896 ;------------------------------------------------------------
                                    897 ;Allocation info for local variables in function 'delay'
                                    898 ;------------------------------------------------------------
                                    899 ;d                         Allocated to registers r6 r7 
                                    900 ;i                         Allocated to registers r4 r5 
                                    901 ;j                         Allocated to registers r2 r3 
                                    902 ;------------------------------------------------------------
                                    903 ;	ecen4330lab7.c:254: void delay (int d) /// x 1ms
                                    904 ;	-----------------------------------------
                                    905 ;	 function delay
                                    906 ;	-----------------------------------------
      00011A                        907 _delay:
      00011A AE 82            [24]  908 	mov	r6,dpl
      00011C AF 83            [24]  909 	mov	r7,dph
                                    910 ;	ecen4330lab7.c:257: for (i=0;i<d;i++)
      00011E 7C 00            [12]  911 	mov	r4,#0x00
      000120 7D 00            [12]  912 	mov	r5,#0x00
      000122                        913 00107$:
      000122 C3               [12]  914 	clr	c
      000123 EC               [12]  915 	mov	a,r4
      000124 9E               [12]  916 	subb	a,r6
      000125 ED               [12]  917 	mov	a,r5
      000126 64 80            [12]  918 	xrl	a,#0x80
      000128 8F F0            [24]  919 	mov	b,r7
      00012A 63 F0 80         [24]  920 	xrl	b,#0x80
      00012D 95 F0            [12]  921 	subb	a,b
      00012F 50 14            [24]  922 	jnc	00109$
                                    923 ;	ecen4330lab7.c:259: for (j=0;j<1000;j++);
      000131 7A E8            [12]  924 	mov	r2,#0xe8
      000133 7B 03            [12]  925 	mov	r3,#0x03
      000135                        926 00105$:
      000135 1A               [12]  927 	dec	r2
      000136 BA FF 01         [24]  928 	cjne	r2,#0xff,00130$
      000139 1B               [12]  929 	dec	r3
      00013A                        930 00130$:
      00013A EA               [12]  931 	mov	a,r2
      00013B 4B               [12]  932 	orl	a,r3
      00013C 70 F7            [24]  933 	jnz	00105$
                                    934 ;	ecen4330lab7.c:257: for (i=0;i<d;i++)
      00013E 0C               [12]  935 	inc	r4
      00013F BC 00 E0         [24]  936 	cjne	r4,#0x00,00107$
      000142 0D               [12]  937 	inc	r5
      000143 80 DD            [24]  938 	sjmp	00107$
      000145                        939 00109$:
                                    940 ;	ecen4330lab7.c:261: }
      000145 22               [24]  941 	ret
                                    942 ;------------------------------------------------------------
                                    943 ;Allocation info for local variables in function 'writeRegister8'
                                    944 ;------------------------------------------------------------
                                    945 ;d                         Allocated with name '_writeRegister8_PARM_2'
                                    946 ;a                         Allocated to registers r7 
                                    947 ;------------------------------------------------------------
                                    948 ;	ecen4330lab7.c:269: void writeRegister8(u8 a, u8 d) {
                                    949 ;	-----------------------------------------
                                    950 ;	 function writeRegister8
                                    951 ;	-----------------------------------------
      000146                        952 _writeRegister8:
      000146 AF 82            [24]  953 	mov	r7,dpl
                                    954 ;	ecen4330lab7.c:270: CD = __CMD__;
                                    955 ;	assignBit
      000148 C2 B5            [12]  956 	clr	_P3_5
                                    957 ;	ecen4330lab7.c:271: write8(a);
                                    958 ;	assignBit
      00014A D2 B4            [12]  959 	setb	_P3_4
      00014C 85*02 82         [24]  960 	mov	dpl,_lcd_address
      00014F 85*03 83         [24]  961 	mov	dph,(_lcd_address + 1)
      000152 EF               [12]  962 	mov	a,r7
      000153 F0               [24]  963 	movx	@dptr,a
                                    964 ;	assignBit
      000154 C2 B4            [12]  965 	clr	_P3_4
                                    966 ;	ecen4330lab7.c:272: CD = __DATA__;
                                    967 ;	assignBit
      000156 D2 B5            [12]  968 	setb	_P3_5
                                    969 ;	ecen4330lab7.c:273: write8(d);
                                    970 ;	assignBit
      000158 D2 B4            [12]  971 	setb	_P3_4
      00015A 85*02 82         [24]  972 	mov	dpl,_lcd_address
      00015D 85*03 83         [24]  973 	mov	dph,(_lcd_address + 1)
      000160 E5*00            [12]  974 	mov	a,_writeRegister8_PARM_2
      000162 F0               [24]  975 	movx	@dptr,a
                                    976 ;	assignBit
      000163 C2 B4            [12]  977 	clr	_P3_4
                                    978 ;	ecen4330lab7.c:274: }
      000165 22               [24]  979 	ret
                                    980 ;------------------------------------------------------------
                                    981 ;Allocation info for local variables in function 'writeRegister16'
                                    982 ;------------------------------------------------------------
                                    983 ;d                         Allocated with name '_writeRegister16_PARM_2'
                                    984 ;a                         Allocated to registers r6 r7 
                                    985 ;hi                        Allocated to registers r6 r7 
                                    986 ;lo                        Allocated to registers r4 r5 
                                    987 ;------------------------------------------------------------
                                    988 ;	ecen4330lab7.c:282: void writeRegister16(u16 a, u16 d){
                                    989 ;	-----------------------------------------
                                    990 ;	 function writeRegister16
                                    991 ;	-----------------------------------------
      000166                        992 _writeRegister16:
      000166 AE 82            [24]  993 	mov	r6,dpl
      000168 AF 83            [24]  994 	mov	r7,dph
                                    995 ;	ecen4330lab7.c:284: hi = (a) >> 8;
      00016A 8F 04            [24]  996 	mov	ar4,r7
                                    997 ;	ecen4330lab7.c:285: lo = (a);
                                    998 ;	ecen4330lab7.c:286: write8Reg(hi);
                                    999 ;	assignBit
      00016C C2 B5            [12] 1000 	clr	_P3_5
                                   1001 ;	assignBit
      00016E D2 B4            [12] 1002 	setb	_P3_4
      000170 85*02 82         [24] 1003 	mov	dpl,_lcd_address
      000173 85*03 83         [24] 1004 	mov	dph,(_lcd_address + 1)
      000176 EC               [12] 1005 	mov	a,r4
      000177 F0               [24] 1006 	movx	@dptr,a
                                   1007 ;	assignBit
      000178 C2 B4            [12] 1008 	clr	_P3_4
                                   1009 ;	ecen4330lab7.c:287: write8Reg(lo);
                                   1010 ;	assignBit
      00017A C2 B5            [12] 1011 	clr	_P3_5
                                   1012 ;	assignBit
      00017C D2 B4            [12] 1013 	setb	_P3_4
      00017E 85*02 82         [24] 1014 	mov	dpl,_lcd_address
      000181 85*03 83         [24] 1015 	mov	dph,(_lcd_address + 1)
      000184 EE               [12] 1016 	mov	a,r6
      000185 F0               [24] 1017 	movx	@dptr,a
                                   1018 ;	assignBit
      000186 C2 B4            [12] 1019 	clr	_P3_4
                                   1020 ;	ecen4330lab7.c:288: hi = (d) >> 8;
      000188 AE*01            [24] 1021 	mov	r6,(_writeRegister16_PARM_2 + 1)
                                   1022 ;	ecen4330lab7.c:289: lo = (d);
      00018A AC*00            [24] 1023 	mov	r4,_writeRegister16_PARM_2
                                   1024 ;	ecen4330lab7.c:290: CD = 1 ;
                                   1025 ;	assignBit
      00018C D2 B5            [12] 1026 	setb	_P3_5
                                   1027 ;	ecen4330lab7.c:291: write8Data(hi);
                                   1028 ;	assignBit
      00018E D2 B5            [12] 1029 	setb	_P3_5
                                   1030 ;	assignBit
      000190 D2 B4            [12] 1031 	setb	_P3_4
      000192 85*02 82         [24] 1032 	mov	dpl,_lcd_address
      000195 85*03 83         [24] 1033 	mov	dph,(_lcd_address + 1)
      000198 EE               [12] 1034 	mov	a,r6
      000199 F0               [24] 1035 	movx	@dptr,a
                                   1036 ;	assignBit
      00019A C2 B4            [12] 1037 	clr	_P3_4
                                   1038 ;	ecen4330lab7.c:292: write8Data(lo);
                                   1039 ;	assignBit
      00019C D2 B5            [12] 1040 	setb	_P3_5
                                   1041 ;	assignBit
      00019E D2 B4            [12] 1042 	setb	_P3_4
      0001A0 85*02 82         [24] 1043 	mov	dpl,_lcd_address
      0001A3 85*03 83         [24] 1044 	mov	dph,(_lcd_address + 1)
      0001A6 EC               [12] 1045 	mov	a,r4
      0001A7 F0               [24] 1046 	movx	@dptr,a
                                   1047 ;	assignBit
      0001A8 C2 B4            [12] 1048 	clr	_P3_4
                                   1049 ;	ecen4330lab7.c:293: }
      0001AA 22               [24] 1050 	ret
                                   1051 ;------------------------------------------------------------
                                   1052 ;Allocation info for local variables in function 'rtcInit'
                                   1053 ;------------------------------------------------------------
                                   1054 ;i                         Allocated with name '_rtcInit_i_65536_71'
                                   1055 ;------------------------------------------------------------
                                   1056 ;	ecen4330lab7.c:315: void rtcInit(void) {
                                   1057 ;	-----------------------------------------
                                   1058 ;	 function rtcInit
                                   1059 ;	-----------------------------------------
      0001AB                       1060 _rtcInit:
                                   1061 ;	ecen4330lab7.c:318: rtcCmd(__REG_F__, __HR_24__|__STOP__|__RESET__);  // stop and reset
      0001AB 75*00 07         [24] 1062 	mov	_rtcCmd_PARM_2,#0x07
      0001AE 90 00 0F         [24] 1063 	mov	dptr,#0x000f
      0001B1 12r01rF1         [24] 1064 	lcall	_rtcCmd
                                   1065 ;	ecen4330lab7.c:321: for (i = __S1_REG__; i < __REG_D__;i++) {
      0001B4 7E 00            [12] 1066 	mov	r6,#0x00
      0001B6 7F 00            [12] 1067 	mov	r7,#0x00
      0001B8                       1068 00102$:
                                   1069 ;	ecen4330lab7.c:322: rtcWrite(i, 0x00);
      0001B8 75*43 00         [24] 1070 	mov	_rtcWrite_PARM_2,#0x00
      0001BB 8E 82            [24] 1071 	mov	dpl,r6
      0001BD 8F 83            [24] 1072 	mov	dph,r7
      0001BF C0 07            [24] 1073 	push	ar7
      0001C1 C0 06            [24] 1074 	push	ar6
      0001C3 12r01rFA         [24] 1075 	lcall	_rtcWrite
      0001C6 D0 06            [24] 1076 	pop	ar6
      0001C8 D0 07            [24] 1077 	pop	ar7
                                   1078 ;	ecen4330lab7.c:321: for (i = __S1_REG__; i < __REG_D__;i++) {
      0001CA 0E               [12] 1079 	inc	r6
      0001CB BE 00 01         [24] 1080 	cjne	r6,#0x00,00115$
      0001CE 0F               [12] 1081 	inc	r7
      0001CF                       1082 00115$:
      0001CF C3               [12] 1083 	clr	c
      0001D0 EE               [12] 1084 	mov	a,r6
      0001D1 94 0D            [12] 1085 	subb	a,#0x0d
      0001D3 EF               [12] 1086 	mov	a,r7
      0001D4 94 00            [12] 1087 	subb	a,#0x00
      0001D6 40 E0            [24] 1088 	jc	00102$
                                   1089 ;	ecen4330lab7.c:325: rtcCmd(__REG_F__, __HR_24__);
      0001D8 75*00 04         [24] 1090 	mov	_rtcCmd_PARM_2,#0x04
      0001DB 90 00 0F         [24] 1091 	mov	dptr,#0x000f
                                   1092 ;	ecen4330lab7.c:326: }
      0001DE 02r01rF1         [24] 1093 	ljmp	_rtcCmd
                                   1094 ;------------------------------------------------------------
                                   1095 ;Allocation info for local variables in function 'rtcBusy'
                                   1096 ;------------------------------------------------------------
                                   1097 ;__1310720001              Allocated to registers 
                                   1098 ;map_address               Allocated to registers 
                                   1099 ;__1310720002              Allocated to registers 
                                   1100 ;map_address               Allocated to registers 
                                   1101 ;------------------------------------------------------------
                                   1102 ;	ecen4330lab7.c:334: void rtcBusy(void) {
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function rtcBusy
                                   1105 ;	-----------------------------------------
      0001E1                       1106 _rtcBusy:
                                   1107 ;	ecen4330lab7.c:336: while((ioread8(map_address) & 0x02));
      0001E1                       1108 00101$:
                                   1109 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1110 ;	assignBit
      0001E1 D2 B4            [12] 1111 	setb	_P3_4
                                   1112 ;	ecen4330lab7.c:243: data = *map_address;
      0001E3 90 00 0D         [24] 1113 	mov	dptr,#0x000d
      0001E6 E0               [24] 1114 	movx	a,@dptr
      0001E7 F5*20            [12] 1115 	mov	_data,a
                                   1116 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1117 ;	assignBit
      0001E9 C2 B4            [12] 1118 	clr	_P3_4
                                   1119 ;	ecen4330lab7.c:245: return data;   
      0001EB E5*20            [12] 1120 	mov	a,_data
                                   1121 ;	ecen4330lab7.c:336: while((ioread8(map_address) & 0x02));
      0001ED 20 E1 F1         [24] 1122 	jb	acc.1,00101$
                                   1123 ;	ecen4330lab7.c:337: }
      0001F0 22               [24] 1124 	ret
                                   1125 ;------------------------------------------------------------
                                   1126 ;Allocation info for local variables in function 'rtcCmd'
                                   1127 ;------------------------------------------------------------
                                   1128 ;d                         Allocated with name '_rtcCmd_PARM_2'
                                   1129 ;addr                      Allocated to registers r6 r7 
                                   1130 ;map_address               Allocated to registers 
                                   1131 ;__1310720004              Allocated to registers 
                                   1132 ;__1310720005              Allocated to registers r7 
                                   1133 ;map_address               Allocated to registers 
                                   1134 ;d                         Allocated to registers 
                                   1135 ;------------------------------------------------------------
                                   1136 ;	ecen4330lab7.c:345: inline void rtcCmd(unsigned int addr, unsigned char d) {
                                   1137 ;	-----------------------------------------
                                   1138 ;	 function rtcCmd
                                   1139 ;	-----------------------------------------
      0001F1                       1140 _rtcCmd:
                                   1141 ;	ecen4330lab7.c:346: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1142 ;	ecen4330lab7.c:347: iowrite8(map_address, d);
      0001F1 AF*00            [24] 1143 	mov	r7,_rtcCmd_PARM_2
                                   1144 ;	ecen4330lab7.c:229: IOM = 1;
                                   1145 ;	assignBit
      0001F3 D2 B4            [12] 1146 	setb	_P3_4
                                   1147 ;	ecen4330lab7.c:230: *map_address = d;
      0001F5 EF               [12] 1148 	mov	a,r7
      0001F6 F0               [24] 1149 	movx	@dptr,a
                                   1150 ;	ecen4330lab7.c:231: IOM = 0;
                                   1151 ;	assignBit
      0001F7 C2 B4            [12] 1152 	clr	_P3_4
                                   1153 ;	ecen4330lab7.c:347: iowrite8(map_address, d);
                                   1154 ;	ecen4330lab7.c:348: }
      0001F9 22               [24] 1155 	ret
                                   1156 ;------------------------------------------------------------
                                   1157 ;Allocation info for local variables in function 'rtcWrite'
                                   1158 ;------------------------------------------------------------
                                   1159 ;d                         Allocated with name '_rtcWrite_PARM_2'
                                   1160 ;addr                      Allocated to registers r6 r7 
                                   1161 ;map_address               Allocated to registers r6 r7 
                                   1162 ;__1310720007              Allocated to registers 
                                   1163 ;__1310720008              Allocated to registers 
                                   1164 ;addr                      Allocated to registers 
                                   1165 ;d                         Allocated to registers 
                                   1166 ;map_address               Allocated to registers 
                                   1167 ;__1310720004              Allocated to registers 
                                   1168 ;__1310720005              Allocated to registers 
                                   1169 ;map_address               Allocated to registers 
                                   1170 ;d                         Allocated to registers 
                                   1171 ;__1310720010              Allocated to registers 
                                   1172 ;__1310720011              Allocated to registers 
                                   1173 ;map_address               Allocated to registers 
                                   1174 ;d                         Allocated to registers 
                                   1175 ;__1310720013              Allocated to registers 
                                   1176 ;__1310720014              Allocated to registers r7 
                                   1177 ;addr                      Allocated to registers 
                                   1178 ;d                         Allocated to registers 
                                   1179 ;map_address               Allocated to registers 
                                   1180 ;__1310720004              Allocated to registers 
                                   1181 ;__1310720005              Allocated to registers 
                                   1182 ;map_address               Allocated to registers 
                                   1183 ;d                         Allocated to registers 
                                   1184 ;------------------------------------------------------------
                                   1185 ;	ecen4330lab7.c:356: inline void rtcWrite(unsigned int addr, unsigned char d) {
                                   1186 ;	-----------------------------------------
                                   1187 ;	 function rtcWrite
                                   1188 ;	-----------------------------------------
      0001FA                       1189 _rtcWrite:
      0001FA AE 82            [24] 1190 	mov	r6,dpl
      0001FC AF 83            [24] 1191 	mov	r7,dph
                                   1192 ;	ecen4330lab7.c:357: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1193 ;	ecen4330lab7.c:229: IOM = 1;
                                   1194 ;	assignBit
      0001FE D2 B4            [12] 1195 	setb	_P3_4
                                   1196 ;	ecen4330lab7.c:230: *map_address = d;
      000200 90 00 0D         [24] 1197 	mov	dptr,#0x000d
      000203 74 01            [12] 1198 	mov	a,#0x01
      000205 F0               [24] 1199 	movx	@dptr,a
                                   1200 ;	ecen4330lab7.c:231: IOM = 0;
                                   1201 ;	assignBit
      000206 C2 B4            [12] 1202 	clr	_P3_4
                                   1203 ;	ecen4330lab7.c:359: rtcBusy();
      000208 C0 07            [24] 1204 	push	ar7
      00020A C0 06            [24] 1205 	push	ar6
      00020C 12r01rE1         [24] 1206 	lcall	_rtcBusy
      00020F D0 06            [24] 1207 	pop	ar6
      000211 D0 07            [24] 1208 	pop	ar7
                                   1209 ;	ecen4330lab7.c:229: IOM = 1;
                                   1210 ;	assignBit
      000213 D2 B4            [12] 1211 	setb	_P3_4
                                   1212 ;	ecen4330lab7.c:230: *map_address = d;
      000215 8E 82            [24] 1213 	mov	dpl,r6
      000217 8F 83            [24] 1214 	mov	dph,r7
      000219 E4               [12] 1215 	clr	a
      00021A F0               [24] 1216 	movx	@dptr,a
                                   1217 ;	ecen4330lab7.c:231: IOM = 0;
                                   1218 ;	assignBit
      00021B C2 B4            [12] 1219 	clr	_P3_4
                                   1220 ;	ecen4330lab7.c:361: rtcCmd(__REG_D__, d);
      00021D AF*43            [24] 1221 	mov	r7,_rtcWrite_PARM_2
                                   1222 ;	ecen4330lab7.c:229: IOM = 1;
                                   1223 ;	assignBit
      00021F D2 B4            [12] 1224 	setb	_P3_4
                                   1225 ;	ecen4330lab7.c:230: *map_address = d;
      000221 90 00 0D         [24] 1226 	mov	dptr,#0x000d
      000224 EF               [12] 1227 	mov	a,r7
      000225 F0               [24] 1228 	movx	@dptr,a
                                   1229 ;	ecen4330lab7.c:231: IOM = 0;
                                   1230 ;	assignBit
      000226 C2 B4            [12] 1231 	clr	_P3_4
                                   1232 ;	ecen4330lab7.c:361: rtcCmd(__REG_D__, d);
                                   1233 ;	ecen4330lab7.c:362: }
      000228 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'rtcRead'
                                   1237 ;------------------------------------------------------------
                                   1238 ;addr                      Allocated to registers r6 r7 
                                   1239 ;__1310720019              Allocated to registers 
                                   1240 ;map_address               Allocated to registers r6 r7 
                                   1241 ;__1310720016              Allocated to registers 
                                   1242 ;__1310720017              Allocated to registers 
                                   1243 ;addr                      Allocated to registers 
                                   1244 ;d                         Allocated to registers 
                                   1245 ;map_address               Allocated to registers 
                                   1246 ;__1310720004              Allocated to registers 
                                   1247 ;__1310720005              Allocated to registers 
                                   1248 ;map_address               Allocated to registers 
                                   1249 ;d                         Allocated to registers 
                                   1250 ;__1310720020              Allocated to registers 
                                   1251 ;map_address               Allocated to registers 
                                   1252 ;__1310720022              Allocated to registers 
                                   1253 ;__1310720023              Allocated to registers 
                                   1254 ;addr                      Allocated to registers 
                                   1255 ;d                         Allocated to registers 
                                   1256 ;map_address               Allocated to registers 
                                   1257 ;__1310720004              Allocated to registers 
                                   1258 ;__1310720005              Allocated to registers 
                                   1259 ;map_address               Allocated to registers 
                                   1260 ;d                         Allocated to registers 
                                   1261 ;------------------------------------------------------------
                                   1262 ;	ecen4330lab7.c:371: inline unsigned char rtcRead(unsigned int addr) {
                                   1263 ;	-----------------------------------------
                                   1264 ;	 function rtcRead
                                   1265 ;	-----------------------------------------
      000229                       1266 _rtcRead:
      000229 AE 82            [24] 1267 	mov	r6,dpl
      00022B AF 83            [24] 1268 	mov	r7,dph
                                   1269 ;	ecen4330lab7.c:372: __xdata unsigned char* map_address =  (unsigned char __xdata*) addr;
                                   1270 ;	ecen4330lab7.c:229: IOM = 1;
                                   1271 ;	assignBit
      00022D D2 B4            [12] 1272 	setb	_P3_4
                                   1273 ;	ecen4330lab7.c:230: *map_address = d;
      00022F 90 00 0D         [24] 1274 	mov	dptr,#0x000d
      000232 74 01            [12] 1275 	mov	a,#0x01
      000234 F0               [24] 1276 	movx	@dptr,a
                                   1277 ;	ecen4330lab7.c:231: IOM = 0;
                                   1278 ;	assignBit
      000235 C2 B4            [12] 1279 	clr	_P3_4
                                   1280 ;	ecen4330lab7.c:374: rtcBusy();
      000237 C0 07            [24] 1281 	push	ar7
      000239 C0 06            [24] 1282 	push	ar6
      00023B 12r01rE1         [24] 1283 	lcall	_rtcBusy
      00023E D0 06            [24] 1284 	pop	ar6
      000240 D0 07            [24] 1285 	pop	ar7
                                   1286 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1287 ;	assignBit
      000242 D2 B4            [12] 1288 	setb	_P3_4
                                   1289 ;	ecen4330lab7.c:243: data = *map_address;
      000244 8E 82            [24] 1290 	mov	dpl,r6
      000246 8F 83            [24] 1291 	mov	dph,r7
      000248 E0               [24] 1292 	movx	a,@dptr
      000249 F5*20            [12] 1293 	mov	_data,a
                                   1294 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1295 ;	assignBit
      00024B C2 B4            [12] 1296 	clr	_P3_4
                                   1297 ;	ecen4330lab7.c:245: return data;   
                                   1298 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      00024D E5*20            [12] 1299 	mov	a,_data
      00024F 54 0F            [12] 1300 	anl	a,#0x0f
      000251 44 30            [12] 1301 	orl	a,#0x30
      000253 F5*20            [12] 1302 	mov	_data,a
                                   1303 ;	ecen4330lab7.c:229: IOM = 1;
                                   1304 ;	assignBit
      000255 D2 B4            [12] 1305 	setb	_P3_4
                                   1306 ;	ecen4330lab7.c:230: *map_address = d;
      000257 90 00 0D         [24] 1307 	mov	dptr,#0x000d
      00025A E4               [12] 1308 	clr	a
      00025B F0               [24] 1309 	movx	@dptr,a
                                   1310 ;	ecen4330lab7.c:231: IOM = 0;
                                   1311 ;	assignBit
      00025C C2 B4            [12] 1312 	clr	_P3_4
                                   1313 ;	ecen4330lab7.c:379: return data;
      00025E 85*20 82         [24] 1314 	mov	dpl,_data
                                   1315 ;	ecen4330lab7.c:380: }
      000261 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'rtcPrint'
                                   1319 ;------------------------------------------------------------
                                   1320 ;__1310720040              Allocated to registers 
                                   1321 ;__1310720037              Allocated to registers 
                                   1322 ;__1310720034              Allocated to registers 
                                   1323 ;__1310720031              Allocated to registers 
                                   1324 ;__1310720028              Allocated to registers 
                                   1325 ;__1310720025              Allocated to registers 
                                   1326 ;t                         Allocated to registers 
                                   1327 ;__1310720026              Allocated to registers 
                                   1328 ;addr                      Allocated to registers 
                                   1329 ;__1310720019              Allocated to registers 
                                   1330 ;map_address               Allocated to registers 
                                   1331 ;__1310720016              Allocated to registers 
                                   1332 ;__1310720017              Allocated to registers 
                                   1333 ;addr                      Allocated to registers 
                                   1334 ;d                         Allocated to registers 
                                   1335 ;map_address               Allocated to registers 
                                   1336 ;__1310720004              Allocated to registers 
                                   1337 ;__1310720005              Allocated to registers 
                                   1338 ;map_address               Allocated to registers 
                                   1339 ;d                         Allocated to registers 
                                   1340 ;__1310720020              Allocated to registers 
                                   1341 ;map_address               Allocated to registers 
                                   1342 ;__1310720022              Allocated to registers 
                                   1343 ;__1310720023              Allocated to registers 
                                   1344 ;addr                      Allocated to registers 
                                   1345 ;d                         Allocated to registers 
                                   1346 ;map_address               Allocated to registers 
                                   1347 ;__1310720004              Allocated to registers 
                                   1348 ;__1310720005              Allocated to registers 
                                   1349 ;map_address               Allocated to registers 
                                   1350 ;d                         Allocated to registers 
                                   1351 ;__1310720029              Allocated to registers 
                                   1352 ;addr                      Allocated to registers 
                                   1353 ;__1310720019              Allocated to registers 
                                   1354 ;map_address               Allocated to registers 
                                   1355 ;__1310720016              Allocated to registers 
                                   1356 ;__1310720017              Allocated to registers 
                                   1357 ;addr                      Allocated to registers 
                                   1358 ;d                         Allocated to registers 
                                   1359 ;map_address               Allocated to registers 
                                   1360 ;__1310720004              Allocated to registers 
                                   1361 ;__1310720005              Allocated to registers 
                                   1362 ;map_address               Allocated to registers 
                                   1363 ;d                         Allocated to registers 
                                   1364 ;__1310720020              Allocated to registers 
                                   1365 ;map_address               Allocated to registers 
                                   1366 ;__1310720022              Allocated to registers 
                                   1367 ;__1310720023              Allocated to registers 
                                   1368 ;addr                      Allocated to registers 
                                   1369 ;d                         Allocated to registers 
                                   1370 ;map_address               Allocated to registers 
                                   1371 ;__1310720004              Allocated to registers 
                                   1372 ;__1310720005              Allocated to registers 
                                   1373 ;map_address               Allocated to registers 
                                   1374 ;d                         Allocated to registers 
                                   1375 ;__1310720032              Allocated to registers 
                                   1376 ;addr                      Allocated to registers 
                                   1377 ;__1310720019              Allocated to registers 
                                   1378 ;map_address               Allocated to registers 
                                   1379 ;__1310720016              Allocated to registers 
                                   1380 ;__1310720017              Allocated to registers 
                                   1381 ;addr                      Allocated to registers 
                                   1382 ;d                         Allocated to registers 
                                   1383 ;map_address               Allocated to registers 
                                   1384 ;__1310720004              Allocated to registers 
                                   1385 ;__1310720005              Allocated to registers 
                                   1386 ;map_address               Allocated to registers 
                                   1387 ;d                         Allocated to registers 
                                   1388 ;__1310720020              Allocated to registers 
                                   1389 ;map_address               Allocated to registers 
                                   1390 ;__1310720022              Allocated to registers 
                                   1391 ;__1310720023              Allocated to registers 
                                   1392 ;addr                      Allocated to registers 
                                   1393 ;d                         Allocated to registers 
                                   1394 ;map_address               Allocated to registers 
                                   1395 ;__1310720004              Allocated to registers 
                                   1396 ;__1310720005              Allocated to registers 
                                   1397 ;map_address               Allocated to registers 
                                   1398 ;d                         Allocated to registers 
                                   1399 ;__1310720035              Allocated to registers 
                                   1400 ;addr                      Allocated to registers 
                                   1401 ;__1310720019              Allocated to registers 
                                   1402 ;map_address               Allocated to registers 
                                   1403 ;__1310720016              Allocated to registers 
                                   1404 ;__1310720017              Allocated to registers 
                                   1405 ;addr                      Allocated to registers 
                                   1406 ;d                         Allocated to registers 
                                   1407 ;map_address               Allocated to registers 
                                   1408 ;__1310720004              Allocated to registers 
                                   1409 ;__1310720005              Allocated to registers 
                                   1410 ;map_address               Allocated to registers 
                                   1411 ;d                         Allocated to registers 
                                   1412 ;__1310720020              Allocated to registers 
                                   1413 ;map_address               Allocated to registers 
                                   1414 ;__1310720022              Allocated to registers 
                                   1415 ;__1310720023              Allocated to registers 
                                   1416 ;addr                      Allocated to registers 
                                   1417 ;d                         Allocated to registers 
                                   1418 ;map_address               Allocated to registers 
                                   1419 ;__1310720004              Allocated to registers 
                                   1420 ;__1310720005              Allocated to registers 
                                   1421 ;map_address               Allocated to registers 
                                   1422 ;d                         Allocated to registers 
                                   1423 ;__1310720038              Allocated to registers 
                                   1424 ;addr                      Allocated to registers 
                                   1425 ;__1310720019              Allocated to registers 
                                   1426 ;map_address               Allocated to registers 
                                   1427 ;__1310720016              Allocated to registers 
                                   1428 ;__1310720017              Allocated to registers 
                                   1429 ;addr                      Allocated to registers 
                                   1430 ;d                         Allocated to registers 
                                   1431 ;map_address               Allocated to registers 
                                   1432 ;__1310720004              Allocated to registers 
                                   1433 ;__1310720005              Allocated to registers 
                                   1434 ;map_address               Allocated to registers 
                                   1435 ;d                         Allocated to registers 
                                   1436 ;__1310720020              Allocated to registers 
                                   1437 ;map_address               Allocated to registers 
                                   1438 ;__1310720022              Allocated to registers 
                                   1439 ;__1310720023              Allocated to registers 
                                   1440 ;addr                      Allocated to registers 
                                   1441 ;d                         Allocated to registers 
                                   1442 ;map_address               Allocated to registers 
                                   1443 ;__1310720004              Allocated to registers 
                                   1444 ;__1310720005              Allocated to registers 
                                   1445 ;map_address               Allocated to registers 
                                   1446 ;d                         Allocated to registers 
                                   1447 ;__1310720041              Allocated to registers 
                                   1448 ;addr                      Allocated to registers 
                                   1449 ;__1310720019              Allocated to registers 
                                   1450 ;map_address               Allocated to registers 
                                   1451 ;__1310720016              Allocated to registers 
                                   1452 ;__1310720017              Allocated to registers 
                                   1453 ;addr                      Allocated to registers 
                                   1454 ;d                         Allocated to registers 
                                   1455 ;map_address               Allocated to registers 
                                   1456 ;__1310720004              Allocated to registers 
                                   1457 ;__1310720005              Allocated to registers 
                                   1458 ;map_address               Allocated to registers 
                                   1459 ;d                         Allocated to registers 
                                   1460 ;__1310720020              Allocated to registers 
                                   1461 ;map_address               Allocated to registers 
                                   1462 ;__1310720022              Allocated to registers 
                                   1463 ;__1310720023              Allocated to registers 
                                   1464 ;addr                      Allocated to registers 
                                   1465 ;d                         Allocated to registers 
                                   1466 ;map_address               Allocated to registers 
                                   1467 ;__1310720004              Allocated to registers 
                                   1468 ;__1310720005              Allocated to registers 
                                   1469 ;map_address               Allocated to registers 
                                   1470 ;d                         Allocated to registers 
                                   1471 ;------------------------------------------------------------
                                   1472 ;	ecen4330lab7.c:389: void rtcPrint(void) {
                                   1473 ;	-----------------------------------------
                                   1474 ;	 function rtcPrint
                                   1475 ;	-----------------------------------------
      000262                       1476 _rtcPrint:
                                   1477 ;	ecen4330lab7.c:392: xCursorHold = cursor_x;
      000262 85*08*38         [24] 1478 	mov	_xCursorHold,_cursor_x
                                   1479 ;	ecen4330lab7.c:393: yCursorHold = cursor_y;
      000265 85*0A*39         [24] 1480 	mov	_yCursorHold,_cursor_y
                                   1481 ;	ecen4330lab7.c:394: textSizeHold = textsize;
      000268 85*0C*3A         [24] 1482 	mov	_textSizeHold,_textsize
                                   1483 ;	ecen4330lab7.c:396: setTextColor(GRAY, BLACK);
      00026B E4               [12] 1484 	clr	a
      00026C F5*00            [12] 1485 	mov	_setTextColor_PARM_2,a
      00026E F5*01            [12] 1486 	mov	(_setTextColor_PARM_2 + 1),a
      000270 90 D6 BA         [24] 1487 	mov	dptr,#0xd6ba
      000273 12r03rCB         [24] 1488 	lcall	_setTextColor
                                   1489 ;	ecen4330lab7.c:397: setTextSize(2);
      000276 75 82 02         [24] 1490 	mov	dpl,#0x02
      000279 12r03rD8         [24] 1491 	lcall	_setTextSize
                                   1492 ;	ecen4330lab7.c:398: setCursor(132, 304);
      00027C 75*00 30         [24] 1493 	mov	_setCursor_PARM_2,#0x30
      00027F 75*01 01         [24] 1494 	mov	(_setCursor_PARM_2 + 1),#0x01
      000282 90 00 84         [24] 1495 	mov	dptr,#0x0084
      000285 12r03rBE         [24] 1496 	lcall	_setCursor
                                   1497 ;	ecen4330lab7.c:229: IOM = 1;
                                   1498 ;	assignBit
      000288 D2 B4            [12] 1499 	setb	_P3_4
                                   1500 ;	ecen4330lab7.c:230: *map_address = d;
      00028A 90 00 0D         [24] 1501 	mov	dptr,#0x000d
      00028D 74 01            [12] 1502 	mov	a,#0x01
      00028F F0               [24] 1503 	movx	@dptr,a
                                   1504 ;	ecen4330lab7.c:231: IOM = 0;
                                   1505 ;	assignBit
      000290 C2 B4            [12] 1506 	clr	_P3_4
                                   1507 ;	ecen4330lab7.c:374: rtcBusy();
      000292 12r01rE1         [24] 1508 	lcall	_rtcBusy
                                   1509 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1510 ;	assignBit
      000295 D2 B4            [12] 1511 	setb	_P3_4
                                   1512 ;	ecen4330lab7.c:243: data = *map_address;
      000297 90 00 05         [24] 1513 	mov	dptr,#0x0005
      00029A E0               [24] 1514 	movx	a,@dptr
      00029B F5*20            [12] 1515 	mov	_data,a
                                   1516 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1517 ;	assignBit
      00029D C2 B4            [12] 1518 	clr	_P3_4
                                   1519 ;	ecen4330lab7.c:245: return data;   
                                   1520 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      00029F E5*20            [12] 1521 	mov	a,_data
      0002A1 54 0F            [12] 1522 	anl	a,#0x0f
      0002A3 44 30            [12] 1523 	orl	a,#0x30
      0002A5 F5*20            [12] 1524 	mov	_data,a
                                   1525 ;	ecen4330lab7.c:229: IOM = 1;
                                   1526 ;	assignBit
      0002A7 D2 B4            [12] 1527 	setb	_P3_4
                                   1528 ;	ecen4330lab7.c:230: *map_address = d;
      0002A9 90 00 0D         [24] 1529 	mov	dptr,#0x000d
      0002AC E4               [12] 1530 	clr	a
      0002AD F0               [24] 1531 	movx	@dptr,a
                                   1532 ;	ecen4330lab7.c:231: IOM = 0;
                                   1533 ;	assignBit
      0002AE C2 B4            [12] 1534 	clr	_P3_4
                                   1535 ;	ecen4330lab7.c:379: return data;
      0002B0 85*20 82         [24] 1536 	mov	dpl,_data
                                   1537 ;	ecen4330lab7.c:401: write(t);
      0002B3 12r0Ar54         [24] 1538 	lcall	_write
                                   1539 ;	ecen4330lab7.c:229: IOM = 1;
                                   1540 ;	assignBit
      0002B6 D2 B4            [12] 1541 	setb	_P3_4
                                   1542 ;	ecen4330lab7.c:230: *map_address = d;
      0002B8 90 00 0D         [24] 1543 	mov	dptr,#0x000d
      0002BB 74 01            [12] 1544 	mov	a,#0x01
      0002BD F0               [24] 1545 	movx	@dptr,a
                                   1546 ;	ecen4330lab7.c:231: IOM = 0;
                                   1547 ;	assignBit
      0002BE C2 B4            [12] 1548 	clr	_P3_4
                                   1549 ;	ecen4330lab7.c:374: rtcBusy();
      0002C0 12r01rE1         [24] 1550 	lcall	_rtcBusy
                                   1551 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1552 ;	assignBit
      0002C3 D2 B4            [12] 1553 	setb	_P3_4
                                   1554 ;	ecen4330lab7.c:243: data = *map_address;
      0002C5 90 00 04         [24] 1555 	mov	dptr,#0x0004
      0002C8 E0               [24] 1556 	movx	a,@dptr
      0002C9 F5*20            [12] 1557 	mov	_data,a
                                   1558 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1559 ;	assignBit
      0002CB C2 B4            [12] 1560 	clr	_P3_4
                                   1561 ;	ecen4330lab7.c:245: return data;   
                                   1562 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      0002CD E5*20            [12] 1563 	mov	a,_data
      0002CF 54 0F            [12] 1564 	anl	a,#0x0f
      0002D1 44 30            [12] 1565 	orl	a,#0x30
      0002D3 F5*20            [12] 1566 	mov	_data,a
                                   1567 ;	ecen4330lab7.c:229: IOM = 1;
                                   1568 ;	assignBit
      0002D5 D2 B4            [12] 1569 	setb	_P3_4
                                   1570 ;	ecen4330lab7.c:230: *map_address = d;
      0002D7 90 00 0D         [24] 1571 	mov	dptr,#0x000d
      0002DA E4               [12] 1572 	clr	a
      0002DB F0               [24] 1573 	movx	@dptr,a
                                   1574 ;	ecen4330lab7.c:231: IOM = 0;
                                   1575 ;	assignBit
      0002DC C2 B4            [12] 1576 	clr	_P3_4
                                   1577 ;	ecen4330lab7.c:379: return data;
      0002DE 85*20 82         [24] 1578 	mov	dpl,_data
                                   1579 ;	ecen4330lab7.c:403: write(t);
      0002E1 12r0Ar54         [24] 1580 	lcall	_write
                                   1581 ;	ecen4330lab7.c:404: LCD_string_write(":");
      0002E4 90r05r36         [24] 1582 	mov	dptr,#___str_3
      0002E7 75 F0 80         [24] 1583 	mov	b,#0x80
      0002EA 12r0ArBA         [24] 1584 	lcall	_LCD_string_write
                                   1585 ;	ecen4330lab7.c:229: IOM = 1;
                                   1586 ;	assignBit
      0002ED D2 B4            [12] 1587 	setb	_P3_4
                                   1588 ;	ecen4330lab7.c:230: *map_address = d;
      0002EF 90 00 0D         [24] 1589 	mov	dptr,#0x000d
      0002F2 74 01            [12] 1590 	mov	a,#0x01
      0002F4 F0               [24] 1591 	movx	@dptr,a
                                   1592 ;	ecen4330lab7.c:231: IOM = 0;
                                   1593 ;	assignBit
      0002F5 C2 B4            [12] 1594 	clr	_P3_4
                                   1595 ;	ecen4330lab7.c:374: rtcBusy();
      0002F7 12r01rE1         [24] 1596 	lcall	_rtcBusy
                                   1597 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1598 ;	assignBit
      0002FA D2 B4            [12] 1599 	setb	_P3_4
                                   1600 ;	ecen4330lab7.c:243: data = *map_address;
      0002FC 90 00 03         [24] 1601 	mov	dptr,#0x0003
      0002FF E0               [24] 1602 	movx	a,@dptr
      000300 F5*20            [12] 1603 	mov	_data,a
                                   1604 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1605 ;	assignBit
      000302 C2 B4            [12] 1606 	clr	_P3_4
                                   1607 ;	ecen4330lab7.c:245: return data;   
                                   1608 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      000304 E5*20            [12] 1609 	mov	a,_data
      000306 54 0F            [12] 1610 	anl	a,#0x0f
      000308 44 30            [12] 1611 	orl	a,#0x30
      00030A F5*20            [12] 1612 	mov	_data,a
                                   1613 ;	ecen4330lab7.c:229: IOM = 1;
                                   1614 ;	assignBit
      00030C D2 B4            [12] 1615 	setb	_P3_4
                                   1616 ;	ecen4330lab7.c:230: *map_address = d;
      00030E 90 00 0D         [24] 1617 	mov	dptr,#0x000d
      000311 E4               [12] 1618 	clr	a
      000312 F0               [24] 1619 	movx	@dptr,a
                                   1620 ;	ecen4330lab7.c:231: IOM = 0;
                                   1621 ;	assignBit
      000313 C2 B4            [12] 1622 	clr	_P3_4
                                   1623 ;	ecen4330lab7.c:379: return data;
      000315 85*20 82         [24] 1624 	mov	dpl,_data
                                   1625 ;	ecen4330lab7.c:406: write(t);
      000318 12r0Ar54         [24] 1626 	lcall	_write
                                   1627 ;	ecen4330lab7.c:229: IOM = 1;
                                   1628 ;	assignBit
      00031B D2 B4            [12] 1629 	setb	_P3_4
                                   1630 ;	ecen4330lab7.c:230: *map_address = d;
      00031D 90 00 0D         [24] 1631 	mov	dptr,#0x000d
      000320 74 01            [12] 1632 	mov	a,#0x01
      000322 F0               [24] 1633 	movx	@dptr,a
                                   1634 ;	ecen4330lab7.c:231: IOM = 0;
                                   1635 ;	assignBit
      000323 C2 B4            [12] 1636 	clr	_P3_4
                                   1637 ;	ecen4330lab7.c:374: rtcBusy();
      000325 12r01rE1         [24] 1638 	lcall	_rtcBusy
                                   1639 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1640 ;	assignBit
      000328 D2 B4            [12] 1641 	setb	_P3_4
                                   1642 ;	ecen4330lab7.c:243: data = *map_address;
      00032A 90 00 02         [24] 1643 	mov	dptr,#0x0002
      00032D E0               [24] 1644 	movx	a,@dptr
      00032E F5*20            [12] 1645 	mov	_data,a
                                   1646 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1647 ;	assignBit
      000330 C2 B4            [12] 1648 	clr	_P3_4
                                   1649 ;	ecen4330lab7.c:245: return data;   
                                   1650 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      000332 E5*20            [12] 1651 	mov	a,_data
      000334 54 0F            [12] 1652 	anl	a,#0x0f
      000336 44 30            [12] 1653 	orl	a,#0x30
      000338 F5*20            [12] 1654 	mov	_data,a
                                   1655 ;	ecen4330lab7.c:229: IOM = 1;
                                   1656 ;	assignBit
      00033A D2 B4            [12] 1657 	setb	_P3_4
                                   1658 ;	ecen4330lab7.c:230: *map_address = d;
      00033C 90 00 0D         [24] 1659 	mov	dptr,#0x000d
      00033F E4               [12] 1660 	clr	a
      000340 F0               [24] 1661 	movx	@dptr,a
                                   1662 ;	ecen4330lab7.c:231: IOM = 0;
                                   1663 ;	assignBit
      000341 C2 B4            [12] 1664 	clr	_P3_4
                                   1665 ;	ecen4330lab7.c:379: return data;
      000343 85*20 82         [24] 1666 	mov	dpl,_data
                                   1667 ;	ecen4330lab7.c:408: write(t);
      000346 12r0Ar54         [24] 1668 	lcall	_write
                                   1669 ;	ecen4330lab7.c:409: LCD_string_write(":");
      000349 90r05r36         [24] 1670 	mov	dptr,#___str_3
      00034C 75 F0 80         [24] 1671 	mov	b,#0x80
      00034F 12r0ArBA         [24] 1672 	lcall	_LCD_string_write
                                   1673 ;	ecen4330lab7.c:229: IOM = 1;
                                   1674 ;	assignBit
      000352 D2 B4            [12] 1675 	setb	_P3_4
                                   1676 ;	ecen4330lab7.c:230: *map_address = d;
      000354 90 00 0D         [24] 1677 	mov	dptr,#0x000d
      000357 74 01            [12] 1678 	mov	a,#0x01
      000359 F0               [24] 1679 	movx	@dptr,a
                                   1680 ;	ecen4330lab7.c:231: IOM = 0;
                                   1681 ;	assignBit
      00035A C2 B4            [12] 1682 	clr	_P3_4
                                   1683 ;	ecen4330lab7.c:374: rtcBusy();
      00035C 12r01rE1         [24] 1684 	lcall	_rtcBusy
                                   1685 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1686 ;	assignBit
      00035F D2 B4            [12] 1687 	setb	_P3_4
                                   1688 ;	ecen4330lab7.c:243: data = *map_address;
      000361 90 00 01         [24] 1689 	mov	dptr,#0x0001
      000364 E0               [24] 1690 	movx	a,@dptr
      000365 F5*20            [12] 1691 	mov	_data,a
                                   1692 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1693 ;	assignBit
      000367 C2 B4            [12] 1694 	clr	_P3_4
                                   1695 ;	ecen4330lab7.c:245: return data;   
                                   1696 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      000369 E5*20            [12] 1697 	mov	a,_data
      00036B 54 0F            [12] 1698 	anl	a,#0x0f
      00036D 44 30            [12] 1699 	orl	a,#0x30
      00036F F5*20            [12] 1700 	mov	_data,a
                                   1701 ;	ecen4330lab7.c:229: IOM = 1;
                                   1702 ;	assignBit
      000371 D2 B4            [12] 1703 	setb	_P3_4
                                   1704 ;	ecen4330lab7.c:230: *map_address = d;
      000373 90 00 0D         [24] 1705 	mov	dptr,#0x000d
      000376 E4               [12] 1706 	clr	a
      000377 F0               [24] 1707 	movx	@dptr,a
                                   1708 ;	ecen4330lab7.c:231: IOM = 0;
                                   1709 ;	assignBit
      000378 C2 B4            [12] 1710 	clr	_P3_4
                                   1711 ;	ecen4330lab7.c:379: return data;
      00037A 85*20 82         [24] 1712 	mov	dpl,_data
                                   1713 ;	ecen4330lab7.c:411: write(t);
      00037D 12r0Ar54         [24] 1714 	lcall	_write
                                   1715 ;	ecen4330lab7.c:229: IOM = 1;
                                   1716 ;	assignBit
      000380 D2 B4            [12] 1717 	setb	_P3_4
                                   1718 ;	ecen4330lab7.c:230: *map_address = d;
      000382 90 00 0D         [24] 1719 	mov	dptr,#0x000d
      000385 74 01            [12] 1720 	mov	a,#0x01
      000387 F0               [24] 1721 	movx	@dptr,a
                                   1722 ;	ecen4330lab7.c:231: IOM = 0;
                                   1723 ;	assignBit
      000388 C2 B4            [12] 1724 	clr	_P3_4
                                   1725 ;	ecen4330lab7.c:374: rtcBusy();
      00038A 12r01rE1         [24] 1726 	lcall	_rtcBusy
                                   1727 ;	ecen4330lab7.c:242: IOM = 1;                            
                                   1728 ;	assignBit
      00038D D2 B4            [12] 1729 	setb	_P3_4
                                   1730 ;	ecen4330lab7.c:243: data = *map_address;
      00038F 90 00 00         [24] 1731 	mov	dptr,#0x0000
      000392 E0               [24] 1732 	movx	a,@dptr
      000393 F5*20            [12] 1733 	mov	_data,a
                                   1734 ;	ecen4330lab7.c:244: IOM = 0;    
                                   1735 ;	assignBit
      000395 C2 B4            [12] 1736 	clr	_P3_4
                                   1737 ;	ecen4330lab7.c:245: return data;   
                                   1738 ;	ecen4330lab7.c:377: data = (data & 0x0F) | 0x30; // ascii the lower word
      000397 E5*20            [12] 1739 	mov	a,_data
      000399 54 0F            [12] 1740 	anl	a,#0x0f
      00039B 44 30            [12] 1741 	orl	a,#0x30
      00039D F5*20            [12] 1742 	mov	_data,a
                                   1743 ;	ecen4330lab7.c:229: IOM = 1;
                                   1744 ;	assignBit
      00039F D2 B4            [12] 1745 	setb	_P3_4
                                   1746 ;	ecen4330lab7.c:230: *map_address = d;
      0003A1 90 00 0D         [24] 1747 	mov	dptr,#0x000d
      0003A4 E4               [12] 1748 	clr	a
      0003A5 F0               [24] 1749 	movx	@dptr,a
                                   1750 ;	ecen4330lab7.c:231: IOM = 0;
                                   1751 ;	assignBit
      0003A6 C2 B4            [12] 1752 	clr	_P3_4
                                   1753 ;	ecen4330lab7.c:379: return data;
      0003A8 85*20 82         [24] 1754 	mov	dpl,_data
                                   1755 ;	ecen4330lab7.c:413: write(t);
      0003AB 12r0Ar54         [24] 1756 	lcall	_write
                                   1757 ;	ecen4330lab7.c:415: cursor_x = xCursorHold;
      0003AE 85*38*08         [24] 1758 	mov	_cursor_x,_xCursorHold
      0003B1 75*09 00         [24] 1759 	mov	(_cursor_x + 1),#0x00
                                   1760 ;	ecen4330lab7.c:416: cursor_y = yCursorHold;
      0003B4 85*39*0A         [24] 1761 	mov	_cursor_y,_yCursorHold
      0003B7 75*0B 00         [24] 1762 	mov	(_cursor_y + 1),#0x00
                                   1763 ;	ecen4330lab7.c:417: textsize = textSizeHold;
      0003BA 85*3A*0C         [24] 1764 	mov	_textsize,_textSizeHold
                                   1765 ;	ecen4330lab7.c:418: }
      0003BD 22               [24] 1766 	ret
                                   1767 ;------------------------------------------------------------
                                   1768 ;Allocation info for local variables in function 'setCursor'
                                   1769 ;------------------------------------------------------------
                                   1770 ;y                         Allocated with name '_setCursor_PARM_2'
                                   1771 ;x                         Allocated to registers 
                                   1772 ;------------------------------------------------------------
                                   1773 ;	ecen4330lab7.c:438: void setCursor(u16 x, u16 y){
                                   1774 ;	-----------------------------------------
                                   1775 ;	 function setCursor
                                   1776 ;	-----------------------------------------
      0003BE                       1777 _setCursor:
      0003BE 85 82*08         [24] 1778 	mov	_cursor_x,dpl
      0003C1 85 83*09         [24] 1779 	mov	(_cursor_x + 1),dph
                                   1780 ;	ecen4330lab7.c:440: cursor_y = y;
      0003C4 85*00*0A         [24] 1781 	mov	_cursor_y,_setCursor_PARM_2
      0003C7 85*01*0B         [24] 1782 	mov	(_cursor_y + 1),(_setCursor_PARM_2 + 1)
                                   1783 ;	ecen4330lab7.c:441: }
      0003CA 22               [24] 1784 	ret
                                   1785 ;------------------------------------------------------------
                                   1786 ;Allocation info for local variables in function 'setTextColor'
                                   1787 ;------------------------------------------------------------
                                   1788 ;y                         Allocated with name '_setTextColor_PARM_2'
                                   1789 ;x                         Allocated to registers 
                                   1790 ;------------------------------------------------------------
                                   1791 ;	ecen4330lab7.c:449: void setTextColor(u16 x, u16 y){
                                   1792 ;	-----------------------------------------
                                   1793 ;	 function setTextColor
                                   1794 ;	-----------------------------------------
      0003CB                       1795 _setTextColor:
      0003CB 85 82*0E         [24] 1796 	mov	_textcolor,dpl
      0003CE 85 83*0F         [24] 1797 	mov	(_textcolor + 1),dph
                                   1798 ;	ecen4330lab7.c:451: textbgcolor = y;
      0003D1 85*00*10         [24] 1799 	mov	_textbgcolor,_setTextColor_PARM_2
      0003D4 85*01*11         [24] 1800 	mov	(_textbgcolor + 1),(_setTextColor_PARM_2 + 1)
                                   1801 ;	ecen4330lab7.c:452: }
      0003D7 22               [24] 1802 	ret
                                   1803 ;------------------------------------------------------------
                                   1804 ;Allocation info for local variables in function 'setTextSize'
                                   1805 ;------------------------------------------------------------
                                   1806 ;s                         Allocated to registers r7 
                                   1807 ;------------------------------------------------------------
                                   1808 ;	ecen4330lab7.c:460: void setTextSize(u8 s){
                                   1809 ;	-----------------------------------------
                                   1810 ;	 function setTextSize
                                   1811 ;	-----------------------------------------
      0003D8                       1812 _setTextSize:
                                   1813 ;	ecen4330lab7.c:461: if (s > 8) return;
      0003D8 E5 82            [12] 1814 	mov	a,dpl
      0003DA FF               [12] 1815 	mov	r7,a
      0003DB 24 F7            [12] 1816 	add	a,#0xff - 0x08
      0003DD 50 01            [24] 1817 	jnc	00102$
      0003DF 22               [24] 1818 	ret
      0003E0                       1819 00102$:
                                   1820 ;	ecen4330lab7.c:462: textsize = (s>0) ? s : 1 ;
      0003E0 EF               [12] 1821 	mov	a,r7
      0003E1 60 06            [24] 1822 	jz	00105$
      0003E3 8F 06            [24] 1823 	mov	ar6,r7
      0003E5 7F 00            [12] 1824 	mov	r7,#0x00
      0003E7 80 04            [24] 1825 	sjmp	00106$
      0003E9                       1826 00105$:
      0003E9 7E 01            [12] 1827 	mov	r6,#0x01
      0003EB 7F 00            [12] 1828 	mov	r7,#0x00
      0003ED                       1829 00106$:
      0003ED 8E*0C            [24] 1830 	mov	_textsize,r6
                                   1831 ;	ecen4330lab7.c:463: }
      0003EF 22               [24] 1832 	ret
                                   1833 ;------------------------------------------------------------
                                   1834 ;Allocation info for local variables in function 'setRotation'
                                   1835 ;------------------------------------------------------------
                                   1836 ;flag                      Allocated to registers r7 
                                   1837 ;------------------------------------------------------------
                                   1838 ;	ecen4330lab7.c:471: void setRotation(u8 flag){
                                   1839 ;	-----------------------------------------
                                   1840 ;	 function setRotation
                                   1841 ;	-----------------------------------------
      0003F0                       1842 _setRotation:
                                   1843 ;	ecen4330lab7.c:472: switch(flag) {
      0003F0 E5 82            [12] 1844 	mov	a,dpl
      0003F2 FF               [12] 1845 	mov	r7,a
      0003F3 24 FC            [12] 1846 	add	a,#0xff - 0x03
      0003F5 40 4E            [24] 1847 	jc	00105$
      0003F7 EF               [12] 1848 	mov	a,r7
      0003F8 2F               [12] 1849 	add	a,r7
                                   1850 ;	ecen4330lab7.c:473: case 0:
      0003F9 90r03rFD         [24] 1851 	mov	dptr,#00115$
      0003FC 73               [24] 1852 	jmp	@a+dptr
      0003FD                       1853 00115$:
      0003FD 80 06            [24] 1854 	sjmp	00101$
      0003FF 80 14            [24] 1855 	sjmp	00102$
      000401 80 22            [24] 1856 	sjmp	00103$
      000403 80 30            [24] 1857 	sjmp	00104$
      000405                       1858 00101$:
                                   1859 ;	ecen4330lab7.c:474: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000405 7F 48            [12] 1860 	mov	r7,#0x48
                                   1861 ;	ecen4330lab7.c:475: _width = TFTWIDTH;
      000407 75*12 F0         [24] 1862 	mov	__width,#0xf0
      00040A 75*13 00         [24] 1863 	mov	(__width + 1),#0x00
                                   1864 ;	ecen4330lab7.c:476: _height = TFTHEIGHT;
      00040D 75*14 40         [24] 1865 	mov	__height,#0x40
      000410 75*15 01         [24] 1866 	mov	(__height + 1),#0x01
                                   1867 ;	ecen4330lab7.c:477: break;
                                   1868 ;	ecen4330lab7.c:478: case 1:
      000413 80 3E            [24] 1869 	sjmp	00106$
      000415                       1870 00102$:
                                   1871 ;	ecen4330lab7.c:479: flag = (ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000415 7F 28            [12] 1872 	mov	r7,#0x28
                                   1873 ;	ecen4330lab7.c:480: _width = TFTHEIGHT;
      000417 75*12 40         [24] 1874 	mov	__width,#0x40
      00041A 75*13 01         [24] 1875 	mov	(__width + 1),#0x01
                                   1876 ;	ecen4330lab7.c:481: _height = TFTWIDTH;
      00041D 75*14 F0         [24] 1877 	mov	__height,#0xf0
      000420 75*15 00         [24] 1878 	mov	(__height + 1),#0x00
                                   1879 ;	ecen4330lab7.c:482: break;
                                   1880 ;	ecen4330lab7.c:483: case 2:
      000423 80 2E            [24] 1881 	sjmp	00106$
      000425                       1882 00103$:
                                   1883 ;	ecen4330lab7.c:484: flag = (ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      000425 7F 88            [12] 1884 	mov	r7,#0x88
                                   1885 ;	ecen4330lab7.c:485: _width = TFTWIDTH;
      000427 75*12 F0         [24] 1886 	mov	__width,#0xf0
      00042A 75*13 00         [24] 1887 	mov	(__width + 1),#0x00
                                   1888 ;	ecen4330lab7.c:486: _height = TFTHEIGHT;
      00042D 75*14 40         [24] 1889 	mov	__height,#0x40
      000430 75*15 01         [24] 1890 	mov	(__height + 1),#0x01
                                   1891 ;	ecen4330lab7.c:487: break;
                                   1892 ;	ecen4330lab7.c:488: case 3:
      000433 80 1E            [24] 1893 	sjmp	00106$
      000435                       1894 00104$:
                                   1895 ;	ecen4330lab7.c:489: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
      000435 7F E8            [12] 1896 	mov	r7,#0xe8
                                   1897 ;	ecen4330lab7.c:490: _width = TFTHEIGHT;
      000437 75*12 40         [24] 1898 	mov	__width,#0x40
      00043A 75*13 01         [24] 1899 	mov	(__width + 1),#0x01
                                   1900 ;	ecen4330lab7.c:491: _height = TFTWIDTH;
      00043D 75*14 F0         [24] 1901 	mov	__height,#0xf0
      000440 75*15 00         [24] 1902 	mov	(__height + 1),#0x00
                                   1903 ;	ecen4330lab7.c:492: break;
                                   1904 ;	ecen4330lab7.c:493: default:
      000443 80 0E            [24] 1905 	sjmp	00106$
      000445                       1906 00105$:
                                   1907 ;	ecen4330lab7.c:494: flag = (ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
      000445 7F 48            [12] 1908 	mov	r7,#0x48
                                   1909 ;	ecen4330lab7.c:495: _width = TFTWIDTH;
      000447 75*12 F0         [24] 1910 	mov	__width,#0xf0
      00044A 75*13 00         [24] 1911 	mov	(__width + 1),#0x00
                                   1912 ;	ecen4330lab7.c:496: _height = TFTHEIGHT;
      00044D 75*14 40         [24] 1913 	mov	__height,#0x40
      000450 75*15 01         [24] 1914 	mov	(__height + 1),#0x01
                                   1915 ;	ecen4330lab7.c:498: }
      000453                       1916 00106$:
                                   1917 ;	ecen4330lab7.c:499: writeRegister8(ILI9341_MEMCONTROL, flag);
      000453 8F*00            [24] 1918 	mov	_writeRegister8_PARM_2,r7
      000455 75 82 36         [24] 1919 	mov	dpl,#0x36
                                   1920 ;	ecen4330lab7.c:500: }
      000458 02r01r46         [24] 1921 	ljmp	_writeRegister8
                                   1922 ;------------------------------------------------------------
                                   1923 ;Allocation info for local variables in function 'setAddress'
                                   1924 ;------------------------------------------------------------
                                   1925 ;y1                        Allocated with name '_setAddress_PARM_2'
                                   1926 ;x2                        Allocated with name '_setAddress_PARM_3'
                                   1927 ;y2                        Allocated with name '_setAddress_PARM_4'
                                   1928 ;x1                        Allocated to registers r6 r7 
                                   1929 ;------------------------------------------------------------
                                   1930 ;	ecen4330lab7.c:509: void setAddress(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2){
                                   1931 ;	-----------------------------------------
                                   1932 ;	 function setAddress
                                   1933 ;	-----------------------------------------
      00045B                       1934 _setAddress:
      00045B AE 82            [24] 1935 	mov	r6,dpl
      00045D AF 83            [24] 1936 	mov	r7,dph
                                   1937 ;	ecen4330lab7.c:510: write8Reg(0x2A);
                                   1938 ;	assignBit
      00045F C2 B5            [12] 1939 	clr	_P3_5
                                   1940 ;	assignBit
      000461 D2 B4            [12] 1941 	setb	_P3_4
      000463 85*02 82         [24] 1942 	mov	dpl,_lcd_address
      000466 85*03 83         [24] 1943 	mov	dph,(_lcd_address + 1)
      000469 74 2A            [12] 1944 	mov	a,#0x2a
      00046B F0               [24] 1945 	movx	@dptr,a
                                   1946 ;	assignBit
      00046C C2 B4            [12] 1947 	clr	_P3_4
                                   1948 ;	ecen4330lab7.c:511: write8Data(x1 >> 8);
                                   1949 ;	assignBit
      00046E D2 B5            [12] 1950 	setb	_P3_5
                                   1951 ;	assignBit
      000470 D2 B4            [12] 1952 	setb	_P3_4
      000472 85*02 82         [24] 1953 	mov	dpl,_lcd_address
      000475 85*03 83         [24] 1954 	mov	dph,(_lcd_address + 1)
      000478 8F 05            [24] 1955 	mov	ar5,r7
      00047A ED               [12] 1956 	mov	a,r5
      00047B F0               [24] 1957 	movx	@dptr,a
                                   1958 ;	assignBit
      00047C C2 B4            [12] 1959 	clr	_P3_4
                                   1960 ;	ecen4330lab7.c:512: write8Data(x1);
                                   1961 ;	assignBit
      00047E D2 B5            [12] 1962 	setb	_P3_5
                                   1963 ;	assignBit
      000480 D2 B4            [12] 1964 	setb	_P3_4
      000482 85*02 82         [24] 1965 	mov	dpl,_lcd_address
      000485 85*03 83         [24] 1966 	mov	dph,(_lcd_address + 1)
      000488 EE               [12] 1967 	mov	a,r6
      000489 F0               [24] 1968 	movx	@dptr,a
                                   1969 ;	assignBit
      00048A C2 B4            [12] 1970 	clr	_P3_4
                                   1971 ;	ecen4330lab7.c:513: write8Data(x2 >> 8);
                                   1972 ;	assignBit
      00048C D2 B5            [12] 1973 	setb	_P3_5
                                   1974 ;	assignBit
      00048E D2 B4            [12] 1975 	setb	_P3_4
      000490 85*02 82         [24] 1976 	mov	dpl,_lcd_address
      000493 85*03 83         [24] 1977 	mov	dph,(_lcd_address + 1)
      000496 E5*03            [12] 1978 	mov	a,(_setAddress_PARM_3 + 1)
      000498 F0               [24] 1979 	movx	@dptr,a
                                   1980 ;	assignBit
      000499 C2 B4            [12] 1981 	clr	_P3_4
                                   1982 ;	ecen4330lab7.c:514: write8Data(x2);
                                   1983 ;	assignBit
      00049B D2 B5            [12] 1984 	setb	_P3_5
                                   1985 ;	assignBit
      00049D D2 B4            [12] 1986 	setb	_P3_4
      00049F 85*02 82         [24] 1987 	mov	dpl,_lcd_address
      0004A2 85*03 83         [24] 1988 	mov	dph,(_lcd_address + 1)
      0004A5 E5*02            [12] 1989 	mov	a,_setAddress_PARM_3
      0004A7 F0               [24] 1990 	movx	@dptr,a
                                   1991 ;	assignBit
      0004A8 C2 B4            [12] 1992 	clr	_P3_4
                                   1993 ;	ecen4330lab7.c:515: write8Reg(0x2B);
                                   1994 ;	assignBit
      0004AA C2 B5            [12] 1995 	clr	_P3_5
                                   1996 ;	assignBit
      0004AC D2 B4            [12] 1997 	setb	_P3_4
      0004AE 85*02 82         [24] 1998 	mov	dpl,_lcd_address
      0004B1 85*03 83         [24] 1999 	mov	dph,(_lcd_address + 1)
      0004B4 74 2B            [12] 2000 	mov	a,#0x2b
      0004B6 F0               [24] 2001 	movx	@dptr,a
                                   2002 ;	assignBit
      0004B7 C2 B4            [12] 2003 	clr	_P3_4
                                   2004 ;	ecen4330lab7.c:516: write8Data(y1 >> 8);
                                   2005 ;	assignBit
      0004B9 D2 B5            [12] 2006 	setb	_P3_5
                                   2007 ;	assignBit
      0004BB D2 B4            [12] 2008 	setb	_P3_4
      0004BD 85*02 82         [24] 2009 	mov	dpl,_lcd_address
      0004C0 85*03 83         [24] 2010 	mov	dph,(_lcd_address + 1)
      0004C3 E5*01            [12] 2011 	mov	a,(_setAddress_PARM_2 + 1)
      0004C5 F0               [24] 2012 	movx	@dptr,a
                                   2013 ;	assignBit
      0004C6 C2 B4            [12] 2014 	clr	_P3_4
                                   2015 ;	ecen4330lab7.c:517: write8Data(y1);
                                   2016 ;	assignBit
      0004C8 D2 B5            [12] 2017 	setb	_P3_5
                                   2018 ;	assignBit
      0004CA D2 B4            [12] 2019 	setb	_P3_4
      0004CC 85*02 82         [24] 2020 	mov	dpl,_lcd_address
      0004CF 85*03 83         [24] 2021 	mov	dph,(_lcd_address + 1)
      0004D2 E5*00            [12] 2022 	mov	a,_setAddress_PARM_2
      0004D4 F0               [24] 2023 	movx	@dptr,a
                                   2024 ;	assignBit
      0004D5 C2 B4            [12] 2025 	clr	_P3_4
                                   2026 ;	ecen4330lab7.c:518: write8Data(y2 >> 8);
                                   2027 ;	assignBit
      0004D7 D2 B5            [12] 2028 	setb	_P3_5
                                   2029 ;	assignBit
      0004D9 D2 B4            [12] 2030 	setb	_P3_4
      0004DB 85*02 82         [24] 2031 	mov	dpl,_lcd_address
      0004DE 85*03 83         [24] 2032 	mov	dph,(_lcd_address + 1)
      0004E1 E5*05            [12] 2033 	mov	a,(_setAddress_PARM_4 + 1)
      0004E3 F0               [24] 2034 	movx	@dptr,a
                                   2035 ;	assignBit
      0004E4 C2 B4            [12] 2036 	clr	_P3_4
                                   2037 ;	ecen4330lab7.c:519: write8Data(y2);
                                   2038 ;	assignBit
      0004E6 D2 B5            [12] 2039 	setb	_P3_5
                                   2040 ;	assignBit
      0004E8 D2 B4            [12] 2041 	setb	_P3_4
      0004EA 85*02 82         [24] 2042 	mov	dpl,_lcd_address
      0004ED 85*03 83         [24] 2043 	mov	dph,(_lcd_address + 1)
      0004F0 E5*04            [12] 2044 	mov	a,_setAddress_PARM_4
      0004F2 F0               [24] 2045 	movx	@dptr,a
                                   2046 ;	assignBit
      0004F3 C2 B4            [12] 2047 	clr	_P3_4
                                   2048 ;	ecen4330lab7.c:520: }
      0004F5 22               [24] 2049 	ret
                                   2050 ;------------------------------------------------------------
                                   2051 ;Allocation info for local variables in function 'TFT_LCD_INIT'
                                   2052 ;------------------------------------------------------------
                                   2053 ;	ecen4330lab7.c:528: void TFT_LCD_INIT(void){
                                   2054 ;	-----------------------------------------
                                   2055 ;	 function TFT_LCD_INIT
                                   2056 ;	-----------------------------------------
      0004F6                       2057 _TFT_LCD_INIT:
                                   2058 ;	ecen4330lab7.c:529: _width = TFTWIDTH;
      0004F6 75*12 F0         [24] 2059 	mov	__width,#0xf0
      0004F9 75*13 00         [24] 2060 	mov	(__width + 1),#0x00
                                   2061 ;	ecen4330lab7.c:530: _height = TFTHEIGHT;
      0004FC 75*14 40         [24] 2062 	mov	__height,#0x40
      0004FF 75*15 01         [24] 2063 	mov	(__height + 1),#0x01
                                   2064 ;	ecen4330lab7.c:532: IOM = 0;
                                   2065 ;	assignBit
      000502 C2 B4            [12] 2066 	clr	_P3_4
                                   2067 ;	ecen4330lab7.c:533: CD = 1;
                                   2068 ;	assignBit
      000504 D2 B5            [12] 2069 	setb	_P3_5
                                   2070 ;	ecen4330lab7.c:535: write8Reg(0x00);
                                   2071 ;	assignBit
      000506 C2 B5            [12] 2072 	clr	_P3_5
                                   2073 ;	assignBit
      000508 D2 B4            [12] 2074 	setb	_P3_4
      00050A 85*02 82         [24] 2075 	mov	dpl,_lcd_address
      00050D 85*03 83         [24] 2076 	mov	dph,(_lcd_address + 1)
      000510 E4               [12] 2077 	clr	a
      000511 F0               [24] 2078 	movx	@dptr,a
                                   2079 ;	assignBit
      000512 C2 B4            [12] 2080 	clr	_P3_4
                                   2081 ;	ecen4330lab7.c:536: write8Data(0x00);
                                   2082 ;	assignBit
      000514 D2 B5            [12] 2083 	setb	_P3_5
                                   2084 ;	assignBit
      000516 D2 B4            [12] 2085 	setb	_P3_4
      000518 85*02 82         [24] 2086 	mov	dpl,_lcd_address
      00051B 85*03 83         [24] 2087 	mov	dph,(_lcd_address + 1)
      00051E E4               [12] 2088 	clr	a
      00051F F0               [24] 2089 	movx	@dptr,a
                                   2090 ;	assignBit
      000520 C2 B4            [12] 2091 	clr	_P3_4
                                   2092 ;	ecen4330lab7.c:537: write8Data(0x00);
                                   2093 ;	assignBit
      000522 D2 B5            [12] 2094 	setb	_P3_5
                                   2095 ;	assignBit
      000524 D2 B4            [12] 2096 	setb	_P3_4
      000526 85*02 82         [24] 2097 	mov	dpl,_lcd_address
      000529 85*03 83         [24] 2098 	mov	dph,(_lcd_address + 1)
      00052C E4               [12] 2099 	clr	a
      00052D F0               [24] 2100 	movx	@dptr,a
                                   2101 ;	assignBit
      00052E C2 B4            [12] 2102 	clr	_P3_4
                                   2103 ;	ecen4330lab7.c:538: write8Data(0x00);
                                   2104 ;	assignBit
      000530 D2 B5            [12] 2105 	setb	_P3_5
                                   2106 ;	assignBit
      000532 D2 B4            [12] 2107 	setb	_P3_4
      000534 85*02 82         [24] 2108 	mov	dpl,_lcd_address
      000537 85*03 83         [24] 2109 	mov	dph,(_lcd_address + 1)
      00053A E4               [12] 2110 	clr	a
      00053B F0               [24] 2111 	movx	@dptr,a
                                   2112 ;	assignBit
      00053C C2 B4            [12] 2113 	clr	_P3_4
                                   2114 ;	ecen4330lab7.c:539: delay(200);
      00053E 90 00 C8         [24] 2115 	mov	dptr,#0x00c8
      000541 12r01r1A         [24] 2116 	lcall	_delay
                                   2117 ;	ecen4330lab7.c:541: writeRegister8(ILI9341_SOFTRESET, 0);
      000544 75*00 00         [24] 2118 	mov	_writeRegister8_PARM_2,#0x00
      000547 75 82 01         [24] 2119 	mov	dpl,#0x01
      00054A 12r01r46         [24] 2120 	lcall	_writeRegister8
                                   2121 ;	ecen4330lab7.c:542: delay(50);
      00054D 90 00 32         [24] 2122 	mov	dptr,#0x0032
      000550 12r01r1A         [24] 2123 	lcall	_delay
                                   2124 ;	ecen4330lab7.c:544: writeRegister8(ILI9341_DISPLAYOFF, 0);
      000553 75*00 00         [24] 2125 	mov	_writeRegister8_PARM_2,#0x00
      000556 75 82 28         [24] 2126 	mov	dpl,#0x28
      000559 12r01r46         [24] 2127 	lcall	_writeRegister8
                                   2128 ;	ecen4330lab7.c:545: delay(10);
      00055C 90 00 0A         [24] 2129 	mov	dptr,#0x000a
      00055F 12r01r1A         [24] 2130 	lcall	_delay
                                   2131 ;	ecen4330lab7.c:547: writeRegister8(ILI9341_POWERCONTROL1, 0x23);
      000562 75*00 23         [24] 2132 	mov	_writeRegister8_PARM_2,#0x23
      000565 75 82 C0         [24] 2133 	mov	dpl,#0xc0
      000568 12r01r46         [24] 2134 	lcall	_writeRegister8
                                   2135 ;	ecen4330lab7.c:548: writeRegister8(ILI9341_POWERCONTROL2, 0x11);
      00056B 75*00 11         [24] 2136 	mov	_writeRegister8_PARM_2,#0x11
      00056E 75 82 C1         [24] 2137 	mov	dpl,#0xc1
      000571 12r01r46         [24] 2138 	lcall	_writeRegister8
                                   2139 ;	ecen4330lab7.c:549: write8Reg(ILI9341_VCOMCONTROL1);
                                   2140 ;	assignBit
      000574 C2 B5            [12] 2141 	clr	_P3_5
                                   2142 ;	assignBit
      000576 D2 B4            [12] 2143 	setb	_P3_4
      000578 85*02 82         [24] 2144 	mov	dpl,_lcd_address
      00057B 85*03 83         [24] 2145 	mov	dph,(_lcd_address + 1)
      00057E 74 C5            [12] 2146 	mov	a,#0xc5
      000580 F0               [24] 2147 	movx	@dptr,a
                                   2148 ;	assignBit
      000581 C2 B4            [12] 2149 	clr	_P3_4
                                   2150 ;	ecen4330lab7.c:550: write8Data(0x3d);
                                   2151 ;	assignBit
      000583 D2 B5            [12] 2152 	setb	_P3_5
                                   2153 ;	assignBit
      000585 D2 B4            [12] 2154 	setb	_P3_4
      000587 85*02 82         [24] 2155 	mov	dpl,_lcd_address
      00058A 85*03 83         [24] 2156 	mov	dph,(_lcd_address + 1)
      00058D 74 3D            [12] 2157 	mov	a,#0x3d
      00058F F0               [24] 2158 	movx	@dptr,a
                                   2159 ;	assignBit
      000590 C2 B4            [12] 2160 	clr	_P3_4
                                   2161 ;	ecen4330lab7.c:551: write8Data(0x30);
                                   2162 ;	assignBit
      000592 D2 B5            [12] 2163 	setb	_P3_5
                                   2164 ;	assignBit
      000594 D2 B4            [12] 2165 	setb	_P3_4
      000596 85*02 82         [24] 2166 	mov	dpl,_lcd_address
      000599 85*03 83         [24] 2167 	mov	dph,(_lcd_address + 1)
      00059C 74 30            [12] 2168 	mov	a,#0x30
      00059E F0               [24] 2169 	movx	@dptr,a
                                   2170 ;	assignBit
      00059F C2 B4            [12] 2171 	clr	_P3_4
                                   2172 ;	ecen4330lab7.c:552: writeRegister8(ILI9341_VCOMCONTROL2, 0xaa);
      0005A1 75*00 AA         [24] 2173 	mov	_writeRegister8_PARM_2,#0xaa
      0005A4 75 82 C7         [24] 2174 	mov	dpl,#0xc7
      0005A7 12r01r46         [24] 2175 	lcall	_writeRegister8
                                   2176 ;	ecen4330lab7.c:553: writeRegister8(ILI9341_MEMCONTROL, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
      0005AA 75*00 88         [24] 2177 	mov	_writeRegister8_PARM_2,#0x88
      0005AD 75 82 36         [24] 2178 	mov	dpl,#0x36
      0005B0 12r01r46         [24] 2179 	lcall	_writeRegister8
                                   2180 ;	ecen4330lab7.c:554: write8Reg(ILI9341_PIXELFORMAT);
                                   2181 ;	assignBit
      0005B3 C2 B5            [12] 2182 	clr	_P3_5
                                   2183 ;	assignBit
      0005B5 D2 B4            [12] 2184 	setb	_P3_4
      0005B7 85*02 82         [24] 2185 	mov	dpl,_lcd_address
      0005BA 85*03 83         [24] 2186 	mov	dph,(_lcd_address + 1)
      0005BD 74 3A            [12] 2187 	mov	a,#0x3a
      0005BF F0               [24] 2188 	movx	@dptr,a
                                   2189 ;	assignBit
      0005C0 C2 B4            [12] 2190 	clr	_P3_4
                                   2191 ;	ecen4330lab7.c:555: write8Data(0x55);
                                   2192 ;	assignBit
      0005C2 D2 B5            [12] 2193 	setb	_P3_5
                                   2194 ;	assignBit
      0005C4 D2 B4            [12] 2195 	setb	_P3_4
      0005C6 85*02 82         [24] 2196 	mov	dpl,_lcd_address
      0005C9 85*03 83         [24] 2197 	mov	dph,(_lcd_address + 1)
      0005CC 74 55            [12] 2198 	mov	a,#0x55
      0005CE F0               [24] 2199 	movx	@dptr,a
                                   2200 ;	assignBit
      0005CF C2 B4            [12] 2201 	clr	_P3_4
                                   2202 ;	ecen4330lab7.c:556: write8Data(0x00);
                                   2203 ;	assignBit
      0005D1 D2 B5            [12] 2204 	setb	_P3_5
                                   2205 ;	assignBit
      0005D3 D2 B4            [12] 2206 	setb	_P3_4
      0005D5 85*02 82         [24] 2207 	mov	dpl,_lcd_address
      0005D8 85*03 83         [24] 2208 	mov	dph,(_lcd_address + 1)
      0005DB E4               [12] 2209 	clr	a
      0005DC F0               [24] 2210 	movx	@dptr,a
                                   2211 ;	assignBit
      0005DD C2 B4            [12] 2212 	clr	_P3_4
                                   2213 ;	ecen4330lab7.c:557: writeRegister16(ILI9341_FRAMECONTROL, 0x001B);
      0005DF 75*00 1B         [24] 2214 	mov	_writeRegister16_PARM_2,#0x1b
      0005E2 75*01 00         [24] 2215 	mov	(_writeRegister16_PARM_2 + 1),#0x00
      0005E5 90 00 B1         [24] 2216 	mov	dptr,#0x00b1
      0005E8 12r01r66         [24] 2217 	lcall	_writeRegister16
                                   2218 ;	ecen4330lab7.c:558: writeRegister8(ILI9341_ENTRYMODE, 0x07);
      0005EB 75*00 07         [24] 2219 	mov	_writeRegister8_PARM_2,#0x07
      0005EE 75 82 B7         [24] 2220 	mov	dpl,#0xb7
      0005F1 12r01r46         [24] 2221 	lcall	_writeRegister8
                                   2222 ;	ecen4330lab7.c:559: writeRegister8(ILI9341_SLEEPOUT, 0);
      0005F4 75*00 00         [24] 2223 	mov	_writeRegister8_PARM_2,#0x00
      0005F7 75 82 11         [24] 2224 	mov	dpl,#0x11
      0005FA 12r01r46         [24] 2225 	lcall	_writeRegister8
                                   2226 ;	ecen4330lab7.c:560: delay(150);
      0005FD 90 00 96         [24] 2227 	mov	dptr,#0x0096
      000600 12r01r1A         [24] 2228 	lcall	_delay
                                   2229 ;	ecen4330lab7.c:562: writeRegister8(ILI9341_DISPLAYON, 0);
      000603 75*00 00         [24] 2230 	mov	_writeRegister8_PARM_2,#0x00
      000606 75 82 29         [24] 2231 	mov	dpl,#0x29
      000609 12r01r46         [24] 2232 	lcall	_writeRegister8
                                   2233 ;	ecen4330lab7.c:563: delay(500);
      00060C 90 01 F4         [24] 2234 	mov	dptr,#0x01f4
      00060F 12r01r1A         [24] 2235 	lcall	_delay
                                   2236 ;	ecen4330lab7.c:565: setAddress(0,0,_width-1,_height-1);
      000612 E5*12            [12] 2237 	mov	a,__width
      000614 24 FF            [12] 2238 	add	a,#0xff
      000616 F5*02            [12] 2239 	mov	_setAddress_PARM_3,a
      000618 E5*13            [12] 2240 	mov	a,(__width + 1)
      00061A 34 FF            [12] 2241 	addc	a,#0xff
      00061C F5*03            [12] 2242 	mov	(_setAddress_PARM_3 + 1),a
      00061E E5*14            [12] 2243 	mov	a,__height
      000620 24 FF            [12] 2244 	add	a,#0xff
      000622 F5*04            [12] 2245 	mov	_setAddress_PARM_4,a
      000624 E5*15            [12] 2246 	mov	a,(__height + 1)
      000626 34 FF            [12] 2247 	addc	a,#0xff
      000628 F5*05            [12] 2248 	mov	(_setAddress_PARM_4 + 1),a
      00062A E4               [12] 2249 	clr	a
      00062B F5*00            [12] 2250 	mov	_setAddress_PARM_2,a
      00062D F5*01            [12] 2251 	mov	(_setAddress_PARM_2 + 1),a
      00062F 90 00 00         [24] 2252 	mov	dptr,#0x0000
                                   2253 ;	ecen4330lab7.c:566: }
      000632 02r04r5B         [24] 2254 	ljmp	_setAddress
                                   2255 ;------------------------------------------------------------
                                   2256 ;Allocation info for local variables in function 'drawPixel'
                                   2257 ;------------------------------------------------------------
                                   2258 ;y3                        Allocated with name '_drawPixel_PARM_2'
                                   2259 ;color1                    Allocated with name '_drawPixel_PARM_3'
                                   2260 ;x3                        Allocated to registers r6 r7 
                                   2261 ;------------------------------------------------------------
                                   2262 ;	ecen4330lab7.c:574: void drawPixel(u16 x3,u16 y3,u16 color1)
                                   2263 ;	-----------------------------------------
                                   2264 ;	 function drawPixel
                                   2265 ;	-----------------------------------------
      000635                       2266 _drawPixel:
      000635 AE 82            [24] 2267 	mov	r6,dpl
      000637 AF 83            [24] 2268 	mov	r7,dph
                                   2269 ;	ecen4330lab7.c:576: setAddress(x3,y3,x3+1,y3+1);
      000639 74 01            [12] 2270 	mov	a,#0x01
      00063B 2E               [12] 2271 	add	a,r6
      00063C F5*02            [12] 2272 	mov	_setAddress_PARM_3,a
      00063E E4               [12] 2273 	clr	a
      00063F 3F               [12] 2274 	addc	a,r7
      000640 F5*03            [12] 2275 	mov	(_setAddress_PARM_3 + 1),a
      000642 74 01            [12] 2276 	mov	a,#0x01
      000644 25*44            [12] 2277 	add	a,_drawPixel_PARM_2
      000646 F5*04            [12] 2278 	mov	_setAddress_PARM_4,a
      000648 E4               [12] 2279 	clr	a
      000649 35*45            [12] 2280 	addc	a,(_drawPixel_PARM_2 + 1)
      00064B F5*05            [12] 2281 	mov	(_setAddress_PARM_4 + 1),a
      00064D 85*44*00         [24] 2282 	mov	_setAddress_PARM_2,_drawPixel_PARM_2
      000650 85*45*01         [24] 2283 	mov	(_setAddress_PARM_2 + 1),(_drawPixel_PARM_2 + 1)
      000653 8E 82            [24] 2284 	mov	dpl,r6
      000655 8F 83            [24] 2285 	mov	dph,r7
      000657 12r04r5B         [24] 2286 	lcall	_setAddress
                                   2287 ;	ecen4330lab7.c:577: CD=0; 
                                   2288 ;	assignBit
      00065A C2 B5            [12] 2289 	clr	_P3_5
                                   2290 ;	ecen4330lab7.c:578: write8(0x2C);
                                   2291 ;	assignBit
      00065C D2 B4            [12] 2292 	setb	_P3_4
      00065E 85*02 82         [24] 2293 	mov	dpl,_lcd_address
      000661 85*03 83         [24] 2294 	mov	dph,(_lcd_address + 1)
      000664 74 2C            [12] 2295 	mov	a,#0x2c
      000666 F0               [24] 2296 	movx	@dptr,a
                                   2297 ;	assignBit
      000667 C2 B4            [12] 2298 	clr	_P3_4
                                   2299 ;	ecen4330lab7.c:579: CD = 1;
                                   2300 ;	assignBit
      000669 D2 B5            [12] 2301 	setb	_P3_5
                                   2302 ;	ecen4330lab7.c:580: write8(color1>>8);
                                   2303 ;	assignBit
      00066B D2 B4            [12] 2304 	setb	_P3_4
      00066D 85*02 82         [24] 2305 	mov	dpl,_lcd_address
      000670 85*03 83         [24] 2306 	mov	dph,(_lcd_address + 1)
      000673 E5*47            [12] 2307 	mov	a,(_drawPixel_PARM_3 + 1)
      000675 F0               [24] 2308 	movx	@dptr,a
                                   2309 ;	assignBit
      000676 C2 B4            [12] 2310 	clr	_P3_4
                                   2311 ;	ecen4330lab7.c:581: write8(color1);
                                   2312 ;	assignBit
      000678 D2 B4            [12] 2313 	setb	_P3_4
      00067A 85*02 82         [24] 2314 	mov	dpl,_lcd_address
      00067D 85*03 83         [24] 2315 	mov	dph,(_lcd_address + 1)
      000680 E5*46            [12] 2316 	mov	a,_drawPixel_PARM_3
      000682 F0               [24] 2317 	movx	@dptr,a
                                   2318 ;	assignBit
      000683 C2 B4            [12] 2319 	clr	_P3_4
                                   2320 ;	ecen4330lab7.c:582: }
      000685 22               [24] 2321 	ret
                                   2322 ;------------------------------------------------------------
                                   2323 ;Allocation info for local variables in function 'fillRect'
                                   2324 ;------------------------------------------------------------
                                   2325 ;y                         Allocated with name '_fillRect_PARM_2'
                                   2326 ;w                         Allocated with name '_fillRect_PARM_3'
                                   2327 ;h                         Allocated with name '_fillRect_PARM_4'
                                   2328 ;color                     Allocated with name '_fillRect_PARM_5'
                                   2329 ;x                         Allocated to registers 
                                   2330 ;------------------------------------------------------------
                                   2331 ;	ecen4330lab7.c:590: void fillRect(u16 x,u16 y,u16 w,u16 h,u16 color){
                                   2332 ;	-----------------------------------------
                                   2333 ;	 function fillRect
                                   2334 ;	-----------------------------------------
      000686                       2335 _fillRect:
      000686 AE 82            [24] 2336 	mov	r6,dpl
      000688 AF 83            [24] 2337 	mov	r7,dph
                                   2338 ;	ecen4330lab7.c:591: if ((x >= TFTWIDTH) || (y >= TFTHEIGHT))
      00068A C3               [12] 2339 	clr	c
      00068B EE               [12] 2340 	mov	a,r6
      00068C 94 F0            [12] 2341 	subb	a,#0xf0
      00068E EF               [12] 2342 	mov	a,r7
      00068F 94 00            [12] 2343 	subb	a,#0x00
      000691 50 0B            [24] 2344 	jnc	00101$
      000693 C3               [12] 2345 	clr	c
      000694 E5*48            [12] 2346 	mov	a,_fillRect_PARM_2
      000696 94 40            [12] 2347 	subb	a,#0x40
      000698 E5*49            [12] 2348 	mov	a,(_fillRect_PARM_2 + 1)
      00069A 94 01            [12] 2349 	subb	a,#0x01
      00069C 40 01            [24] 2350 	jc	00102$
      00069E                       2351 00101$:
                                   2352 ;	ecen4330lab7.c:593: return;
      00069E 22               [24] 2353 	ret
      00069F                       2354 00102$:
                                   2355 ;	ecen4330lab7.c:596: if ((x+w-1) >= TFTWIDTH)
      00069F E5*4A            [12] 2356 	mov	a,_fillRect_PARM_3
      0006A1 2E               [12] 2357 	add	a,r6
      0006A2 FC               [12] 2358 	mov	r4,a
      0006A3 E5*4B            [12] 2359 	mov	a,(_fillRect_PARM_3 + 1)
      0006A5 3F               [12] 2360 	addc	a,r7
      0006A6 FD               [12] 2361 	mov	r5,a
      0006A7 1C               [12] 2362 	dec	r4
      0006A8 BC FF 01         [24] 2363 	cjne	r4,#0xff,00161$
      0006AB 1D               [12] 2364 	dec	r5
      0006AC                       2365 00161$:
      0006AC C3               [12] 2366 	clr	c
      0006AD EC               [12] 2367 	mov	a,r4
      0006AE 94 F0            [12] 2368 	subb	a,#0xf0
      0006B0 ED               [12] 2369 	mov	a,r5
      0006B1 94 00            [12] 2370 	subb	a,#0x00
      0006B3 40 0A            [24] 2371 	jc	00105$
                                   2372 ;	ecen4330lab7.c:598: w = TFTWIDTH-x;
      0006B5 74 F0            [12] 2373 	mov	a,#0xf0
      0006B7 C3               [12] 2374 	clr	c
      0006B8 9E               [12] 2375 	subb	a,r6
      0006B9 F5*4A            [12] 2376 	mov	_fillRect_PARM_3,a
      0006BB E4               [12] 2377 	clr	a
      0006BC 9F               [12] 2378 	subb	a,r7
      0006BD F5*4B            [12] 2379 	mov	(_fillRect_PARM_3 + 1),a
      0006BF                       2380 00105$:
                                   2381 ;	ecen4330lab7.c:601: if ((y+h-1) >= TFTHEIGHT)
      0006BF E5*4C            [12] 2382 	mov	a,_fillRect_PARM_4
      0006C1 25*48            [12] 2383 	add	a,_fillRect_PARM_2
      0006C3 FC               [12] 2384 	mov	r4,a
      0006C4 E5*4D            [12] 2385 	mov	a,(_fillRect_PARM_4 + 1)
      0006C6 35*49            [12] 2386 	addc	a,(_fillRect_PARM_2 + 1)
      0006C8 FD               [12] 2387 	mov	r5,a
      0006C9 1C               [12] 2388 	dec	r4
      0006CA BC FF 01         [24] 2389 	cjne	r4,#0xff,00163$
      0006CD 1D               [12] 2390 	dec	r5
      0006CE                       2391 00163$:
      0006CE C3               [12] 2392 	clr	c
      0006CF EC               [12] 2393 	mov	a,r4
      0006D0 94 40            [12] 2394 	subb	a,#0x40
      0006D2 ED               [12] 2395 	mov	a,r5
      0006D3 94 01            [12] 2396 	subb	a,#0x01
      0006D5 40 0D            [24] 2397 	jc	00107$
                                   2398 ;	ecen4330lab7.c:603: h = TFTHEIGHT-y;
      0006D7 74 40            [12] 2399 	mov	a,#0x40
      0006D9 C3               [12] 2400 	clr	c
      0006DA 95*48            [12] 2401 	subb	a,_fillRect_PARM_2
      0006DC F5*4C            [12] 2402 	mov	_fillRect_PARM_4,a
      0006DE 74 01            [12] 2403 	mov	a,#0x01
      0006E0 95*49            [12] 2404 	subb	a,(_fillRect_PARM_2 + 1)
      0006E2 F5*4D            [12] 2405 	mov	(_fillRect_PARM_4 + 1),a
      0006E4                       2406 00107$:
                                   2407 ;	ecen4330lab7.c:606: setAddress(x, y, x+w-1, y+h-1);
      0006E4 E5*4A            [12] 2408 	mov	a,_fillRect_PARM_3
      0006E6 2E               [12] 2409 	add	a,r6
      0006E7 FC               [12] 2410 	mov	r4,a
      0006E8 E5*4B            [12] 2411 	mov	a,(_fillRect_PARM_3 + 1)
      0006EA 3F               [12] 2412 	addc	a,r7
      0006EB FD               [12] 2413 	mov	r5,a
      0006EC EC               [12] 2414 	mov	a,r4
      0006ED 24 FF            [12] 2415 	add	a,#0xff
      0006EF F5*02            [12] 2416 	mov	_setAddress_PARM_3,a
      0006F1 ED               [12] 2417 	mov	a,r5
      0006F2 34 FF            [12] 2418 	addc	a,#0xff
      0006F4 F5*03            [12] 2419 	mov	(_setAddress_PARM_3 + 1),a
      0006F6 E5*4C            [12] 2420 	mov	a,_fillRect_PARM_4
      0006F8 25*48            [12] 2421 	add	a,_fillRect_PARM_2
      0006FA FC               [12] 2422 	mov	r4,a
      0006FB E5*4D            [12] 2423 	mov	a,(_fillRect_PARM_4 + 1)
      0006FD 35*49            [12] 2424 	addc	a,(_fillRect_PARM_2 + 1)
      0006FF FD               [12] 2425 	mov	r5,a
      000700 EC               [12] 2426 	mov	a,r4
      000701 24 FF            [12] 2427 	add	a,#0xff
      000703 F5*04            [12] 2428 	mov	_setAddress_PARM_4,a
      000705 ED               [12] 2429 	mov	a,r5
      000706 34 FF            [12] 2430 	addc	a,#0xff
      000708 F5*05            [12] 2431 	mov	(_setAddress_PARM_4 + 1),a
      00070A 85*48*00         [24] 2432 	mov	_setAddress_PARM_2,_fillRect_PARM_2
      00070D 85*49*01         [24] 2433 	mov	(_setAddress_PARM_2 + 1),(_fillRect_PARM_2 + 1)
      000710 8E 82            [24] 2434 	mov	dpl,r6
      000712 8F 83            [24] 2435 	mov	dph,r7
      000714 12r04r5B         [24] 2436 	lcall	_setAddress
                                   2437 ;	ecen4330lab7.c:607: write8Reg(0x2C);
                                   2438 ;	assignBit
      000717 C2 B5            [12] 2439 	clr	_P3_5
                                   2440 ;	assignBit
      000719 D2 B4            [12] 2441 	setb	_P3_4
      00071B 85*02 82         [24] 2442 	mov	dpl,_lcd_address
      00071E 85*03 83         [24] 2443 	mov	dph,(_lcd_address + 1)
      000721 74 2C            [12] 2444 	mov	a,#0x2c
      000723 F0               [24] 2445 	movx	@dptr,a
                                   2446 ;	assignBit
      000724 C2 B4            [12] 2447 	clr	_P3_4
                                   2448 ;	ecen4330lab7.c:608: CD = 1;
                                   2449 ;	assignBit
      000726 D2 B5            [12] 2450 	setb	_P3_5
                                   2451 ;	ecen4330lab7.c:609: for(y=h; y>0; y--)
      000728 AF*4F            [24] 2452 	mov	r7,(_fillRect_PARM_5 + 1)
      00072A AD*4C            [24] 2453 	mov	r5,_fillRect_PARM_4
      00072C AE*4D            [24] 2454 	mov	r6,(_fillRect_PARM_4 + 1)
      00072E                       2455 00114$:
      00072E ED               [12] 2456 	mov	a,r5
      00072F 4E               [12] 2457 	orl	a,r6
      000730 60 30            [24] 2458 	jz	00116$
                                   2459 ;	ecen4330lab7.c:611: for(x=w; x>0; x--)
      000732 AB*4A            [24] 2460 	mov	r3,_fillRect_PARM_3
      000734 AC*4B            [24] 2461 	mov	r4,(_fillRect_PARM_3 + 1)
      000736                       2462 00111$:
      000736 EB               [12] 2463 	mov	a,r3
      000737 4C               [12] 2464 	orl	a,r4
      000738 60 21            [24] 2465 	jz	00115$
                                   2466 ;	ecen4330lab7.c:613: write8(color>>8); 
                                   2467 ;	assignBit
      00073A D2 B4            [12] 2468 	setb	_P3_4
      00073C 85*02 82         [24] 2469 	mov	dpl,_lcd_address
      00073F 85*03 83         [24] 2470 	mov	dph,(_lcd_address + 1)
      000742 EF               [12] 2471 	mov	a,r7
      000743 F0               [24] 2472 	movx	@dptr,a
                                   2473 ;	assignBit
      000744 C2 B4            [12] 2474 	clr	_P3_4
                                   2475 ;	ecen4330lab7.c:614: write8(color);
                                   2476 ;	assignBit
      000746 D2 B4            [12] 2477 	setb	_P3_4
      000748 85*02 82         [24] 2478 	mov	dpl,_lcd_address
      00074B 85*03 83         [24] 2479 	mov	dph,(_lcd_address + 1)
      00074E E5*4E            [12] 2480 	mov	a,_fillRect_PARM_5
      000750 FA               [12] 2481 	mov	r2,a
      000751 F0               [24] 2482 	movx	@dptr,a
                                   2483 ;	assignBit
      000752 C2 B4            [12] 2484 	clr	_P3_4
                                   2485 ;	ecen4330lab7.c:611: for(x=w; x>0; x--)
      000754 1B               [12] 2486 	dec	r3
      000755 BB FF 01         [24] 2487 	cjne	r3,#0xff,00167$
      000758 1C               [12] 2488 	dec	r4
      000759                       2489 00167$:
      000759 80 DB            [24] 2490 	sjmp	00111$
      00075B                       2491 00115$:
                                   2492 ;	ecen4330lab7.c:609: for(y=h; y>0; y--)
      00075B 1D               [12] 2493 	dec	r5
      00075C BD FF 01         [24] 2494 	cjne	r5,#0xff,00168$
      00075F 1E               [12] 2495 	dec	r6
      000760                       2496 00168$:
      000760 80 CC            [24] 2497 	sjmp	00114$
      000762                       2498 00116$:
                                   2499 ;	ecen4330lab7.c:617: }
      000762 22               [24] 2500 	ret
                                   2501 ;------------------------------------------------------------
                                   2502 ;Allocation info for local variables in function 'fillScreen'
                                   2503 ;------------------------------------------------------------
                                   2504 ;Color                     Allocated to registers r6 r7 
                                   2505 ;len                       Allocated to registers 
                                   2506 ;blocks                    Allocated to registers r4 r7 
                                   2507 ;i                         Allocated to registers r3 
                                   2508 ;hi                        Allocated to registers r5 
                                   2509 ;lo                        Allocated to registers r6 
                                   2510 ;------------------------------------------------------------
                                   2511 ;	ecen4330lab7.c:625: void fillScreen(unsigned int Color){
                                   2512 ;	-----------------------------------------
                                   2513 ;	 function fillScreen
                                   2514 ;	-----------------------------------------
      000763                       2515 _fillScreen:
      000763 AE 82            [24] 2516 	mov	r6,dpl
      000765 AF 83            [24] 2517 	mov	r7,dph
                                   2518 ;	ecen4330lab7.c:628: unsigned char  i, hi = Color >> 8, lo = Color;
      000767 8F 05            [24] 2519 	mov	ar5,r7
                                   2520 ;	ecen4330lab7.c:631: setAddress(0,0,TFTWIDTH-1,TFTHEIGHT-1);
      000769 E4               [12] 2521 	clr	a
      00076A F5*00            [12] 2522 	mov	_setAddress_PARM_2,a
      00076C F5*01            [12] 2523 	mov	(_setAddress_PARM_2 + 1),a
      00076E 75*02 EF         [24] 2524 	mov	_setAddress_PARM_3,#0xef
                                   2525 ;	1-genFromRTrack replaced	mov	(_setAddress_PARM_3 + 1),#0x00
      000771 F5*03            [12] 2526 	mov	(_setAddress_PARM_3 + 1),a
      000773 75*04 3F         [24] 2527 	mov	_setAddress_PARM_4,#0x3f
      000776 75*05 01         [24] 2528 	mov	(_setAddress_PARM_4 + 1),#0x01
      000779 90 00 00         [24] 2529 	mov	dptr,#0x0000
      00077C C0 06            [24] 2530 	push	ar6
      00077E C0 05            [24] 2531 	push	ar5
      000780 12r04r5B         [24] 2532 	lcall	_setAddress
      000783 D0 05            [24] 2533 	pop	ar5
      000785 D0 06            [24] 2534 	pop	ar6
                                   2535 ;	ecen4330lab7.c:632: write8Reg(0x2C);
                                   2536 ;	assignBit
      000787 C2 B5            [12] 2537 	clr	_P3_5
                                   2538 ;	assignBit
      000789 D2 B4            [12] 2539 	setb	_P3_4
      00078B 85*02 82         [24] 2540 	mov	dpl,_lcd_address
      00078E 85*03 83         [24] 2541 	mov	dph,(_lcd_address + 1)
      000791 74 2C            [12] 2542 	mov	a,#0x2c
      000793 F0               [24] 2543 	movx	@dptr,a
                                   2544 ;	assignBit
      000794 C2 B4            [12] 2545 	clr	_P3_4
                                   2546 ;	ecen4330lab7.c:633: CD = 1;
                                   2547 ;	assignBit
      000796 D2 B5            [12] 2548 	setb	_P3_5
                                   2549 ;	ecen4330lab7.c:634: write8(hi); 
                                   2550 ;	assignBit
      000798 D2 B4            [12] 2551 	setb	_P3_4
      00079A 85*02 82         [24] 2552 	mov	dpl,_lcd_address
      00079D 85*03 83         [24] 2553 	mov	dph,(_lcd_address + 1)
      0007A0 ED               [12] 2554 	mov	a,r5
      0007A1 F0               [24] 2555 	movx	@dptr,a
                                   2556 ;	assignBit
      0007A2 C2 B4            [12] 2557 	clr	_P3_4
                                   2558 ;	ecen4330lab7.c:635: write8(lo);
                                   2559 ;	assignBit
      0007A4 D2 B4            [12] 2560 	setb	_P3_4
      0007A6 85*02 82         [24] 2561 	mov	dpl,_lcd_address
      0007A9 85*03 83         [24] 2562 	mov	dph,(_lcd_address + 1)
      0007AC EE               [12] 2563 	mov	a,r6
      0007AD F0               [24] 2564 	movx	@dptr,a
                                   2565 ;	assignBit
      0007AE C2 B4            [12] 2566 	clr	_P3_4
                                   2567 ;	ecen4330lab7.c:637: while(blocks--) {
      0007B0 7C B0            [12] 2568 	mov	r4,#0xb0
      0007B2 7F 04            [12] 2569 	mov	r7,#0x04
      0007B4                       2570 00104$:
      0007B4 8C 02            [24] 2571 	mov	ar2,r4
      0007B6 8F 03            [24] 2572 	mov	ar3,r7
      0007B8 1C               [12] 2573 	dec	r4
      0007B9 BC FF 01         [24] 2574 	cjne	r4,#0xff,00140$
      0007BC 1F               [12] 2575 	dec	r7
      0007BD                       2576 00140$:
      0007BD EA               [12] 2577 	mov	a,r2
      0007BE 4B               [12] 2578 	orl	a,r3
      0007BF 60 66            [24] 2579 	jz	00106$
                                   2580 ;	ecen4330lab7.c:639: do {
      0007C1 7B 10            [12] 2581 	mov	r3,#0x10
      0007C3                       2582 00101$:
                                   2583 ;	ecen4330lab7.c:640: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2584 ;	assignBit
      0007C3 D2 B4            [12] 2585 	setb	_P3_4
      0007C5 85*02 82         [24] 2586 	mov	dpl,_lcd_address
      0007C8 85*03 83         [24] 2587 	mov	dph,(_lcd_address + 1)
      0007CB ED               [12] 2588 	mov	a,r5
      0007CC F0               [24] 2589 	movx	@dptr,a
                                   2590 ;	assignBit
      0007CD C2 B4            [12] 2591 	clr	_P3_4
                                   2592 ;	assignBit
      0007CF D2 B4            [12] 2593 	setb	_P3_4
      0007D1 85*02 82         [24] 2594 	mov	dpl,_lcd_address
      0007D4 85*03 83         [24] 2595 	mov	dph,(_lcd_address + 1)
      0007D7 EE               [12] 2596 	mov	a,r6
      0007D8 F0               [24] 2597 	movx	@dptr,a
                                   2598 ;	assignBit
      0007D9 C2 B4            [12] 2599 	clr	_P3_4
                                   2600 ;	assignBit
      0007DB D2 B4            [12] 2601 	setb	_P3_4
      0007DD 85*02 82         [24] 2602 	mov	dpl,_lcd_address
      0007E0 85*03 83         [24] 2603 	mov	dph,(_lcd_address + 1)
      0007E3 ED               [12] 2604 	mov	a,r5
      0007E4 F0               [24] 2605 	movx	@dptr,a
                                   2606 ;	assignBit
      0007E5 C2 B4            [12] 2607 	clr	_P3_4
                                   2608 ;	assignBit
      0007E7 D2 B4            [12] 2609 	setb	_P3_4
      0007E9 85*02 82         [24] 2610 	mov	dpl,_lcd_address
      0007EC 85*03 83         [24] 2611 	mov	dph,(_lcd_address + 1)
      0007EF EE               [12] 2612 	mov	a,r6
      0007F0 F0               [24] 2613 	movx	@dptr,a
                                   2614 ;	assignBit
      0007F1 C2 B4            [12] 2615 	clr	_P3_4
                                   2616 ;	ecen4330lab7.c:641: write8(hi); write8(lo);write8(hi); write8(lo);
                                   2617 ;	assignBit
      0007F3 D2 B4            [12] 2618 	setb	_P3_4
      0007F5 85*02 82         [24] 2619 	mov	dpl,_lcd_address
      0007F8 85*03 83         [24] 2620 	mov	dph,(_lcd_address + 1)
      0007FB ED               [12] 2621 	mov	a,r5
      0007FC F0               [24] 2622 	movx	@dptr,a
                                   2623 ;	assignBit
      0007FD C2 B4            [12] 2624 	clr	_P3_4
                                   2625 ;	assignBit
      0007FF D2 B4            [12] 2626 	setb	_P3_4
      000801 85*02 82         [24] 2627 	mov	dpl,_lcd_address
      000804 85*03 83         [24] 2628 	mov	dph,(_lcd_address + 1)
      000807 EE               [12] 2629 	mov	a,r6
      000808 F0               [24] 2630 	movx	@dptr,a
                                   2631 ;	assignBit
      000809 C2 B4            [12] 2632 	clr	_P3_4
                                   2633 ;	assignBit
      00080B D2 B4            [12] 2634 	setb	_P3_4
      00080D 85*02 82         [24] 2635 	mov	dpl,_lcd_address
      000810 85*03 83         [24] 2636 	mov	dph,(_lcd_address + 1)
      000813 ED               [12] 2637 	mov	a,r5
      000814 F0               [24] 2638 	movx	@dptr,a
                                   2639 ;	assignBit
      000815 C2 B4            [12] 2640 	clr	_P3_4
                                   2641 ;	assignBit
      000817 D2 B4            [12] 2642 	setb	_P3_4
      000819 85*02 82         [24] 2643 	mov	dpl,_lcd_address
      00081C 85*03 83         [24] 2644 	mov	dph,(_lcd_address + 1)
      00081F EE               [12] 2645 	mov	a,r6
      000820 F0               [24] 2646 	movx	@dptr,a
                                   2647 ;	assignBit
      000821 C2 B4            [12] 2648 	clr	_P3_4
                                   2649 ;	ecen4330lab7.c:642: } while(--i);
      000823 DB 9E            [24] 2650 	djnz	r3,00101$
      000825 80 8D            [24] 2651 	sjmp	00104$
      000827                       2652 00106$:
                                   2653 ;	ecen4330lab7.c:644: for(i = (char)len & 63; i--; ) {
      000827 7F 3F            [12] 2654 	mov	r7,#0x3f
      000829                       2655 00109$:
      000829 8F 04            [24] 2656 	mov	ar4,r7
      00082B 1F               [12] 2657 	dec	r7
      00082C EC               [12] 2658 	mov	a,r4
      00082D 60 1A            [24] 2659 	jz	00111$
                                   2660 ;	ecen4330lab7.c:645: write8(hi); 
                                   2661 ;	assignBit
      00082F D2 B4            [12] 2662 	setb	_P3_4
      000831 85*02 82         [24] 2663 	mov	dpl,_lcd_address
      000834 85*03 83         [24] 2664 	mov	dph,(_lcd_address + 1)
      000837 ED               [12] 2665 	mov	a,r5
      000838 F0               [24] 2666 	movx	@dptr,a
                                   2667 ;	assignBit
      000839 C2 B4            [12] 2668 	clr	_P3_4
                                   2669 ;	ecen4330lab7.c:646: write8(lo);
                                   2670 ;	assignBit
      00083B D2 B4            [12] 2671 	setb	_P3_4
      00083D 85*02 82         [24] 2672 	mov	dpl,_lcd_address
      000840 85*03 83         [24] 2673 	mov	dph,(_lcd_address + 1)
      000843 EE               [12] 2674 	mov	a,r6
      000844 F0               [24] 2675 	movx	@dptr,a
                                   2676 ;	assignBit
      000845 C2 B4            [12] 2677 	clr	_P3_4
      000847 80 E0            [24] 2678 	sjmp	00109$
      000849                       2679 00111$:
                                   2680 ;	ecen4330lab7.c:648: }
      000849 22               [24] 2681 	ret
                                   2682 ;------------------------------------------------------------
                                   2683 ;Allocation info for local variables in function 'drawChar'
                                   2684 ;------------------------------------------------------------
                                   2685 ;y                         Allocated with name '_drawChar_PARM_2'
                                   2686 ;c                         Allocated with name '_drawChar_PARM_3'
                                   2687 ;color                     Allocated with name '_drawChar_PARM_4'
                                   2688 ;bg                        Allocated with name '_drawChar_PARM_5'
                                   2689 ;size                      Allocated with name '_drawChar_PARM_6'
                                   2690 ;x                         Allocated with name '_drawChar_x_65536_319'
                                   2691 ;i                         Allocated to registers r3 
                                   2692 ;line                      Allocated with name '_drawChar_line_196608_323'
                                   2693 ;j                         Allocated to registers r2 
                                   2694 ;sloc1                     Allocated with name '_drawChar_sloc1_1_0'
                                   2695 ;------------------------------------------------------------
                                   2696 ;	ecen4330lab7.c:656: void drawChar(int x, int y, unsigned char c,u16 color, u16 bg, u8 size){
                                   2697 ;	-----------------------------------------
                                   2698 ;	 function drawChar
                                   2699 ;	-----------------------------------------
      00084A                       2700 _drawChar:
      00084A 85 82*58         [24] 2701 	mov	_drawChar_x_65536_319,dpl
      00084D 85 83*59         [24] 2702 	mov	(_drawChar_x_65536_319 + 1),dph
                                   2703 ;	ecen4330lab7.c:657: if ((x >=TFTWIDTH) || // Clip right
      000850 C3               [12] 2704 	clr	c
      000851 E5*58            [12] 2705 	mov	a,_drawChar_x_65536_319
      000853 94 F0            [12] 2706 	subb	a,#0xf0
      000855 E5*59            [12] 2707 	mov	a,(_drawChar_x_65536_319 + 1)
      000857 64 80            [12] 2708 	xrl	a,#0x80
      000859 94 80            [12] 2709 	subb	a,#0x80
      00085B 50 59            [24] 2710 	jnc	00101$
                                   2711 ;	ecen4330lab7.c:658: (y >=TFTHEIGHT)           || // Clip bottom
      00085D C3               [12] 2712 	clr	c
      00085E E5*50            [12] 2713 	mov	a,_drawChar_PARM_2
      000860 94 40            [12] 2714 	subb	a,#0x40
      000862 E5*51            [12] 2715 	mov	a,(_drawChar_PARM_2 + 1)
      000864 64 80            [12] 2716 	xrl	a,#0x80
      000866 94 81            [12] 2717 	subb	a,#0x81
      000868 50 4C            [24] 2718 	jnc	00101$
                                   2719 ;	ecen4330lab7.c:659: ((x + 6 * size - 1) < 0) || // Clip left
      00086A AC*57            [24] 2720 	mov	r4,_drawChar_PARM_6
      00086C 7D 00            [12] 2721 	mov	r5,#0x00
      00086E 8C*00            [24] 2722 	mov	__mulint_PARM_2,r4
      000870 8D*01            [24] 2723 	mov	(__mulint_PARM_2 + 1),r5
      000872 90 00 06         [24] 2724 	mov	dptr,#0x0006
      000875 C0 05            [24] 2725 	push	ar5
      000877 C0 04            [24] 2726 	push	ar4
      000879 12r00r00         [24] 2727 	lcall	__mulint
      00087C AA 82            [24] 2728 	mov	r2,dpl
      00087E AB 83            [24] 2729 	mov	r3,dph
      000880 D0 04            [24] 2730 	pop	ar4
      000882 D0 05            [24] 2731 	pop	ar5
      000884 EA               [12] 2732 	mov	a,r2
      000885 25*58            [12] 2733 	add	a,_drawChar_x_65536_319
      000887 FA               [12] 2734 	mov	r2,a
      000888 EB               [12] 2735 	mov	a,r3
      000889 35*59            [12] 2736 	addc	a,(_drawChar_x_65536_319 + 1)
      00088B FB               [12] 2737 	mov	r3,a
      00088C 1A               [12] 2738 	dec	r2
      00088D BA FF 01         [24] 2739 	cjne	r2,#0xff,00182$
      000890 1B               [12] 2740 	dec	r3
      000891                       2741 00182$:
      000891 EB               [12] 2742 	mov	a,r3
      000892 20 E7 21         [24] 2743 	jb	acc.7,00101$
                                   2744 ;	ecen4330lab7.c:660: ((y + 8 * size - 1) < 0))   // Clip top
      000895 ED               [12] 2745 	mov	a,r5
      000896 C4               [12] 2746 	swap	a
      000897 03               [12] 2747 	rr	a
      000898 54 F8            [12] 2748 	anl	a,#0xf8
      00089A CC               [12] 2749 	xch	a,r4
      00089B C4               [12] 2750 	swap	a
      00089C 03               [12] 2751 	rr	a
      00089D CC               [12] 2752 	xch	a,r4
      00089E 6C               [12] 2753 	xrl	a,r4
      00089F CC               [12] 2754 	xch	a,r4
      0008A0 54 F8            [12] 2755 	anl	a,#0xf8
      0008A2 CC               [12] 2756 	xch	a,r4
      0008A3 6C               [12] 2757 	xrl	a,r4
      0008A4 FD               [12] 2758 	mov	r5,a
      0008A5 EC               [12] 2759 	mov	a,r4
      0008A6 25*50            [12] 2760 	add	a,_drawChar_PARM_2
      0008A8 FC               [12] 2761 	mov	r4,a
      0008A9 ED               [12] 2762 	mov	a,r5
      0008AA 35*51            [12] 2763 	addc	a,(_drawChar_PARM_2 + 1)
      0008AC FD               [12] 2764 	mov	r5,a
      0008AD 1C               [12] 2765 	dec	r4
      0008AE BC FF 01         [24] 2766 	cjne	r4,#0xff,00184$
      0008B1 1D               [12] 2767 	dec	r5
      0008B2                       2768 00184$:
      0008B2 ED               [12] 2769 	mov	a,r5
      0008B3 30 E7 01         [24] 2770 	jnb	acc.7,00141$
      0008B6                       2771 00101$:
                                   2772 ;	ecen4330lab7.c:662: return;
      0008B6 22               [24] 2773 	ret
                                   2774 ;	ecen4330lab7.c:665: for (char i=0; i<6; i++ )
      0008B7                       2775 00141$:
      0008B7 74 01            [12] 2776 	mov	a,#0x01
      0008B9 B5*57 04         [24] 2777 	cjne	a,_drawChar_PARM_6,00186$
      0008BC 74 01            [12] 2778 	mov	a,#0x01
      0008BE 80 01            [24] 2779 	sjmp	00187$
      0008C0                       2780 00186$:
      0008C0 E4               [12] 2781 	clr	a
      0008C1                       2782 00187$:
      0008C1 FD               [12] 2783 	mov	r5,a
      0008C2 FC               [12] 2784 	mov	r4,a
      0008C3 E5*53            [12] 2785 	mov	a,_drawChar_PARM_4
      0008C5 B5*55 08         [24] 2786 	cjne	a,_drawChar_PARM_5,00188$
      0008C8 E5*54            [12] 2787 	mov	a,(_drawChar_PARM_4 + 1)
      0008CA B5*56 03         [24] 2788 	cjne	a,(_drawChar_PARM_5 + 1),00188$
      0008CD D3               [12] 2789 	setb	c
      0008CE 80 01            [24] 2790 	sjmp	00189$
      0008D0                       2791 00188$:
      0008D0 C3               [12] 2792 	clr	c
      0008D1                       2793 00189$:
      0008D1 92*00            [24] 2794 	mov	_drawChar_sloc0_1_0,c
      0008D3 7B 00            [12] 2795 	mov	r3,#0x00
      0008D5                       2796 00126$:
      0008D5 BB 06 00         [24] 2797 	cjne	r3,#0x06,00190$
      0008D8                       2798 00190$:
      0008D8 40 01            [24] 2799 	jc	00191$
      0008DA 22               [24] 2800 	ret
      0008DB                       2801 00191$:
                                   2802 ;	ecen4330lab7.c:669: if (i == 5)
      0008DB BB 05 05         [24] 2803 	cjne	r3,#0x05,00107$
                                   2804 ;	ecen4330lab7.c:671: line = 0x0;
      0008DE 75*5A 00         [24] 2805 	mov	_drawChar_line_196608_323,#0x00
      0008E1 80 30            [24] 2806 	sjmp	00140$
      0008E3                       2807 00107$:
                                   2808 ;	ecen4330lab7.c:675: line = pgm_read_byte(font+(c*5)+i);
      0008E3 85*52*00         [24] 2809 	mov	__mulint_PARM_2,_drawChar_PARM_3
      0008E6 75*01 00         [24] 2810 	mov	(__mulint_PARM_2 + 1),#0x00
      0008E9 90 00 05         [24] 2811 	mov	dptr,#0x0005
      0008EC C0 05            [24] 2812 	push	ar5
      0008EE C0 04            [24] 2813 	push	ar4
      0008F0 C0 03            [24] 2814 	push	ar3
      0008F2 12r00r00         [24] 2815 	lcall	__mulint
      0008F5 A8 82            [24] 2816 	mov	r0,dpl
      0008F7 A9 83            [24] 2817 	mov	r1,dph
      0008F9 D0 03            [24] 2818 	pop	ar3
      0008FB D0 04            [24] 2819 	pop	ar4
      0008FD D0 05            [24] 2820 	pop	ar5
      0008FF E8               [12] 2821 	mov	a,r0
      000900 24r00            [12] 2822 	add	a,#_font
      000902 F8               [12] 2823 	mov	r0,a
      000903 E9               [12] 2824 	mov	a,r1
      000904 34s00            [12] 2825 	addc	a,#(_font >> 8)
      000906 F9               [12] 2826 	mov	r1,a
      000907 EB               [12] 2827 	mov	a,r3
      000908 28               [12] 2828 	add	a,r0
      000909 F5 82            [12] 2829 	mov	dpl,a
      00090B E4               [12] 2830 	clr	a
      00090C 39               [12] 2831 	addc	a,r1
      00090D F5 83            [12] 2832 	mov	dph,a
      00090F E4               [12] 2833 	clr	a
      000910 93               [24] 2834 	movc	a,@a+dptr
      000911 F5*5A            [12] 2835 	mov	_drawChar_line_196608_323,a
                                   2836 ;	ecen4330lab7.c:678: for (char j = 0; j<8; j++)
      000913                       2837 00140$:
      000913 8B F0            [24] 2838 	mov	b,r3
      000915 E5*57            [12] 2839 	mov	a,_drawChar_PARM_6
      000917 A4               [48] 2840 	mul	ab
      000918 25*58            [12] 2841 	add	a,_drawChar_x_65536_319
      00091A F8               [12] 2842 	mov	r0,a
      00091B E5*59            [12] 2843 	mov	a,(_drawChar_x_65536_319 + 1)
      00091D 35 F0            [12] 2844 	addc	a,b
      00091F F9               [12] 2845 	mov	r1,a
      000920 88*5B            [24] 2846 	mov	_drawChar_sloc1_1_0,r0
      000922 89*5C            [24] 2847 	mov	(_drawChar_sloc1_1_0 + 1),r1
      000924 7A 00            [12] 2848 	mov	r2,#0x00
      000926                       2849 00123$:
      000926 BA 08 00         [24] 2850 	cjne	r2,#0x08,00194$
      000929                       2851 00194$:
      000929 40 03            [24] 2852 	jc	00195$
      00092B 02r0Ar50         [24] 2853 	ljmp	00127$
      00092E                       2854 00195$:
                                   2855 ;	ecen4330lab7.c:680: if (line & 0x1)
      00092E E5*5A            [12] 2856 	mov	a,_drawChar_line_196608_323
      000930 20 E0 03         [24] 2857 	jb	acc.0,00196$
      000933 02r09rBE         [24] 2858 	ljmp	00118$
      000936                       2859 00196$:
                                   2860 ;	ecen4330lab7.c:682: if (size == 1) // default size
      000936 ED               [12] 2861 	mov	a,r5
      000937 60 40            [24] 2862 	jz	00110$
                                   2863 ;	ecen4330lab7.c:684: drawPixel(x+i, y+j, color);
      000939 8B 06            [24] 2864 	mov	ar6,r3
      00093B 7F 00            [12] 2865 	mov	r7,#0x00
      00093D EE               [12] 2866 	mov	a,r6
      00093E 25*58            [12] 2867 	add	a,_drawChar_x_65536_319
      000940 F5 82            [12] 2868 	mov	dpl,a
      000942 EF               [12] 2869 	mov	a,r7
      000943 35*59            [12] 2870 	addc	a,(_drawChar_x_65536_319 + 1)
      000945 F5 83            [12] 2871 	mov	dph,a
      000947 8A 06            [24] 2872 	mov	ar6,r2
      000949 7F 00            [12] 2873 	mov	r7,#0x00
      00094B EE               [12] 2874 	mov	a,r6
      00094C 25*50            [12] 2875 	add	a,_drawChar_PARM_2
      00094E F5*44            [12] 2876 	mov	_drawPixel_PARM_2,a
      000950 EF               [12] 2877 	mov	a,r7
      000951 35*51            [12] 2878 	addc	a,(_drawChar_PARM_2 + 1)
      000953 F5*45            [12] 2879 	mov	(_drawPixel_PARM_2 + 1),a
      000955 85*53*46         [24] 2880 	mov	_drawPixel_PARM_3,_drawChar_PARM_4
      000958 85*54*47         [24] 2881 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_4 + 1)
      00095B C0 05            [24] 2882 	push	ar5
      00095D C0 04            [24] 2883 	push	ar4
      00095F C0 03            [24] 2884 	push	ar3
      000961 C0 02            [24] 2885 	push	ar2
      000963 C0 01            [24] 2886 	push	ar1
      000965 C0 00            [24] 2887 	push	ar0
      000967 12r06r35         [24] 2888 	lcall	_drawPixel
      00096A D0 00            [24] 2889 	pop	ar0
      00096C D0 01            [24] 2890 	pop	ar1
      00096E D0 02            [24] 2891 	pop	ar2
      000970 D0 03            [24] 2892 	pop	ar3
      000972 D0 04            [24] 2893 	pop	ar4
      000974 D0 05            [24] 2894 	pop	ar5
      000976 02r0Ar46         [24] 2895 	ljmp	00119$
      000979                       2896 00110$:
                                   2897 ;	ecen4330lab7.c:687: fillRect(x+(i*size), y+(j*size), size, size, color);
      000979 8A F0            [24] 2898 	mov	b,r2
      00097B E5*57            [12] 2899 	mov	a,_drawChar_PARM_6
      00097D A4               [48] 2900 	mul	ab
      00097E 25*50            [12] 2901 	add	a,_drawChar_PARM_2
      000980 F5*48            [12] 2902 	mov	_fillRect_PARM_2,a
      000982 E5*51            [12] 2903 	mov	a,(_drawChar_PARM_2 + 1)
      000984 35 F0            [12] 2904 	addc	a,b
      000986 F5*49            [12] 2905 	mov	(_fillRect_PARM_2 + 1),a
      000988 AE*57            [24] 2906 	mov	r6,_drawChar_PARM_6
      00098A 7F 00            [12] 2907 	mov	r7,#0x00
      00098C 8E*4A            [24] 2908 	mov	_fillRect_PARM_3,r6
      00098E 8F*4B            [24] 2909 	mov	(_fillRect_PARM_3 + 1),r7
      000990 8E*4C            [24] 2910 	mov	_fillRect_PARM_4,r6
      000992 8F*4D            [24] 2911 	mov	(_fillRect_PARM_4 + 1),r7
      000994 85*53*4E         [24] 2912 	mov	_fillRect_PARM_5,_drawChar_PARM_4
      000997 85*54*4F         [24] 2913 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_4 + 1)
      00099A 85*5B 82         [24] 2914 	mov	dpl,_drawChar_sloc1_1_0
      00099D 85*5C 83         [24] 2915 	mov	dph,(_drawChar_sloc1_1_0 + 1)
      0009A0 C0 05            [24] 2916 	push	ar5
      0009A2 C0 04            [24] 2917 	push	ar4
      0009A4 C0 03            [24] 2918 	push	ar3
      0009A6 C0 02            [24] 2919 	push	ar2
      0009A8 C0 01            [24] 2920 	push	ar1
      0009AA C0 00            [24] 2921 	push	ar0
      0009AC 12r06r86         [24] 2922 	lcall	_fillRect
      0009AF D0 00            [24] 2923 	pop	ar0
      0009B1 D0 01            [24] 2924 	pop	ar1
      0009B3 D0 02            [24] 2925 	pop	ar2
      0009B5 D0 03            [24] 2926 	pop	ar3
      0009B7 D0 04            [24] 2927 	pop	ar4
      0009B9 D0 05            [24] 2928 	pop	ar5
      0009BB 02r0Ar46         [24] 2929 	ljmp	00119$
      0009BE                       2930 00118$:
                                   2931 ;	ecen4330lab7.c:689: } else if (bg != color)
      0009BE 30*00 03         [24] 2932 	jnb	_drawChar_sloc0_1_0,00198$
      0009C1 02r0Ar46         [24] 2933 	ljmp	00119$
      0009C4                       2934 00198$:
                                   2935 ;	ecen4330lab7.c:691: if (size == 1) // default size
      0009C4 EC               [12] 2936 	mov	a,r4
      0009C5 60 3F            [24] 2937 	jz	00113$
                                   2938 ;	ecen4330lab7.c:693: drawPixel(x+i, y+j, bg);
      0009C7 8B 06            [24] 2939 	mov	ar6,r3
      0009C9 7F 00            [12] 2940 	mov	r7,#0x00
      0009CB EE               [12] 2941 	mov	a,r6
      0009CC 25*58            [12] 2942 	add	a,_drawChar_x_65536_319
      0009CE F5 82            [12] 2943 	mov	dpl,a
      0009D0 EF               [12] 2944 	mov	a,r7
      0009D1 35*59            [12] 2945 	addc	a,(_drawChar_x_65536_319 + 1)
      0009D3 F5 83            [12] 2946 	mov	dph,a
      0009D5 8A 06            [24] 2947 	mov	ar6,r2
      0009D7 7F 00            [12] 2948 	mov	r7,#0x00
      0009D9 EE               [12] 2949 	mov	a,r6
      0009DA 25*50            [12] 2950 	add	a,_drawChar_PARM_2
      0009DC F5*44            [12] 2951 	mov	_drawPixel_PARM_2,a
      0009DE EF               [12] 2952 	mov	a,r7
      0009DF 35*51            [12] 2953 	addc	a,(_drawChar_PARM_2 + 1)
      0009E1 F5*45            [12] 2954 	mov	(_drawPixel_PARM_2 + 1),a
      0009E3 85*55*46         [24] 2955 	mov	_drawPixel_PARM_3,_drawChar_PARM_5
      0009E6 85*56*47         [24] 2956 	mov	(_drawPixel_PARM_3 + 1),(_drawChar_PARM_5 + 1)
      0009E9 C0 05            [24] 2957 	push	ar5
      0009EB C0 04            [24] 2958 	push	ar4
      0009ED C0 03            [24] 2959 	push	ar3
      0009EF C0 02            [24] 2960 	push	ar2
      0009F1 C0 01            [24] 2961 	push	ar1
      0009F3 C0 00            [24] 2962 	push	ar0
      0009F5 12r06r35         [24] 2963 	lcall	_drawPixel
      0009F8 D0 00            [24] 2964 	pop	ar0
      0009FA D0 01            [24] 2965 	pop	ar1
      0009FC D0 02            [24] 2966 	pop	ar2
      0009FE D0 03            [24] 2967 	pop	ar3
      000A00 D0 04            [24] 2968 	pop	ar4
      000A02 D0 05            [24] 2969 	pop	ar5
      000A04 80 40            [24] 2970 	sjmp	00119$
      000A06                       2971 00113$:
                                   2972 ;	ecen4330lab7.c:697: fillRect(x+i*size, y+j*size, size, size, bg);
      000A06 8A F0            [24] 2973 	mov	b,r2
      000A08 E5*57            [12] 2974 	mov	a,_drawChar_PARM_6
      000A0A A4               [48] 2975 	mul	ab
      000A0B 25*50            [12] 2976 	add	a,_drawChar_PARM_2
      000A0D F5*48            [12] 2977 	mov	_fillRect_PARM_2,a
      000A0F E5*51            [12] 2978 	mov	a,(_drawChar_PARM_2 + 1)
      000A11 35 F0            [12] 2979 	addc	a,b
      000A13 F5*49            [12] 2980 	mov	(_fillRect_PARM_2 + 1),a
      000A15 AE*57            [24] 2981 	mov	r6,_drawChar_PARM_6
      000A17 7F 00            [12] 2982 	mov	r7,#0x00
      000A19 8E*4A            [24] 2983 	mov	_fillRect_PARM_3,r6
      000A1B 8F*4B            [24] 2984 	mov	(_fillRect_PARM_3 + 1),r7
      000A1D 8E*4C            [24] 2985 	mov	_fillRect_PARM_4,r6
      000A1F 8F*4D            [24] 2986 	mov	(_fillRect_PARM_4 + 1),r7
      000A21 85*55*4E         [24] 2987 	mov	_fillRect_PARM_5,_drawChar_PARM_5
      000A24 85*56*4F         [24] 2988 	mov	(_fillRect_PARM_5 + 1),(_drawChar_PARM_5 + 1)
      000A27 88 82            [24] 2989 	mov	dpl,r0
      000A29 89 83            [24] 2990 	mov	dph,r1
      000A2B C0 05            [24] 2991 	push	ar5
      000A2D C0 04            [24] 2992 	push	ar4
      000A2F C0 03            [24] 2993 	push	ar3
      000A31 C0 02            [24] 2994 	push	ar2
      000A33 C0 01            [24] 2995 	push	ar1
      000A35 C0 00            [24] 2996 	push	ar0
      000A37 12r06r86         [24] 2997 	lcall	_fillRect
      000A3A D0 00            [24] 2998 	pop	ar0
      000A3C D0 01            [24] 2999 	pop	ar1
      000A3E D0 02            [24] 3000 	pop	ar2
      000A40 D0 03            [24] 3001 	pop	ar3
      000A42 D0 04            [24] 3002 	pop	ar4
      000A44 D0 05            [24] 3003 	pop	ar5
      000A46                       3004 00119$:
                                   3005 ;	ecen4330lab7.c:701: line >>= 1;
      000A46 E5*5A            [12] 3006 	mov	a,_drawChar_line_196608_323
      000A48 C3               [12] 3007 	clr	c
      000A49 13               [12] 3008 	rrc	a
      000A4A F5*5A            [12] 3009 	mov	_drawChar_line_196608_323,a
                                   3010 ;	ecen4330lab7.c:678: for (char j = 0; j<8; j++)
      000A4C 0A               [12] 3011 	inc	r2
      000A4D 02r09r26         [24] 3012 	ljmp	00123$
      000A50                       3013 00127$:
                                   3014 ;	ecen4330lab7.c:665: for (char i=0; i<6; i++ )
      000A50 0B               [12] 3015 	inc	r3
                                   3016 ;	ecen4330lab7.c:705: }
      000A51 02r08rD5         [24] 3017 	ljmp	00126$
                                   3018 ;------------------------------------------------------------
                                   3019 ;Allocation info for local variables in function 'write'
                                   3020 ;------------------------------------------------------------
                                   3021 ;c                         Allocated to registers r7 
                                   3022 ;------------------------------------------------------------
                                   3023 ;	ecen4330lab7.c:713: void write(u8 c)
                                   3024 ;	-----------------------------------------
                                   3025 ;	 function write
                                   3026 ;	-----------------------------------------
      000A54                       3027 _write:
      000A54 AF 82            [24] 3028 	mov	r7,dpl
                                   3029 ;	ecen4330lab7.c:715: if (c == '\n')
      000A56 BF 0A 22         [24] 3030 	cjne	r7,#0x0a,00105$
                                   3031 ;	ecen4330lab7.c:717: cursor_y += textsize*8;
      000A59 AD*0C            [24] 3032 	mov	r5,_textsize
      000A5B E4               [12] 3033 	clr	a
      000A5C C4               [12] 3034 	swap	a
      000A5D 03               [12] 3035 	rr	a
      000A5E 54 F8            [12] 3036 	anl	a,#0xf8
      000A60 CD               [12] 3037 	xch	a,r5
      000A61 C4               [12] 3038 	swap	a
      000A62 03               [12] 3039 	rr	a
      000A63 CD               [12] 3040 	xch	a,r5
      000A64 6D               [12] 3041 	xrl	a,r5
      000A65 CD               [12] 3042 	xch	a,r5
      000A66 54 F8            [12] 3043 	anl	a,#0xf8
      000A68 CD               [12] 3044 	xch	a,r5
      000A69 6D               [12] 3045 	xrl	a,r5
      000A6A FE               [12] 3046 	mov	r6,a
      000A6B ED               [12] 3047 	mov	a,r5
      000A6C 25*0A            [12] 3048 	add	a,_cursor_y
      000A6E F5*0A            [12] 3049 	mov	_cursor_y,a
      000A70 EE               [12] 3050 	mov	a,r6
      000A71 35*0B            [12] 3051 	addc	a,(_cursor_y + 1)
      000A73 F5*0B            [12] 3052 	mov	(_cursor_y + 1),a
                                   3053 ;	ecen4330lab7.c:718: cursor_x  = 0;
      000A75 E4               [12] 3054 	clr	a
      000A76 F5*08            [12] 3055 	mov	_cursor_x,a
      000A78 F5*09            [12] 3056 	mov	(_cursor_x + 1),a
      000A7A 22               [24] 3057 	ret
      000A7B                       3058 00105$:
                                   3059 ;	ecen4330lab7.c:720: else if (c == '\r')
      000A7B BF 0D 01         [24] 3060 	cjne	r7,#0x0d,00119$
      000A7E 22               [24] 3061 	ret
      000A7F                       3062 00119$:
                                   3063 ;	ecen4330lab7.c:726: drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
      000A7F 85*0A*50         [24] 3064 	mov	_drawChar_PARM_2,_cursor_y
      000A82 85*0B*51         [24] 3065 	mov	(_drawChar_PARM_2 + 1),(_cursor_y + 1)
      000A85 8F*52            [24] 3066 	mov	_drawChar_PARM_3,r7
      000A87 85*0E*53         [24] 3067 	mov	_drawChar_PARM_4,_textcolor
      000A8A 85*0F*54         [24] 3068 	mov	(_drawChar_PARM_4 + 1),(_textcolor + 1)
      000A8D 85*10*55         [24] 3069 	mov	_drawChar_PARM_5,_textbgcolor
      000A90 85*11*56         [24] 3070 	mov	(_drawChar_PARM_5 + 1),(_textbgcolor + 1)
      000A93 85*0C*57         [24] 3071 	mov	_drawChar_PARM_6,_textsize
      000A96 85*08 82         [24] 3072 	mov	dpl,_cursor_x
      000A99 85*09 83         [24] 3073 	mov	dph,(_cursor_x + 1)
      000A9C 12r08r4A         [24] 3074 	lcall	_drawChar
                                   3075 ;	ecen4330lab7.c:727: cursor_x += textsize*6;
      000A9F 85*0C*00         [24] 3076 	mov	__mulint_PARM_2,_textsize
      000AA2 75*01 00         [24] 3077 	mov	(__mulint_PARM_2 + 1),#0x00
      000AA5 90 00 06         [24] 3078 	mov	dptr,#0x0006
      000AA8 12r00r00         [24] 3079 	lcall	__mulint
      000AAB AE 82            [24] 3080 	mov	r6,dpl
      000AAD AF 83            [24] 3081 	mov	r7,dph
      000AAF EE               [12] 3082 	mov	a,r6
      000AB0 25*08            [12] 3083 	add	a,_cursor_x
      000AB2 F5*08            [12] 3084 	mov	_cursor_x,a
      000AB4 EF               [12] 3085 	mov	a,r7
      000AB5 35*09            [12] 3086 	addc	a,(_cursor_x + 1)
      000AB7 F5*09            [12] 3087 	mov	(_cursor_x + 1),a
                                   3088 ;	ecen4330lab7.c:729: }
      000AB9 22               [24] 3089 	ret
                                   3090 ;------------------------------------------------------------
                                   3091 ;Allocation info for local variables in function 'LCD_string_write'
                                   3092 ;------------------------------------------------------------
                                   3093 ;str                       Allocated to registers r5 r6 r7 
                                   3094 ;i                         Allocated to registers r3 r4 
                                   3095 ;------------------------------------------------------------
                                   3096 ;	ecen4330lab7.c:737: void LCD_string_write(char *str)
                                   3097 ;	-----------------------------------------
                                   3098 ;	 function LCD_string_write
                                   3099 ;	-----------------------------------------
      000ABA                       3100 _LCD_string_write:
      000ABA AD 82            [24] 3101 	mov	r5,dpl
      000ABC AE 83            [24] 3102 	mov	r6,dph
      000ABE AF F0            [24] 3103 	mov	r7,b
                                   3104 ;	ecen4330lab7.c:740: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      000AC0 7B 00            [12] 3105 	mov	r3,#0x00
      000AC2 7C 00            [12] 3106 	mov	r4,#0x00
      000AC4                       3107 00103$:
      000AC4 EB               [12] 3108 	mov	a,r3
      000AC5 2D               [12] 3109 	add	a,r5
      000AC6 F8               [12] 3110 	mov	r0,a
      000AC7 EC               [12] 3111 	mov	a,r4
      000AC8 3E               [12] 3112 	addc	a,r6
      000AC9 F9               [12] 3113 	mov	r1,a
      000ACA 8F 02            [24] 3114 	mov	ar2,r7
      000ACC 88 82            [24] 3115 	mov	dpl,r0
      000ACE 89 83            [24] 3116 	mov	dph,r1
      000AD0 8A F0            [24] 3117 	mov	b,r2
      000AD2 12r00r00         [24] 3118 	lcall	__gptrget
      000AD5 FA               [12] 3119 	mov	r2,a
      000AD6 60 20            [24] 3120 	jz	00105$
                                   3121 ;	ecen4330lab7.c:742: write(str[i]);  /* Call transmit data function */
      000AD8 8A 82            [24] 3122 	mov	dpl,r2
      000ADA C0 07            [24] 3123 	push	ar7
      000ADC C0 06            [24] 3124 	push	ar6
      000ADE C0 05            [24] 3125 	push	ar5
      000AE0 C0 04            [24] 3126 	push	ar4
      000AE2 C0 03            [24] 3127 	push	ar3
      000AE4 12r0Ar54         [24] 3128 	lcall	_write
      000AE7 D0 03            [24] 3129 	pop	ar3
      000AE9 D0 04            [24] 3130 	pop	ar4
      000AEB D0 05            [24] 3131 	pop	ar5
      000AED D0 06            [24] 3132 	pop	ar6
      000AEF D0 07            [24] 3133 	pop	ar7
                                   3134 ;	ecen4330lab7.c:740: for(i=0;str[i]!=0;i++)  /* Send each char of string till the NULL */
      000AF1 0B               [12] 3135 	inc	r3
      000AF2 BB 00 CF         [24] 3136 	cjne	r3,#0x00,00103$
      000AF5 0C               [12] 3137 	inc	r4
      000AF6 80 CC            [24] 3138 	sjmp	00103$
      000AF8                       3139 00105$:
                                   3140 ;	ecen4330lab7.c:744: }
      000AF8 22               [24] 3141 	ret
                                   3142 ;------------------------------------------------------------
                                   3143 ;Allocation info for local variables in function 'keyDetect'
                                   3144 ;------------------------------------------------------------
                                   3145 ;	ecen4330lab7.c:764: unsigned char keyDetect(){
                                   3146 ;	-----------------------------------------
                                   3147 ;	 function keyDetect
                                   3148 ;	-----------------------------------------
      000AF9                       3149 _keyDetect:
                                   3150 ;	ecen4330lab7.c:765: __KEYPAD_PORT__=0xF0;           /*set port direction as input-output*/
      000AF9 75 90 F0         [24] 3151 	mov	_P1,#0xf0
                                   3152 ;	ecen4330lab7.c:766: received_flag = 0;
      000AFC 75*42 00         [24] 3153 	mov	_received_flag,#0x00
                                   3154 ;	ecen4330lab7.c:767: do
      000AFF                       3155 00102$:
                                   3156 ;	ecen4330lab7.c:769: __KEYPAD_PORT__ = 0xF0;
      000AFF 75 90 F0         [24] 3157 	mov	_P1,#0xf0
                                   3158 ;	ecen4330lab7.c:770: colloc = __KEYPAD_PORT__;
      000B02 85 90*00         [24] 3159 	mov	_colloc,_P1
                                   3160 ;	ecen4330lab7.c:771: colloc&= 0xF0;  /* mask port for column read only */
      000B05 53*00 F0         [24] 3161 	anl	_colloc,#0xf0
                                   3162 ;	ecen4330lab7.c:772: }while(colloc != 0xF0 && received_flag == 0);     /* read status of column */
      000B08 74 F0            [12] 3163 	mov	a,#0xf0
      000B0A B5*00 02         [24] 3164 	cjne	a,_colloc,00190$
      000B0D 80 04            [24] 3165 	sjmp	00106$
      000B0F                       3166 00190$:
      000B0F E5*42            [12] 3167 	mov	a,_received_flag
      000B11 60 EC            [24] 3168 	jz	00102$
                                   3169 ;	ecen4330lab7.c:776: do
      000B13                       3170 00106$:
                                   3171 ;	ecen4330lab7.c:779: rtcPrint();
      000B13 12r02r62         [24] 3172 	lcall	_rtcPrint
                                   3173 ;	ecen4330lab7.c:780: delay(10);  /* 20ms key debounce time */
      000B16 90 00 0A         [24] 3174 	mov	dptr,#0x000a
      000B19 12r01r1A         [24] 3175 	lcall	_delay
                                   3176 ;	ecen4330lab7.c:781: colloc = (__KEYPAD_PORT__ & 0xF0);  /* read status of column */
      000B1C E5 90            [12] 3177 	mov	a,_P1
      000B1E 54 F0            [12] 3178 	anl	a,#0xf0
      000B20 F5*00            [12] 3179 	mov	_colloc,a
                                   3180 ;	ecen4330lab7.c:782: }while(colloc == 0xF0 && received_flag == 0); /* check for any key press */
      000B22 74 F0            [12] 3181 	mov	a,#0xf0
      000B24 B5*00 04         [24] 3182 	cjne	a,_colloc,00108$
      000B27 E5*42            [12] 3183 	mov	a,_received_flag
      000B29 60 E8            [24] 3184 	jz	00106$
      000B2B                       3185 00108$:
                                   3186 ;	ecen4330lab7.c:784: delay(1);
      000B2B 90 00 01         [24] 3187 	mov	dptr,#0x0001
      000B2E 12r01r1A         [24] 3188 	lcall	_delay
                                   3189 ;	ecen4330lab7.c:785: colloc = (__KEYPAD_PORT__ & 0xF0);
      000B31 E5 90            [12] 3190 	mov	a,_P1
      000B33 54 F0            [12] 3191 	anl	a,#0xf0
      000B35 F5*00            [12] 3192 	mov	_colloc,a
                                   3193 ;	ecen4330lab7.c:786: }while(colloc == 0xF0 && received_flag == 0);
      000B37 74 F0            [12] 3194 	mov	a,#0xf0
      000B39 B5*00 04         [24] 3195 	cjne	a,_colloc,00112$
      000B3C E5*42            [12] 3196 	mov	a,_received_flag
      000B3E 60 D3            [24] 3197 	jz	00106$
      000B40                       3198 00112$:
                                   3199 ;	ecen4330lab7.c:788: if(received_flag == 0){
      000B40 E5*42            [12] 3200 	mov	a,_received_flag
      000B42 60 03            [24] 3201 	jz	00198$
      000B44 02r0Cr08         [24] 3202 	ljmp	00134$
      000B47                       3203 00198$:
                                   3204 ;	ecen4330lab7.c:789: while(1)
      000B47                       3205 00122$:
                                   3206 ;	ecen4330lab7.c:793: __KEYPAD_PORT__= 0xFE;                                          /* check for pressed key in 1st row */
      000B47 75 90 FE         [24] 3207 	mov	_P1,#0xfe
                                   3208 ;	ecen4330lab7.c:794: colloc = (__KEYPAD_PORT__ & 0xF0);
      000B4A E5 90            [12] 3209 	mov	a,_P1
      000B4C 54 F0            [12] 3210 	anl	a,#0xf0
      000B4E F5*00            [12] 3211 	mov	_colloc,a
                                   3212 ;	ecen4330lab7.c:795: if(colloc != 0xF0)
      000B50 74 F0            [12] 3213 	mov	a,#0xf0
      000B52 B5*00 02         [24] 3214 	cjne	a,_colloc,00199$
      000B55 80 05            [24] 3215 	sjmp	00114$
      000B57                       3216 00199$:
                                   3217 ;	ecen4330lab7.c:797: rowloc = 0;
      000B57 75*01 00         [24] 3218 	mov	_rowloc,#0x00
                                   3219 ;	ecen4330lab7.c:798: break;
      000B5A 80 3D            [24] 3220 	sjmp	00123$
      000B5C                       3221 00114$:
                                   3222 ;	ecen4330lab7.c:801: __KEYPAD_PORT__ = 0xFD;                                 /* check for pressed key in 2nd row */
      000B5C 75 90 FD         [24] 3223 	mov	_P1,#0xfd
                                   3224 ;	ecen4330lab7.c:802: colloc = (__KEYPAD_PORT__ & 0xF0);
      000B5F E5 90            [12] 3225 	mov	a,_P1
      000B61 54 F0            [12] 3226 	anl	a,#0xf0
      000B63 F5*00            [12] 3227 	mov	_colloc,a
                                   3228 ;	ecen4330lab7.c:803: if(colloc != 0xF0)
      000B65 74 F0            [12] 3229 	mov	a,#0xf0
      000B67 B5*00 02         [24] 3230 	cjne	a,_colloc,00200$
      000B6A 80 05            [24] 3231 	sjmp	00116$
      000B6C                       3232 00200$:
                                   3233 ;	ecen4330lab7.c:805: rowloc = 1;
      000B6C 75*01 01         [24] 3234 	mov	_rowloc,#0x01
                                   3235 ;	ecen4330lab7.c:806: break;
      000B6F 80 28            [24] 3236 	sjmp	00123$
      000B71                       3237 00116$:
                                   3238 ;	ecen4330lab7.c:809: __KEYPAD_PORT__ = 0xFB;         /* check for pressed key in 3rd row */
      000B71 75 90 FB         [24] 3239 	mov	_P1,#0xfb
                                   3240 ;	ecen4330lab7.c:810: colloc = (__KEYPAD_PORT__ & 0xF0);
      000B74 E5 90            [12] 3241 	mov	a,_P1
      000B76 54 F0            [12] 3242 	anl	a,#0xf0
      000B78 F5*00            [12] 3243 	mov	_colloc,a
                                   3244 ;	ecen4330lab7.c:811: if(colloc != 0xF0)
      000B7A 74 F0            [12] 3245 	mov	a,#0xf0
      000B7C B5*00 02         [24] 3246 	cjne	a,_colloc,00201$
      000B7F 80 05            [24] 3247 	sjmp	00118$
      000B81                       3248 00201$:
                                   3249 ;	ecen4330lab7.c:813: rowloc = 2;
      000B81 75*01 02         [24] 3250 	mov	_rowloc,#0x02
                                   3251 ;	ecen4330lab7.c:814: break;
      000B84 80 13            [24] 3252 	sjmp	00123$
      000B86                       3253 00118$:
                                   3254 ;	ecen4330lab7.c:817: __KEYPAD_PORT__ = 0xF7;         /* check for pressed key in 4th row */
      000B86 75 90 F7         [24] 3255 	mov	_P1,#0xf7
                                   3256 ;	ecen4330lab7.c:818: colloc = (__KEYPAD_PORT__ & 0xF0);
      000B89 E5 90            [12] 3257 	mov	a,_P1
      000B8B 54 F0            [12] 3258 	anl	a,#0xf0
      000B8D F5*00            [12] 3259 	mov	_colloc,a
                                   3260 ;	ecen4330lab7.c:819: if(colloc != 0xF0)
      000B8F 74 F0            [12] 3261 	mov	a,#0xf0
      000B91 B5*00 02         [24] 3262 	cjne	a,_colloc,00202$
      000B94 80 B1            [24] 3263 	sjmp	00122$
      000B96                       3264 00202$:
                                   3265 ;	ecen4330lab7.c:821: rowloc = 3;
      000B96 75*01 03         [24] 3266 	mov	_rowloc,#0x03
                                   3267 ;	ecen4330lab7.c:822: break;
      000B99                       3268 00123$:
                                   3269 ;	ecen4330lab7.c:826: if(colloc == 0xE0)
      000B99 74 E0            [12] 3270 	mov	a,#0xe0
      000B9B B5*00 15         [24] 3271 	cjne	a,_colloc,00131$
                                   3272 ;	ecen4330lab7.c:828: return(keypad[rowloc][0]);
      000B9E E5*01            [12] 3273 	mov	a,_rowloc
      000BA0 75 F0 04         [24] 3274 	mov	b,#0x04
      000BA3 A4               [48] 3275 	mul	ab
      000BA4 24rFB            [12] 3276 	add	a,#_keypad
      000BA6 F5 82            [12] 3277 	mov	dpl,a
      000BA8 74s04            [12] 3278 	mov	a,#(_keypad >> 8)
      000BAA 35 F0            [12] 3279 	addc	a,b
      000BAC F5 83            [12] 3280 	mov	dph,a
      000BAE E4               [12] 3281 	clr	a
      000BAF 93               [24] 3282 	movc	a,@a+dptr
      000BB0 F5 82            [12] 3283 	mov	dpl,a
      000BB2 22               [24] 3284 	ret
      000BB3                       3285 00131$:
                                   3286 ;	ecen4330lab7.c:830: else if(colloc == 0xD0)
      000BB3 74 D0            [12] 3287 	mov	a,#0xd0
      000BB5 B5*00 18         [24] 3288 	cjne	a,_colloc,00128$
                                   3289 ;	ecen4330lab7.c:832: return(keypad[rowloc][1]);
      000BB8 E5*01            [12] 3290 	mov	a,_rowloc
      000BBA 75 F0 04         [24] 3291 	mov	b,#0x04
      000BBD A4               [48] 3292 	mul	ab
      000BBE 24rFB            [12] 3293 	add	a,#_keypad
      000BC0 FE               [12] 3294 	mov	r6,a
      000BC1 74s04            [12] 3295 	mov	a,#(_keypad >> 8)
      000BC3 35 F0            [12] 3296 	addc	a,b
      000BC5 FF               [12] 3297 	mov	r7,a
      000BC6 8E 82            [24] 3298 	mov	dpl,r6
      000BC8 8F 83            [24] 3299 	mov	dph,r7
      000BCA A3               [24] 3300 	inc	dptr
      000BCB E4               [12] 3301 	clr	a
      000BCC 93               [24] 3302 	movc	a,@a+dptr
      000BCD F5 82            [12] 3303 	mov	dpl,a
      000BCF 22               [24] 3304 	ret
      000BD0                       3305 00128$:
                                   3306 ;	ecen4330lab7.c:834: else if(colloc == 0xB0)
      000BD0 74 B0            [12] 3307 	mov	a,#0xb0
      000BD2 B5*00 19         [24] 3308 	cjne	a,_colloc,00125$
                                   3309 ;	ecen4330lab7.c:836: return(keypad[rowloc][2]);
      000BD5 E5*01            [12] 3310 	mov	a,_rowloc
      000BD7 75 F0 04         [24] 3311 	mov	b,#0x04
      000BDA A4               [48] 3312 	mul	ab
      000BDB 24rFB            [12] 3313 	add	a,#_keypad
      000BDD FE               [12] 3314 	mov	r6,a
      000BDE 74s04            [12] 3315 	mov	a,#(_keypad >> 8)
      000BE0 35 F0            [12] 3316 	addc	a,b
      000BE2 FF               [12] 3317 	mov	r7,a
      000BE3 8E 82            [24] 3318 	mov	dpl,r6
      000BE5 8F 83            [24] 3319 	mov	dph,r7
      000BE7 A3               [24] 3320 	inc	dptr
      000BE8 A3               [24] 3321 	inc	dptr
      000BE9 E4               [12] 3322 	clr	a
      000BEA 93               [24] 3323 	movc	a,@a+dptr
      000BEB F5 82            [12] 3324 	mov	dpl,a
      000BED 22               [24] 3325 	ret
      000BEE                       3326 00125$:
                                   3327 ;	ecen4330lab7.c:840: return(keypad[rowloc][3]);
      000BEE E5*01            [12] 3328 	mov	a,_rowloc
      000BF0 75 F0 04         [24] 3329 	mov	b,#0x04
      000BF3 A4               [48] 3330 	mul	ab
      000BF4 24rFB            [12] 3331 	add	a,#_keypad
      000BF6 FE               [12] 3332 	mov	r6,a
      000BF7 74s04            [12] 3333 	mov	a,#(_keypad >> 8)
      000BF9 35 F0            [12] 3334 	addc	a,b
      000BFB FF               [12] 3335 	mov	r7,a
      000BFC 8E 82            [24] 3336 	mov	dpl,r6
      000BFE 8F 83            [24] 3337 	mov	dph,r7
      000C00 A3               [24] 3338 	inc	dptr
      000C01 A3               [24] 3339 	inc	dptr
      000C02 A3               [24] 3340 	inc	dptr
      000C03 E4               [12] 3341 	clr	a
      000C04 93               [24] 3342 	movc	a,@a+dptr
      000C05 F5 82            [12] 3343 	mov	dpl,a
      000C07 22               [24] 3344 	ret
      000C08                       3345 00134$:
                                   3346 ;	ecen4330lab7.c:844: received_flag = 0;
      000C08 75*42 00         [24] 3347 	mov	_received_flag,#0x00
                                   3348 ;	ecen4330lab7.c:845: return received_byte - 0x40;
      000C0B E5*41            [12] 3349 	mov	a,_received_byte
      000C0D 24 C0            [12] 3350 	add	a,#0xc0
      000C0F F5 82            [12] 3351 	mov	dpl,a
                                   3352 ;	ecen4330lab7.c:847: }
      000C11 22               [24] 3353 	ret
                                   3354 ;------------------------------------------------------------
                                   3355 ;Allocation info for local variables in function 'ASCIItoHEX'
                                   3356 ;------------------------------------------------------------
                                   3357 ;a                         Allocated to registers r7 
                                   3358 ;h                         Allocated to registers r7 
                                   3359 ;------------------------------------------------------------
                                   3360 ;	ecen4330lab7.c:855: unsigned char ASCIItoHEX(unsigned char a){
                                   3361 ;	-----------------------------------------
                                   3362 ;	 function ASCIItoHEX
                                   3363 ;	-----------------------------------------
      000C12                       3364 _ASCIItoHEX:
      000C12 AF 82            [24] 3365 	mov	r7,dpl
                                   3366 ;	ecen4330lab7.c:858: switch (a)
      000C14 BF 30 00         [24] 3367 	cjne	r7,#0x30,00129$
      000C17                       3368 00129$:
      000C17 50 03            [24] 3369 	jnc	00130$
      000C19 02r0CrA3         [24] 3370 	ljmp	00117$
      000C1C                       3371 00130$:
      000C1C EF               [12] 3372 	mov	a,r7
      000C1D 24 B9            [12] 3373 	add	a,#0xff - 0x46
      000C1F 50 03            [24] 3374 	jnc	00131$
      000C21 02r0CrA3         [24] 3375 	ljmp	00117$
      000C24                       3376 00131$:
      000C24 EF               [12] 3377 	mov	a,r7
      000C25 24 D0            [12] 3378 	add	a,#0xd0
      000C27 FF               [12] 3379 	mov	r7,a
      000C28 24 0A            [12] 3380 	add	a,#(00132$-3-.)
      000C2A 83               [24] 3381 	movc	a,@a+pc
      000C2B F5 82            [12] 3382 	mov	dpl,a
      000C2D EF               [12] 3383 	mov	a,r7
      000C2E 24 1B            [12] 3384 	add	a,#(00133$-3-.)
      000C30 83               [24] 3385 	movc	a,@a+pc
      000C31 F5 83            [12] 3386 	mov	dph,a
      000C33 E4               [12] 3387 	clr	a
      000C34 73               [24] 3388 	jmp	@a+dptr
      000C35                       3389 00132$:
      000C35r63                    3390 	.db	00101$
      000C36r67                    3391 	.db	00102$
      000C37r6B                    3392 	.db	00103$
      000C38r6F                    3393 	.db	00104$
      000C39r73                    3394 	.db	00105$
      000C3Ar77                    3395 	.db	00106$
      000C3Br7B                    3396 	.db	00107$
      000C3Cr7F                    3397 	.db	00108$
      000C3Dr83                    3398 	.db	00109$
      000C3Er87                    3399 	.db	00110$
      000C3FrA3                    3400 	.db	00117$
      000C40rA3                    3401 	.db	00117$
      000C41rA3                    3402 	.db	00117$
      000C42rA3                    3403 	.db	00117$
      000C43rA3                    3404 	.db	00117$
      000C44rA3                    3405 	.db	00117$
      000C45rA3                    3406 	.db	00117$
      000C46r8B                    3407 	.db	00111$
      000C47r8F                    3408 	.db	00112$
      000C48r93                    3409 	.db	00113$
      000C49r97                    3410 	.db	00114$
      000C4Ar9B                    3411 	.db	00115$
      000C4Br9F                    3412 	.db	00116$
      000C4C                       3413 00133$:
      000C4Cs0C                    3414 	.db	00101$>>8
      000C4Ds0C                    3415 	.db	00102$>>8
      000C4Es0C                    3416 	.db	00103$>>8
      000C4Fs0C                    3417 	.db	00104$>>8
      000C50s0C                    3418 	.db	00105$>>8
      000C51s0C                    3419 	.db	00106$>>8
      000C52s0C                    3420 	.db	00107$>>8
      000C53s0C                    3421 	.db	00108$>>8
      000C54s0C                    3422 	.db	00109$>>8
      000C55s0C                    3423 	.db	00110$>>8
      000C56s0C                    3424 	.db	00117$>>8
      000C57s0C                    3425 	.db	00117$>>8
      000C58s0C                    3426 	.db	00117$>>8
      000C59s0C                    3427 	.db	00117$>>8
      000C5As0C                    3428 	.db	00117$>>8
      000C5Bs0C                    3429 	.db	00117$>>8
      000C5Cs0C                    3430 	.db	00117$>>8
      000C5Ds0C                    3431 	.db	00111$>>8
      000C5Es0C                    3432 	.db	00112$>>8
      000C5Fs0C                    3433 	.db	00113$>>8
      000C60s0C                    3434 	.db	00114$>>8
      000C61s0C                    3435 	.db	00115$>>8
      000C62s0C                    3436 	.db	00116$>>8
                                   3437 ;	ecen4330lab7.c:860: case '0':
      000C63                       3438 00101$:
                                   3439 ;	ecen4330lab7.c:861: h = 0x00;
      000C63 7F 00            [12] 3440 	mov	r7,#0x00
                                   3441 ;	ecen4330lab7.c:862: break;
                                   3442 ;	ecen4330lab7.c:863: case '1':
      000C65 80 3E            [24] 3443 	sjmp	00118$
      000C67                       3444 00102$:
                                   3445 ;	ecen4330lab7.c:864: h = 0x01;
      000C67 7F 01            [12] 3446 	mov	r7,#0x01
                                   3447 ;	ecen4330lab7.c:865: break;
                                   3448 ;	ecen4330lab7.c:866: case '2':
      000C69 80 3A            [24] 3449 	sjmp	00118$
      000C6B                       3450 00103$:
                                   3451 ;	ecen4330lab7.c:867: h = 0x02;
      000C6B 7F 02            [12] 3452 	mov	r7,#0x02
                                   3453 ;	ecen4330lab7.c:868: break;
                                   3454 ;	ecen4330lab7.c:869: case '3':
      000C6D 80 36            [24] 3455 	sjmp	00118$
      000C6F                       3456 00104$:
                                   3457 ;	ecen4330lab7.c:870: h = 0x03;
      000C6F 7F 03            [12] 3458 	mov	r7,#0x03
                                   3459 ;	ecen4330lab7.c:871: break;
                                   3460 ;	ecen4330lab7.c:872: case '4':
      000C71 80 32            [24] 3461 	sjmp	00118$
      000C73                       3462 00105$:
                                   3463 ;	ecen4330lab7.c:873: h = 0x04;
      000C73 7F 04            [12] 3464 	mov	r7,#0x04
                                   3465 ;	ecen4330lab7.c:874: break;
                                   3466 ;	ecen4330lab7.c:875: case '5':
      000C75 80 2E            [24] 3467 	sjmp	00118$
      000C77                       3468 00106$:
                                   3469 ;	ecen4330lab7.c:876: h = 0x05;
      000C77 7F 05            [12] 3470 	mov	r7,#0x05
                                   3471 ;	ecen4330lab7.c:877: break;
                                   3472 ;	ecen4330lab7.c:878: case '6':
      000C79 80 2A            [24] 3473 	sjmp	00118$
      000C7B                       3474 00107$:
                                   3475 ;	ecen4330lab7.c:879: h = 0x06;
      000C7B 7F 06            [12] 3476 	mov	r7,#0x06
                                   3477 ;	ecen4330lab7.c:880: break;
                                   3478 ;	ecen4330lab7.c:881: case '7':
      000C7D 80 26            [24] 3479 	sjmp	00118$
      000C7F                       3480 00108$:
                                   3481 ;	ecen4330lab7.c:882: h = 0x07;
      000C7F 7F 07            [12] 3482 	mov	r7,#0x07
                                   3483 ;	ecen4330lab7.c:883: break;
                                   3484 ;	ecen4330lab7.c:884: case '8':
      000C81 80 22            [24] 3485 	sjmp	00118$
      000C83                       3486 00109$:
                                   3487 ;	ecen4330lab7.c:885: h = 0x08;
      000C83 7F 08            [12] 3488 	mov	r7,#0x08
                                   3489 ;	ecen4330lab7.c:886: break;
                                   3490 ;	ecen4330lab7.c:887: case '9':
      000C85 80 1E            [24] 3491 	sjmp	00118$
      000C87                       3492 00110$:
                                   3493 ;	ecen4330lab7.c:888: h = 0x09;
      000C87 7F 09            [12] 3494 	mov	r7,#0x09
                                   3495 ;	ecen4330lab7.c:889: break;
                                   3496 ;	ecen4330lab7.c:890: case 'A':
      000C89 80 1A            [24] 3497 	sjmp	00118$
      000C8B                       3498 00111$:
                                   3499 ;	ecen4330lab7.c:891: h = 0x0A;
      000C8B 7F 0A            [12] 3500 	mov	r7,#0x0a
                                   3501 ;	ecen4330lab7.c:892: break;
                                   3502 ;	ecen4330lab7.c:893: case 'B':
      000C8D 80 16            [24] 3503 	sjmp	00118$
      000C8F                       3504 00112$:
                                   3505 ;	ecen4330lab7.c:894: h = 0x0B;
      000C8F 7F 0B            [12] 3506 	mov	r7,#0x0b
                                   3507 ;	ecen4330lab7.c:895: break;
                                   3508 ;	ecen4330lab7.c:896: case 'C':
      000C91 80 12            [24] 3509 	sjmp	00118$
      000C93                       3510 00113$:
                                   3511 ;	ecen4330lab7.c:897: h = 0x0C;
      000C93 7F 0C            [12] 3512 	mov	r7,#0x0c
                                   3513 ;	ecen4330lab7.c:898: break;
                                   3514 ;	ecen4330lab7.c:899: case 'D':
      000C95 80 0E            [24] 3515 	sjmp	00118$
      000C97                       3516 00114$:
                                   3517 ;	ecen4330lab7.c:900: h = 0x0D;
      000C97 7F 0D            [12] 3518 	mov	r7,#0x0d
                                   3519 ;	ecen4330lab7.c:901: break;
                                   3520 ;	ecen4330lab7.c:902: case 'E':
      000C99 80 0A            [24] 3521 	sjmp	00118$
      000C9B                       3522 00115$:
                                   3523 ;	ecen4330lab7.c:903: h = 0x0E;
      000C9B 7F 0E            [12] 3524 	mov	r7,#0x0e
                                   3525 ;	ecen4330lab7.c:904: break;
                                   3526 ;	ecen4330lab7.c:905: case 'F':
      000C9D 80 06            [24] 3527 	sjmp	00118$
      000C9F                       3528 00116$:
                                   3529 ;	ecen4330lab7.c:906: h = 0x0F;
      000C9F 7F 0F            [12] 3530 	mov	r7,#0x0f
                                   3531 ;	ecen4330lab7.c:907: break;
                                   3532 ;	ecen4330lab7.c:908: default:
      000CA1 80 02            [24] 3533 	sjmp	00118$
      000CA3                       3534 00117$:
                                   3535 ;	ecen4330lab7.c:909: h = 0x00;
      000CA3 7F 00            [12] 3536 	mov	r7,#0x00
                                   3537 ;	ecen4330lab7.c:911: }
      000CA5                       3538 00118$:
                                   3539 ;	ecen4330lab7.c:912: return h;
      000CA5 8F 82            [24] 3540 	mov	dpl,r7
                                   3541 ;	ecen4330lab7.c:913: }
      000CA7 22               [24] 3542 	ret
                                   3543 ;------------------------------------------------------------
                                   3544 ;Allocation info for local variables in function 'HEXtoASCII'
                                   3545 ;------------------------------------------------------------
                                   3546 ;h                         Allocated to registers r6 r7 
                                   3547 ;a                         Allocated to registers r7 
                                   3548 ;------------------------------------------------------------
                                   3549 ;	ecen4330lab7.c:920: unsigned char HEXtoASCII(unsigned int h){
                                   3550 ;	-----------------------------------------
                                   3551 ;	 function HEXtoASCII
                                   3552 ;	-----------------------------------------
      000CA8                       3553 _HEXtoASCII:
      000CA8 AE 82            [24] 3554 	mov	r6,dpl
      000CAA AF 83            [24] 3555 	mov	r7,dph
                                   3556 ;	ecen4330lab7.c:923: switch (h)
      000CAC C3               [12] 3557 	clr	c
      000CAD 74 0F            [12] 3558 	mov	a,#0x0f
      000CAF 9E               [12] 3559 	subb	a,r6
      000CB0 E4               [12] 3560 	clr	a
      000CB1 9F               [12] 3561 	subb	a,r7
      000CB2 50 03            [24] 3562 	jnc	00125$
      000CB4 02r0Dr25         [24] 3563 	ljmp	00117$
      000CB7                       3564 00125$:
      000CB7 EE               [12] 3565 	mov	a,r6
      000CB8 24 0A            [12] 3566 	add	a,#(00126$-3-.)
      000CBA 83               [24] 3567 	movc	a,@a+pc
      000CBB F5 82            [12] 3568 	mov	dpl,a
      000CBD EE               [12] 3569 	mov	a,r6
      000CBE 24 14            [12] 3570 	add	a,#(00127$-3-.)
      000CC0 83               [24] 3571 	movc	a,@a+pc
      000CC1 F5 83            [12] 3572 	mov	dph,a
      000CC3 E4               [12] 3573 	clr	a
      000CC4 73               [24] 3574 	jmp	@a+dptr
      000CC5                       3575 00126$:
      000CC5rE5                    3576 	.db	00101$
      000CC6rE9                    3577 	.db	00102$
      000CC7rED                    3578 	.db	00103$
      000CC8rF1                    3579 	.db	00104$
      000CC9rF5                    3580 	.db	00105$
      000CCArF9                    3581 	.db	00106$
      000CCBrFD                    3582 	.db	00107$
      000CCCr01                    3583 	.db	00108$
      000CCDr05                    3584 	.db	00109$
      000CCEr09                    3585 	.db	00110$
      000CCFr0D                    3586 	.db	00111$
      000CD0r11                    3587 	.db	00112$
      000CD1r15                    3588 	.db	00113$
      000CD2r19                    3589 	.db	00114$
      000CD3r1D                    3590 	.db	00115$
      000CD4r21                    3591 	.db	00116$
      000CD5                       3592 00127$:
      000CD5s0C                    3593 	.db	00101$>>8
      000CD6s0C                    3594 	.db	00102$>>8
      000CD7s0C                    3595 	.db	00103$>>8
      000CD8s0C                    3596 	.db	00104$>>8
      000CD9s0C                    3597 	.db	00105$>>8
      000CDAs0C                    3598 	.db	00106$>>8
      000CDBs0C                    3599 	.db	00107$>>8
      000CDCs0D                    3600 	.db	00108$>>8
      000CDDs0D                    3601 	.db	00109$>>8
      000CDEs0D                    3602 	.db	00110$>>8
      000CDFs0D                    3603 	.db	00111$>>8
      000CE0s0D                    3604 	.db	00112$>>8
      000CE1s0D                    3605 	.db	00113$>>8
      000CE2s0D                    3606 	.db	00114$>>8
      000CE3s0D                    3607 	.db	00115$>>8
      000CE4s0D                    3608 	.db	00116$>>8
                                   3609 ;	ecen4330lab7.c:925: case 0x0000:
      000CE5                       3610 00101$:
                                   3611 ;	ecen4330lab7.c:926: a = '0';
      000CE5 7F 30            [12] 3612 	mov	r7,#0x30
                                   3613 ;	ecen4330lab7.c:927: break;
                                   3614 ;	ecen4330lab7.c:928: case 0x0001:
      000CE7 80 3E            [24] 3615 	sjmp	00118$
      000CE9                       3616 00102$:
                                   3617 ;	ecen4330lab7.c:929: a = '1';
      000CE9 7F 31            [12] 3618 	mov	r7,#0x31
                                   3619 ;	ecen4330lab7.c:930: break;
                                   3620 ;	ecen4330lab7.c:931: case 0x0002:
      000CEB 80 3A            [24] 3621 	sjmp	00118$
      000CED                       3622 00103$:
                                   3623 ;	ecen4330lab7.c:932: a = '2';
      000CED 7F 32            [12] 3624 	mov	r7,#0x32
                                   3625 ;	ecen4330lab7.c:933: break;
                                   3626 ;	ecen4330lab7.c:934: case 0x0003:
      000CEF 80 36            [24] 3627 	sjmp	00118$
      000CF1                       3628 00104$:
                                   3629 ;	ecen4330lab7.c:935: a = '3';
      000CF1 7F 33            [12] 3630 	mov	r7,#0x33
                                   3631 ;	ecen4330lab7.c:936: break;
                                   3632 ;	ecen4330lab7.c:937: case 0x0004:
      000CF3 80 32            [24] 3633 	sjmp	00118$
      000CF5                       3634 00105$:
                                   3635 ;	ecen4330lab7.c:938: a = '4';
      000CF5 7F 34            [12] 3636 	mov	r7,#0x34
                                   3637 ;	ecen4330lab7.c:939: break;
                                   3638 ;	ecen4330lab7.c:940: case 0x0005:
      000CF7 80 2E            [24] 3639 	sjmp	00118$
      000CF9                       3640 00106$:
                                   3641 ;	ecen4330lab7.c:941: a = '5';
      000CF9 7F 35            [12] 3642 	mov	r7,#0x35
                                   3643 ;	ecen4330lab7.c:942: break;
                                   3644 ;	ecen4330lab7.c:943: case 0x0006:
      000CFB 80 2A            [24] 3645 	sjmp	00118$
      000CFD                       3646 00107$:
                                   3647 ;	ecen4330lab7.c:944: a = '6';
      000CFD 7F 36            [12] 3648 	mov	r7,#0x36
                                   3649 ;	ecen4330lab7.c:945: break;
                                   3650 ;	ecen4330lab7.c:946: case 0x0007:
      000CFF 80 26            [24] 3651 	sjmp	00118$
      000D01                       3652 00108$:
                                   3653 ;	ecen4330lab7.c:947: a = '7';
      000D01 7F 37            [12] 3654 	mov	r7,#0x37
                                   3655 ;	ecen4330lab7.c:948: break;
                                   3656 ;	ecen4330lab7.c:949: case 0x0008:
      000D03 80 22            [24] 3657 	sjmp	00118$
      000D05                       3658 00109$:
                                   3659 ;	ecen4330lab7.c:950: a = '8';
      000D05 7F 38            [12] 3660 	mov	r7,#0x38
                                   3661 ;	ecen4330lab7.c:951: break;
                                   3662 ;	ecen4330lab7.c:952: case 0x0009:
      000D07 80 1E            [24] 3663 	sjmp	00118$
      000D09                       3664 00110$:
                                   3665 ;	ecen4330lab7.c:953: a = '9';
      000D09 7F 39            [12] 3666 	mov	r7,#0x39
                                   3667 ;	ecen4330lab7.c:954: break;
                                   3668 ;	ecen4330lab7.c:955: case 0x000A:
      000D0B 80 1A            [24] 3669 	sjmp	00118$
      000D0D                       3670 00111$:
                                   3671 ;	ecen4330lab7.c:956: a = 'A';
      000D0D 7F 41            [12] 3672 	mov	r7,#0x41
                                   3673 ;	ecen4330lab7.c:957: break;
                                   3674 ;	ecen4330lab7.c:958: case 0x000B:
      000D0F 80 16            [24] 3675 	sjmp	00118$
      000D11                       3676 00112$:
                                   3677 ;	ecen4330lab7.c:959: a = 'B';
      000D11 7F 42            [12] 3678 	mov	r7,#0x42
                                   3679 ;	ecen4330lab7.c:960: break;
                                   3680 ;	ecen4330lab7.c:961: case 0x000C:
      000D13 80 12            [24] 3681 	sjmp	00118$
      000D15                       3682 00113$:
                                   3683 ;	ecen4330lab7.c:962: a = 'C';
      000D15 7F 43            [12] 3684 	mov	r7,#0x43
                                   3685 ;	ecen4330lab7.c:963: break;
                                   3686 ;	ecen4330lab7.c:964: case 0x000D:
      000D17 80 0E            [24] 3687 	sjmp	00118$
      000D19                       3688 00114$:
                                   3689 ;	ecen4330lab7.c:965: a = 'D';
      000D19 7F 44            [12] 3690 	mov	r7,#0x44
                                   3691 ;	ecen4330lab7.c:966: break;
                                   3692 ;	ecen4330lab7.c:967: case 0x000E:
      000D1B 80 0A            [24] 3693 	sjmp	00118$
      000D1D                       3694 00115$:
                                   3695 ;	ecen4330lab7.c:968: a = 'E';
      000D1D 7F 45            [12] 3696 	mov	r7,#0x45
                                   3697 ;	ecen4330lab7.c:969: break;
                                   3698 ;	ecen4330lab7.c:970: case 0x000F:
      000D1F 80 06            [24] 3699 	sjmp	00118$
      000D21                       3700 00116$:
                                   3701 ;	ecen4330lab7.c:971: a = 'F';
      000D21 7F 46            [12] 3702 	mov	r7,#0x46
                                   3703 ;	ecen4330lab7.c:972: break;
                                   3704 ;	ecen4330lab7.c:973: default:
      000D23 80 02            [24] 3705 	sjmp	00118$
      000D25                       3706 00117$:
                                   3707 ;	ecen4330lab7.c:974: a = '0';
      000D25 7F 30            [12] 3708 	mov	r7,#0x30
                                   3709 ;	ecen4330lab7.c:976: }
      000D27                       3710 00118$:
                                   3711 ;	ecen4330lab7.c:977: return a;
      000D27 8F 82            [24] 3712 	mov	dpl,r7
                                   3713 ;	ecen4330lab7.c:978: }
      000D29 22               [24] 3714 	ret
                                   3715 ;------------------------------------------------------------
                                   3716 ;Allocation info for local variables in function 'HEXtoASCII_8write'
                                   3717 ;------------------------------------------------------------
                                   3718 ;h                         Allocated to registers r7 
                                   3719 ;------------------------------------------------------------
                                   3720 ;	ecen4330lab7.c:986: void HEXtoASCII_8write(unsigned char h){
                                   3721 ;	-----------------------------------------
                                   3722 ;	 function HEXtoASCII_8write
                                   3723 ;	-----------------------------------------
      000D2A                       3724 _HEXtoASCII_8write:
                                   3725 ;	ecen4330lab7.c:989: byte = (h >> 4);
      000D2A E5 82            [12] 3726 	mov	a,dpl
      000D2C FF               [12] 3727 	mov	r7,a
      000D2D C4               [12] 3728 	swap	a
      000D2E 54 0F            [12] 3729 	anl	a,#0x0f
      000D30 FE               [12] 3730 	mov	r6,a
      000D31 8E*2D            [24] 3731 	mov	_byte,r6
      000D33 75*2E 00         [24] 3732 	mov	(_byte + 1),#0x00
                                   3733 ;	ecen4330lab7.c:990: byte &= 0x0F;
      000D36 53*2D 0F         [24] 3734 	anl	_byte,#0x0f
      000D39 75*2E 00         [24] 3735 	mov	(_byte + 1),#0x00
                                   3736 ;	ecen4330lab7.c:991: ASCII = HEXtoASCII(byte);
      000D3C 85*2D 82         [24] 3737 	mov	dpl,_byte
      000D3F 85*2E 83         [24] 3738 	mov	dph,(_byte + 1)
      000D42 C0 07            [24] 3739 	push	ar7
      000D44 12r0CrA8         [24] 3740 	lcall	_HEXtoASCII
                                   3741 ;	ecen4330lab7.c:992: write(ASCII);
      000D47 85 82*31         [24] 3742 	mov  _ASCII,dpl
      000D4A 12r0Ar54         [24] 3743 	lcall	_write
      000D4D D0 07            [24] 3744 	pop	ar7
                                   3745 ;	ecen4330lab7.c:995: byte = (h & 0x0F);
      000D4F 7E 00            [12] 3746 	mov	r6,#0x00
      000D51 74 0F            [12] 3747 	mov	a,#0x0f
      000D53 5F               [12] 3748 	anl	a,r7
      000D54 F5*2D            [12] 3749 	mov	_byte,a
                                   3750 ;	1-genFromRTrack replaced	mov	(_byte + 1),#0x00
      000D56 8E*2E            [24] 3751 	mov	(_byte + 1),r6
                                   3752 ;	ecen4330lab7.c:996: ASCII = HEXtoASCII(byte);
      000D58 85*2D 82         [24] 3753 	mov	dpl,_byte
      000D5B 85*2E 83         [24] 3754 	mov	dph,(_byte + 1)
      000D5E 12r0CrA8         [24] 3755 	lcall	_HEXtoASCII
                                   3756 ;	ecen4330lab7.c:997: write(ASCII);
      000D61 85 82*31         [24] 3757 	mov  _ASCII,dpl
                                   3758 ;	ecen4330lab7.c:998: }
      000D64 02r0Ar54         [24] 3759 	ljmp	_write
                                   3760 ;------------------------------------------------------------
                                   3761 ;Allocation info for local variables in function 'HEXtoASCII_16write'
                                   3762 ;------------------------------------------------------------
                                   3763 ;h                         Allocated to registers r6 r7 
                                   3764 ;------------------------------------------------------------
                                   3765 ;	ecen4330lab7.c:1006: void HEXtoASCII_16write(unsigned int h){
                                   3766 ;	-----------------------------------------
                                   3767 ;	 function HEXtoASCII_16write
                                   3768 ;	-----------------------------------------
      000D67                       3769 _HEXtoASCII_16write:
      000D67 AE 82            [24] 3770 	mov	r6,dpl
                                   3771 ;	ecen4330lab7.c:1009: byte = (h >> 12);
      000D69 E5 83            [12] 3772 	mov	a,dph
      000D6B FF               [12] 3773 	mov	r7,a
      000D6C C4               [12] 3774 	swap	a
      000D6D 54 0F            [12] 3775 	anl	a,#0x0f
      000D6F F5*2D            [12] 3776 	mov	_byte,a
      000D71 75*2E 00         [24] 3777 	mov	(_byte + 1),#0x00
                                   3778 ;	ecen4330lab7.c:1010: byte &= 0x000F;
      000D74 53*2D 0F         [24] 3779 	anl	_byte,#0x0f
      000D77 75*2E 00         [24] 3780 	mov	(_byte + 1),#0x00
                                   3781 ;	ecen4330lab7.c:1011: ASCII = HEXtoASCII(byte);
      000D7A 85*2D 82         [24] 3782 	mov	dpl,_byte
      000D7D 85*2E 83         [24] 3783 	mov	dph,(_byte + 1)
      000D80 C0 07            [24] 3784 	push	ar7
      000D82 C0 06            [24] 3785 	push	ar6
      000D84 12r0CrA8         [24] 3786 	lcall	_HEXtoASCII
      000D87 85 82*31         [24] 3787 	mov	_ASCII,dpl
                                   3788 ;	ecen4330lab7.c:1012: LCD_string_write("0x");
      000D8A 90r05r38         [24] 3789 	mov	dptr,#___str_4
      000D8D 75 F0 80         [24] 3790 	mov	b,#0x80
      000D90 12r0ArBA         [24] 3791 	lcall	_LCD_string_write
                                   3792 ;	ecen4330lab7.c:1013: write(ASCII);
      000D93 85*31 82         [24] 3793 	mov	dpl,_ASCII
      000D96 12r0Ar54         [24] 3794 	lcall	_write
      000D99 D0 06            [24] 3795 	pop	ar6
      000D9B D0 07            [24] 3796 	pop	ar7
                                   3797 ;	ecen4330lab7.c:1016: byte = (h >> 8);
      000D9D 8F*2D            [24] 3798 	mov	_byte,r7
      000D9F 75*2E 00         [24] 3799 	mov	(_byte + 1),#0x00
                                   3800 ;	ecen4330lab7.c:1017: byte &= 0x000F;
      000DA2 53*2D 0F         [24] 3801 	anl	_byte,#0x0f
      000DA5 75*2E 00         [24] 3802 	mov	(_byte + 1),#0x00
                                   3803 ;	ecen4330lab7.c:1018: ASCII = HEXtoASCII(byte);
      000DA8 85*2D 82         [24] 3804 	mov	dpl,_byte
      000DAB 85*2E 83         [24] 3805 	mov	dph,(_byte + 1)
      000DAE C0 07            [24] 3806 	push	ar7
      000DB0 C0 06            [24] 3807 	push	ar6
      000DB2 12r0CrA8         [24] 3808 	lcall	_HEXtoASCII
                                   3809 ;	ecen4330lab7.c:1019: write(ASCII);
      000DB5 85 82*31         [24] 3810 	mov  _ASCII,dpl
      000DB8 12r0Ar54         [24] 3811 	lcall	_write
      000DBB D0 06            [24] 3812 	pop	ar6
      000DBD D0 07            [24] 3813 	pop	ar7
                                   3814 ;	ecen4330lab7.c:1022: byte = (h >> 4);
      000DBF 8E*2D            [24] 3815 	mov	_byte,r6
      000DC1 EF               [12] 3816 	mov	a,r7
      000DC2 C4               [12] 3817 	swap	a
      000DC3 C5*2D            [12] 3818 	xch	a,_byte
      000DC5 C4               [12] 3819 	swap	a
      000DC6 54 0F            [12] 3820 	anl	a,#0x0f
      000DC8 65*2D            [12] 3821 	xrl	a,_byte
      000DCA C5*2D            [12] 3822 	xch	a,_byte
      000DCC 54 0F            [12] 3823 	anl	a,#0x0f
      000DCE C5*2D            [12] 3824 	xch	a,_byte
      000DD0 65*2D            [12] 3825 	xrl	a,_byte
      000DD2 C5*2D            [12] 3826 	xch	a,_byte
      000DD4 F5*2E            [12] 3827 	mov	(_byte + 1),a
                                   3828 ;	ecen4330lab7.c:1023: byte &= 0x000F;
      000DD6 53*2D 0F         [24] 3829 	anl	_byte,#0x0f
      000DD9 75*2E 00         [24] 3830 	mov	(_byte + 1),#0x00
                                   3831 ;	ecen4330lab7.c:1024: ASCII = HEXtoASCII(byte);
      000DDC 85*2D 82         [24] 3832 	mov	dpl,_byte
      000DDF 85*2E 83         [24] 3833 	mov	dph,(_byte + 1)
      000DE2 C0 07            [24] 3834 	push	ar7
      000DE4 C0 06            [24] 3835 	push	ar6
      000DE6 12r0CrA8         [24] 3836 	lcall	_HEXtoASCII
                                   3837 ;	ecen4330lab7.c:1025: write(ASCII);
      000DE9 85 82*31         [24] 3838 	mov  _ASCII,dpl
      000DEC 12r0Ar54         [24] 3839 	lcall	_write
      000DEF D0 06            [24] 3840 	pop	ar6
      000DF1 D0 07            [24] 3841 	pop	ar7
                                   3842 ;	ecen4330lab7.c:1028: byte = h;
      000DF3 8E*2D            [24] 3843 	mov	_byte,r6
      000DF5 8F*2E            [24] 3844 	mov	(_byte + 1),r7
                                   3845 ;	ecen4330lab7.c:1029: byte &= 0x000F;
      000DF7 53*2D 0F         [24] 3846 	anl	_byte,#0x0f
      000DFA 75*2E 00         [24] 3847 	mov	(_byte + 1),#0x00
                                   3848 ;	ecen4330lab7.c:1030: ASCII = HEXtoASCII(byte);
      000DFD 85*2D 82         [24] 3849 	mov	dpl,_byte
      000E00 85*2E 83         [24] 3850 	mov	dph,(_byte + 1)
      000E03 12r0CrA8         [24] 3851 	lcall	_HEXtoASCII
                                   3852 ;	ecen4330lab7.c:1031: write(ASCII);
      000E06 85 82*31         [24] 3853 	mov  _ASCII,dpl
                                   3854 ;	ecen4330lab7.c:1032: }
      000E09 02r0Ar54         [24] 3855 	ljmp	_write
                                   3856 ;------------------------------------------------------------
                                   3857 ;Allocation info for local variables in function 'RAMwrite'
                                   3858 ;------------------------------------------------------------
                                   3859 ;d                         Allocated with name '_RAMwrite_PARM_2'
                                   3860 ;a                         Allocated to registers r6 r7 
                                   3861 ;ram_address               Allocated to registers 
                                   3862 ;------------------------------------------------------------
                                   3863 ;	ecen4330lab7.c:1040: void RAMwrite(unsigned int a, unsigned char d){
                                   3864 ;	-----------------------------------------
                                   3865 ;	 function RAMwrite
                                   3866 ;	-----------------------------------------
      000E0C                       3867 _RAMwrite:
      000E0C AE 82            [24] 3868 	mov	r6,dpl
      000E0E AF 83            [24] 3869 	mov	r7,dph
                                   3870 ;	ecen4330lab7.c:1043: IOM = 0;
                                   3871 ;	assignBit
      000E10 C2 B4            [12] 3872 	clr	_P3_4
                                   3873 ;	ecen4330lab7.c:1046: ram_address = (unsigned char __xdata*)(a);
      000E12 8E 82            [24] 3874 	mov	dpl,r6
      000E14 8F 83            [24] 3875 	mov	dph,r7
                                   3876 ;	ecen4330lab7.c:1049: *ram_address = d;
      000E16 E5*00            [12] 3877 	mov	a,_RAMwrite_PARM_2
      000E18 F0               [24] 3878 	movx	@dptr,a
                                   3879 ;	ecen4330lab7.c:1050: IOM = 1;
                                   3880 ;	assignBit
      000E19 D2 B4            [12] 3881 	setb	_P3_4
                                   3882 ;	ecen4330lab7.c:1051: }
      000E1B 22               [24] 3883 	ret
                                   3884 ;------------------------------------------------------------
                                   3885 ;Allocation info for local variables in function 'testRAM'
                                   3886 ;------------------------------------------------------------
                                   3887 ;d                         Allocated to registers r7 
                                   3888 ;i                         Allocated to registers r5 r6 
                                   3889 ;ram_address               Allocated to registers 
                                   3890 ;------------------------------------------------------------
                                   3891 ;	ecen4330lab7.c:1054: void testRAM(unsigned char d){
                                   3892 ;	-----------------------------------------
                                   3893 ;	 function testRAM
                                   3894 ;	-----------------------------------------
      000E1C                       3895 _testRAM:
      000E1C AF 82            [24] 3896 	mov	r7,dpl
                                   3897 ;	ecen4330lab7.c:1058: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000E1E 7D 00            [12] 3898 	mov	r5,#0x00
      000E20 7E 00            [12] 3899 	mov	r6,#0x00
      000E22                       3900 00102$:
                                   3901 ;	ecen4330lab7.c:1059: IOM = 0;
                                   3902 ;	assignBit
      000E22 C2 B4            [12] 3903 	clr	_P3_4
                                   3904 ;	ecen4330lab7.c:1060: ram_address = (unsigned char __xdata*)(i);
      000E24 8D 82            [24] 3905 	mov	dpl,r5
      000E26 8E 83            [24] 3906 	mov	dph,r6
                                   3907 ;	ecen4330lab7.c:1061: *ram_address = d;
      000E28 EF               [12] 3908 	mov	a,r7
      000E29 F0               [24] 3909 	movx	@dptr,a
                                   3910 ;	ecen4330lab7.c:1062: IOM = 1;
                                   3911 ;	assignBit
      000E2A D2 B4            [12] 3912 	setb	_P3_4
                                   3913 ;	ecen4330lab7.c:1058: for (i = __START_RAM__; i<=__END_RAM__; i++) {
      000E2C 0D               [12] 3914 	inc	r5
      000E2D BD 00 01         [24] 3915 	cjne	r5,#0x00,00111$
      000E30 0E               [12] 3916 	inc	r6
      000E31                       3917 00111$:
      000E31 C3               [12] 3918 	clr	c
      000E32 74 FE            [12] 3919 	mov	a,#0xfe
      000E34 9D               [12] 3920 	subb	a,r5
      000E35 74 FF            [12] 3921 	mov	a,#0xff
      000E37 9E               [12] 3922 	subb	a,r6
      000E38 50 E8            [24] 3923 	jnc	00102$
                                   3924 ;	ecen4330lab7.c:1065: }
      000E3A 22               [24] 3925 	ret
                                   3926 ;------------------------------------------------------------
                                   3927 ;Allocation info for local variables in function 'RAMread'
                                   3928 ;------------------------------------------------------------
                                   3929 ;a                         Allocated to registers r6 r7 
                                   3930 ;ram_address               Allocated to registers 
                                   3931 ;------------------------------------------------------------
                                   3932 ;	ecen4330lab7.c:1072: unsigned char RAMread(unsigned int a){
                                   3933 ;	-----------------------------------------
                                   3934 ;	 function RAMread
                                   3935 ;	-----------------------------------------
      000E3B                       3936 _RAMread:
      000E3B AE 82            [24] 3937 	mov	r6,dpl
      000E3D AF 83            [24] 3938 	mov	r7,dph
                                   3939 ;	ecen4330lab7.c:1075: IOM = 0;
                                   3940 ;	assignBit
      000E3F C2 B4            [12] 3941 	clr	_P3_4
                                   3942 ;	ecen4330lab7.c:1078: ram_address = (unsigned char __xdata*)(a);
      000E41 8E 82            [24] 3943 	mov	dpl,r6
      000E43 8F 83            [24] 3944 	mov	dph,r7
                                   3945 ;	ecen4330lab7.c:1081: data = *ram_address;
      000E45 E0               [24] 3946 	movx	a,@dptr
      000E46 F5*20            [12] 3947 	mov	_data,a
                                   3948 ;	ecen4330lab7.c:1082: IOM = 1;
                                   3949 ;	assignBit
      000E48 D2 B4            [12] 3950 	setb	_P3_4
                                   3951 ;	ecen4330lab7.c:1083: return data;
      000E4A 85*20 82         [24] 3952 	mov	dpl,_data
                                   3953 ;	ecen4330lab7.c:1084: }
      000E4D 22               [24] 3954 	ret
                                   3955 ;------------------------------------------------------------
                                   3956 ;Allocation info for local variables in function 'resetLCD'
                                   3957 ;------------------------------------------------------------
                                   3958 ;	ecen4330lab7.c:1096: void resetLCD(){
                                   3959 ;	-----------------------------------------
                                   3960 ;	 function resetLCD
                                   3961 ;	-----------------------------------------
      000E4E                       3962 _resetLCD:
                                   3963 ;	ecen4330lab7.c:1097: setRotation(4);
      000E4E 75 82 04         [24] 3964 	mov	dpl,#0x04
      000E51 12r03rF0         [24] 3965 	lcall	_setRotation
                                   3966 ;	ecen4330lab7.c:1098: setTextColor(GRAY, BLACK);
      000E54 E4               [12] 3967 	clr	a
      000E55 F5*00            [12] 3968 	mov	_setTextColor_PARM_2,a
      000E57 F5*01            [12] 3969 	mov	(_setTextColor_PARM_2 + 1),a
      000E59 90 D6 BA         [24] 3970 	mov	dptr,#0xd6ba
      000E5C 12r03rCB         [24] 3971 	lcall	_setTextColor
                                   3972 ;	ecen4330lab7.c:1099: setTextSize(3);
      000E5F 75 82 03         [24] 3973 	mov	dpl,#0x03
      000E62 12r03rD8         [24] 3974 	lcall	_setTextSize
                                   3975 ;	ecen4330lab7.c:1100: fillScreen(BLACK);
      000E65 90 00 00         [24] 3976 	mov	dptr,#0x0000
      000E68 12r07r63         [24] 3977 	lcall	_fillScreen
                                   3978 ;	ecen4330lab7.c:1101: setCursor(0, 0);
      000E6B E4               [12] 3979 	clr	a
      000E6C F5*00            [12] 3980 	mov	_setCursor_PARM_2,a
      000E6E F5*01            [12] 3981 	mov	(_setCursor_PARM_2 + 1),a
      000E70 90 00 00         [24] 3982 	mov	dptr,#0x0000
                                   3983 ;	ecen4330lab7.c:1102: }
      000E73 02r03rBE         [24] 3984 	ljmp	_setCursor
                                   3985 ;------------------------------------------------------------
                                   3986 ;Allocation info for local variables in function 'invalidInput'
                                   3987 ;------------------------------------------------------------
                                   3988 ;	ecen4330lab7.c:1114: void invalidInput(){
                                   3989 ;	-----------------------------------------
                                   3990 ;	 function invalidInput
                                   3991 ;	-----------------------------------------
      000E76                       3992 _invalidInput:
                                   3993 ;	ecen4330lab7.c:1115: resetLCD();
      000E76 12r0Er4E         [24] 3994 	lcall	_resetLCD
                                   3995 ;	ecen4330lab7.c:1116: setTextColor(RED, BLACK);
      000E79 E4               [12] 3996 	clr	a
      000E7A F5*00            [12] 3997 	mov	_setTextColor_PARM_2,a
      000E7C F5*01            [12] 3998 	mov	(_setTextColor_PARM_2 + 1),a
      000E7E 90 F8 00         [24] 3999 	mov	dptr,#0xf800
      000E81 12r03rCB         [24] 4000 	lcall	_setTextColor
                                   4001 ;	ecen4330lab7.c:1119: LCD_string_write("\n   Invalid\n\n");
      000E84 90r05r3B         [24] 4002 	mov	dptr,#___str_5
      000E87 75 F0 80         [24] 4003 	mov	b,#0x80
      000E8A 12r0ArBA         [24] 4004 	lcall	_LCD_string_write
                                   4005 ;	ecen4330lab7.c:1120: LCD_string_write("    Input");
      000E8D 90r05r49         [24] 4006 	mov	dptr,#___str_6
      000E90 75 F0 80         [24] 4007 	mov	b,#0x80
      000E93 12r0ArBA         [24] 4008 	lcall	_LCD_string_write
                                   4009 ;	ecen4330lab7.c:1123: delay(200);
      000E96 90 00 C8         [24] 4010 	mov	dptr,#0x00c8
      000E99 12r01r1A         [24] 4011 	lcall	_delay
                                   4012 ;	ecen4330lab7.c:1124: resetLCD();
                                   4013 ;	ecen4330lab7.c:1125: }
      000E9C 02r0Er4E         [24] 4014 	ljmp	_resetLCD
                                   4015 ;------------------------------------------------------------
                                   4016 ;Allocation info for local variables in function 'inputRead16'
                                   4017 ;------------------------------------------------------------
                                   4018 ;	ecen4330lab7.c:1136: void inputRead16(){
                                   4019 ;	-----------------------------------------
                                   4020 ;	 function inputRead16
                                   4021 ;	-----------------------------------------
      000E9F                       4022 _inputRead16:
                                   4023 ;	ecen4330lab7.c:1137: input16 = 0x0000;
      000E9F E4               [12] 4024 	clr	a
      000EA0 F5*17            [12] 4025 	mov	_input16,a
      000EA2 F5*18            [12] 4026 	mov	(_input16 + 1),a
                                   4027 ;	ecen4330lab7.c:1139: setTextColor(WHITE, BLACK);
      000EA4 F5*00            [12] 4028 	mov	_setTextColor_PARM_2,a
      000EA6 F5*01            [12] 4029 	mov	(_setTextColor_PARM_2 + 1),a
      000EA8 90 FF FF         [24] 4030 	mov	dptr,#0xffff
      000EAB 12r03rCB         [24] 4031 	lcall	_setTextColor
                                   4032 ;	ecen4330lab7.c:1142: key = keyDetect();
      000EAE 12r0ArF9         [24] 4033 	lcall	_keyDetect
      000EB1 85 82*16         [24] 4034 	mov	_key,dpl
                                   4035 ;	ecen4330lab7.c:1143: setTextColor(WHITE, BLACK);
      000EB4 E4               [12] 4036 	clr	a
      000EB5 F5*00            [12] 4037 	mov	_setTextColor_PARM_2,a
      000EB7 F5*01            [12] 4038 	mov	(_setTextColor_PARM_2 + 1),a
      000EB9 90 FF FF         [24] 4039 	mov	dptr,#0xffff
      000EBC 12r03rCB         [24] 4040 	lcall	_setTextColor
                                   4041 ;	ecen4330lab7.c:1144: write(key);
      000EBF 85*16 82         [24] 4042 	mov	dpl,_key
      000EC2 12r0Ar54         [24] 4043 	lcall	_write
                                   4044 ;	ecen4330lab7.c:1145: input16 |= (ASCIItoHEX(key) << 12);
      000EC5 85*16 82         [24] 4045 	mov	dpl,_key
      000EC8 12r0Cr12         [24] 4046 	lcall	_ASCIItoHEX
      000ECB AF 82            [24] 4047 	mov	r7,dpl
      000ECD EF               [12] 4048 	mov	a,r7
      000ECE C4               [12] 4049 	swap	a
      000ECF 54 F0            [12] 4050 	anl	a,#0xf0
      000ED1 FE               [12] 4051 	mov	r6,a
      000ED2 E4               [12] 4052 	clr	a
      000ED3 42*17            [12] 4053 	orl	_input16,a
      000ED5 EE               [12] 4054 	mov	a,r6
      000ED6 42*18            [12] 4055 	orl	(_input16 + 1),a
                                   4056 ;	ecen4330lab7.c:1147: key = keyDetect();
      000ED8 12r0ArF9         [24] 4057 	lcall	_keyDetect
      000EDB 85 82*16         [24] 4058 	mov	_key,dpl
                                   4059 ;	ecen4330lab7.c:1148: setTextColor(WHITE, BLACK);
      000EDE E4               [12] 4060 	clr	a
      000EDF F5*00            [12] 4061 	mov	_setTextColor_PARM_2,a
      000EE1 F5*01            [12] 4062 	mov	(_setTextColor_PARM_2 + 1),a
      000EE3 90 FF FF         [24] 4063 	mov	dptr,#0xffff
      000EE6 12r03rCB         [24] 4064 	lcall	_setTextColor
                                   4065 ;	ecen4330lab7.c:1149: write(key);
      000EE9 85*16 82         [24] 4066 	mov	dpl,_key
      000EEC 12r0Ar54         [24] 4067 	lcall	_write
                                   4068 ;	ecen4330lab7.c:1150: input16 |= (ASCIItoHEX(key) << 8);
      000EEF 85*16 82         [24] 4069 	mov	dpl,_key
      000EF2 12r0Cr12         [24] 4070 	lcall	_ASCIItoHEX
      000EF5 AF 82            [24] 4071 	mov	r7,dpl
      000EF7 8F 06            [24] 4072 	mov	ar6,r7
      000EF9 E4               [12] 4073 	clr	a
      000EFA 42*17            [12] 4074 	orl	_input16,a
      000EFC EE               [12] 4075 	mov	a,r6
      000EFD 42*18            [12] 4076 	orl	(_input16 + 1),a
                                   4077 ;	ecen4330lab7.c:1152: key = keyDetect();
      000EFF 12r0ArF9         [24] 4078 	lcall	_keyDetect
      000F02 85 82*16         [24] 4079 	mov	_key,dpl
                                   4080 ;	ecen4330lab7.c:1153: setTextColor(WHITE, BLACK);
      000F05 E4               [12] 4081 	clr	a
      000F06 F5*00            [12] 4082 	mov	_setTextColor_PARM_2,a
      000F08 F5*01            [12] 4083 	mov	(_setTextColor_PARM_2 + 1),a
      000F0A 90 FF FF         [24] 4084 	mov	dptr,#0xffff
      000F0D 12r03rCB         [24] 4085 	lcall	_setTextColor
                                   4086 ;	ecen4330lab7.c:1154: write(key);
      000F10 85*16 82         [24] 4087 	mov	dpl,_key
      000F13 12r0Ar54         [24] 4088 	lcall	_write
                                   4089 ;	ecen4330lab7.c:1155: input16 |= (ASCIItoHEX(key) << 4);
      000F16 85*16 82         [24] 4090 	mov	dpl,_key
      000F19 12r0Cr12         [24] 4091 	lcall	_ASCIItoHEX
      000F1C AF 82            [24] 4092 	mov	r7,dpl
      000F1E E4               [12] 4093 	clr	a
      000F1F C4               [12] 4094 	swap	a
      000F20 54 F0            [12] 4095 	anl	a,#0xf0
      000F22 CF               [12] 4096 	xch	a,r7
      000F23 C4               [12] 4097 	swap	a
      000F24 CF               [12] 4098 	xch	a,r7
      000F25 6F               [12] 4099 	xrl	a,r7
      000F26 CF               [12] 4100 	xch	a,r7
      000F27 54 F0            [12] 4101 	anl	a,#0xf0
      000F29 CF               [12] 4102 	xch	a,r7
      000F2A 6F               [12] 4103 	xrl	a,r7
      000F2B FE               [12] 4104 	mov	r6,a
      000F2C EF               [12] 4105 	mov	a,r7
      000F2D 42*17            [12] 4106 	orl	_input16,a
      000F2F EE               [12] 4107 	mov	a,r6
      000F30 42*18            [12] 4108 	orl	(_input16 + 1),a
                                   4109 ;	ecen4330lab7.c:1157: key = keyDetect();
      000F32 12r0ArF9         [24] 4110 	lcall	_keyDetect
      000F35 85 82*16         [24] 4111 	mov	_key,dpl
                                   4112 ;	ecen4330lab7.c:1158: setTextColor(WHITE, BLACK);
      000F38 E4               [12] 4113 	clr	a
      000F39 F5*00            [12] 4114 	mov	_setTextColor_PARM_2,a
      000F3B F5*01            [12] 4115 	mov	(_setTextColor_PARM_2 + 1),a
      000F3D 90 FF FF         [24] 4116 	mov	dptr,#0xffff
      000F40 12r03rCB         [24] 4117 	lcall	_setTextColor
                                   4118 ;	ecen4330lab7.c:1159: write(key);
      000F43 85*16 82         [24] 4119 	mov	dpl,_key
      000F46 12r0Ar54         [24] 4120 	lcall	_write
                                   4121 ;	ecen4330lab7.c:1160: input16 |= ASCIItoHEX(key);
      000F49 85*16 82         [24] 4122 	mov	dpl,_key
      000F4C 12r0Cr12         [24] 4123 	lcall	_ASCIItoHEX
      000F4F AF 82            [24] 4124 	mov	r7,dpl
      000F51 7E 00            [12] 4125 	mov	r6,#0x00
      000F53 EF               [12] 4126 	mov	a,r7
      000F54 42*17            [12] 4127 	orl	_input16,a
      000F56 EE               [12] 4128 	mov	a,r6
      000F57 42*18            [12] 4129 	orl	(_input16 + 1),a
                                   4130 ;	ecen4330lab7.c:1161: }
      000F59 22               [24] 4131 	ret
                                   4132 ;------------------------------------------------------------
                                   4133 ;Allocation info for local variables in function 'inputRead8'
                                   4134 ;------------------------------------------------------------
                                   4135 ;	ecen4330lab7.c:1171: void inputRead8(){
                                   4136 ;	-----------------------------------------
                                   4137 ;	 function inputRead8
                                   4138 ;	-----------------------------------------
      000F5A                       4139 _inputRead8:
                                   4140 ;	ecen4330lab7.c:1172: setTextColor(WHITE, BLACK);
      000F5A E4               [12] 4141 	clr	a
      000F5B F5*00            [12] 4142 	mov	_setTextColor_PARM_2,a
      000F5D F5*01            [12] 4143 	mov	(_setTextColor_PARM_2 + 1),a
      000F5F 90 FF FF         [24] 4144 	mov	dptr,#0xffff
      000F62 12r03rCB         [24] 4145 	lcall	_setTextColor
                                   4146 ;	ecen4330lab7.c:1174: input8 = 0x00;
      000F65 75*19 00         [24] 4147 	mov	_input8,#0x00
                                   4148 ;	ecen4330lab7.c:1176: key = keyDetect();
      000F68 12r0ArF9         [24] 4149 	lcall	_keyDetect
      000F6B 85 82*16         [24] 4150 	mov	_key,dpl
                                   4151 ;	ecen4330lab7.c:1177: setTextColor(WHITE, BLACK);
      000F6E E4               [12] 4152 	clr	a
      000F6F F5*00            [12] 4153 	mov	_setTextColor_PARM_2,a
      000F71 F5*01            [12] 4154 	mov	(_setTextColor_PARM_2 + 1),a
      000F73 90 FF FF         [24] 4155 	mov	dptr,#0xffff
      000F76 12r03rCB         [24] 4156 	lcall	_setTextColor
                                   4157 ;	ecen4330lab7.c:1178: write(key);
      000F79 85*16 82         [24] 4158 	mov	dpl,_key
      000F7C 12r0Ar54         [24] 4159 	lcall	_write
                                   4160 ;	ecen4330lab7.c:1179: input8 |= (ASCIItoHEX(key) << 4);
      000F7F 85*16 82         [24] 4161 	mov	dpl,_key
      000F82 12r0Cr12         [24] 4162 	lcall	_ASCIItoHEX
      000F85 E5 82            [12] 4163 	mov	a,dpl
      000F87 C4               [12] 4164 	swap	a
      000F88 54 F0            [12] 4165 	anl	a,#0xf0
      000F8A 42*19            [12] 4166 	orl	_input8,a
                                   4167 ;	ecen4330lab7.c:1181: key = keyDetect();
      000F8C 12r0ArF9         [24] 4168 	lcall	_keyDetect
      000F8F 85 82*16         [24] 4169 	mov	_key,dpl
                                   4170 ;	ecen4330lab7.c:1182: setTextColor(WHITE, BLACK);
      000F92 E4               [12] 4171 	clr	a
      000F93 F5*00            [12] 4172 	mov	_setTextColor_PARM_2,a
      000F95 F5*01            [12] 4173 	mov	(_setTextColor_PARM_2 + 1),a
      000F97 90 FF FF         [24] 4174 	mov	dptr,#0xffff
      000F9A 12r03rCB         [24] 4175 	lcall	_setTextColor
                                   4176 ;	ecen4330lab7.c:1183: write(key);
      000F9D 85*16 82         [24] 4177 	mov	dpl,_key
      000FA0 12r0Ar54         [24] 4178 	lcall	_write
                                   4179 ;	ecen4330lab7.c:1184: input8 |= ASCIItoHEX(key);
      000FA3 85*16 82         [24] 4180 	mov	dpl,_key
      000FA6 12r0Cr12         [24] 4181 	lcall	_ASCIItoHEX
      000FA9 E5 82            [12] 4182 	mov	a,dpl
      000FAB 42*19            [12] 4183 	orl	_input8,a
                                   4184 ;	ecen4330lab7.c:1185: }
      000FAD 22               [24] 4185 	ret
                                   4186 ;------------------------------------------------------------
                                   4187 ;Allocation info for local variables in function 'inputDataType'
                                   4188 ;------------------------------------------------------------
                                   4189 ;	ecen4330lab7.c:1204: void inputDataType(){
                                   4190 ;	-----------------------------------------
                                   4191 ;	 function inputDataType
                                   4192 ;	-----------------------------------------
      000FAE                       4193 _inputDataType:
                                   4194 ;	ecen4330lab7.c:1205: validInput = 0;
      000FAE 75*1D 00         [24] 4195 	mov	_validInput,#0x00
                                   4196 ;	ecen4330lab7.c:1206: dataType = 0;
      000FB1 75*1A 00         [24] 4197 	mov	_dataType,#0x00
                                   4198 ;	ecen4330lab7.c:1208: do
      000FB4                       4199 00106$:
                                   4200 ;	ecen4330lab7.c:1211: resetLCD();
      000FB4 12r0Er4E         [24] 4201 	lcall	_resetLCD
                                   4202 ;	ecen4330lab7.c:1212: setTextColor(WHITE, BLACK);
      000FB7 E4               [12] 4203 	clr	a
      000FB8 F5*00            [12] 4204 	mov	_setTextColor_PARM_2,a
      000FBA F5*01            [12] 4205 	mov	(_setTextColor_PARM_2 + 1),a
      000FBC 90 FF FF         [24] 4206 	mov	dptr,#0xffff
      000FBF 12r03rCB         [24] 4207 	lcall	_setTextColor
                                   4208 ;	ecen4330lab7.c:1213: LCD_string_write("\nSelect Data\nType:\n\n");
      000FC2 90r05r53         [24] 4209 	mov	dptr,#___str_7
      000FC5 75 F0 80         [24] 4210 	mov	b,#0x80
      000FC8 12r0ArBA         [24] 4211 	lcall	_LCD_string_write
                                   4212 ;	ecen4330lab7.c:1214: LCD_string_write("(1) Byte\n");
      000FCB 90r05r68         [24] 4213 	mov	dptr,#___str_8
      000FCE 75 F0 80         [24] 4214 	mov	b,#0x80
      000FD1 12r0ArBA         [24] 4215 	lcall	_LCD_string_write
                                   4216 ;	ecen4330lab7.c:1215: LCD_string_write("(2) Word\n");
      000FD4 90r05r72         [24] 4217 	mov	dptr,#___str_9
      000FD7 75 F0 80         [24] 4218 	mov	b,#0x80
      000FDA 12r0ArBA         [24] 4219 	lcall	_LCD_string_write
                                   4220 ;	ecen4330lab7.c:1216: LCD_string_write("(3) Double\n    Word\n\n  _");
      000FDD 90r05r7C         [24] 4221 	mov	dptr,#___str_10
      000FE0 75 F0 80         [24] 4222 	mov	b,#0x80
      000FE3 12r0ArBA         [24] 4223 	lcall	_LCD_string_write
                                   4224 ;	ecen4330lab7.c:1217: cursor_x -= textsize * 6;
      000FE6 85*0C*00         [24] 4225 	mov	__mulint_PARM_2,_textsize
      000FE9 75*01 00         [24] 4226 	mov	(__mulint_PARM_2 + 1),#0x00
      000FEC 90 00 06         [24] 4227 	mov	dptr,#0x0006
      000FEF 12r00r00         [24] 4228 	lcall	__mulint
      000FF2 AE 82            [24] 4229 	mov	r6,dpl
      000FF4 AF 83            [24] 4230 	mov	r7,dph
      000FF6 E5*08            [12] 4231 	mov	a,_cursor_x
      000FF8 C3               [12] 4232 	clr	c
      000FF9 9E               [12] 4233 	subb	a,r6
      000FFA F5*08            [12] 4234 	mov	_cursor_x,a
      000FFC E5*09            [12] 4235 	mov	a,(_cursor_x + 1)
      000FFE 9F               [12] 4236 	subb	a,r7
      000FFF F5*09            [12] 4237 	mov	(_cursor_x + 1),a
                                   4238 ;	ecen4330lab7.c:1218: x = cursor_x;
      001001 85*08*3B         [24] 4239 	mov	_x,_cursor_x
                                   4240 ;	ecen4330lab7.c:1219: y = cursor_y;
      001004 85*0A*3C         [24] 4241 	mov	_y,_cursor_y
                                   4242 ;	ecen4330lab7.c:1220: ts = textsize;
      001007 85*0C*3D         [24] 4243 	mov	_ts,_textsize
                                   4244 ;	ecen4330lab7.c:1223: setTextColor(WHITE, BLACK);
      00100A E4               [12] 4245 	clr	a
      00100B F5*00            [12] 4246 	mov	_setTextColor_PARM_2,a
      00100D F5*01            [12] 4247 	mov	(_setTextColor_PARM_2 + 1),a
      00100F 90 FF FF         [24] 4248 	mov	dptr,#0xffff
      001012 12r03rCB         [24] 4249 	lcall	_setTextColor
                                   4250 ;	ecen4330lab7.c:1224: key = keyDetect();
      001015 12r0ArF9         [24] 4251 	lcall	_keyDetect
      001018 85 82*16         [24] 4252 	mov	_key,dpl
                                   4253 ;	ecen4330lab7.c:1225: cursor_x = x;
      00101B 85*3B*08         [24] 4254 	mov	_cursor_x,_x
      00101E 75*09 00         [24] 4255 	mov	(_cursor_x + 1),#0x00
                                   4256 ;	ecen4330lab7.c:1226: cursor_y = y;
      001021 85*3C*0A         [24] 4257 	mov	_cursor_y,_y
      001024 75*0B 00         [24] 4258 	mov	(_cursor_y + 1),#0x00
                                   4259 ;	ecen4330lab7.c:1227: textsize = ts;
      001027 85*3D*0C         [24] 4260 	mov	_textsize,_ts
                                   4261 ;	ecen4330lab7.c:1228: write(key);
      00102A 85*16 82         [24] 4262 	mov	dpl,_key
      00102D 12r0Ar54         [24] 4263 	lcall	_write
                                   4264 ;	ecen4330lab7.c:1230: switch (key)
      001030 74 31            [12] 4265 	mov	a,#0x31
      001032 B5*16 02         [24] 4266 	cjne	a,_key,00127$
      001035 80 0E            [24] 4267 	sjmp	00101$
      001037                       4268 00127$:
      001037 74 32            [12] 4269 	mov	a,#0x32
      001039 B5*16 02         [24] 4270 	cjne	a,_key,00128$
      00103C 80 0F            [24] 4271 	sjmp	00102$
      00103E                       4272 00128$:
      00103E 74 33            [12] 4273 	mov	a,#0x33
                                   4274 ;	ecen4330lab7.c:1233: case '1':
      001040 B5*16 1A         [24] 4275 	cjne	a,_key,00104$
      001043 80 10            [24] 4276 	sjmp	00103$
      001045                       4277 00101$:
                                   4278 ;	ecen4330lab7.c:1234: dataType = 1;
      001045 75*1A 01         [24] 4279 	mov	_dataType,#0x01
                                   4280 ;	ecen4330lab7.c:1235: validInput = 1;
      001048 75*1D 01         [24] 4281 	mov	_validInput,#0x01
                                   4282 ;	ecen4330lab7.c:1236: break;
                                   4283 ;	ecen4330lab7.c:1239: case '2':
      00104B 80 16            [24] 4284 	sjmp	00107$
      00104D                       4285 00102$:
                                   4286 ;	ecen4330lab7.c:1240: dataType = 2;
      00104D 75*1A 02         [24] 4287 	mov	_dataType,#0x02
                                   4288 ;	ecen4330lab7.c:1241: validInput = 1;
      001050 75*1D 01         [24] 4289 	mov	_validInput,#0x01
                                   4290 ;	ecen4330lab7.c:1242: break;
                                   4291 ;	ecen4330lab7.c:1245: case '3':
      001053 80 0E            [24] 4292 	sjmp	00107$
      001055                       4293 00103$:
                                   4294 ;	ecen4330lab7.c:1246: dataType = 4;
      001055 75*1A 04         [24] 4295 	mov	_dataType,#0x04
                                   4296 ;	ecen4330lab7.c:1247: validInput = 1;
      001058 75*1D 01         [24] 4297 	mov	_validInput,#0x01
                                   4298 ;	ecen4330lab7.c:1248: break;
                                   4299 ;	ecen4330lab7.c:1251: default:
      00105B 80 06            [24] 4300 	sjmp	00107$
      00105D                       4301 00104$:
                                   4302 ;	ecen4330lab7.c:1252: invalidInput();
      00105D 12r0Er76         [24] 4303 	lcall	_invalidInput
                                   4304 ;	ecen4330lab7.c:1253: validInput = 0;
      001060 75*1D 00         [24] 4305 	mov	_validInput,#0x00
                                   4306 ;	ecen4330lab7.c:1255: }
      001063                       4307 00107$:
                                   4308 ;	ecen4330lab7.c:1256: } while (validInput == 0);
      001063 E5*1D            [12] 4309 	mov	a,_validInput
      001065 70 03            [24] 4310 	jnz	00130$
      001067 02r0FrB4         [24] 4311 	ljmp	00106$
      00106A                       4312 00130$:
                                   4313 ;	ecen4330lab7.c:1257: }
      00106A 22               [24] 4314 	ret
                                   4315 ;------------------------------------------------------------
                                   4316 ;Allocation info for local variables in function 'inputDataSize'
                                   4317 ;------------------------------------------------------------
                                   4318 ;	ecen4330lab7.c:1267: void inputDataSize(){
                                   4319 ;	-----------------------------------------
                                   4320 ;	 function inputDataSize
                                   4321 ;	-----------------------------------------
      00106B                       4322 _inputDataSize:
                                   4323 ;	ecen4330lab7.c:1268: validInput = 0;
                                   4324 ;	ecen4330lab7.c:1269: dataSize = 0x0000;
      00106B E4               [12] 4325 	clr	a
      00106C F5*1D            [12] 4326 	mov	_validInput,a
      00106E F5*1B            [12] 4327 	mov	_dataSize,a
      001070 F5*1C            [12] 4328 	mov	(_dataSize + 1),a
                                   4329 ;	ecen4330lab7.c:1271: do
      001072                       4330 00104$:
                                   4331 ;	ecen4330lab7.c:1274: resetLCD();
      001072 12r0Er4E         [24] 4332 	lcall	_resetLCD
                                   4333 ;	ecen4330lab7.c:1275: LCD_string_write("\nEnter Data\nSize:\n\n  0x____");
      001075 90r05r95         [24] 4334 	mov	dptr,#___str_11
      001078 75 F0 80         [24] 4335 	mov	b,#0x80
      00107B 12r0ArBA         [24] 4336 	lcall	_LCD_string_write
                                   4337 ;	ecen4330lab7.c:1276: cursor_x -= 4 * textsize * 6;
      00107E E5*0C            [12] 4338 	mov	a,_textsize
      001080 75 F0 18         [24] 4339 	mov	b,#0x18
      001083 A4               [48] 4340 	mul	ab
      001084 FE               [12] 4341 	mov	r6,a
      001085 AF F0            [24] 4342 	mov	r7,b
      001087 E5*08            [12] 4343 	mov	a,_cursor_x
      001089 C3               [12] 4344 	clr	c
      00108A 9E               [12] 4345 	subb	a,r6
      00108B F5*08            [12] 4346 	mov	_cursor_x,a
      00108D E5*09            [12] 4347 	mov	a,(_cursor_x + 1)
      00108F 9F               [12] 4348 	subb	a,r7
      001090 F5*09            [12] 4349 	mov	(_cursor_x + 1),a
                                   4350 ;	ecen4330lab7.c:1277: x = cursor_x;
      001092 85*08*3B         [24] 4351 	mov	_x,_cursor_x
                                   4352 ;	ecen4330lab7.c:1278: y = cursor_y;
      001095 85*0A*3C         [24] 4353 	mov	_y,_cursor_y
                                   4354 ;	ecen4330lab7.c:1279: ts = textsize;
      001098 85*0C*3D         [24] 4355 	mov	_ts,_textsize
                                   4356 ;	ecen4330lab7.c:1281: input16 = 0x0000;
      00109B E4               [12] 4357 	clr	a
      00109C F5*17            [12] 4358 	mov	_input16,a
      00109E F5*18            [12] 4359 	mov	(_input16 + 1),a
                                   4360 ;	ecen4330lab7.c:1283: setTextColor(WHITE, BLACK);
      0010A0 F5*00            [12] 4361 	mov	_setTextColor_PARM_2,a
      0010A2 F5*01            [12] 4362 	mov	(_setTextColor_PARM_2 + 1),a
      0010A4 90 FF FF         [24] 4363 	mov	dptr,#0xffff
      0010A7 12r03rCB         [24] 4364 	lcall	_setTextColor
                                   4365 ;	ecen4330lab7.c:1286: key = keyDetect();
      0010AA 12r0ArF9         [24] 4366 	lcall	_keyDetect
      0010AD 85 82*16         [24] 4367 	mov	_key,dpl
                                   4368 ;	ecen4330lab7.c:1287: cursor_x = x;
      0010B0 85*3B*08         [24] 4369 	mov	_cursor_x,_x
      0010B3 75*09 00         [24] 4370 	mov	(_cursor_x + 1),#0x00
                                   4371 ;	ecen4330lab7.c:1288: cursor_y = y;
      0010B6 85*3C*0A         [24] 4372 	mov	_cursor_y,_y
      0010B9 75*0B 00         [24] 4373 	mov	(_cursor_y + 1),#0x00
                                   4374 ;	ecen4330lab7.c:1289: textsize = ts;
      0010BC 85*3D*0C         [24] 4375 	mov	_textsize,_ts
                                   4376 ;	ecen4330lab7.c:1290: write(key);
      0010BF 85*16 82         [24] 4377 	mov	dpl,_key
      0010C2 12r0Ar54         [24] 4378 	lcall	_write
                                   4379 ;	ecen4330lab7.c:1291: x = cursor_x;
      0010C5 85*08*3B         [24] 4380 	mov	_x,_cursor_x
                                   4381 ;	ecen4330lab7.c:1292: y = cursor_y;
      0010C8 85*0A*3C         [24] 4382 	mov	_y,_cursor_y
                                   4383 ;	ecen4330lab7.c:1293: ts = textsize;
      0010CB 85*0C*3D         [24] 4384 	mov	_ts,_textsize
                                   4385 ;	ecen4330lab7.c:1294: input16 |= (ASCIItoHEX(key) << 12);
      0010CE 85*16 82         [24] 4386 	mov	dpl,_key
      0010D1 12r0Cr12         [24] 4387 	lcall	_ASCIItoHEX
      0010D4 AF 82            [24] 4388 	mov	r7,dpl
      0010D6 EF               [12] 4389 	mov	a,r7
      0010D7 C4               [12] 4390 	swap	a
      0010D8 54 F0            [12] 4391 	anl	a,#0xf0
      0010DA FE               [12] 4392 	mov	r6,a
      0010DB E4               [12] 4393 	clr	a
      0010DC 42*17            [12] 4394 	orl	_input16,a
      0010DE EE               [12] 4395 	mov	a,r6
      0010DF 42*18            [12] 4396 	orl	(_input16 + 1),a
                                   4397 ;	ecen4330lab7.c:1296: key = keyDetect();
      0010E1 12r0ArF9         [24] 4398 	lcall	_keyDetect
      0010E4 85 82*16         [24] 4399 	mov	_key,dpl
                                   4400 ;	ecen4330lab7.c:1297: cursor_x = x;
      0010E7 85*3B*08         [24] 4401 	mov	_cursor_x,_x
      0010EA 75*09 00         [24] 4402 	mov	(_cursor_x + 1),#0x00
                                   4403 ;	ecen4330lab7.c:1298: cursor_y = y;
      0010ED 85*3C*0A         [24] 4404 	mov	_cursor_y,_y
      0010F0 75*0B 00         [24] 4405 	mov	(_cursor_y + 1),#0x00
                                   4406 ;	ecen4330lab7.c:1299: textsize = ts;
      0010F3 85*3D*0C         [24] 4407 	mov	_textsize,_ts
                                   4408 ;	ecen4330lab7.c:1300: write(key);
      0010F6 85*16 82         [24] 4409 	mov	dpl,_key
      0010F9 12r0Ar54         [24] 4410 	lcall	_write
                                   4411 ;	ecen4330lab7.c:1301: x = cursor_x;
      0010FC 85*08*3B         [24] 4412 	mov	_x,_cursor_x
                                   4413 ;	ecen4330lab7.c:1302: y = cursor_y;
      0010FF 85*0A*3C         [24] 4414 	mov	_y,_cursor_y
                                   4415 ;	ecen4330lab7.c:1303: ts = textsize;
      001102 85*0C*3D         [24] 4416 	mov	_ts,_textsize
                                   4417 ;	ecen4330lab7.c:1304: input16 |= (ASCIItoHEX(key) << 8);
      001105 85*16 82         [24] 4418 	mov	dpl,_key
      001108 12r0Cr12         [24] 4419 	lcall	_ASCIItoHEX
      00110B AF 82            [24] 4420 	mov	r7,dpl
      00110D 8F 06            [24] 4421 	mov	ar6,r7
      00110F E4               [12] 4422 	clr	a
      001110 42*17            [12] 4423 	orl	_input16,a
      001112 EE               [12] 4424 	mov	a,r6
      001113 42*18            [12] 4425 	orl	(_input16 + 1),a
                                   4426 ;	ecen4330lab7.c:1306: key = keyDetect();
      001115 12r0ArF9         [24] 4427 	lcall	_keyDetect
      001118 85 82*16         [24] 4428 	mov	_key,dpl
                                   4429 ;	ecen4330lab7.c:1307: cursor_x = x;
      00111B 85*3B*08         [24] 4430 	mov	_cursor_x,_x
      00111E 75*09 00         [24] 4431 	mov	(_cursor_x + 1),#0x00
                                   4432 ;	ecen4330lab7.c:1308: cursor_y = y;
      001121 85*3C*0A         [24] 4433 	mov	_cursor_y,_y
      001124 75*0B 00         [24] 4434 	mov	(_cursor_y + 1),#0x00
                                   4435 ;	ecen4330lab7.c:1309: textsize = ts;
      001127 85*3D*0C         [24] 4436 	mov	_textsize,_ts
                                   4437 ;	ecen4330lab7.c:1310: write(key);
      00112A 85*16 82         [24] 4438 	mov	dpl,_key
      00112D 12r0Ar54         [24] 4439 	lcall	_write
                                   4440 ;	ecen4330lab7.c:1311: x = cursor_x;
      001130 85*08*3B         [24] 4441 	mov	_x,_cursor_x
                                   4442 ;	ecen4330lab7.c:1312: y = cursor_y;
      001133 85*0A*3C         [24] 4443 	mov	_y,_cursor_y
                                   4444 ;	ecen4330lab7.c:1313: ts = textsize;
      001136 85*0C*3D         [24] 4445 	mov	_ts,_textsize
                                   4446 ;	ecen4330lab7.c:1314: input16 |= (ASCIItoHEX(key) << 4);
      001139 85*16 82         [24] 4447 	mov	dpl,_key
      00113C 12r0Cr12         [24] 4448 	lcall	_ASCIItoHEX
      00113F AF 82            [24] 4449 	mov	r7,dpl
      001141 E4               [12] 4450 	clr	a
      001142 C4               [12] 4451 	swap	a
      001143 54 F0            [12] 4452 	anl	a,#0xf0
      001145 CF               [12] 4453 	xch	a,r7
      001146 C4               [12] 4454 	swap	a
      001147 CF               [12] 4455 	xch	a,r7
      001148 6F               [12] 4456 	xrl	a,r7
      001149 CF               [12] 4457 	xch	a,r7
      00114A 54 F0            [12] 4458 	anl	a,#0xf0
      00114C CF               [12] 4459 	xch	a,r7
      00114D 6F               [12] 4460 	xrl	a,r7
      00114E FE               [12] 4461 	mov	r6,a
      00114F EF               [12] 4462 	mov	a,r7
      001150 42*17            [12] 4463 	orl	_input16,a
      001152 EE               [12] 4464 	mov	a,r6
      001153 42*18            [12] 4465 	orl	(_input16 + 1),a
                                   4466 ;	ecen4330lab7.c:1316: key = keyDetect();
      001155 12r0ArF9         [24] 4467 	lcall	_keyDetect
      001158 85 82*16         [24] 4468 	mov	_key,dpl
                                   4469 ;	ecen4330lab7.c:1317: cursor_x = x;
      00115B 85*3B*08         [24] 4470 	mov	_cursor_x,_x
      00115E 75*09 00         [24] 4471 	mov	(_cursor_x + 1),#0x00
                                   4472 ;	ecen4330lab7.c:1318: cursor_y = y;
      001161 85*3C*0A         [24] 4473 	mov	_cursor_y,_y
      001164 75*0B 00         [24] 4474 	mov	(_cursor_y + 1),#0x00
                                   4475 ;	ecen4330lab7.c:1319: textsize = ts;
      001167 85*3D*0C         [24] 4476 	mov	_textsize,_ts
                                   4477 ;	ecen4330lab7.c:1320: write(key);
      00116A 85*16 82         [24] 4478 	mov	dpl,_key
      00116D 12r0Ar54         [24] 4479 	lcall	_write
                                   4480 ;	ecen4330lab7.c:1321: x = cursor_x;
      001170 85*08*3B         [24] 4481 	mov	_x,_cursor_x
                                   4482 ;	ecen4330lab7.c:1322: y = cursor_y;
      001173 85*0A*3C         [24] 4483 	mov	_y,_cursor_y
                                   4484 ;	ecen4330lab7.c:1323: ts = textsize;
      001176 85*0C*3D         [24] 4485 	mov	_ts,_textsize
                                   4486 ;	ecen4330lab7.c:1324: input16 |= ASCIItoHEX(key);
      001179 85*16 82         [24] 4487 	mov	dpl,_key
      00117C 12r0Cr12         [24] 4488 	lcall	_ASCIItoHEX
      00117F AF 82            [24] 4489 	mov	r7,dpl
      001181 7E 00            [12] 4490 	mov	r6,#0x00
      001183 EF               [12] 4491 	mov	a,r7
      001184 42*17            [12] 4492 	orl	_input16,a
      001186 EE               [12] 4493 	mov	a,r6
      001187 42*18            [12] 4494 	orl	(_input16 + 1),a
                                   4495 ;	ecen4330lab7.c:1325: dataSize = input16;
      001189 85*17*1B         [24] 4496 	mov	_dataSize,_input16
      00118C 85*18*1C         [24] 4497 	mov	(_dataSize + 1),(_input16 + 1)
                                   4498 ;	ecen4330lab7.c:1328: if(dataSize == 0x0000){
      00118F E5*1B            [12] 4499 	mov	a,_dataSize
      001191 45*1C            [12] 4500 	orl	a,(_dataSize + 1)
      001193 70 09            [24] 4501 	jnz	00102$
                                   4502 ;	ecen4330lab7.c:1329: invalidInput();
      001195 12r0Er76         [24] 4503 	lcall	_invalidInput
                                   4504 ;	ecen4330lab7.c:1330: validInput = 0;
      001198 75*1D 00         [24] 4505 	mov	_validInput,#0x00
      00119B 02r10r72         [24] 4506 	ljmp	00104$
      00119E                       4507 00102$:
                                   4508 ;	ecen4330lab7.c:1333: validInput = 1;
      00119E 75*1D 01         [24] 4509 	mov	_validInput,#0x01
                                   4510 ;	ecen4330lab7.c:1335: } while (validInput == 0);
                                   4511 ;	ecen4330lab7.c:1336: }
      0011A1 22               [24] 4512 	ret
                                   4513 ;------------------------------------------------------------
                                   4514 ;Allocation info for local variables in function 'RAM_CHECK'
                                   4515 ;------------------------------------------------------------
                                   4516 ;i                         Allocated to registers r6 r7 
                                   4517 ;------------------------------------------------------------
                                   4518 ;	ecen4330lab7.c:1347: void RAM_CHECK(){
                                   4519 ;	-----------------------------------------
                                   4520 ;	 function RAM_CHECK
                                   4521 ;	-----------------------------------------
      0011A2                       4522 _RAM_CHECK:
                                   4523 ;	ecen4330lab7.c:1349: data = 0;
      0011A2 75*20 00         [24] 4524 	mov	_data,#0x00
                                   4525 ;	ecen4330lab7.c:1350: dataEnd = 0;
      0011A5 75*1E 00         [24] 4526 	mov	_dataEnd,#0x00
                                   4527 ;	ecen4330lab7.c:1353: resetLCD();
      0011A8 12r0Er4E         [24] 4528 	lcall	_resetLCD
                                   4529 ;	ecen4330lab7.c:1354: LCD_string_write("\nWriting 0x55\nto all\nexternal RAM\nlocations.\n\n");
      0011AB 90r05rB1         [24] 4530 	mov	dptr,#___str_12
      0011AE 75 F0 80         [24] 4531 	mov	b,#0x80
      0011B1 12r0ArBA         [24] 4532 	lcall	_LCD_string_write
                                   4533 ;	ecen4330lab7.c:1355: testRAM(RAMcheckVal1);
      0011B4 75 82 55         [24] 4534 	mov	dpl,#0x55
      0011B7 12r0Er1C         [24] 4535 	lcall	_testRAM
                                   4536 ;	ecen4330lab7.c:1356: RAMwrite(0xFFFF, RAMcheckVal1);
      0011BA 75*00 55         [24] 4537 	mov	_RAMwrite_PARM_2,#0x55
      0011BD 90 FF FF         [24] 4538 	mov	dptr,#0xffff
      0011C0 12r0Er0C         [24] 4539 	lcall	_RAMwrite
                                   4540 ;	ecen4330lab7.c:1358: setTextColor(GREEN, BLACK);
      0011C3 E4               [12] 4541 	clr	a
      0011C4 F5*00            [12] 4542 	mov	_setTextColor_PARM_2,a
      0011C6 F5*01            [12] 4543 	mov	(_setTextColor_PARM_2 + 1),a
      0011C8 90 07 E0         [24] 4544 	mov	dptr,#0x07e0
      0011CB 12r03rCB         [24] 4545 	lcall	_setTextColor
                                   4546 ;	ecen4330lab7.c:1359: LCD_string_write("Write\ncomplete.\n");
      0011CE 90r05rE0         [24] 4547 	mov	dptr,#___str_13
      0011D1 75 F0 80         [24] 4548 	mov	b,#0x80
      0011D4 12r0ArBA         [24] 4549 	lcall	_LCD_string_write
                                   4550 ;	ecen4330lab7.c:1360: delay(200);
      0011D7 90 00 C8         [24] 4551 	mov	dptr,#0x00c8
      0011DA 12r01r1A         [24] 4552 	lcall	_delay
                                   4553 ;	ecen4330lab7.c:1363: resetLCD();
      0011DD 12r0Er4E         [24] 4554 	lcall	_resetLCD
                                   4555 ;	ecen4330lab7.c:1364: LCD_string_write("\nVerifying all\nRAM locations\nequal 0x55.\n\n");
      0011E0 90r05rF1         [24] 4556 	mov	dptr,#___str_14
      0011E3 75 F0 80         [24] 4557 	mov	b,#0x80
      0011E6 12r0ArBA         [24] 4558 	lcall	_LCD_string_write
                                   4559 ;	ecen4330lab7.c:1366: do
      0011E9 7E 00            [12] 4560 	mov	r6,#0x00
      0011EB 7F 00            [12] 4561 	mov	r7,#0x00
      0011ED                       4562 00102$:
                                   4563 ;	ecen4330lab7.c:1368: data = RAMread(i);
      0011ED 8E 82            [24] 4564 	mov	dpl,r6
      0011EF 8F 83            [24] 4565 	mov	dph,r7
      0011F1 C0 07            [24] 4566 	push	ar7
      0011F3 C0 06            [24] 4567 	push	ar6
      0011F5 12r0Er3B         [24] 4568 	lcall	_RAMread
      0011F8 85 82*20         [24] 4569 	mov	_data,dpl
      0011FB D0 06            [24] 4570 	pop	ar6
      0011FD D0 07            [24] 4571 	pop	ar7
                                   4572 ;	ecen4330lab7.c:1369: i++;
      0011FF 0E               [12] 4573 	inc	r6
      001200 BE 00 01         [24] 4574 	cjne	r6,#0x00,00163$
      001203 0F               [12] 4575 	inc	r7
      001204                       4576 00163$:
                                   4577 ;	ecen4330lab7.c:1370: } while (data == RAMcheckVal1 && i <= __END_RAM__);
      001204 74 55            [12] 4578 	mov	a,#0x55
      001206 B5*20 04         [24] 4579 	cjne	a,_data,00164$
      001209 74 01            [12] 4580 	mov	a,#0x01
      00120B 80 01            [24] 4581 	sjmp	00165$
      00120D                       4582 00164$:
      00120D E4               [12] 4583 	clr	a
      00120E                       4584 00165$:
      00120E FD               [12] 4585 	mov	r5,a
      00120F 60 09            [24] 4586 	jz	00129$
      001211 C3               [12] 4587 	clr	c
      001212 74 FE            [12] 4588 	mov	a,#0xfe
      001214 9E               [12] 4589 	subb	a,r6
      001215 74 FF            [12] 4590 	mov	a,#0xff
      001217 9F               [12] 4591 	subb	a,r7
      001218 50 D3            [24] 4592 	jnc	00102$
      00121A                       4593 00129$:
                                   4594 ;	ecen4330lab7.c:1371: if(data == RAMcheckVal1){
      00121A ED               [12] 4595 	mov	a,r5
      00121B 60 11            [24] 4596 	jz	00106$
                                   4597 ;	ecen4330lab7.c:1372: data = RAMread(0xFFFF);
      00121D 90 FF FF         [24] 4598 	mov	dptr,#0xffff
      001220 C0 07            [24] 4599 	push	ar7
      001222 C0 06            [24] 4600 	push	ar6
      001224 12r0Er3B         [24] 4601 	lcall	_RAMread
      001227 85 82*20         [24] 4602 	mov	_data,dpl
      00122A D0 06            [24] 4603 	pop	ar6
      00122C D0 07            [24] 4604 	pop	ar7
      00122E                       4605 00106$:
                                   4606 ;	ecen4330lab7.c:1376: if(data != RAMcheckVal1){
      00122E 74 55            [12] 4607 	mov	a,#0x55
      001230 B5*20 02         [24] 4608 	cjne	a,_data,00169$
      001233 80 61            [24] 4609 	sjmp	00117$
      001235                       4610 00169$:
                                   4611 ;	ecen4330lab7.c:1377: setTextColor(RED, BLACK);
      001235 E4               [12] 4612 	clr	a
      001236 F5*00            [12] 4613 	mov	_setTextColor_PARM_2,a
      001238 F5*01            [12] 4614 	mov	(_setTextColor_PARM_2 + 1),a
      00123A 90 F8 00         [24] 4615 	mov	dptr,#0xf800
      00123D C0 07            [24] 4616 	push	ar7
      00123F C0 06            [24] 4617 	push	ar6
      001241 12r03rCB         [24] 4618 	lcall	_setTextColor
                                   4619 ;	ecen4330lab7.c:1378: LCD_string_write("1st RAM check\nunsuccessful.\n\n");
      001244 90r06r1C         [24] 4620 	mov	dptr,#___str_15
      001247 75 F0 80         [24] 4621 	mov	b,#0x80
      00124A 12r0ArBA         [24] 4622 	lcall	_LCD_string_write
                                   4623 ;	ecen4330lab7.c:1379: delay(100);
      00124D 90 00 64         [24] 4624 	mov	dptr,#0x0064
      001250 12r01r1A         [24] 4625 	lcall	_delay
                                   4626 ;	ecen4330lab7.c:1381: LCD_string_write("Error at:\n");
      001253 90r06r3A         [24] 4627 	mov	dptr,#___str_16
      001256 75 F0 80         [24] 4628 	mov	b,#0x80
      001259 12r0ArBA         [24] 4629 	lcall	_LCD_string_write
      00125C D0 06            [24] 4630 	pop	ar6
      00125E D0 07            [24] 4631 	pop	ar7
                                   4632 ;	ecen4330lab7.c:1382: HEXtoASCII_16write(i - 1);
      001260 EE               [12] 4633 	mov	a,r6
      001261 24 FF            [12] 4634 	add	a,#0xff
      001263 F5 82            [12] 4635 	mov	dpl,a
      001265 EF               [12] 4636 	mov	a,r7
      001266 34 FF            [12] 4637 	addc	a,#0xff
      001268 F5 83            [12] 4638 	mov	dph,a
      00126A 12r0Dr67         [24] 4639 	lcall	_HEXtoASCII_16write
                                   4640 ;	ecen4330lab7.c:1383: LCD_string_write(": 0x");
      00126D 90r06r45         [24] 4641 	mov	dptr,#___str_17
      001270 75 F0 80         [24] 4642 	mov	b,#0x80
      001273 12r0ArBA         [24] 4643 	lcall	_LCD_string_write
                                   4644 ;	ecen4330lab7.c:1384: HEXtoASCII_8write(data);
      001276 85*20 82         [24] 4645 	mov	dpl,_data
      001279 12r0Dr2A         [24] 4646 	lcall	_HEXtoASCII_8write
                                   4647 ;	ecen4330lab7.c:1386: setTextColor(WHITE, BLACK);
      00127C E4               [12] 4648 	clr	a
      00127D F5*00            [12] 4649 	mov	_setTextColor_PARM_2,a
      00127F F5*01            [12] 4650 	mov	(_setTextColor_PARM_2 + 1),a
      001281 90 FF FF         [24] 4651 	mov	dptr,#0xffff
      001284 12r03rCB         [24] 4652 	lcall	_setTextColor
                                   4653 ;	ecen4330lab7.c:1387: LCD_string_write("Returning to\nmain menu.");
      001287 90r06r4A         [24] 4654 	mov	dptr,#___str_18
      00128A 75 F0 80         [24] 4655 	mov	b,#0x80
      00128D 12r0ArBA         [24] 4656 	lcall	_LCD_string_write
                                   4657 ;	ecen4330lab7.c:1388: delay(200);
      001290 90 00 C8         [24] 4658 	mov	dptr,#0x00c8
      001293 02r01r1A         [24] 4659 	ljmp	_delay
      001296                       4660 00117$:
                                   4661 ;	ecen4330lab7.c:1393: setTextColor(GREEN, BLACK);
      001296 E4               [12] 4662 	clr	a
      001297 F5*00            [12] 4663 	mov	_setTextColor_PARM_2,a
      001299 F5*01            [12] 4664 	mov	(_setTextColor_PARM_2 + 1),a
      00129B 90 07 E0         [24] 4665 	mov	dptr,#0x07e0
      00129E 12r03rCB         [24] 4666 	lcall	_setTextColor
                                   4667 ;	ecen4330lab7.c:1394: LCD_string_write("1st RAM check\nsuccessful.\n\n");
      0012A1 90r06r62         [24] 4668 	mov	dptr,#___str_19
      0012A4 75 F0 80         [24] 4669 	mov	b,#0x80
      0012A7 12r0ArBA         [24] 4670 	lcall	_LCD_string_write
                                   4671 ;	ecen4330lab7.c:1395: delay(200);
      0012AA 90 00 C8         [24] 4672 	mov	dptr,#0x00c8
      0012AD 12r01r1A         [24] 4673 	lcall	_delay
                                   4674 ;	ecen4330lab7.c:1397: resetLCD();
      0012B0 12r0Er4E         [24] 4675 	lcall	_resetLCD
                                   4676 ;	ecen4330lab7.c:1398: LCD_string_write("\nWriting 0xAA\nto all\nexternal RAM\nlocations.\n\n");
      0012B3 90r06r7E         [24] 4677 	mov	dptr,#___str_20
      0012B6 75 F0 80         [24] 4678 	mov	b,#0x80
      0012B9 12r0ArBA         [24] 4679 	lcall	_LCD_string_write
                                   4680 ;	ecen4330lab7.c:1399: testRAM(RAMcheckVal2);
      0012BC 75 82 AA         [24] 4681 	mov	dpl,#0xaa
      0012BF 12r0Er1C         [24] 4682 	lcall	_testRAM
                                   4683 ;	ecen4330lab7.c:1400: RAMwrite(0xFFFF, RAMcheckVal2);
      0012C2 75*00 AA         [24] 4684 	mov	_RAMwrite_PARM_2,#0xaa
      0012C5 90 FF FF         [24] 4685 	mov	dptr,#0xffff
      0012C8 12r0Er0C         [24] 4686 	lcall	_RAMwrite
                                   4687 ;	ecen4330lab7.c:1401: setTextColor(GREEN, BLACK);
      0012CB E4               [12] 4688 	clr	a
      0012CC F5*00            [12] 4689 	mov	_setTextColor_PARM_2,a
      0012CE F5*01            [12] 4690 	mov	(_setTextColor_PARM_2 + 1),a
      0012D0 90 07 E0         [24] 4691 	mov	dptr,#0x07e0
      0012D3 12r03rCB         [24] 4692 	lcall	_setTextColor
                                   4693 ;	ecen4330lab7.c:1402: LCD_string_write("Write\ncomplete.\n");
      0012D6 90r05rE0         [24] 4694 	mov	dptr,#___str_13
      0012D9 75 F0 80         [24] 4695 	mov	b,#0x80
      0012DC 12r0ArBA         [24] 4696 	lcall	_LCD_string_write
                                   4697 ;	ecen4330lab7.c:1403: delay(200);
      0012DF 90 00 C8         [24] 4698 	mov	dptr,#0x00c8
      0012E2 12r01r1A         [24] 4699 	lcall	_delay
                                   4700 ;	ecen4330lab7.c:1406: resetLCD();
      0012E5 12r0Er4E         [24] 4701 	lcall	_resetLCD
                                   4702 ;	ecen4330lab7.c:1407: LCD_string_write("\nVerifying all\nRAM locations\nequal 0xAA.\n\n");
      0012E8 90r06rAD         [24] 4703 	mov	dptr,#___str_21
      0012EB 75 F0 80         [24] 4704 	mov	b,#0x80
      0012EE 12r0ArBA         [24] 4705 	lcall	_LCD_string_write
                                   4706 ;	ecen4330lab7.c:1409: do
      0012F1 7E 00            [12] 4707 	mov	r6,#0x00
      0012F3 7F 00            [12] 4708 	mov	r7,#0x00
      0012F5                       4709 00108$:
                                   4710 ;	ecen4330lab7.c:1411: data = RAMread(i);
      0012F5 8E 82            [24] 4711 	mov	dpl,r6
      0012F7 8F 83            [24] 4712 	mov	dph,r7
      0012F9 C0 07            [24] 4713 	push	ar7
      0012FB C0 06            [24] 4714 	push	ar6
      0012FD 12r0Er3B         [24] 4715 	lcall	_RAMread
      001300 85 82*20         [24] 4716 	mov	_data,dpl
      001303 D0 06            [24] 4717 	pop	ar6
      001305 D0 07            [24] 4718 	pop	ar7
                                   4719 ;	ecen4330lab7.c:1412: i++;
      001307 0E               [12] 4720 	inc	r6
      001308 BE 00 01         [24] 4721 	cjne	r6,#0x00,00170$
      00130B 0F               [12] 4722 	inc	r7
      00130C                       4723 00170$:
                                   4724 ;	ecen4330lab7.c:1413: } while (data == RAMcheckVal2 && i <= __END_RAM__);
      00130C 74 AA            [12] 4725 	mov	a,#0xaa
      00130E B5*20 04         [24] 4726 	cjne	a,_data,00171$
      001311 74 01            [12] 4727 	mov	a,#0x01
      001313 80 01            [24] 4728 	sjmp	00172$
      001315                       4729 00171$:
      001315 E4               [12] 4730 	clr	a
      001316                       4731 00172$:
      001316 FD               [12] 4732 	mov	r5,a
      001317 60 09            [24] 4733 	jz	00130$
      001319 C3               [12] 4734 	clr	c
      00131A 74 FE            [12] 4735 	mov	a,#0xfe
      00131C 9E               [12] 4736 	subb	a,r6
      00131D 74 FF            [12] 4737 	mov	a,#0xff
      00131F 9F               [12] 4738 	subb	a,r7
      001320 50 D3            [24] 4739 	jnc	00108$
      001322                       4740 00130$:
                                   4741 ;	ecen4330lab7.c:1414: if(data == RAMcheckVal2){
      001322 ED               [12] 4742 	mov	a,r5
      001323 60 11            [24] 4743 	jz	00112$
                                   4744 ;	ecen4330lab7.c:1415: data = RAMread(0xFFFF);
      001325 90 FF FF         [24] 4745 	mov	dptr,#0xffff
      001328 C0 07            [24] 4746 	push	ar7
      00132A C0 06            [24] 4747 	push	ar6
      00132C 12r0Er3B         [24] 4748 	lcall	_RAMread
      00132F 85 82*20         [24] 4749 	mov	_data,dpl
      001332 D0 06            [24] 4750 	pop	ar6
      001334 D0 07            [24] 4751 	pop	ar7
      001336                       4752 00112$:
                                   4753 ;	ecen4330lab7.c:1418: if(data != RAMcheckVal2){
      001336 74 AA            [12] 4754 	mov	a,#0xaa
      001338 B5*20 02         [24] 4755 	cjne	a,_data,00176$
      00133B 80 61            [24] 4756 	sjmp	00114$
      00133D                       4757 00176$:
                                   4758 ;	ecen4330lab7.c:1419: setTextColor(RED, BLACK);
      00133D E4               [12] 4759 	clr	a
      00133E F5*00            [12] 4760 	mov	_setTextColor_PARM_2,a
      001340 F5*01            [12] 4761 	mov	(_setTextColor_PARM_2 + 1),a
      001342 90 F8 00         [24] 4762 	mov	dptr,#0xf800
      001345 C0 07            [24] 4763 	push	ar7
      001347 C0 06            [24] 4764 	push	ar6
      001349 12r03rCB         [24] 4765 	lcall	_setTextColor
                                   4766 ;	ecen4330lab7.c:1420: LCD_string_write("2nd RAM check\nunsuccessful.\n\n");
      00134C 90r06rD8         [24] 4767 	mov	dptr,#___str_22
      00134F 75 F0 80         [24] 4768 	mov	b,#0x80
      001352 12r0ArBA         [24] 4769 	lcall	_LCD_string_write
                                   4770 ;	ecen4330lab7.c:1421: delay(100);
      001355 90 00 64         [24] 4771 	mov	dptr,#0x0064
      001358 12r01r1A         [24] 4772 	lcall	_delay
                                   4773 ;	ecen4330lab7.c:1423: LCD_string_write("Error at:\n");
      00135B 90r06r3A         [24] 4774 	mov	dptr,#___str_16
      00135E 75 F0 80         [24] 4775 	mov	b,#0x80
      001361 12r0ArBA         [24] 4776 	lcall	_LCD_string_write
      001364 D0 06            [24] 4777 	pop	ar6
      001366 D0 07            [24] 4778 	pop	ar7
                                   4779 ;	ecen4330lab7.c:1424: HEXtoASCII_16write(i - 1);
      001368 EE               [12] 4780 	mov	a,r6
      001369 24 FF            [12] 4781 	add	a,#0xff
      00136B F5 82            [12] 4782 	mov	dpl,a
      00136D EF               [12] 4783 	mov	a,r7
      00136E 34 FF            [12] 4784 	addc	a,#0xff
      001370 F5 83            [12] 4785 	mov	dph,a
      001372 12r0Dr67         [24] 4786 	lcall	_HEXtoASCII_16write
                                   4787 ;	ecen4330lab7.c:1425: LCD_string_write(": 0x");
      001375 90r06r45         [24] 4788 	mov	dptr,#___str_17
      001378 75 F0 80         [24] 4789 	mov	b,#0x80
      00137B 12r0ArBA         [24] 4790 	lcall	_LCD_string_write
                                   4791 ;	ecen4330lab7.c:1426: HEXtoASCII_8write(data);
      00137E 85*20 82         [24] 4792 	mov	dpl,_data
      001381 12r0Dr2A         [24] 4793 	lcall	_HEXtoASCII_8write
                                   4794 ;	ecen4330lab7.c:1428: setTextColor(WHITE, BLACK);
      001384 E4               [12] 4795 	clr	a
      001385 F5*00            [12] 4796 	mov	_setTextColor_PARM_2,a
      001387 F5*01            [12] 4797 	mov	(_setTextColor_PARM_2 + 1),a
      001389 90 FF FF         [24] 4798 	mov	dptr,#0xffff
      00138C 12r03rCB         [24] 4799 	lcall	_setTextColor
                                   4800 ;	ecen4330lab7.c:1429: LCD_string_write("Returning to\nmain menu.");
      00138F 90r06r4A         [24] 4801 	mov	dptr,#___str_18
      001392 75 F0 80         [24] 4802 	mov	b,#0x80
      001395 12r0ArBA         [24] 4803 	lcall	_LCD_string_write
                                   4804 ;	ecen4330lab7.c:1430: delay(100);
      001398 90 00 64         [24] 4805 	mov	dptr,#0x0064
      00139B 02r01r1A         [24] 4806 	ljmp	_delay
      00139E                       4807 00114$:
                                   4808 ;	ecen4330lab7.c:1435: setTextColor(GREEN, BLACK);
      00139E E4               [12] 4809 	clr	a
      00139F F5*00            [12] 4810 	mov	_setTextColor_PARM_2,a
      0013A1 F5*01            [12] 4811 	mov	(_setTextColor_PARM_2 + 1),a
      0013A3 90 07 E0         [24] 4812 	mov	dptr,#0x07e0
      0013A6 12r03rCB         [24] 4813 	lcall	_setTextColor
                                   4814 ;	ecen4330lab7.c:1436: LCD_string_write("2nd RAM check\nsuccessful.\n\n");
      0013A9 90r06rF6         [24] 4815 	mov	dptr,#___str_23
      0013AC 75 F0 80         [24] 4816 	mov	b,#0x80
      0013AF 12r0ArBA         [24] 4817 	lcall	_LCD_string_write
                                   4818 ;	ecen4330lab7.c:1437: LCD_string_write("RAM check\ncomplete.\n\n");
      0013B2 90r07r12         [24] 4819 	mov	dptr,#___str_24
      0013B5 75 F0 80         [24] 4820 	mov	b,#0x80
      0013B8 12r0ArBA         [24] 4821 	lcall	_LCD_string_write
                                   4822 ;	ecen4330lab7.c:1438: delay(100);
      0013BB 90 00 64         [24] 4823 	mov	dptr,#0x0064
      0013BE 12r01r1A         [24] 4824 	lcall	_delay
                                   4825 ;	ecen4330lab7.c:1439: setTextColor(WHITE, BLACK);
      0013C1 E4               [12] 4826 	clr	a
      0013C2 F5*00            [12] 4827 	mov	_setTextColor_PARM_2,a
      0013C4 F5*01            [12] 4828 	mov	(_setTextColor_PARM_2 + 1),a
      0013C6 90 FF FF         [24] 4829 	mov	dptr,#0xffff
      0013C9 12r03rCB         [24] 4830 	lcall	_setTextColor
                                   4831 ;	ecen4330lab7.c:1440: LCD_string_write("Returning to\nmain menu.");
      0013CC 90r06r4A         [24] 4832 	mov	dptr,#___str_18
      0013CF 75 F0 80         [24] 4833 	mov	b,#0x80
      0013D2 12r0ArBA         [24] 4834 	lcall	_LCD_string_write
                                   4835 ;	ecen4330lab7.c:1441: delay(100);
      0013D5 90 00 64         [24] 4836 	mov	dptr,#0x0064
                                   4837 ;	ecen4330lab7.c:1444: }
      0013D8 02r01r1A         [24] 4838 	ljmp	_delay
                                   4839 ;------------------------------------------------------------
                                   4840 ;Allocation info for local variables in function 'MOVE'
                                   4841 ;------------------------------------------------------------
                                   4842 ;	ecen4330lab7.c:1467: void MOVE(){
                                   4843 ;	-----------------------------------------
                                   4844 ;	 function MOVE
                                   4845 ;	-----------------------------------------
      0013DB                       4846 _MOVE:
                                   4847 ;	ecen4330lab7.c:1468: endAddrCalc = 0;
      0013DB E4               [12] 4848 	clr	a
      0013DC F5*34            [12] 4849 	mov	_endAddrCalc,a
      0013DE F5*35            [12] 4850 	mov	(_endAddrCalc + 1),a
      0013E0 F5*36            [12] 4851 	mov	(_endAddrCalc + 2),a
      0013E2 F5*37            [12] 4852 	mov	(_endAddrCalc + 3),a
                                   4853 ;	ecen4330lab7.c:1469: addr0 = 0;                  // Source Address
      0013E4 F5*21            [12] 4854 	mov	_addr0,a
      0013E6 F5*22            [12] 4855 	mov	(_addr0 + 1),a
                                   4856 ;	ecen4330lab7.c:1470: addr1 = 0;                  // Source End Address
      0013E8 F5*23            [12] 4857 	mov	_addr1,a
      0013EA F5*24            [12] 4858 	mov	(_addr1 + 1),a
                                   4859 ;	ecen4330lab7.c:1471: addr2 = 0;                  // Destination Address
      0013EC F5*25            [12] 4860 	mov	_addr2,a
      0013EE F5*26            [12] 4861 	mov	(_addr2 + 1),a
                                   4862 ;	ecen4330lab7.c:1472: addr3 = 0;                  // Destination End Address
      0013F0 F5*27            [12] 4863 	mov	_addr3,a
      0013F2 F5*28            [12] 4864 	mov	(_addr3 + 1),a
                                   4865 ;	ecen4330lab7.c:1473: currAddr0 = 0;              // Current Source Address
      0013F4 F5*29            [12] 4866 	mov	_currAddr0,a
      0013F6 F5*2A            [12] 4867 	mov	(_currAddr0 + 1),a
                                   4868 ;	ecen4330lab7.c:1474: currAddr1 = 0;              // Current Destination Address
      0013F8 F5*2B            [12] 4869 	mov	_currAddr1,a
      0013FA F5*2C            [12] 4870 	mov	(_currAddr1 + 1),a
                                   4871 ;	ecen4330lab7.c:1477: resetLCD();
      0013FC 12r0Er4E         [24] 4872 	lcall	_resetLCD
                                   4873 ;	ecen4330lab7.c:1478: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n\n  0x____");
      0013FF 90r07r28         [24] 4874 	mov	dptr,#___str_25
      001402 75 F0 80         [24] 4875 	mov	b,#0x80
      001405 12r0ArBA         [24] 4876 	lcall	_LCD_string_write
                                   4877 ;	ecen4330lab7.c:1479: cursor_x -= 4 * textsize * 6;
      001408 E5*0C            [12] 4878 	mov	a,_textsize
      00140A 75 F0 18         [24] 4879 	mov	b,#0x18
      00140D A4               [48] 4880 	mul	ab
      00140E FE               [12] 4881 	mov	r6,a
      00140F AF F0            [24] 4882 	mov	r7,b
      001411 E5*08            [12] 4883 	mov	a,_cursor_x
      001413 C3               [12] 4884 	clr	c
      001414 9E               [12] 4885 	subb	a,r6
      001415 F5*08            [12] 4886 	mov	_cursor_x,a
      001417 E5*09            [12] 4887 	mov	a,(_cursor_x + 1)
      001419 9F               [12] 4888 	subb	a,r7
      00141A F5*09            [12] 4889 	mov	(_cursor_x + 1),a
                                   4890 ;	ecen4330lab7.c:1480: inputRead16();
      00141C 12r0Er9F         [24] 4891 	lcall	_inputRead16
                                   4892 ;	ecen4330lab7.c:1481: addr0 = input16;
      00141F 85*17*21         [24] 4893 	mov	_addr0,_input16
      001422 85*18*22         [24] 4894 	mov	(_addr0 + 1),(_input16 + 1)
                                   4895 ;	ecen4330lab7.c:1484: resetLCD();
      001425 12r0Er4E         [24] 4896 	lcall	_resetLCD
                                   4897 ;	ecen4330lab7.c:1485: LCD_string_write("\nEnter\ndestination\nstarting RAM\naddress:\n\n\n  0x____");
      001428 90r07r57         [24] 4898 	mov	dptr,#___str_26
      00142B 75 F0 80         [24] 4899 	mov	b,#0x80
      00142E 12r0ArBA         [24] 4900 	lcall	_LCD_string_write
                                   4901 ;	ecen4330lab7.c:1486: cursor_x -= 4 * textsize * 6;
      001431 E5*0C            [12] 4902 	mov	a,_textsize
      001433 75 F0 18         [24] 4903 	mov	b,#0x18
      001436 A4               [48] 4904 	mul	ab
      001437 FE               [12] 4905 	mov	r6,a
      001438 AF F0            [24] 4906 	mov	r7,b
      00143A E5*08            [12] 4907 	mov	a,_cursor_x
      00143C C3               [12] 4908 	clr	c
      00143D 9E               [12] 4909 	subb	a,r6
      00143E F5*08            [12] 4910 	mov	_cursor_x,a
      001440 E5*09            [12] 4911 	mov	a,(_cursor_x + 1)
      001442 9F               [12] 4912 	subb	a,r7
      001443 F5*09            [12] 4913 	mov	(_cursor_x + 1),a
                                   4914 ;	ecen4330lab7.c:1487: inputRead16();
      001445 12r0Er9F         [24] 4915 	lcall	_inputRead16
                                   4916 ;	ecen4330lab7.c:1488: addr2 = input16;
      001448 85*17*25         [24] 4917 	mov	_addr2,_input16
      00144B 85*18*26         [24] 4918 	mov	(_addr2 + 1),(_input16 + 1)
                                   4919 ;	ecen4330lab7.c:1491: inputDataType();
      00144E 12r0FrAE         [24] 4920 	lcall	_inputDataType
                                   4921 ;	ecen4330lab7.c:1494: resetLCD();
      001451 12r0Er4E         [24] 4922 	lcall	_resetLCD
                                   4923 ;	ecen4330lab7.c:1495: inputDataSize();
      001454 12r10r6B         [24] 4924 	lcall	_inputDataSize
                                   4925 ;	ecen4330lab7.c:1498: if(addr2 > addr0){
      001457 C3               [12] 4926 	clr	c
      001458 E5*21            [12] 4927 	mov	a,_addr0
      00145A 95*25            [12] 4928 	subb	a,_addr2
      00145C E5*22            [12] 4929 	mov	a,(_addr0 + 1)
      00145E 95*26            [12] 4930 	subb	a,(_addr2 + 1)
      001460 50 63            [24] 4931 	jnc	00108$
                                   4932 ;	ecen4330lab7.c:1499: endAddrCalc = addr2 + (dataSize * dataType);
      001462 85*1A*00         [24] 4933 	mov	__mulint_PARM_2,_dataType
      001465 75*01 00         [24] 4934 	mov	(__mulint_PARM_2 + 1),#0x00
      001468 85*1B 82         [24] 4935 	mov	dpl,_dataSize
      00146B 85*1C 83         [24] 4936 	mov	dph,(_dataSize + 1)
      00146E 12r00r00         [24] 4937 	lcall	__mulint
      001471 AE 82            [24] 4938 	mov	r6,dpl
      001473 AF 83            [24] 4939 	mov	r7,dph
      001475 EE               [12] 4940 	mov	a,r6
      001476 25*25            [12] 4941 	add	a,_addr2
      001478 FC               [12] 4942 	mov	r4,a
      001479 EF               [12] 4943 	mov	a,r7
      00147A 35*26            [12] 4944 	addc	a,(_addr2 + 1)
      00147C FD               [12] 4945 	mov	r5,a
      00147D 8C*34            [24] 4946 	mov	_endAddrCalc,r4
      00147F 8D*35            [24] 4947 	mov	(_endAddrCalc + 1),r5
      001481 75*36 00         [24] 4948 	mov	(_endAddrCalc + 2),#0x00
      001484 75*37 00         [24] 4949 	mov	(_endAddrCalc + 3),#0x00
                                   4950 ;	ecen4330lab7.c:1500: if(endAddrCalc > 0xFFFF){
      001487 C3               [12] 4951 	clr	c
      001488 74 FF            [12] 4952 	mov	a,#0xff
      00148A 95*34            [12] 4953 	subb	a,_endAddrCalc
      00148C 74 FF            [12] 4954 	mov	a,#0xff
      00148E 95*35            [12] 4955 	subb	a,(_endAddrCalc + 1)
      001490 E4               [12] 4956 	clr	a
      001491 95*36            [12] 4957 	subb	a,(_endAddrCalc + 2)
      001493 E4               [12] 4958 	clr	a
      001494 95*37            [12] 4959 	subb	a,(_endAddrCalc + 3)
      001496 50 08            [24] 4960 	jnc	00102$
                                   4961 ;	ecen4330lab7.c:1501: addr3 = 0xFFFF;
      001498 75*27 FF         [24] 4962 	mov	_addr3,#0xff
      00149B 75*28 FF         [24] 4963 	mov	(_addr3 + 1),#0xff
      00149E 80 0A            [24] 4964 	sjmp	00103$
      0014A0                       4965 00102$:
                                   4966 ;	ecen4330lab7.c:1504: addr3 = addr2 + (dataSize * dataType);
      0014A0 EE               [12] 4967 	mov	a,r6
      0014A1 25*25            [12] 4968 	add	a,_addr2
      0014A3 F5*27            [12] 4969 	mov	_addr3,a
      0014A5 EF               [12] 4970 	mov	a,r7
      0014A6 35*26            [12] 4971 	addc	a,(_addr2 + 1)
      0014A8 F5*28            [12] 4972 	mov	(_addr3 + 1),a
      0014AA                       4973 00103$:
                                   4974 ;	ecen4330lab7.c:1506: dataSize = addr3 - addr2;
      0014AA E5*27            [12] 4975 	mov	a,_addr3
      0014AC C3               [12] 4976 	clr	c
      0014AD 95*25            [12] 4977 	subb	a,_addr2
      0014AF F5*1B            [12] 4978 	mov	_dataSize,a
      0014B1 E5*28            [12] 4979 	mov	a,(_addr3 + 1)
      0014B3 95*26            [12] 4980 	subb	a,(_addr2 + 1)
      0014B5 F5*1C            [12] 4981 	mov	(_dataSize + 1),a
                                   4982 ;	ecen4330lab7.c:1507: addr1 = addr0 + dataSize;
      0014B7 E5*1B            [12] 4983 	mov	a,_dataSize
      0014B9 25*21            [12] 4984 	add	a,_addr0
      0014BB F5*23            [12] 4985 	mov	_addr1,a
      0014BD E5*1C            [12] 4986 	mov	a,(_dataSize + 1)
      0014BF 35*22            [12] 4987 	addc	a,(_addr0 + 1)
      0014C1 F5*24            [12] 4988 	mov	(_addr1 + 1),a
      0014C3 80 61            [24] 4989 	sjmp	00109$
      0014C5                       4990 00108$:
                                   4991 ;	ecen4330lab7.c:1510: endAddrCalc = addr0 + (dataSize * dataType);
      0014C5 85*1A*00         [24] 4992 	mov	__mulint_PARM_2,_dataType
      0014C8 75*01 00         [24] 4993 	mov	(__mulint_PARM_2 + 1),#0x00
      0014CB 85*1B 82         [24] 4994 	mov	dpl,_dataSize
      0014CE 85*1C 83         [24] 4995 	mov	dph,(_dataSize + 1)
      0014D1 12r00r00         [24] 4996 	lcall	__mulint
      0014D4 AE 82            [24] 4997 	mov	r6,dpl
      0014D6 AF 83            [24] 4998 	mov	r7,dph
      0014D8 EE               [12] 4999 	mov	a,r6
      0014D9 25*21            [12] 5000 	add	a,_addr0
      0014DB FC               [12] 5001 	mov	r4,a
      0014DC EF               [12] 5002 	mov	a,r7
      0014DD 35*22            [12] 5003 	addc	a,(_addr0 + 1)
      0014DF FD               [12] 5004 	mov	r5,a
      0014E0 8C*34            [24] 5005 	mov	_endAddrCalc,r4
      0014E2 8D*35            [24] 5006 	mov	(_endAddrCalc + 1),r5
      0014E4 75*36 00         [24] 5007 	mov	(_endAddrCalc + 2),#0x00
      0014E7 75*37 00         [24] 5008 	mov	(_endAddrCalc + 3),#0x00
                                   5009 ;	ecen4330lab7.c:1511: if(endAddrCalc > 0xFFFF){
      0014EA C3               [12] 5010 	clr	c
      0014EB 74 FF            [12] 5011 	mov	a,#0xff
      0014ED 95*34            [12] 5012 	subb	a,_endAddrCalc
      0014EF 74 FF            [12] 5013 	mov	a,#0xff
      0014F1 95*35            [12] 5014 	subb	a,(_endAddrCalc + 1)
      0014F3 E4               [12] 5015 	clr	a
      0014F4 95*36            [12] 5016 	subb	a,(_endAddrCalc + 2)
      0014F6 E4               [12] 5017 	clr	a
      0014F7 95*37            [12] 5018 	subb	a,(_endAddrCalc + 3)
      0014F9 50 08            [24] 5019 	jnc	00105$
                                   5020 ;	ecen4330lab7.c:1512: addr1 = 0xFFFF;
      0014FB 75*23 FF         [24] 5021 	mov	_addr1,#0xff
      0014FE 75*24 FF         [24] 5022 	mov	(_addr1 + 1),#0xff
      001501 80 0A            [24] 5023 	sjmp	00106$
      001503                       5024 00105$:
                                   5025 ;	ecen4330lab7.c:1515: addr1 = addr0 + (dataSize * dataType);
      001503 EE               [12] 5026 	mov	a,r6
      001504 25*21            [12] 5027 	add	a,_addr0
      001506 F5*23            [12] 5028 	mov	_addr1,a
      001508 EF               [12] 5029 	mov	a,r7
      001509 35*22            [12] 5030 	addc	a,(_addr0 + 1)
      00150B F5*24            [12] 5031 	mov	(_addr1 + 1),a
      00150D                       5032 00106$:
                                   5033 ;	ecen4330lab7.c:1517: dataSize = addr1 - addr0;
      00150D E5*23            [12] 5034 	mov	a,_addr1
      00150F C3               [12] 5035 	clr	c
      001510 95*21            [12] 5036 	subb	a,_addr0
      001512 F5*1B            [12] 5037 	mov	_dataSize,a
      001514 E5*24            [12] 5038 	mov	a,(_addr1 + 1)
      001516 95*22            [12] 5039 	subb	a,(_addr0 + 1)
      001518 F5*1C            [12] 5040 	mov	(_dataSize + 1),a
                                   5041 ;	ecen4330lab7.c:1518: addr3 = addr2 + dataSize;
      00151A E5*1B            [12] 5042 	mov	a,_dataSize
      00151C 25*25            [12] 5043 	add	a,_addr2
      00151E F5*27            [12] 5044 	mov	_addr3,a
      001520 E5*1C            [12] 5045 	mov	a,(_dataSize + 1)
      001522 35*26            [12] 5046 	addc	a,(_addr2 + 1)
      001524 F5*28            [12] 5047 	mov	(_addr3 + 1),a
      001526                       5048 00109$:
                                   5049 ;	ecen4330lab7.c:1523: if(addr0 < addr2 && addr1 > addr2){
      001526 C3               [12] 5050 	clr	c
      001527 E5*21            [12] 5051 	mov	a,_addr0
      001529 95*25            [12] 5052 	subb	a,_addr2
      00152B E5*22            [12] 5053 	mov	a,(_addr0 + 1)
      00152D 95*26            [12] 5054 	subb	a,(_addr2 + 1)
      00152F 50 4E            [24] 5055 	jnc	00113$
      001531 C3               [12] 5056 	clr	c
      001532 E5*25            [12] 5057 	mov	a,_addr2
      001534 95*23            [12] 5058 	subb	a,_addr1
      001536 E5*26            [12] 5059 	mov	a,(_addr2 + 1)
      001538 95*24            [12] 5060 	subb	a,(_addr1 + 1)
      00153A 50 43            [24] 5061 	jnc	00113$
                                   5062 ;	ecen4330lab7.c:1524: currAddr0 = addr1;
      00153C 85*23*29         [24] 5063 	mov	_currAddr0,_addr1
      00153F 85*24*2A         [24] 5064 	mov	(_currAddr0 + 1),(_addr1 + 1)
                                   5065 ;	ecen4330lab7.c:1525: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      001542 85*27*2B         [24] 5066 	mov	_currAddr1,_addr3
      001545 85*28*2C         [24] 5067 	mov	(_currAddr1 + 1),(_addr3 + 1)
      001548                       5068 00117$:
      001548 C3               [12] 5069 	clr	c
      001549 E5*2B            [12] 5070 	mov	a,_currAddr1
      00154B 95*25            [12] 5071 	subb	a,_addr2
      00154D E5*2C            [12] 5072 	mov	a,(_currAddr1 + 1)
      00154F 95*26            [12] 5073 	subb	a,(_addr2 + 1)
      001551 40 6D            [24] 5074 	jc	00114$
                                   5075 ;	ecen4330lab7.c:1526: data = RAMread(currAddr0);
      001553 85*29 82         [24] 5076 	mov	dpl,_currAddr0
      001556 85*2A 83         [24] 5077 	mov	dph,(_currAddr0 + 1)
      001559 12r0Er3B         [24] 5078 	lcall	_RAMread
      00155C 85 82*20         [24] 5079 	mov	_data,dpl
                                   5080 ;	ecen4330lab7.c:1527: RAMwrite(currAddr1, data);
      00155F 85*20*00         [24] 5081 	mov	_RAMwrite_PARM_2,_data
      001562 85*2B 82         [24] 5082 	mov	dpl,_currAddr1
      001565 85*2C 83         [24] 5083 	mov	dph,(_currAddr1 + 1)
      001568 12r0Er0C         [24] 5084 	lcall	_RAMwrite
                                   5085 ;	ecen4330lab7.c:1528: currAddr0--;
      00156B 15*29            [12] 5086 	dec	_currAddr0
      00156D 74 FF            [12] 5087 	mov	a,#0xff
      00156F B5*29 02         [24] 5088 	cjne	a,_currAddr0,00166$
      001572 15*2A            [12] 5089 	dec	(_currAddr0 + 1)
      001574                       5090 00166$:
                                   5091 ;	ecen4330lab7.c:1525: for(currAddr1 = addr3; currAddr1 >= addr2; currAddr1--){
      001574 15*2B            [12] 5092 	dec	_currAddr1
      001576 74 FF            [12] 5093 	mov	a,#0xff
      001578 B5*2B 02         [24] 5094 	cjne	a,_currAddr1,00167$
      00157B 15*2C            [12] 5095 	dec	(_currAddr1 + 1)
      00157D                       5096 00167$:
      00157D 80 C9            [24] 5097 	sjmp	00117$
      00157F                       5098 00113$:
                                   5099 ;	ecen4330lab7.c:1535: currAddr0 = addr0;
      00157F 85*21*29         [24] 5100 	mov	_currAddr0,_addr0
      001582 85*22*2A         [24] 5101 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5102 ;	ecen4330lab7.c:1536: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      001585 85*25*2B         [24] 5103 	mov	_currAddr1,_addr2
      001588 85*26*2C         [24] 5104 	mov	(_currAddr1 + 1),(_addr2 + 1)
      00158B                       5105 00120$:
      00158B C3               [12] 5106 	clr	c
      00158C E5*27            [12] 5107 	mov	a,_addr3
      00158E 95*2B            [12] 5108 	subb	a,_currAddr1
      001590 E5*28            [12] 5109 	mov	a,(_addr3 + 1)
      001592 95*2C            [12] 5110 	subb	a,(_currAddr1 + 1)
      001594 40 2A            [24] 5111 	jc	00114$
                                   5112 ;	ecen4330lab7.c:1537: data = RAMread(currAddr0);
      001596 85*29 82         [24] 5113 	mov	dpl,_currAddr0
      001599 85*2A 83         [24] 5114 	mov	dph,(_currAddr0 + 1)
      00159C 12r0Er3B         [24] 5115 	lcall	_RAMread
      00159F 85 82*20         [24] 5116 	mov	_data,dpl
                                   5117 ;	ecen4330lab7.c:1538: RAMwrite(currAddr1, data);
      0015A2 85*20*00         [24] 5118 	mov	_RAMwrite_PARM_2,_data
      0015A5 85*2B 82         [24] 5119 	mov	dpl,_currAddr1
      0015A8 85*2C 83         [24] 5120 	mov	dph,(_currAddr1 + 1)
      0015AB 12r0Er0C         [24] 5121 	lcall	_RAMwrite
                                   5122 ;	ecen4330lab7.c:1539: currAddr0++;
      0015AE 05*29            [12] 5123 	inc	_currAddr0
      0015B0 E4               [12] 5124 	clr	a
      0015B1 B5*29 02         [24] 5125 	cjne	a,_currAddr0,00169$
      0015B4 05*2A            [12] 5126 	inc	(_currAddr0 + 1)
      0015B6                       5127 00169$:
                                   5128 ;	ecen4330lab7.c:1536: for(currAddr1 = addr2; currAddr1 <= addr3; currAddr1++){
      0015B6 05*2B            [12] 5129 	inc	_currAddr1
      0015B8 E4               [12] 5130 	clr	a
      0015B9 B5*2B CF         [24] 5131 	cjne	a,_currAddr1,00120$
      0015BC 05*2C            [12] 5132 	inc	(_currAddr1 + 1)
      0015BE 80 CB            [24] 5133 	sjmp	00120$
      0015C0                       5134 00114$:
                                   5135 ;	ecen4330lab7.c:1544: resetLCD();
      0015C0 12r0Er4E         [24] 5136 	lcall	_resetLCD
                                   5137 ;	ecen4330lab7.c:1545: setTextColor(GREEN, BLACK);
      0015C3 E4               [12] 5138 	clr	a
      0015C4 F5*00            [12] 5139 	mov	_setTextColor_PARM_2,a
      0015C6 F5*01            [12] 5140 	mov	(_setTextColor_PARM_2 + 1),a
      0015C8 90 07 E0         [24] 5141 	mov	dptr,#0x07e0
      0015CB 12r03rCB         [24] 5142 	lcall	_setTextColor
                                   5143 ;	ecen4330lab7.c:1546: LCD_string_write("\nMove complete.\n\n");
      0015CE 90r07r8B         [24] 5144 	mov	dptr,#___str_27
      0015D1 75 F0 80         [24] 5145 	mov	b,#0x80
      0015D4 12r0ArBA         [24] 5146 	lcall	_LCD_string_write
                                   5147 ;	ecen4330lab7.c:1547: delay(100);
      0015D7 90 00 64         [24] 5148 	mov	dptr,#0x0064
      0015DA 12r01r1A         [24] 5149 	lcall	_delay
                                   5150 ;	ecen4330lab7.c:1548: setTextColor(WHITE, BLACK);
      0015DD E4               [12] 5151 	clr	a
      0015DE F5*00            [12] 5152 	mov	_setTextColor_PARM_2,a
      0015E0 F5*01            [12] 5153 	mov	(_setTextColor_PARM_2 + 1),a
      0015E2 90 FF FF         [24] 5154 	mov	dptr,#0xffff
      0015E5 12r03rCB         [24] 5155 	lcall	_setTextColor
                                   5156 ;	ecen4330lab7.c:1549: LCD_string_write("Returning to\nmain menu.");
      0015E8 90r06r4A         [24] 5157 	mov	dptr,#___str_18
      0015EB 75 F0 80         [24] 5158 	mov	b,#0x80
      0015EE 12r0ArBA         [24] 5159 	lcall	_LCD_string_write
                                   5160 ;	ecen4330lab7.c:1550: delay(100);
      0015F1 90 00 64         [24] 5161 	mov	dptr,#0x0064
                                   5162 ;	ecen4330lab7.c:1551: }
      0015F4 02r01r1A         [24] 5163 	ljmp	_delay
                                   5164 ;------------------------------------------------------------
                                   5165 ;Allocation info for local variables in function 'COUNT'
                                   5166 ;------------------------------------------------------------
                                   5167 ;i                         Allocated to registers 
                                   5168 ;------------------------------------------------------------
                                   5169 ;	ecen4330lab7.c:1558: void COUNT(){
                                   5170 ;	-----------------------------------------
                                   5171 ;	 function COUNT
                                   5172 ;	-----------------------------------------
      0015F7                       5173 _COUNT:
                                   5174 ;	ecen4330lab7.c:1559: endAddrCalc = 0;
      0015F7 E4               [12] 5175 	clr	a
      0015F8 F5*34            [12] 5176 	mov	_endAddrCalc,a
      0015FA F5*35            [12] 5177 	mov	(_endAddrCalc + 1),a
      0015FC F5*36            [12] 5178 	mov	(_endAddrCalc + 2),a
      0015FE F5*37            [12] 5179 	mov	(_endAddrCalc + 3),a
                                   5180 ;	ecen4330lab7.c:1560: addr0 = 0;                      // Starting Address
      001600 F5*21            [12] 5181 	mov	_addr0,a
      001602 F5*22            [12] 5182 	mov	(_addr0 + 1),a
                                   5183 ;	ecen4330lab7.c:1561: addr1 = 0;                      // End Address
      001604 F5*23            [12] 5184 	mov	_addr1,a
      001606 F5*24            [12] 5185 	mov	(_addr1 + 1),a
                                   5186 ;	ecen4330lab7.c:1562: dataSize = 0;                   // Data Size
      001608 F5*1B            [12] 5187 	mov	_dataSize,a
      00160A F5*1C            [12] 5188 	mov	(_dataSize + 1),a
                                   5189 ;	ecen4330lab7.c:1563: byte1 = 0;                       // Find Value
      00160C F5*2F            [12] 5190 	mov	_byte1,a
      00160E F5*30            [12] 5191 	mov	(_byte1 + 1),a
                                   5192 ;	ecen4330lab7.c:1564: count = 0;
      001610 F5*32            [12] 5193 	mov	_count,a
      001612 F5*33            [12] 5194 	mov	(_count + 1),a
                                   5195 ;	ecen4330lab7.c:1565: addr3 = 0;						// Count overflow
      001614 F5*27            [12] 5196 	mov	_addr3,a
      001616 F5*28            [12] 5197 	mov	(_addr3 + 1),a
                                   5198 ;	ecen4330lab7.c:1566: dataEnd = 0;
                                   5199 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      001618 F5*1E            [12] 5200 	mov	_dataEnd,a
                                   5201 ;	ecen4330lab7.c:1569: resetLCD();
      00161A 12r0Er4E         [24] 5202 	lcall	_resetLCD
                                   5203 ;	ecen4330lab7.c:1570: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      00161D 90r07r9D         [24] 5204 	mov	dptr,#___str_28
      001620 75 F0 80         [24] 5205 	mov	b,#0x80
      001623 12r0ArBA         [24] 5206 	lcall	_LCD_string_write
                                   5207 ;	ecen4330lab7.c:1571: cursor_x -= 4 * textsize * 6;
      001626 E5*0C            [12] 5208 	mov	a,_textsize
      001628 75 F0 18         [24] 5209 	mov	b,#0x18
      00162B A4               [48] 5210 	mul	ab
      00162C FE               [12] 5211 	mov	r6,a
      00162D AF F0            [24] 5212 	mov	r7,b
      00162F E5*08            [12] 5213 	mov	a,_cursor_x
      001631 C3               [12] 5214 	clr	c
      001632 9E               [12] 5215 	subb	a,r6
      001633 F5*08            [12] 5216 	mov	_cursor_x,a
      001635 E5*09            [12] 5217 	mov	a,(_cursor_x + 1)
      001637 9F               [12] 5218 	subb	a,r7
      001638 F5*09            [12] 5219 	mov	(_cursor_x + 1),a
                                   5220 ;	ecen4330lab7.c:1572: inputRead16();                  // Read input
      00163A 12r0Er9F         [24] 5221 	lcall	_inputRead16
                                   5222 ;	ecen4330lab7.c:1573: addr0 = input16;                // Start address
      00163D 85*17*21         [24] 5223 	mov	_addr0,_input16
      001640 85*18*22         [24] 5224 	mov	(_addr0 + 1),(_input16 + 1)
                                   5225 ;	ecen4330lab7.c:1576: resetLCD();
      001643 12r0Er4E         [24] 5226 	lcall	_resetLCD
                                   5227 ;	ecen4330lab7.c:1577: inputDataSize();                // Prompt & read input
      001646 12r10r6B         [24] 5228 	lcall	_inputDataSize
                                   5229 ;	ecen4330lab7.c:1580: resetLCD();
      001649 12r0Er4E         [24] 5230 	lcall	_resetLCD
                                   5231 ;	ecen4330lab7.c:1581: LCD_string_write("\nEnter search\nvalue:\n\n  0x__");
      00164C 90r07rC4         [24] 5232 	mov	dptr,#___str_29
      00164F 75 F0 80         [24] 5233 	mov	b,#0x80
      001652 12r0ArBA         [24] 5234 	lcall	_LCD_string_write
                                   5235 ;	ecen4330lab7.c:1582: cursor_x -= 2 * textsize * 6;
      001655 E5*0C            [12] 5236 	mov	a,_textsize
      001657 75 F0 0C         [24] 5237 	mov	b,#0x0c
      00165A A4               [48] 5238 	mul	ab
      00165B FE               [12] 5239 	mov	r6,a
      00165C AF F0            [24] 5240 	mov	r7,b
      00165E E5*08            [12] 5241 	mov	a,_cursor_x
      001660 C3               [12] 5242 	clr	c
      001661 9E               [12] 5243 	subb	a,r6
      001662 F5*08            [12] 5244 	mov	_cursor_x,a
      001664 E5*09            [12] 5245 	mov	a,(_cursor_x + 1)
      001666 9F               [12] 5246 	subb	a,r7
      001667 F5*09            [12] 5247 	mov	(_cursor_x + 1),a
                                   5248 ;	ecen4330lab7.c:1583: inputRead8();                  // Read input
      001669 12r0Fr5A         [24] 5249 	lcall	_inputRead8
                                   5250 ;	ecen4330lab7.c:1584: byte1 = input8;                 // Find value
      00166C 85*19*2F         [24] 5251 	mov	_byte1,_input8
      00166F 75*30 00         [24] 5252 	mov	(_byte1 + 1),#0x00
                                   5253 ;	ecen4330lab7.c:1587: endAddrCalc = addr0 + dataSize;
      001672 E5*1B            [12] 5254 	mov	a,_dataSize
      001674 25*21            [12] 5255 	add	a,_addr0
      001676 FE               [12] 5256 	mov	r6,a
      001677 E5*1C            [12] 5257 	mov	a,(_dataSize + 1)
      001679 35*22            [12] 5258 	addc	a,(_addr0 + 1)
      00167B FF               [12] 5259 	mov	r7,a
      00167C 8E*34            [24] 5260 	mov	_endAddrCalc,r6
      00167E 8F*35            [24] 5261 	mov	(_endAddrCalc + 1),r7
      001680 75*36 00         [24] 5262 	mov	(_endAddrCalc + 2),#0x00
      001683 75*37 00         [24] 5263 	mov	(_endAddrCalc + 3),#0x00
                                   5264 ;	ecen4330lab7.c:1588: if(endAddrCalc < addr0){ // RAM overflow
      001686 AC*21            [24] 5265 	mov	r4,_addr0
      001688 AD*22            [24] 5266 	mov	r5,(_addr0 + 1)
      00168A 7E 00            [12] 5267 	mov	r6,#0x00
      00168C 7F 00            [12] 5268 	mov	r7,#0x00
      00168E C3               [12] 5269 	clr	c
      00168F E5*34            [12] 5270 	mov	a,_endAddrCalc
      001691 9C               [12] 5271 	subb	a,r4
      001692 E5*35            [12] 5272 	mov	a,(_endAddrCalc + 1)
      001694 9D               [12] 5273 	subb	a,r5
      001695 E5*36            [12] 5274 	mov	a,(_endAddrCalc + 2)
      001697 9E               [12] 5275 	subb	a,r6
      001698 E5*37            [12] 5276 	mov	a,(_endAddrCalc + 3)
      00169A 9F               [12] 5277 	subb	a,r7
      00169B 50 14            [24] 5278 	jnc	00102$
                                   5279 ;	ecen4330lab7.c:1589: addr1 = 0xFFFF;             // Set end address
      00169D 75*23 FF         [24] 5280 	mov	_addr1,#0xff
                                   5281 ;	ecen4330lab7.c:1590: dataSize = addr1 - addr0;   // Recalculate data size
      0016A0 74 FF            [12] 5282 	mov	a,#0xff
      0016A2 F5*24            [12] 5283 	mov	(_addr1 + 1),a
      0016A4 C3               [12] 5284 	clr	c
      0016A5 95*21            [12] 5285 	subb	a,_addr0
      0016A7 F5*1B            [12] 5286 	mov	_dataSize,a
      0016A9 74 FF            [12] 5287 	mov	a,#0xff
      0016AB 95*22            [12] 5288 	subb	a,(_addr0 + 1)
      0016AD F5*1C            [12] 5289 	mov	(_dataSize + 1),a
      0016AF 80 0C            [24] 5290 	sjmp	00103$
      0016B1                       5291 00102$:
                                   5292 ;	ecen4330lab7.c:1593: addr1 = addr0 + dataSize;
      0016B1 E5*1B            [12] 5293 	mov	a,_dataSize
      0016B3 25*21            [12] 5294 	add	a,_addr0
      0016B5 F5*23            [12] 5295 	mov	_addr1,a
      0016B7 E5*1C            [12] 5296 	mov	a,(_dataSize + 1)
      0016B9 35*22            [12] 5297 	addc	a,(_addr0 + 1)
      0016BB F5*24            [12] 5298 	mov	(_addr1 + 1),a
      0016BD                       5299 00103$:
                                   5300 ;	ecen4330lab7.c:1611: int i = addr0;
      0016BD AE*21            [24] 5301 	mov	r6,_addr0
      0016BF AF*22            [24] 5302 	mov	r7,(_addr0 + 1)
                                   5303 ;	ecen4330lab7.c:1612: while(i <= addr1 && dataEnd == 0){
      0016C1                       5304 00111$:
      0016C1 8E 04            [24] 5305 	mov	ar4,r6
      0016C3 8F 05            [24] 5306 	mov	ar5,r7
      0016C5 C3               [12] 5307 	clr	c
      0016C6 E5*23            [12] 5308 	mov	a,_addr1
      0016C8 9C               [12] 5309 	subb	a,r4
      0016C9 E5*24            [12] 5310 	mov	a,(_addr1 + 1)
      0016CB 9D               [12] 5311 	subb	a,r5
      0016CC 40 4C            [24] 5312 	jc	00113$
      0016CE E5*1E            [12] 5313 	mov	a,_dataEnd
      0016D0 70 48            [24] 5314 	jnz	00113$
                                   5315 ;	ecen4330lab7.c:1613: data = RAMread(i);
      0016D2 8E 82            [24] 5316 	mov	dpl,r6
      0016D4 8F 83            [24] 5317 	mov	dph,r7
      0016D6 C0 07            [24] 5318 	push	ar7
      0016D8 C0 06            [24] 5319 	push	ar6
      0016DA 12r0Er3B         [24] 5320 	lcall	_RAMread
      0016DD 85 82*20         [24] 5321 	mov	_data,dpl
      0016E0 D0 06            [24] 5322 	pop	ar6
      0016E2 D0 07            [24] 5323 	pop	ar7
                                   5324 ;	ecen4330lab7.c:1614: if(data == byte1){
      0016E4 AC*20            [24] 5325 	mov	r4,_data
      0016E6 7D 00            [12] 5326 	mov	r5,#0x00
      0016E8 EC               [12] 5327 	mov	a,r4
      0016E9 B5*2F 1A         [24] 5328 	cjne	a,_byte1,00107$
      0016EC ED               [12] 5329 	mov	a,r5
      0016ED B5*30 16         [24] 5330 	cjne	a,(_byte1 + 1),00107$
                                   5331 ;	ecen4330lab7.c:1615: if(count == 0xFFFF){
      0016F0 74 FF            [12] 5332 	mov	a,#0xff
      0016F2 B5*32 09         [24] 5333 	cjne	a,_count,00105$
      0016F5 B5*33 06         [24] 5334 	cjne	a,(_count + 1),00105$
                                   5335 ;	ecen4330lab7.c:1616: addr3 = 1;
      0016F8 75*27 01         [24] 5336 	mov	_addr3,#0x01
      0016FB 75*28 00         [24] 5337 	mov	(_addr3 + 1),#0x00
      0016FE                       5338 00105$:
                                   5339 ;	ecen4330lab7.c:1618: count++;
      0016FE 05*32            [12] 5340 	inc	_count
      001700 E4               [12] 5341 	clr	a
      001701 B5*32 02         [24] 5342 	cjne	a,_count,00173$
      001704 05*33            [12] 5343 	inc	(_count + 1)
      001706                       5344 00173$:
      001706                       5345 00107$:
                                   5346 ;	ecen4330lab7.c:1620: if(i == 0xFFFF){
      001706 8E 04            [24] 5347 	mov	ar4,r6
      001708 8F 05            [24] 5348 	mov	ar5,r7
      00170A BC FF 06         [24] 5349 	cjne	r4,#0xff,00109$
      00170D BD FF 03         [24] 5350 	cjne	r5,#0xff,00109$
                                   5351 ;	ecen4330lab7.c:1621: dataEnd = 1;
      001710 75*1E 01         [24] 5352 	mov	_dataEnd,#0x01
      001713                       5353 00109$:
                                   5354 ;	ecen4330lab7.c:1623: i++;
      001713 0E               [12] 5355 	inc	r6
      001714 BE 00 AA         [24] 5356 	cjne	r6,#0x00,00111$
      001717 0F               [12] 5357 	inc	r7
      001718 80 A7            [24] 5358 	sjmp	00111$
      00171A                       5359 00113$:
                                   5360 ;	ecen4330lab7.c:1626: if(count > 0 || addr3 == 1){
      00171A E5*32            [12] 5361 	mov	a,_count
      00171C 45*33            [12] 5362 	orl	a,(_count + 1)
      00171E 70 0D            [24] 5363 	jnz	00119$
      001720 74 01            [12] 5364 	mov	a,#0x01
      001722 B5*27 06         [24] 5365 	cjne	a,_addr3,00178$
      001725 14               [12] 5366 	dec	a
      001726 B5*28 02         [24] 5367 	cjne	a,(_addr3 + 1),00178$
      001729 80 02            [24] 5368 	sjmp	00179$
      00172B                       5369 00178$:
      00172B 80 5F            [24] 5370 	sjmp	00120$
      00172D                       5371 00179$:
      00172D                       5372 00119$:
                                   5373 ;	ecen4330lab7.c:1627: resetLCD();
      00172D 12r0Er4E         [24] 5374 	lcall	_resetLCD
                                   5375 ;	ecen4330lab7.c:1628: setTextColor(GREEN, BLACK);
      001730 E4               [12] 5376 	clr	a
      001731 F5*00            [12] 5377 	mov	_setTextColor_PARM_2,a
      001733 F5*01            [12] 5378 	mov	(_setTextColor_PARM_2 + 1),a
      001735 90 07 E0         [24] 5379 	mov	dptr,#0x07e0
      001738 12r03rCB         [24] 5380 	lcall	_setTextColor
                                   5381 ;	ecen4330lab7.c:1629: LCD_string_write("\n0x");
      00173B 90r07rE1         [24] 5382 	mov	dptr,#___str_30
      00173E 75 F0 80         [24] 5383 	mov	b,#0x80
      001741 12r0ArBA         [24] 5384 	lcall	_LCD_string_write
                                   5385 ;	ecen4330lab7.c:1630: HEXtoASCII_8write(byte1);
      001744 85*2F 82         [24] 5386 	mov	dpl,_byte1
      001747 12r0Dr2A         [24] 5387 	lcall	_HEXtoASCII_8write
                                   5388 ;	ecen4330lab7.c:1631: LCD_string_write(" found\n");
      00174A 90r07rE5         [24] 5389 	mov	dptr,#___str_31
      00174D 75 F0 80         [24] 5390 	mov	b,#0x80
      001750 12r0ArBA         [24] 5391 	lcall	_LCD_string_write
                                   5392 ;	ecen4330lab7.c:1633: if(count > 0){
      001753 E5*32            [12] 5393 	mov	a,_count
      001755 45*33            [12] 5394 	orl	a,(_count + 1)
      001757 60 0B            [24] 5395 	jz	00117$
                                   5396 ;	ecen4330lab7.c:1634: HEXtoASCII_16write(count);
      001759 85*32 82         [24] 5397 	mov	dpl,_count
      00175C 85*33 83         [24] 5398 	mov	dph,(_count + 1)
      00175F 12r0Dr67         [24] 5399 	lcall	_HEXtoASCII_16write
      001762 80 16            [24] 5400 	sjmp	00118$
      001764                       5401 00117$:
                                   5402 ;	ecen4330lab7.c:1636: else if(addr3 == 1){
      001764 74 01            [12] 5403 	mov	a,#0x01
      001766 B5*27 06         [24] 5404 	cjne	a,_addr3,00181$
      001769 14               [12] 5405 	dec	a
      00176A B5*28 02         [24] 5406 	cjne	a,(_addr3 + 1),00181$
      00176D 80 02            [24] 5407 	sjmp	00182$
      00176F                       5408 00181$:
      00176F 80 09            [24] 5409 	sjmp	00118$
      001771                       5410 00182$:
                                   5411 ;	ecen4330lab7.c:1637: LCD_string_write("0x10000");
      001771 90r07rED         [24] 5412 	mov	dptr,#___str_32
      001774 75 F0 80         [24] 5413 	mov	b,#0x80
      001777 12r0ArBA         [24] 5414 	lcall	_LCD_string_write
      00177A                       5415 00118$:
                                   5416 ;	ecen4330lab7.c:1639: LCD_string_write("\ntimes.");
      00177A 90r07rF5         [24] 5417 	mov	dptr,#___str_33
      00177D 75 F0 80         [24] 5418 	mov	b,#0x80
      001780 12r0ArBA         [24] 5419 	lcall	_LCD_string_write
                                   5420 ;	ecen4330lab7.c:1640: delay(300);
      001783 90 01 2C         [24] 5421 	mov	dptr,#0x012c
      001786 12r01r1A         [24] 5422 	lcall	_delay
                                   5423 ;	ecen4330lab7.c:1641: FIND_display();                 // Display dump data
      001789 02r1DrC7         [24] 5424 	ljmp	_FIND_display
      00178C                       5425 00120$:
                                   5426 ;	ecen4330lab7.c:1644: resetLCD();
      00178C 12r0Er4E         [24] 5427 	lcall	_resetLCD
                                   5428 ;	ecen4330lab7.c:1645: LCD_string_write("\n0x");
      00178F 90r07rE1         [24] 5429 	mov	dptr,#___str_30
      001792 75 F0 80         [24] 5430 	mov	b,#0x80
      001795 12r0ArBA         [24] 5431 	lcall	_LCD_string_write
                                   5432 ;	ecen4330lab7.c:1646: HEXtoASCII_8write(byte1);
      001798 85*2F 82         [24] 5433 	mov	dpl,_byte1
      00179B 12r0Dr2A         [24] 5434 	lcall	_HEXtoASCII_8write
                                   5435 ;	ecen4330lab7.c:1647: LCD_string_write(" not\nfound in\nexternal RAM\n");
      00179E 90r07rFD         [24] 5436 	mov	dptr,#___str_34
      0017A1 75 F0 80         [24] 5437 	mov	b,#0x80
      0017A4 12r0ArBA         [24] 5438 	lcall	_LCD_string_write
                                   5439 ;	ecen4330lab7.c:1648: HEXtoASCII_16write(addr0);
      0017A7 85*21 82         [24] 5440 	mov	dpl,_addr0
      0017AA 85*22 83         [24] 5441 	mov	dph,(_addr0 + 1)
      0017AD 12r0Dr67         [24] 5442 	lcall	_HEXtoASCII_16write
                                   5443 ;	ecen4330lab7.c:1649: LCD_string_write(" -\n");
      0017B0 90r08r19         [24] 5444 	mov	dptr,#___str_35
      0017B3 75 F0 80         [24] 5445 	mov	b,#0x80
      0017B6 12r0ArBA         [24] 5446 	lcall	_LCD_string_write
                                   5447 ;	ecen4330lab7.c:1650: HEXtoASCII_16write(addr1);
      0017B9 85*23 82         [24] 5448 	mov	dpl,_addr1
      0017BC 85*24 83         [24] 5449 	mov	dph,(_addr1 + 1)
      0017BF 12r0Dr67         [24] 5450 	lcall	_HEXtoASCII_16write
                                   5451 ;	ecen4330lab7.c:1651: delay(300);
      0017C2 90 01 2C         [24] 5452 	mov	dptr,#0x012c
      0017C5 12r01r1A         [24] 5453 	lcall	_delay
                                   5454 ;	ecen4330lab7.c:1652: resetLCD();
      0017C8 12r0Er4E         [24] 5455 	lcall	_resetLCD
                                   5456 ;	ecen4330lab7.c:1653: LCD_string_write("Returning to\nmain menu.");
      0017CB 90r06r4A         [24] 5457 	mov	dptr,#___str_18
      0017CE 75 F0 80         [24] 5458 	mov	b,#0x80
      0017D1 12r0ArBA         [24] 5459 	lcall	_LCD_string_write
                                   5460 ;	ecen4330lab7.c:1654: delay(200);
      0017D4 90 00 C8         [24] 5461 	mov	dptr,#0x00c8
                                   5462 ;	ecen4330lab7.c:1656: }
      0017D7 02r01r1A         [24] 5463 	ljmp	_delay
                                   5464 ;------------------------------------------------------------
                                   5465 ;Allocation info for local variables in function 'DUMP_display'
                                   5466 ;------------------------------------------------------------
                                   5467 ;i                         Allocated to registers r6 r7 
                                   5468 ;j                         Allocated to registers r4 r5 
                                   5469 ;------------------------------------------------------------
                                   5470 ;	ecen4330lab7.c:1665: void DUMP_display(){
                                   5471 ;	-----------------------------------------
                                   5472 ;	 function DUMP_display
                                   5473 ;	-----------------------------------------
      0017DA                       5474 _DUMP_display:
                                   5475 ;	ecen4330lab7.c:1668: currAddr1 = 0;              // Page Count
      0017DA E4               [12] 5476 	clr	a
      0017DB F5*2B            [12] 5477 	mov	_currAddr1,a
      0017DD F5*2C            [12] 5478 	mov	(_currAddr1 + 1),a
                                   5479 ;	ecen4330lab7.c:1669: dataEnd = 0;
                                   5480 ;	1-genFromRTrack replaced	mov	_dataEnd,#0x00
      0017DF F5*1E            [12] 5481 	mov	_dataEnd,a
                                   5482 ;	ecen4330lab7.c:1670: addr2 = 0;					// Prev data count
      0017E1 F5*25            [12] 5483 	mov	_addr2,a
      0017E3 F5*26            [12] 5484 	mov	(_addr2 + 1),a
                                   5485 ;	ecen4330lab7.c:1672: currAddr0 = addr0;          // Set current address
      0017E5 85*21*29         [24] 5486 	mov	_currAddr0,_addr0
      0017E8 85*22*2A         [24] 5487 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   5488 ;	ecen4330lab7.c:1674: do{
      0017EB                       5489 00134$:
                                   5490 ;	ecen4330lab7.c:1675: resetLCD();
      0017EB 12r0Er4E         [24] 5491 	lcall	_resetLCD
                                   5492 ;	ecen4330lab7.c:1676: setTextSize(2);
      0017EE 75 82 02         [24] 5493 	mov	dpl,#0x02
      0017F1 12r03rD8         [24] 5494 	lcall	_setTextSize
                                   5495 ;	ecen4330lab7.c:1677: LCD_string_write("\n");
      0017F4 90r08r1D         [24] 5496 	mov	dptr,#___str_36
      0017F7 75 F0 80         [24] 5497 	mov	b,#0x80
      0017FA 12r0ArBA         [24] 5498 	lcall	_LCD_string_write
                                   5499 ;	ecen4330lab7.c:1680: if(dataSize >= 10){
      0017FD C3               [12] 5500 	clr	c
      0017FE E5*1B            [12] 5501 	mov	a,_dataSize
      001800 94 0A            [12] 5502 	subb	a,#0x0a
      001802 E5*1C            [12] 5503 	mov	a,(_dataSize + 1)
      001804 94 00            [12] 5504 	subb	a,#0x00
      001806 50 03            [24] 5505 	jnc	00258$
      001808 02r18rA9         [24] 5506 	ljmp	00119$
      00180B                       5507 00258$:
                                   5508 ;	ecen4330lab7.c:1681: addr2 = 10;
      00180B 75*25 0A         [24] 5509 	mov	_addr2,#0x0a
      00180E 75*26 00         [24] 5510 	mov	(_addr2 + 1),#0x00
                                   5511 ;	ecen4330lab7.c:1683: for(i = 0; i < 10; i++){
      001811 7E 00            [12] 5512 	mov	r6,#0x00
      001813 7F 00            [12] 5513 	mov	r7,#0x00
      001815                       5514 00140$:
                                   5515 ;	ecen4330lab7.c:1684: HEXtoASCII_16write(currAddr0);
      001815 85*29 82         [24] 5516 	mov	dpl,_currAddr0
      001818 85*2A 83         [24] 5517 	mov	dph,(_currAddr0 + 1)
      00181B C0 07            [24] 5518 	push	ar7
      00181D C0 06            [24] 5519 	push	ar6
      00181F 12r0Dr67         [24] 5520 	lcall	_HEXtoASCII_16write
                                   5521 ;	ecen4330lab7.c:1685: LCD_string_write(": 0x");
      001822 90r06r45         [24] 5522 	mov	dptr,#___str_17
      001825 75 F0 80         [24] 5523 	mov	b,#0x80
      001828 12r0ArBA         [24] 5524 	lcall	_LCD_string_write
      00182B D0 06            [24] 5525 	pop	ar6
      00182D D0 07            [24] 5526 	pop	ar7
                                   5527 ;	ecen4330lab7.c:1686: for(j = 0; j < dataType; j++){
      00182F 7C 00            [12] 5528 	mov	r4,#0x00
      001831 7D 00            [12] 5529 	mov	r5,#0x00
      001833                       5530 00138$:
      001833 AA*1A            [24] 5531 	mov	r2,_dataType
      001835 7B 00            [12] 5532 	mov	r3,#0x00
      001837 C3               [12] 5533 	clr	c
      001838 EC               [12] 5534 	mov	a,r4
      001839 9A               [12] 5535 	subb	a,r2
      00183A ED               [12] 5536 	mov	a,r5
      00183B 64 80            [12] 5537 	xrl	a,#0x80
      00183D 8B F0            [24] 5538 	mov	b,r3
      00183F 63 F0 80         [24] 5539 	xrl	b,#0x80
      001842 95 F0            [12] 5540 	subb	a,b
      001844 50 2B            [24] 5541 	jnc	00101$
                                   5542 ;	ecen4330lab7.c:1687: HEXtoASCII_8write(RAMread(currAddr0));
      001846 85*29 82         [24] 5543 	mov	dpl,_currAddr0
      001849 85*2A 83         [24] 5544 	mov	dph,(_currAddr0 + 1)
      00184C C0 07            [24] 5545 	push	ar7
      00184E C0 06            [24] 5546 	push	ar6
      001850 C0 05            [24] 5547 	push	ar5
      001852 C0 04            [24] 5548 	push	ar4
      001854 12r0Er3B         [24] 5549 	lcall	_RAMread
      001857 12r0Dr2A         [24] 5550 	lcall	_HEXtoASCII_8write
      00185A D0 04            [24] 5551 	pop	ar4
      00185C D0 05            [24] 5552 	pop	ar5
      00185E D0 06            [24] 5553 	pop	ar6
      001860 D0 07            [24] 5554 	pop	ar7
                                   5555 ;	ecen4330lab7.c:1688: currAddr0++;
      001862 05*29            [12] 5556 	inc	_currAddr0
      001864 E4               [12] 5557 	clr	a
      001865 B5*29 02         [24] 5558 	cjne	a,_currAddr0,00260$
      001868 05*2A            [12] 5559 	inc	(_currAddr0 + 1)
      00186A                       5560 00260$:
                                   5561 ;	ecen4330lab7.c:1686: for(j = 0; j < dataType; j++){
      00186A 0C               [12] 5562 	inc	r4
      00186B BC 00 C5         [24] 5563 	cjne	r4,#0x00,00138$
      00186E 0D               [12] 5564 	inc	r5
      00186F 80 C2            [24] 5565 	sjmp	00138$
      001871                       5566 00101$:
                                   5567 ;	ecen4330lab7.c:1690: LCD_string_write("\n");
      001871 90r08r1D         [24] 5568 	mov	dptr,#___str_36
      001874 75 F0 80         [24] 5569 	mov	b,#0x80
      001877 C0 07            [24] 5570 	push	ar7
      001879 C0 06            [24] 5571 	push	ar6
      00187B 12r0ArBA         [24] 5572 	lcall	_LCD_string_write
      00187E D0 06            [24] 5573 	pop	ar6
      001880 D0 07            [24] 5574 	pop	ar7
                                   5575 ;	ecen4330lab7.c:1691: dataSize--;
      001882 15*1B            [12] 5576 	dec	_dataSize
      001884 74 FF            [12] 5577 	mov	a,#0xff
      001886 B5*1B 02         [24] 5578 	cjne	a,_dataSize,00262$
      001889 15*1C            [12] 5579 	dec	(_dataSize + 1)
      00188B                       5580 00262$:
                                   5581 ;	ecen4330lab7.c:1683: for(i = 0; i < 10; i++){
      00188B 0E               [12] 5582 	inc	r6
      00188C BE 00 01         [24] 5583 	cjne	r6,#0x00,00263$
      00188F 0F               [12] 5584 	inc	r7
      001890                       5585 00263$:
      001890 C3               [12] 5586 	clr	c
      001891 EE               [12] 5587 	mov	a,r6
      001892 94 0A            [12] 5588 	subb	a,#0x0a
      001894 EF               [12] 5589 	mov	a,r7
      001895 64 80            [12] 5590 	xrl	a,#0x80
      001897 94 80            [12] 5591 	subb	a,#0x80
      001899 50 03            [24] 5592 	jnc	00264$
      00189B 02r18r15         [24] 5593 	ljmp	00140$
      00189E                       5594 00264$:
                                   5595 ;	ecen4330lab7.c:1693: currAddr1++;        // Next page
      00189E 05*2B            [12] 5596 	inc	_currAddr1
      0018A0 E4               [12] 5597 	clr	a
      0018A1 B5*2B 02         [24] 5598 	cjne	a,_currAddr1,00265$
      0018A4 05*2C            [12] 5599 	inc	(_currAddr1 + 1)
      0018A6                       5600 00265$:
      0018A6 02r1Ar0E         [24] 5601 	ljmp	00120$
      0018A9                       5602 00119$:
                                   5603 ;	ecen4330lab7.c:1697: else if(dataSize > 0 && dataSize < 10){
      0018A9 E5*1B            [12] 5604 	mov	a,_dataSize
      0018AB 45*1C            [12] 5605 	orl	a,(_dataSize + 1)
      0018AD 70 03            [24] 5606 	jnz	00266$
      0018AF 02r19r98         [24] 5607 	ljmp	00115$
      0018B2                       5608 00266$:
      0018B2 C3               [12] 5609 	clr	c
      0018B3 E5*1B            [12] 5610 	mov	a,_dataSize
      0018B5 94 0A            [12] 5611 	subb	a,#0x0a
      0018B7 E5*1C            [12] 5612 	mov	a,(_dataSize + 1)
      0018B9 94 00            [12] 5613 	subb	a,#0x00
      0018BB 40 03            [24] 5614 	jc	00267$
      0018BD 02r19r98         [24] 5615 	ljmp	00115$
      0018C0                       5616 00267$:
                                   5617 ;	ecen4330lab7.c:1698: addr2 = dataSize;
      0018C0 85*1B*25         [24] 5618 	mov	_addr2,_dataSize
      0018C3 85*1C*26         [24] 5619 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5620 ;	ecen4330lab7.c:1700: while(dataSize > 0){
      0018C6                       5621 00104$:
      0018C6 E5*1B            [12] 5622 	mov	a,_dataSize
      0018C8 45*1C            [12] 5623 	orl	a,(_dataSize + 1)
      0018CA 60 60            [24] 5624 	jz	00106$
                                   5625 ;	ecen4330lab7.c:1701: HEXtoASCII_16write(currAddr0);
      0018CC 85*29 82         [24] 5626 	mov	dpl,_currAddr0
      0018CF 85*2A 83         [24] 5627 	mov	dph,(_currAddr0 + 1)
      0018D2 12r0Dr67         [24] 5628 	lcall	_HEXtoASCII_16write
                                   5629 ;	ecen4330lab7.c:1702: LCD_string_write(": 0x");
      0018D5 90r06r45         [24] 5630 	mov	dptr,#___str_17
      0018D8 75 F0 80         [24] 5631 	mov	b,#0x80
      0018DB 12r0ArBA         [24] 5632 	lcall	_LCD_string_write
                                   5633 ;	ecen4330lab7.c:1703: for(j = 0; j < dataType; j++){
      0018DE 7E 00            [12] 5634 	mov	r6,#0x00
      0018E0 7F 00            [12] 5635 	mov	r7,#0x00
      0018E2                       5636 00143$:
      0018E2 AC*1A            [24] 5637 	mov	r4,_dataType
      0018E4 7D 00            [12] 5638 	mov	r5,#0x00
      0018E6 C3               [12] 5639 	clr	c
      0018E7 EE               [12] 5640 	mov	a,r6
      0018E8 9C               [12] 5641 	subb	a,r4
      0018E9 EF               [12] 5642 	mov	a,r7
      0018EA 64 80            [12] 5643 	xrl	a,#0x80
      0018EC 8D F0            [24] 5644 	mov	b,r5
      0018EE 63 F0 80         [24] 5645 	xrl	b,#0x80
      0018F1 95 F0            [12] 5646 	subb	a,b
      0018F3 50 23            [24] 5647 	jnc	00103$
                                   5648 ;	ecen4330lab7.c:1704: HEXtoASCII_8write(RAMread(currAddr0));
      0018F5 85*29 82         [24] 5649 	mov	dpl,_currAddr0
      0018F8 85*2A 83         [24] 5650 	mov	dph,(_currAddr0 + 1)
      0018FB C0 07            [24] 5651 	push	ar7
      0018FD C0 06            [24] 5652 	push	ar6
      0018FF 12r0Er3B         [24] 5653 	lcall	_RAMread
      001902 12r0Dr2A         [24] 5654 	lcall	_HEXtoASCII_8write
      001905 D0 06            [24] 5655 	pop	ar6
      001907 D0 07            [24] 5656 	pop	ar7
                                   5657 ;	ecen4330lab7.c:1705: currAddr0++;
      001909 05*29            [12] 5658 	inc	_currAddr0
      00190B E4               [12] 5659 	clr	a
      00190C B5*29 02         [24] 5660 	cjne	a,_currAddr0,00270$
      00190F 05*2A            [12] 5661 	inc	(_currAddr0 + 1)
      001911                       5662 00270$:
                                   5663 ;	ecen4330lab7.c:1703: for(j = 0; j < dataType; j++){
      001911 0E               [12] 5664 	inc	r6
      001912 BE 00 CD         [24] 5665 	cjne	r6,#0x00,00143$
      001915 0F               [12] 5666 	inc	r7
      001916 80 CA            [24] 5667 	sjmp	00143$
      001918                       5668 00103$:
                                   5669 ;	ecen4330lab7.c:1707: LCD_string_write("\n");
      001918 90r08r1D         [24] 5670 	mov	dptr,#___str_36
      00191B 75 F0 80         [24] 5671 	mov	b,#0x80
      00191E 12r0ArBA         [24] 5672 	lcall	_LCD_string_write
                                   5673 ;	ecen4330lab7.c:1708: dataSize--;
      001921 15*1B            [12] 5674 	dec	_dataSize
      001923 74 FF            [12] 5675 	mov	a,#0xff
      001925 B5*1B 02         [24] 5676 	cjne	a,_dataSize,00272$
      001928 15*1C            [12] 5677 	dec	(_dataSize + 1)
      00192A                       5678 00272$:
      00192A 80 9A            [24] 5679 	sjmp	00104$
      00192C                       5680 00106$:
                                   5681 ;	ecen4330lab7.c:1710: if(addr3 > 0){
      00192C E5*27            [12] 5682 	mov	a,_addr3
      00192E 45*28            [12] 5683 	orl	a,(_addr3 + 1)
      001930 60 5C            [24] 5684 	jz	00109$
                                   5685 ;	ecen4330lab7.c:1711: HEXtoASCII_16write(currAddr0);
      001932 85*29 82         [24] 5686 	mov	dpl,_currAddr0
      001935 85*2A 83         [24] 5687 	mov	dph,(_currAddr0 + 1)
      001938 12r0Dr67         [24] 5688 	lcall	_HEXtoASCII_16write
                                   5689 ;	ecen4330lab7.c:1712: LCD_string_write(": 0x");
      00193B 90r06r45         [24] 5690 	mov	dptr,#___str_17
      00193E 75 F0 80         [24] 5691 	mov	b,#0x80
      001941 12r0ArBA         [24] 5692 	lcall	_LCD_string_write
                                   5693 ;	ecen4330lab7.c:1713: for(j = 0; j < addr3; j++){
      001944 7E 00            [12] 5694 	mov	r6,#0x00
      001946 7F 00            [12] 5695 	mov	r7,#0x00
      001948                       5696 00146$:
      001948 8E 04            [24] 5697 	mov	ar4,r6
      00194A 8F 05            [24] 5698 	mov	ar5,r7
      00194C C3               [12] 5699 	clr	c
      00194D EC               [12] 5700 	mov	a,r4
      00194E 95*27            [12] 5701 	subb	a,_addr3
      001950 ED               [12] 5702 	mov	a,r5
      001951 95*28            [12] 5703 	subb	a,(_addr3 + 1)
      001953 50 23            [24] 5704 	jnc	00107$
                                   5705 ;	ecen4330lab7.c:1714: HEXtoASCII_8write(RAMread(currAddr0));
      001955 85*29 82         [24] 5706 	mov	dpl,_currAddr0
      001958 85*2A 83         [24] 5707 	mov	dph,(_currAddr0 + 1)
      00195B C0 07            [24] 5708 	push	ar7
      00195D C0 06            [24] 5709 	push	ar6
      00195F 12r0Er3B         [24] 5710 	lcall	_RAMread
      001962 12r0Dr2A         [24] 5711 	lcall	_HEXtoASCII_8write
      001965 D0 06            [24] 5712 	pop	ar6
      001967 D0 07            [24] 5713 	pop	ar7
                                   5714 ;	ecen4330lab7.c:1715: currAddr0++;
      001969 05*29            [12] 5715 	inc	_currAddr0
      00196B E4               [12] 5716 	clr	a
      00196C B5*29 02         [24] 5717 	cjne	a,_currAddr0,00275$
      00196F 05*2A            [12] 5718 	inc	(_currAddr0 + 1)
      001971                       5719 00275$:
                                   5720 ;	ecen4330lab7.c:1713: for(j = 0; j < addr3; j++){
      001971 0E               [12] 5721 	inc	r6
      001972 BE 00 D3         [24] 5722 	cjne	r6,#0x00,00146$
      001975 0F               [12] 5723 	inc	r7
      001976 80 D0            [24] 5724 	sjmp	00146$
      001978                       5725 00107$:
                                   5726 ;	ecen4330lab7.c:1717: currAddr0 -= addr3;
      001978 E5*29            [12] 5727 	mov	a,_currAddr0
      00197A C3               [12] 5728 	clr	c
      00197B 95*27            [12] 5729 	subb	a,_addr3
      00197D F5*29            [12] 5730 	mov	_currAddr0,a
      00197F E5*2A            [12] 5731 	mov	a,(_currAddr0 + 1)
      001981 95*28            [12] 5732 	subb	a,(_addr3 + 1)
      001983 F5*2A            [12] 5733 	mov	(_currAddr0 + 1),a
                                   5734 ;	ecen4330lab7.c:1718: LCD_string_write("\n");
      001985 90r08r1D         [24] 5735 	mov	dptr,#___str_36
      001988 75 F0 80         [24] 5736 	mov	b,#0x80
      00198B 12r0ArBA         [24] 5737 	lcall	_LCD_string_write
      00198E                       5738 00109$:
                                   5739 ;	ecen4330lab7.c:1720: currAddr1++; 
      00198E 05*2B            [12] 5740 	inc	_currAddr1
      001990 E4               [12] 5741 	clr	a
      001991 B5*2B 7A         [24] 5742 	cjne	a,_currAddr1,00120$
      001994 05*2C            [12] 5743 	inc	(_currAddr1 + 1)
      001996 80 76            [24] 5744 	sjmp	00120$
      001998                       5745 00115$:
                                   5746 ;	ecen4330lab7.c:1723: else if(dataSize == 0 && addr3 > 0){
      001998 E5*1B            [12] 5747 	mov	a,_dataSize
      00199A 45*1C            [12] 5748 	orl	a,(_dataSize + 1)
      00199C 70 70            [24] 5749 	jnz	00120$
      00199E E5*27            [12] 5750 	mov	a,_addr3
      0019A0 45*28            [12] 5751 	orl	a,(_addr3 + 1)
      0019A2 60 6A            [24] 5752 	jz	00120$
                                   5753 ;	ecen4330lab7.c:1724: addr2 = dataSize;
      0019A4 85*1B*25         [24] 5754 	mov	_addr2,_dataSize
      0019A7 85*1C*26         [24] 5755 	mov	(_addr2 + 1),(_dataSize + 1)
                                   5756 ;	ecen4330lab7.c:1725: HEXtoASCII_16write(currAddr0);
      0019AA 85*29 82         [24] 5757 	mov	dpl,_currAddr0
      0019AD 85*2A 83         [24] 5758 	mov	dph,(_currAddr0 + 1)
      0019B0 12r0Dr67         [24] 5759 	lcall	_HEXtoASCII_16write
                                   5760 ;	ecen4330lab7.c:1726: LCD_string_write(": 0x");
      0019B3 90r06r45         [24] 5761 	mov	dptr,#___str_17
      0019B6 75 F0 80         [24] 5762 	mov	b,#0x80
      0019B9 12r0ArBA         [24] 5763 	lcall	_LCD_string_write
                                   5764 ;	ecen4330lab7.c:1727: for(j = 0; j < addr3; j++){
      0019BC 7E 00            [12] 5765 	mov	r6,#0x00
      0019BE 7F 00            [12] 5766 	mov	r7,#0x00
      0019C0                       5767 00149$:
      0019C0 8E 04            [24] 5768 	mov	ar4,r6
      0019C2 8F 05            [24] 5769 	mov	ar5,r7
      0019C4 C3               [12] 5770 	clr	c
      0019C5 EC               [12] 5771 	mov	a,r4
      0019C6 95*27            [12] 5772 	subb	a,_addr3
      0019C8 ED               [12] 5773 	mov	a,r5
      0019C9 95*28            [12] 5774 	subb	a,(_addr3 + 1)
      0019CB 50 23            [24] 5775 	jnc	00110$
                                   5776 ;	ecen4330lab7.c:1728: HEXtoASCII_8write(RAMread(currAddr0));
      0019CD 85*29 82         [24] 5777 	mov	dpl,_currAddr0
      0019D0 85*2A 83         [24] 5778 	mov	dph,(_currAddr0 + 1)
      0019D3 C0 07            [24] 5779 	push	ar7
      0019D5 C0 06            [24] 5780 	push	ar6
      0019D7 12r0Er3B         [24] 5781 	lcall	_RAMread
      0019DA 12r0Dr2A         [24] 5782 	lcall	_HEXtoASCII_8write
      0019DD D0 06            [24] 5783 	pop	ar6
      0019DF D0 07            [24] 5784 	pop	ar7
                                   5785 ;	ecen4330lab7.c:1729: currAddr0++;
      0019E1 05*29            [12] 5786 	inc	_currAddr0
      0019E3 E4               [12] 5787 	clr	a
      0019E4 B5*29 02         [24] 5788 	cjne	a,_currAddr0,00281$
      0019E7 05*2A            [12] 5789 	inc	(_currAddr0 + 1)
      0019E9                       5790 00281$:
                                   5791 ;	ecen4330lab7.c:1727: for(j = 0; j < addr3; j++){
      0019E9 0E               [12] 5792 	inc	r6
      0019EA BE 00 D3         [24] 5793 	cjne	r6,#0x00,00149$
      0019ED 0F               [12] 5794 	inc	r7
      0019EE 80 D0            [24] 5795 	sjmp	00149$
      0019F0                       5796 00110$:
                                   5797 ;	ecen4330lab7.c:1731: LCD_string_write("\n");
      0019F0 90r08r1D         [24] 5798 	mov	dptr,#___str_36
      0019F3 75 F0 80         [24] 5799 	mov	b,#0x80
      0019F6 12r0ArBA         [24] 5800 	lcall	_LCD_string_write
                                   5801 ;	ecen4330lab7.c:1732: currAddr1++; 
      0019F9 05*2B            [12] 5802 	inc	_currAddr1
      0019FB E4               [12] 5803 	clr	a
      0019FC B5*2B 02         [24] 5804 	cjne	a,_currAddr1,00283$
      0019FF 05*2C            [12] 5805 	inc	(_currAddr1 + 1)
      001A01                       5806 00283$:
                                   5807 ;	ecen4330lab7.c:1733: currAddr0 -= addr3;
      001A01 E5*29            [12] 5808 	mov	a,_currAddr0
      001A03 C3               [12] 5809 	clr	c
      001A04 95*27            [12] 5810 	subb	a,_addr3
      001A06 F5*29            [12] 5811 	mov	_currAddr0,a
      001A08 E5*2A            [12] 5812 	mov	a,(_currAddr0 + 1)
      001A0A 95*28            [12] 5813 	subb	a,(_addr3 + 1)
      001A0C F5*2A            [12] 5814 	mov	(_currAddr0 + 1),a
      001A0E                       5815 00120$:
                                   5816 ;	ecen4330lab7.c:1737: setCursor(0, 250);
      001A0E 75*00 FA         [24] 5817 	mov	_setCursor_PARM_2,#0xfa
      001A11 75*01 00         [24] 5818 	mov	(_setCursor_PARM_2 + 1),#0x00
      001A14 90 00 00         [24] 5819 	mov	dptr,#0x0000
      001A17 12r03rBE         [24] 5820 	lcall	_setCursor
                                   5821 ;	ecen4330lab7.c:1738: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001A1A 90r08r1F         [24] 5822 	mov	dptr,#___str_37
      001A1D 75 F0 80         [24] 5823 	mov	b,#0x80
      001A20 12r0ArBA         [24] 5824 	lcall	_LCD_string_write
                                   5825 ;	ecen4330lab7.c:1739: HEXtoASCII_16write(currAddr1);
      001A23 85*2B 82         [24] 5826 	mov	dpl,_currAddr1
      001A26 85*2C 83         [24] 5827 	mov	dph,(_currAddr1 + 1)
      001A29 12r0Dr67         [24] 5828 	lcall	_HEXtoASCII_16write
                                   5829 ;	ecen4330lab7.c:1740: key = keyDetect();
      001A2C 12r0ArF9         [24] 5830 	lcall	_keyDetect
      001A2F 85 82*16         [24] 5831 	mov	_key,dpl
                                   5832 ;	ecen4330lab7.c:1741: switch (key)
      001A32 74 30            [12] 5833 	mov	a,#0x30
      001A34 B5*16 02         [24] 5834 	cjne	a,_key,00284$
      001A37 80 12            [24] 5835 	sjmp	00121$
      001A39                       5836 00284$:
      001A39 74 31            [12] 5837 	mov	a,#0x31
      001A3B B5*16 02         [24] 5838 	cjne	a,_key,00285$
      001A3E 80 65            [24] 5839 	sjmp	00125$
      001A40                       5840 00285$:
      001A40 74 45            [12] 5841 	mov	a,#0x45
      001A42 B5*16 03         [24] 5842 	cjne	a,_key,00286$
      001A45 02r1Br42         [24] 5843 	ljmp	00129$
      001A48                       5844 00286$:
      001A48 02r1Br59         [24] 5845 	ljmp	00130$
                                   5846 ;	ecen4330lab7.c:1745: case '0':
      001A4B                       5847 00121$:
                                   5848 ;	ecen4330lab7.c:1746: validInput = 1;
      001A4B 75*1D 01         [24] 5849 	mov	_validInput,#0x01
                                   5850 ;	ecen4330lab7.c:1749: if(dataSize > 0){
      001A4E E5*1B            [12] 5851 	mov	a,_dataSize
      001A50 45*1C            [12] 5852 	orl	a,(_dataSize + 1)
      001A52 60 06            [24] 5853 	jz	00123$
                                   5854 ;	ecen4330lab7.c:1750: dataEnd = 0;
      001A54 75*1E 00         [24] 5855 	mov	_dataEnd,#0x00
      001A57 02r1Br9D         [24] 5856 	ljmp	00135$
      001A5A                       5857 00123$:
                                   5858 ;	ecen4330lab7.c:1756: dataEnd = 0;
      001A5A 75*1E 00         [24] 5859 	mov	_dataEnd,#0x00
                                   5860 ;	ecen4330lab7.c:1757: currAddr0 -= (addr2 * dataType); // 1st address of previous page displayed
      001A5D 85*1A*00         [24] 5861 	mov	__mulint_PARM_2,_dataType
      001A60 75*01 00         [24] 5862 	mov	(__mulint_PARM_2 + 1),#0x00
      001A63 85*25 82         [24] 5863 	mov	dpl,_addr2
      001A66 85*26 83         [24] 5864 	mov	dph,(_addr2 + 1)
      001A69 12r00r00         [24] 5865 	lcall	__mulint
      001A6C AE 82            [24] 5866 	mov	r6,dpl
      001A6E AF 83            [24] 5867 	mov	r7,dph
      001A70 E5*29            [12] 5868 	mov	a,_currAddr0
      001A72 C3               [12] 5869 	clr	c
      001A73 9E               [12] 5870 	subb	a,r6
      001A74 F5*29            [12] 5871 	mov	_currAddr0,a
      001A76 E5*2A            [12] 5872 	mov	a,(_currAddr0 + 1)
      001A78 9F               [12] 5873 	subb	a,r7
      001A79 F5*2A            [12] 5874 	mov	(_currAddr0 + 1),a
                                   5875 ;	ecen4330lab7.c:1758: dataSize += addr2;  // restore data size of previous page
      001A7B E5*25            [12] 5876 	mov	a,_addr2
      001A7D 25*1B            [12] 5877 	add	a,_dataSize
      001A7F F5*1B            [12] 5878 	mov	_dataSize,a
      001A81 E5*26            [12] 5879 	mov	a,(_addr2 + 1)
      001A83 35*1C            [12] 5880 	addc	a,(_dataSize + 1)
      001A85 F5*1C            [12] 5881 	mov	(_dataSize + 1),a
                                   5882 ;	ecen4330lab7.c:1759: currAddr1--;
      001A87 15*2B            [12] 5883 	dec	_currAddr1
      001A89 74 FF            [12] 5884 	mov	a,#0xff
      001A8B B5*2B 02         [24] 5885 	cjne	a,_currAddr1,00288$
      001A8E 15*2C            [12] 5886 	dec	(_currAddr1 + 1)
      001A90                       5887 00288$:
                                   5888 ;	ecen4330lab7.c:1760: resetLCD();
      001A90 12r0Er4E         [24] 5889 	lcall	_resetLCD
                                   5890 ;	ecen4330lab7.c:1761: LCD_string_write("\nEnd of Data.");
      001A93 90r08r50         [24] 5891 	mov	dptr,#___str_38
      001A96 75 F0 80         [24] 5892 	mov	b,#0x80
      001A99 12r0ArBA         [24] 5893 	lcall	_LCD_string_write
                                   5894 ;	ecen4330lab7.c:1762: delay(200);
      001A9C 90 00 C8         [24] 5895 	mov	dptr,#0x00c8
      001A9F 12r01r1A         [24] 5896 	lcall	_delay
                                   5897 ;	ecen4330lab7.c:1764: break;
      001AA2 02r1Br9D         [24] 5898 	ljmp	00135$
                                   5899 ;	ecen4330lab7.c:1767: case '1':
      001AA5                       5900 00125$:
                                   5901 ;	ecen4330lab7.c:1770: if(currAddr1 > 1){
      001AA5 C3               [12] 5902 	clr	c
      001AA6 74 01            [12] 5903 	mov	a,#0x01
      001AA8 95*2B            [12] 5904 	subb	a,_currAddr1
      001AAA E4               [12] 5905 	clr	a
      001AAB 95*2C            [12] 5906 	subb	a,(_currAddr1 + 1)
      001AAD 50 49            [24] 5907 	jnc	00127$
                                   5908 ;	ecen4330lab7.c:1771: dataEnd = 0;
      001AAF 75*1E 00         [24] 5909 	mov	_dataEnd,#0x00
                                   5910 ;	ecen4330lab7.c:1772: currAddr0 -= ((addr2 + 10) * dataType);
      001AB2 74 0A            [12] 5911 	mov	a,#0x0a
      001AB4 25*25            [12] 5912 	add	a,_addr2
      001AB6 FE               [12] 5913 	mov	r6,a
      001AB7 E4               [12] 5914 	clr	a
      001AB8 35*26            [12] 5915 	addc	a,(_addr2 + 1)
      001ABA FF               [12] 5916 	mov	r7,a
      001ABB 85*1A*00         [24] 5917 	mov	__mulint_PARM_2,_dataType
      001ABE 75*01 00         [24] 5918 	mov	(__mulint_PARM_2 + 1),#0x00
      001AC1 8E 82            [24] 5919 	mov	dpl,r6
      001AC3 8F 83            [24] 5920 	mov	dph,r7
      001AC5 C0 07            [24] 5921 	push	ar7
      001AC7 C0 06            [24] 5922 	push	ar6
      001AC9 12r00r00         [24] 5923 	lcall	__mulint
      001ACC AC 82            [24] 5924 	mov	r4,dpl
      001ACE AD 83            [24] 5925 	mov	r5,dph
      001AD0 D0 06            [24] 5926 	pop	ar6
      001AD2 D0 07            [24] 5927 	pop	ar7
      001AD4 E5*29            [12] 5928 	mov	a,_currAddr0
      001AD6 C3               [12] 5929 	clr	c
      001AD7 9C               [12] 5930 	subb	a,r4
      001AD8 F5*29            [12] 5931 	mov	_currAddr0,a
      001ADA E5*2A            [12] 5932 	mov	a,(_currAddr0 + 1)
      001ADC 9D               [12] 5933 	subb	a,r5
      001ADD F5*2A            [12] 5934 	mov	(_currAddr0 + 1),a
                                   5935 ;	ecen4330lab7.c:1773: currAddr1 -= 2;
      001ADF E5*2B            [12] 5936 	mov	a,_currAddr1
      001AE1 24 FE            [12] 5937 	add	a,#0xfe
      001AE3 F5*2B            [12] 5938 	mov	_currAddr1,a
      001AE5 E5*2C            [12] 5939 	mov	a,(_currAddr1 + 1)
      001AE7 34 FF            [12] 5940 	addc	a,#0xff
      001AE9 F5*2C            [12] 5941 	mov	(_currAddr1 + 1),a
                                   5942 ;	ecen4330lab7.c:1774: dataSize += (addr2 + 10);
      001AEB EE               [12] 5943 	mov	a,r6
      001AEC 25*1B            [12] 5944 	add	a,_dataSize
      001AEE F5*1B            [12] 5945 	mov	_dataSize,a
      001AF0 EF               [12] 5946 	mov	a,r7
      001AF1 35*1C            [12] 5947 	addc	a,(_dataSize + 1)
      001AF3 F5*1C            [12] 5948 	mov	(_dataSize + 1),a
      001AF5 02r1Br9D         [24] 5949 	ljmp	00135$
      001AF8                       5950 00127$:
                                   5951 ;	ecen4330lab7.c:1779: dataEnd = 0;
      001AF8 75*1E 00         [24] 5952 	mov	_dataEnd,#0x00
                                   5953 ;	ecen4330lab7.c:1780: resetLCD();
      001AFB 12r0Er4E         [24] 5954 	lcall	_resetLCD
                                   5955 ;	ecen4330lab7.c:1781: LCD_string_write("End of Data");
      001AFE 90r08r5E         [24] 5956 	mov	dptr,#___str_39
      001B01 75 F0 80         [24] 5957 	mov	b,#0x80
      001B04 12r0ArBA         [24] 5958 	lcall	_LCD_string_write
                                   5959 ;	ecen4330lab7.c:1782: delay(200);
      001B07 90 00 C8         [24] 5960 	mov	dptr,#0x00c8
      001B0A 12r01r1A         [24] 5961 	lcall	_delay
                                   5962 ;	ecen4330lab7.c:1783: currAddr0 -= (addr2 * dataType);
      001B0D 85*1A*00         [24] 5963 	mov	__mulint_PARM_2,_dataType
      001B10 75*01 00         [24] 5964 	mov	(__mulint_PARM_2 + 1),#0x00
      001B13 85*25 82         [24] 5965 	mov	dpl,_addr2
      001B16 85*26 83         [24] 5966 	mov	dph,(_addr2 + 1)
      001B19 12r00r00         [24] 5967 	lcall	__mulint
      001B1C AE 82            [24] 5968 	mov	r6,dpl
      001B1E AF 83            [24] 5969 	mov	r7,dph
      001B20 E5*29            [12] 5970 	mov	a,_currAddr0
      001B22 C3               [12] 5971 	clr	c
      001B23 9E               [12] 5972 	subb	a,r6
      001B24 F5*29            [12] 5973 	mov	_currAddr0,a
      001B26 E5*2A            [12] 5974 	mov	a,(_currAddr0 + 1)
      001B28 9F               [12] 5975 	subb	a,r7
      001B29 F5*2A            [12] 5976 	mov	(_currAddr0 + 1),a
                                   5977 ;	ecen4330lab7.c:1784: currAddr1--;
      001B2B 15*2B            [12] 5978 	dec	_currAddr1
      001B2D 74 FF            [12] 5979 	mov	a,#0xff
      001B2F B5*2B 02         [24] 5980 	cjne	a,_currAddr1,00290$
      001B32 15*2C            [12] 5981 	dec	(_currAddr1 + 1)
      001B34                       5982 00290$:
                                   5983 ;	ecen4330lab7.c:1785: dataSize += addr2;
      001B34 E5*25            [12] 5984 	mov	a,_addr2
      001B36 25*1B            [12] 5985 	add	a,_dataSize
      001B38 F5*1B            [12] 5986 	mov	_dataSize,a
      001B3A E5*26            [12] 5987 	mov	a,(_addr2 + 1)
      001B3C 35*1C            [12] 5988 	addc	a,(_dataSize + 1)
      001B3E F5*1C            [12] 5989 	mov	(_dataSize + 1),a
                                   5990 ;	ecen4330lab7.c:1787: break;
                                   5991 ;	ecen4330lab7.c:1790: case 'E':
      001B40 80 5B            [24] 5992 	sjmp	00135$
      001B42                       5993 00129$:
                                   5994 ;	ecen4330lab7.c:1791: resetLCD();
      001B42 12r0Er4E         [24] 5995 	lcall	_resetLCD
                                   5996 ;	ecen4330lab7.c:1792: LCD_string_write("\nReturning to\nMain Menu.");
      001B45 90r08r6A         [24] 5997 	mov	dptr,#___str_40
      001B48 75 F0 80         [24] 5998 	mov	b,#0x80
      001B4B 12r0ArBA         [24] 5999 	lcall	_LCD_string_write
                                   6000 ;	ecen4330lab7.c:1793: delay(200);
      001B4E 90 00 C8         [24] 6001 	mov	dptr,#0x00c8
      001B51 12r01r1A         [24] 6002 	lcall	_delay
                                   6003 ;	ecen4330lab7.c:1794: dataEnd = 1;
      001B54 75*1E 01         [24] 6004 	mov	_dataEnd,#0x01
                                   6005 ;	ecen4330lab7.c:1795: break;
                                   6006 ;	ecen4330lab7.c:1798: default:
      001B57 80 44            [24] 6007 	sjmp	00135$
      001B59                       6008 00130$:
                                   6009 ;	ecen4330lab7.c:1799: dataEnd = 0;
      001B59 75*1E 00         [24] 6010 	mov	_dataEnd,#0x00
                                   6011 ;	ecen4330lab7.c:1800: invalidInput();
      001B5C 12r0Er76         [24] 6012 	lcall	_invalidInput
                                   6013 ;	ecen4330lab7.c:1801: if(addr2 > 0 ){
      001B5F E5*25            [12] 6014 	mov	a,_addr2
      001B61 45*26            [12] 6015 	orl	a,(_addr2 + 1)
      001B63 60 38            [24] 6016 	jz	00135$
                                   6017 ;	ecen4330lab7.c:1802: currAddr0 -= (addr2 * dataType);
      001B65 85*1A*00         [24] 6018 	mov	__mulint_PARM_2,_dataType
      001B68 75*01 00         [24] 6019 	mov	(__mulint_PARM_2 + 1),#0x00
      001B6B 85*25 82         [24] 6020 	mov	dpl,_addr2
      001B6E 85*26 83         [24] 6021 	mov	dph,(_addr2 + 1)
      001B71 12r00r00         [24] 6022 	lcall	__mulint
      001B74 AE 82            [24] 6023 	mov	r6,dpl
      001B76 AF 83            [24] 6024 	mov	r7,dph
      001B78 E5*29            [12] 6025 	mov	a,_currAddr0
      001B7A C3               [12] 6026 	clr	c
      001B7B 9E               [12] 6027 	subb	a,r6
      001B7C F5*29            [12] 6028 	mov	_currAddr0,a
      001B7E E5*2A            [12] 6029 	mov	a,(_currAddr0 + 1)
      001B80 9F               [12] 6030 	subb	a,r7
      001B81 F5*2A            [12] 6031 	mov	(_currAddr0 + 1),a
                                   6032 ;	ecen4330lab7.c:1803: currAddr1 --;
      001B83 15*2B            [12] 6033 	dec	_currAddr1
      001B85 74 FF            [12] 6034 	mov	a,#0xff
      001B87 B5*2B 02         [24] 6035 	cjne	a,_currAddr1,00292$
      001B8A 15*2C            [12] 6036 	dec	(_currAddr1 + 1)
      001B8C                       6037 00292$:
                                   6038 ;	ecen4330lab7.c:1804: dataSize += addr2;
      001B8C E5*25            [12] 6039 	mov	a,_addr2
      001B8E 25*1B            [12] 6040 	add	a,_dataSize
      001B90 F5*1B            [12] 6041 	mov	_dataSize,a
      001B92 E5*26            [12] 6042 	mov	a,(_addr2 + 1)
      001B94 35*1C            [12] 6043 	addc	a,(_dataSize + 1)
      001B96 F5*1C            [12] 6044 	mov	(_dataSize + 1),a
                                   6045 ;	ecen4330lab7.c:1805: addr2 = 0;
      001B98 E4               [12] 6046 	clr	a
      001B99 F5*25            [12] 6047 	mov	_addr2,a
      001B9B F5*26            [12] 6048 	mov	(_addr2 + 1),a
                                   6049 ;	ecen4330lab7.c:1808: }
      001B9D                       6050 00135$:
                                   6051 ;	ecen4330lab7.c:1809: } while(dataEnd == 0);
      001B9D E5*1E            [12] 6052 	mov	a,_dataEnd
      001B9F 70 03            [24] 6053 	jnz	00293$
      001BA1 02r17rEB         [24] 6054 	ljmp	00134$
      001BA4                       6055 00293$:
                                   6056 ;	ecen4330lab7.c:1810: }
      001BA4 22               [24] 6057 	ret
                                   6058 ;------------------------------------------------------------
                                   6059 ;Allocation info for local variables in function 'DUMP'
                                   6060 ;------------------------------------------------------------
                                   6061 ;	ecen4330lab7.c:1818: void DUMP(){
                                   6062 ;	-----------------------------------------
                                   6063 ;	 function DUMP
                                   6064 ;	-----------------------------------------
      001BA5                       6065 _DUMP:
                                   6066 ;	ecen4330lab7.c:1819: endAddrCalc = 0;
      001BA5 E4               [12] 6067 	clr	a
      001BA6 F5*34            [12] 6068 	mov	_endAddrCalc,a
      001BA8 F5*35            [12] 6069 	mov	(_endAddrCalc + 1),a
      001BAA F5*36            [12] 6070 	mov	(_endAddrCalc + 2),a
      001BAC F5*37            [12] 6071 	mov	(_endAddrCalc + 3),a
                                   6072 ;	ecen4330lab7.c:1820: addr0 = 0;                      // Source Address
      001BAE F5*21            [12] 6073 	mov	_addr0,a
      001BB0 F5*22            [12] 6074 	mov	(_addr0 + 1),a
                                   6075 ;	ecen4330lab7.c:1821: addr1 = 0;                      // Source End Address
      001BB2 F5*23            [12] 6076 	mov	_addr1,a
      001BB4 F5*24            [12] 6077 	mov	(_addr1 + 1),a
                                   6078 ;	ecen4330lab7.c:1822: dataType = 0;                   // Data Type
                                   6079 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      001BB6 F5*1A            [12] 6080 	mov	_dataType,a
                                   6081 ;	ecen4330lab7.c:1823: dataSize = 0;                   // Data Size
      001BB8 F5*1B            [12] 6082 	mov	_dataSize,a
      001BBA F5*1C            [12] 6083 	mov	(_dataSize + 1),a
                                   6084 ;	ecen4330lab7.c:1824: addr3 = 0;						// Remainder
      001BBC F5*27            [12] 6085 	mov	_addr3,a
      001BBE F5*28            [12] 6086 	mov	(_addr3 + 1),a
                                   6087 ;	ecen4330lab7.c:1827: resetLCD();
      001BC0 12r0Er4E         [24] 6088 	lcall	_resetLCD
                                   6089 ;	ecen4330lab7.c:1828: LCD_string_write("\nEnter source\nstarting RAM\naddress:\n\n  0x____");
      001BC3 90r08r83         [24] 6090 	mov	dptr,#___str_41
      001BC6 75 F0 80         [24] 6091 	mov	b,#0x80
      001BC9 12r0ArBA         [24] 6092 	lcall	_LCD_string_write
                                   6093 ;	ecen4330lab7.c:1829: cursor_x -= 4 * textsize * 6;
      001BCC E5*0C            [12] 6094 	mov	a,_textsize
      001BCE 75 F0 18         [24] 6095 	mov	b,#0x18
      001BD1 A4               [48] 6096 	mul	ab
      001BD2 FE               [12] 6097 	mov	r6,a
      001BD3 AF F0            [24] 6098 	mov	r7,b
      001BD5 E5*08            [12] 6099 	mov	a,_cursor_x
      001BD7 C3               [12] 6100 	clr	c
      001BD8 9E               [12] 6101 	subb	a,r6
      001BD9 F5*08            [12] 6102 	mov	_cursor_x,a
      001BDB E5*09            [12] 6103 	mov	a,(_cursor_x + 1)
      001BDD 9F               [12] 6104 	subb	a,r7
      001BDE F5*09            [12] 6105 	mov	(_cursor_x + 1),a
                                   6106 ;	ecen4330lab7.c:1830: inputRead16();                  // Read input
      001BE0 12r0Er9F         [24] 6107 	lcall	_inputRead16
                                   6108 ;	ecen4330lab7.c:1831: addr0 = input16;                // Set starting address
      001BE3 85*17*21         [24] 6109 	mov	_addr0,_input16
      001BE6 85*18*22         [24] 6110 	mov	(_addr0 + 1),(_input16 + 1)
                                   6111 ;	ecen4330lab7.c:1834: inputDataType();                // Prompt & read input
      001BE9 12r0FrAE         [24] 6112 	lcall	_inputDataType
                                   6113 ;	ecen4330lab7.c:1837: resetLCD();
      001BEC 12r0Er4E         [24] 6114 	lcall	_resetLCD
                                   6115 ;	ecen4330lab7.c:1838: inputDataSize();                // Prompt & read input
      001BEF 12r10r6B         [24] 6116 	lcall	_inputDataSize
                                   6117 ;	ecen4330lab7.c:1841: endAddrCalc = addr0 + (dataType * dataSize);
      001BF2 AE*1A            [24] 6118 	mov	r6,_dataType
      001BF4 7F 00            [12] 6119 	mov	r7,#0x00
      001BF6 85*1B*00         [24] 6120 	mov	__mulint_PARM_2,_dataSize
      001BF9 85*1C*01         [24] 6121 	mov	(__mulint_PARM_2 + 1),(_dataSize + 1)
      001BFC 8E 82            [24] 6122 	mov	dpl,r6
      001BFE 8F 83            [24] 6123 	mov	dph,r7
      001C00 C0 07            [24] 6124 	push	ar7
      001C02 C0 06            [24] 6125 	push	ar6
      001C04 12r00r00         [24] 6126 	lcall	__mulint
      001C07 AC 82            [24] 6127 	mov	r4,dpl
      001C09 AD 83            [24] 6128 	mov	r5,dph
      001C0B D0 06            [24] 6129 	pop	ar6
      001C0D D0 07            [24] 6130 	pop	ar7
      001C0F EC               [12] 6131 	mov	a,r4
      001C10 25*21            [12] 6132 	add	a,_addr0
      001C12 FA               [12] 6133 	mov	r2,a
      001C13 ED               [12] 6134 	mov	a,r5
      001C14 35*22            [12] 6135 	addc	a,(_addr0 + 1)
      001C16 FB               [12] 6136 	mov	r3,a
      001C17 8A*34            [24] 6137 	mov	_endAddrCalc,r2
      001C19 8B*35            [24] 6138 	mov	(_endAddrCalc + 1),r3
      001C1B 75*36 00         [24] 6139 	mov	(_endAddrCalc + 2),#0x00
      001C1E 75*37 00         [24] 6140 	mov	(_endAddrCalc + 3),#0x00
                                   6141 ;	ecen4330lab7.c:1842: if(endAddrCalc < addr0){ // RAM overflow
      001C21 A8*21            [24] 6142 	mov	r0,_addr0
      001C23 A9*22            [24] 6143 	mov	r1,(_addr0 + 1)
      001C25 7A 00            [12] 6144 	mov	r2,#0x00
      001C27 7B 00            [12] 6145 	mov	r3,#0x00
      001C29 C3               [12] 6146 	clr	c
      001C2A E5*34            [12] 6147 	mov	a,_endAddrCalc
      001C2C 98               [12] 6148 	subb	a,r0
      001C2D E5*35            [12] 6149 	mov	a,(_endAddrCalc + 1)
      001C2F 99               [12] 6150 	subb	a,r1
      001C30 E5*36            [12] 6151 	mov	a,(_endAddrCalc + 2)
      001C32 9A               [12] 6152 	subb	a,r2
      001C33 E5*37            [12] 6153 	mov	a,(_endAddrCalc + 3)
      001C35 9B               [12] 6154 	subb	a,r3
      001C36 50 08            [24] 6155 	jnc	00102$
                                   6156 ;	ecen4330lab7.c:1843: addr1 = 0xFFFF;             // Set end address
      001C38 75*23 FF         [24] 6157 	mov	_addr1,#0xff
      001C3B 75*24 FF         [24] 6158 	mov	(_addr1 + 1),#0xff
      001C3E 80 12            [24] 6159 	sjmp	00103$
      001C40                       6160 00102$:
                                   6161 ;	ecen4330lab7.c:1846: addr1 = addr0 + (dataType * dataSize) - 1;
      001C40 EC               [12] 6162 	mov	a,r4
      001C41 25*21            [12] 6163 	add	a,_addr0
      001C43 FC               [12] 6164 	mov	r4,a
      001C44 ED               [12] 6165 	mov	a,r5
      001C45 35*22            [12] 6166 	addc	a,(_addr0 + 1)
      001C47 FD               [12] 6167 	mov	r5,a
      001C48 EC               [12] 6168 	mov	a,r4
      001C49 24 FF            [12] 6169 	add	a,#0xff
      001C4B F5*23            [12] 6170 	mov	_addr1,a
      001C4D ED               [12] 6171 	mov	a,r5
      001C4E 34 FF            [12] 6172 	addc	a,#0xff
      001C50 F5*24            [12] 6173 	mov	(_addr1 + 1),a
      001C52                       6174 00103$:
                                   6175 ;	ecen4330lab7.c:1848: dataSize = ((addr1 - addr0) + 1) / dataType;   // Recalculate data size
      001C52 E5*23            [12] 6176 	mov	a,_addr1
      001C54 C3               [12] 6177 	clr	c
      001C55 95*21            [12] 6178 	subb	a,_addr0
      001C57 FC               [12] 6179 	mov	r4,a
      001C58 E5*24            [12] 6180 	mov	a,(_addr1 + 1)
      001C5A 95*22            [12] 6181 	subb	a,(_addr0 + 1)
      001C5C FD               [12] 6182 	mov	r5,a
      001C5D 0C               [12] 6183 	inc	r4
      001C5E BC 00 01         [24] 6184 	cjne	r4,#0x00,00111$
      001C61 0D               [12] 6185 	inc	r5
      001C62                       6186 00111$:
      001C62 8E*00            [24] 6187 	mov	__divuint_PARM_2,r6
      001C64 8F*01            [24] 6188 	mov	(__divuint_PARM_2 + 1),r7
      001C66 8C 82            [24] 6189 	mov	dpl,r4
      001C68 8D 83            [24] 6190 	mov	dph,r5
      001C6A C0 07            [24] 6191 	push	ar7
      001C6C C0 06            [24] 6192 	push	ar6
      001C6E C0 05            [24] 6193 	push	ar5
      001C70 C0 04            [24] 6194 	push	ar4
      001C72 12r00r00         [24] 6195 	lcall	__divuint
      001C75 85 82*1B         [24] 6196 	mov	_dataSize,dpl
      001C78 85 83*1C         [24] 6197 	mov	(_dataSize + 1),dph
      001C7B D0 04            [24] 6198 	pop	ar4
      001C7D D0 05            [24] 6199 	pop	ar5
      001C7F D0 06            [24] 6200 	pop	ar6
      001C81 D0 07            [24] 6201 	pop	ar7
                                   6202 ;	ecen4330lab7.c:1849: addr3 = ((addr1 - addr0) + 1) % dataType;
      001C83 8E*00            [24] 6203 	mov	__moduint_PARM_2,r6
      001C85 8F*01            [24] 6204 	mov	(__moduint_PARM_2 + 1),r7
      001C87 8C 82            [24] 6205 	mov	dpl,r4
      001C89 8D 83            [24] 6206 	mov	dph,r5
      001C8B 12r00r00         [24] 6207 	lcall	__moduint
      001C8E 85 82*27         [24] 6208 	mov	_addr3,dpl
      001C91 85 83*28         [24] 6209 	mov	(_addr3 + 1),dph
                                   6210 ;	ecen4330lab7.c:1868: DUMP_display();                 // Display dump data
                                   6211 ;	ecen4330lab7.c:1869: }
      001C94 02r17rDA         [24] 6212 	ljmp	_DUMP_display
                                   6213 ;------------------------------------------------------------
                                   6214 ;Allocation info for local variables in function 'EDIT_display'
                                   6215 ;------------------------------------------------------------
                                   6216 ;addr                      Allocated to registers r6 r7 
                                   6217 ;------------------------------------------------------------
                                   6218 ;	ecen4330lab7.c:1879: void EDIT_display(unsigned int addr){
                                   6219 ;	-----------------------------------------
                                   6220 ;	 function EDIT_display
                                   6221 ;	-----------------------------------------
      001C97                       6222 _EDIT_display:
                                   6223 ;	ecen4330lab7.c:1882: data = RAMread(addr);
      001C97 AE 82            [24] 6224 	mov	r6,dpl
      001C99 AF 83            [24] 6225 	mov  r7,dph
      001C9B C0 07            [24] 6226 	push	ar7
      001C9D C0 06            [24] 6227 	push	ar6
      001C9F 12r0Er3B         [24] 6228 	lcall	_RAMread
      001CA2 85 82*20         [24] 6229 	mov	_data,dpl
                                   6230 ;	ecen4330lab7.c:1885: resetLCD();
      001CA5 12r0Er4E         [24] 6231 	lcall	_resetLCD
                                   6232 ;	ecen4330lab7.c:1886: LCD_string_write("\n");
      001CA8 90r08r1D         [24] 6233 	mov	dptr,#___str_36
      001CAB 75 F0 80         [24] 6234 	mov	b,#0x80
      001CAE 12r0ArBA         [24] 6235 	lcall	_LCD_string_write
      001CB1 D0 06            [24] 6236 	pop	ar6
      001CB3 D0 07            [24] 6237 	pop	ar7
                                   6238 ;	ecen4330lab7.c:1887: HEXtoASCII_16write(addr);
      001CB5 8E 82            [24] 6239 	mov	dpl,r6
      001CB7 8F 83            [24] 6240 	mov	dph,r7
      001CB9 C0 07            [24] 6241 	push	ar7
      001CBB C0 06            [24] 6242 	push	ar6
      001CBD 12r0Dr67         [24] 6243 	lcall	_HEXtoASCII_16write
                                   6244 ;	ecen4330lab7.c:1888: LCD_string_write(": 0x");
      001CC0 90r06r45         [24] 6245 	mov	dptr,#___str_17
      001CC3 75 F0 80         [24] 6246 	mov	b,#0x80
      001CC6 12r0ArBA         [24] 6247 	lcall	_LCD_string_write
                                   6248 ;	ecen4330lab7.c:1889: HEXtoASCII_8write(data);
      001CC9 85*20 82         [24] 6249 	mov	dpl,_data
      001CCC 12r0Dr2A         [24] 6250 	lcall	_HEXtoASCII_8write
                                   6251 ;	ecen4330lab7.c:1892: LCD_string_write("\n\nNew value:\n  0x__");
      001CCF 90r08rB1         [24] 6252 	mov	dptr,#___str_42
      001CD2 75 F0 80         [24] 6253 	mov	b,#0x80
      001CD5 12r0ArBA         [24] 6254 	lcall	_LCD_string_write
                                   6255 ;	ecen4330lab7.c:1893: cursor_x -= 2 * textsize * 6;
      001CD8 E5*0C            [12] 6256 	mov	a,_textsize
      001CDA 75 F0 0C         [24] 6257 	mov	b,#0x0c
      001CDD A4               [48] 6258 	mul	ab
      001CDE FC               [12] 6259 	mov	r4,a
      001CDF AD F0            [24] 6260 	mov	r5,b
      001CE1 E5*08            [12] 6261 	mov	a,_cursor_x
      001CE3 C3               [12] 6262 	clr	c
      001CE4 9C               [12] 6263 	subb	a,r4
      001CE5 F5*08            [12] 6264 	mov	_cursor_x,a
      001CE7 E5*09            [12] 6265 	mov	a,(_cursor_x + 1)
      001CE9 9D               [12] 6266 	subb	a,r5
      001CEA F5*09            [12] 6267 	mov	(_cursor_x + 1),a
                                   6268 ;	ecen4330lab7.c:1894: inputRead8();
      001CEC 12r0Fr5A         [24] 6269 	lcall	_inputRead8
      001CEF D0 06            [24] 6270 	pop	ar6
      001CF1 D0 07            [24] 6271 	pop	ar7
                                   6272 ;	ecen4330lab7.c:1895: RAMwrite(addr, input8);
      001CF3 85*19*00         [24] 6273 	mov	_RAMwrite_PARM_2,_input8
      001CF6 8E 82            [24] 6274 	mov	dpl,r6
      001CF8 8F 83            [24] 6275 	mov	dph,r7
      001CFA 12r0Er0C         [24] 6276 	lcall	_RAMwrite
                                   6277 ;	ecen4330lab7.c:1898: LCD_string_write("\n\n\n\n(1) Edit next\nRAM location\n\n");
      001CFD 90r08rC5         [24] 6278 	mov	dptr,#___str_43
      001D00 75 F0 80         [24] 6279 	mov	b,#0x80
      001D03 12r0ArBA         [24] 6280 	lcall	_LCD_string_write
                                   6281 ;	ecen4330lab7.c:1899: LCD_string_write("(E) End");
      001D06 90r08rE6         [24] 6282 	mov	dptr,#___str_44
      001D09 75 F0 80         [24] 6283 	mov	b,#0x80
                                   6284 ;	ecen4330lab7.c:1900: }
      001D0C 02r0ArBA         [24] 6285 	ljmp	_LCD_string_write
                                   6286 ;------------------------------------------------------------
                                   6287 ;Allocation info for local variables in function 'EDIT'
                                   6288 ;------------------------------------------------------------
                                   6289 ;	ecen4330lab7.c:1912: void EDIT(){
                                   6290 ;	-----------------------------------------
                                   6291 ;	 function EDIT
                                   6292 ;	-----------------------------------------
      001D0F                       6293 _EDIT:
                                   6294 ;	ecen4330lab7.c:1913: dataEnd = 0;
      001D0F 75*1E 00         [24] 6295 	mov	_dataEnd,#0x00
                                   6296 ;	ecen4330lab7.c:1914: scrollEnd = 0;
      001D12 75*1F 00         [24] 6297 	mov	_scrollEnd,#0x00
                                   6298 ;	ecen4330lab7.c:1915: validInput = 0;
      001D15 75*1D 00         [24] 6299 	mov	_validInput,#0x00
                                   6300 ;	ecen4330lab7.c:1918: resetLCD();
      001D18 12r0Er4E         [24] 6301 	lcall	_resetLCD
                                   6302 ;	ecen4330lab7.c:1919: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n  0x____");
      001D1B 90r07r9D         [24] 6303 	mov	dptr,#___str_28
      001D1E 75 F0 80         [24] 6304 	mov	b,#0x80
      001D21 12r0ArBA         [24] 6305 	lcall	_LCD_string_write
                                   6306 ;	ecen4330lab7.c:1920: cursor_x -= 4 * textsize * 6;
      001D24 E5*0C            [12] 6307 	mov	a,_textsize
      001D26 75 F0 18         [24] 6308 	mov	b,#0x18
      001D29 A4               [48] 6309 	mul	ab
      001D2A FE               [12] 6310 	mov	r6,a
      001D2B AF F0            [24] 6311 	mov	r7,b
      001D2D E5*08            [12] 6312 	mov	a,_cursor_x
      001D2F C3               [12] 6313 	clr	c
      001D30 9E               [12] 6314 	subb	a,r6
      001D31 F5*08            [12] 6315 	mov	_cursor_x,a
      001D33 E5*09            [12] 6316 	mov	a,(_cursor_x + 1)
      001D35 9F               [12] 6317 	subb	a,r7
      001D36 F5*09            [12] 6318 	mov	(_cursor_x + 1),a
                                   6319 ;	ecen4330lab7.c:1923: inputRead16();
      001D38 12r0Er9F         [24] 6320 	lcall	_inputRead16
                                   6321 ;	ecen4330lab7.c:1926: while(scrollEnd == 0 && dataEnd == 0){
      001D3B                       6322 00112$:
      001D3B E5*1F            [12] 6323 	mov	a,_scrollEnd
      001D3D 70 52            [24] 6324 	jnz	00114$
      001D3F E5*1E            [12] 6325 	mov	a,_dataEnd
      001D41 70 4E            [24] 6326 	jnz	00114$
                                   6327 ;	ecen4330lab7.c:1929: do
      001D43                       6328 00108$:
                                   6329 ;	ecen4330lab7.c:1931: EDIT_display(input16);
      001D43 85*17 82         [24] 6330 	mov	dpl,_input16
      001D46 85*18 83         [24] 6331 	mov	dph,(_input16 + 1)
      001D49 12r1Cr97         [24] 6332 	lcall	_EDIT_display
                                   6333 ;	ecen4330lab7.c:1932: key = keyDetect();
      001D4C 12r0ArF9         [24] 6334 	lcall	_keyDetect
      001D4F 85 82*16         [24] 6335 	mov	_key,dpl
                                   6336 ;	ecen4330lab7.c:1934: switch (key)
      001D52 74 31            [12] 6337 	mov	a,#0x31
      001D54 B5*16 02         [24] 6338 	cjne	a,_key,00153$
      001D57 80 07            [24] 6339 	sjmp	00101$
      001D59                       6340 00153$:
      001D59 74 45            [12] 6341 	mov	a,#0x45
                                   6342 ;	ecen4330lab7.c:1938: case '1':
      001D5B B5*16 27         [24] 6343 	cjne	a,_key,00106$
      001D5E 80 1D            [24] 6344 	sjmp	00105$
      001D60                       6345 00101$:
                                   6346 ;	ecen4330lab7.c:1939: validInput = 1;
      001D60 75*1D 01         [24] 6347 	mov	_validInput,#0x01
                                   6348 ;	ecen4330lab7.c:1942: if(input16 == 0xFFFF){
      001D63 74 FF            [12] 6349 	mov	a,#0xff
      001D65 B5*17 08         [24] 6350 	cjne	a,_input16,00103$
      001D68 B5*18 05         [24] 6351 	cjne	a,(_input16 + 1),00103$
                                   6352 ;	ecen4330lab7.c:1943: scrollEnd = 1;
      001D6B 75*1F 01         [24] 6353 	mov	_scrollEnd,#0x01
      001D6E 80 1B            [24] 6354 	sjmp	00109$
      001D70                       6355 00103$:
                                   6356 ;	ecen4330lab7.c:1948: input16++;
      001D70 05*17            [12] 6357 	inc	_input16
      001D72 E4               [12] 6358 	clr	a
      001D73 B5*17 02         [24] 6359 	cjne	a,_input16,00157$
      001D76 05*18            [12] 6360 	inc	(_input16 + 1)
      001D78                       6361 00157$:
                                   6362 ;	ecen4330lab7.c:1949: scrollEnd = 0;
      001D78 75*1F 00         [24] 6363 	mov	_scrollEnd,#0x00
                                   6364 ;	ecen4330lab7.c:1951: break;
                                   6365 ;	ecen4330lab7.c:1954: case 'E':
      001D7B 80 0E            [24] 6366 	sjmp	00109$
      001D7D                       6367 00105$:
                                   6368 ;	ecen4330lab7.c:1955: validInput = 1;
      001D7D 75*1D 01         [24] 6369 	mov	_validInput,#0x01
                                   6370 ;	ecen4330lab7.c:1956: dataEnd = 1;
      001D80 75*1E 01         [24] 6371 	mov	_dataEnd,#0x01
                                   6372 ;	ecen4330lab7.c:1957: break;
                                   6373 ;	ecen4330lab7.c:1960: default:
      001D83 80 06            [24] 6374 	sjmp	00109$
      001D85                       6375 00106$:
                                   6376 ;	ecen4330lab7.c:1961: validInput = 0;
      001D85 75*1D 00         [24] 6377 	mov	_validInput,#0x00
                                   6378 ;	ecen4330lab7.c:1962: invalidInput();
      001D88 12r0Er76         [24] 6379 	lcall	_invalidInput
                                   6380 ;	ecen4330lab7.c:1964: }
      001D8B                       6381 00109$:
                                   6382 ;	ecen4330lab7.c:1965: } while (validInput == 0);
      001D8B E5*1D            [12] 6383 	mov	a,_validInput
      001D8D 60 B4            [24] 6384 	jz	00108$
      001D8F 80 AA            [24] 6385 	sjmp	00112$
      001D91                       6386 00114$:
                                   6387 ;	ecen4330lab7.c:1969: resetLCD();
      001D91 12r0Er4E         [24] 6388 	lcall	_resetLCD
                                   6389 ;	ecen4330lab7.c:1970: if(scrollEnd == 1){
      001D94 74 01            [12] 6390 	mov	a,#0x01
      001D96 B5*1F 14         [24] 6391 	cjne	a,_scrollEnd,00116$
                                   6392 ;	ecen4330lab7.c:1971: setTextColor(RED, BLACK);
      001D99 E4               [12] 6393 	clr	a
      001D9A F5*00            [12] 6394 	mov	_setTextColor_PARM_2,a
      001D9C F5*01            [12] 6395 	mov	(_setTextColor_PARM_2 + 1),a
      001D9E 90 F8 00         [24] 6396 	mov	dptr,#0xf800
      001DA1 12r03rCB         [24] 6397 	lcall	_setTextColor
                                   6398 ;	ecen4330lab7.c:1972: LCD_string_write("\nEnd of data.\n");
      001DA4 90r08rEE         [24] 6399 	mov	dptr,#___str_45
      001DA7 75 F0 80         [24] 6400 	mov	b,#0x80
      001DAA 12r0ArBA         [24] 6401 	lcall	_LCD_string_write
      001DAD                       6402 00116$:
                                   6403 ;	ecen4330lab7.c:1976: setTextColor(WHITE, BLACK);
      001DAD E4               [12] 6404 	clr	a
      001DAE F5*00            [12] 6405 	mov	_setTextColor_PARM_2,a
      001DB0 F5*01            [12] 6406 	mov	(_setTextColor_PARM_2 + 1),a
      001DB2 90 FF FF         [24] 6407 	mov	dptr,#0xffff
      001DB5 12r03rCB         [24] 6408 	lcall	_setTextColor
                                   6409 ;	ecen4330lab7.c:1977: LCD_string_write("\nReturning to\nmain menu.");
      001DB8 90r08rFD         [24] 6410 	mov	dptr,#___str_46
      001DBB 75 F0 80         [24] 6411 	mov	b,#0x80
      001DBE 12r0ArBA         [24] 6412 	lcall	_LCD_string_write
                                   6413 ;	ecen4330lab7.c:1978: delay(200);
      001DC1 90 00 C8         [24] 6414 	mov	dptr,#0x00c8
                                   6415 ;	ecen4330lab7.c:1979: }
      001DC4 02r01r1A         [24] 6416 	ljmp	_delay
                                   6417 ;------------------------------------------------------------
                                   6418 ;Allocation info for local variables in function 'FIND_display'
                                   6419 ;------------------------------------------------------------
                                   6420 ;	ecen4330lab7.c:1993: void FIND_display(){
                                   6421 ;	-----------------------------------------
                                   6422 ;	 function FIND_display
                                   6423 ;	-----------------------------------------
      001DC7                       6424 _FIND_display:
                                   6425 ;	ecen4330lab7.c:1994: addr2 = 0;						// first addr of page
      001DC7 E4               [12] 6426 	clr	a
      001DC8 F5*25            [12] 6427 	mov	_addr2,a
      001DCA F5*26            [12] 6428 	mov	(_addr2 + 1),a
                                   6429 ;	ecen4330lab7.c:1995: currAddr1 = 0;					// page count
      001DCC F5*2B            [12] 6430 	mov	_currAddr1,a
      001DCE F5*2C            [12] 6431 	mov	(_currAddr1 + 1),a
                                   6432 ;	ecen4330lab7.c:1996: resetLCD();
      001DD0 12r0Er4E         [24] 6433 	lcall	_resetLCD
                                   6434 ;	ecen4330lab7.c:1997: currAddr0 = addr0;				// Load starting address
      001DD3 85*21*29         [24] 6435 	mov	_currAddr0,_addr0
      001DD6 85*22*2A         [24] 6436 	mov	(_currAddr0 + 1),(_addr0 + 1)
                                   6437 ;	ecen4330lab7.c:1998: data = RAMread(currAddr0);		// Read data from starting address
      001DD9 85*29 82         [24] 6438 	mov	dpl,_currAddr0
      001DDC 85*2A 83         [24] 6439 	mov	dph,(_currAddr0 + 1)
      001DDF 12r0Er3B         [24] 6440 	lcall	_RAMread
      001DE2 85 82*20         [24] 6441 	mov	_data,dpl
                                   6442 ;	ecen4330lab7.c:2001: while(data != byte1 && currAddr0 < addr1){
      001DE5                       6443 00102$:
      001DE5 AE*20            [24] 6444 	mov	r6,_data
      001DE7 7F 00            [12] 6445 	mov	r7,#0x00
      001DE9 EE               [12] 6446 	mov	a,r6
      001DEA B5*2F 06         [24] 6447 	cjne	a,_byte1,00235$
      001DED EF               [12] 6448 	mov	a,r7
      001DEE B5*30 02         [24] 6449 	cjne	a,(_byte1 + 1),00235$
      001DF1 80 21            [24] 6450 	sjmp	00104$
      001DF3                       6451 00235$:
      001DF3 C3               [12] 6452 	clr	c
      001DF4 E5*29            [12] 6453 	mov	a,_currAddr0
      001DF6 95*23            [12] 6454 	subb	a,_addr1
      001DF8 E5*2A            [12] 6455 	mov	a,(_currAddr0 + 1)
      001DFA 95*24            [12] 6456 	subb	a,(_addr1 + 1)
      001DFC 50 16            [24] 6457 	jnc	00104$
                                   6458 ;	ecen4330lab7.c:2002: currAddr0++;				// Next RAM address
      001DFE 05*29            [12] 6459 	inc	_currAddr0
      001E00 E4               [12] 6460 	clr	a
      001E01 B5*29 02         [24] 6461 	cjne	a,_currAddr0,00237$
      001E04 05*2A            [12] 6462 	inc	(_currAddr0 + 1)
      001E06                       6463 00237$:
                                   6464 ;	ecen4330lab7.c:2003: data = RAMread(currAddr0);	// Read data from RAM
      001E06 85*29 82         [24] 6465 	mov	dpl,_currAddr0
      001E09 85*2A 83         [24] 6466 	mov	dph,(_currAddr0 + 1)
      001E0C 12r0Er3B         [24] 6467 	lcall	_RAMread
      001E0F 85 82*20         [24] 6468 	mov	_data,dpl
      001E12 80 D1            [24] 6469 	sjmp	00102$
      001E14                       6470 00104$:
                                   6471 ;	ecen4330lab7.c:2007: if(data != byte1 && currAddr0 == addr1){
      001E14 AE*20            [24] 6472 	mov	r6,_data
      001E16 7F 00            [12] 6473 	mov	r7,#0x00
      001E18 EE               [12] 6474 	mov	a,r6
      001E19 B5*2F 06         [24] 6475 	cjne	a,_byte1,00238$
      001E1C EF               [12] 6476 	mov	a,r7
      001E1D B5*30 02         [24] 6477 	cjne	a,(_byte1 + 1),00238$
      001E20 80 58            [24] 6478 	sjmp	00142$
      001E22                       6479 00238$:
      001E22 E5*23            [12] 6480 	mov	a,_addr1
      001E24 B5*29 53         [24] 6481 	cjne	a,_currAddr0,00142$
      001E27 E5*24            [12] 6482 	mov	a,(_addr1 + 1)
      001E29 B5*2A 4E         [24] 6483 	cjne	a,(_currAddr0 + 1),00142$
                                   6484 ;	ecen4330lab7.c:2008: resetLCD();
      001E2C 12r0Er4E         [24] 6485 	lcall	_resetLCD
                                   6486 ;	ecen4330lab7.c:2009: LCD_string_write("\n0x");
      001E2F 90r07rE1         [24] 6487 	mov	dptr,#___str_30
      001E32 75 F0 80         [24] 6488 	mov	b,#0x80
      001E35 12r0ArBA         [24] 6489 	lcall	_LCD_string_write
                                   6490 ;	ecen4330lab7.c:2010: HEXtoASCII_8write(byte1);
      001E38 85*2F 82         [24] 6491 	mov	dpl,_byte1
      001E3B 12r0Dr2A         [24] 6492 	lcall	_HEXtoASCII_8write
                                   6493 ;	ecen4330lab7.c:2011: LCD_string_write(" not\nfound in\naddress range\n\n");
      001E3E 90r09r16         [24] 6494 	mov	dptr,#___str_47
      001E41 75 F0 80         [24] 6495 	mov	b,#0x80
      001E44 12r0ArBA         [24] 6496 	lcall	_LCD_string_write
                                   6497 ;	ecen4330lab7.c:2012: HEXtoASCII_16write(addr0);
      001E47 85*21 82         [24] 6498 	mov	dpl,_addr0
      001E4A 85*22 83         [24] 6499 	mov	dph,(_addr0 + 1)
      001E4D 12r0Dr67         [24] 6500 	lcall	_HEXtoASCII_16write
                                   6501 ;	ecen4330lab7.c:2013: LCD_string_write(" -\n");
      001E50 90r08r19         [24] 6502 	mov	dptr,#___str_35
      001E53 75 F0 80         [24] 6503 	mov	b,#0x80
      001E56 12r0ArBA         [24] 6504 	lcall	_LCD_string_write
                                   6505 ;	ecen4330lab7.c:2014: HEXtoASCII_16write(addr1);
      001E59 85*23 82         [24] 6506 	mov	dpl,_addr1
      001E5C 85*24 83         [24] 6507 	mov	dph,(_addr1 + 1)
      001E5F 12r0Dr67         [24] 6508 	lcall	_HEXtoASCII_16write
                                   6509 ;	ecen4330lab7.c:2015: delay(200);
      001E62 90 00 C8         [24] 6510 	mov	dptr,#0x00c8
      001E65 12r01r1A         [24] 6511 	lcall	_delay
                                   6512 ;	ecen4330lab7.c:2016: resetLCD();
      001E68 12r0Er4E         [24] 6513 	lcall	_resetLCD
                                   6514 ;	ecen4330lab7.c:2017: LCD_string_write("Returning to\nmain menu.");
      001E6B 90r06r4A         [24] 6515 	mov	dptr,#___str_18
      001E6E 75 F0 80         [24] 6516 	mov	b,#0x80
      001E71 12r0ArBA         [24] 6517 	lcall	_LCD_string_write
                                   6518 ;	ecen4330lab7.c:2018: delay(100);
      001E74 90 00 64         [24] 6519 	mov	dptr,#0x0064
      001E77 02r01r1A         [24] 6520 	ljmp	_delay
      001E7A                       6521 00142$:
                                   6522 ;	ecen4330lab7.c:2026: resetLCD();
      001E7A 12r0Er4E         [24] 6523 	lcall	_resetLCD
                                   6524 ;	ecen4330lab7.c:2027: setTextColor(GREEN, BLACK);
      001E7D E4               [12] 6525 	clr	a
      001E7E F5*00            [12] 6526 	mov	_setTextColor_PARM_2,a
      001E80 F5*01            [12] 6527 	mov	(_setTextColor_PARM_2 + 1),a
      001E82 90 07 E0         [24] 6528 	mov	dptr,#0x07e0
      001E85 12r03rCB         [24] 6529 	lcall	_setTextColor
                                   6530 ;	ecen4330lab7.c:2028: LCD_string_write("\n0x");
      001E88 90r07rE1         [24] 6531 	mov	dptr,#___str_30
      001E8B 75 F0 80         [24] 6532 	mov	b,#0x80
      001E8E 12r0ArBA         [24] 6533 	lcall	_LCD_string_write
                                   6534 ;	ecen4330lab7.c:2029: HEXtoASCII_8write(byte1);
      001E91 85*2F 82         [24] 6535 	mov	dpl,_byte1
      001E94 12r0Dr2A         [24] 6536 	lcall	_HEXtoASCII_8write
                                   6537 ;	ecen4330lab7.c:2030: LCD_string_write(" found at\nthe following\naddresses:\n\n");
      001E97 90r09r34         [24] 6538 	mov	dptr,#___str_48
      001E9A 75 F0 80         [24] 6539 	mov	b,#0x80
      001E9D 12r0ArBA         [24] 6540 	lcall	_LCD_string_write
                                   6541 ;	ecen4330lab7.c:2031: delay(200);
      001EA0 90 00 C8         [24] 6542 	mov	dptr,#0x00c8
      001EA3 12r01r1A         [24] 6543 	lcall	_delay
                                   6544 ;	ecen4330lab7.c:2032: addr2 = currAddr0;					// Load first found address of page
      001EA6 85*29*25         [24] 6545 	mov	_addr2,_currAddr0
      001EA9 85*2A*26         [24] 6546 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6547 ;	ecen4330lab7.c:2037: do{
      001EAC                       6548 00138$:
                                   6549 ;	ecen4330lab7.c:2038: resetLCD();
      001EAC 12r0Er4E         [24] 6550 	lcall	_resetLCD
                                   6551 ;	ecen4330lab7.c:2039: currAddr0 = addr2;				// Load current address	
      001EAF 85*25*29         [24] 6552 	mov	_currAddr0,_addr2
      001EB2 85*26*2A         [24] 6553 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6554 ;	ecen4330lab7.c:2040: HEXtoASCII_16write(currAddr0);	// Write found address to LCD
      001EB5 85*29 82         [24] 6555 	mov	dpl,_currAddr0
      001EB8 85*2A 83         [24] 6556 	mov	dph,(_currAddr0 + 1)
      001EBB 12r0Dr67         [24] 6557 	lcall	_HEXtoASCII_16write
                                   6558 ;	ecen4330lab7.c:2041: count = 7;						// Set page address display counter
      001EBE 75*32 07         [24] 6559 	mov	_count,#0x07
      001EC1 75*33 00         [24] 6560 	mov	(_count + 1),#0x00
                                   6561 ;	ecen4330lab7.c:2042: currAddr1++;					// Increment page count
      001EC4 05*2B            [12] 6562 	inc	_currAddr1
      001EC6 E4               [12] 6563 	clr	a
      001EC7 B5*2B 02         [24] 6564 	cjne	a,_currAddr1,00241$
      001ECA 05*2C            [12] 6565 	inc	(_currAddr1 + 1)
      001ECC                       6566 00241$:
                                   6567 ;	ecen4330lab7.c:2048: if(currAddr0 != 0xFFFF){
      001ECC 74 FF            [12] 6568 	mov	a,#0xff
      001ECE B5*29 05         [24] 6569 	cjne	a,_currAddr0,00242$
      001ED1 B5*2A 02         [24] 6570 	cjne	a,(_currAddr0 + 1),00242$
      001ED4 80 4C            [24] 6571 	sjmp	00112$
      001ED6                       6572 00242$:
                                   6573 ;	ecen4330lab7.c:2049: do{
      001ED6                       6574 00108$:
                                   6575 ;	ecen4330lab7.c:2050: currAddr0++;				// Next RAM address
      001ED6 05*29            [12] 6576 	inc	_currAddr0
      001ED8 E4               [12] 6577 	clr	a
      001ED9 B5*29 02         [24] 6578 	cjne	a,_currAddr0,00243$
      001EDC 05*2A            [12] 6579 	inc	(_currAddr0 + 1)
      001EDE                       6580 00243$:
                                   6581 ;	ecen4330lab7.c:2051: data = RAMread(currAddr0);	// Read data
      001EDE 85*29 82         [24] 6582 	mov	dpl,_currAddr0
      001EE1 85*2A 83         [24] 6583 	mov	dph,(_currAddr0 + 1)
      001EE4 12r0Er3B         [24] 6584 	lcall	_RAMread
      001EE7 85 82*20         [24] 6585 	mov	_data,dpl
                                   6586 ;	ecen4330lab7.c:2052: if(data == byte1){			// If data = search value
      001EEA AE*20            [24] 6587 	mov	r6,_data
      001EEC 7F 00            [12] 6588 	mov	r7,#0x00
      001EEE EE               [12] 6589 	mov	a,r6
      001EEF B5*2F 1F         [24] 6590 	cjne	a,_byte1,00109$
      001EF2 EF               [12] 6591 	mov	a,r7
      001EF3 B5*30 1B         [24] 6592 	cjne	a,(_byte1 + 1),00109$
                                   6593 ;	ecen4330lab7.c:2053: count--;				// Decrement page address display counter
      001EF6 15*32            [12] 6594 	dec	_count
      001EF8 74 FF            [12] 6595 	mov	a,#0xff
      001EFA B5*32 02         [24] 6596 	cjne	a,_count,00246$
      001EFD 15*33            [12] 6597 	dec	(_count + 1)
      001EFF                       6598 00246$:
                                   6599 ;	ecen4330lab7.c:2054: LCD_string_write("\n");	// Next line
      001EFF 90r08r1D         [24] 6600 	mov	dptr,#___str_36
      001F02 75 F0 80         [24] 6601 	mov	b,#0x80
      001F05 12r0ArBA         [24] 6602 	lcall	_LCD_string_write
                                   6603 ;	ecen4330lab7.c:2055: HEXtoASCII_16write(currAddr0);	// Display found address
      001F08 85*29 82         [24] 6604 	mov	dpl,_currAddr0
      001F0B 85*2A 83         [24] 6605 	mov	dph,(_currAddr0 + 1)
      001F0E 12r0Dr67         [24] 6606 	lcall	_HEXtoASCII_16write
      001F11                       6607 00109$:
                                   6608 ;	ecen4330lab7.c:2057: }while(currAddr0 < addr1 && count > 0);
      001F11 C3               [12] 6609 	clr	c
      001F12 E5*29            [12] 6610 	mov	a,_currAddr0
      001F14 95*23            [12] 6611 	subb	a,_addr1
      001F16 E5*2A            [12] 6612 	mov	a,(_currAddr0 + 1)
      001F18 95*24            [12] 6613 	subb	a,(_addr1 + 1)
      001F1A 50 06            [24] 6614 	jnc	00112$
      001F1C E5*32            [12] 6615 	mov	a,_count
      001F1E 45*33            [12] 6616 	orl	a,(_count + 1)
      001F20 70 B4            [24] 6617 	jnz	00108$
      001F22                       6618 00112$:
                                   6619 ;	ecen4330lab7.c:2064: setCursor(0, 250);
      001F22 75*00 FA         [24] 6620 	mov	_setCursor_PARM_2,#0xfa
      001F25 75*01 00         [24] 6621 	mov	(_setCursor_PARM_2 + 1),#0x00
      001F28 90 00 00         [24] 6622 	mov	dptr,#0x0000
      001F2B 12r03rBE         [24] 6623 	lcall	_setCursor
                                   6624 ;	ecen4330lab7.c:2065: setTextSize(2);
      001F2E 75 82 02         [24] 6625 	mov	dpl,#0x02
      001F31 12r03rD8         [24] 6626 	lcall	_setTextSize
                                   6627 ;	ecen4330lab7.c:2066: setTextColor(WHITE, BLACK);
      001F34 E4               [12] 6628 	clr	a
      001F35 F5*00            [12] 6629 	mov	_setTextColor_PARM_2,a
      001F37 F5*01            [12] 6630 	mov	(_setTextColor_PARM_2 + 1),a
      001F39 90 FF FF         [24] 6631 	mov	dptr,#0xffff
      001F3C 12r03rCB         [24] 6632 	lcall	_setTextColor
                                   6633 ;	ecen4330lab7.c:2067: LCD_string_write("  (0) - Next Page\n  (1) - Prev Page\n  (E) - END\n");
      001F3F 90r08r1F         [24] 6634 	mov	dptr,#___str_37
      001F42 75 F0 80         [24] 6635 	mov	b,#0x80
      001F45 12r0ArBA         [24] 6636 	lcall	_LCD_string_write
                                   6637 ;	ecen4330lab7.c:2068: HEXtoASCII_16write(currAddr1);
      001F48 85*2B 82         [24] 6638 	mov	dpl,_currAddr1
      001F4B 85*2C 83         [24] 6639 	mov	dph,(_currAddr1 + 1)
      001F4E 12r0Dr67         [24] 6640 	lcall	_HEXtoASCII_16write
                                   6641 ;	ecen4330lab7.c:2074: key = keyDetect();
      001F51 12r0ArF9         [24] 6642 	lcall	_keyDetect
      001F54 85 82*16         [24] 6643 	mov	_key,dpl
                                   6644 ;	ecen4330lab7.c:2075: switch (key)
      001F57 74 30            [12] 6645 	mov	a,#0x30
      001F59 B5*16 02         [24] 6646 	cjne	a,_key,00249$
      001F5C 80 13            [24] 6647 	sjmp	00113$
      001F5E                       6648 00249$:
      001F5E 74 31            [12] 6649 	mov	a,#0x31
      001F60 B5*16 03         [24] 6650 	cjne	a,_key,00250$
      001F63 02r20r12         [24] 6651 	ljmp	00126$
      001F66                       6652 00250$:
      001F66 74 45            [12] 6653 	mov	a,#0x45
      001F68 B5*16 03         [24] 6654 	cjne	a,_key,00251$
      001F6B 02r20r92         [24] 6655 	ljmp	00135$
      001F6E                       6656 00251$:
      001F6E 02r20rA6         [24] 6657 	ljmp	00136$
                                   6658 ;	ecen4330lab7.c:2081: case '0':
      001F71                       6659 00113$:
                                   6660 ;	ecen4330lab7.c:2086: if(currAddr0 >= addr1){
      001F71 C3               [12] 6661 	clr	c
      001F72 E5*29            [12] 6662 	mov	a,_currAddr0
      001F74 95*23            [12] 6663 	subb	a,_addr1
      001F76 E5*2A            [12] 6664 	mov	a,(_currAddr0 + 1)
      001F78 95*24            [12] 6665 	subb	a,(_addr1 + 1)
      001F7A 40 1E            [24] 6666 	jc	00117$
                                   6667 ;	ecen4330lab7.c:2087: resetLCD();
      001F7C 12r0Er4E         [24] 6668 	lcall	_resetLCD
                                   6669 ;	ecen4330lab7.c:2088: LCD_string_write("End of Data.");
      001F7F 90r09r59         [24] 6670 	mov	dptr,#___str_49
      001F82 75 F0 80         [24] 6671 	mov	b,#0x80
      001F85 12r0ArBA         [24] 6672 	lcall	_LCD_string_write
                                   6673 ;	ecen4330lab7.c:2089: delay(200);
      001F88 90 00 C8         [24] 6674 	mov	dptr,#0x00c8
      001F8B 12r01r1A         [24] 6675 	lcall	_delay
                                   6676 ;	ecen4330lab7.c:2090: currAddr1--;	// Reset page count to last displayed page 
      001F8E 15*2B            [12] 6677 	dec	_currAddr1
      001F90 74 FF            [12] 6678 	mov	a,#0xff
      001F92 B5*2B 02         [24] 6679 	cjne	a,_currAddr1,00253$
      001F95 15*2C            [12] 6680 	dec	(_currAddr1 + 1)
      001F97                       6681 00253$:
      001F97 02r20rB2         [24] 6682 	ljmp	00139$
                                   6683 ;	ecen4330lab7.c:2103: do{
      001F9A                       6684 00117$:
                                   6685 ;	ecen4330lab7.c:2104: currAddr0++;			// Next RAM address
      001F9A 05*29            [12] 6686 	inc	_currAddr0
      001F9C E4               [12] 6687 	clr	a
      001F9D B5*29 02         [24] 6688 	cjne	a,_currAddr0,00254$
      001FA0 05*2A            [12] 6689 	inc	(_currAddr0 + 1)
      001FA2                       6690 00254$:
                                   6691 ;	ecen4330lab7.c:2105: data = RAMread(currAddr0);	// Read data
      001FA2 85*29 82         [24] 6692 	mov	dpl,_currAddr0
      001FA5 85*2A 83         [24] 6693 	mov	dph,(_currAddr0 + 1)
      001FA8 12r0Er3B         [24] 6694 	lcall	_RAMread
      001FAB 85 82*20         [24] 6695 	mov	_data,dpl
                                   6696 ;	ecen4330lab7.c:2106: if(data == byte1){			// If data matches search value
      001FAE AE*20            [24] 6697 	mov	r6,_data
      001FB0 7F 00            [12] 6698 	mov	r7,#0x00
      001FB2 EE               [12] 6699 	mov	a,r6
      001FB3 B5*2F 0A         [24] 6700 	cjne	a,_byte1,00118$
      001FB6 EF               [12] 6701 	mov	a,r7
      001FB7 B5*30 06         [24] 6702 	cjne	a,(_byte1 + 1),00118$
                                   6703 ;	ecen4330lab7.c:2107: addr2 = currAddr0;		// Set first address of display page
      001FBA 85*29*25         [24] 6704 	mov	_addr2,_currAddr0
      001FBD 85*2A*26         [24] 6705 	mov	(_addr2 + 1),(_currAddr0 + 1)
      001FC0                       6706 00118$:
                                   6707 ;	ecen4330lab7.c:2109: }while(currAddr0 < addr1 && data != byte1);
      001FC0 C3               [12] 6708 	clr	c
      001FC1 E5*29            [12] 6709 	mov	a,_currAddr0
      001FC3 95*23            [12] 6710 	subb	a,_addr1
      001FC5 E5*2A            [12] 6711 	mov	a,(_currAddr0 + 1)
      001FC7 95*24            [12] 6712 	subb	a,(_addr1 + 1)
      001FC9 50 0C            [24] 6713 	jnc	00119$
      001FCB AE*20            [24] 6714 	mov	r6,_data
      001FCD 7F 00            [12] 6715 	mov	r7,#0x00
      001FCF EE               [12] 6716 	mov	a,r6
      001FD0 B5*2F C7         [24] 6717 	cjne	a,_byte1,00117$
      001FD3 EF               [12] 6718 	mov	a,r7
      001FD4 B5*30 C3         [24] 6719 	cjne	a,(_byte1 + 1),00117$
      001FD7                       6720 00119$:
                                   6721 ;	ecen4330lab7.c:2115: if(currAddr0 >= addr1 && data != byte1){
      001FD7 C3               [12] 6722 	clr	c
      001FD8 E5*29            [12] 6723 	mov	a,_currAddr0
      001FDA 95*23            [12] 6724 	subb	a,_addr1
      001FDC E5*2A            [12] 6725 	mov	a,(_currAddr0 + 1)
      001FDE 95*24            [12] 6726 	subb	a,(_addr1 + 1)
      001FE0 50 03            [24] 6727 	jnc	00260$
      001FE2 02r20rB2         [24] 6728 	ljmp	00139$
      001FE5                       6729 00260$:
      001FE5 AE*20            [24] 6730 	mov	r6,_data
      001FE7 7F 00            [12] 6731 	mov	r7,#0x00
      001FE9 EE               [12] 6732 	mov	a,r6
      001FEA B5*2F 07         [24] 6733 	cjne	a,_byte1,00261$
      001FED EF               [12] 6734 	mov	a,r7
      001FEE B5*30 03         [24] 6735 	cjne	a,(_byte1 + 1),00261$
      001FF1 02r20rB2         [24] 6736 	ljmp	00139$
      001FF4                       6737 00261$:
                                   6738 ;	ecen4330lab7.c:2116: resetLCD();
      001FF4 12r0Er4E         [24] 6739 	lcall	_resetLCD
                                   6740 ;	ecen4330lab7.c:2117: LCD_string_write("End of Data.");
      001FF7 90r09r59         [24] 6741 	mov	dptr,#___str_49
      001FFA 75 F0 80         [24] 6742 	mov	b,#0x80
      001FFD 12r0ArBA         [24] 6743 	lcall	_LCD_string_write
                                   6744 ;	ecen4330lab7.c:2118: delay(200);
      002000 90 00 C8         [24] 6745 	mov	dptr,#0x00c8
      002003 12r01r1A         [24] 6746 	lcall	_delay
                                   6747 ;	ecen4330lab7.c:2119: currAddr1--;	// Reset page count to last displayed page
      002006 15*2B            [12] 6748 	dec	_currAddr1
      002008 74 FF            [12] 6749 	mov	a,#0xff
      00200A B5*2B 02         [24] 6750 	cjne	a,_currAddr1,00262$
      00200D 15*2C            [12] 6751 	dec	(_currAddr1 + 1)
      00200F                       6752 00262$:
                                   6753 ;	ecen4330lab7.c:2124: break;
      00200F 02r20rB2         [24] 6754 	ljmp	00139$
                                   6755 ;	ecen4330lab7.c:2131: case '1':
      002012                       6756 00126$:
                                   6757 ;	ecen4330lab7.c:2135: if(currAddr1 == 1){
      002012 74 01            [12] 6758 	mov	a,#0x01
      002014 B5*2B 06         [24] 6759 	cjne	a,_currAddr1,00263$
      002017 14               [12] 6760 	dec	a
      002018 B5*2C 02         [24] 6761 	cjne	a,(_currAddr1 + 1),00263$
      00201B 80 02            [24] 6762 	sjmp	00264$
      00201D                       6763 00263$:
      00201D 80 1E            [24] 6764 	sjmp	00133$
      00201F                       6765 00264$:
                                   6766 ;	ecen4330lab7.c:2136: resetLCD();
      00201F 12r0Er4E         [24] 6767 	lcall	_resetLCD
                                   6768 ;	ecen4330lab7.c:2137: LCD_string_write("End of Data.");
      002022 90r09r59         [24] 6769 	mov	dptr,#___str_49
      002025 75 F0 80         [24] 6770 	mov	b,#0x80
      002028 12r0ArBA         [24] 6771 	lcall	_LCD_string_write
                                   6772 ;	ecen4330lab7.c:2138: delay(200);
      00202B 90 00 C8         [24] 6773 	mov	dptr,#0x00c8
      00202E 12r01r1A         [24] 6774 	lcall	_delay
                                   6775 ;	ecen4330lab7.c:2139: currAddr1--;	// Reset page count to last displayed page
      002031 15*2B            [12] 6776 	dec	_currAddr1
      002033 74 FF            [12] 6777 	mov	a,#0xff
      002035 B5*2B 02         [24] 6778 	cjne	a,_currAddr1,00265$
      002038 15*2C            [12] 6779 	dec	(_currAddr1 + 1)
      00203A                       6780 00265$:
      00203A 02r20rB2         [24] 6781 	ljmp	00139$
      00203D                       6782 00133$:
                                   6783 ;	ecen4330lab7.c:2147: currAddr0 = addr2;
      00203D 85*25*29         [24] 6784 	mov	_currAddr0,_addr2
      002040 85*26*2A         [24] 6785 	mov	(_currAddr0 + 1),(_addr2 + 1)
                                   6786 ;	ecen4330lab7.c:2148: count = 0;
      002043 E4               [12] 6787 	clr	a
      002044 F5*32            [12] 6788 	mov	_count,a
      002046 F5*33            [12] 6789 	mov	(_count + 1),a
                                   6790 ;	ecen4330lab7.c:2149: while(count < 8){
      002048                       6791 00129$:
      002048 C3               [12] 6792 	clr	c
      002049 E5*32            [12] 6793 	mov	a,_count
      00204B 94 08            [12] 6794 	subb	a,#0x08
      00204D E5*33            [12] 6795 	mov	a,(_count + 1)
      00204F 94 00            [12] 6796 	subb	a,#0x00
      002051 50 2B            [24] 6797 	jnc	00131$
                                   6798 ;	ecen4330lab7.c:2150: currAddr0--;
      002053 15*29            [12] 6799 	dec	_currAddr0
      002055 74 FF            [12] 6800 	mov	a,#0xff
      002057 B5*29 02         [24] 6801 	cjne	a,_currAddr0,00267$
      00205A 15*2A            [12] 6802 	dec	(_currAddr0 + 1)
      00205C                       6803 00267$:
                                   6804 ;	ecen4330lab7.c:2151: data = RAMread(currAddr0);
      00205C 85*29 82         [24] 6805 	mov	dpl,_currAddr0
      00205F 85*2A 83         [24] 6806 	mov	dph,(_currAddr0 + 1)
      002062 12r0Er3B         [24] 6807 	lcall	_RAMread
      002065 85 82*20         [24] 6808 	mov	_data,dpl
                                   6809 ;	ecen4330lab7.c:2152: if(data == byte1){
      002068 AE*20            [24] 6810 	mov	r6,_data
      00206A 7F 00            [12] 6811 	mov	r7,#0x00
      00206C EE               [12] 6812 	mov	a,r6
      00206D B5*2F D8         [24] 6813 	cjne	a,_byte1,00129$
      002070 EF               [12] 6814 	mov	a,r7
      002071 B5*30 D4         [24] 6815 	cjne	a,(_byte1 + 1),00129$
                                   6816 ;	ecen4330lab7.c:2153: count++;
      002074 05*32            [12] 6817 	inc	_count
      002076 E4               [12] 6818 	clr	a
      002077 B5*32 CE         [24] 6819 	cjne	a,_count,00129$
      00207A 05*33            [12] 6820 	inc	(_count + 1)
      00207C 80 CA            [24] 6821 	sjmp	00129$
      00207E                       6822 00131$:
                                   6823 ;	ecen4330lab7.c:2156: addr2 = currAddr0;
      00207E 85*29*25         [24] 6824 	mov	_addr2,_currAddr0
      002081 85*2A*26         [24] 6825 	mov	(_addr2 + 1),(_currAddr0 + 1)
                                   6826 ;	ecen4330lab7.c:2157: currAddr1 -= 2;
      002084 E5*2B            [12] 6827 	mov	a,_currAddr1
      002086 24 FE            [12] 6828 	add	a,#0xfe
      002088 F5*2B            [12] 6829 	mov	_currAddr1,a
      00208A E5*2C            [12] 6830 	mov	a,(_currAddr1 + 1)
      00208C 34 FF            [12] 6831 	addc	a,#0xff
      00208E F5*2C            [12] 6832 	mov	(_currAddr1 + 1),a
                                   6833 ;	ecen4330lab7.c:2159: break;
                                   6834 ;	ecen4330lab7.c:2165: case 'E':
      002090 80 20            [24] 6835 	sjmp	00139$
      002092                       6836 00135$:
                                   6837 ;	ecen4330lab7.c:2166: resetLCD();
      002092 12r0Er4E         [24] 6838 	lcall	_resetLCD
                                   6839 ;	ecen4330lab7.c:2167: LCD_string_write("Returning to\nmain menu.");
      002095 90r06r4A         [24] 6840 	mov	dptr,#___str_18
      002098 75 F0 80         [24] 6841 	mov	b,#0x80
      00209B 12r0ArBA         [24] 6842 	lcall	_LCD_string_write
                                   6843 ;	ecen4330lab7.c:2168: delay(200);
      00209E 90 00 C8         [24] 6844 	mov	dptr,#0x00c8
      0020A1 12r01r1A         [24] 6845 	lcall	_delay
                                   6846 ;	ecen4330lab7.c:2169: break;
                                   6847 ;	ecen4330lab7.c:2175: default:
      0020A4 80 0C            [24] 6848 	sjmp	00139$
      0020A6                       6849 00136$:
                                   6850 ;	ecen4330lab7.c:2176: invalidInput();
      0020A6 12r0Er76         [24] 6851 	lcall	_invalidInput
                                   6852 ;	ecen4330lab7.c:2177: currAddr1--;
      0020A9 15*2B            [12] 6853 	dec	_currAddr1
      0020AB 74 FF            [12] 6854 	mov	a,#0xff
      0020AD B5*2B 02         [24] 6855 	cjne	a,_currAddr1,00271$
      0020B0 15*2C            [12] 6856 	dec	(_currAddr1 + 1)
      0020B2                       6857 00271$:
                                   6858 ;	ecen4330lab7.c:2180: }
      0020B2                       6859 00139$:
                                   6860 ;	ecen4330lab7.c:2181: }while(key != 'E');
      0020B2 74 45            [12] 6861 	mov	a,#0x45
      0020B4 B5*16 01         [24] 6862 	cjne	a,_key,00272$
      0020B7 22               [24] 6863 	ret
      0020B8                       6864 00272$:
      0020B8 02r1ErAC         [24] 6865 	ljmp	00138$
                                   6866 ;	ecen4330lab7.c:2183: }
      0020BB 22               [24] 6867 	ret
                                   6868 ;------------------------------------------------------------
                                   6869 ;Allocation info for local variables in function 'FIND'
                                   6870 ;------------------------------------------------------------
                                   6871 ;	ecen4330lab7.c:2191: void FIND(){
                                   6872 ;	-----------------------------------------
                                   6873 ;	 function FIND
                                   6874 ;	-----------------------------------------
      0020BC                       6875 _FIND:
                                   6876 ;	ecen4330lab7.c:2192: endAddrCalc = 0;
      0020BC E4               [12] 6877 	clr	a
      0020BD F5*34            [12] 6878 	mov	_endAddrCalc,a
      0020BF F5*35            [12] 6879 	mov	(_endAddrCalc + 1),a
      0020C1 F5*36            [12] 6880 	mov	(_endAddrCalc + 2),a
      0020C3 F5*37            [12] 6881 	mov	(_endAddrCalc + 3),a
                                   6882 ;	ecen4330lab7.c:2193: addr0 = 0;                      // Starting Address
      0020C5 F5*21            [12] 6883 	mov	_addr0,a
      0020C7 F5*22            [12] 6884 	mov	(_addr0 + 1),a
                                   6885 ;	ecen4330lab7.c:2194: addr1 = 0;                      // End Address
      0020C9 F5*23            [12] 6886 	mov	_addr1,a
      0020CB F5*24            [12] 6887 	mov	(_addr1 + 1),a
                                   6888 ;	ecen4330lab7.c:2195: dataType = 0;                   // Data Type
                                   6889 ;	1-genFromRTrack replaced	mov	_dataType,#0x00
      0020CD F5*1A            [12] 6890 	mov	_dataType,a
                                   6891 ;	ecen4330lab7.c:2196: dataSize = 0;                   // Data Size
      0020CF F5*1B            [12] 6892 	mov	_dataSize,a
      0020D1 F5*1C            [12] 6893 	mov	(_dataSize + 1),a
                                   6894 ;	ecen4330lab7.c:2197: byte1 = 0;                       // Find Value
      0020D3 F5*2F            [12] 6895 	mov	_byte1,a
      0020D5 F5*30            [12] 6896 	mov	(_byte1 + 1),a
                                   6897 ;	ecen4330lab7.c:2200: resetLCD();
      0020D7 12r0Er4E         [24] 6898 	lcall	_resetLCD
                                   6899 ;	ecen4330lab7.c:2201: LCD_string_write("\nEnter\nstarting RAM\naddress:\n\n   0x____");
      0020DA 90r09r66         [24] 6900 	mov	dptr,#___str_50
      0020DD 75 F0 80         [24] 6901 	mov	b,#0x80
      0020E0 12r0ArBA         [24] 6902 	lcall	_LCD_string_write
                                   6903 ;	ecen4330lab7.c:2202: cursor_x -= 4 * textsize * 6;
      0020E3 E5*0C            [12] 6904 	mov	a,_textsize
      0020E5 75 F0 18         [24] 6905 	mov	b,#0x18
      0020E8 A4               [48] 6906 	mul	ab
      0020E9 FE               [12] 6907 	mov	r6,a
      0020EA AF F0            [24] 6908 	mov	r7,b
      0020EC E5*08            [12] 6909 	mov	a,_cursor_x
      0020EE C3               [12] 6910 	clr	c
      0020EF 9E               [12] 6911 	subb	a,r6
      0020F0 F5*08            [12] 6912 	mov	_cursor_x,a
      0020F2 E5*09            [12] 6913 	mov	a,(_cursor_x + 1)
      0020F4 9F               [12] 6914 	subb	a,r7
      0020F5 F5*09            [12] 6915 	mov	(_cursor_x + 1),a
                                   6916 ;	ecen4330lab7.c:2203: inputRead16();                  // Read input
      0020F7 12r0Er9F         [24] 6917 	lcall	_inputRead16
                                   6918 ;	ecen4330lab7.c:2204: addr0 = input16;                // Start address
      0020FA 85*17*21         [24] 6919 	mov	_addr0,_input16
      0020FD 85*18*22         [24] 6920 	mov	(_addr0 + 1),(_input16 + 1)
                                   6921 ;	ecen4330lab7.c:2210: resetLCD();
      002100 12r0Er4E         [24] 6922 	lcall	_resetLCD
                                   6923 ;	ecen4330lab7.c:2211: inputDataSize();                // Prompt & read input
      002103 12r10r6B         [24] 6924 	lcall	_inputDataSize
                                   6925 ;	ecen4330lab7.c:2214: resetLCD();
      002106 12r0Er4E         [24] 6926 	lcall	_resetLCD
                                   6927 ;	ecen4330lab7.c:2215: LCD_string_write("\nEnter search\nvalue:\n\n   0x__");
      002109 90r09r8E         [24] 6928 	mov	dptr,#___str_51
      00210C 75 F0 80         [24] 6929 	mov	b,#0x80
      00210F 12r0ArBA         [24] 6930 	lcall	_LCD_string_write
                                   6931 ;	ecen4330lab7.c:2216: cursor_x -= 2 * textsize * 6;
      002112 E5*0C            [12] 6932 	mov	a,_textsize
      002114 75 F0 0C         [24] 6933 	mov	b,#0x0c
      002117 A4               [48] 6934 	mul	ab
      002118 FE               [12] 6935 	mov	r6,a
      002119 AF F0            [24] 6936 	mov	r7,b
      00211B E5*08            [12] 6937 	mov	a,_cursor_x
      00211D C3               [12] 6938 	clr	c
      00211E 9E               [12] 6939 	subb	a,r6
      00211F F5*08            [12] 6940 	mov	_cursor_x,a
      002121 E5*09            [12] 6941 	mov	a,(_cursor_x + 1)
      002123 9F               [12] 6942 	subb	a,r7
      002124 F5*09            [12] 6943 	mov	(_cursor_x + 1),a
                                   6944 ;	ecen4330lab7.c:2217: inputRead8();                  // Read input
      002126 12r0Fr5A         [24] 6945 	lcall	_inputRead8
                                   6946 ;	ecen4330lab7.c:2218: byte1 = input8;                 // Find value
      002129 85*19*2F         [24] 6947 	mov	_byte1,_input8
      00212C 75*30 00         [24] 6948 	mov	(_byte1 + 1),#0x00
                                   6949 ;	ecen4330lab7.c:2221: endAddrCalc = addr0 + dataSize;
      00212F E5*1B            [12] 6950 	mov	a,_dataSize
      002131 25*21            [12] 6951 	add	a,_addr0
      002133 FE               [12] 6952 	mov	r6,a
      002134 E5*1C            [12] 6953 	mov	a,(_dataSize + 1)
      002136 35*22            [12] 6954 	addc	a,(_addr0 + 1)
      002138 FF               [12] 6955 	mov	r7,a
      002139 8E*34            [24] 6956 	mov	_endAddrCalc,r6
      00213B 8F*35            [24] 6957 	mov	(_endAddrCalc + 1),r7
      00213D 75*36 00         [24] 6958 	mov	(_endAddrCalc + 2),#0x00
      002140 75*37 00         [24] 6959 	mov	(_endAddrCalc + 3),#0x00
                                   6960 ;	ecen4330lab7.c:2222: if(endAddrCalc < addr0){ // RAM overflow
      002143 AC*21            [24] 6961 	mov	r4,_addr0
      002145 AD*22            [24] 6962 	mov	r5,(_addr0 + 1)
      002147 7E 00            [12] 6963 	mov	r6,#0x00
      002149 7F 00            [12] 6964 	mov	r7,#0x00
      00214B C3               [12] 6965 	clr	c
      00214C E5*34            [12] 6966 	mov	a,_endAddrCalc
      00214E 9C               [12] 6967 	subb	a,r4
      00214F E5*35            [12] 6968 	mov	a,(_endAddrCalc + 1)
      002151 9D               [12] 6969 	subb	a,r5
      002152 E5*36            [12] 6970 	mov	a,(_endAddrCalc + 2)
      002154 9E               [12] 6971 	subb	a,r6
      002155 E5*37            [12] 6972 	mov	a,(_endAddrCalc + 3)
      002157 9F               [12] 6973 	subb	a,r7
      002158 50 14            [24] 6974 	jnc	00102$
                                   6975 ;	ecen4330lab7.c:2223: addr1 = 0xFFFF;             // Set end address
      00215A 75*23 FF         [24] 6976 	mov	_addr1,#0xff
                                   6977 ;	ecen4330lab7.c:2224: dataSize = addr1 - addr0;   // Recalculate data size
      00215D 74 FF            [12] 6978 	mov	a,#0xff
      00215F F5*24            [12] 6979 	mov	(_addr1 + 1),a
      002161 C3               [12] 6980 	clr	c
      002162 95*21            [12] 6981 	subb	a,_addr0
      002164 F5*1B            [12] 6982 	mov	_dataSize,a
      002166 74 FF            [12] 6983 	mov	a,#0xff
      002168 95*22            [12] 6984 	subb	a,(_addr0 + 1)
      00216A F5*1C            [12] 6985 	mov	(_dataSize + 1),a
      00216C 80 0C            [24] 6986 	sjmp	00103$
      00216E                       6987 00102$:
                                   6988 ;	ecen4330lab7.c:2227: addr1 = addr0 + dataSize;
      00216E E5*1B            [12] 6989 	mov	a,_dataSize
      002170 25*21            [12] 6990 	add	a,_addr0
      002172 F5*23            [12] 6991 	mov	_addr1,a
      002174 E5*1C            [12] 6992 	mov	a,(_dataSize + 1)
      002176 35*22            [12] 6993 	addc	a,(_addr0 + 1)
      002178 F5*24            [12] 6994 	mov	(_addr1 + 1),a
      00217A                       6995 00103$:
                                   6996 ;	ecen4330lab7.c:2247: FIND_display();                 // Display dump data
                                   6997 ;	ecen4330lab7.c:2248: }
      00217A 02r1DrC7         [24] 6998 	ljmp	_FIND_display
                                   6999 ;------------------------------------------------------------
                                   7000 ;Allocation info for local variables in function 'resetLCD1'
                                   7001 ;------------------------------------------------------------
                                   7002 ;	ecen4330lab7.c:2250: void resetLCD1(){
                                   7003 ;	-----------------------------------------
                                   7004 ;	 function resetLCD1
                                   7005 ;	-----------------------------------------
      00217D                       7006 _resetLCD1:
                                   7007 ;	ecen4330lab7.c:2251: setRotation(4);
      00217D 75 82 04         [24] 7008 	mov	dpl,#0x04
      002180 12r03rF0         [24] 7009 	lcall	_setRotation
                                   7010 ;	ecen4330lab7.c:2252: setTextColor(GRAY, BLACK);
      002183 E4               [12] 7011 	clr	a
      002184 F5*00            [12] 7012 	mov	_setTextColor_PARM_2,a
      002186 F5*01            [12] 7013 	mov	(_setTextColor_PARM_2 + 1),a
      002188 90 D6 BA         [24] 7014 	mov	dptr,#0xd6ba
      00218B 12r03rCB         [24] 7015 	lcall	_setTextColor
                                   7016 ;	ecen4330lab7.c:2253: setTextSize(3);
      00218E 75 82 03         [24] 7017 	mov	dpl,#0x03
      002191 12r03rD8         [24] 7018 	lcall	_setTextSize
                                   7019 ;	ecen4330lab7.c:2254: fillScreen(BLACK);
      002194 90 00 00         [24] 7020 	mov	dptr,#0x0000
      002197 12r07r63         [24] 7021 	lcall	_fillScreen
                                   7022 ;	ecen4330lab7.c:2255: setCursor(0, 0);
      00219A E4               [12] 7023 	clr	a
      00219B F5*00            [12] 7024 	mov	_setCursor_PARM_2,a
      00219D F5*01            [12] 7025 	mov	(_setCursor_PARM_2 + 1),a
      00219F 90 00 00         [24] 7026 	mov	dptr,#0x0000
                                   7027 ;	ecen4330lab7.c:2256: }
      0021A2 02r03rBE         [24] 7028 	ljmp	_setCursor
                                   7029 ;------------------------------------------------------------
                                   7030 ;Allocation info for local variables in function 'UART_dataRate'
                                   7031 ;------------------------------------------------------------
                                   7032 ;	ecen4330lab7.c:2275: void UART_dataRate() {
                                   7033 ;	-----------------------------------------
                                   7034 ;	 function UART_dataRate
                                   7035 ;	-----------------------------------------
      0021A5                       7036 _UART_dataRate:
                                   7037 ;	ecen4330lab7.c:2276: resetLCD();
      0021A5 12r0Er4E         [24] 7038 	lcall	_resetLCD
                                   7039 ;	ecen4330lab7.c:2277: do {
      0021A8                       7040 00119$:
                                   7041 ;	ecen4330lab7.c:2278: LCD_string_write("\n(1) 1200\n");
      0021A8 90r09rAC         [24] 7042 	mov	dptr,#___str_52
      0021AB 75 F0 80         [24] 7043 	mov	b,#0x80
      0021AE 12r0ArBA         [24] 7044 	lcall	_LCD_string_write
                                   7045 ;	ecen4330lab7.c:2279: LCD_string_write("(2) 2400\n");
      0021B1 90r09rB7         [24] 7046 	mov	dptr,#___str_53
      0021B4 75 F0 80         [24] 7047 	mov	b,#0x80
      0021B7 12r0ArBA         [24] 7048 	lcall	_LCD_string_write
                                   7049 ;	ecen4330lab7.c:2280: LCD_string_write("(3) 4800\n");
      0021BA 90r09rC1         [24] 7050 	mov	dptr,#___str_54
      0021BD 75 F0 80         [24] 7051 	mov	b,#0x80
      0021C0 12r0ArBA         [24] 7052 	lcall	_LCD_string_write
                                   7053 ;	ecen4330lab7.c:2281: LCD_string_write("(4) 9600\n");
      0021C3 90r09rCB         [24] 7054 	mov	dptr,#___str_55
      0021C6 75 F0 80         [24] 7055 	mov	b,#0x80
      0021C9 12r0ArBA         [24] 7056 	lcall	_LCD_string_write
                                   7057 ;	ecen4330lab7.c:2282: LCD_string_write("(5) 19200\n\n");
      0021CC 90r09rD5         [24] 7058 	mov	dptr,#___str_56
      0021CF 75 F0 80         [24] 7059 	mov	b,#0x80
      0021D2 12r0ArBA         [24] 7060 	lcall	_LCD_string_write
                                   7061 ;	ecen4330lab7.c:2283: LCD_string_write("Current:\n");
      0021D5 90r09rE1         [24] 7062 	mov	dptr,#___str_57
      0021D8 75 F0 80         [24] 7063 	mov	b,#0x80
      0021DB 12r0ArBA         [24] 7064 	lcall	_LCD_string_write
                                   7065 ;	ecen4330lab7.c:2285: dataRate = PCON & 0x80;
      0021DE E5 87            [12] 7066 	mov	a,_PCON
      0021E0 54 80            [12] 7067 	anl	a,#0x80
      0021E2 F5*3E            [12] 7068 	mov	_dataRate,a
                                   7069 ;	ecen4330lab7.c:2287: if(dataRate == 0x80){
      0021E4 74 80            [12] 7070 	mov	a,#0x80
      0021E6 B5*3E 1B         [24] 7071 	cjne	a,_dataRate,00110$
                                   7072 ;	ecen4330lab7.c:2288: if (TH1 == 0xFD){
      0021E9 74 FD            [12] 7073 	mov	a,#0xfd
      0021EB B5 8D 0B         [24] 7074 	cjne	a,_TH1,00102$
                                   7075 ;	ecen4330lab7.c:2289: LCD_string_write("19200\n");
      0021EE 90r09rEB         [24] 7076 	mov	dptr,#___str_58
      0021F1 75 F0 80         [24] 7077 	mov	b,#0x80
      0021F4 12r0ArBA         [24] 7078 	lcall	_LCD_string_write
      0021F7 80 4B            [24] 7079 	sjmp	00111$
      0021F9                       7080 00102$:
                                   7081 ;	ecen4330lab7.c:2292: LCD_string_write("Invalid\n");
      0021F9 90r09rF2         [24] 7082 	mov	dptr,#___str_59
      0021FC 75 F0 80         [24] 7083 	mov	b,#0x80
      0021FF 12r0ArBA         [24] 7084 	lcall	_LCD_string_write
      002202 80 40            [24] 7085 	sjmp	00111$
      002204                       7086 00110$:
                                   7087 ;	ecen4330lab7.c:2296: switch(TH1) {
      002204 AF 8D            [24] 7088 	mov	r7,_TH1
      002206 BF E8 02         [24] 7089 	cjne	r7,#0xe8,00180$
      002209 80 0F            [24] 7090 	sjmp	00104$
      00220B                       7091 00180$:
      00220B BF F4 02         [24] 7092 	cjne	r7,#0xf4,00181$
      00220E 80 15            [24] 7093 	sjmp	00105$
      002210                       7094 00181$:
      002210 BF FA 02         [24] 7095 	cjne	r7,#0xfa,00182$
      002213 80 1B            [24] 7096 	sjmp	00106$
      002215                       7097 00182$:
                                   7098 ;	ecen4330lab7.c:2297: case 0xE8:
      002215 BF FD 2C         [24] 7099 	cjne	r7,#0xfd,00111$
      002218 80 21            [24] 7100 	sjmp	00107$
      00221A                       7101 00104$:
                                   7102 ;	ecen4330lab7.c:2298: LCD_string_write("1200\n");
      00221A 90r09rFB         [24] 7103 	mov	dptr,#___str_60
      00221D 75 F0 80         [24] 7104 	mov	b,#0x80
      002220 12r0ArBA         [24] 7105 	lcall	_LCD_string_write
                                   7106 ;	ecen4330lab7.c:2299: break;
                                   7107 ;	ecen4330lab7.c:2300: case 0xF4:
      002223 80 1F            [24] 7108 	sjmp	00111$
      002225                       7109 00105$:
                                   7110 ;	ecen4330lab7.c:2301: LCD_string_write("2400\n");
      002225 90r0Ar01         [24] 7111 	mov	dptr,#___str_61
      002228 75 F0 80         [24] 7112 	mov	b,#0x80
      00222B 12r0ArBA         [24] 7113 	lcall	_LCD_string_write
                                   7114 ;	ecen4330lab7.c:2302: break;
                                   7115 ;	ecen4330lab7.c:2303: case 0xFA:
      00222E 80 14            [24] 7116 	sjmp	00111$
      002230                       7117 00106$:
                                   7118 ;	ecen4330lab7.c:2304: LCD_string_write("4800\n");
      002230 90r0Ar07         [24] 7119 	mov	dptr,#___str_62
      002233 75 F0 80         [24] 7120 	mov	b,#0x80
      002236 12r0ArBA         [24] 7121 	lcall	_LCD_string_write
                                   7122 ;	ecen4330lab7.c:2305: break;
                                   7123 ;	ecen4330lab7.c:2306: case 0xFD:
      002239 80 09            [24] 7124 	sjmp	00111$
      00223B                       7125 00107$:
                                   7126 ;	ecen4330lab7.c:2307: LCD_string_write("9600\n");
      00223B 90r0Ar0D         [24] 7127 	mov	dptr,#___str_63
      00223E 75 F0 80         [24] 7128 	mov	b,#0x80
      002241 12r0ArBA         [24] 7129 	lcall	_LCD_string_write
                                   7130 ;	ecen4330lab7.c:2309: }
      002244                       7131 00111$:
                                   7132 ;	ecen4330lab7.c:2312: LCD_string_write("\n   _");
      002244 90r0Ar13         [24] 7133 	mov	dptr,#___str_64
      002247 75 F0 80         [24] 7134 	mov	b,#0x80
      00224A 12r0ArBA         [24] 7135 	lcall	_LCD_string_write
                                   7136 ;	ecen4330lab7.c:2313: cursor_x -= 1 * textsize * 6;
      00224D E5*0C            [12] 7137 	mov	a,_textsize
      00224F 75 F0 06         [24] 7138 	mov	b,#0x06
      002252 A4               [48] 7139 	mul	ab
      002253 FE               [12] 7140 	mov	r6,a
      002254 AF F0            [24] 7141 	mov	r7,b
      002256 E5*08            [12] 7142 	mov	a,_cursor_x
      002258 C3               [12] 7143 	clr	c
      002259 9E               [12] 7144 	subb	a,r6
      00225A F5*08            [12] 7145 	mov	_cursor_x,a
      00225C E5*09            [12] 7146 	mov	a,(_cursor_x + 1)
      00225E 9F               [12] 7147 	subb	a,r7
      00225F F5*09            [12] 7148 	mov	(_cursor_x + 1),a
                                   7149 ;	ecen4330lab7.c:2314: key = keyDetect();
      002261 12r0ArF9         [24] 7150 	lcall	_keyDetect
      002264 85 82*16         [24] 7151 	mov	_key,dpl
                                   7152 ;	ecen4330lab7.c:2315: switch (key){
      002267 74 31            [12] 7153 	mov	a,#0x31
      002269 B5*16 02         [24] 7154 	cjne	a,_key,00184$
      00226C 80 1F            [24] 7155 	sjmp	00112$
      00226E                       7156 00184$:
      00226E 74 32            [12] 7157 	mov	a,#0x32
      002270 B5*16 02         [24] 7158 	cjne	a,_key,00185$
      002273 80 30            [24] 7159 	sjmp	00113$
      002275                       7160 00185$:
      002275 74 33            [12] 7161 	mov	a,#0x33
      002277 B5*16 02         [24] 7162 	cjne	a,_key,00186$
      00227A 80 40            [24] 7163 	sjmp	00114$
      00227C                       7164 00186$:
      00227C 74 34            [12] 7165 	mov	a,#0x34
      00227E B5*16 02         [24] 7166 	cjne	a,_key,00187$
      002281 80 50            [24] 7167 	sjmp	00115$
      002283                       7168 00187$:
      002283 74 35            [12] 7169 	mov	a,#0x35
      002285 B5*16 02         [24] 7170 	cjne	a,_key,00188$
      002288 80 60            [24] 7171 	sjmp	00116$
      00228A                       7172 00188$:
      00228A 02r23r01         [24] 7173 	ljmp	00117$
                                   7174 ;	ecen4330lab7.c:2317: case '1':
      00228D                       7175 00112$:
                                   7176 ;	ecen4330lab7.c:2318: validInput = 1;
      00228D 75*1D 01         [24] 7177 	mov	_validInput,#0x01
                                   7178 ;	ecen4330lab7.c:2319: TH1 = 0xE8;                 // 1200 baud
      002290 75 8D E8         [24] 7179 	mov	_TH1,#0xe8
                                   7180 ;	ecen4330lab7.c:2320: PCON &= 0x7F;               // SMOD = 0
      002293 53 87 7F         [24] 7181 	anl	_PCON,#0x7f
                                   7182 ;	ecen4330lab7.c:2321: dataEnd = 1;
      002296 75*1E 01         [24] 7183 	mov	_dataEnd,#0x01
                                   7184 ;	ecen4330lab7.c:2322: LCD_string_write("1\n");
      002299 90r0Ar19         [24] 7185 	mov	dptr,#___str_65
      00229C 75 F0 80         [24] 7186 	mov	b,#0x80
      00229F 12r0ArBA         [24] 7187 	lcall	_LCD_string_write
                                   7188 ;	ecen4330lab7.c:2323: break;
      0022A2 02r23r13         [24] 7189 	ljmp	00120$
                                   7190 ;	ecen4330lab7.c:2324: case '2':
      0022A5                       7191 00113$:
                                   7192 ;	ecen4330lab7.c:2325: validInput = 1;
      0022A5 75*1D 01         [24] 7193 	mov	_validInput,#0x01
                                   7194 ;	ecen4330lab7.c:2326: TH1 = 0xF4;
      0022A8 75 8D F4         [24] 7195 	mov	_TH1,#0xf4
                                   7196 ;	ecen4330lab7.c:2327: PCON &= 0x7F;               // SMOD = 0
      0022AB 53 87 7F         [24] 7197 	anl	_PCON,#0x7f
                                   7198 ;	ecen4330lab7.c:2328: dataEnd = 1;
      0022AE 75*1E 01         [24] 7199 	mov	_dataEnd,#0x01
                                   7200 ;	ecen4330lab7.c:2329: LCD_string_write("2\n");
      0022B1 90r0Ar1C         [24] 7201 	mov	dptr,#___str_66
      0022B4 75 F0 80         [24] 7202 	mov	b,#0x80
      0022B7 12r0ArBA         [24] 7203 	lcall	_LCD_string_write
                                   7204 ;	ecen4330lab7.c:2330: break;
                                   7205 ;	ecen4330lab7.c:2331: case '3':
      0022BA 80 57            [24] 7206 	sjmp	00120$
      0022BC                       7207 00114$:
                                   7208 ;	ecen4330lab7.c:2332: validInput = 1;
      0022BC 75*1D 01         [24] 7209 	mov	_validInput,#0x01
                                   7210 ;	ecen4330lab7.c:2333: TH1 = 0xFA;
      0022BF 75 8D FA         [24] 7211 	mov	_TH1,#0xfa
                                   7212 ;	ecen4330lab7.c:2334: PCON &= 0x7F;               // SMOD = 0
      0022C2 53 87 7F         [24] 7213 	anl	_PCON,#0x7f
                                   7214 ;	ecen4330lab7.c:2335: dataEnd = 1;
      0022C5 75*1E 01         [24] 7215 	mov	_dataEnd,#0x01
                                   7216 ;	ecen4330lab7.c:2336: LCD_string_write("3\n");
      0022C8 90r0Ar1F         [24] 7217 	mov	dptr,#___str_67
      0022CB 75 F0 80         [24] 7218 	mov	b,#0x80
      0022CE 12r0ArBA         [24] 7219 	lcall	_LCD_string_write
                                   7220 ;	ecen4330lab7.c:2337: break;
                                   7221 ;	ecen4330lab7.c:2338: case '4':
      0022D1 80 40            [24] 7222 	sjmp	00120$
      0022D3                       7223 00115$:
                                   7224 ;	ecen4330lab7.c:2339: validInput = 1;
      0022D3 75*1D 01         [24] 7225 	mov	_validInput,#0x01
                                   7226 ;	ecen4330lab7.c:2340: TH1 = 0xFD;
      0022D6 75 8D FD         [24] 7227 	mov	_TH1,#0xfd
                                   7228 ;	ecen4330lab7.c:2341: PCON &= 0x7F;               // SMOD = 0
      0022D9 53 87 7F         [24] 7229 	anl	_PCON,#0x7f
                                   7230 ;	ecen4330lab7.c:2342: dataEnd = 1;
      0022DC 75*1E 01         [24] 7231 	mov	_dataEnd,#0x01
                                   7232 ;	ecen4330lab7.c:2343: LCD_string_write("4\n");
      0022DF 90r0Ar22         [24] 7233 	mov	dptr,#___str_68
      0022E2 75 F0 80         [24] 7234 	mov	b,#0x80
      0022E5 12r0ArBA         [24] 7235 	lcall	_LCD_string_write
                                   7236 ;	ecen4330lab7.c:2344: break;
                                   7237 ;	ecen4330lab7.c:2345: case '5':
      0022E8 80 29            [24] 7238 	sjmp	00120$
      0022EA                       7239 00116$:
                                   7240 ;	ecen4330lab7.c:2346: validInput = 1;
      0022EA 75*1D 01         [24] 7241 	mov	_validInput,#0x01
                                   7242 ;	ecen4330lab7.c:2347: TH1 = 0xFD;
      0022ED 75 8D FD         [24] 7243 	mov	_TH1,#0xfd
                                   7244 ;	ecen4330lab7.c:2348: PCON |= 0x80;               // SMOD = 1
      0022F0 43 87 80         [24] 7245 	orl	_PCON,#0x80
                                   7246 ;	ecen4330lab7.c:2349: dataEnd = 1;
      0022F3 75*1E 01         [24] 7247 	mov	_dataEnd,#0x01
                                   7248 ;	ecen4330lab7.c:2350: LCD_string_write("5\n");
      0022F6 90r0Ar25         [24] 7249 	mov	dptr,#___str_69
      0022F9 75 F0 80         [24] 7250 	mov	b,#0x80
      0022FC 12r0ArBA         [24] 7251 	lcall	_LCD_string_write
                                   7252 ;	ecen4330lab7.c:2351: break;
                                   7253 ;	ecen4330lab7.c:2352: default:
      0022FF 80 12            [24] 7254 	sjmp	00120$
      002301                       7255 00117$:
                                   7256 ;	ecen4330lab7.c:2353: validInput = 0;
      002301 75*1D 00         [24] 7257 	mov	_validInput,#0x00
                                   7258 ;	ecen4330lab7.c:2354: LCD_string_write("X\n");
      002304 90r0Ar28         [24] 7259 	mov	dptr,#___str_70
      002307 75 F0 80         [24] 7260 	mov	b,#0x80
      00230A 12r0ArBA         [24] 7261 	lcall	_LCD_string_write
                                   7262 ;	ecen4330lab7.c:2355: invalidInput();
      00230D 12r0Er76         [24] 7263 	lcall	_invalidInput
                                   7264 ;	ecen4330lab7.c:2356: dataEnd = 0;
      002310 75*1E 00         [24] 7265 	mov	_dataEnd,#0x00
                                   7266 ;	ecen4330lab7.c:2358: }
      002313                       7267 00120$:
                                   7268 ;	ecen4330lab7.c:2359: } while(!dataEnd);
      002313 E5*1E            [12] 7269 	mov	a,_dataEnd
      002315 70 03            [24] 7270 	jnz	00189$
      002317 02r21rA8         [24] 7271 	ljmp	00119$
      00231A                       7272 00189$:
                                   7273 ;	ecen4330lab7.c:2360: delay(200);
      00231A 90 00 C8         [24] 7274 	mov	dptr,#0x00c8
                                   7275 ;	ecen4330lab7.c:2361: }
      00231D 02r01r1A         [24] 7276 	ljmp	_delay
                                   7277 ;------------------------------------------------------------
                                   7278 ;Allocation info for local variables in function 'UART_dataBits'
                                   7279 ;------------------------------------------------------------
                                   7280 ;	ecen4330lab7.c:2363: void UART_dataBits() {
                                   7281 ;	-----------------------------------------
                                   7282 ;	 function UART_dataBits
                                   7283 ;	-----------------------------------------
      002320                       7284 _UART_dataBits:
                                   7285 ;	ecen4330lab7.c:2364: resetLCD();
      002320 12r0Er4E         [24] 7286 	lcall	_resetLCD
                                   7287 ;	ecen4330lab7.c:2365: do {
      002323                       7288 00108$:
                                   7289 ;	ecen4330lab7.c:2366: LCD_string_write("\nData Bits\n\n");
      002323 90r0Ar2B         [24] 7290 	mov	dptr,#___str_71
      002326 75 F0 80         [24] 7291 	mov	b,#0x80
      002329 12r0ArBA         [24] 7292 	lcall	_LCD_string_write
                                   7293 ;	ecen4330lab7.c:2367: LCD_string_write("(1) 8\n");
      00232C 90r0Ar38         [24] 7294 	mov	dptr,#___str_72
      00232F 75 F0 80         [24] 7295 	mov	b,#0x80
      002332 12r0ArBA         [24] 7296 	lcall	_LCD_string_write
                                   7297 ;	ecen4330lab7.c:2368: LCD_string_write("(2) 9\n");
      002335 90r0Ar3F         [24] 7298 	mov	dptr,#___str_73
      002338 75 F0 80         [24] 7299 	mov	b,#0x80
      00233B 12r0ArBA         [24] 7300 	lcall	_LCD_string_write
                                   7301 ;	ecen4330lab7.c:2369: LCD_string_write("\nCurrent: ");
      00233E 90r0Ar46         [24] 7302 	mov	dptr,#___str_74
      002341 75 F0 80         [24] 7303 	mov	b,#0x80
      002344 12r0ArBA         [24] 7304 	lcall	_LCD_string_write
                                   7305 ;	ecen4330lab7.c:2370: dataBits = SCON & 0xC0;
      002347 E5 98            [12] 7306 	mov	a,_SCON
      002349 54 C0            [12] 7307 	anl	a,#0xc0
      00234B F5*3F            [12] 7308 	mov	_dataBits,a
                                   7309 ;	ecen4330lab7.c:2371: switch(dataBits) {
      00234D 74 40            [12] 7310 	mov	a,#0x40
      00234F B5*3F 02         [24] 7311 	cjne	a,_dataBits,00137$
      002352 80 07            [24] 7312 	sjmp	00101$
      002354                       7313 00137$:
      002354 74 C0            [12] 7314 	mov	a,#0xc0
                                   7315 ;	ecen4330lab7.c:2372: case 0x40:
      002356 B5*3F 16         [24] 7316 	cjne	a,_dataBits,00103$
      002359 80 0B            [24] 7317 	sjmp	00102$
      00235B                       7318 00101$:
                                   7319 ;	ecen4330lab7.c:2373: LCD_string_write("8\n");
      00235B 90r0Ar51         [24] 7320 	mov	dptr,#___str_75
      00235E 75 F0 80         [24] 7321 	mov	b,#0x80
      002361 12r0ArBA         [24] 7322 	lcall	_LCD_string_write
                                   7323 ;	ecen4330lab7.c:2374: break;
                                   7324 ;	ecen4330lab7.c:2375: case 0xC0:
      002364 80 09            [24] 7325 	sjmp	00103$
      002366                       7326 00102$:
                                   7327 ;	ecen4330lab7.c:2376: LCD_string_write("9\n");
      002366 90r05r33         [24] 7328 	mov	dptr,#___str_2
      002369 75 F0 80         [24] 7329 	mov	b,#0x80
      00236C 12r0ArBA         [24] 7330 	lcall	_LCD_string_write
                                   7331 ;	ecen4330lab7.c:2378: }
      00236F                       7332 00103$:
                                   7333 ;	ecen4330lab7.c:2379: LCD_string_write("\n   _");
      00236F 90r0Ar13         [24] 7334 	mov	dptr,#___str_64
      002372 75 F0 80         [24] 7335 	mov	b,#0x80
      002375 12r0ArBA         [24] 7336 	lcall	_LCD_string_write
                                   7337 ;	ecen4330lab7.c:2380: cursor_x -= 1 * textsize * 6;
      002378 E5*0C            [12] 7338 	mov	a,_textsize
      00237A 75 F0 06         [24] 7339 	mov	b,#0x06
      00237D A4               [48] 7340 	mul	ab
      00237E FE               [12] 7341 	mov	r6,a
      00237F AF F0            [24] 7342 	mov	r7,b
      002381 E5*08            [12] 7343 	mov	a,_cursor_x
      002383 C3               [12] 7344 	clr	c
      002384 9E               [12] 7345 	subb	a,r6
      002385 F5*08            [12] 7346 	mov	_cursor_x,a
      002387 E5*09            [12] 7347 	mov	a,(_cursor_x + 1)
      002389 9F               [12] 7348 	subb	a,r7
      00238A F5*09            [12] 7349 	mov	(_cursor_x + 1),a
                                   7350 ;	ecen4330lab7.c:2381: key = keyDetect();
      00238C 12r0ArF9         [24] 7351 	lcall	_keyDetect
      00238F 85 82*16         [24] 7352 	mov	_key,dpl
                                   7353 ;	ecen4330lab7.c:2382: switch (key){
      002392 74 31            [12] 7354 	mov	a,#0x31
      002394 B5*16 02         [24] 7355 	cjne	a,_key,00139$
      002397 80 07            [24] 7356 	sjmp	00104$
      002399                       7357 00139$:
      002399 74 32            [12] 7358 	mov	a,#0x32
                                   7359 ;	ecen4330lab7.c:2384: case '1':
      00239B B5*16 33         [24] 7360 	cjne	a,_key,00106$
      00239E 80 14            [24] 7361 	sjmp	00105$
      0023A0                       7362 00104$:
                                   7363 ;	ecen4330lab7.c:2385: validInput = 1;
      0023A0 75*1D 01         [24] 7364 	mov	_validInput,#0x01
                                   7365 ;	ecen4330lab7.c:2386: SCON = SCON & 0x7F;
      0023A3 53 98 7F         [24] 7366 	anl	_SCON,#0x7f
                                   7367 ;	ecen4330lab7.c:2387: dataEnd = 1;
      0023A6 75*1E 01         [24] 7368 	mov	_dataEnd,#0x01
                                   7369 ;	ecen4330lab7.c:2388: LCD_string_write("1\n");
      0023A9 90r0Ar19         [24] 7370 	mov	dptr,#___str_65
      0023AC 75 F0 80         [24] 7371 	mov	b,#0x80
      0023AF 12r0ArBA         [24] 7372 	lcall	_LCD_string_write
                                   7373 ;	ecen4330lab7.c:2389: break;
                                   7374 ;	ecen4330lab7.c:2390: case '2':
      0023B2 80 2F            [24] 7375 	sjmp	00109$
      0023B4                       7376 00105$:
                                   7377 ;	ecen4330lab7.c:2391: validInput = 1;
      0023B4 75*1D 01         [24] 7378 	mov	_validInput,#0x01
                                   7379 ;	ecen4330lab7.c:2392: SCON = SCON | 0xC0;
      0023B7 43 98 C0         [24] 7380 	orl	_SCON,#0xc0
                                   7381 ;	ecen4330lab7.c:2393: dataEnd = 1;
      0023BA 75*1E 01         [24] 7382 	mov	_dataEnd,#0x01
                                   7383 ;	ecen4330lab7.c:2394: LCD_string_write("2\n");
      0023BD 90r0Ar1C         [24] 7384 	mov	dptr,#___str_66
      0023C0 75 F0 80         [24] 7385 	mov	b,#0x80
      0023C3 12r0ArBA         [24] 7386 	lcall	_LCD_string_write
                                   7387 ;	ecen4330lab7.c:2395: delay(200);
      0023C6 90 00 C8         [24] 7388 	mov	dptr,#0x00c8
      0023C9 12r01r1A         [24] 7389 	lcall	_delay
                                   7390 ;	ecen4330lab7.c:2396: UART_parity();
      0023CC 12r23rF0         [24] 7391 	lcall	_UART_parity
                                   7392 ;	ecen4330lab7.c:2397: break;
                                   7393 ;	ecen4330lab7.c:2398: default:
      0023CF 80 12            [24] 7394 	sjmp	00109$
      0023D1                       7395 00106$:
                                   7396 ;	ecen4330lab7.c:2399: validInput = 0;
      0023D1 75*1D 00         [24] 7397 	mov	_validInput,#0x00
                                   7398 ;	ecen4330lab7.c:2400: LCD_string_write("X\n");
      0023D4 90r0Ar28         [24] 7399 	mov	dptr,#___str_70
      0023D7 75 F0 80         [24] 7400 	mov	b,#0x80
      0023DA 12r0ArBA         [24] 7401 	lcall	_LCD_string_write
                                   7402 ;	ecen4330lab7.c:2401: invalidInput();
      0023DD 12r0Er76         [24] 7403 	lcall	_invalidInput
                                   7404 ;	ecen4330lab7.c:2402: dataEnd = 0;
      0023E0 75*1E 00         [24] 7405 	mov	_dataEnd,#0x00
                                   7406 ;	ecen4330lab7.c:2404: }
      0023E3                       7407 00109$:
                                   7408 ;	ecen4330lab7.c:2405: } while(!dataEnd);
      0023E3 E5*1E            [12] 7409 	mov	a,_dataEnd
      0023E5 70 03            [24] 7410 	jnz	00141$
      0023E7 02r23r23         [24] 7411 	ljmp	00108$
      0023EA                       7412 00141$:
                                   7413 ;	ecen4330lab7.c:2406: delay(200);
      0023EA 90 00 C8         [24] 7414 	mov	dptr,#0x00c8
                                   7415 ;	ecen4330lab7.c:2407: }
      0023ED 02r01r1A         [24] 7416 	ljmp	_delay
                                   7417 ;------------------------------------------------------------
                                   7418 ;Allocation info for local variables in function 'UART_parity'
                                   7419 ;------------------------------------------------------------
                                   7420 ;	ecen4330lab7.c:2410: void UART_parity() {
                                   7421 ;	-----------------------------------------
                                   7422 ;	 function UART_parity
                                   7423 ;	-----------------------------------------
      0023F0                       7424 _UART_parity:
                                   7425 ;	ecen4330lab7.c:2411: resetLCD();
      0023F0 12r0Er4E         [24] 7426 	lcall	_resetLCD
                                   7427 ;	ecen4330lab7.c:2412: do {
      0023F3                       7428 00110$:
                                   7429 ;	ecen4330lab7.c:2413: LCD_string_write("\nParity\n\n");
      0023F3 90r0Ar54         [24] 7430 	mov	dptr,#___str_76
      0023F6 75 F0 80         [24] 7431 	mov	b,#0x80
      0023F9 12r0ArBA         [24] 7432 	lcall	_LCD_string_write
                                   7433 ;	ecen4330lab7.c:2414: LCD_string_write("(1) Even\n");
      0023FC 90r0Ar5E         [24] 7434 	mov	dptr,#___str_77
      0023FF 75 F0 80         [24] 7435 	mov	b,#0x80
      002402 12r0ArBA         [24] 7436 	lcall	_LCD_string_write
                                   7437 ;	ecen4330lab7.c:2415: LCD_string_write("(2) Odd\n");
      002405 90r0Ar68         [24] 7438 	mov	dptr,#___str_78
      002408 75 F0 80         [24] 7439 	mov	b,#0x80
      00240B 12r0ArBA         [24] 7440 	lcall	_LCD_string_write
                                   7441 ;	ecen4330lab7.c:2416: LCD_string_write("(3) None\n");
      00240E 90r0Ar71         [24] 7442 	mov	dptr,#___str_79
      002411 75 F0 80         [24] 7443 	mov	b,#0x80
      002414 12r0ArBA         [24] 7444 	lcall	_LCD_string_write
                                   7445 ;	ecen4330lab7.c:2417: LCD_string_write("\nCurrent: ");
      002417 90r0Ar46         [24] 7446 	mov	dptr,#___str_74
      00241A 75 F0 80         [24] 7447 	mov	b,#0x80
      00241D 12r0ArBA         [24] 7448 	lcall	_LCD_string_write
                                   7449 ;	ecen4330lab7.c:2418: switch(parity) {
      002420 E4               [12] 7450 	clr	a
      002421 B5*40 02         [24] 7451 	cjne	a,_parity,00147$
      002424 80 0E            [24] 7452 	sjmp	00101$
      002426                       7453 00147$:
      002426 74 01            [12] 7454 	mov	a,#0x01
      002428 B5*40 02         [24] 7455 	cjne	a,_parity,00148$
      00242B 80 12            [24] 7456 	sjmp	00102$
      00242D                       7457 00148$:
      00242D 74 02            [12] 7458 	mov	a,#0x02
                                   7459 ;	ecen4330lab7.c:2419: case 0:
      00242F B5*40 21         [24] 7460 	cjne	a,_parity,00104$
      002432 80 16            [24] 7461 	sjmp	00103$
      002434                       7462 00101$:
                                   7463 ;	ecen4330lab7.c:2420: LCD_string_write("Even\n");
      002434 90r0Ar7B         [24] 7464 	mov	dptr,#___str_80
      002437 75 F0 80         [24] 7465 	mov	b,#0x80
      00243A 12r0ArBA         [24] 7466 	lcall	_LCD_string_write
                                   7467 ;	ecen4330lab7.c:2421: break;
                                   7468 ;	ecen4330lab7.c:2422: case 1:
      00243D 80 14            [24] 7469 	sjmp	00104$
      00243F                       7470 00102$:
                                   7471 ;	ecen4330lab7.c:2423: LCD_string_write("Odd\n");
      00243F 90r0Ar81         [24] 7472 	mov	dptr,#___str_81
      002442 75 F0 80         [24] 7473 	mov	b,#0x80
      002445 12r0ArBA         [24] 7474 	lcall	_LCD_string_write
                                   7475 ;	ecen4330lab7.c:2424: break;
                                   7476 ;	ecen4330lab7.c:2425: case 2:
      002448 80 09            [24] 7477 	sjmp	00104$
      00244A                       7478 00103$:
                                   7479 ;	ecen4330lab7.c:2426: LCD_string_write("None\n");
      00244A 90r0Ar86         [24] 7480 	mov	dptr,#___str_82
      00244D 75 F0 80         [24] 7481 	mov	b,#0x80
      002450 12r0ArBA         [24] 7482 	lcall	_LCD_string_write
                                   7483 ;	ecen4330lab7.c:2428: }
      002453                       7484 00104$:
                                   7485 ;	ecen4330lab7.c:2429: LCD_string_write("\n   _");
      002453 90r0Ar13         [24] 7486 	mov	dptr,#___str_64
      002456 75 F0 80         [24] 7487 	mov	b,#0x80
      002459 12r0ArBA         [24] 7488 	lcall	_LCD_string_write
                                   7489 ;	ecen4330lab7.c:2430: cursor_x -= 1 * textsize * 6;
      00245C E5*0C            [12] 7490 	mov	a,_textsize
      00245E 75 F0 06         [24] 7491 	mov	b,#0x06
      002461 A4               [48] 7492 	mul	ab
      002462 FE               [12] 7493 	mov	r6,a
      002463 AF F0            [24] 7494 	mov	r7,b
      002465 E5*08            [12] 7495 	mov	a,_cursor_x
      002467 C3               [12] 7496 	clr	c
      002468 9E               [12] 7497 	subb	a,r6
      002469 F5*08            [12] 7498 	mov	_cursor_x,a
      00246B E5*09            [12] 7499 	mov	a,(_cursor_x + 1)
      00246D 9F               [12] 7500 	subb	a,r7
      00246E F5*09            [12] 7501 	mov	(_cursor_x + 1),a
                                   7502 ;	ecen4330lab7.c:2431: key = keyDetect();
      002470 12r0ArF9         [24] 7503 	lcall	_keyDetect
      002473 85 82*16         [24] 7504 	mov	_key,dpl
                                   7505 ;	ecen4330lab7.c:2432: switch (key){
      002476 74 31            [12] 7506 	mov	a,#0x31
      002478 B5*16 02         [24] 7507 	cjne	a,_key,00150$
      00247B 80 0E            [24] 7508 	sjmp	00105$
      00247D                       7509 00150$:
      00247D 74 32            [12] 7510 	mov	a,#0x32
      00247F B5*16 02         [24] 7511 	cjne	a,_key,00151$
      002482 80 1B            [24] 7512 	sjmp	00106$
      002484                       7513 00151$:
      002484 74 33            [12] 7514 	mov	a,#0x33
                                   7515 ;	ecen4330lab7.c:2434: case '1':
      002486 B5*16 3E         [24] 7516 	cjne	a,_key,00108$
      002489 80 28            [24] 7517 	sjmp	00107$
      00248B                       7518 00105$:
                                   7519 ;	ecen4330lab7.c:2435: validInput = 1;
      00248B 75*1D 01         [24] 7520 	mov	_validInput,#0x01
                                   7521 ;	ecen4330lab7.c:2436: parity = 0;
      00248E 75*40 00         [24] 7522 	mov	_parity,#0x00
                                   7523 ;	ecen4330lab7.c:2437: dataEnd = 1;
      002491 75*1E 01         [24] 7524 	mov	_dataEnd,#0x01
                                   7525 ;	ecen4330lab7.c:2438: LCD_string_write("1\n");
      002494 90r0Ar19         [24] 7526 	mov	dptr,#___str_65
      002497 75 F0 80         [24] 7527 	mov	b,#0x80
      00249A 12r0ArBA         [24] 7528 	lcall	_LCD_string_write
                                   7529 ;	ecen4330lab7.c:2439: break;
                                   7530 ;	ecen4330lab7.c:2440: case '2':
      00249D 80 3A            [24] 7531 	sjmp	00111$
      00249F                       7532 00106$:
                                   7533 ;	ecen4330lab7.c:2441: validInput = 1;
      00249F 75*1D 01         [24] 7534 	mov	_validInput,#0x01
                                   7535 ;	ecen4330lab7.c:2442: parity = 1;
      0024A2 75*40 01         [24] 7536 	mov	_parity,#0x01
                                   7537 ;	ecen4330lab7.c:2443: dataEnd = 1;
      0024A5 75*1E 01         [24] 7538 	mov	_dataEnd,#0x01
                                   7539 ;	ecen4330lab7.c:2444: LCD_string_write("2\n");
      0024A8 90r0Ar1C         [24] 7540 	mov	dptr,#___str_66
      0024AB 75 F0 80         [24] 7541 	mov	b,#0x80
      0024AE 12r0ArBA         [24] 7542 	lcall	_LCD_string_write
                                   7543 ;	ecen4330lab7.c:2445: break;
                                   7544 ;	ecen4330lab7.c:2446: case '3':
      0024B1 80 26            [24] 7545 	sjmp	00111$
      0024B3                       7546 00107$:
                                   7547 ;	ecen4330lab7.c:2447: validInput = 1;
      0024B3 75*1D 01         [24] 7548 	mov	_validInput,#0x01
                                   7549 ;	ecen4330lab7.c:2448: parity = 2;
      0024B6 75*40 02         [24] 7550 	mov	_parity,#0x02
                                   7551 ;	ecen4330lab7.c:2449: dataEnd = 1;
      0024B9 75*1E 01         [24] 7552 	mov	_dataEnd,#0x01
                                   7553 ;	ecen4330lab7.c:2450: LCD_string_write("3\n");
      0024BC 90r0Ar1F         [24] 7554 	mov	dptr,#___str_67
      0024BF 75 F0 80         [24] 7555 	mov	b,#0x80
      0024C2 12r0ArBA         [24] 7556 	lcall	_LCD_string_write
                                   7557 ;	ecen4330lab7.c:2451: break;
                                   7558 ;	ecen4330lab7.c:2452: default:
      0024C5 80 12            [24] 7559 	sjmp	00111$
      0024C7                       7560 00108$:
                                   7561 ;	ecen4330lab7.c:2453: validInput = 0;
      0024C7 75*1D 00         [24] 7562 	mov	_validInput,#0x00
                                   7563 ;	ecen4330lab7.c:2454: LCD_string_write("X\n");
      0024CA 90r0Ar28         [24] 7564 	mov	dptr,#___str_70
      0024CD 75 F0 80         [24] 7565 	mov	b,#0x80
      0024D0 12r0ArBA         [24] 7566 	lcall	_LCD_string_write
                                   7567 ;	ecen4330lab7.c:2455: invalidInput();
      0024D3 12r0Er76         [24] 7568 	lcall	_invalidInput
                                   7569 ;	ecen4330lab7.c:2456: dataEnd = 0;
      0024D6 75*1E 00         [24] 7570 	mov	_dataEnd,#0x00
                                   7571 ;	ecen4330lab7.c:2458: }
      0024D9                       7572 00111$:
                                   7573 ;	ecen4330lab7.c:2459: } while(!dataEnd);
      0024D9 E5*1E            [12] 7574 	mov	a,_dataEnd
      0024DB 70 03            [24] 7575 	jnz	00153$
      0024DD 02r23rF3         [24] 7576 	ljmp	00110$
      0024E0                       7577 00153$:
                                   7578 ;	ecen4330lab7.c:2460: delay(200);
      0024E0 90 00 C8         [24] 7579 	mov	dptr,#0x00c8
                                   7580 ;	ecen4330lab7.c:2461: }
      0024E3 02r01r1A         [24] 7581 	ljmp	_delay
                                   7582 ;------------------------------------------------------------
                                   7583 ;Allocation info for local variables in function 'UART_parity_count'
                                   7584 ;------------------------------------------------------------
                                   7585 ;count_byte                Allocated to registers r7 
                                   7586 ;count                     Allocated to registers r6 
                                   7587 ;i                         Allocated to registers r4 r5 
                                   7588 ;------------------------------------------------------------
                                   7589 ;	ecen4330lab7.c:2464: unsigned char UART_parity_count(unsigned char count_byte) {
                                   7590 ;	-----------------------------------------
                                   7591 ;	 function UART_parity_count
                                   7592 ;	-----------------------------------------
      0024E6                       7593 _UART_parity_count:
      0024E6 AF 82            [24] 7594 	mov	r7,dpl
                                   7595 ;	ecen4330lab7.c:2467: for(int i = 0; i < 8; i++) {
      0024E8 7E 00            [12] 7596 	mov	r6,#0x00
      0024EA 7C 00            [12] 7597 	mov	r4,#0x00
      0024EC 7D 00            [12] 7598 	mov	r5,#0x00
      0024EE                       7599 00105$:
      0024EE C3               [12] 7600 	clr	c
      0024EF EC               [12] 7601 	mov	a,r4
      0024F0 94 08            [12] 7602 	subb	a,#0x08
      0024F2 ED               [12] 7603 	mov	a,r5
      0024F3 64 80            [12] 7604 	xrl	a,#0x80
      0024F5 94 80            [12] 7605 	subb	a,#0x80
      0024F7 50 17            [24] 7606 	jnc	00103$
                                   7607 ;	ecen4330lab7.c:2468: if((count_byte >> i) & 0x01 == 0x01) {
      0024F9 8C F0            [24] 7608 	mov	b,r4
      0024FB 05 F0            [12] 7609 	inc	b
      0024FD EF               [12] 7610 	mov	a,r7
      0024FE 80 02            [24] 7611 	sjmp	00124$
      002500                       7612 00123$:
      002500 C3               [12] 7613 	clr	c
      002501 13               [12] 7614 	rrc	a
      002502                       7615 00124$:
      002502 D5 F0 FB         [24] 7616 	djnz	b,00123$
      002505 30 E0 01         [24] 7617 	jnb	acc.0,00106$
                                   7618 ;	ecen4330lab7.c:2469: count++;
      002508 0E               [12] 7619 	inc	r6
      002509                       7620 00106$:
                                   7621 ;	ecen4330lab7.c:2467: for(int i = 0; i < 8; i++) {
      002509 0C               [12] 7622 	inc	r4
      00250A BC 00 E1         [24] 7623 	cjne	r4,#0x00,00105$
      00250D 0D               [12] 7624 	inc	r5
      00250E 80 DE            [24] 7625 	sjmp	00105$
      002510                       7626 00103$:
                                   7627 ;	ecen4330lab7.c:2472: return count;
      002510 8E 82            [24] 7628 	mov	dpl,r6
                                   7629 ;	ecen4330lab7.c:2473: }
      002512 22               [24] 7630 	ret
                                   7631 ;------------------------------------------------------------
                                   7632 ;Allocation info for local variables in function 'UART_send'
                                   7633 ;------------------------------------------------------------
                                   7634 ;	ecen4330lab7.c:2481: void UART_send() {
                                   7635 ;	-----------------------------------------
                                   7636 ;	 function UART_send
                                   7637 ;	-----------------------------------------
      002513                       7638 _UART_send:
                                   7639 ;	ecen4330lab7.c:2482: resetLCD();
      002513 12r0Er4E         [24] 7640 	lcall	_resetLCD
                                   7641 ;	ecen4330lab7.c:2485: LCD_string_write("\nEnter\ncharacter\nto send:\n\n   _");
      002516 90r0Ar8C         [24] 7642 	mov	dptr,#___str_83
      002519 75 F0 80         [24] 7643 	mov	b,#0x80
      00251C 12r0ArBA         [24] 7644 	lcall	_LCD_string_write
                                   7645 ;	ecen4330lab7.c:2488: cursor_x -= 1 * textsize * 6;
      00251F E5*0C            [12] 7646 	mov	a,_textsize
      002521 75 F0 06         [24] 7647 	mov	b,#0x06
      002524 A4               [48] 7648 	mul	ab
      002525 FE               [12] 7649 	mov	r6,a
      002526 AF F0            [24] 7650 	mov	r7,b
      002528 E5*08            [12] 7651 	mov	a,_cursor_x
      00252A C3               [12] 7652 	clr	c
      00252B 9E               [12] 7653 	subb	a,r6
      00252C F5*08            [12] 7654 	mov	_cursor_x,a
      00252E E5*09            [12] 7655 	mov	a,(_cursor_x + 1)
      002530 9F               [12] 7656 	subb	a,r7
      002531 F5*09            [12] 7657 	mov	(_cursor_x + 1),a
                                   7658 ;	ecen4330lab7.c:2491: key = keyDetect();
      002533 12r0ArF9         [24] 7659 	lcall	_keyDetect
                                   7660 ;	ecen4330lab7.c:2492: write(key);
      002536 85 82*16         [24] 7661 	mov  _key,dpl
      002539 12r0Ar54         [24] 7662 	lcall	_write
                                   7663 ;	ecen4330lab7.c:2494: data = UART_parity_count(key);
      00253C 85*16 82         [24] 7664 	mov	dpl,_key
      00253F 12r24rE6         [24] 7665 	lcall	_UART_parity_count
      002542 85 82*20         [24] 7666 	mov	_data,dpl
                                   7667 ;	ecen4330lab7.c:2496: dataBits = SCON & 0xC0;
      002545 E5 98            [12] 7668 	mov	a,_SCON
      002547 54 C0            [12] 7669 	anl	a,#0xc0
      002549 F5*3F            [12] 7670 	mov	_dataBits,a
                                   7671 ;	ecen4330lab7.c:2497: switch(dataBits) {
      00254B 74 40            [12] 7672 	mov	a,#0x40
      00254D B5*3F 02         [24] 7673 	cjne	a,_dataBits,00142$
      002550 80 07            [24] 7674 	sjmp	00101$
      002552                       7675 00142$:
      002552 74 C0            [12] 7676 	mov	a,#0xc0
                                   7677 ;	ecen4330lab7.c:2499: case 0x40:
      002554 B5*3F 38         [24] 7678 	cjne	a,_dataBits,00111$
      002557 80 2D            [24] 7679 	sjmp	00110$
      002559                       7680 00101$:
                                   7681 ;	ecen4330lab7.c:2500: switch(parity) {
      002559 E4               [12] 7682 	clr	a
      00255A B5*40 02         [24] 7683 	cjne	a,_parity,00144$
      00255D 80 0E            [24] 7684 	sjmp	00102$
      00255F                       7685 00144$:
      00255F 74 01            [12] 7686 	mov	a,#0x01
      002561 B5*40 02         [24] 7687 	cjne	a,_parity,00145$
      002564 80 11            [24] 7688 	sjmp	00105$
      002566                       7689 00145$:
      002566 74 02            [12] 7690 	mov	a,#0x02
                                   7691 ;	ecen4330lab7.c:2502: case 0:
      002568 B5*40 24         [24] 7692 	cjne	a,_parity,00111$
      00256B 80 14            [24] 7693 	sjmp	00108$
      00256D                       7694 00102$:
                                   7695 ;	ecen4330lab7.c:2504: if(data % 2 != 0) {
      00256D E5*20            [12] 7696 	mov	a,_data
      00256F 30 E0 1D         [24] 7697 	jnb	acc.0,00111$
                                   7698 ;	ecen4330lab7.c:2506: key |= 0x80;
      002572 43*16 80         [24] 7699 	orl	_key,#0x80
                                   7700 ;	ecen4330lab7.c:2508: break;
                                   7701 ;	ecen4330lab7.c:2510: case 1:
      002575 80 18            [24] 7702 	sjmp	00111$
      002577                       7703 00105$:
                                   7704 ;	ecen4330lab7.c:2512: if(data % 2 == 0) {
      002577 E5*20            [12] 7705 	mov	a,_data
      002579 20 E0 13         [24] 7706 	jb	acc.0,00111$
                                   7707 ;	ecen4330lab7.c:2514: key |= 0x80;
      00257C 43*16 80         [24] 7708 	orl	_key,#0x80
                                   7709 ;	ecen4330lab7.c:2516: break;
                                   7710 ;	ecen4330lab7.c:2518: case 2:
      00257F 80 0E            [24] 7711 	sjmp	00111$
      002581                       7712 00108$:
                                   7713 ;	ecen4330lab7.c:2519: key &= 0x7F;
      002581 53*16 7F         [24] 7714 	anl	_key,#0x7f
                                   7715 ;	ecen4330lab7.c:2522: break;
                                   7716 ;	ecen4330lab7.c:2524: case 0xC0:
      002584 80 09            [24] 7717 	sjmp	00111$
      002586                       7718 00110$:
                                   7719 ;	ecen4330lab7.c:2525: LCD_string_write("9\n");
      002586 90r05r33         [24] 7720 	mov	dptr,#___str_2
      002589 75 F0 80         [24] 7721 	mov	b,#0x80
      00258C 12r0ArBA         [24] 7722 	lcall	_LCD_string_write
                                   7723 ;	ecen4330lab7.c:2527: }
      00258F                       7724 00111$:
                                   7725 ;	ecen4330lab7.c:2533: SBUF = key;
      00258F 85*16 99         [24] 7726 	mov	_SBUF,_key
                                   7727 ;	ecen4330lab7.c:2534: UART_transmit();
      002592 12r01r14         [24] 7728 	lcall	_UART_transmit
                                   7729 ;	ecen4330lab7.c:2535: delay(200);
      002595 90 00 C8         [24] 7730 	mov	dptr,#0x00c8
      002598 12r01r1A         [24] 7731 	lcall	_delay
                                   7732 ;	ecen4330lab7.c:2536: resetLCD();
                                   7733 ;	ecen4330lab7.c:2537: }
      00259B 02r0Er4E         [24] 7734 	ljmp	_resetLCD
                                   7735 ;------------------------------------------------------------
                                   7736 ;Allocation info for local variables in function 'UART'
                                   7737 ;------------------------------------------------------------
                                   7738 ;	ecen4330lab7.c:2551: void UART(){
                                   7739 ;	-----------------------------------------
                                   7740 ;	 function UART
                                   7741 ;	-----------------------------------------
      00259E                       7742 _UART:
                                   7743 ;	ecen4330lab7.c:2554: do{
      00259E                       7744 00108$:
                                   7745 ;	ecen4330lab7.c:2555: resetLCD();
      00259E 12r0Er4E         [24] 7746 	lcall	_resetLCD
                                   7747 ;	ecen4330lab7.c:2556: LCD_string_write("\n(1) Data Rate");
      0025A1 90r0ArAC         [24] 7748 	mov	dptr,#___str_84
      0025A4 75 F0 80         [24] 7749 	mov	b,#0x80
      0025A7 12r0ArBA         [24] 7750 	lcall	_LCD_string_write
                                   7751 ;	ecen4330lab7.c:2557: LCD_string_write("\n(2) # of Data\n    Bits");
      0025AA 90r0ArBB         [24] 7752 	mov	dptr,#___str_85
      0025AD 75 F0 80         [24] 7753 	mov	b,#0x80
      0025B0 12r0ArBA         [24] 7754 	lcall	_LCD_string_write
                                   7755 ;	ecen4330lab7.c:2558: LCD_string_write("\n(3) Parity");
      0025B3 90r0ArD3         [24] 7756 	mov	dptr,#___str_86
      0025B6 75 F0 80         [24] 7757 	mov	b,#0x80
      0025B9 12r0ArBA         [24] 7758 	lcall	_LCD_string_write
                                   7759 ;	ecen4330lab7.c:2559: LCD_string_write("\n(4) Send Data");
      0025BC 90r0ArDF         [24] 7760 	mov	dptr,#___str_87
      0025BF 75 F0 80         [24] 7761 	mov	b,#0x80
      0025C2 12r0ArBA         [24] 7762 	lcall	_LCD_string_write
                                   7763 ;	ecen4330lab7.c:2560: LCD_string_write("\n(E) End\n");
      0025C5 90r0ArEE         [24] 7764 	mov	dptr,#___str_88
      0025C8 75 F0 80         [24] 7765 	mov	b,#0x80
      0025CB 12r0ArBA         [24] 7766 	lcall	_LCD_string_write
                                   7767 ;	ecen4330lab7.c:2563: key = keyDetect();
      0025CE 12r0ArF9         [24] 7768 	lcall	_keyDetect
      0025D1 85 82*16         [24] 7769 	mov	_key,dpl
                                   7770 ;	ecen4330lab7.c:2564: switch (key){
      0025D4 74 31            [12] 7771 	mov	a,#0x31
      0025D6 B5*16 02         [24] 7772 	cjne	a,_key,00137$
      0025D9 80 1C            [24] 7773 	sjmp	00101$
      0025DB                       7774 00137$:
      0025DB 74 32            [12] 7775 	mov	a,#0x32
      0025DD B5*16 02         [24] 7776 	cjne	a,_key,00138$
      0025E0 80 1D            [24] 7777 	sjmp	00102$
      0025E2                       7778 00138$:
      0025E2 74 33            [12] 7779 	mov	a,#0x33
      0025E4 B5*16 02         [24] 7780 	cjne	a,_key,00139$
      0025E7 80 1E            [24] 7781 	sjmp	00103$
      0025E9                       7782 00139$:
      0025E9 74 34            [12] 7783 	mov	a,#0x34
      0025EB B5*16 02         [24] 7784 	cjne	a,_key,00140$
      0025EE 80 1F            [24] 7785 	sjmp	00104$
      0025F0                       7786 00140$:
      0025F0 74 45            [12] 7787 	mov	a,#0x45
                                   7788 ;	ecen4330lab7.c:2567: case '1':
      0025F2 B5*16 44         [24] 7789 	cjne	a,_key,00106$
      0025F5 80 20            [24] 7790 	sjmp	00105$
      0025F7                       7791 00101$:
                                   7792 ;	ecen4330lab7.c:2568: UART_dataRate();
      0025F7 12r21rA5         [24] 7793 	lcall	_UART_dataRate
                                   7794 ;	ecen4330lab7.c:2569: dataEnd = 0;
      0025FA 75*1E 00         [24] 7795 	mov	_dataEnd,#0x00
                                   7796 ;	ecen4330lab7.c:2570: break;
                                   7797 ;	ecen4330lab7.c:2573: case '2':
      0025FD 80 40            [24] 7798 	sjmp	00109$
      0025FF                       7799 00102$:
                                   7800 ;	ecen4330lab7.c:2574: UART_dataBits();
      0025FF 12r23r20         [24] 7801 	lcall	_UART_dataBits
                                   7802 ;	ecen4330lab7.c:2575: dataEnd = 0;
      002602 75*1E 00         [24] 7803 	mov	_dataEnd,#0x00
                                   7804 ;	ecen4330lab7.c:2576: break;
                                   7805 ;	ecen4330lab7.c:2579: case '3':
      002605 80 38            [24] 7806 	sjmp	00109$
      002607                       7807 00103$:
                                   7808 ;	ecen4330lab7.c:2580: UART_parity();
      002607 12r23rF0         [24] 7809 	lcall	_UART_parity
                                   7810 ;	ecen4330lab7.c:2581: dataEnd = 0;
      00260A 75*1E 00         [24] 7811 	mov	_dataEnd,#0x00
                                   7812 ;	ecen4330lab7.c:2582: break;
                                   7813 ;	ecen4330lab7.c:2585: case '4':
      00260D 80 30            [24] 7814 	sjmp	00109$
      00260F                       7815 00104$:
                                   7816 ;	ecen4330lab7.c:2586: UART_send();
      00260F 12r25r13         [24] 7817 	lcall	_UART_send
                                   7818 ;	ecen4330lab7.c:2587: dataEnd = 0;
      002612 75*1E 00         [24] 7819 	mov	_dataEnd,#0x00
                                   7820 ;	ecen4330lab7.c:2588: break;
                                   7821 ;	ecen4330lab7.c:2591: case 'E':
      002615 80 28            [24] 7822 	sjmp	00109$
      002617                       7823 00105$:
                                   7824 ;	ecen4330lab7.c:2592: resetLCD1();
      002617 12r21r7D         [24] 7825 	lcall	_resetLCD1
                                   7826 ;	ecen4330lab7.c:2593: setTextColor(WHITE, BLACK);
      00261A E4               [12] 7827 	clr	a
      00261B F5*00            [12] 7828 	mov	_setTextColor_PARM_2,a
      00261D F5*01            [12] 7829 	mov	(_setTextColor_PARM_2 + 1),a
      00261F 90 FF FF         [24] 7830 	mov	dptr,#0xffff
      002622 12r03rCB         [24] 7831 	lcall	_setTextColor
                                   7832 ;	ecen4330lab7.c:2594: LCD_string_write("\nReturning to\nmain menu.");
      002625 90r08rFD         [24] 7833 	mov	dptr,#___str_46
      002628 75 F0 80         [24] 7834 	mov	b,#0x80
      00262B 12r0ArBA         [24] 7835 	lcall	_LCD_string_write
                                   7836 ;	ecen4330lab7.c:2595: delay(200);
      00262E 90 00 C8         [24] 7837 	mov	dptr,#0x00c8
      002631 12r01r1A         [24] 7838 	lcall	_delay
                                   7839 ;	ecen4330lab7.c:2596: dataEnd = 1;
      002634 75*1E 01         [24] 7840 	mov	_dataEnd,#0x01
                                   7841 ;	ecen4330lab7.c:2597: break;
                                   7842 ;	ecen4330lab7.c:2600: default:
      002637 80 06            [24] 7843 	sjmp	00109$
      002639                       7844 00106$:
                                   7845 ;	ecen4330lab7.c:2601: invalidInput();
      002639 12r0Er76         [24] 7846 	lcall	_invalidInput
                                   7847 ;	ecen4330lab7.c:2602: dataEnd = 0;
      00263C 75*1E 00         [24] 7848 	mov	_dataEnd,#0x00
                                   7849 ;	ecen4330lab7.c:2604: }
      00263F                       7850 00109$:
                                   7851 ;	ecen4330lab7.c:2605: } while(dataEnd == 0);
      00263F E5*1E            [12] 7852 	mov	a,_dataEnd
      002641 70 03            [24] 7853 	jnz	00142$
      002643 02r25r9E         [24] 7854 	ljmp	00108$
      002646                       7855 00142$:
                                   7856 ;	ecen4330lab7.c:2606: }
      002646 22               [24] 7857 	ret
                                   7858 ;------------------------------------------------------------
                                   7859 ;Allocation info for local variables in function 'LCD_mainMenu'
                                   7860 ;------------------------------------------------------------
                                   7861 ;__1310720043              Allocated to registers 
                                   7862 ;__1310720044              Allocated to registers 
                                   7863 ;map_address               Allocated to registers 
                                   7864 ;d                         Allocated to registers 
                                   7865 ;__1966080046              Allocated to registers 
                                   7866 ;__1966080047              Allocated to registers 
                                   7867 ;map_address               Allocated to registers 
                                   7868 ;d                         Allocated to registers 
                                   7869 ;__1966080049              Allocated to registers 
                                   7870 ;__1966080050              Allocated to registers 
                                   7871 ;map_address               Allocated to registers 
                                   7872 ;d                         Allocated to registers 
                                   7873 ;__1966080052              Allocated to registers 
                                   7874 ;__1966080053              Allocated to registers 
                                   7875 ;map_address               Allocated to registers 
                                   7876 ;d                         Allocated to registers 
                                   7877 ;__1966080055              Allocated to registers 
                                   7878 ;__1966080056              Allocated to registers 
                                   7879 ;map_address               Allocated to registers 
                                   7880 ;d                         Allocated to registers 
                                   7881 ;__1966080058              Allocated to registers 
                                   7882 ;__1966080059              Allocated to registers 
                                   7883 ;map_address               Allocated to registers 
                                   7884 ;d                         Allocated to registers 
                                   7885 ;__1966080061              Allocated to registers 
                                   7886 ;__1966080062              Allocated to registers 
                                   7887 ;map_address               Allocated to registers 
                                   7888 ;d                         Allocated to registers 
                                   7889 ;__1966080064              Allocated to registers 
                                   7890 ;__1966080065              Allocated to registers 
                                   7891 ;map_address               Allocated to registers 
                                   7892 ;d                         Allocated to registers 
                                   7893 ;__1966080067              Allocated to registers 
                                   7894 ;__1966080068              Allocated to registers 
                                   7895 ;map_address               Allocated to registers 
                                   7896 ;d                         Allocated to registers 
                                   7897 ;------------------------------------------------------------
                                   7898 ;	ecen4330lab7.c:2630: void LCD_mainMenu() {
                                   7899 ;	-----------------------------------------
                                   7900 ;	 function LCD_mainMenu
                                   7901 ;	-----------------------------------------
      002647                       7902 _LCD_mainMenu:
                                   7903 ;	ecen4330lab7.c:2632: key = 0;
      002647 75*16 00         [24] 7904 	mov	_key,#0x00
                                   7905 ;	ecen4330lab7.c:2633: iowrite8(seg7_address, 0xC0);
      00264A 85*04 82         [24] 7906 	mov	dpl,_seg7_address
      00264D 85*05 83         [24] 7907 	mov	dph,(_seg7_address + 1)
                                   7908 ;	ecen4330lab7.c:229: IOM = 1;
                                   7909 ;	assignBit
      002650 D2 B4            [12] 7910 	setb	_P3_4
                                   7911 ;	ecen4330lab7.c:230: *map_address = d;
      002652 74 C0            [12] 7912 	mov	a,#0xc0
      002654 F0               [24] 7913 	movx	@dptr,a
                                   7914 ;	ecen4330lab7.c:231: IOM = 0;
                                   7915 ;	assignBit
      002655 C2 B4            [12] 7916 	clr	_P3_4
                                   7917 ;	ecen4330lab7.c:2636: resetLCD();
      002657 12r0Er4E         [24] 7918 	lcall	_resetLCD
                                   7919 ;	ecen4330lab7.c:2637: setTextColor(GREEN, BLACK);
      00265A E4               [12] 7920 	clr	a
      00265B F5*00            [12] 7921 	mov	_setTextColor_PARM_2,a
      00265D F5*01            [12] 7922 	mov	(_setTextColor_PARM_2 + 1),a
      00265F 90 07 E0         [24] 7923 	mov	dptr,#0x07e0
      002662 12r03rCB         [24] 7924 	lcall	_setTextColor
                                   7925 ;	ecen4330lab7.c:2638: LCD_string_write("   Cameron\n   Biniamow\n");
      002665 90r0ArF8         [24] 7926 	mov	dptr,#___str_89
      002668 75 F0 80         [24] 7927 	mov	b,#0x80
      00266B 12r0ArBA         [24] 7928 	lcall	_LCD_string_write
                                   7929 ;	ecen4330lab7.c:2639: LCD_string_write("  ECEN-4330\n\n");
      00266E 90r0Br10         [24] 7930 	mov	dptr,#___str_90
      002671 75 F0 80         [24] 7931 	mov	b,#0x80
      002674 12r0ArBA         [24] 7932 	lcall	_LCD_string_write
                                   7933 ;	ecen4330lab7.c:2642: setTextColor(WHITE, BLACK);
      002677 E4               [12] 7934 	clr	a
      002678 F5*00            [12] 7935 	mov	_setTextColor_PARM_2,a
      00267A F5*01            [12] 7936 	mov	(_setTextColor_PARM_2 + 1),a
      00267C 90 FF FF         [24] 7937 	mov	dptr,#0xffff
      00267F 12r03rCB         [24] 7938 	lcall	_setTextColor
                                   7939 ;	ecen4330lab7.c:2643: LCD_string_write("(A) RAM CHECK\n");
      002682 90r0Br1E         [24] 7940 	mov	dptr,#___str_91
      002685 75 F0 80         [24] 7941 	mov	b,#0x80
      002688 12r0ArBA         [24] 7942 	lcall	_LCD_string_write
                                   7943 ;	ecen4330lab7.c:2644: LCD_string_write("(B) MOVE\n");
      00268B 90r0Br2D         [24] 7944 	mov	dptr,#___str_92
      00268E 75 F0 80         [24] 7945 	mov	b,#0x80
      002691 12r0ArBA         [24] 7946 	lcall	_LCD_string_write
                                   7947 ;	ecen4330lab7.c:2645: LCD_string_write("(C) COUNT\n");
      002694 90r0Br37         [24] 7948 	mov	dptr,#___str_93
      002697 75 F0 80         [24] 7949 	mov	b,#0x80
      00269A 12r0ArBA         [24] 7950 	lcall	_LCD_string_write
                                   7951 ;	ecen4330lab7.c:2646: LCD_string_write("(D) DUMP\n");
      00269D 90r0Br42         [24] 7952 	mov	dptr,#___str_94
      0026A0 75 F0 80         [24] 7953 	mov	b,#0x80
      0026A3 12r0ArBA         [24] 7954 	lcall	_LCD_string_write
                                   7955 ;	ecen4330lab7.c:2647: LCD_string_write("(E) EDIT\n");
      0026A6 90r0Br4C         [24] 7956 	mov	dptr,#___str_95
      0026A9 75 F0 80         [24] 7957 	mov	b,#0x80
      0026AC 12r0ArBA         [24] 7958 	lcall	_LCD_string_write
                                   7959 ;	ecen4330lab7.c:2648: LCD_string_write("(F) FIND\n");
      0026AF 90r0Br56         [24] 7960 	mov	dptr,#___str_96
      0026B2 75 F0 80         [24] 7961 	mov	b,#0x80
      0026B5 12r0ArBA         [24] 7962 	lcall	_LCD_string_write
                                   7963 ;	ecen4330lab7.c:2650: LCD_string_write("(1) UART\n");
      0026B8 90r0Br60         [24] 7964 	mov	dptr,#___str_97
      0026BB 75 F0 80         [24] 7965 	mov	b,#0x80
      0026BE 12r0ArBA         [24] 7966 	lcall	_LCD_string_write
                                   7967 ;	ecen4330lab7.c:2651: setTextColor(WHITE, BLACK);
      0026C1 E4               [12] 7968 	clr	a
      0026C2 F5*00            [12] 7969 	mov	_setTextColor_PARM_2,a
      0026C4 F5*01            [12] 7970 	mov	(_setTextColor_PARM_2 + 1),a
      0026C6 90 FF FF         [24] 7971 	mov	dptr,#0xffff
      0026C9 12r03rCB         [24] 7972 	lcall	_setTextColor
                                   7973 ;	ecen4330lab7.c:2652: setTextSize(1);
      0026CC 75 82 01         [24] 7974 	mov	dpl,#0x01
      0026CF 12r03rD8         [24] 7975 	lcall	_setTextSize
                                   7976 ;	ecen4330lab7.c:2653: setCursor(3, 304);
      0026D2 75*00 30         [24] 7977 	mov	_setCursor_PARM_2,#0x30
      0026D5 75*01 01         [24] 7978 	mov	(_setCursor_PARM_2 + 1),#0x01
      0026D8 90 00 03         [24] 7979 	mov	dptr,#0x0003
      0026DB 12r03rBE         [24] 7980 	lcall	_setCursor
                                   7981 ;	ecen4330lab7.c:2654: LCD_string_write("Spring 2021");
      0026DE 90r0Br6A         [24] 7982 	mov	dptr,#___str_98
      0026E1 75 F0 80         [24] 7983 	mov	b,#0x80
      0026E4 12r0ArBA         [24] 7984 	lcall	_LCD_string_write
                                   7985 ;	ecen4330lab7.c:2655: rtcPrint();
      0026E7 12r02r62         [24] 7986 	lcall	_rtcPrint
                                   7987 ;	ecen4330lab7.c:2658: key = keyDetect();
      0026EA 12r0ArF9         [24] 7988 	lcall	_keyDetect
      0026ED 85 82*16         [24] 7989 	mov	_key,dpl
                                   7990 ;	ecen4330lab7.c:2659: switch (key)
      0026F0 74 31            [12] 7991 	mov	a,#0x31
      0026F2 B5*16 03         [24] 7992 	cjne	a,_key,00149$
      0026F5 02r27r85         [24] 7993 	ljmp	00107$
      0026F8                       7994 00149$:
      0026F8 74 41            [12] 7995 	mov	a,#0x41
      0026FA B5*16 02         [24] 7996 	cjne	a,_key,00150$
      0026FD 80 26            [24] 7997 	sjmp	00101$
      0026FF                       7998 00150$:
      0026FF 74 42            [12] 7999 	mov	a,#0x42
      002701 B5*16 02         [24] 8000 	cjne	a,_key,00151$
      002704 80 2F            [24] 8001 	sjmp	00102$
      002706                       8002 00151$:
      002706 74 43            [12] 8003 	mov	a,#0x43
      002708 B5*16 02         [24] 8004 	cjne	a,_key,00152$
      00270B 80 38            [24] 8005 	sjmp	00103$
      00270D                       8006 00152$:
      00270D 74 44            [12] 8007 	mov	a,#0x44
      00270F B5*16 02         [24] 8008 	cjne	a,_key,00153$
      002712 80 41            [24] 8009 	sjmp	00104$
      002714                       8010 00153$:
      002714 74 45            [12] 8011 	mov	a,#0x45
      002716 B5*16 02         [24] 8012 	cjne	a,_key,00154$
      002719 80 4A            [24] 8013 	sjmp	00105$
      00271B                       8014 00154$:
      00271B 74 46            [12] 8015 	mov	a,#0x46
      00271D B5*16 02         [24] 8016 	cjne	a,_key,00155$
      002720 80 53            [24] 8017 	sjmp	00106$
      002722                       8018 00155$:
      002722 02r27r95         [24] 8019 	ljmp	00108$
                                   8020 ;	ecen4330lab7.c:2661: case 'A':
      002725                       8021 00101$:
                                   8022 ;	ecen4330lab7.c:2662: iowrite8(seg7_address, 0x88);
      002725 85*04 82         [24] 8023 	mov	dpl,_seg7_address
      002728 85*05 83         [24] 8024 	mov	dph,(_seg7_address + 1)
                                   8025 ;	ecen4330lab7.c:229: IOM = 1;
                                   8026 ;	assignBit
      00272B D2 B4            [12] 8027 	setb	_P3_4
                                   8028 ;	ecen4330lab7.c:230: *map_address = d;
      00272D 74 88            [12] 8029 	mov	a,#0x88
      00272F F0               [24] 8030 	movx	@dptr,a
                                   8031 ;	ecen4330lab7.c:231: IOM = 0;
                                   8032 ;	assignBit
      002730 C2 B4            [12] 8033 	clr	_P3_4
                                   8034 ;	ecen4330lab7.c:2663: RAM_CHECK();
                                   8035 ;	ecen4330lab7.c:2664: break;
      002732 02r11rA2         [24] 8036 	ljmp	_RAM_CHECK
                                   8037 ;	ecen4330lab7.c:2665: case 'B':
      002735                       8038 00102$:
                                   8039 ;	ecen4330lab7.c:2666: iowrite8(seg7_address, 0x83);
      002735 85*04 82         [24] 8040 	mov	dpl,_seg7_address
      002738 85*05 83         [24] 8041 	mov	dph,(_seg7_address + 1)
                                   8042 ;	ecen4330lab7.c:229: IOM = 1;
                                   8043 ;	assignBit
      00273B D2 B4            [12] 8044 	setb	_P3_4
                                   8045 ;	ecen4330lab7.c:230: *map_address = d;
      00273D 74 83            [12] 8046 	mov	a,#0x83
      00273F F0               [24] 8047 	movx	@dptr,a
                                   8048 ;	ecen4330lab7.c:231: IOM = 0;
                                   8049 ;	assignBit
      002740 C2 B4            [12] 8050 	clr	_P3_4
                                   8051 ;	ecen4330lab7.c:2667: MOVE();
                                   8052 ;	ecen4330lab7.c:2668: break;
                                   8053 ;	ecen4330lab7.c:2669: case 'C':
      002742 02r13rDB         [24] 8054 	ljmp	_MOVE
      002745                       8055 00103$:
                                   8056 ;	ecen4330lab7.c:2670: iowrite8(seg7_address, 0xC6);
      002745 85*04 82         [24] 8057 	mov	dpl,_seg7_address
      002748 85*05 83         [24] 8058 	mov	dph,(_seg7_address + 1)
                                   8059 ;	ecen4330lab7.c:229: IOM = 1;
                                   8060 ;	assignBit
      00274B D2 B4            [12] 8061 	setb	_P3_4
                                   8062 ;	ecen4330lab7.c:230: *map_address = d;
      00274D 74 C6            [12] 8063 	mov	a,#0xc6
      00274F F0               [24] 8064 	movx	@dptr,a
                                   8065 ;	ecen4330lab7.c:231: IOM = 0;
                                   8066 ;	assignBit
      002750 C2 B4            [12] 8067 	clr	_P3_4
                                   8068 ;	ecen4330lab7.c:2671: COUNT();
                                   8069 ;	ecen4330lab7.c:2672: break;
                                   8070 ;	ecen4330lab7.c:2673: case 'D':
      002752 02r15rF7         [24] 8071 	ljmp	_COUNT
      002755                       8072 00104$:
                                   8073 ;	ecen4330lab7.c:2674: iowrite8(seg7_address, 0xA1);
      002755 85*04 82         [24] 8074 	mov	dpl,_seg7_address
      002758 85*05 83         [24] 8075 	mov	dph,(_seg7_address + 1)
                                   8076 ;	ecen4330lab7.c:229: IOM = 1;
                                   8077 ;	assignBit
      00275B D2 B4            [12] 8078 	setb	_P3_4
                                   8079 ;	ecen4330lab7.c:230: *map_address = d;
      00275D 74 A1            [12] 8080 	mov	a,#0xa1
      00275F F0               [24] 8081 	movx	@dptr,a
                                   8082 ;	ecen4330lab7.c:231: IOM = 0;
                                   8083 ;	assignBit
      002760 C2 B4            [12] 8084 	clr	_P3_4
                                   8085 ;	ecen4330lab7.c:2675: DUMP();
                                   8086 ;	ecen4330lab7.c:2676: break;
                                   8087 ;	ecen4330lab7.c:2677: case 'E':
      002762 02r1BrA5         [24] 8088 	ljmp	_DUMP
      002765                       8089 00105$:
                                   8090 ;	ecen4330lab7.c:2678: iowrite8(seg7_address, 0x86);
      002765 85*04 82         [24] 8091 	mov	dpl,_seg7_address
      002768 85*05 83         [24] 8092 	mov	dph,(_seg7_address + 1)
                                   8093 ;	ecen4330lab7.c:229: IOM = 1;
                                   8094 ;	assignBit
      00276B D2 B4            [12] 8095 	setb	_P3_4
                                   8096 ;	ecen4330lab7.c:230: *map_address = d;
      00276D 74 86            [12] 8097 	mov	a,#0x86
      00276F F0               [24] 8098 	movx	@dptr,a
                                   8099 ;	ecen4330lab7.c:231: IOM = 0;
                                   8100 ;	assignBit
      002770 C2 B4            [12] 8101 	clr	_P3_4
                                   8102 ;	ecen4330lab7.c:2679: EDIT();
                                   8103 ;	ecen4330lab7.c:2680: break;
                                   8104 ;	ecen4330lab7.c:2681: case 'F':
      002772 02r1Dr0F         [24] 8105 	ljmp	_EDIT
      002775                       8106 00106$:
                                   8107 ;	ecen4330lab7.c:2682: iowrite8(seg7_address, 0x8E);
      002775 85*04 82         [24] 8108 	mov	dpl,_seg7_address
      002778 85*05 83         [24] 8109 	mov	dph,(_seg7_address + 1)
                                   8110 ;	ecen4330lab7.c:229: IOM = 1;
                                   8111 ;	assignBit
      00277B D2 B4            [12] 8112 	setb	_P3_4
                                   8113 ;	ecen4330lab7.c:230: *map_address = d;
      00277D 74 8E            [12] 8114 	mov	a,#0x8e
      00277F F0               [24] 8115 	movx	@dptr,a
                                   8116 ;	ecen4330lab7.c:231: IOM = 0;
                                   8117 ;	assignBit
      002780 C2 B4            [12] 8118 	clr	_P3_4
                                   8119 ;	ecen4330lab7.c:2683: FIND();
                                   8120 ;	ecen4330lab7.c:2684: break;
                                   8121 ;	ecen4330lab7.c:2685: case '1':
      002782 02r20rBC         [24] 8122 	ljmp	_FIND
      002785                       8123 00107$:
                                   8124 ;	ecen4330lab7.c:2686: iowrite8(seg7_address, 0xF9);
      002785 85*04 82         [24] 8125 	mov	dpl,_seg7_address
      002788 85*05 83         [24] 8126 	mov	dph,(_seg7_address + 1)
                                   8127 ;	ecen4330lab7.c:229: IOM = 1;
                                   8128 ;	assignBit
      00278B D2 B4            [12] 8129 	setb	_P3_4
                                   8130 ;	ecen4330lab7.c:230: *map_address = d;
      00278D 74 F9            [12] 8131 	mov	a,#0xf9
      00278F F0               [24] 8132 	movx	@dptr,a
                                   8133 ;	ecen4330lab7.c:231: IOM = 0;
                                   8134 ;	assignBit
      002790 C2 B4            [12] 8135 	clr	_P3_4
                                   8136 ;	ecen4330lab7.c:2687: UART();
                                   8137 ;	ecen4330lab7.c:2688: break;
                                   8138 ;	ecen4330lab7.c:2694: default:
      002792 02r25r9E         [24] 8139 	ljmp	_UART
      002795                       8140 00108$:
                                   8141 ;	ecen4330lab7.c:2695: iowrite8(seg7_address, 0xFF);
      002795 85*04 82         [24] 8142 	mov	dpl,_seg7_address
      002798 85*05 83         [24] 8143 	mov	dph,(_seg7_address + 1)
                                   8144 ;	ecen4330lab7.c:229: IOM = 1;
                                   8145 ;	assignBit
      00279B D2 B4            [12] 8146 	setb	_P3_4
                                   8147 ;	ecen4330lab7.c:230: *map_address = d;
      00279D 74 FF            [12] 8148 	mov	a,#0xff
      00279F F0               [24] 8149 	movx	@dptr,a
                                   8150 ;	ecen4330lab7.c:231: IOM = 0;
                                   8151 ;	assignBit
      0027A0 C2 B4            [12] 8152 	clr	_P3_4
                                   8153 ;	ecen4330lab7.c:2696: invalidInput();
                                   8154 ;	ecen4330lab7.c:2698: }
                                   8155 ;	ecen4330lab7.c:2699: }
      0027A2 02r0Er76         [24] 8156 	ljmp	_invalidInput
                                   8157 ;------------------------------------------------------------
                                   8158 ;Allocation info for local variables in function 'main'
                                   8159 ;------------------------------------------------------------
                                   8160 ;__1310720070              Allocated to registers 
                                   8161 ;__1310720071              Allocated to registers 
                                   8162 ;map_address               Allocated to registers 
                                   8163 ;d                         Allocated to registers 
                                   8164 ;__1310720073              Allocated to registers 
                                   8165 ;__1310720074              Allocated to registers 
                                   8166 ;map_address               Allocated to registers 
                                   8167 ;d                         Allocated to registers 
                                   8168 ;__1310720076              Allocated to registers 
                                   8169 ;__1310720077              Allocated to registers 
                                   8170 ;map_address               Allocated to registers 
                                   8171 ;d                         Allocated to registers 
                                   8172 ;__1310720079              Allocated to registers 
                                   8173 ;__1310720080              Allocated to registers 
                                   8174 ;map_address               Allocated to registers 
                                   8175 ;d                         Allocated to registers 
                                   8176 ;__1310720082              Allocated to registers 
                                   8177 ;__1310720083              Allocated to registers 
                                   8178 ;map_address               Allocated to registers 
                                   8179 ;d                         Allocated to registers 
                                   8180 ;__1310720085              Allocated to registers 
                                   8181 ;__1310720086              Allocated to registers 
                                   8182 ;map_address               Allocated to registers 
                                   8183 ;d                         Allocated to registers 
                                   8184 ;__1310720088              Allocated to registers 
                                   8185 ;__1310720089              Allocated to registers 
                                   8186 ;map_address               Allocated to registers 
                                   8187 ;d                         Allocated to registers 
                                   8188 ;------------------------------------------------------------
                                   8189 ;	ecen4330lab7.c:2708: void main (void) {
                                   8190 ;	-----------------------------------------
                                   8191 ;	 function main
                                   8192 ;	-----------------------------------------
      0027A5                       8193 _main:
                                   8194 ;	ecen4330lab7.c:2709: CD = 0;
                                   8195 ;	assignBit
      0027A5 C2 B5            [12] 8196 	clr	_P3_5
                                   8197 ;	ecen4330lab7.c:2710: IOM = 0;
                                   8198 ;	assignBit
      0027A7 C2 B4            [12] 8199 	clr	_P3_4
                                   8200 ;	ecen4330lab7.c:2712: UART_Init();
      0027A9 12r01r01         [24] 8201 	lcall	_UART_Init
                                   8202 ;	ecen4330lab7.c:2713: rtcInit();
      0027AC 12r01rAB         [24] 8203 	lcall	_rtcInit
                                   8204 ;	ecen4330lab7.c:2715: iowrite8(seg7_address, 0xFE);//a
      0027AF 85*04 82         [24] 8205 	mov	dpl,_seg7_address
      0027B2 85*05 83         [24] 8206 	mov	dph,(_seg7_address + 1)
                                   8207 ;	ecen4330lab7.c:229: IOM = 1;
                                   8208 ;	assignBit
      0027B5 D2 B4            [12] 8209 	setb	_P3_4
                                   8210 ;	ecen4330lab7.c:230: *map_address = d;
      0027B7 74 FE            [12] 8211 	mov	a,#0xfe
      0027B9 F0               [24] 8212 	movx	@dptr,a
                                   8213 ;	ecen4330lab7.c:231: IOM = 0;
                                   8214 ;	assignBit
      0027BA C2 B4            [12] 8215 	clr	_P3_4
                                   8216 ;	ecen4330lab7.c:2716: delay(100);
      0027BC 90 00 64         [24] 8217 	mov	dptr,#0x0064
      0027BF 12r01r1A         [24] 8218 	lcall	_delay
                                   8219 ;	ecen4330lab7.c:2717: iowrite8(seg7_address, 0xFC);//a & b
      0027C2 85*04 82         [24] 8220 	mov	dpl,_seg7_address
      0027C5 85*05 83         [24] 8221 	mov	dph,(_seg7_address + 1)
                                   8222 ;	ecen4330lab7.c:229: IOM = 1;
                                   8223 ;	assignBit
      0027C8 D2 B4            [12] 8224 	setb	_P3_4
                                   8225 ;	ecen4330lab7.c:230: *map_address = d;
      0027CA 74 FC            [12] 8226 	mov	a,#0xfc
      0027CC F0               [24] 8227 	movx	@dptr,a
                                   8228 ;	ecen4330lab7.c:231: IOM = 0;
                                   8229 ;	assignBit
      0027CD C2 B4            [12] 8230 	clr	_P3_4
                                   8231 ;	ecen4330lab7.c:2718: delay(100);
      0027CF 90 00 64         [24] 8232 	mov	dptr,#0x0064
      0027D2 12r01r1A         [24] 8233 	lcall	_delay
                                   8234 ;	ecen4330lab7.c:2719: iowrite8(seg7_address, 0xF8);//a & b & c
      0027D5 85*04 82         [24] 8235 	mov	dpl,_seg7_address
      0027D8 85*05 83         [24] 8236 	mov	dph,(_seg7_address + 1)
                                   8237 ;	ecen4330lab7.c:229: IOM = 1;
                                   8238 ;	assignBit
      0027DB D2 B4            [12] 8239 	setb	_P3_4
                                   8240 ;	ecen4330lab7.c:230: *map_address = d;
      0027DD 74 F8            [12] 8241 	mov	a,#0xf8
      0027DF F0               [24] 8242 	movx	@dptr,a
                                   8243 ;	ecen4330lab7.c:231: IOM = 0;
                                   8244 ;	assignBit
      0027E0 C2 B4            [12] 8245 	clr	_P3_4
                                   8246 ;	ecen4330lab7.c:2720: delay(100);
      0027E2 90 00 64         [24] 8247 	mov	dptr,#0x0064
      0027E5 12r01r1A         [24] 8248 	lcall	_delay
                                   8249 ;	ecen4330lab7.c:2721: iowrite8(seg7_address, 0xF0);//a & b & c & d
      0027E8 85*04 82         [24] 8250 	mov	dpl,_seg7_address
      0027EB 85*05 83         [24] 8251 	mov	dph,(_seg7_address + 1)
                                   8252 ;	ecen4330lab7.c:229: IOM = 1;
                                   8253 ;	assignBit
      0027EE D2 B4            [12] 8254 	setb	_P3_4
                                   8255 ;	ecen4330lab7.c:230: *map_address = d;
      0027F0 74 F0            [12] 8256 	mov	a,#0xf0
      0027F2 F0               [24] 8257 	movx	@dptr,a
                                   8258 ;	ecen4330lab7.c:231: IOM = 0;
                                   8259 ;	assignBit
      0027F3 C2 B4            [12] 8260 	clr	_P3_4
                                   8261 ;	ecen4330lab7.c:2722: delay(100);
      0027F5 90 00 64         [24] 8262 	mov	dptr,#0x0064
      0027F8 12r01r1A         [24] 8263 	lcall	_delay
                                   8264 ;	ecen4330lab7.c:2723: iowrite8(seg7_address, 0xE0);//a & b & c & d & e
      0027FB 85*04 82         [24] 8265 	mov	dpl,_seg7_address
      0027FE 85*05 83         [24] 8266 	mov	dph,(_seg7_address + 1)
                                   8267 ;	ecen4330lab7.c:229: IOM = 1;
                                   8268 ;	assignBit
      002801 D2 B4            [12] 8269 	setb	_P3_4
                                   8270 ;	ecen4330lab7.c:230: *map_address = d;
      002803 74 E0            [12] 8271 	mov	a,#0xe0
      002805 F0               [24] 8272 	movx	@dptr,a
                                   8273 ;	ecen4330lab7.c:231: IOM = 0;
                                   8274 ;	assignBit
      002806 C2 B4            [12] 8275 	clr	_P3_4
                                   8276 ;	ecen4330lab7.c:2724: delay(100);
      002808 90 00 64         [24] 8277 	mov	dptr,#0x0064
      00280B 12r01r1A         [24] 8278 	lcall	_delay
                                   8279 ;	ecen4330lab7.c:2725: iowrite8(seg7_address, 0xC0);//a & b & c & d & e & f
      00280E 85*04 82         [24] 8280 	mov	dpl,_seg7_address
      002811 85*05 83         [24] 8281 	mov	dph,(_seg7_address + 1)
                                   8282 ;	ecen4330lab7.c:229: IOM = 1;
                                   8283 ;	assignBit
      002814 D2 B4            [12] 8284 	setb	_P3_4
                                   8285 ;	ecen4330lab7.c:230: *map_address = d;
      002816 74 C0            [12] 8286 	mov	a,#0xc0
      002818 F0               [24] 8287 	movx	@dptr,a
                                   8288 ;	ecen4330lab7.c:231: IOM = 0;
                                   8289 ;	assignBit
      002819 C2 B4            [12] 8290 	clr	_P3_4
                                   8291 ;	ecen4330lab7.c:2726: delay(100);
      00281B 90 00 64         [24] 8292 	mov	dptr,#0x0064
      00281E 12r01r1A         [24] 8293 	lcall	_delay
                                   8294 ;	ecen4330lab7.c:2727: IOM = 0;
                                   8295 ;	assignBit
      002821 C2 B4            [12] 8296 	clr	_P3_4
                                   8297 ;	ecen4330lab7.c:2728: CD = 1;
                                   8298 ;	assignBit
      002823 D2 B5            [12] 8299 	setb	_P3_5
                                   8300 ;	ecen4330lab7.c:2730: TFT_LCD_INIT();
      002825 12r04rF6         [24] 8301 	lcall	_TFT_LCD_INIT
                                   8302 ;	ecen4330lab7.c:2731: iowrite8(seg7_address, 0xF9);
      002828 85*04 82         [24] 8303 	mov	dpl,_seg7_address
      00282B 85*05 83         [24] 8304 	mov	dph,(_seg7_address + 1)
                                   8305 ;	ecen4330lab7.c:229: IOM = 1;
                                   8306 ;	assignBit
      00282E D2 B4            [12] 8307 	setb	_P3_4
                                   8308 ;	ecen4330lab7.c:230: *map_address = d;
      002830 74 F9            [12] 8309 	mov	a,#0xf9
      002832 F0               [24] 8310 	movx	@dptr,a
                                   8311 ;	ecen4330lab7.c:231: IOM = 0;
                                   8312 ;	assignBit
      002833 C2 B4            [12] 8313 	clr	_P3_4
                                   8314 ;	ecen4330lab7.c:2732: resetLCD();
      002835 12r0Er4E         [24] 8315 	lcall	_resetLCD
                                   8316 ;	ecen4330lab7.c:2734: while(1) {
      002838                       8317 00102$:
                                   8318 ;	ecen4330lab7.c:2735: LCD_mainMenu();
      002838 12r26r47         [24] 8319 	lcall	_LCD_mainMenu
                                   8320 ;	ecen4330lab7.c:2737: }
      00283B 80 FB            [24] 8321 	sjmp	00102$
                                   8322 	.area CSEG    (CODE)
                                   8323 	.area CONST   (CODE)
      000000                       8324 _font:
      000000 00                    8325 	.db #0x00	; 0
      000001 00                    8326 	.db #0x00	; 0
      000002 00                    8327 	.db #0x00	; 0
      000003 00                    8328 	.db #0x00	; 0
      000004 00                    8329 	.db #0x00	; 0
      000005 3E                    8330 	.db #0x3e	; 62
      000006 5B                    8331 	.db #0x5b	; 91
      000007 4F                    8332 	.db #0x4f	; 79	'O'
      000008 5B                    8333 	.db #0x5b	; 91
      000009 3E                    8334 	.db #0x3e	; 62
      00000A 3E                    8335 	.db #0x3e	; 62
      00000B 6B                    8336 	.db #0x6b	; 107	'k'
      00000C 4F                    8337 	.db #0x4f	; 79	'O'
      00000D 6B                    8338 	.db #0x6b	; 107	'k'
      00000E 3E                    8339 	.db #0x3e	; 62
      00000F 1C                    8340 	.db #0x1c	; 28
      000010 3E                    8341 	.db #0x3e	; 62
      000011 7C                    8342 	.db #0x7c	; 124
      000012 3E                    8343 	.db #0x3e	; 62
      000013 1C                    8344 	.db #0x1c	; 28
      000014 18                    8345 	.db #0x18	; 24
      000015 3C                    8346 	.db #0x3c	; 60
      000016 7E                    8347 	.db #0x7e	; 126
      000017 3C                    8348 	.db #0x3c	; 60
      000018 18                    8349 	.db #0x18	; 24
      000019 1C                    8350 	.db #0x1c	; 28
      00001A 57                    8351 	.db #0x57	; 87	'W'
      00001B 7D                    8352 	.db #0x7d	; 125
      00001C 57                    8353 	.db #0x57	; 87	'W'
      00001D 1C                    8354 	.db #0x1c	; 28
      00001E 1C                    8355 	.db #0x1c	; 28
      00001F 5E                    8356 	.db #0x5e	; 94
      000020 7F                    8357 	.db #0x7f	; 127
      000021 5E                    8358 	.db #0x5e	; 94
      000022 1C                    8359 	.db #0x1c	; 28
      000023 00                    8360 	.db #0x00	; 0
      000024 18                    8361 	.db #0x18	; 24
      000025 3C                    8362 	.db #0x3c	; 60
      000026 18                    8363 	.db #0x18	; 24
      000027 00                    8364 	.db #0x00	; 0
      000028 FF                    8365 	.db #0xff	; 255
      000029 E7                    8366 	.db #0xe7	; 231
      00002A C3                    8367 	.db #0xc3	; 195
      00002B E7                    8368 	.db #0xe7	; 231
      00002C FF                    8369 	.db #0xff	; 255
      00002D 00                    8370 	.db #0x00	; 0
      00002E 18                    8371 	.db #0x18	; 24
      00002F 24                    8372 	.db #0x24	; 36
      000030 18                    8373 	.db #0x18	; 24
      000031 00                    8374 	.db #0x00	; 0
      000032 FF                    8375 	.db #0xff	; 255
      000033 E7                    8376 	.db #0xe7	; 231
      000034 DB                    8377 	.db #0xdb	; 219
      000035 E7                    8378 	.db #0xe7	; 231
      000036 FF                    8379 	.db #0xff	; 255
      000037 30                    8380 	.db #0x30	; 48	'0'
      000038 48                    8381 	.db #0x48	; 72	'H'
      000039 3A                    8382 	.db #0x3a	; 58
      00003A 06                    8383 	.db #0x06	; 6
      00003B 0E                    8384 	.db #0x0e	; 14
      00003C 26                    8385 	.db #0x26	; 38
      00003D 29                    8386 	.db #0x29	; 41
      00003E 79                    8387 	.db #0x79	; 121	'y'
      00003F 29                    8388 	.db #0x29	; 41
      000040 26                    8389 	.db #0x26	; 38
      000041 40                    8390 	.db #0x40	; 64
      000042 7F                    8391 	.db #0x7f	; 127
      000043 05                    8392 	.db #0x05	; 5
      000044 05                    8393 	.db #0x05	; 5
      000045 07                    8394 	.db #0x07	; 7
      000046 40                    8395 	.db #0x40	; 64
      000047 7F                    8396 	.db #0x7f	; 127
      000048 05                    8397 	.db #0x05	; 5
      000049 25                    8398 	.db #0x25	; 37
      00004A 3F                    8399 	.db #0x3f	; 63
      00004B 5A                    8400 	.db #0x5a	; 90	'Z'
      00004C 3C                    8401 	.db #0x3c	; 60
      00004D E7                    8402 	.db #0xe7	; 231
      00004E 3C                    8403 	.db #0x3c	; 60
      00004F 5A                    8404 	.db #0x5a	; 90	'Z'
      000050 7F                    8405 	.db #0x7f	; 127
      000051 3E                    8406 	.db #0x3e	; 62
      000052 1C                    8407 	.db #0x1c	; 28
      000053 1C                    8408 	.db #0x1c	; 28
      000054 08                    8409 	.db #0x08	; 8
      000055 08                    8410 	.db #0x08	; 8
      000056 1C                    8411 	.db #0x1c	; 28
      000057 1C                    8412 	.db #0x1c	; 28
      000058 3E                    8413 	.db #0x3e	; 62
      000059 7F                    8414 	.db #0x7f	; 127
      00005A 14                    8415 	.db #0x14	; 20
      00005B 22                    8416 	.db #0x22	; 34
      00005C 7F                    8417 	.db #0x7f	; 127
      00005D 22                    8418 	.db #0x22	; 34
      00005E 14                    8419 	.db #0x14	; 20
      00005F 5F                    8420 	.db #0x5f	; 95
      000060 5F                    8421 	.db #0x5f	; 95
      000061 00                    8422 	.db #0x00	; 0
      000062 5F                    8423 	.db #0x5f	; 95
      000063 5F                    8424 	.db #0x5f	; 95
      000064 06                    8425 	.db #0x06	; 6
      000065 09                    8426 	.db #0x09	; 9
      000066 7F                    8427 	.db #0x7f	; 127
      000067 01                    8428 	.db #0x01	; 1
      000068 7F                    8429 	.db #0x7f	; 127
      000069 00                    8430 	.db #0x00	; 0
      00006A 66                    8431 	.db #0x66	; 102	'f'
      00006B 89                    8432 	.db #0x89	; 137
      00006C 95                    8433 	.db #0x95	; 149
      00006D 6A                    8434 	.db #0x6a	; 106	'j'
      00006E 60                    8435 	.db #0x60	; 96
      00006F 60                    8436 	.db #0x60	; 96
      000070 60                    8437 	.db #0x60	; 96
      000071 60                    8438 	.db #0x60	; 96
      000072 60                    8439 	.db #0x60	; 96
      000073 94                    8440 	.db #0x94	; 148
      000074 A2                    8441 	.db #0xa2	; 162
      000075 FF                    8442 	.db #0xff	; 255
      000076 A2                    8443 	.db #0xa2	; 162
      000077 94                    8444 	.db #0x94	; 148
      000078 08                    8445 	.db #0x08	; 8
      000079 04                    8446 	.db #0x04	; 4
      00007A 7E                    8447 	.db #0x7e	; 126
      00007B 04                    8448 	.db #0x04	; 4
      00007C 08                    8449 	.db #0x08	; 8
      00007D 10                    8450 	.db #0x10	; 16
      00007E 20                    8451 	.db #0x20	; 32
      00007F 7E                    8452 	.db #0x7e	; 126
      000080 20                    8453 	.db #0x20	; 32
      000081 10                    8454 	.db #0x10	; 16
      000082 08                    8455 	.db #0x08	; 8
      000083 08                    8456 	.db #0x08	; 8
      000084 2A                    8457 	.db #0x2a	; 42
      000085 1C                    8458 	.db #0x1c	; 28
      000086 08                    8459 	.db #0x08	; 8
      000087 08                    8460 	.db #0x08	; 8
      000088 1C                    8461 	.db #0x1c	; 28
      000089 2A                    8462 	.db #0x2a	; 42
      00008A 08                    8463 	.db #0x08	; 8
      00008B 08                    8464 	.db #0x08	; 8
      00008C 1E                    8465 	.db #0x1e	; 30
      00008D 10                    8466 	.db #0x10	; 16
      00008E 10                    8467 	.db #0x10	; 16
      00008F 10                    8468 	.db #0x10	; 16
      000090 10                    8469 	.db #0x10	; 16
      000091 0C                    8470 	.db #0x0c	; 12
      000092 1E                    8471 	.db #0x1e	; 30
      000093 0C                    8472 	.db #0x0c	; 12
      000094 1E                    8473 	.db #0x1e	; 30
      000095 0C                    8474 	.db #0x0c	; 12
      000096 30                    8475 	.db #0x30	; 48	'0'
      000097 38                    8476 	.db #0x38	; 56	'8'
      000098 3E                    8477 	.db #0x3e	; 62
      000099 38                    8478 	.db #0x38	; 56	'8'
      00009A 30                    8479 	.db #0x30	; 48	'0'
      00009B 06                    8480 	.db #0x06	; 6
      00009C 0E                    8481 	.db #0x0e	; 14
      00009D 3E                    8482 	.db #0x3e	; 62
      00009E 0E                    8483 	.db #0x0e	; 14
      00009F 06                    8484 	.db #0x06	; 6
      0000A0 00                    8485 	.db #0x00	; 0
      0000A1 00                    8486 	.db #0x00	; 0
      0000A2 00                    8487 	.db #0x00	; 0
      0000A3 00                    8488 	.db #0x00	; 0
      0000A4 00                    8489 	.db #0x00	; 0
      0000A5 00                    8490 	.db #0x00	; 0
      0000A6 00                    8491 	.db #0x00	; 0
      0000A7 5F                    8492 	.db #0x5f	; 95
      0000A8 00                    8493 	.db #0x00	; 0
      0000A9 00                    8494 	.db #0x00	; 0
      0000AA 00                    8495 	.db #0x00	; 0
      0000AB 07                    8496 	.db #0x07	; 7
      0000AC 00                    8497 	.db #0x00	; 0
      0000AD 07                    8498 	.db #0x07	; 7
      0000AE 00                    8499 	.db #0x00	; 0
      0000AF 14                    8500 	.db #0x14	; 20
      0000B0 7F                    8501 	.db #0x7f	; 127
      0000B1 14                    8502 	.db #0x14	; 20
      0000B2 7F                    8503 	.db #0x7f	; 127
      0000B3 14                    8504 	.db #0x14	; 20
      0000B4 24                    8505 	.db #0x24	; 36
      0000B5 2A                    8506 	.db #0x2a	; 42
      0000B6 7F                    8507 	.db #0x7f	; 127
      0000B7 2A                    8508 	.db #0x2a	; 42
      0000B8 12                    8509 	.db #0x12	; 18
      0000B9 23                    8510 	.db #0x23	; 35
      0000BA 13                    8511 	.db #0x13	; 19
      0000BB 08                    8512 	.db #0x08	; 8
      0000BC 64                    8513 	.db #0x64	; 100	'd'
      0000BD 62                    8514 	.db #0x62	; 98	'b'
      0000BE 36                    8515 	.db #0x36	; 54	'6'
      0000BF 49                    8516 	.db #0x49	; 73	'I'
      0000C0 56                    8517 	.db #0x56	; 86	'V'
      0000C1 20                    8518 	.db #0x20	; 32
      0000C2 50                    8519 	.db #0x50	; 80	'P'
      0000C3 00                    8520 	.db #0x00	; 0
      0000C4 08                    8521 	.db #0x08	; 8
      0000C5 07                    8522 	.db #0x07	; 7
      0000C6 03                    8523 	.db #0x03	; 3
      0000C7 00                    8524 	.db #0x00	; 0
      0000C8 00                    8525 	.db #0x00	; 0
      0000C9 1C                    8526 	.db #0x1c	; 28
      0000CA 22                    8527 	.db #0x22	; 34
      0000CB 41                    8528 	.db #0x41	; 65	'A'
      0000CC 00                    8529 	.db #0x00	; 0
      0000CD 00                    8530 	.db #0x00	; 0
      0000CE 41                    8531 	.db #0x41	; 65	'A'
      0000CF 22                    8532 	.db #0x22	; 34
      0000D0 1C                    8533 	.db #0x1c	; 28
      0000D1 00                    8534 	.db #0x00	; 0
      0000D2 2A                    8535 	.db #0x2a	; 42
      0000D3 1C                    8536 	.db #0x1c	; 28
      0000D4 7F                    8537 	.db #0x7f	; 127
      0000D5 1C                    8538 	.db #0x1c	; 28
      0000D6 2A                    8539 	.db #0x2a	; 42
      0000D7 08                    8540 	.db #0x08	; 8
      0000D8 08                    8541 	.db #0x08	; 8
      0000D9 3E                    8542 	.db #0x3e	; 62
      0000DA 08                    8543 	.db #0x08	; 8
      0000DB 08                    8544 	.db #0x08	; 8
      0000DC 00                    8545 	.db #0x00	; 0
      0000DD 80                    8546 	.db #0x80	; 128
      0000DE 70                    8547 	.db #0x70	; 112	'p'
      0000DF 30                    8548 	.db #0x30	; 48	'0'
      0000E0 00                    8549 	.db #0x00	; 0
      0000E1 08                    8550 	.db #0x08	; 8
      0000E2 08                    8551 	.db #0x08	; 8
      0000E3 08                    8552 	.db #0x08	; 8
      0000E4 08                    8553 	.db #0x08	; 8
      0000E5 08                    8554 	.db #0x08	; 8
      0000E6 00                    8555 	.db #0x00	; 0
      0000E7 00                    8556 	.db #0x00	; 0
      0000E8 60                    8557 	.db #0x60	; 96
      0000E9 60                    8558 	.db #0x60	; 96
      0000EA 00                    8559 	.db #0x00	; 0
      0000EB 20                    8560 	.db #0x20	; 32
      0000EC 10                    8561 	.db #0x10	; 16
      0000ED 08                    8562 	.db #0x08	; 8
      0000EE 04                    8563 	.db #0x04	; 4
      0000EF 02                    8564 	.db #0x02	; 2
      0000F0 3E                    8565 	.db #0x3e	; 62
      0000F1 51                    8566 	.db #0x51	; 81	'Q'
      0000F2 49                    8567 	.db #0x49	; 73	'I'
      0000F3 45                    8568 	.db #0x45	; 69	'E'
      0000F4 3E                    8569 	.db #0x3e	; 62
      0000F5 00                    8570 	.db #0x00	; 0
      0000F6 42                    8571 	.db #0x42	; 66	'B'
      0000F7 7F                    8572 	.db #0x7f	; 127
      0000F8 40                    8573 	.db #0x40	; 64
      0000F9 00                    8574 	.db #0x00	; 0
      0000FA 72                    8575 	.db #0x72	; 114	'r'
      0000FB 49                    8576 	.db #0x49	; 73	'I'
      0000FC 49                    8577 	.db #0x49	; 73	'I'
      0000FD 49                    8578 	.db #0x49	; 73	'I'
      0000FE 46                    8579 	.db #0x46	; 70	'F'
      0000FF 21                    8580 	.db #0x21	; 33
      000100 41                    8581 	.db #0x41	; 65	'A'
      000101 49                    8582 	.db #0x49	; 73	'I'
      000102 4D                    8583 	.db #0x4d	; 77	'M'
      000103 33                    8584 	.db #0x33	; 51	'3'
      000104 18                    8585 	.db #0x18	; 24
      000105 14                    8586 	.db #0x14	; 20
      000106 12                    8587 	.db #0x12	; 18
      000107 7F                    8588 	.db #0x7f	; 127
      000108 10                    8589 	.db #0x10	; 16
      000109 27                    8590 	.db #0x27	; 39
      00010A 45                    8591 	.db #0x45	; 69	'E'
      00010B 45                    8592 	.db #0x45	; 69	'E'
      00010C 45                    8593 	.db #0x45	; 69	'E'
      00010D 39                    8594 	.db #0x39	; 57	'9'
      00010E 3C                    8595 	.db #0x3c	; 60
      00010F 4A                    8596 	.db #0x4a	; 74	'J'
      000110 49                    8597 	.db #0x49	; 73	'I'
      000111 49                    8598 	.db #0x49	; 73	'I'
      000112 31                    8599 	.db #0x31	; 49	'1'
      000113 41                    8600 	.db #0x41	; 65	'A'
      000114 21                    8601 	.db #0x21	; 33
      000115 11                    8602 	.db #0x11	; 17
      000116 09                    8603 	.db #0x09	; 9
      000117 07                    8604 	.db #0x07	; 7
      000118 36                    8605 	.db #0x36	; 54	'6'
      000119 49                    8606 	.db #0x49	; 73	'I'
      00011A 49                    8607 	.db #0x49	; 73	'I'
      00011B 49                    8608 	.db #0x49	; 73	'I'
      00011C 36                    8609 	.db #0x36	; 54	'6'
      00011D 46                    8610 	.db #0x46	; 70	'F'
      00011E 49                    8611 	.db #0x49	; 73	'I'
      00011F 49                    8612 	.db #0x49	; 73	'I'
      000120 29                    8613 	.db #0x29	; 41
      000121 1E                    8614 	.db #0x1e	; 30
      000122 00                    8615 	.db #0x00	; 0
      000123 00                    8616 	.db #0x00	; 0
      000124 14                    8617 	.db #0x14	; 20
      000125 00                    8618 	.db #0x00	; 0
      000126 00                    8619 	.db #0x00	; 0
      000127 00                    8620 	.db #0x00	; 0
      000128 40                    8621 	.db #0x40	; 64
      000129 34                    8622 	.db #0x34	; 52	'4'
      00012A 00                    8623 	.db #0x00	; 0
      00012B 00                    8624 	.db #0x00	; 0
      00012C 00                    8625 	.db #0x00	; 0
      00012D 08                    8626 	.db #0x08	; 8
      00012E 14                    8627 	.db #0x14	; 20
      00012F 22                    8628 	.db #0x22	; 34
      000130 41                    8629 	.db #0x41	; 65	'A'
      000131 14                    8630 	.db #0x14	; 20
      000132 14                    8631 	.db #0x14	; 20
      000133 14                    8632 	.db #0x14	; 20
      000134 14                    8633 	.db #0x14	; 20
      000135 14                    8634 	.db #0x14	; 20
      000136 00                    8635 	.db #0x00	; 0
      000137 41                    8636 	.db #0x41	; 65	'A'
      000138 22                    8637 	.db #0x22	; 34
      000139 14                    8638 	.db #0x14	; 20
      00013A 08                    8639 	.db #0x08	; 8
      00013B 02                    8640 	.db #0x02	; 2
      00013C 01                    8641 	.db #0x01	; 1
      00013D 59                    8642 	.db #0x59	; 89	'Y'
      00013E 09                    8643 	.db #0x09	; 9
      00013F 06                    8644 	.db #0x06	; 6
      000140 3E                    8645 	.db #0x3e	; 62
      000141 41                    8646 	.db #0x41	; 65	'A'
      000142 5D                    8647 	.db #0x5d	; 93
      000143 59                    8648 	.db #0x59	; 89	'Y'
      000144 4E                    8649 	.db #0x4e	; 78	'N'
      000145 7C                    8650 	.db #0x7c	; 124
      000146 12                    8651 	.db #0x12	; 18
      000147 11                    8652 	.db #0x11	; 17
      000148 12                    8653 	.db #0x12	; 18
      000149 7C                    8654 	.db #0x7c	; 124
      00014A 7F                    8655 	.db #0x7f	; 127
      00014B 49                    8656 	.db #0x49	; 73	'I'
      00014C 49                    8657 	.db #0x49	; 73	'I'
      00014D 49                    8658 	.db #0x49	; 73	'I'
      00014E 36                    8659 	.db #0x36	; 54	'6'
      00014F 3E                    8660 	.db #0x3e	; 62
      000150 41                    8661 	.db #0x41	; 65	'A'
      000151 41                    8662 	.db #0x41	; 65	'A'
      000152 41                    8663 	.db #0x41	; 65	'A'
      000153 22                    8664 	.db #0x22	; 34
      000154 7F                    8665 	.db #0x7f	; 127
      000155 41                    8666 	.db #0x41	; 65	'A'
      000156 41                    8667 	.db #0x41	; 65	'A'
      000157 41                    8668 	.db #0x41	; 65	'A'
      000158 3E                    8669 	.db #0x3e	; 62
      000159 7F                    8670 	.db #0x7f	; 127
      00015A 49                    8671 	.db #0x49	; 73	'I'
      00015B 49                    8672 	.db #0x49	; 73	'I'
      00015C 49                    8673 	.db #0x49	; 73	'I'
      00015D 41                    8674 	.db #0x41	; 65	'A'
      00015E 7F                    8675 	.db #0x7f	; 127
      00015F 09                    8676 	.db #0x09	; 9
      000160 09                    8677 	.db #0x09	; 9
      000161 09                    8678 	.db #0x09	; 9
      000162 01                    8679 	.db #0x01	; 1
      000163 3E                    8680 	.db #0x3e	; 62
      000164 41                    8681 	.db #0x41	; 65	'A'
      000165 41                    8682 	.db #0x41	; 65	'A'
      000166 51                    8683 	.db #0x51	; 81	'Q'
      000167 73                    8684 	.db #0x73	; 115	's'
      000168 7F                    8685 	.db #0x7f	; 127
      000169 08                    8686 	.db #0x08	; 8
      00016A 08                    8687 	.db #0x08	; 8
      00016B 08                    8688 	.db #0x08	; 8
      00016C 7F                    8689 	.db #0x7f	; 127
      00016D 00                    8690 	.db #0x00	; 0
      00016E 41                    8691 	.db #0x41	; 65	'A'
      00016F 7F                    8692 	.db #0x7f	; 127
      000170 41                    8693 	.db #0x41	; 65	'A'
      000171 00                    8694 	.db #0x00	; 0
      000172 20                    8695 	.db #0x20	; 32
      000173 40                    8696 	.db #0x40	; 64
      000174 41                    8697 	.db #0x41	; 65	'A'
      000175 3F                    8698 	.db #0x3f	; 63
      000176 01                    8699 	.db #0x01	; 1
      000177 7F                    8700 	.db #0x7f	; 127
      000178 08                    8701 	.db #0x08	; 8
      000179 14                    8702 	.db #0x14	; 20
      00017A 22                    8703 	.db #0x22	; 34
      00017B 41                    8704 	.db #0x41	; 65	'A'
      00017C 7F                    8705 	.db #0x7f	; 127
      00017D 40                    8706 	.db #0x40	; 64
      00017E 40                    8707 	.db #0x40	; 64
      00017F 40                    8708 	.db #0x40	; 64
      000180 40                    8709 	.db #0x40	; 64
      000181 7F                    8710 	.db #0x7f	; 127
      000182 02                    8711 	.db #0x02	; 2
      000183 1C                    8712 	.db #0x1c	; 28
      000184 02                    8713 	.db #0x02	; 2
      000185 7F                    8714 	.db #0x7f	; 127
      000186 7F                    8715 	.db #0x7f	; 127
      000187 04                    8716 	.db #0x04	; 4
      000188 08                    8717 	.db #0x08	; 8
      000189 10                    8718 	.db #0x10	; 16
      00018A 7F                    8719 	.db #0x7f	; 127
      00018B 3E                    8720 	.db #0x3e	; 62
      00018C 41                    8721 	.db #0x41	; 65	'A'
      00018D 41                    8722 	.db #0x41	; 65	'A'
      00018E 41                    8723 	.db #0x41	; 65	'A'
      00018F 3E                    8724 	.db #0x3e	; 62
      000190 7F                    8725 	.db #0x7f	; 127
      000191 09                    8726 	.db #0x09	; 9
      000192 09                    8727 	.db #0x09	; 9
      000193 09                    8728 	.db #0x09	; 9
      000194 06                    8729 	.db #0x06	; 6
      000195 3E                    8730 	.db #0x3e	; 62
      000196 41                    8731 	.db #0x41	; 65	'A'
      000197 51                    8732 	.db #0x51	; 81	'Q'
      000198 21                    8733 	.db #0x21	; 33
      000199 5E                    8734 	.db #0x5e	; 94
      00019A 7F                    8735 	.db #0x7f	; 127
      00019B 09                    8736 	.db #0x09	; 9
      00019C 19                    8737 	.db #0x19	; 25
      00019D 29                    8738 	.db #0x29	; 41
      00019E 46                    8739 	.db #0x46	; 70	'F'
      00019F 26                    8740 	.db #0x26	; 38
      0001A0 49                    8741 	.db #0x49	; 73	'I'
      0001A1 49                    8742 	.db #0x49	; 73	'I'
      0001A2 49                    8743 	.db #0x49	; 73	'I'
      0001A3 32                    8744 	.db #0x32	; 50	'2'
      0001A4 03                    8745 	.db #0x03	; 3
      0001A5 01                    8746 	.db #0x01	; 1
      0001A6 7F                    8747 	.db #0x7f	; 127
      0001A7 01                    8748 	.db #0x01	; 1
      0001A8 03                    8749 	.db #0x03	; 3
      0001A9 3F                    8750 	.db #0x3f	; 63
      0001AA 40                    8751 	.db #0x40	; 64
      0001AB 40                    8752 	.db #0x40	; 64
      0001AC 40                    8753 	.db #0x40	; 64
      0001AD 3F                    8754 	.db #0x3f	; 63
      0001AE 1F                    8755 	.db #0x1f	; 31
      0001AF 20                    8756 	.db #0x20	; 32
      0001B0 40                    8757 	.db #0x40	; 64
      0001B1 20                    8758 	.db #0x20	; 32
      0001B2 1F                    8759 	.db #0x1f	; 31
      0001B3 3F                    8760 	.db #0x3f	; 63
      0001B4 40                    8761 	.db #0x40	; 64
      0001B5 38                    8762 	.db #0x38	; 56	'8'
      0001B6 40                    8763 	.db #0x40	; 64
      0001B7 3F                    8764 	.db #0x3f	; 63
      0001B8 63                    8765 	.db #0x63	; 99	'c'
      0001B9 14                    8766 	.db #0x14	; 20
      0001BA 08                    8767 	.db #0x08	; 8
      0001BB 14                    8768 	.db #0x14	; 20
      0001BC 63                    8769 	.db #0x63	; 99	'c'
      0001BD 03                    8770 	.db #0x03	; 3
      0001BE 04                    8771 	.db #0x04	; 4
      0001BF 78                    8772 	.db #0x78	; 120	'x'
      0001C0 04                    8773 	.db #0x04	; 4
      0001C1 03                    8774 	.db #0x03	; 3
      0001C2 61                    8775 	.db #0x61	; 97	'a'
      0001C3 59                    8776 	.db #0x59	; 89	'Y'
      0001C4 49                    8777 	.db #0x49	; 73	'I'
      0001C5 4D                    8778 	.db #0x4d	; 77	'M'
      0001C6 43                    8779 	.db #0x43	; 67	'C'
      0001C7 00                    8780 	.db #0x00	; 0
      0001C8 7F                    8781 	.db #0x7f	; 127
      0001C9 41                    8782 	.db #0x41	; 65	'A'
      0001CA 41                    8783 	.db #0x41	; 65	'A'
      0001CB 41                    8784 	.db #0x41	; 65	'A'
      0001CC 02                    8785 	.db #0x02	; 2
      0001CD 04                    8786 	.db #0x04	; 4
      0001CE 08                    8787 	.db #0x08	; 8
      0001CF 10                    8788 	.db #0x10	; 16
      0001D0 20                    8789 	.db #0x20	; 32
      0001D1 00                    8790 	.db #0x00	; 0
      0001D2 41                    8791 	.db #0x41	; 65	'A'
      0001D3 41                    8792 	.db #0x41	; 65	'A'
      0001D4 41                    8793 	.db #0x41	; 65	'A'
      0001D5 7F                    8794 	.db #0x7f	; 127
      0001D6 04                    8795 	.db #0x04	; 4
      0001D7 02                    8796 	.db #0x02	; 2
      0001D8 01                    8797 	.db #0x01	; 1
      0001D9 02                    8798 	.db #0x02	; 2
      0001DA 04                    8799 	.db #0x04	; 4
      0001DB 40                    8800 	.db #0x40	; 64
      0001DC 40                    8801 	.db #0x40	; 64
      0001DD 40                    8802 	.db #0x40	; 64
      0001DE 40                    8803 	.db #0x40	; 64
      0001DF 40                    8804 	.db #0x40	; 64
      0001E0 00                    8805 	.db #0x00	; 0
      0001E1 03                    8806 	.db #0x03	; 3
      0001E2 07                    8807 	.db #0x07	; 7
      0001E3 08                    8808 	.db #0x08	; 8
      0001E4 00                    8809 	.db #0x00	; 0
      0001E5 20                    8810 	.db #0x20	; 32
      0001E6 54                    8811 	.db #0x54	; 84	'T'
      0001E7 54                    8812 	.db #0x54	; 84	'T'
      0001E8 78                    8813 	.db #0x78	; 120	'x'
      0001E9 40                    8814 	.db #0x40	; 64
      0001EA 7F                    8815 	.db #0x7f	; 127
      0001EB 28                    8816 	.db #0x28	; 40
      0001EC 44                    8817 	.db #0x44	; 68	'D'
      0001ED 44                    8818 	.db #0x44	; 68	'D'
      0001EE 38                    8819 	.db #0x38	; 56	'8'
      0001EF 38                    8820 	.db #0x38	; 56	'8'
      0001F0 44                    8821 	.db #0x44	; 68	'D'
      0001F1 44                    8822 	.db #0x44	; 68	'D'
      0001F2 44                    8823 	.db #0x44	; 68	'D'
      0001F3 28                    8824 	.db #0x28	; 40
      0001F4 38                    8825 	.db #0x38	; 56	'8'
      0001F5 44                    8826 	.db #0x44	; 68	'D'
      0001F6 44                    8827 	.db #0x44	; 68	'D'
      0001F7 28                    8828 	.db #0x28	; 40
      0001F8 7F                    8829 	.db #0x7f	; 127
      0001F9 38                    8830 	.db #0x38	; 56	'8'
      0001FA 54                    8831 	.db #0x54	; 84	'T'
      0001FB 54                    8832 	.db #0x54	; 84	'T'
      0001FC 54                    8833 	.db #0x54	; 84	'T'
      0001FD 18                    8834 	.db #0x18	; 24
      0001FE 00                    8835 	.db #0x00	; 0
      0001FF 08                    8836 	.db #0x08	; 8
      000200 7E                    8837 	.db #0x7e	; 126
      000201 09                    8838 	.db #0x09	; 9
      000202 02                    8839 	.db #0x02	; 2
      000203 18                    8840 	.db #0x18	; 24
      000204 A4                    8841 	.db #0xa4	; 164
      000205 A4                    8842 	.db #0xa4	; 164
      000206 9C                    8843 	.db #0x9c	; 156
      000207 78                    8844 	.db #0x78	; 120	'x'
      000208 7F                    8845 	.db #0x7f	; 127
      000209 08                    8846 	.db #0x08	; 8
      00020A 04                    8847 	.db #0x04	; 4
      00020B 04                    8848 	.db #0x04	; 4
      00020C 78                    8849 	.db #0x78	; 120	'x'
      00020D 00                    8850 	.db #0x00	; 0
      00020E 44                    8851 	.db #0x44	; 68	'D'
      00020F 7D                    8852 	.db #0x7d	; 125
      000210 40                    8853 	.db #0x40	; 64
      000211 00                    8854 	.db #0x00	; 0
      000212 20                    8855 	.db #0x20	; 32
      000213 40                    8856 	.db #0x40	; 64
      000214 40                    8857 	.db #0x40	; 64
      000215 3D                    8858 	.db #0x3d	; 61
      000216 00                    8859 	.db #0x00	; 0
      000217 7F                    8860 	.db #0x7f	; 127
      000218 10                    8861 	.db #0x10	; 16
      000219 28                    8862 	.db #0x28	; 40
      00021A 44                    8863 	.db #0x44	; 68	'D'
      00021B 00                    8864 	.db #0x00	; 0
      00021C 00                    8865 	.db #0x00	; 0
      00021D 41                    8866 	.db #0x41	; 65	'A'
      00021E 7F                    8867 	.db #0x7f	; 127
      00021F 40                    8868 	.db #0x40	; 64
      000220 00                    8869 	.db #0x00	; 0
      000221 7C                    8870 	.db #0x7c	; 124
      000222 04                    8871 	.db #0x04	; 4
      000223 78                    8872 	.db #0x78	; 120	'x'
      000224 04                    8873 	.db #0x04	; 4
      000225 78                    8874 	.db #0x78	; 120	'x'
      000226 7C                    8875 	.db #0x7c	; 124
      000227 08                    8876 	.db #0x08	; 8
      000228 04                    8877 	.db #0x04	; 4
      000229 04                    8878 	.db #0x04	; 4
      00022A 78                    8879 	.db #0x78	; 120	'x'
      00022B 38                    8880 	.db #0x38	; 56	'8'
      00022C 44                    8881 	.db #0x44	; 68	'D'
      00022D 44                    8882 	.db #0x44	; 68	'D'
      00022E 44                    8883 	.db #0x44	; 68	'D'
      00022F 38                    8884 	.db #0x38	; 56	'8'
      000230 FC                    8885 	.db #0xfc	; 252
      000231 18                    8886 	.db #0x18	; 24
      000232 24                    8887 	.db #0x24	; 36
      000233 24                    8888 	.db #0x24	; 36
      000234 18                    8889 	.db #0x18	; 24
      000235 18                    8890 	.db #0x18	; 24
      000236 24                    8891 	.db #0x24	; 36
      000237 24                    8892 	.db #0x24	; 36
      000238 18                    8893 	.db #0x18	; 24
      000239 FC                    8894 	.db #0xfc	; 252
      00023A 7C                    8895 	.db #0x7c	; 124
      00023B 08                    8896 	.db #0x08	; 8
      00023C 04                    8897 	.db #0x04	; 4
      00023D 04                    8898 	.db #0x04	; 4
      00023E 08                    8899 	.db #0x08	; 8
      00023F 48                    8900 	.db #0x48	; 72	'H'
      000240 54                    8901 	.db #0x54	; 84	'T'
      000241 54                    8902 	.db #0x54	; 84	'T'
      000242 54                    8903 	.db #0x54	; 84	'T'
      000243 24                    8904 	.db #0x24	; 36
      000244 04                    8905 	.db #0x04	; 4
      000245 04                    8906 	.db #0x04	; 4
      000246 3F                    8907 	.db #0x3f	; 63
      000247 44                    8908 	.db #0x44	; 68	'D'
      000248 24                    8909 	.db #0x24	; 36
      000249 3C                    8910 	.db #0x3c	; 60
      00024A 40                    8911 	.db #0x40	; 64
      00024B 40                    8912 	.db #0x40	; 64
      00024C 20                    8913 	.db #0x20	; 32
      00024D 7C                    8914 	.db #0x7c	; 124
      00024E 1C                    8915 	.db #0x1c	; 28
      00024F 20                    8916 	.db #0x20	; 32
      000250 40                    8917 	.db #0x40	; 64
      000251 20                    8918 	.db #0x20	; 32
      000252 1C                    8919 	.db #0x1c	; 28
      000253 3C                    8920 	.db #0x3c	; 60
      000254 40                    8921 	.db #0x40	; 64
      000255 30                    8922 	.db #0x30	; 48	'0'
      000256 40                    8923 	.db #0x40	; 64
      000257 3C                    8924 	.db #0x3c	; 60
      000258 44                    8925 	.db #0x44	; 68	'D'
      000259 28                    8926 	.db #0x28	; 40
      00025A 10                    8927 	.db #0x10	; 16
      00025B 28                    8928 	.db #0x28	; 40
      00025C 44                    8929 	.db #0x44	; 68	'D'
      00025D 4C                    8930 	.db #0x4c	; 76	'L'
      00025E 90                    8931 	.db #0x90	; 144
      00025F 90                    8932 	.db #0x90	; 144
      000260 90                    8933 	.db #0x90	; 144
      000261 7C                    8934 	.db #0x7c	; 124
      000262 44                    8935 	.db #0x44	; 68	'D'
      000263 64                    8936 	.db #0x64	; 100	'd'
      000264 54                    8937 	.db #0x54	; 84	'T'
      000265 4C                    8938 	.db #0x4c	; 76	'L'
      000266 44                    8939 	.db #0x44	; 68	'D'
      000267 00                    8940 	.db #0x00	; 0
      000268 08                    8941 	.db #0x08	; 8
      000269 36                    8942 	.db #0x36	; 54	'6'
      00026A 41                    8943 	.db #0x41	; 65	'A'
      00026B 00                    8944 	.db #0x00	; 0
      00026C 00                    8945 	.db #0x00	; 0
      00026D 00                    8946 	.db #0x00	; 0
      00026E 77                    8947 	.db #0x77	; 119	'w'
      00026F 00                    8948 	.db #0x00	; 0
      000270 00                    8949 	.db #0x00	; 0
      000271 00                    8950 	.db #0x00	; 0
      000272 41                    8951 	.db #0x41	; 65	'A'
      000273 36                    8952 	.db #0x36	; 54	'6'
      000274 08                    8953 	.db #0x08	; 8
      000275 00                    8954 	.db #0x00	; 0
      000276 02                    8955 	.db #0x02	; 2
      000277 01                    8956 	.db #0x01	; 1
      000278 02                    8957 	.db #0x02	; 2
      000279 04                    8958 	.db #0x04	; 4
      00027A 02                    8959 	.db #0x02	; 2
      00027B 3C                    8960 	.db #0x3c	; 60
      00027C 26                    8961 	.db #0x26	; 38
      00027D 23                    8962 	.db #0x23	; 35
      00027E 26                    8963 	.db #0x26	; 38
      00027F 3C                    8964 	.db #0x3c	; 60
      000280 1E                    8965 	.db #0x1e	; 30
      000281 A1                    8966 	.db #0xa1	; 161
      000282 A1                    8967 	.db #0xa1	; 161
      000283 61                    8968 	.db #0x61	; 97	'a'
      000284 12                    8969 	.db #0x12	; 18
      000285 3A                    8970 	.db #0x3a	; 58
      000286 40                    8971 	.db #0x40	; 64
      000287 40                    8972 	.db #0x40	; 64
      000288 20                    8973 	.db #0x20	; 32
      000289 7A                    8974 	.db #0x7a	; 122	'z'
      00028A 38                    8975 	.db #0x38	; 56	'8'
      00028B 54                    8976 	.db #0x54	; 84	'T'
      00028C 54                    8977 	.db #0x54	; 84	'T'
      00028D 55                    8978 	.db #0x55	; 85	'U'
      00028E 59                    8979 	.db #0x59	; 89	'Y'
      00028F 21                    8980 	.db #0x21	; 33
      000290 55                    8981 	.db #0x55	; 85	'U'
      000291 55                    8982 	.db #0x55	; 85	'U'
      000292 79                    8983 	.db #0x79	; 121	'y'
      000293 41                    8984 	.db #0x41	; 65	'A'
      000294 22                    8985 	.db #0x22	; 34
      000295 54                    8986 	.db #0x54	; 84	'T'
      000296 54                    8987 	.db #0x54	; 84	'T'
      000297 78                    8988 	.db #0x78	; 120	'x'
      000298 42                    8989 	.db #0x42	; 66	'B'
      000299 21                    8990 	.db #0x21	; 33
      00029A 55                    8991 	.db #0x55	; 85	'U'
      00029B 54                    8992 	.db #0x54	; 84	'T'
      00029C 78                    8993 	.db #0x78	; 120	'x'
      00029D 40                    8994 	.db #0x40	; 64
      00029E 20                    8995 	.db #0x20	; 32
      00029F 54                    8996 	.db #0x54	; 84	'T'
      0002A0 55                    8997 	.db #0x55	; 85	'U'
      0002A1 79                    8998 	.db #0x79	; 121	'y'
      0002A2 40                    8999 	.db #0x40	; 64
      0002A3 0C                    9000 	.db #0x0c	; 12
      0002A4 1E                    9001 	.db #0x1e	; 30
      0002A5 52                    9002 	.db #0x52	; 82	'R'
      0002A6 72                    9003 	.db #0x72	; 114	'r'
      0002A7 12                    9004 	.db #0x12	; 18
      0002A8 39                    9005 	.db #0x39	; 57	'9'
      0002A9 55                    9006 	.db #0x55	; 85	'U'
      0002AA 55                    9007 	.db #0x55	; 85	'U'
      0002AB 55                    9008 	.db #0x55	; 85	'U'
      0002AC 59                    9009 	.db #0x59	; 89	'Y'
      0002AD 39                    9010 	.db #0x39	; 57	'9'
      0002AE 54                    9011 	.db #0x54	; 84	'T'
      0002AF 54                    9012 	.db #0x54	; 84	'T'
      0002B0 54                    9013 	.db #0x54	; 84	'T'
      0002B1 59                    9014 	.db #0x59	; 89	'Y'
      0002B2 39                    9015 	.db #0x39	; 57	'9'
      0002B3 55                    9016 	.db #0x55	; 85	'U'
      0002B4 54                    9017 	.db #0x54	; 84	'T'
      0002B5 54                    9018 	.db #0x54	; 84	'T'
      0002B6 58                    9019 	.db #0x58	; 88	'X'
      0002B7 00                    9020 	.db #0x00	; 0
      0002B8 00                    9021 	.db #0x00	; 0
      0002B9 45                    9022 	.db #0x45	; 69	'E'
      0002BA 7C                    9023 	.db #0x7c	; 124
      0002BB 41                    9024 	.db #0x41	; 65	'A'
      0002BC 00                    9025 	.db #0x00	; 0
      0002BD 02                    9026 	.db #0x02	; 2
      0002BE 45                    9027 	.db #0x45	; 69	'E'
      0002BF 7D                    9028 	.db #0x7d	; 125
      0002C0 42                    9029 	.db #0x42	; 66	'B'
      0002C1 00                    9030 	.db #0x00	; 0
      0002C2 01                    9031 	.db #0x01	; 1
      0002C3 45                    9032 	.db #0x45	; 69	'E'
      0002C4 7C                    9033 	.db #0x7c	; 124
      0002C5 40                    9034 	.db #0x40	; 64
      0002C6 7D                    9035 	.db #0x7d	; 125
      0002C7 12                    9036 	.db #0x12	; 18
      0002C8 11                    9037 	.db #0x11	; 17
      0002C9 12                    9038 	.db #0x12	; 18
      0002CA 7D                    9039 	.db #0x7d	; 125
      0002CB F0                    9040 	.db #0xf0	; 240
      0002CC 28                    9041 	.db #0x28	; 40
      0002CD 25                    9042 	.db #0x25	; 37
      0002CE 28                    9043 	.db #0x28	; 40
      0002CF F0                    9044 	.db #0xf0	; 240
      0002D0 7C                    9045 	.db #0x7c	; 124
      0002D1 54                    9046 	.db #0x54	; 84	'T'
      0002D2 55                    9047 	.db #0x55	; 85	'U'
      0002D3 45                    9048 	.db #0x45	; 69	'E'
      0002D4 00                    9049 	.db #0x00	; 0
      0002D5 20                    9050 	.db #0x20	; 32
      0002D6 54                    9051 	.db #0x54	; 84	'T'
      0002D7 54                    9052 	.db #0x54	; 84	'T'
      0002D8 7C                    9053 	.db #0x7c	; 124
      0002D9 54                    9054 	.db #0x54	; 84	'T'
      0002DA 7C                    9055 	.db #0x7c	; 124
      0002DB 0A                    9056 	.db #0x0a	; 10
      0002DC 09                    9057 	.db #0x09	; 9
      0002DD 7F                    9058 	.db #0x7f	; 127
      0002DE 49                    9059 	.db #0x49	; 73	'I'
      0002DF 32                    9060 	.db #0x32	; 50	'2'
      0002E0 49                    9061 	.db #0x49	; 73	'I'
      0002E1 49                    9062 	.db #0x49	; 73	'I'
      0002E2 49                    9063 	.db #0x49	; 73	'I'
      0002E3 32                    9064 	.db #0x32	; 50	'2'
      0002E4 3A                    9065 	.db #0x3a	; 58
      0002E5 44                    9066 	.db #0x44	; 68	'D'
      0002E6 44                    9067 	.db #0x44	; 68	'D'
      0002E7 44                    9068 	.db #0x44	; 68	'D'
      0002E8 3A                    9069 	.db #0x3a	; 58
      0002E9 32                    9070 	.db #0x32	; 50	'2'
      0002EA 4A                    9071 	.db #0x4a	; 74	'J'
      0002EB 48                    9072 	.db #0x48	; 72	'H'
      0002EC 48                    9073 	.db #0x48	; 72	'H'
      0002ED 30                    9074 	.db #0x30	; 48	'0'
      0002EE 3A                    9075 	.db #0x3a	; 58
      0002EF 41                    9076 	.db #0x41	; 65	'A'
      0002F0 41                    9077 	.db #0x41	; 65	'A'
      0002F1 21                    9078 	.db #0x21	; 33
      0002F2 7A                    9079 	.db #0x7a	; 122	'z'
      0002F3 3A                    9080 	.db #0x3a	; 58
      0002F4 42                    9081 	.db #0x42	; 66	'B'
      0002F5 40                    9082 	.db #0x40	; 64
      0002F6 20                    9083 	.db #0x20	; 32
      0002F7 78                    9084 	.db #0x78	; 120	'x'
      0002F8 00                    9085 	.db #0x00	; 0
      0002F9 9D                    9086 	.db #0x9d	; 157
      0002FA A0                    9087 	.db #0xa0	; 160
      0002FB A0                    9088 	.db #0xa0	; 160
      0002FC 7D                    9089 	.db #0x7d	; 125
      0002FD 3D                    9090 	.db #0x3d	; 61
      0002FE 42                    9091 	.db #0x42	; 66	'B'
      0002FF 42                    9092 	.db #0x42	; 66	'B'
      000300 42                    9093 	.db #0x42	; 66	'B'
      000301 3D                    9094 	.db #0x3d	; 61
      000302 3D                    9095 	.db #0x3d	; 61
      000303 40                    9096 	.db #0x40	; 64
      000304 40                    9097 	.db #0x40	; 64
      000305 40                    9098 	.db #0x40	; 64
      000306 3D                    9099 	.db #0x3d	; 61
      000307 3C                    9100 	.db #0x3c	; 60
      000308 24                    9101 	.db #0x24	; 36
      000309 FF                    9102 	.db #0xff	; 255
      00030A 24                    9103 	.db #0x24	; 36
      00030B 24                    9104 	.db #0x24	; 36
      00030C 48                    9105 	.db #0x48	; 72	'H'
      00030D 7E                    9106 	.db #0x7e	; 126
      00030E 49                    9107 	.db #0x49	; 73	'I'
      00030F 43                    9108 	.db #0x43	; 67	'C'
      000310 66                    9109 	.db #0x66	; 102	'f'
      000311 2B                    9110 	.db #0x2b	; 43
      000312 2F                    9111 	.db #0x2f	; 47
      000313 FC                    9112 	.db #0xfc	; 252
      000314 2F                    9113 	.db #0x2f	; 47
      000315 2B                    9114 	.db #0x2b	; 43
      000316 FF                    9115 	.db #0xff	; 255
      000317 09                    9116 	.db #0x09	; 9
      000318 29                    9117 	.db #0x29	; 41
      000319 F6                    9118 	.db #0xf6	; 246
      00031A 20                    9119 	.db #0x20	; 32
      00031B C0                    9120 	.db #0xc0	; 192
      00031C 88                    9121 	.db #0x88	; 136
      00031D 7E                    9122 	.db #0x7e	; 126
      00031E 09                    9123 	.db #0x09	; 9
      00031F 03                    9124 	.db #0x03	; 3
      000320 20                    9125 	.db #0x20	; 32
      000321 54                    9126 	.db #0x54	; 84	'T'
      000322 54                    9127 	.db #0x54	; 84	'T'
      000323 79                    9128 	.db #0x79	; 121	'y'
      000324 41                    9129 	.db #0x41	; 65	'A'
      000325 00                    9130 	.db #0x00	; 0
      000326 00                    9131 	.db #0x00	; 0
      000327 44                    9132 	.db #0x44	; 68	'D'
      000328 7D                    9133 	.db #0x7d	; 125
      000329 41                    9134 	.db #0x41	; 65	'A'
      00032A 30                    9135 	.db #0x30	; 48	'0'
      00032B 48                    9136 	.db #0x48	; 72	'H'
      00032C 48                    9137 	.db #0x48	; 72	'H'
      00032D 4A                    9138 	.db #0x4a	; 74	'J'
      00032E 32                    9139 	.db #0x32	; 50	'2'
      00032F 38                    9140 	.db #0x38	; 56	'8'
      000330 40                    9141 	.db #0x40	; 64
      000331 40                    9142 	.db #0x40	; 64
      000332 22                    9143 	.db #0x22	; 34
      000333 7A                    9144 	.db #0x7a	; 122	'z'
      000334 00                    9145 	.db #0x00	; 0
      000335 7A                    9146 	.db #0x7a	; 122	'z'
      000336 0A                    9147 	.db #0x0a	; 10
      000337 0A                    9148 	.db #0x0a	; 10
      000338 72                    9149 	.db #0x72	; 114	'r'
      000339 7D                    9150 	.db #0x7d	; 125
      00033A 0D                    9151 	.db #0x0d	; 13
      00033B 19                    9152 	.db #0x19	; 25
      00033C 31                    9153 	.db #0x31	; 49	'1'
      00033D 7D                    9154 	.db #0x7d	; 125
      00033E 26                    9155 	.db #0x26	; 38
      00033F 29                    9156 	.db #0x29	; 41
      000340 29                    9157 	.db #0x29	; 41
      000341 2F                    9158 	.db #0x2f	; 47
      000342 28                    9159 	.db #0x28	; 40
      000343 26                    9160 	.db #0x26	; 38
      000344 29                    9161 	.db #0x29	; 41
      000345 29                    9162 	.db #0x29	; 41
      000346 29                    9163 	.db #0x29	; 41
      000347 26                    9164 	.db #0x26	; 38
      000348 30                    9165 	.db #0x30	; 48	'0'
      000349 48                    9166 	.db #0x48	; 72	'H'
      00034A 4D                    9167 	.db #0x4d	; 77	'M'
      00034B 40                    9168 	.db #0x40	; 64
      00034C 20                    9169 	.db #0x20	; 32
      00034D 38                    9170 	.db #0x38	; 56	'8'
      00034E 08                    9171 	.db #0x08	; 8
      00034F 08                    9172 	.db #0x08	; 8
      000350 08                    9173 	.db #0x08	; 8
      000351 08                    9174 	.db #0x08	; 8
      000352 08                    9175 	.db #0x08	; 8
      000353 08                    9176 	.db #0x08	; 8
      000354 08                    9177 	.db #0x08	; 8
      000355 08                    9178 	.db #0x08	; 8
      000356 38                    9179 	.db #0x38	; 56	'8'
      000357 2F                    9180 	.db #0x2f	; 47
      000358 10                    9181 	.db #0x10	; 16
      000359 C8                    9182 	.db #0xc8	; 200
      00035A AC                    9183 	.db #0xac	; 172
      00035B BA                    9184 	.db #0xba	; 186
      00035C 2F                    9185 	.db #0x2f	; 47
      00035D 10                    9186 	.db #0x10	; 16
      00035E 28                    9187 	.db #0x28	; 40
      00035F 34                    9188 	.db #0x34	; 52	'4'
      000360 FA                    9189 	.db #0xfa	; 250
      000361 00                    9190 	.db #0x00	; 0
      000362 00                    9191 	.db #0x00	; 0
      000363 7B                    9192 	.db #0x7b	; 123
      000364 00                    9193 	.db #0x00	; 0
      000365 00                    9194 	.db #0x00	; 0
      000366 08                    9195 	.db #0x08	; 8
      000367 14                    9196 	.db #0x14	; 20
      000368 2A                    9197 	.db #0x2a	; 42
      000369 14                    9198 	.db #0x14	; 20
      00036A 22                    9199 	.db #0x22	; 34
      00036B 22                    9200 	.db #0x22	; 34
      00036C 14                    9201 	.db #0x14	; 20
      00036D 2A                    9202 	.db #0x2a	; 42
      00036E 14                    9203 	.db #0x14	; 20
      00036F 08                    9204 	.db #0x08	; 8
      000370 AA                    9205 	.db #0xaa	; 170
      000371 00                    9206 	.db #0x00	; 0
      000372 55                    9207 	.db #0x55	; 85	'U'
      000373 00                    9208 	.db #0x00	; 0
      000374 AA                    9209 	.db #0xaa	; 170
      000375 AA                    9210 	.db #0xaa	; 170
      000376 55                    9211 	.db #0x55	; 85	'U'
      000377 AA                    9212 	.db #0xaa	; 170
      000378 55                    9213 	.db #0x55	; 85	'U'
      000379 AA                    9214 	.db #0xaa	; 170
      00037A 00                    9215 	.db #0x00	; 0
      00037B 00                    9216 	.db #0x00	; 0
      00037C 00                    9217 	.db #0x00	; 0
      00037D FF                    9218 	.db #0xff	; 255
      00037E 00                    9219 	.db #0x00	; 0
      00037F 10                    9220 	.db #0x10	; 16
      000380 10                    9221 	.db #0x10	; 16
      000381 10                    9222 	.db #0x10	; 16
      000382 FF                    9223 	.db #0xff	; 255
      000383 00                    9224 	.db #0x00	; 0
      000384 14                    9225 	.db #0x14	; 20
      000385 14                    9226 	.db #0x14	; 20
      000386 14                    9227 	.db #0x14	; 20
      000387 FF                    9228 	.db #0xff	; 255
      000388 00                    9229 	.db #0x00	; 0
      000389 10                    9230 	.db #0x10	; 16
      00038A 10                    9231 	.db #0x10	; 16
      00038B FF                    9232 	.db #0xff	; 255
      00038C 00                    9233 	.db #0x00	; 0
      00038D FF                    9234 	.db #0xff	; 255
      00038E 10                    9235 	.db #0x10	; 16
      00038F 10                    9236 	.db #0x10	; 16
      000390 F0                    9237 	.db #0xf0	; 240
      000391 10                    9238 	.db #0x10	; 16
      000392 F0                    9239 	.db #0xf0	; 240
      000393 14                    9240 	.db #0x14	; 20
      000394 14                    9241 	.db #0x14	; 20
      000395 14                    9242 	.db #0x14	; 20
      000396 FC                    9243 	.db #0xfc	; 252
      000397 00                    9244 	.db #0x00	; 0
      000398 14                    9245 	.db #0x14	; 20
      000399 14                    9246 	.db #0x14	; 20
      00039A F7                    9247 	.db #0xf7	; 247
      00039B 00                    9248 	.db #0x00	; 0
      00039C FF                    9249 	.db #0xff	; 255
      00039D 00                    9250 	.db #0x00	; 0
      00039E 00                    9251 	.db #0x00	; 0
      00039F FF                    9252 	.db #0xff	; 255
      0003A0 00                    9253 	.db #0x00	; 0
      0003A1 FF                    9254 	.db #0xff	; 255
      0003A2 14                    9255 	.db #0x14	; 20
      0003A3 14                    9256 	.db #0x14	; 20
      0003A4 F4                    9257 	.db #0xf4	; 244
      0003A5 04                    9258 	.db #0x04	; 4
      0003A6 FC                    9259 	.db #0xfc	; 252
      0003A7 14                    9260 	.db #0x14	; 20
      0003A8 14                    9261 	.db #0x14	; 20
      0003A9 17                    9262 	.db #0x17	; 23
      0003AA 10                    9263 	.db #0x10	; 16
      0003AB 1F                    9264 	.db #0x1f	; 31
      0003AC 10                    9265 	.db #0x10	; 16
      0003AD 10                    9266 	.db #0x10	; 16
      0003AE 1F                    9267 	.db #0x1f	; 31
      0003AF 10                    9268 	.db #0x10	; 16
      0003B0 1F                    9269 	.db #0x1f	; 31
      0003B1 14                    9270 	.db #0x14	; 20
      0003B2 14                    9271 	.db #0x14	; 20
      0003B3 14                    9272 	.db #0x14	; 20
      0003B4 1F                    9273 	.db #0x1f	; 31
      0003B5 00                    9274 	.db #0x00	; 0
      0003B6 10                    9275 	.db #0x10	; 16
      0003B7 10                    9276 	.db #0x10	; 16
      0003B8 10                    9277 	.db #0x10	; 16
      0003B9 F0                    9278 	.db #0xf0	; 240
      0003BA 00                    9279 	.db #0x00	; 0
      0003BB 00                    9280 	.db #0x00	; 0
      0003BC 00                    9281 	.db #0x00	; 0
      0003BD 00                    9282 	.db #0x00	; 0
      0003BE 1F                    9283 	.db #0x1f	; 31
      0003BF 10                    9284 	.db #0x10	; 16
      0003C0 10                    9285 	.db #0x10	; 16
      0003C1 10                    9286 	.db #0x10	; 16
      0003C2 10                    9287 	.db #0x10	; 16
      0003C3 1F                    9288 	.db #0x1f	; 31
      0003C4 10                    9289 	.db #0x10	; 16
      0003C5 10                    9290 	.db #0x10	; 16
      0003C6 10                    9291 	.db #0x10	; 16
      0003C7 10                    9292 	.db #0x10	; 16
      0003C8 F0                    9293 	.db #0xf0	; 240
      0003C9 10                    9294 	.db #0x10	; 16
      0003CA 00                    9295 	.db #0x00	; 0
      0003CB 00                    9296 	.db #0x00	; 0
      0003CC 00                    9297 	.db #0x00	; 0
      0003CD FF                    9298 	.db #0xff	; 255
      0003CE 10                    9299 	.db #0x10	; 16
      0003CF 10                    9300 	.db #0x10	; 16
      0003D0 10                    9301 	.db #0x10	; 16
      0003D1 10                    9302 	.db #0x10	; 16
      0003D2 10                    9303 	.db #0x10	; 16
      0003D3 10                    9304 	.db #0x10	; 16
      0003D4 10                    9305 	.db #0x10	; 16
      0003D5 10                    9306 	.db #0x10	; 16
      0003D6 10                    9307 	.db #0x10	; 16
      0003D7 FF                    9308 	.db #0xff	; 255
      0003D8 10                    9309 	.db #0x10	; 16
      0003D9 00                    9310 	.db #0x00	; 0
      0003DA 00                    9311 	.db #0x00	; 0
      0003DB 00                    9312 	.db #0x00	; 0
      0003DC FF                    9313 	.db #0xff	; 255
      0003DD 14                    9314 	.db #0x14	; 20
      0003DE 00                    9315 	.db #0x00	; 0
      0003DF 00                    9316 	.db #0x00	; 0
      0003E0 FF                    9317 	.db #0xff	; 255
      0003E1 00                    9318 	.db #0x00	; 0
      0003E2 FF                    9319 	.db #0xff	; 255
      0003E3 00                    9320 	.db #0x00	; 0
      0003E4 00                    9321 	.db #0x00	; 0
      0003E5 1F                    9322 	.db #0x1f	; 31
      0003E6 10                    9323 	.db #0x10	; 16
      0003E7 17                    9324 	.db #0x17	; 23
      0003E8 00                    9325 	.db #0x00	; 0
      0003E9 00                    9326 	.db #0x00	; 0
      0003EA FC                    9327 	.db #0xfc	; 252
      0003EB 04                    9328 	.db #0x04	; 4
      0003EC F4                    9329 	.db #0xf4	; 244
      0003ED 14                    9330 	.db #0x14	; 20
      0003EE 14                    9331 	.db #0x14	; 20
      0003EF 17                    9332 	.db #0x17	; 23
      0003F0 10                    9333 	.db #0x10	; 16
      0003F1 17                    9334 	.db #0x17	; 23
      0003F2 14                    9335 	.db #0x14	; 20
      0003F3 14                    9336 	.db #0x14	; 20
      0003F4 F4                    9337 	.db #0xf4	; 244
      0003F5 04                    9338 	.db #0x04	; 4
      0003F6 F4                    9339 	.db #0xf4	; 244
      0003F7 00                    9340 	.db #0x00	; 0
      0003F8 00                    9341 	.db #0x00	; 0
      0003F9 FF                    9342 	.db #0xff	; 255
      0003FA 00                    9343 	.db #0x00	; 0
      0003FB F7                    9344 	.db #0xf7	; 247
      0003FC 14                    9345 	.db #0x14	; 20
      0003FD 14                    9346 	.db #0x14	; 20
      0003FE 14                    9347 	.db #0x14	; 20
      0003FF 14                    9348 	.db #0x14	; 20
      000400 14                    9349 	.db #0x14	; 20
      000401 14                    9350 	.db #0x14	; 20
      000402 14                    9351 	.db #0x14	; 20
      000403 F7                    9352 	.db #0xf7	; 247
      000404 00                    9353 	.db #0x00	; 0
      000405 F7                    9354 	.db #0xf7	; 247
      000406 14                    9355 	.db #0x14	; 20
      000407 14                    9356 	.db #0x14	; 20
      000408 14                    9357 	.db #0x14	; 20
      000409 17                    9358 	.db #0x17	; 23
      00040A 14                    9359 	.db #0x14	; 20
      00040B 10                    9360 	.db #0x10	; 16
      00040C 10                    9361 	.db #0x10	; 16
      00040D 1F                    9362 	.db #0x1f	; 31
      00040E 10                    9363 	.db #0x10	; 16
      00040F 1F                    9364 	.db #0x1f	; 31
      000410 14                    9365 	.db #0x14	; 20
      000411 14                    9366 	.db #0x14	; 20
      000412 14                    9367 	.db #0x14	; 20
      000413 F4                    9368 	.db #0xf4	; 244
      000414 14                    9369 	.db #0x14	; 20
      000415 10                    9370 	.db #0x10	; 16
      000416 10                    9371 	.db #0x10	; 16
      000417 F0                    9372 	.db #0xf0	; 240
      000418 10                    9373 	.db #0x10	; 16
      000419 F0                    9374 	.db #0xf0	; 240
      00041A 00                    9375 	.db #0x00	; 0
      00041B 00                    9376 	.db #0x00	; 0
      00041C 1F                    9377 	.db #0x1f	; 31
      00041D 10                    9378 	.db #0x10	; 16
      00041E 1F                    9379 	.db #0x1f	; 31
      00041F 00                    9380 	.db #0x00	; 0
      000420 00                    9381 	.db #0x00	; 0
      000421 00                    9382 	.db #0x00	; 0
      000422 1F                    9383 	.db #0x1f	; 31
      000423 14                    9384 	.db #0x14	; 20
      000424 00                    9385 	.db #0x00	; 0
      000425 00                    9386 	.db #0x00	; 0
      000426 00                    9387 	.db #0x00	; 0
      000427 FC                    9388 	.db #0xfc	; 252
      000428 14                    9389 	.db #0x14	; 20
      000429 00                    9390 	.db #0x00	; 0
      00042A 00                    9391 	.db #0x00	; 0
      00042B F0                    9392 	.db #0xf0	; 240
      00042C 10                    9393 	.db #0x10	; 16
      00042D F0                    9394 	.db #0xf0	; 240
      00042E 10                    9395 	.db #0x10	; 16
      00042F 10                    9396 	.db #0x10	; 16
      000430 FF                    9397 	.db #0xff	; 255
      000431 10                    9398 	.db #0x10	; 16
      000432 FF                    9399 	.db #0xff	; 255
      000433 14                    9400 	.db #0x14	; 20
      000434 14                    9401 	.db #0x14	; 20
      000435 14                    9402 	.db #0x14	; 20
      000436 FF                    9403 	.db #0xff	; 255
      000437 14                    9404 	.db #0x14	; 20
      000438 10                    9405 	.db #0x10	; 16
      000439 10                    9406 	.db #0x10	; 16
      00043A 10                    9407 	.db #0x10	; 16
      00043B 1F                    9408 	.db #0x1f	; 31
      00043C 00                    9409 	.db #0x00	; 0
      00043D 00                    9410 	.db #0x00	; 0
      00043E 00                    9411 	.db #0x00	; 0
      00043F 00                    9412 	.db #0x00	; 0
      000440 F0                    9413 	.db #0xf0	; 240
      000441 10                    9414 	.db #0x10	; 16
      000442 FF                    9415 	.db #0xff	; 255
      000443 FF                    9416 	.db #0xff	; 255
      000444 FF                    9417 	.db #0xff	; 255
      000445 FF                    9418 	.db #0xff	; 255
      000446 FF                    9419 	.db #0xff	; 255
      000447 F0                    9420 	.db #0xf0	; 240
      000448 F0                    9421 	.db #0xf0	; 240
      000449 F0                    9422 	.db #0xf0	; 240
      00044A F0                    9423 	.db #0xf0	; 240
      00044B F0                    9424 	.db #0xf0	; 240
      00044C FF                    9425 	.db #0xff	; 255
      00044D FF                    9426 	.db #0xff	; 255
      00044E FF                    9427 	.db #0xff	; 255
      00044F 00                    9428 	.db #0x00	; 0
      000450 00                    9429 	.db #0x00	; 0
      000451 00                    9430 	.db #0x00	; 0
      000452 00                    9431 	.db #0x00	; 0
      000453 00                    9432 	.db #0x00	; 0
      000454 FF                    9433 	.db #0xff	; 255
      000455 FF                    9434 	.db #0xff	; 255
      000456 0F                    9435 	.db #0x0f	; 15
      000457 0F                    9436 	.db #0x0f	; 15
      000458 0F                    9437 	.db #0x0f	; 15
      000459 0F                    9438 	.db #0x0f	; 15
      00045A 0F                    9439 	.db #0x0f	; 15
      00045B 38                    9440 	.db #0x38	; 56	'8'
      00045C 44                    9441 	.db #0x44	; 68	'D'
      00045D 44                    9442 	.db #0x44	; 68	'D'
      00045E 38                    9443 	.db #0x38	; 56	'8'
      00045F 44                    9444 	.db #0x44	; 68	'D'
      000460 FC                    9445 	.db #0xfc	; 252
      000461 4A                    9446 	.db #0x4a	; 74	'J'
      000462 4A                    9447 	.db #0x4a	; 74	'J'
      000463 4A                    9448 	.db #0x4a	; 74	'J'
      000464 34                    9449 	.db #0x34	; 52	'4'
      000465 7E                    9450 	.db #0x7e	; 126
      000466 02                    9451 	.db #0x02	; 2
      000467 02                    9452 	.db #0x02	; 2
      000468 06                    9453 	.db #0x06	; 6
      000469 06                    9454 	.db #0x06	; 6
      00046A 02                    9455 	.db #0x02	; 2
      00046B 7E                    9456 	.db #0x7e	; 126
      00046C 02                    9457 	.db #0x02	; 2
      00046D 7E                    9458 	.db #0x7e	; 126
      00046E 02                    9459 	.db #0x02	; 2
      00046F 63                    9460 	.db #0x63	; 99	'c'
      000470 55                    9461 	.db #0x55	; 85	'U'
      000471 49                    9462 	.db #0x49	; 73	'I'
      000472 41                    9463 	.db #0x41	; 65	'A'
      000473 63                    9464 	.db #0x63	; 99	'c'
      000474 38                    9465 	.db #0x38	; 56	'8'
      000475 44                    9466 	.db #0x44	; 68	'D'
      000476 44                    9467 	.db #0x44	; 68	'D'
      000477 3C                    9468 	.db #0x3c	; 60
      000478 04                    9469 	.db #0x04	; 4
      000479 40                    9470 	.db #0x40	; 64
      00047A 7E                    9471 	.db #0x7e	; 126
      00047B 20                    9472 	.db #0x20	; 32
      00047C 1E                    9473 	.db #0x1e	; 30
      00047D 20                    9474 	.db #0x20	; 32
      00047E 06                    9475 	.db #0x06	; 6
      00047F 02                    9476 	.db #0x02	; 2
      000480 7E                    9477 	.db #0x7e	; 126
      000481 02                    9478 	.db #0x02	; 2
      000482 02                    9479 	.db #0x02	; 2
      000483 99                    9480 	.db #0x99	; 153
      000484 A5                    9481 	.db #0xa5	; 165
      000485 E7                    9482 	.db #0xe7	; 231
      000486 A5                    9483 	.db #0xa5	; 165
      000487 99                    9484 	.db #0x99	; 153
      000488 1C                    9485 	.db #0x1c	; 28
      000489 2A                    9486 	.db #0x2a	; 42
      00048A 49                    9487 	.db #0x49	; 73	'I'
      00048B 2A                    9488 	.db #0x2a	; 42
      00048C 1C                    9489 	.db #0x1c	; 28
      00048D 4C                    9490 	.db #0x4c	; 76	'L'
      00048E 72                    9491 	.db #0x72	; 114	'r'
      00048F 01                    9492 	.db #0x01	; 1
      000490 72                    9493 	.db #0x72	; 114	'r'
      000491 4C                    9494 	.db #0x4c	; 76	'L'
      000492 30                    9495 	.db #0x30	; 48	'0'
      000493 4A                    9496 	.db #0x4a	; 74	'J'
      000494 4D                    9497 	.db #0x4d	; 77	'M'
      000495 4D                    9498 	.db #0x4d	; 77	'M'
      000496 30                    9499 	.db #0x30	; 48	'0'
      000497 30                    9500 	.db #0x30	; 48	'0'
      000498 48                    9501 	.db #0x48	; 72	'H'
      000499 78                    9502 	.db #0x78	; 120	'x'
      00049A 48                    9503 	.db #0x48	; 72	'H'
      00049B 30                    9504 	.db #0x30	; 48	'0'
      00049C BC                    9505 	.db #0xbc	; 188
      00049D 62                    9506 	.db #0x62	; 98	'b'
      00049E 5A                    9507 	.db #0x5a	; 90	'Z'
      00049F 46                    9508 	.db #0x46	; 70	'F'
      0004A0 3D                    9509 	.db #0x3d	; 61
      0004A1 3E                    9510 	.db #0x3e	; 62
      0004A2 49                    9511 	.db #0x49	; 73	'I'
      0004A3 49                    9512 	.db #0x49	; 73	'I'
      0004A4 49                    9513 	.db #0x49	; 73	'I'
      0004A5 00                    9514 	.db #0x00	; 0
      0004A6 7E                    9515 	.db #0x7e	; 126
      0004A7 01                    9516 	.db #0x01	; 1
      0004A8 01                    9517 	.db #0x01	; 1
      0004A9 01                    9518 	.db #0x01	; 1
      0004AA 7E                    9519 	.db #0x7e	; 126
      0004AB 2A                    9520 	.db #0x2a	; 42
      0004AC 2A                    9521 	.db #0x2a	; 42
      0004AD 2A                    9522 	.db #0x2a	; 42
      0004AE 2A                    9523 	.db #0x2a	; 42
      0004AF 2A                    9524 	.db #0x2a	; 42
      0004B0 44                    9525 	.db #0x44	; 68	'D'
      0004B1 44                    9526 	.db #0x44	; 68	'D'
      0004B2 5F                    9527 	.db #0x5f	; 95
      0004B3 44                    9528 	.db #0x44	; 68	'D'
      0004B4 44                    9529 	.db #0x44	; 68	'D'
      0004B5 40                    9530 	.db #0x40	; 64
      0004B6 51                    9531 	.db #0x51	; 81	'Q'
      0004B7 4A                    9532 	.db #0x4a	; 74	'J'
      0004B8 44                    9533 	.db #0x44	; 68	'D'
      0004B9 40                    9534 	.db #0x40	; 64
      0004BA 40                    9535 	.db #0x40	; 64
      0004BB 44                    9536 	.db #0x44	; 68	'D'
      0004BC 4A                    9537 	.db #0x4a	; 74	'J'
      0004BD 51                    9538 	.db #0x51	; 81	'Q'
      0004BE 40                    9539 	.db #0x40	; 64
      0004BF 00                    9540 	.db #0x00	; 0
      0004C0 00                    9541 	.db #0x00	; 0
      0004C1 FF                    9542 	.db #0xff	; 255
      0004C2 01                    9543 	.db #0x01	; 1
      0004C3 03                    9544 	.db #0x03	; 3
      0004C4 E0                    9545 	.db #0xe0	; 224
      0004C5 80                    9546 	.db #0x80	; 128
      0004C6 FF                    9547 	.db #0xff	; 255
      0004C7 00                    9548 	.db #0x00	; 0
      0004C8 00                    9549 	.db #0x00	; 0
      0004C9 08                    9550 	.db #0x08	; 8
      0004CA 08                    9551 	.db #0x08	; 8
      0004CB 6B                    9552 	.db #0x6b	; 107	'k'
      0004CC 6B                    9553 	.db #0x6b	; 107	'k'
      0004CD 08                    9554 	.db #0x08	; 8
      0004CE 36                    9555 	.db #0x36	; 54	'6'
      0004CF 12                    9556 	.db #0x12	; 18
      0004D0 36                    9557 	.db #0x36	; 54	'6'
      0004D1 24                    9558 	.db #0x24	; 36
      0004D2 36                    9559 	.db #0x36	; 54	'6'
      0004D3 06                    9560 	.db #0x06	; 6
      0004D4 0F                    9561 	.db #0x0f	; 15
      0004D5 09                    9562 	.db #0x09	; 9
      0004D6 0F                    9563 	.db #0x0f	; 15
      0004D7 06                    9564 	.db #0x06	; 6
      0004D8 00                    9565 	.db #0x00	; 0
      0004D9 00                    9566 	.db #0x00	; 0
      0004DA 18                    9567 	.db #0x18	; 24
      0004DB 18                    9568 	.db #0x18	; 24
      0004DC 00                    9569 	.db #0x00	; 0
      0004DD 00                    9570 	.db #0x00	; 0
      0004DE 00                    9571 	.db #0x00	; 0
      0004DF 10                    9572 	.db #0x10	; 16
      0004E0 10                    9573 	.db #0x10	; 16
      0004E1 00                    9574 	.db #0x00	; 0
      0004E2 30                    9575 	.db #0x30	; 48	'0'
      0004E3 40                    9576 	.db #0x40	; 64
      0004E4 FF                    9577 	.db #0xff	; 255
      0004E5 01                    9578 	.db #0x01	; 1
      0004E6 01                    9579 	.db #0x01	; 1
      0004E7 00                    9580 	.db #0x00	; 0
      0004E8 1F                    9581 	.db #0x1f	; 31
      0004E9 01                    9582 	.db #0x01	; 1
      0004EA 01                    9583 	.db #0x01	; 1
      0004EB 1E                    9584 	.db #0x1e	; 30
      0004EC 00                    9585 	.db #0x00	; 0
      0004ED 19                    9586 	.db #0x19	; 25
      0004EE 1D                    9587 	.db #0x1d	; 29
      0004EF 17                    9588 	.db #0x17	; 23
      0004F0 12                    9589 	.db #0x12	; 18
      0004F1 00                    9590 	.db #0x00	; 0
      0004F2 3C                    9591 	.db #0x3c	; 60
      0004F3 3C                    9592 	.db #0x3c	; 60
      0004F4 3C                    9593 	.db #0x3c	; 60
      0004F5 3C                    9594 	.db #0x3c	; 60
      0004F6 00                    9595 	.db #0x00	; 0
      0004F7 00                    9596 	.db #0x00	; 0
      0004F8 00                    9597 	.db #0x00	; 0
      0004F9 00                    9598 	.db #0x00	; 0
      0004FA 00                    9599 	.db #0x00	; 0
      0004FB                       9600 _keypad:
      0004FB 31                    9601 	.db #0x31	; 49	'1'
      0004FC 34                    9602 	.db #0x34	; 52	'4'
      0004FD 37                    9603 	.db #0x37	; 55	'7'
      0004FE 45                    9604 	.db #0x45	; 69	'E'
      0004FF 32                    9605 	.db #0x32	; 50	'2'
      000500 35                    9606 	.db #0x35	; 53	'5'
      000501 38                    9607 	.db #0x38	; 56	'8'
      000502 30                    9608 	.db #0x30	; 48	'0'
      000503 33                    9609 	.db #0x33	; 51	'3'
      000504 36                    9610 	.db #0x36	; 54	'6'
      000505 39                    9611 	.db #0x39	; 57	'9'
      000506 46                    9612 	.db #0x46	; 70	'F'
      000507 41                    9613 	.db #0x41	; 65	'A'
      000508 42                    9614 	.db #0x42	; 66	'B'
      000509 43                    9615 	.db #0x43	; 67	'C'
      00050A 44                    9616 	.db #0x44	; 68	'D'
                                   9617 	.area CONST   (CODE)
      00050B                       9618 ___str_0:
      00050B 50 61 72 69 74 79     9619 	.ascii "Parity"
      000511 0A                    9620 	.db 0x0a
      000512 45 72 72 6F 72 2E     9621 	.ascii "Error."
      000518 00                    9622 	.db 0x00
                                   9623 	.area CSEG    (CODE)
                                   9624 	.area CONST   (CODE)
      000519                       9625 ___str_1:
      000519 55 41 52 54 20 64 61  9626 	.ascii "UART data"
             74 61
      000522 0A                    9627 	.db 0x0a
      000523 72 65 63 65 69 76 65  9628 	.ascii "received."
             64 2E
      00052C 0A                    9629 	.db 0x0a
      00052D 0A                    9630 	.db 0x0a
      00052E 20 3E 3E 20           9631 	.ascii " >> "
      000532 00                    9632 	.db 0x00
                                   9633 	.area CSEG    (CODE)
                                   9634 	.area CONST   (CODE)
      000533                       9635 ___str_2:
      000533 39                    9636 	.ascii "9"
      000534 0A                    9637 	.db 0x0a
      000535 00                    9638 	.db 0x00
                                   9639 	.area CSEG    (CODE)
                                   9640 	.area CONST   (CODE)
      000536                       9641 ___str_3:
      000536 3A                    9642 	.ascii ":"
      000537 00                    9643 	.db 0x00
                                   9644 	.area CSEG    (CODE)
                                   9645 	.area CONST   (CODE)
      000538                       9646 ___str_4:
      000538 30 78                 9647 	.ascii "0x"
      00053A 00                    9648 	.db 0x00
                                   9649 	.area CSEG    (CODE)
                                   9650 	.area CONST   (CODE)
      00053B                       9651 ___str_5:
      00053B 0A                    9652 	.db 0x0a
      00053C 20 20 20 49 6E 76 61  9653 	.ascii "   Invalid"
             6C 69 64
      000546 0A                    9654 	.db 0x0a
      000547 0A                    9655 	.db 0x0a
      000548 00                    9656 	.db 0x00
                                   9657 	.area CSEG    (CODE)
                                   9658 	.area CONST   (CODE)
      000549                       9659 ___str_6:
      000549 20 20 20 20 49 6E 70  9660 	.ascii "    Input"
             75 74
      000552 00                    9661 	.db 0x00
                                   9662 	.area CSEG    (CODE)
                                   9663 	.area CONST   (CODE)
      000553                       9664 ___str_7:
      000553 0A                    9665 	.db 0x0a
      000554 53 65 6C 65 63 74 20  9666 	.ascii "Select Data"
             44 61 74 61
      00055F 0A                    9667 	.db 0x0a
      000560 54 79 70 65 3A        9668 	.ascii "Type:"
      000565 0A                    9669 	.db 0x0a
      000566 0A                    9670 	.db 0x0a
      000567 00                    9671 	.db 0x00
                                   9672 	.area CSEG    (CODE)
                                   9673 	.area CONST   (CODE)
      000568                       9674 ___str_8:
      000568 28 31 29 20 42 79 74  9675 	.ascii "(1) Byte"
             65
      000570 0A                    9676 	.db 0x0a
      000571 00                    9677 	.db 0x00
                                   9678 	.area CSEG    (CODE)
                                   9679 	.area CONST   (CODE)
      000572                       9680 ___str_9:
      000572 28 32 29 20 57 6F 72  9681 	.ascii "(2) Word"
             64
      00057A 0A                    9682 	.db 0x0a
      00057B 00                    9683 	.db 0x00
                                   9684 	.area CSEG    (CODE)
                                   9685 	.area CONST   (CODE)
      00057C                       9686 ___str_10:
      00057C 28 33 29 20 44 6F 75  9687 	.ascii "(3) Double"
             62 6C 65
      000586 0A                    9688 	.db 0x0a
      000587 20 20 20 20 57 6F 72  9689 	.ascii "    Word"
             64
      00058F 0A                    9690 	.db 0x0a
      000590 0A                    9691 	.db 0x0a
      000591 20 20 5F              9692 	.ascii "  _"
      000594 00                    9693 	.db 0x00
                                   9694 	.area CSEG    (CODE)
                                   9695 	.area CONST   (CODE)
      000595                       9696 ___str_11:
      000595 0A                    9697 	.db 0x0a
      000596 45 6E 74 65 72 20 44  9698 	.ascii "Enter Data"
             61 74 61
      0005A0 0A                    9699 	.db 0x0a
      0005A1 53 69 7A 65 3A        9700 	.ascii "Size:"
      0005A6 0A                    9701 	.db 0x0a
      0005A7 0A                    9702 	.db 0x0a
      0005A8 20 20 30 78 5F 5F 5F  9703 	.ascii "  0x____"
             5F
      0005B0 00                    9704 	.db 0x00
                                   9705 	.area CSEG    (CODE)
                                   9706 	.area CONST   (CODE)
      0005B1                       9707 ___str_12:
      0005B1 0A                    9708 	.db 0x0a
      0005B2 57 72 69 74 69 6E 67  9709 	.ascii "Writing 0x55"
             20 30 78 35 35
      0005BE 0A                    9710 	.db 0x0a
      0005BF 74 6F 20 61 6C 6C     9711 	.ascii "to all"
      0005C5 0A                    9712 	.db 0x0a
      0005C6 65 78 74 65 72 6E 61  9713 	.ascii "external RAM"
             6C 20 52 41 4D
      0005D2 0A                    9714 	.db 0x0a
      0005D3 6C 6F 63 61 74 69 6F  9715 	.ascii "locations."
             6E 73 2E
      0005DD 0A                    9716 	.db 0x0a
      0005DE 0A                    9717 	.db 0x0a
      0005DF 00                    9718 	.db 0x00
                                   9719 	.area CSEG    (CODE)
                                   9720 	.area CONST   (CODE)
      0005E0                       9721 ___str_13:
      0005E0 57 72 69 74 65        9722 	.ascii "Write"
      0005E5 0A                    9723 	.db 0x0a
      0005E6 63 6F 6D 70 6C 65 74  9724 	.ascii "complete."
             65 2E
      0005EF 0A                    9725 	.db 0x0a
      0005F0 00                    9726 	.db 0x00
                                   9727 	.area CSEG    (CODE)
                                   9728 	.area CONST   (CODE)
      0005F1                       9729 ___str_14:
      0005F1 0A                    9730 	.db 0x0a
      0005F2 56 65 72 69 66 79 69  9731 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0005FF 0A                    9732 	.db 0x0a
      000600 52 41 4D 20 6C 6F 63  9733 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      00060D 0A                    9734 	.db 0x0a
      00060E 65 71 75 61 6C 20 30  9735 	.ascii "equal 0x55."
             78 35 35 2E
      000619 0A                    9736 	.db 0x0a
      00061A 0A                    9737 	.db 0x0a
      00061B 00                    9738 	.db 0x00
                                   9739 	.area CSEG    (CODE)
                                   9740 	.area CONST   (CODE)
      00061C                       9741 ___str_15:
      00061C 31 73 74 20 52 41 4D  9742 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      000629 0A                    9743 	.db 0x0a
      00062A 75 6E 73 75 63 63 65  9744 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      000637 0A                    9745 	.db 0x0a
      000638 0A                    9746 	.db 0x0a
      000639 00                    9747 	.db 0x00
                                   9748 	.area CSEG    (CODE)
                                   9749 	.area CONST   (CODE)
      00063A                       9750 ___str_16:
      00063A 45 72 72 6F 72 20 61  9751 	.ascii "Error at:"
             74 3A
      000643 0A                    9752 	.db 0x0a
      000644 00                    9753 	.db 0x00
                                   9754 	.area CSEG    (CODE)
                                   9755 	.area CONST   (CODE)
      000645                       9756 ___str_17:
      000645 3A 20 30 78           9757 	.ascii ": 0x"
      000649 00                    9758 	.db 0x00
                                   9759 	.area CSEG    (CODE)
                                   9760 	.area CONST   (CODE)
      00064A                       9761 ___str_18:
      00064A 52 65 74 75 72 6E 69  9762 	.ascii "Returning to"
             6E 67 20 74 6F
      000656 0A                    9763 	.db 0x0a
      000657 6D 61 69 6E 20 6D 65  9764 	.ascii "main menu."
             6E 75 2E
      000661 00                    9765 	.db 0x00
                                   9766 	.area CSEG    (CODE)
                                   9767 	.area CONST   (CODE)
      000662                       9768 ___str_19:
      000662 31 73 74 20 52 41 4D  9769 	.ascii "1st RAM check"
             20 63 68 65 63 6B
      00066F 0A                    9770 	.db 0x0a
      000670 73 75 63 63 65 73 73  9771 	.ascii "successful."
             66 75 6C 2E
      00067B 0A                    9772 	.db 0x0a
      00067C 0A                    9773 	.db 0x0a
      00067D 00                    9774 	.db 0x00
                                   9775 	.area CSEG    (CODE)
                                   9776 	.area CONST   (CODE)
      00067E                       9777 ___str_20:
      00067E 0A                    9778 	.db 0x0a
      00067F 57 72 69 74 69 6E 67  9779 	.ascii "Writing 0xAA"
             20 30 78 41 41
      00068B 0A                    9780 	.db 0x0a
      00068C 74 6F 20 61 6C 6C     9781 	.ascii "to all"
      000692 0A                    9782 	.db 0x0a
      000693 65 78 74 65 72 6E 61  9783 	.ascii "external RAM"
             6C 20 52 41 4D
      00069F 0A                    9784 	.db 0x0a
      0006A0 6C 6F 63 61 74 69 6F  9785 	.ascii "locations."
             6E 73 2E
      0006AA 0A                    9786 	.db 0x0a
      0006AB 0A                    9787 	.db 0x0a
      0006AC 00                    9788 	.db 0x00
                                   9789 	.area CSEG    (CODE)
                                   9790 	.area CONST   (CODE)
      0006AD                       9791 ___str_21:
      0006AD 0A                    9792 	.db 0x0a
      0006AE 56 65 72 69 66 79 69  9793 	.ascii "Verifying all"
             6E 67 20 61 6C 6C
      0006BB 0A                    9794 	.db 0x0a
      0006BC 52 41 4D 20 6C 6F 63  9795 	.ascii "RAM locations"
             61 74 69 6F 6E 73
      0006C9 0A                    9796 	.db 0x0a
      0006CA 65 71 75 61 6C 20 30  9797 	.ascii "equal 0xAA."
             78 41 41 2E
      0006D5 0A                    9798 	.db 0x0a
      0006D6 0A                    9799 	.db 0x0a
      0006D7 00                    9800 	.db 0x00
                                   9801 	.area CSEG    (CODE)
                                   9802 	.area CONST   (CODE)
      0006D8                       9803 ___str_22:
      0006D8 32 6E 64 20 52 41 4D  9804 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      0006E5 0A                    9805 	.db 0x0a
      0006E6 75 6E 73 75 63 63 65  9806 	.ascii "unsuccessful."
             73 73 66 75 6C 2E
      0006F3 0A                    9807 	.db 0x0a
      0006F4 0A                    9808 	.db 0x0a
      0006F5 00                    9809 	.db 0x00
                                   9810 	.area CSEG    (CODE)
                                   9811 	.area CONST   (CODE)
      0006F6                       9812 ___str_23:
      0006F6 32 6E 64 20 52 41 4D  9813 	.ascii "2nd RAM check"
             20 63 68 65 63 6B
      000703 0A                    9814 	.db 0x0a
      000704 73 75 63 63 65 73 73  9815 	.ascii "successful."
             66 75 6C 2E
      00070F 0A                    9816 	.db 0x0a
      000710 0A                    9817 	.db 0x0a
      000711 00                    9818 	.db 0x00
                                   9819 	.area CSEG    (CODE)
                                   9820 	.area CONST   (CODE)
      000712                       9821 ___str_24:
      000712 52 41 4D 20 63 68 65  9822 	.ascii "RAM check"
             63 6B
      00071B 0A                    9823 	.db 0x0a
      00071C 63 6F 6D 70 6C 65 74  9824 	.ascii "complete."
             65 2E
      000725 0A                    9825 	.db 0x0a
      000726 0A                    9826 	.db 0x0a
      000727 00                    9827 	.db 0x00
                                   9828 	.area CSEG    (CODE)
                                   9829 	.area CONST   (CODE)
      000728                       9830 ___str_25:
      000728 0A                    9831 	.db 0x0a
      000729 45 6E 74 65 72 20 73  9832 	.ascii "Enter source"
             6F 75 72 63 65
      000735 0A                    9833 	.db 0x0a
      000736 73 74 61 72 74 69 6E  9834 	.ascii "starting RAM"
             67 20 52 41 4D
      000742 0A                    9835 	.db 0x0a
      000743 61 64 64 72 65 73 73  9836 	.ascii "address:"
             3A
      00074B 0A                    9837 	.db 0x0a
      00074C 0A                    9838 	.db 0x0a
      00074D 0A                    9839 	.db 0x0a
      00074E 20 20 30 78 5F 5F 5F  9840 	.ascii "  0x____"
             5F
      000756 00                    9841 	.db 0x00
                                   9842 	.area CSEG    (CODE)
                                   9843 	.area CONST   (CODE)
      000757                       9844 ___str_26:
      000757 0A                    9845 	.db 0x0a
      000758 45 6E 74 65 72        9846 	.ascii "Enter"
      00075D 0A                    9847 	.db 0x0a
      00075E 64 65 73 74 69 6E 61  9848 	.ascii "destination"
             74 69 6F 6E
      000769 0A                    9849 	.db 0x0a
      00076A 73 74 61 72 74 69 6E  9850 	.ascii "starting RAM"
             67 20 52 41 4D
      000776 0A                    9851 	.db 0x0a
      000777 61 64 64 72 65 73 73  9852 	.ascii "address:"
             3A
      00077F 0A                    9853 	.db 0x0a
      000780 0A                    9854 	.db 0x0a
      000781 0A                    9855 	.db 0x0a
      000782 20 20 30 78 5F 5F 5F  9856 	.ascii "  0x____"
             5F
      00078A 00                    9857 	.db 0x00
                                   9858 	.area CSEG    (CODE)
                                   9859 	.area CONST   (CODE)
      00078B                       9860 ___str_27:
      00078B 0A                    9861 	.db 0x0a
      00078C 4D 6F 76 65 20 63 6F  9862 	.ascii "Move complete."
             6D 70 6C 65 74 65 2E
      00079A 0A                    9863 	.db 0x0a
      00079B 0A                    9864 	.db 0x0a
      00079C 00                    9865 	.db 0x00
                                   9866 	.area CSEG    (CODE)
                                   9867 	.area CONST   (CODE)
      00079D                       9868 ___str_28:
      00079D 0A                    9869 	.db 0x0a
      00079E 45 6E 74 65 72        9870 	.ascii "Enter"
      0007A3 0A                    9871 	.db 0x0a
      0007A4 73 74 61 72 74 69 6E  9872 	.ascii "starting RAM"
             67 20 52 41 4D
      0007B0 0A                    9873 	.db 0x0a
      0007B1 61 64 64 72 65 73 73  9874 	.ascii "address:"
             3A
      0007B9 0A                    9875 	.db 0x0a
      0007BA 0A                    9876 	.db 0x0a
      0007BB 20 20 30 78 5F 5F 5F  9877 	.ascii "  0x____"
             5F
      0007C3 00                    9878 	.db 0x00
                                   9879 	.area CSEG    (CODE)
                                   9880 	.area CONST   (CODE)
      0007C4                       9881 ___str_29:
      0007C4 0A                    9882 	.db 0x0a
      0007C5 45 6E 74 65 72 20 73  9883 	.ascii "Enter search"
             65 61 72 63 68
      0007D1 0A                    9884 	.db 0x0a
      0007D2 76 61 6C 75 65 3A     9885 	.ascii "value:"
      0007D8 0A                    9886 	.db 0x0a
      0007D9 0A                    9887 	.db 0x0a
      0007DA 20 20 30 78 5F 5F     9888 	.ascii "  0x__"
      0007E0 00                    9889 	.db 0x00
                                   9890 	.area CSEG    (CODE)
                                   9891 	.area CONST   (CODE)
      0007E1                       9892 ___str_30:
      0007E1 0A                    9893 	.db 0x0a
      0007E2 30 78                 9894 	.ascii "0x"
      0007E4 00                    9895 	.db 0x00
                                   9896 	.area CSEG    (CODE)
                                   9897 	.area CONST   (CODE)
      0007E5                       9898 ___str_31:
      0007E5 20 66 6F 75 6E 64     9899 	.ascii " found"
      0007EB 0A                    9900 	.db 0x0a
      0007EC 00                    9901 	.db 0x00
                                   9902 	.area CSEG    (CODE)
                                   9903 	.area CONST   (CODE)
      0007ED                       9904 ___str_32:
      0007ED 30 78 31 30 30 30 30  9905 	.ascii "0x10000"
      0007F4 00                    9906 	.db 0x00
                                   9907 	.area CSEG    (CODE)
                                   9908 	.area CONST   (CODE)
      0007F5                       9909 ___str_33:
      0007F5 0A                    9910 	.db 0x0a
      0007F6 74 69 6D 65 73 2E     9911 	.ascii "times."
      0007FC 00                    9912 	.db 0x00
                                   9913 	.area CSEG    (CODE)
                                   9914 	.area CONST   (CODE)
      0007FD                       9915 ___str_34:
      0007FD 20 6E 6F 74           9916 	.ascii " not"
      000801 0A                    9917 	.db 0x0a
      000802 66 6F 75 6E 64 20 69  9918 	.ascii "found in"
             6E
      00080A 0A                    9919 	.db 0x0a
      00080B 65 78 74 65 72 6E 61  9920 	.ascii "external RAM"
             6C 20 52 41 4D
      000817 0A                    9921 	.db 0x0a
      000818 00                    9922 	.db 0x00
                                   9923 	.area CSEG    (CODE)
                                   9924 	.area CONST   (CODE)
      000819                       9925 ___str_35:
      000819 20 2D                 9926 	.ascii " -"
      00081B 0A                    9927 	.db 0x0a
      00081C 00                    9928 	.db 0x00
                                   9929 	.area CSEG    (CODE)
                                   9930 	.area CONST   (CODE)
      00081D                       9931 ___str_36:
      00081D 0A                    9932 	.db 0x0a
      00081E 00                    9933 	.db 0x00
                                   9934 	.area CSEG    (CODE)
                                   9935 	.area CONST   (CODE)
      00081F                       9936 ___str_37:
      00081F 20 20 28 30 29 20 2D  9937 	.ascii "  (0) - Next Page"
             20 4E 65 78 74 20 50
             61 67 65
      000830 0A                    9938 	.db 0x0a
      000831 20 20 28 31 29 20 2D  9939 	.ascii "  (1) - Prev Page"
             20 50 72 65 76 20 50
             61 67 65
      000842 0A                    9940 	.db 0x0a
      000843 20 20 28 45 29 20 2D  9941 	.ascii "  (E) - END"
             20 45 4E 44
      00084E 0A                    9942 	.db 0x0a
      00084F 00                    9943 	.db 0x00
                                   9944 	.area CSEG    (CODE)
                                   9945 	.area CONST   (CODE)
      000850                       9946 ___str_38:
      000850 0A                    9947 	.db 0x0a
      000851 45 6E 64 20 6F 66 20  9948 	.ascii "End of Data."
             44 61 74 61 2E
      00085D 00                    9949 	.db 0x00
                                   9950 	.area CSEG    (CODE)
                                   9951 	.area CONST   (CODE)
      00085E                       9952 ___str_39:
      00085E 45 6E 64 20 6F 66 20  9953 	.ascii "End of Data"
             44 61 74 61
      000869 00                    9954 	.db 0x00
                                   9955 	.area CSEG    (CODE)
                                   9956 	.area CONST   (CODE)
      00086A                       9957 ___str_40:
      00086A 0A                    9958 	.db 0x0a
      00086B 52 65 74 75 72 6E 69  9959 	.ascii "Returning to"
             6E 67 20 74 6F
      000877 0A                    9960 	.db 0x0a
      000878 4D 61 69 6E 20 4D 65  9961 	.ascii "Main Menu."
             6E 75 2E
      000882 00                    9962 	.db 0x00
                                   9963 	.area CSEG    (CODE)
                                   9964 	.area CONST   (CODE)
      000883                       9965 ___str_41:
      000883 0A                    9966 	.db 0x0a
      000884 45 6E 74 65 72 20 73  9967 	.ascii "Enter source"
             6F 75 72 63 65
      000890 0A                    9968 	.db 0x0a
      000891 73 74 61 72 74 69 6E  9969 	.ascii "starting RAM"
             67 20 52 41 4D
      00089D 0A                    9970 	.db 0x0a
      00089E 61 64 64 72 65 73 73  9971 	.ascii "address:"
             3A
      0008A6 0A                    9972 	.db 0x0a
      0008A7 0A                    9973 	.db 0x0a
      0008A8 20 20 30 78 5F 5F 5F  9974 	.ascii "  0x____"
             5F
      0008B0 00                    9975 	.db 0x00
                                   9976 	.area CSEG    (CODE)
                                   9977 	.area CONST   (CODE)
      0008B1                       9978 ___str_42:
      0008B1 0A                    9979 	.db 0x0a
      0008B2 0A                    9980 	.db 0x0a
      0008B3 4E 65 77 20 76 61 6C  9981 	.ascii "New value:"
             75 65 3A
      0008BD 0A                    9982 	.db 0x0a
      0008BE 20 20 30 78 5F 5F     9983 	.ascii "  0x__"
      0008C4 00                    9984 	.db 0x00
                                   9985 	.area CSEG    (CODE)
                                   9986 	.area CONST   (CODE)
      0008C5                       9987 ___str_43:
      0008C5 0A                    9988 	.db 0x0a
      0008C6 0A                    9989 	.db 0x0a
      0008C7 0A                    9990 	.db 0x0a
      0008C8 0A                    9991 	.db 0x0a
      0008C9 28 31 29 20 45 64 69  9992 	.ascii "(1) Edit next"
             74 20 6E 65 78 74
      0008D6 0A                    9993 	.db 0x0a
      0008D7 52 41 4D 20 6C 6F 63  9994 	.ascii "RAM location"
             61 74 69 6F 6E
      0008E3 0A                    9995 	.db 0x0a
      0008E4 0A                    9996 	.db 0x0a
      0008E5 00                    9997 	.db 0x00
                                   9998 	.area CSEG    (CODE)
                                   9999 	.area CONST   (CODE)
      0008E6                      10000 ___str_44:
      0008E6 28 45 29 20 45 6E 64 10001 	.ascii "(E) End"
      0008ED 00                   10002 	.db 0x00
                                  10003 	.area CSEG    (CODE)
                                  10004 	.area CONST   (CODE)
      0008EE                      10005 ___str_45:
      0008EE 0A                   10006 	.db 0x0a
      0008EF 45 6E 64 20 6F 66 20 10007 	.ascii "End of data."
             64 61 74 61 2E
      0008FB 0A                   10008 	.db 0x0a
      0008FC 00                   10009 	.db 0x00
                                  10010 	.area CSEG    (CODE)
                                  10011 	.area CONST   (CODE)
      0008FD                      10012 ___str_46:
      0008FD 0A                   10013 	.db 0x0a
      0008FE 52 65 74 75 72 6E 69 10014 	.ascii "Returning to"
             6E 67 20 74 6F
      00090A 0A                   10015 	.db 0x0a
      00090B 6D 61 69 6E 20 6D 65 10016 	.ascii "main menu."
             6E 75 2E
      000915 00                   10017 	.db 0x00
                                  10018 	.area CSEG    (CODE)
                                  10019 	.area CONST   (CODE)
      000916                      10020 ___str_47:
      000916 20 6E 6F 74          10021 	.ascii " not"
      00091A 0A                   10022 	.db 0x0a
      00091B 66 6F 75 6E 64 20 69 10023 	.ascii "found in"
             6E
      000923 0A                   10024 	.db 0x0a
      000924 61 64 64 72 65 73 73 10025 	.ascii "address range"
             20 72 61 6E 67 65
      000931 0A                   10026 	.db 0x0a
      000932 0A                   10027 	.db 0x0a
      000933 00                   10028 	.db 0x00
                                  10029 	.area CSEG    (CODE)
                                  10030 	.area CONST   (CODE)
      000934                      10031 ___str_48:
      000934 20 66 6F 75 6E 64 20 10032 	.ascii " found at"
             61 74
      00093D 0A                   10033 	.db 0x0a
      00093E 74 68 65 20 66 6F 6C 10034 	.ascii "the following"
             6C 6F 77 69 6E 67
      00094B 0A                   10035 	.db 0x0a
      00094C 61 64 64 72 65 73 73 10036 	.ascii "addresses:"
             65 73 3A
      000956 0A                   10037 	.db 0x0a
      000957 0A                   10038 	.db 0x0a
      000958 00                   10039 	.db 0x00
                                  10040 	.area CSEG    (CODE)
                                  10041 	.area CONST   (CODE)
      000959                      10042 ___str_49:
      000959 45 6E 64 20 6F 66 20 10043 	.ascii "End of Data."
             44 61 74 61 2E
      000965 00                   10044 	.db 0x00
                                  10045 	.area CSEG    (CODE)
                                  10046 	.area CONST   (CODE)
      000966                      10047 ___str_50:
      000966 0A                   10048 	.db 0x0a
      000967 45 6E 74 65 72       10049 	.ascii "Enter"
      00096C 0A                   10050 	.db 0x0a
      00096D 73 74 61 72 74 69 6E 10051 	.ascii "starting RAM"
             67 20 52 41 4D
      000979 0A                   10052 	.db 0x0a
      00097A 61 64 64 72 65 73 73 10053 	.ascii "address:"
             3A
      000982 0A                   10054 	.db 0x0a
      000983 0A                   10055 	.db 0x0a
      000984 20 20 20 30 78 5F 5F 10056 	.ascii "   0x____"
             5F 5F
      00098D 00                   10057 	.db 0x00
                                  10058 	.area CSEG    (CODE)
                                  10059 	.area CONST   (CODE)
      00098E                      10060 ___str_51:
      00098E 0A                   10061 	.db 0x0a
      00098F 45 6E 74 65 72 20 73 10062 	.ascii "Enter search"
             65 61 72 63 68
      00099B 0A                   10063 	.db 0x0a
      00099C 76 61 6C 75 65 3A    10064 	.ascii "value:"
      0009A2 0A                   10065 	.db 0x0a
      0009A3 0A                   10066 	.db 0x0a
      0009A4 20 20 20 30 78 5F 5F 10067 	.ascii "   0x__"
      0009AB 00                   10068 	.db 0x00
                                  10069 	.area CSEG    (CODE)
                                  10070 	.area CONST   (CODE)
      0009AC                      10071 ___str_52:
      0009AC 0A                   10072 	.db 0x0a
      0009AD 28 31 29 20 31 32 30 10073 	.ascii "(1) 1200"
             30
      0009B5 0A                   10074 	.db 0x0a
      0009B6 00                   10075 	.db 0x00
                                  10076 	.area CSEG    (CODE)
                                  10077 	.area CONST   (CODE)
      0009B7                      10078 ___str_53:
      0009B7 28 32 29 20 32 34 30 10079 	.ascii "(2) 2400"
             30
      0009BF 0A                   10080 	.db 0x0a
      0009C0 00                   10081 	.db 0x00
                                  10082 	.area CSEG    (CODE)
                                  10083 	.area CONST   (CODE)
      0009C1                      10084 ___str_54:
      0009C1 28 33 29 20 34 38 30 10085 	.ascii "(3) 4800"
             30
      0009C9 0A                   10086 	.db 0x0a
      0009CA 00                   10087 	.db 0x00
                                  10088 	.area CSEG    (CODE)
                                  10089 	.area CONST   (CODE)
      0009CB                      10090 ___str_55:
      0009CB 28 34 29 20 39 36 30 10091 	.ascii "(4) 9600"
             30
      0009D3 0A                   10092 	.db 0x0a
      0009D4 00                   10093 	.db 0x00
                                  10094 	.area CSEG    (CODE)
                                  10095 	.area CONST   (CODE)
      0009D5                      10096 ___str_56:
      0009D5 28 35 29 20 31 39 32 10097 	.ascii "(5) 19200"
             30 30
      0009DE 0A                   10098 	.db 0x0a
      0009DF 0A                   10099 	.db 0x0a
      0009E0 00                   10100 	.db 0x00
                                  10101 	.area CSEG    (CODE)
                                  10102 	.area CONST   (CODE)
      0009E1                      10103 ___str_57:
      0009E1 43 75 72 72 65 6E 74 10104 	.ascii "Current:"
             3A
      0009E9 0A                   10105 	.db 0x0a
      0009EA 00                   10106 	.db 0x00
                                  10107 	.area CSEG    (CODE)
                                  10108 	.area CONST   (CODE)
      0009EB                      10109 ___str_58:
      0009EB 31 39 32 30 30       10110 	.ascii "19200"
      0009F0 0A                   10111 	.db 0x0a
      0009F1 00                   10112 	.db 0x00
                                  10113 	.area CSEG    (CODE)
                                  10114 	.area CONST   (CODE)
      0009F2                      10115 ___str_59:
      0009F2 49 6E 76 61 6C 69 64 10116 	.ascii "Invalid"
      0009F9 0A                   10117 	.db 0x0a
      0009FA 00                   10118 	.db 0x00
                                  10119 	.area CSEG    (CODE)
                                  10120 	.area CONST   (CODE)
      0009FB                      10121 ___str_60:
      0009FB 31 32 30 30          10122 	.ascii "1200"
      0009FF 0A                   10123 	.db 0x0a
      000A00 00                   10124 	.db 0x00
                                  10125 	.area CSEG    (CODE)
                                  10126 	.area CONST   (CODE)
      000A01                      10127 ___str_61:
      000A01 32 34 30 30          10128 	.ascii "2400"
      000A05 0A                   10129 	.db 0x0a
      000A06 00                   10130 	.db 0x00
                                  10131 	.area CSEG    (CODE)
                                  10132 	.area CONST   (CODE)
      000A07                      10133 ___str_62:
      000A07 34 38 30 30          10134 	.ascii "4800"
      000A0B 0A                   10135 	.db 0x0a
      000A0C 00                   10136 	.db 0x00
                                  10137 	.area CSEG    (CODE)
                                  10138 	.area CONST   (CODE)
      000A0D                      10139 ___str_63:
      000A0D 39 36 30 30          10140 	.ascii "9600"
      000A11 0A                   10141 	.db 0x0a
      000A12 00                   10142 	.db 0x00
                                  10143 	.area CSEG    (CODE)
                                  10144 	.area CONST   (CODE)
      000A13                      10145 ___str_64:
      000A13 0A                   10146 	.db 0x0a
      000A14 20 20 20 5F          10147 	.ascii "   _"
      000A18 00                   10148 	.db 0x00
                                  10149 	.area CSEG    (CODE)
                                  10150 	.area CONST   (CODE)
      000A19                      10151 ___str_65:
      000A19 31                   10152 	.ascii "1"
      000A1A 0A                   10153 	.db 0x0a
      000A1B 00                   10154 	.db 0x00
                                  10155 	.area CSEG    (CODE)
                                  10156 	.area CONST   (CODE)
      000A1C                      10157 ___str_66:
      000A1C 32                   10158 	.ascii "2"
      000A1D 0A                   10159 	.db 0x0a
      000A1E 00                   10160 	.db 0x00
                                  10161 	.area CSEG    (CODE)
                                  10162 	.area CONST   (CODE)
      000A1F                      10163 ___str_67:
      000A1F 33                   10164 	.ascii "3"
      000A20 0A                   10165 	.db 0x0a
      000A21 00                   10166 	.db 0x00
                                  10167 	.area CSEG    (CODE)
                                  10168 	.area CONST   (CODE)
      000A22                      10169 ___str_68:
      000A22 34                   10170 	.ascii "4"
      000A23 0A                   10171 	.db 0x0a
      000A24 00                   10172 	.db 0x00
                                  10173 	.area CSEG    (CODE)
                                  10174 	.area CONST   (CODE)
      000A25                      10175 ___str_69:
      000A25 35                   10176 	.ascii "5"
      000A26 0A                   10177 	.db 0x0a
      000A27 00                   10178 	.db 0x00
                                  10179 	.area CSEG    (CODE)
                                  10180 	.area CONST   (CODE)
      000A28                      10181 ___str_70:
      000A28 58                   10182 	.ascii "X"
      000A29 0A                   10183 	.db 0x0a
      000A2A 00                   10184 	.db 0x00
                                  10185 	.area CSEG    (CODE)
                                  10186 	.area CONST   (CODE)
      000A2B                      10187 ___str_71:
      000A2B 0A                   10188 	.db 0x0a
      000A2C 44 61 74 61 20 42 69 10189 	.ascii "Data Bits"
             74 73
      000A35 0A                   10190 	.db 0x0a
      000A36 0A                   10191 	.db 0x0a
      000A37 00                   10192 	.db 0x00
                                  10193 	.area CSEG    (CODE)
                                  10194 	.area CONST   (CODE)
      000A38                      10195 ___str_72:
      000A38 28 31 29 20 38       10196 	.ascii "(1) 8"
      000A3D 0A                   10197 	.db 0x0a
      000A3E 00                   10198 	.db 0x00
                                  10199 	.area CSEG    (CODE)
                                  10200 	.area CONST   (CODE)
      000A3F                      10201 ___str_73:
      000A3F 28 32 29 20 39       10202 	.ascii "(2) 9"
      000A44 0A                   10203 	.db 0x0a
      000A45 00                   10204 	.db 0x00
                                  10205 	.area CSEG    (CODE)
                                  10206 	.area CONST   (CODE)
      000A46                      10207 ___str_74:
      000A46 0A                   10208 	.db 0x0a
      000A47 43 75 72 72 65 6E 74 10209 	.ascii "Current: "
             3A 20
      000A50 00                   10210 	.db 0x00
                                  10211 	.area CSEG    (CODE)
                                  10212 	.area CONST   (CODE)
      000A51                      10213 ___str_75:
      000A51 38                   10214 	.ascii "8"
      000A52 0A                   10215 	.db 0x0a
      000A53 00                   10216 	.db 0x00
                                  10217 	.area CSEG    (CODE)
                                  10218 	.area CONST   (CODE)
      000A54                      10219 ___str_76:
      000A54 0A                   10220 	.db 0x0a
      000A55 50 61 72 69 74 79    10221 	.ascii "Parity"
      000A5B 0A                   10222 	.db 0x0a
      000A5C 0A                   10223 	.db 0x0a
      000A5D 00                   10224 	.db 0x00
                                  10225 	.area CSEG    (CODE)
                                  10226 	.area CONST   (CODE)
      000A5E                      10227 ___str_77:
      000A5E 28 31 29 20 45 76 65 10228 	.ascii "(1) Even"
             6E
      000A66 0A                   10229 	.db 0x0a
      000A67 00                   10230 	.db 0x00
                                  10231 	.area CSEG    (CODE)
                                  10232 	.area CONST   (CODE)
      000A68                      10233 ___str_78:
      000A68 28 32 29 20 4F 64 64 10234 	.ascii "(2) Odd"
      000A6F 0A                   10235 	.db 0x0a
      000A70 00                   10236 	.db 0x00
                                  10237 	.area CSEG    (CODE)
                                  10238 	.area CONST   (CODE)
      000A71                      10239 ___str_79:
      000A71 28 33 29 20 4E 6F 6E 10240 	.ascii "(3) None"
             65
      000A79 0A                   10241 	.db 0x0a
      000A7A 00                   10242 	.db 0x00
                                  10243 	.area CSEG    (CODE)
                                  10244 	.area CONST   (CODE)
      000A7B                      10245 ___str_80:
      000A7B 45 76 65 6E          10246 	.ascii "Even"
      000A7F 0A                   10247 	.db 0x0a
      000A80 00                   10248 	.db 0x00
                                  10249 	.area CSEG    (CODE)
                                  10250 	.area CONST   (CODE)
      000A81                      10251 ___str_81:
      000A81 4F 64 64             10252 	.ascii "Odd"
      000A84 0A                   10253 	.db 0x0a
      000A85 00                   10254 	.db 0x00
                                  10255 	.area CSEG    (CODE)
                                  10256 	.area CONST   (CODE)
      000A86                      10257 ___str_82:
      000A86 4E 6F 6E 65          10258 	.ascii "None"
      000A8A 0A                   10259 	.db 0x0a
      000A8B 00                   10260 	.db 0x00
                                  10261 	.area CSEG    (CODE)
                                  10262 	.area CONST   (CODE)
      000A8C                      10263 ___str_83:
      000A8C 0A                   10264 	.db 0x0a
      000A8D 45 6E 74 65 72       10265 	.ascii "Enter"
      000A92 0A                   10266 	.db 0x0a
      000A93 63 68 61 72 61 63 74 10267 	.ascii "character"
             65 72
      000A9C 0A                   10268 	.db 0x0a
      000A9D 74 6F 20 73 65 6E 64 10269 	.ascii "to send:"
             3A
      000AA5 0A                   10270 	.db 0x0a
      000AA6 0A                   10271 	.db 0x0a
      000AA7 20 20 20 5F          10272 	.ascii "   _"
      000AAB 00                   10273 	.db 0x00
                                  10274 	.area CSEG    (CODE)
                                  10275 	.area CONST   (CODE)
      000AAC                      10276 ___str_84:
      000AAC 0A                   10277 	.db 0x0a
      000AAD 28 31 29 20 44 61 74 10278 	.ascii "(1) Data Rate"
             61 20 52 61 74 65
      000ABA 00                   10279 	.db 0x00
                                  10280 	.area CSEG    (CODE)
                                  10281 	.area CONST   (CODE)
      000ABB                      10282 ___str_85:
      000ABB 0A                   10283 	.db 0x0a
      000ABC 28 32 29 20 23 20 6F 10284 	.ascii "(2) # of Data"
             66 20 44 61 74 61
      000AC9 0A                   10285 	.db 0x0a
      000ACA 20 20 20 20 42 69 74 10286 	.ascii "    Bits"
             73
      000AD2 00                   10287 	.db 0x00
                                  10288 	.area CSEG    (CODE)
                                  10289 	.area CONST   (CODE)
      000AD3                      10290 ___str_86:
      000AD3 0A                   10291 	.db 0x0a
      000AD4 28 33 29 20 50 61 72 10292 	.ascii "(3) Parity"
             69 74 79
      000ADE 00                   10293 	.db 0x00
                                  10294 	.area CSEG    (CODE)
                                  10295 	.area CONST   (CODE)
      000ADF                      10296 ___str_87:
      000ADF 0A                   10297 	.db 0x0a
      000AE0 28 34 29 20 53 65 6E 10298 	.ascii "(4) Send Data"
             64 20 44 61 74 61
      000AED 00                   10299 	.db 0x00
                                  10300 	.area CSEG    (CODE)
                                  10301 	.area CONST   (CODE)
      000AEE                      10302 ___str_88:
      000AEE 0A                   10303 	.db 0x0a
      000AEF 28 45 29 20 45 6E 64 10304 	.ascii "(E) End"
      000AF6 0A                   10305 	.db 0x0a
      000AF7 00                   10306 	.db 0x00
                                  10307 	.area CSEG    (CODE)
                                  10308 	.area CONST   (CODE)
      000AF8                      10309 ___str_89:
      000AF8 20 20 20 43 61 6D 65 10310 	.ascii "   Cameron"
             72 6F 6E
      000B02 0A                   10311 	.db 0x0a
      000B03 20 20 20 42 69 6E 69 10312 	.ascii "   Biniamow"
             61 6D 6F 77
      000B0E 0A                   10313 	.db 0x0a
      000B0F 00                   10314 	.db 0x00
                                  10315 	.area CSEG    (CODE)
                                  10316 	.area CONST   (CODE)
      000B10                      10317 ___str_90:
      000B10 20 20 45 43 45 4E 2D 10318 	.ascii "  ECEN-4330"
             34 33 33 30
      000B1B 0A                   10319 	.db 0x0a
      000B1C 0A                   10320 	.db 0x0a
      000B1D 00                   10321 	.db 0x00
                                  10322 	.area CSEG    (CODE)
                                  10323 	.area CONST   (CODE)
      000B1E                      10324 ___str_91:
      000B1E 28 41 29 20 52 41 4D 10325 	.ascii "(A) RAM CHECK"
             20 43 48 45 43 4B
      000B2B 0A                   10326 	.db 0x0a
      000B2C 00                   10327 	.db 0x00
                                  10328 	.area CSEG    (CODE)
                                  10329 	.area CONST   (CODE)
      000B2D                      10330 ___str_92:
      000B2D 28 42 29 20 4D 4F 56 10331 	.ascii "(B) MOVE"
             45
      000B35 0A                   10332 	.db 0x0a
      000B36 00                   10333 	.db 0x00
                                  10334 	.area CSEG    (CODE)
                                  10335 	.area CONST   (CODE)
      000B37                      10336 ___str_93:
      000B37 28 43 29 20 43 4F 55 10337 	.ascii "(C) COUNT"
             4E 54
      000B40 0A                   10338 	.db 0x0a
      000B41 00                   10339 	.db 0x00
                                  10340 	.area CSEG    (CODE)
                                  10341 	.area CONST   (CODE)
      000B42                      10342 ___str_94:
      000B42 28 44 29 20 44 55 4D 10343 	.ascii "(D) DUMP"
             50
      000B4A 0A                   10344 	.db 0x0a
      000B4B 00                   10345 	.db 0x00
                                  10346 	.area CSEG    (CODE)
                                  10347 	.area CONST   (CODE)
      000B4C                      10348 ___str_95:
      000B4C 28 45 29 20 45 44 49 10349 	.ascii "(E) EDIT"
             54
      000B54 0A                   10350 	.db 0x0a
      000B55 00                   10351 	.db 0x00
                                  10352 	.area CSEG    (CODE)
                                  10353 	.area CONST   (CODE)
      000B56                      10354 ___str_96:
      000B56 28 46 29 20 46 49 4E 10355 	.ascii "(F) FIND"
             44
      000B5E 0A                   10356 	.db 0x0a
      000B5F 00                   10357 	.db 0x00
                                  10358 	.area CSEG    (CODE)
                                  10359 	.area CONST   (CODE)
      000B60                      10360 ___str_97:
      000B60 28 31 29 20 55 41 52 10361 	.ascii "(1) UART"
             54
      000B68 0A                   10362 	.db 0x0a
      000B69 00                   10363 	.db 0x00
                                  10364 	.area CSEG    (CODE)
                                  10365 	.area CONST   (CODE)
      000B6A                      10366 ___str_98:
      000B6A 53 70 72 69 6E 67 20 10367 	.ascii "Spring 2021"
             32 30 32 31
      000B75 00                   10368 	.db 0x00
                                  10369 	.area CSEG    (CODE)
                                  10370 	.area XINIT   (CODE)
                                  10371 	.area CABS    (ABS,CODE)
